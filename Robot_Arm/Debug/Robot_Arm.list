
Robot_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009764  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  080098f4  080098f4  0000a8f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ac4  08009ac4  0000b060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009ac4  08009ac4  0000aac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009acc  08009acc  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009acc  08009acc  0000aacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ad0  08009ad0  0000aad0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08009ad4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cbc  20000060  08009b34  0000b060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d1c  08009b34  0000bd1c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ab13  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035bd  00000000  00000000  00025ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00029160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011fe  00000000  00000000  0002a870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c89  00000000  00000000  0002ba6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019426  00000000  00000000  0002f6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcfed  00000000  00000000  00048b1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145b0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006288  00000000  00000000  00145b50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0014bdd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080098dc 	.word	0x080098dc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080098dc 	.word	0x080098dc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_d2iz>:
 8000558:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800055c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000560:	d215      	bcs.n	800058e <__aeabi_d2iz+0x36>
 8000562:	d511      	bpl.n	8000588 <__aeabi_d2iz+0x30>
 8000564:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000568:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800056c:	d912      	bls.n	8000594 <__aeabi_d2iz+0x3c>
 800056e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000572:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000576:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800057a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057e:	fa23 f002 	lsr.w	r0, r3, r2
 8000582:	bf18      	it	ne
 8000584:	4240      	negne	r0, r0
 8000586:	4770      	bx	lr
 8000588:	f04f 0000 	mov.w	r0, #0
 800058c:	4770      	bx	lr
 800058e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000592:	d105      	bne.n	80005a0 <__aeabi_d2iz+0x48>
 8000594:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000598:	bf08      	it	eq
 800059a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 800059e:	4770      	bx	lr
 80005a0:	f04f 0000 	mov.w	r0, #0
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <__aeabi_uldivmod>:
 80005a8:	b953      	cbnz	r3, 80005c0 <__aeabi_uldivmod+0x18>
 80005aa:	b94a      	cbnz	r2, 80005c0 <__aeabi_uldivmod+0x18>
 80005ac:	2900      	cmp	r1, #0
 80005ae:	bf08      	it	eq
 80005b0:	2800      	cmpeq	r0, #0
 80005b2:	bf1c      	itt	ne
 80005b4:	f04f 31ff 	movne.w	r1, #4294967295
 80005b8:	f04f 30ff 	movne.w	r0, #4294967295
 80005bc:	f000 b988 	b.w	80008d0 <__aeabi_idiv0>
 80005c0:	f1ad 0c08 	sub.w	ip, sp, #8
 80005c4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005c8:	f000 f806 	bl	80005d8 <__udivmoddi4>
 80005cc:	f8dd e004 	ldr.w	lr, [sp, #4]
 80005d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005d4:	b004      	add	sp, #16
 80005d6:	4770      	bx	lr

080005d8 <__udivmoddi4>:
 80005d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005dc:	9d08      	ldr	r5, [sp, #32]
 80005de:	468e      	mov	lr, r1
 80005e0:	4604      	mov	r4, r0
 80005e2:	4688      	mov	r8, r1
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d14a      	bne.n	800067e <__udivmoddi4+0xa6>
 80005e8:	428a      	cmp	r2, r1
 80005ea:	4617      	mov	r7, r2
 80005ec:	d962      	bls.n	80006b4 <__udivmoddi4+0xdc>
 80005ee:	fab2 f682 	clz	r6, r2
 80005f2:	b14e      	cbz	r6, 8000608 <__udivmoddi4+0x30>
 80005f4:	f1c6 0320 	rsb	r3, r6, #32
 80005f8:	fa01 f806 	lsl.w	r8, r1, r6
 80005fc:	fa20 f303 	lsr.w	r3, r0, r3
 8000600:	40b7      	lsls	r7, r6
 8000602:	ea43 0808 	orr.w	r8, r3, r8
 8000606:	40b4      	lsls	r4, r6
 8000608:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800060c:	fa1f fc87 	uxth.w	ip, r7
 8000610:	fbb8 f1fe 	udiv	r1, r8, lr
 8000614:	0c23      	lsrs	r3, r4, #16
 8000616:	fb0e 8811 	mls	r8, lr, r1, r8
 800061a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800061e:	fb01 f20c 	mul.w	r2, r1, ip
 8000622:	429a      	cmp	r2, r3
 8000624:	d909      	bls.n	800063a <__udivmoddi4+0x62>
 8000626:	18fb      	adds	r3, r7, r3
 8000628:	f101 30ff 	add.w	r0, r1, #4294967295
 800062c:	f080 80ea 	bcs.w	8000804 <__udivmoddi4+0x22c>
 8000630:	429a      	cmp	r2, r3
 8000632:	f240 80e7 	bls.w	8000804 <__udivmoddi4+0x22c>
 8000636:	3902      	subs	r1, #2
 8000638:	443b      	add	r3, r7
 800063a:	1a9a      	subs	r2, r3, r2
 800063c:	b2a3      	uxth	r3, r4
 800063e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000642:	fb0e 2210 	mls	r2, lr, r0, r2
 8000646:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800064a:	fb00 fc0c 	mul.w	ip, r0, ip
 800064e:	459c      	cmp	ip, r3
 8000650:	d909      	bls.n	8000666 <__udivmoddi4+0x8e>
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	f100 32ff 	add.w	r2, r0, #4294967295
 8000658:	f080 80d6 	bcs.w	8000808 <__udivmoddi4+0x230>
 800065c:	459c      	cmp	ip, r3
 800065e:	f240 80d3 	bls.w	8000808 <__udivmoddi4+0x230>
 8000662:	443b      	add	r3, r7
 8000664:	3802      	subs	r0, #2
 8000666:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800066a:	eba3 030c 	sub.w	r3, r3, ip
 800066e:	2100      	movs	r1, #0
 8000670:	b11d      	cbz	r5, 800067a <__udivmoddi4+0xa2>
 8000672:	40f3      	lsrs	r3, r6
 8000674:	2200      	movs	r2, #0
 8000676:	e9c5 3200 	strd	r3, r2, [r5]
 800067a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800067e:	428b      	cmp	r3, r1
 8000680:	d905      	bls.n	800068e <__udivmoddi4+0xb6>
 8000682:	b10d      	cbz	r5, 8000688 <__udivmoddi4+0xb0>
 8000684:	e9c5 0100 	strd	r0, r1, [r5]
 8000688:	2100      	movs	r1, #0
 800068a:	4608      	mov	r0, r1
 800068c:	e7f5      	b.n	800067a <__udivmoddi4+0xa2>
 800068e:	fab3 f183 	clz	r1, r3
 8000692:	2900      	cmp	r1, #0
 8000694:	d146      	bne.n	8000724 <__udivmoddi4+0x14c>
 8000696:	4573      	cmp	r3, lr
 8000698:	d302      	bcc.n	80006a0 <__udivmoddi4+0xc8>
 800069a:	4282      	cmp	r2, r0
 800069c:	f200 8105 	bhi.w	80008aa <__udivmoddi4+0x2d2>
 80006a0:	1a84      	subs	r4, r0, r2
 80006a2:	eb6e 0203 	sbc.w	r2, lr, r3
 80006a6:	2001      	movs	r0, #1
 80006a8:	4690      	mov	r8, r2
 80006aa:	2d00      	cmp	r5, #0
 80006ac:	d0e5      	beq.n	800067a <__udivmoddi4+0xa2>
 80006ae:	e9c5 4800 	strd	r4, r8, [r5]
 80006b2:	e7e2      	b.n	800067a <__udivmoddi4+0xa2>
 80006b4:	2a00      	cmp	r2, #0
 80006b6:	f000 8090 	beq.w	80007da <__udivmoddi4+0x202>
 80006ba:	fab2 f682 	clz	r6, r2
 80006be:	2e00      	cmp	r6, #0
 80006c0:	f040 80a4 	bne.w	800080c <__udivmoddi4+0x234>
 80006c4:	1a8a      	subs	r2, r1, r2
 80006c6:	0c03      	lsrs	r3, r0, #16
 80006c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006cc:	b280      	uxth	r0, r0
 80006ce:	b2bc      	uxth	r4, r7
 80006d0:	2101      	movs	r1, #1
 80006d2:	fbb2 fcfe 	udiv	ip, r2, lr
 80006d6:	fb0e 221c 	mls	r2, lr, ip, r2
 80006da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006de:	fb04 f20c 	mul.w	r2, r4, ip
 80006e2:	429a      	cmp	r2, r3
 80006e4:	d907      	bls.n	80006f6 <__udivmoddi4+0x11e>
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	f10c 38ff 	add.w	r8, ip, #4294967295
 80006ec:	d202      	bcs.n	80006f4 <__udivmoddi4+0x11c>
 80006ee:	429a      	cmp	r2, r3
 80006f0:	f200 80e0 	bhi.w	80008b4 <__udivmoddi4+0x2dc>
 80006f4:	46c4      	mov	ip, r8
 80006f6:	1a9b      	subs	r3, r3, r2
 80006f8:	fbb3 f2fe 	udiv	r2, r3, lr
 80006fc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000700:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000704:	fb02 f404 	mul.w	r4, r2, r4
 8000708:	429c      	cmp	r4, r3
 800070a:	d907      	bls.n	800071c <__udivmoddi4+0x144>
 800070c:	18fb      	adds	r3, r7, r3
 800070e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000712:	d202      	bcs.n	800071a <__udivmoddi4+0x142>
 8000714:	429c      	cmp	r4, r3
 8000716:	f200 80ca 	bhi.w	80008ae <__udivmoddi4+0x2d6>
 800071a:	4602      	mov	r2, r0
 800071c:	1b1b      	subs	r3, r3, r4
 800071e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000722:	e7a5      	b.n	8000670 <__udivmoddi4+0x98>
 8000724:	f1c1 0620 	rsb	r6, r1, #32
 8000728:	408b      	lsls	r3, r1
 800072a:	fa22 f706 	lsr.w	r7, r2, r6
 800072e:	431f      	orrs	r7, r3
 8000730:	fa0e f401 	lsl.w	r4, lr, r1
 8000734:	fa20 f306 	lsr.w	r3, r0, r6
 8000738:	fa2e fe06 	lsr.w	lr, lr, r6
 800073c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000740:	4323      	orrs	r3, r4
 8000742:	fa00 f801 	lsl.w	r8, r0, r1
 8000746:	fa1f fc87 	uxth.w	ip, r7
 800074a:	fbbe f0f9 	udiv	r0, lr, r9
 800074e:	0c1c      	lsrs	r4, r3, #16
 8000750:	fb09 ee10 	mls	lr, r9, r0, lr
 8000754:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000758:	fb00 fe0c 	mul.w	lr, r0, ip
 800075c:	45a6      	cmp	lr, r4
 800075e:	fa02 f201 	lsl.w	r2, r2, r1
 8000762:	d909      	bls.n	8000778 <__udivmoddi4+0x1a0>
 8000764:	193c      	adds	r4, r7, r4
 8000766:	f100 3aff 	add.w	sl, r0, #4294967295
 800076a:	f080 809c 	bcs.w	80008a6 <__udivmoddi4+0x2ce>
 800076e:	45a6      	cmp	lr, r4
 8000770:	f240 8099 	bls.w	80008a6 <__udivmoddi4+0x2ce>
 8000774:	3802      	subs	r0, #2
 8000776:	443c      	add	r4, r7
 8000778:	eba4 040e 	sub.w	r4, r4, lr
 800077c:	fa1f fe83 	uxth.w	lr, r3
 8000780:	fbb4 f3f9 	udiv	r3, r4, r9
 8000784:	fb09 4413 	mls	r4, r9, r3, r4
 8000788:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800078c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000790:	45a4      	cmp	ip, r4
 8000792:	d908      	bls.n	80007a6 <__udivmoddi4+0x1ce>
 8000794:	193c      	adds	r4, r7, r4
 8000796:	f103 3eff 	add.w	lr, r3, #4294967295
 800079a:	f080 8082 	bcs.w	80008a2 <__udivmoddi4+0x2ca>
 800079e:	45a4      	cmp	ip, r4
 80007a0:	d97f      	bls.n	80008a2 <__udivmoddi4+0x2ca>
 80007a2:	3b02      	subs	r3, #2
 80007a4:	443c      	add	r4, r7
 80007a6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80007aa:	eba4 040c 	sub.w	r4, r4, ip
 80007ae:	fba0 ec02 	umull	lr, ip, r0, r2
 80007b2:	4564      	cmp	r4, ip
 80007b4:	4673      	mov	r3, lr
 80007b6:	46e1      	mov	r9, ip
 80007b8:	d362      	bcc.n	8000880 <__udivmoddi4+0x2a8>
 80007ba:	d05f      	beq.n	800087c <__udivmoddi4+0x2a4>
 80007bc:	b15d      	cbz	r5, 80007d6 <__udivmoddi4+0x1fe>
 80007be:	ebb8 0203 	subs.w	r2, r8, r3
 80007c2:	eb64 0409 	sbc.w	r4, r4, r9
 80007c6:	fa04 f606 	lsl.w	r6, r4, r6
 80007ca:	fa22 f301 	lsr.w	r3, r2, r1
 80007ce:	431e      	orrs	r6, r3
 80007d0:	40cc      	lsrs	r4, r1
 80007d2:	e9c5 6400 	strd	r6, r4, [r5]
 80007d6:	2100      	movs	r1, #0
 80007d8:	e74f      	b.n	800067a <__udivmoddi4+0xa2>
 80007da:	fbb1 fcf2 	udiv	ip, r1, r2
 80007de:	0c01      	lsrs	r1, r0, #16
 80007e0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80007e4:	b280      	uxth	r0, r0
 80007e6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80007ea:	463b      	mov	r3, r7
 80007ec:	4638      	mov	r0, r7
 80007ee:	463c      	mov	r4, r7
 80007f0:	46b8      	mov	r8, r7
 80007f2:	46be      	mov	lr, r7
 80007f4:	2620      	movs	r6, #32
 80007f6:	fbb1 f1f7 	udiv	r1, r1, r7
 80007fa:	eba2 0208 	sub.w	r2, r2, r8
 80007fe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000802:	e766      	b.n	80006d2 <__udivmoddi4+0xfa>
 8000804:	4601      	mov	r1, r0
 8000806:	e718      	b.n	800063a <__udivmoddi4+0x62>
 8000808:	4610      	mov	r0, r2
 800080a:	e72c      	b.n	8000666 <__udivmoddi4+0x8e>
 800080c:	f1c6 0220 	rsb	r2, r6, #32
 8000810:	fa2e f302 	lsr.w	r3, lr, r2
 8000814:	40b7      	lsls	r7, r6
 8000816:	40b1      	lsls	r1, r6
 8000818:	fa20 f202 	lsr.w	r2, r0, r2
 800081c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000820:	430a      	orrs	r2, r1
 8000822:	fbb3 f8fe 	udiv	r8, r3, lr
 8000826:	b2bc      	uxth	r4, r7
 8000828:	fb0e 3318 	mls	r3, lr, r8, r3
 800082c:	0c11      	lsrs	r1, r2, #16
 800082e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000832:	fb08 f904 	mul.w	r9, r8, r4
 8000836:	40b0      	lsls	r0, r6
 8000838:	4589      	cmp	r9, r1
 800083a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800083e:	b280      	uxth	r0, r0
 8000840:	d93e      	bls.n	80008c0 <__udivmoddi4+0x2e8>
 8000842:	1879      	adds	r1, r7, r1
 8000844:	f108 3cff 	add.w	ip, r8, #4294967295
 8000848:	d201      	bcs.n	800084e <__udivmoddi4+0x276>
 800084a:	4589      	cmp	r9, r1
 800084c:	d81f      	bhi.n	800088e <__udivmoddi4+0x2b6>
 800084e:	eba1 0109 	sub.w	r1, r1, r9
 8000852:	fbb1 f9fe 	udiv	r9, r1, lr
 8000856:	fb09 f804 	mul.w	r8, r9, r4
 800085a:	fb0e 1119 	mls	r1, lr, r9, r1
 800085e:	b292      	uxth	r2, r2
 8000860:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000864:	4542      	cmp	r2, r8
 8000866:	d229      	bcs.n	80008bc <__udivmoddi4+0x2e4>
 8000868:	18ba      	adds	r2, r7, r2
 800086a:	f109 31ff 	add.w	r1, r9, #4294967295
 800086e:	d2c4      	bcs.n	80007fa <__udivmoddi4+0x222>
 8000870:	4542      	cmp	r2, r8
 8000872:	d2c2      	bcs.n	80007fa <__udivmoddi4+0x222>
 8000874:	f1a9 0102 	sub.w	r1, r9, #2
 8000878:	443a      	add	r2, r7
 800087a:	e7be      	b.n	80007fa <__udivmoddi4+0x222>
 800087c:	45f0      	cmp	r8, lr
 800087e:	d29d      	bcs.n	80007bc <__udivmoddi4+0x1e4>
 8000880:	ebbe 0302 	subs.w	r3, lr, r2
 8000884:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000888:	3801      	subs	r0, #1
 800088a:	46e1      	mov	r9, ip
 800088c:	e796      	b.n	80007bc <__udivmoddi4+0x1e4>
 800088e:	eba7 0909 	sub.w	r9, r7, r9
 8000892:	4449      	add	r1, r9
 8000894:	f1a8 0c02 	sub.w	ip, r8, #2
 8000898:	fbb1 f9fe 	udiv	r9, r1, lr
 800089c:	fb09 f804 	mul.w	r8, r9, r4
 80008a0:	e7db      	b.n	800085a <__udivmoddi4+0x282>
 80008a2:	4673      	mov	r3, lr
 80008a4:	e77f      	b.n	80007a6 <__udivmoddi4+0x1ce>
 80008a6:	4650      	mov	r0, sl
 80008a8:	e766      	b.n	8000778 <__udivmoddi4+0x1a0>
 80008aa:	4608      	mov	r0, r1
 80008ac:	e6fd      	b.n	80006aa <__udivmoddi4+0xd2>
 80008ae:	443b      	add	r3, r7
 80008b0:	3a02      	subs	r2, #2
 80008b2:	e733      	b.n	800071c <__udivmoddi4+0x144>
 80008b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80008b8:	443b      	add	r3, r7
 80008ba:	e71c      	b.n	80006f6 <__udivmoddi4+0x11e>
 80008bc:	4649      	mov	r1, r9
 80008be:	e79c      	b.n	80007fa <__udivmoddi4+0x222>
 80008c0:	eba1 0109 	sub.w	r1, r1, r9
 80008c4:	46c4      	mov	ip, r8
 80008c6:	fbb1 f9fe 	udiv	r9, r1, lr
 80008ca:	fb09 f804 	mul.w	r8, r9, r4
 80008ce:	e7c4      	b.n	800085a <__udivmoddi4+0x282>

080008d0 <__aeabi_idiv0>:
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008d8:	f002 f872 	bl	80029c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008dc:	f000 f886 	bl	80009ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008e0:	f000 fb34 	bl	8000f4c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008e4:	f000 fb02 	bl	8000eec <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80008e8:	f000 f962 	bl	8000bb0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008ec:	f000 f9ba 	bl	8000c64 <MX_TIM3_Init>
  MX_TIM1_Init();
 80008f0:	f000 f8ce 	bl	8000a90 <MX_TIM1_Init>
  MX_TIM4_Init();
 80008f4:	f000 fa10 	bl	8000d18 <MX_TIM4_Init>
  MX_TIM8_Init();
 80008f8:	f000 fa68 	bl	8000dcc <MX_TIM8_Init>
  /* USER CODE END 2 */



  /* Init scheduler */
  osKernelInitialize();
 80008fc:	f005 fec4 	bl	8006688 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Index_Finger */
  Index_FingerHandle = osTimerNew(Index, osTimerOnce, NULL, &Index_Finger_attributes);
 8000900:	4b24      	ldr	r3, [pc, #144]	@ (8000994 <main+0xc0>)
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	4824      	ldr	r0, [pc, #144]	@ (8000998 <main+0xc4>)
 8000908:	f005 ffca 	bl	80068a0 <osTimerNew>
 800090c:	4603      	mov	r3, r0
 800090e:	4a23      	ldr	r2, [pc, #140]	@ (800099c <main+0xc8>)
 8000910:	6013      	str	r3, [r2, #0]

  /* creation of Thumb_Finger */
  Thumb_FingerHandle = osTimerNew(Thumb, osTimerOnce, NULL, &Thumb_Finger_attributes);
 8000912:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <main+0xcc>)
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	4822      	ldr	r0, [pc, #136]	@ (80009a4 <main+0xd0>)
 800091a:	f005 ffc1 	bl	80068a0 <osTimerNew>
 800091e:	4603      	mov	r3, r0
 8000920:	4a21      	ldr	r2, [pc, #132]	@ (80009a8 <main+0xd4>)
 8000922:	6013      	str	r3, [r2, #0]

  /* creation of Middle_Finger */
  Middle_FingerHandle = osTimerNew(Middle, osTimerOnce, NULL, &Middle_Finger_attributes);
 8000924:	4b21      	ldr	r3, [pc, #132]	@ (80009ac <main+0xd8>)
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	4821      	ldr	r0, [pc, #132]	@ (80009b0 <main+0xdc>)
 800092c:	f005 ffb8 	bl	80068a0 <osTimerNew>
 8000930:	4603      	mov	r3, r0
 8000932:	4a20      	ldr	r2, [pc, #128]	@ (80009b4 <main+0xe0>)
 8000934:	6013      	str	r3, [r2, #0]

  /* creation of Ring_Finger */
  Ring_FingerHandle = osTimerNew(Ring, osTimerOnce, NULL, &Ring_Finger_attributes);
 8000936:	4b20      	ldr	r3, [pc, #128]	@ (80009b8 <main+0xe4>)
 8000938:	2200      	movs	r2, #0
 800093a:	2100      	movs	r1, #0
 800093c:	481f      	ldr	r0, [pc, #124]	@ (80009bc <main+0xe8>)
 800093e:	f005 ffaf 	bl	80068a0 <osTimerNew>
 8000942:	4603      	mov	r3, r0
 8000944:	4a1e      	ldr	r2, [pc, #120]	@ (80009c0 <main+0xec>)
 8000946:	6013      	str	r3, [r2, #0]

  /* creation of Pinky_Finger */
  Pinky_FingerHandle = osTimerNew(Pinky, osTimerOnce, NULL, &Pinky_Finger_attributes);
 8000948:	4b1e      	ldr	r3, [pc, #120]	@ (80009c4 <main+0xf0>)
 800094a:	2200      	movs	r2, #0
 800094c:	2100      	movs	r1, #0
 800094e:	481e      	ldr	r0, [pc, #120]	@ (80009c8 <main+0xf4>)
 8000950:	f005 ffa6 	bl	80068a0 <osTimerNew>
 8000954:	4603      	mov	r3, r0
 8000956:	4a1d      	ldr	r2, [pc, #116]	@ (80009cc <main+0xf8>)
 8000958:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  servoQueueHandle = osMessageQueueNew(5,sizeof(ServoState), NULL);
 800095a:	2200      	movs	r2, #0
 800095c:	2110      	movs	r1, #16
 800095e:	2005      	movs	r0, #5
 8000960:	f006 f848 	bl	80069f4 <osMessageQueueNew>
 8000964:	4603      	mov	r3, r0
 8000966:	4a1a      	ldr	r2, [pc, #104]	@ (80009d0 <main+0xfc>)
 8000968:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800096a:	4a1a      	ldr	r2, [pc, #104]	@ (80009d4 <main+0x100>)
 800096c:	2100      	movs	r1, #0
 800096e:	481a      	ldr	r0, [pc, #104]	@ (80009d8 <main+0x104>)
 8000970:	f005 fed4 	bl	800671c <osThreadNew>
 8000974:	4603      	mov	r3, r0
 8000976:	4a19      	ldr	r2, [pc, #100]	@ (80009dc <main+0x108>)
 8000978:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Servo_SetMotionHandle = osThreadNew(Servo_SetMotion, NULL, &Servo_SetMotion_attributes);
 800097a:	4a19      	ldr	r2, [pc, #100]	@ (80009e0 <main+0x10c>)
 800097c:	2100      	movs	r1, #0
 800097e:	4819      	ldr	r0, [pc, #100]	@ (80009e4 <main+0x110>)
 8000980:	f005 fecc 	bl	800671c <osThreadNew>
 8000984:	4603      	mov	r3, r0
 8000986:	4a18      	ldr	r2, [pc, #96]	@ (80009e8 <main+0x114>)
 8000988:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800098a:	f005 fea1 	bl	80066d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800098e:	bf00      	nop
 8000990:	e7fd      	b.n	800098e <main+0xba>
 8000992:	bf00      	nop
 8000994:	08009a08 	.word	0x08009a08
 8000998:	08002341 	.word	0x08002341
 800099c:	20000284 	.word	0x20000284
 80009a0:	08009a18 	.word	0x08009a18
 80009a4:	0800239d 	.word	0x0800239d
 80009a8:	20000288 	.word	0x20000288
 80009ac:	08009a28 	.word	0x08009a28
 80009b0:	080023c5 	.word	0x080023c5
 80009b4:	2000028c 	.word	0x2000028c
 80009b8:	08009a38 	.word	0x08009a38
 80009bc:	080023ed 	.word	0x080023ed
 80009c0:	20000290 	.word	0x20000290
 80009c4:	08009a48 	.word	0x08009a48
 80009c8:	08002415 	.word	0x08002415
 80009cc:	20000294 	.word	0x20000294
 80009d0:	20000298 	.word	0x20000298
 80009d4:	080099e4 	.word	0x080099e4
 80009d8:	08002165 	.word	0x08002165
 80009dc:	20000280 	.word	0x20000280
 80009e0:	08009a58 	.word	0x08009a58
 80009e4:	08001115 	.word	0x08001115
 80009e8:	2000029c 	.word	0x2000029c

080009ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b096      	sub	sp, #88	@ 0x58
 80009f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f2:	f107 0314 	add.w	r3, r7, #20
 80009f6:	2244      	movs	r2, #68	@ 0x44
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f008 ff34 	bl	8009868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a00:	463b      	mov	r3, r7
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
 8000a0c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a0e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000a12:	f002 fb35 	bl	8003080 <HAL_PWREx_ControlVoltageScaling>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a1c:	f001 fd20 	bl	8002460 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a20:	2302      	movs	r3, #2
 8000a22:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a28:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2a:	2310      	movs	r3, #16
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a32:	2302      	movs	r3, #2
 8000a34:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a3a:	230a      	movs	r3, #10
 8000a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a3e:	2307      	movs	r3, #7
 8000a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f002 fb6c 	bl	800312c <HAL_RCC_OscConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a5a:	f001 fd01 	bl	8002460 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5e:	230f      	movs	r3, #15
 8000a60:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a62:	2303      	movs	r3, #3
 8000a64:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a72:	463b      	mov	r3, r7
 8000a74:	2104      	movs	r1, #4
 8000a76:	4618      	mov	r0, r3
 8000a78:	f002 ff34 	bl	80038e4 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a82:	f001 fced 	bl	8002460 <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3758      	adds	r7, #88	@ 0x58
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
	...

08000a90 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b096      	sub	sp, #88	@ 0x58
 8000a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a96:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aa2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
 8000ab0:	611a      	str	r2, [r3, #16]
 8000ab2:	615a      	str	r2, [r3, #20]
 8000ab4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	222c      	movs	r2, #44	@ 0x2c
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f008 fed3 	bl	8009868 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ac2:	4b39      	ldr	r3, [pc, #228]	@ (8000ba8 <MX_TIM1_Init+0x118>)
 8000ac4:	4a39      	ldr	r2, [pc, #228]	@ (8000bac <MX_TIM1_Init+0x11c>)
 8000ac6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000ac8:	4b37      	ldr	r3, [pc, #220]	@ (8000ba8 <MX_TIM1_Init+0x118>)
 8000aca:	224f      	movs	r2, #79	@ 0x4f
 8000acc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b36      	ldr	r3, [pc, #216]	@ (8000ba8 <MX_TIM1_Init+0x118>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000ad4:	4b34      	ldr	r3, [pc, #208]	@ (8000ba8 <MX_TIM1_Init+0x118>)
 8000ad6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000ada:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b32      	ldr	r3, [pc, #200]	@ (8000ba8 <MX_TIM1_Init+0x118>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ae2:	4b31      	ldr	r3, [pc, #196]	@ (8000ba8 <MX_TIM1_Init+0x118>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae8:	4b2f      	ldr	r3, [pc, #188]	@ (8000ba8 <MX_TIM1_Init+0x118>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aee:	482e      	ldr	r0, [pc, #184]	@ (8000ba8 <MX_TIM1_Init+0x118>)
 8000af0:	f003 fedc 	bl	80048ac <HAL_TIM_PWM_Init>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000afa:	f001 fcb1 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000afe:	2300      	movs	r3, #0
 8000b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b0a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4825      	ldr	r0, [pc, #148]	@ (8000ba8 <MX_TIM1_Init+0x118>)
 8000b12:	f004 fea5 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b1c:	f001 fca0 	bl	8002460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b20:	2360      	movs	r3, #96	@ 0x60
 8000b22:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b34:	2300      	movs	r3, #0
 8000b36:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b3c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b40:	2200      	movs	r2, #0
 8000b42:	4619      	mov	r1, r3
 8000b44:	4818      	ldr	r0, [pc, #96]	@ (8000ba8 <MX_TIM1_Init+0x118>)
 8000b46:	f004 f9ad 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b50:	f001 fc86 	bl	8002460 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b6c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b72:	2300      	movs	r3, #0
 8000b74:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	4619      	mov	r1, r3
 8000b88:	4807      	ldr	r0, [pc, #28]	@ (8000ba8 <MX_TIM1_Init+0x118>)
 8000b8a:	f004 fef1 	bl	8005970 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000b94:	f001 fc64 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b98:	4803      	ldr	r0, [pc, #12]	@ (8000ba8 <MX_TIM1_Init+0x118>)
 8000b9a:	f001 fcfd 	bl	8002598 <HAL_TIM_MspPostInit>

}
 8000b9e:	bf00      	nop
 8000ba0:	3758      	adds	r7, #88	@ 0x58
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000007c 	.word	0x2000007c
 8000bac:	40012c00 	.word	0x40012c00

08000bb0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	@ 0x28
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc2:	463b      	mov	r3, r7
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]
 8000bd0:	615a      	str	r2, [r3, #20]
 8000bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bd4:	4b22      	ldr	r3, [pc, #136]	@ (8000c60 <MX_TIM2_Init+0xb0>)
 8000bd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000bda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000bdc:	4b20      	ldr	r3, [pc, #128]	@ (8000c60 <MX_TIM2_Init+0xb0>)
 8000bde:	224f      	movs	r2, #79	@ 0x4f
 8000be0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	@ (8000c60 <MX_TIM2_Init+0xb0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000be8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c60 <MX_TIM2_Init+0xb0>)
 8000bea:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000bee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c60 <MX_TIM2_Init+0xb0>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c60 <MX_TIM2_Init+0xb0>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bfc:	4818      	ldr	r0, [pc, #96]	@ (8000c60 <MX_TIM2_Init+0xb0>)
 8000bfe:	f003 fe55 	bl	80048ac <HAL_TIM_PWM_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c08:	f001 fc2a 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4811      	ldr	r0, [pc, #68]	@ (8000c60 <MX_TIM2_Init+0xb0>)
 8000c1c:	f004 fe20 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000c26:	f001 fc1b 	bl	8002460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c2a:	2360      	movs	r3, #96	@ 0x60
 8000c2c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4807      	ldr	r0, [pc, #28]	@ (8000c60 <MX_TIM2_Init+0xb0>)
 8000c42:	f004 f92f 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000c4c:	f001 fc08 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c50:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <MX_TIM2_Init+0xb0>)
 8000c52:	f001 fca1 	bl	8002598 <HAL_TIM_MspPostInit>

}
 8000c56:	bf00      	nop
 8000c58:	3728      	adds	r7, #40	@ 0x28
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200000c8 	.word	0x200000c8

08000c64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08a      	sub	sp, #40	@ 0x28
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c76:	463b      	mov	r3, r7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
 8000c84:	615a      	str	r2, [r3, #20]
 8000c86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c88:	4b21      	ldr	r3, [pc, #132]	@ (8000d10 <MX_TIM3_Init+0xac>)
 8000c8a:	4a22      	ldr	r2, [pc, #136]	@ (8000d14 <MX_TIM3_Init+0xb0>)
 8000c8c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000c8e:	4b20      	ldr	r3, [pc, #128]	@ (8000d10 <MX_TIM3_Init+0xac>)
 8000c90:	224f      	movs	r2, #79	@ 0x4f
 8000c92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c94:	4b1e      	ldr	r3, [pc, #120]	@ (8000d10 <MX_TIM3_Init+0xac>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8000d10 <MX_TIM3_Init+0xac>)
 8000c9c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000ca0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d10 <MX_TIM3_Init+0xac>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca8:	4b19      	ldr	r3, [pc, #100]	@ (8000d10 <MX_TIM3_Init+0xac>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000cae:	4818      	ldr	r0, [pc, #96]	@ (8000d10 <MX_TIM3_Init+0xac>)
 8000cb0:	f003 fdfc 	bl	80048ac <HAL_TIM_PWM_Init>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000cba:	f001 fbd1 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4810      	ldr	r0, [pc, #64]	@ (8000d10 <MX_TIM3_Init+0xac>)
 8000cce:	f004 fdc7 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000cd8:	f001 fbc2 	bl	8002460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cdc:	2360      	movs	r3, #96	@ 0x60
 8000cde:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cec:	463b      	mov	r3, r7
 8000cee:	2200      	movs	r2, #0
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4807      	ldr	r0, [pc, #28]	@ (8000d10 <MX_TIM3_Init+0xac>)
 8000cf4:	f004 f8d6 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000cfe:	f001 fbaf 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d02:	4803      	ldr	r0, [pc, #12]	@ (8000d10 <MX_TIM3_Init+0xac>)
 8000d04:	f001 fc48 	bl	8002598 <HAL_TIM_MspPostInit>

}
 8000d08:	bf00      	nop
 8000d0a:	3728      	adds	r7, #40	@ 0x28
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000114 	.word	0x20000114
 8000d14:	40000400 	.word	0x40000400

08000d18 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08a      	sub	sp, #40	@ 0x28
 8000d1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d1e:	f107 031c 	add.w	r3, r7, #28
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
 8000d38:	615a      	str	r2, [r3, #20]
 8000d3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d3c:	4b21      	ldr	r3, [pc, #132]	@ (8000dc4 <MX_TIM4_Init+0xac>)
 8000d3e:	4a22      	ldr	r2, [pc, #136]	@ (8000dc8 <MX_TIM4_Init+0xb0>)
 8000d40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8000d42:	4b20      	ldr	r3, [pc, #128]	@ (8000dc4 <MX_TIM4_Init+0xac>)
 8000d44:	224f      	movs	r2, #79	@ 0x4f
 8000d46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d48:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc4 <MX_TIM4_Init+0xac>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc4 <MX_TIM4_Init+0xac>)
 8000d50:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000d54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d56:	4b1b      	ldr	r3, [pc, #108]	@ (8000dc4 <MX_TIM4_Init+0xac>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d5c:	4b19      	ldr	r3, [pc, #100]	@ (8000dc4 <MX_TIM4_Init+0xac>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000d62:	4818      	ldr	r0, [pc, #96]	@ (8000dc4 <MX_TIM4_Init+0xac>)
 8000d64:	f003 fda2 	bl	80048ac <HAL_TIM_PWM_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000d6e:	f001 fb77 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d72:	2300      	movs	r3, #0
 8000d74:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d7a:	f107 031c 	add.w	r3, r7, #28
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4810      	ldr	r0, [pc, #64]	@ (8000dc4 <MX_TIM4_Init+0xac>)
 8000d82:	f004 fd6d 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000d8c:	f001 fb68 	bl	8002460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d90:	2360      	movs	r3, #96	@ 0x60
 8000d92:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	4619      	mov	r1, r3
 8000da6:	4807      	ldr	r0, [pc, #28]	@ (8000dc4 <MX_TIM4_Init+0xac>)
 8000da8:	f004 f87c 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000db2:	f001 fb55 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000db6:	4803      	ldr	r0, [pc, #12]	@ (8000dc4 <MX_TIM4_Init+0xac>)
 8000db8:	f001 fbee 	bl	8002598 <HAL_TIM_MspPostInit>

}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	@ 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000160 	.word	0x20000160
 8000dc8:	40000800 	.word	0x40000800

08000dcc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b096      	sub	sp, #88	@ 0x58
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	605a      	str	r2, [r3, #4]
 8000ddc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dde:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
 8000dec:	611a      	str	r2, [r3, #16]
 8000dee:	615a      	str	r2, [r3, #20]
 8000df0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	222c      	movs	r2, #44	@ 0x2c
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f008 fd35 	bl	8009868 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000dfe:	4b39      	ldr	r3, [pc, #228]	@ (8000ee4 <MX_TIM8_Init+0x118>)
 8000e00:	4a39      	ldr	r2, [pc, #228]	@ (8000ee8 <MX_TIM8_Init+0x11c>)
 8000e02:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8000e04:	4b37      	ldr	r3, [pc, #220]	@ (8000ee4 <MX_TIM8_Init+0x118>)
 8000e06:	224f      	movs	r2, #79	@ 0x4f
 8000e08:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0a:	4b36      	ldr	r3, [pc, #216]	@ (8000ee4 <MX_TIM8_Init+0x118>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8000e10:	4b34      	ldr	r3, [pc, #208]	@ (8000ee4 <MX_TIM8_Init+0x118>)
 8000e12:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000e16:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b32      	ldr	r3, [pc, #200]	@ (8000ee4 <MX_TIM8_Init+0x118>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e1e:	4b31      	ldr	r3, [pc, #196]	@ (8000ee4 <MX_TIM8_Init+0x118>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e24:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <MX_TIM8_Init+0x118>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e2a:	482e      	ldr	r0, [pc, #184]	@ (8000ee4 <MX_TIM8_Init+0x118>)
 8000e2c:	f003 fd3e 	bl	80048ac <HAL_TIM_PWM_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000e36:	f001 fb13 	bl	8002460 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e46:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4825      	ldr	r0, [pc, #148]	@ (8000ee4 <MX_TIM8_Init+0x118>)
 8000e4e:	f004 fd07 	bl	8005860 <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e58:	f001 fb02 	bl	8002460 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5c:	2360      	movs	r3, #96	@ 0x60
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e70:	2300      	movs	r3, #0
 8000e72:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e78:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4818      	ldr	r0, [pc, #96]	@ (8000ee4 <MX_TIM8_Init+0x118>)
 8000e82:	f004 f80f 	bl	8004ea4 <HAL_TIM_PWM_ConfigChannel>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000e8c:	f001 fae8 	bl	8002460 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ea4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ea8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000eb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec0:	1d3b      	adds	r3, r7, #4
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4807      	ldr	r0, [pc, #28]	@ (8000ee4 <MX_TIM8_Init+0x118>)
 8000ec6:	f004 fd53 	bl	8005970 <HAL_TIMEx_ConfigBreakDeadTime>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000ed0:	f001 fac6 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ed4:	4803      	ldr	r0, [pc, #12]	@ (8000ee4 <MX_TIM8_Init+0x118>)
 8000ed6:	f001 fb5f 	bl	8002598 <HAL_TIM_MspPostInit>

}
 8000eda:	bf00      	nop
 8000edc:	3758      	adds	r7, #88	@ 0x58
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	200001ac 	.word	0x200001ac
 8000ee8:	40013400 	.word	0x40013400

08000eec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000ef2:	4a15      	ldr	r2, [pc, #84]	@ (8000f48 <MX_USART2_UART_Init+0x5c>)
 8000ef4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef6:	4b13      	ldr	r3, [pc, #76]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000ef8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000efc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efe:	4b11      	ldr	r3, [pc, #68]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f12:	220c      	movs	r2, #12
 8000f14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f1c:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f22:	4b08      	ldr	r3, [pc, #32]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f2e:	4805      	ldr	r0, [pc, #20]	@ (8000f44 <MX_USART2_UART_Init+0x58>)
 8000f30:	f004 fdba 	bl	8005aa8 <HAL_UART_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f3a:	f001 fa91 	bl	8002460 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001f8 	.word	0x200001f8
 8000f48:	40004400 	.word	0x40004400

08000f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	4b2f      	ldr	r3, [pc, #188]	@ (8001020 <MX_GPIO_Init+0xd4>)
 8000f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f66:	4a2e      	ldr	r2, [pc, #184]	@ (8001020 <MX_GPIO_Init+0xd4>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001020 <MX_GPIO_Init+0xd4>)
 8000f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	4b29      	ldr	r3, [pc, #164]	@ (8001020 <MX_GPIO_Init+0xd4>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7e:	4a28      	ldr	r2, [pc, #160]	@ (8001020 <MX_GPIO_Init+0xd4>)
 8000f80:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f86:	4b26      	ldr	r3, [pc, #152]	@ (8001020 <MX_GPIO_Init+0xd4>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <MX_GPIO_Init+0xd4>)
 8000f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f96:	4a22      	ldr	r2, [pc, #136]	@ (8001020 <MX_GPIO_Init+0xd4>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f9e:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <MX_GPIO_Init+0xd4>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60bb      	str	r3, [r7, #8]
 8000fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <MX_GPIO_Init+0xd4>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fae:	4a1c      	ldr	r2, [pc, #112]	@ (8001020 <MX_GPIO_Init+0xd4>)
 8000fb0:	f043 0302 	orr.w	r3, r3, #2
 8000fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8001020 <MX_GPIO_Init+0xd4>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fba:	f003 0302 	and.w	r3, r3, #2
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2120      	movs	r1, #32
 8000fc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fca:	f002 f801 	bl	8002fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fd4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480f      	ldr	r0, [pc, #60]	@ (8001024 <MX_GPIO_Init+0xd8>)
 8000fe6:	f001 fe31 	bl	8002c4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fea:	2320      	movs	r3, #32
 8000fec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	f107 0314 	add.w	r3, r7, #20
 8000ffe:	4619      	mov	r1, r3
 8001000:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001004:	f001 fe22 	bl	8002c4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001008:	2200      	movs	r2, #0
 800100a:	2105      	movs	r1, #5
 800100c:	2028      	movs	r0, #40	@ 0x28
 800100e:	f001 fdf3 	bl	8002bf8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001012:	2028      	movs	r0, #40	@ 0x28
 8001014:	f001 fe0c 	bl	8002c30 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	@ 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000
 8001024:	48000800 	.word	0x48000800

08001028 <IsButtonPressed>:



/* Button press detection function - modify for your specific board */
uint8_t IsButtonPressed(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* Assuming B2 is connected to PC13 (common on many Nucleo boards) */
  /* Note: B2 is typically active LOW (returns 0 when pressed) */

  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 800102c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001030:	4805      	ldr	r0, [pc, #20]	@ (8001048 <IsButtonPressed+0x20>)
 8001032:	f001 ffb5 	bl	8002fa0 <HAL_GPIO_ReadPin>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d101      	bne.n	8001040 <IsButtonPressed+0x18>
  {
	return 1; /* Button pressed */
 800103c:	2301      	movs	r3, #1
 800103e:	e000      	b.n	8001042 <IsButtonPressed+0x1a>
  }
  return 0; /* Button not pressed */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	48000800 	.word	0x48000800

0800104c <ProcessReceivedMessage>:
  }
}

/* Process the complete received message, currently it echos back to the UART port once B1 has been pressed. Later this needs to be changes to sign the letters of the words */
void ProcessReceivedMessage(char* msg)
{
 800104c:	b5b0      	push	{r4, r5, r7, lr}
 800104e:	b096      	sub	sp, #88	@ 0x58
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* First, send a notification that button was pressed */
  char buttonMsg[] = "Button B2 pressed - Echoing received message:\r\n";
 8001054:	4b2b      	ldr	r3, [pc, #172]	@ (8001104 <ProcessReceivedMessage+0xb8>)
 8001056:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800105a:	461d      	mov	r5, r3
 800105c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800105e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001064:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001068:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart2, (uint8_t*)buttonMsg, strlen(buttonMsg), 1000);
 800106c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff f8ad 	bl	80001d0 <strlen>
 8001076:	4603      	mov	r3, r0
 8001078:	b29a      	uxth	r2, r3
 800107a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800107e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001082:	4821      	ldr	r0, [pc, #132]	@ (8001108 <ProcessReceivedMessage+0xbc>)
 8001084:	f004 fd5e 	bl	8005b44 <HAL_UART_Transmit>

  /* Echo the exact message that was received */
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff f8a1 	bl	80001d0 <strlen>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	481b      	ldr	r0, [pc, #108]	@ (8001108 <ProcessReceivedMessage+0xbc>)
 800109a:	f004 fd53 	bl	8005b44 <HAL_UART_Transmit>

  /* Add a newline for better readability */
  char newline[] = "\r\n";
 800109e:	4a1b      	ldr	r2, [pc, #108]	@ (800110c <ProcessReceivedMessage+0xc0>)
 80010a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a4:	6812      	ldr	r2, [r2, #0]
 80010a6:	4611      	mov	r1, r2
 80010a8:	8019      	strh	r1, [r3, #0]
 80010aa:	3302      	adds	r3, #2
 80010ac:	0c12      	lsrs	r2, r2, #16
 80010ae:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)newline, strlen(newline), 1000);
 80010b0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff f88b 	bl	80001d0 <strlen>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80010c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010c6:	4810      	ldr	r0, [pc, #64]	@ (8001108 <ProcessReceivedMessage+0xbc>)
 80010c8:	f004 fd3c 	bl	8005b44 <HAL_UART_Transmit>

  /* Optional: Notify completion */
  char completeMsg[] = "Message echo complete\r\n";
 80010cc:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <ProcessReceivedMessage+0xc4>)
 80010ce:	f107 040c 	add.w	r4, r7, #12
 80010d2:	461d      	mov	r5, r3
 80010d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010d8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80010dc:	e884 0003 	stmia.w	r4, {r0, r1}
  HAL_UART_Transmit(&huart2, (uint8_t*)completeMsg, strlen(completeMsg), 1000);
 80010e0:	f107 030c 	add.w	r3, r7, #12
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f873 	bl	80001d0 <strlen>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	f107 010c 	add.w	r1, r7, #12
 80010f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010f6:	4804      	ldr	r0, [pc, #16]	@ (8001108 <ProcessReceivedMessage+0xbc>)
 80010f8:	f004 fd24 	bl	8005b44 <HAL_UART_Transmit>

}
 80010fc:	bf00      	nop
 80010fe:	3758      	adds	r7, #88	@ 0x58
 8001100:	46bd      	mov	sp, r7
 8001102:	bdb0      	pop	{r4, r5, r7, pc}
 8001104:	08009980 	.word	0x08009980
 8001108:	200001f8 	.word	0x200001f8
 800110c:	080099b0 	.word	0x080099b0
 8001110:	080099b4 	.word	0x080099b4

08001114 <Servo_SetMotion>:
 * @param direction: STOP, CLOCKWISE, or COUNTERCLOCKWISE
 * @param speed: Speed percentage (0-100)
 * @retval None
 */

void Servo_SetMotion(void *argument) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
    (void)argument;
    ServoState newState;

    for (;;) {
        // Wait for new state from the queue
        if (osMessageQueueGet(servoQueueHandle, &newState, NULL, osWaitForever) == osOK) {
 800111c:	4b3d      	ldr	r3, [pc, #244]	@ (8001214 <Servo_SetMotion+0x100>)
 800111e:	6818      	ldr	r0, [r3, #0]
 8001120:	f107 010c 	add.w	r1, r7, #12
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
 8001128:	2200      	movs	r2, #0
 800112a:	f005 fd37 	bl	8006b9c <osMessageQueueGet>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d16a      	bne.n	800120a <Servo_SetMotion+0xf6>
            uint32_t pulse;

            // Clamp speed to 0-100%
            if (newState.speed < 0) newState.speed = 0;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	da01      	bge.n	800113e <Servo_SetMotion+0x2a>
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
            if (newState.speed > 100) newState.speed = 100;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b64      	cmp	r3, #100	@ 0x64
 8001142:	dd01      	ble.n	8001148 <Servo_SetMotion+0x34>
 8001144:	2364      	movs	r3, #100	@ 0x64
 8001146:	60fb      	str	r3, [r7, #12]

            // Calculate pulse width based on direction and speed
            if (newState.dir == STOP) {
 8001148:	7c3b      	ldrb	r3, [r7, #16]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d103      	bne.n	8001156 <Servo_SetMotion+0x42>
                pulse = SERVO_STOP;
 800114e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	e013      	b.n	800117e <Servo_SetMotion+0x6a>
            } else if (newState.dir == CLOCKWISE) { // CLOCKWISE
 8001156:	7c3b      	ldrb	r3, [r7, #16]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d109      	bne.n	8001170 <Servo_SetMotion+0x5c>
                pulse = SERVO_STOP - ((SERVO_STOP - SERVO_MAX_CW) * newState.speed / 100);
 800115c:	68fa      	ldr	r2, [r7, #12]
 800115e:	4613      	mov	r3, r2
 8001160:	079b      	lsls	r3, r3, #30
 8001162:	1a9b      	subs	r3, r3, r2
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	e006      	b.n	800117e <Servo_SetMotion+0x6a>
            } else { // DIRECTION_DOWN (COUNTERCLOCKWISE)
                pulse = SERVO_STOP + ((SERVO_MAX_CCW - SERVO_STOP) * newState.speed / 100);
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 800117c:	61fb      	str	r3, [r7, #28]
            }

            // Update servo state with calculated pulse
            servoStates[newState.finger].speed = newState.speed;
 800117e:	7e3b      	ldrb	r3, [r7, #24]
 8001180:	68fa      	ldr	r2, [r7, #12]
 8001182:	4925      	ldr	r1, [pc, #148]	@ (8001218 <Servo_SetMotion+0x104>)
 8001184:	011b      	lsls	r3, r3, #4
 8001186:	440b      	add	r3, r1
 8001188:	601a      	str	r2, [r3, #0]
            servoStates[newState.finger].dir = newState.dir;
 800118a:	7e3b      	ldrb	r3, [r7, #24]
 800118c:	7c39      	ldrb	r1, [r7, #16]
 800118e:	4a22      	ldr	r2, [pc, #136]	@ (8001218 <Servo_SetMotion+0x104>)
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	4413      	add	r3, r2
 8001194:	3304      	adds	r3, #4
 8001196:	460a      	mov	r2, r1
 8001198:	701a      	strb	r2, [r3, #0]
            servoStates[newState.finger].pulse = pulse;
 800119a:	7e3b      	ldrb	r3, [r7, #24]
 800119c:	4a1e      	ldr	r2, [pc, #120]	@ (8001218 <Servo_SetMotion+0x104>)
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	4413      	add	r3, r2
 80011a2:	3308      	adds	r3, #8
 80011a4:	69fa      	ldr	r2, [r7, #28]
 80011a6:	601a      	str	r2, [r3, #0]
            servoStates[newState.finger].finger = newState.finger; // Redundant but kept for consistency
 80011a8:	7e3b      	ldrb	r3, [r7, #24]
 80011aa:	7e39      	ldrb	r1, [r7, #24]
 80011ac:	4a1a      	ldr	r2, [pc, #104]	@ (8001218 <Servo_SetMotion+0x104>)
 80011ae:	011b      	lsls	r3, r3, #4
 80011b0:	4413      	add	r3, r2
 80011b2:	330c      	adds	r3, #12
 80011b4:	460a      	mov	r2, r1
 80011b6:	701a      	strb	r2, [r3, #0]

            // Apply pulse width to the appropriate timer
            switch (newState.finger) {
 80011b8:	7e3b      	ldrb	r3, [r7, #24]
 80011ba:	2b04      	cmp	r3, #4
 80011bc:	d825      	bhi.n	800120a <Servo_SetMotion+0xf6>
 80011be:	a201      	add	r2, pc, #4	@ (adr r2, 80011c4 <Servo_SetMotion+0xb0>)
 80011c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c4:	080011d9 	.word	0x080011d9
 80011c8:	080011e3 	.word	0x080011e3
 80011cc:	080011ed 	.word	0x080011ed
 80011d0:	080011f7 	.word	0x080011f7
 80011d4:	08001201 	.word	0x08001201
                case THUMB:
                    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 80011d8:	4b10      	ldr	r3, [pc, #64]	@ (800121c <Servo_SetMotion+0x108>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	69fa      	ldr	r2, [r7, #28]
 80011de:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 80011e0:	e013      	b.n	800120a <Servo_SetMotion+0xf6>
                case INDEX:
                    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 80011e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001220 <Servo_SetMotion+0x10c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 80011ea:	e00e      	b.n	800120a <Servo_SetMotion+0xf6>
                case MIDDLE:
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 80011ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001224 <Servo_SetMotion+0x110>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	69fa      	ldr	r2, [r7, #28]
 80011f2:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 80011f4:	e009      	b.n	800120a <Servo_SetMotion+0xf6>
                case RING:
                    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <Servo_SetMotion+0x114>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 80011fe:	e004      	b.n	800120a <Servo_SetMotion+0xf6>
                case PINKY:
                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pulse);
 8001200:	4b0a      	ldr	r3, [pc, #40]	@ (800122c <Servo_SetMotion+0x118>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 8001208:	bf00      	nop
            }
        }
        osDelay(10);
 800120a:	200a      	movs	r0, #10
 800120c:	f005 fb18 	bl	8006840 <osDelay>
        if (osMessageQueueGet(servoQueueHandle, &newState, NULL, osWaitForever) == osOK) {
 8001210:	e784      	b.n	800111c <Servo_SetMotion+0x8>
 8001212:	bf00      	nop
 8001214:	20000298 	.word	0x20000298
 8001218:	20000000 	.word	0x20000000
 800121c:	2000007c 	.word	0x2000007c
 8001220:	200000c8 	.word	0x200000c8
 8001224:	20000114 	.word	0x20000114
 8001228:	20000160 	.word	0x20000160
 800122c:	200001ac 	.word	0x200001ac

08001230 <Servo_StopAll>:
/**
 * @brief Stops all servos
 * @param None
 * @retval None
 */
void Servo_StopAll(void) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b094      	sub	sp, #80	@ 0x50
 8001234:	af00      	add	r7, sp, #0
	ServoState state1 = {0,STOP,0,INDEX}; // Stops Index Finger
 8001236:	2300      	movs	r3, #0
 8001238:	643b      	str	r3, [r7, #64]	@ 0x40
 800123a:	2300      	movs	r3, #0
 800123c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8001240:	2300      	movs	r3, #0
 8001242:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001244:	2301      	movs	r3, #1
 8001246:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 800124a:	4b30      	ldr	r3, [pc, #192]	@ (800130c <Servo_StopAll+0xdc>)
 800124c:	6818      	ldr	r0, [r3, #0]
 800124e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001252:	2300      	movs	r3, #0
 8001254:	2200      	movs	r2, #0
 8001256:	f005 fc41 	bl	8006adc <osMessageQueuePut>

	ServoState state2 = {0,STOP,0,THUMB}; // Stops Thumb
 800125a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
	osMessageQueuePut(servoQueueHandle, &state2, 0, 0);
 8001268:	4b28      	ldr	r3, [pc, #160]	@ (800130c <Servo_StopAll+0xdc>)
 800126a:	6818      	ldr	r0, [r3, #0]
 800126c:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001270:	2300      	movs	r3, #0
 8001272:	2200      	movs	r2, #0
 8001274:	f005 fc32 	bl	8006adc <osMessageQueuePut>

	ServoState state3 = {0,STOP,0,MIDDLE}; // Stops Middle Finger
 8001278:	2300      	movs	r3, #0
 800127a:	623b      	str	r3, [r7, #32]
 800127c:	2300      	movs	r3, #0
 800127e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001282:	2300      	movs	r3, #0
 8001284:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001286:	2302      	movs	r3, #2
 8001288:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	osMessageQueuePut(servoQueueHandle, &state3, 0, 0);
 800128c:	4b1f      	ldr	r3, [pc, #124]	@ (800130c <Servo_StopAll+0xdc>)
 800128e:	6818      	ldr	r0, [r3, #0]
 8001290:	f107 0120 	add.w	r1, r7, #32
 8001294:	2300      	movs	r3, #0
 8001296:	2200      	movs	r2, #0
 8001298:	f005 fc20 	bl	8006adc <osMessageQueuePut>

	ServoState state4 = {0,STOP,0,RING}; // Stops Ring Finger
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	2300      	movs	r3, #0
 80012a2:	753b      	strb	r3, [r7, #20]
 80012a4:	2300      	movs	r3, #0
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	2303      	movs	r3, #3
 80012aa:	773b      	strb	r3, [r7, #28]
	osMessageQueuePut(servoQueueHandle, &state4, 0, 0);
 80012ac:	4b17      	ldr	r3, [pc, #92]	@ (800130c <Servo_StopAll+0xdc>)
 80012ae:	6818      	ldr	r0, [r3, #0]
 80012b0:	f107 0110 	add.w	r1, r7, #16
 80012b4:	2300      	movs	r3, #0
 80012b6:	2200      	movs	r2, #0
 80012b8:	f005 fc10 	bl	8006adc <osMessageQueuePut>

	ServoState state5 = {0,STOP,0,PINKY}; // Stops Pinky Finger
 80012bc:	2300      	movs	r3, #0
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	2300      	movs	r3, #0
 80012c2:	713b      	strb	r3, [r7, #4]
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
 80012c8:	2304      	movs	r3, #4
 80012ca:	733b      	strb	r3, [r7, #12]
	osMessageQueuePut(servoQueueHandle, &state5, 0, 0);
 80012cc:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <Servo_StopAll+0xdc>)
 80012ce:	6818      	ldr	r0, [r3, #0]
 80012d0:	4639      	mov	r1, r7
 80012d2:	2300      	movs	r3, #0
 80012d4:	2200      	movs	r2, #0
 80012d6:	f005 fc01 	bl	8006adc <osMessageQueuePut>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80012da:	2100      	movs	r1, #0
 80012dc:	480c      	ldr	r0, [pc, #48]	@ (8001310 <Servo_StopAll+0xe0>)
 80012de:	f003 fc43 	bl	8004b68 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80012e2:	2100      	movs	r1, #0
 80012e4:	480b      	ldr	r0, [pc, #44]	@ (8001314 <Servo_StopAll+0xe4>)
 80012e6:	f003 fc3f 	bl	8004b68 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80012ea:	2100      	movs	r1, #0
 80012ec:	480a      	ldr	r0, [pc, #40]	@ (8001318 <Servo_StopAll+0xe8>)
 80012ee:	f003 fc3b 	bl	8004b68 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80012f2:	2100      	movs	r1, #0
 80012f4:	4809      	ldr	r0, [pc, #36]	@ (800131c <Servo_StopAll+0xec>)
 80012f6:	f003 fc37 	bl	8004b68 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80012fa:	2100      	movs	r1, #0
 80012fc:	4808      	ldr	r0, [pc, #32]	@ (8001320 <Servo_StopAll+0xf0>)
 80012fe:	f003 fc33 	bl	8004b68 <HAL_TIM_PWM_Stop>
}
 8001302:	bf00      	nop
 8001304:	3750      	adds	r7, #80	@ 0x50
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000298 	.word	0x20000298
 8001310:	2000007c 	.word	0x2000007c
 8001314:	200000c8 	.word	0x200000c8
 8001318:	20000114 	.word	0x20000114
 800131c:	20000160 	.word	0x20000160
 8001320:	200001ac 	.word	0x200001ac

08001324 <Servo_Init>:
/**
 * @brief Initialize all servo timers and start PWM
 * @param None
 * @retval None
 */
void Servo_Init(void) {
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	// Start all PWM channels
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001328:	2100      	movs	r1, #0
 800132a:	480a      	ldr	r0, [pc, #40]	@ (8001354 <Servo_Init+0x30>)
 800132c:	f003 fb16 	bl	800495c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001330:	2100      	movs	r1, #0
 8001332:	4809      	ldr	r0, [pc, #36]	@ (8001358 <Servo_Init+0x34>)
 8001334:	f003 fb12 	bl	800495c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001338:	2100      	movs	r1, #0
 800133a:	4808      	ldr	r0, [pc, #32]	@ (800135c <Servo_Init+0x38>)
 800133c:	f003 fb0e 	bl	800495c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001340:	2100      	movs	r1, #0
 8001342:	4807      	ldr	r0, [pc, #28]	@ (8001360 <Servo_Init+0x3c>)
 8001344:	f003 fb0a 	bl	800495c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001348:	2100      	movs	r1, #0
 800134a:	4806      	ldr	r0, [pc, #24]	@ (8001364 <Servo_Init+0x40>)
 800134c:	f003 fb06 	bl	800495c <HAL_TIM_PWM_Start>
}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	2000007c 	.word	0x2000007c
 8001358:	200000c8 	.word	0x200000c8
 800135c:	20000114 	.word	0x20000114
 8001360:	20000160 	.word	0x20000160
 8001364:	200001ac 	.word	0x200001ac

08001368 <Direction_Decider>:

int Direction_Decider(int* Desired_Position){
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
	if(*Desired_Position < 0){
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	da06      	bge.n	8001386 <Direction_Decider+0x1e>
		*Desired_Position = *Desired_Position * -1;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	425a      	negs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	601a      	str	r2, [r3, #0]
		return CLOCKWISE;
 8001382:	2301      	movs	r3, #1
 8001384:	e000      	b.n	8001388 <Direction_Decider+0x20>
	}
	else{
		return COUNTERCLOCKWISE;
 8001386:	2302      	movs	r3, #2
	}
}
 8001388:	4618      	mov	r0, r3
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	0000      	movs	r0, r0
	...

08001398 <SignLetter>:
 * @brief Example function to demonstrate a sign language letter
 * @param letter: ASCII character (A-Z)
 * @param duration: How long to hold the position (in ms)
 * @retval None
 */
void SignLetter(char letter) {
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]

	// Set finger positions based on the letter
	switch(letter) {
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	3b41      	subs	r3, #65	@ 0x41
 80013a6:	2b19      	cmp	r3, #25
 80013a8:	f200 86aa 	bhi.w	8002100 <SignLetter+0xd68>
 80013ac:	a201      	add	r2, pc, #4	@ (adr r2, 80013b4 <SignLetter+0x1c>)
 80013ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013b2:	bf00      	nop
 80013b4:	0800141d 	.word	0x0800141d
 80013b8:	08001487 	.word	0x08001487
 80013bc:	080014cb 	.word	0x080014cb
 80013c0:	08001597 	.word	0x08001597
 80013c4:	08001643 	.word	0x08001643
 80013c8:	08001745 	.word	0x08001745
 80013cc:	080017bd 	.word	0x080017bd
 80013d0:	08001825 	.word	0x08001825
 80013d4:	08001889 	.word	0x08001889
 80013d8:	080018d7 	.word	0x080018d7
 80013dc:	08001923 	.word	0x08001923
 80013e0:	08001985 	.word	0x08001985
 80013e4:	08001a19 	.word	0x08001a19
 80013e8:	08001ab3 	.word	0x08001ab3
 80013ec:	08001b35 	.word	0x08001b35
 80013f0:	08001bff 	.word	0x08001bff
 80013f4:	08001c99 	.word	0x08001c99
 80013f8:	08001d71 	.word	0x08001d71
 80013fc:	08001dc1 	.word	0x08001dc1
 8001400:	08001e29 	.word	0x08001e29
 8001404:	08001e79 	.word	0x08001e79
 8001408:	08001ec3 	.word	0x08001ec3
 800140c:	08001f0d 	.word	0x08001f0d
 8001410:	08001f53 	.word	0x08001f53
 8001414:	08002069 	.word	0x08002069
 8001418:	080020b1 	.word	0x080020b1
	 case 'A':
		thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 800141c:	4bbe      	ldr	r3, [pc, #760]	@ (8001718 <SignLetter+0x380>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f82e 	bl	8000484 <__aeabi_i2d>
 8001428:	a3b3      	add	r3, pc, #716	@ (adr r3, 80016f8 <SignLetter+0x360>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7fe fedb 	bl	80001e8 <__aeabi_dsub>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff f88d 	bl	8000558 <__aeabi_d2iz>
 800143e:	4603      	mov	r3, r0
 8001440:	4ab6      	ldr	r2, [pc, #728]	@ (800171c <SignLetter+0x384>)
 8001442:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001444:	4bb6      	ldr	r3, [pc, #728]	@ (8001720 <SignLetter+0x388>)
 8001446:	f9b3 3000 	ldrsh.w	r3, [r3]
 800144a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800144e:	4ab5      	ldr	r2, [pc, #724]	@ (8001724 <SignLetter+0x38c>)
 8001450:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001452:	4bb5      	ldr	r3, [pc, #724]	@ (8001728 <SignLetter+0x390>)
 8001454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001458:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800145c:	3b10      	subs	r3, #16
 800145e:	4ab3      	ldr	r2, [pc, #716]	@ (800172c <SignLetter+0x394>)
 8001460:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001462:	4bb3      	ldr	r3, [pc, #716]	@ (8001730 <SignLetter+0x398>)
 8001464:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001468:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800146c:	3b10      	subs	r3, #16
 800146e:	4ab1      	ldr	r2, [pc, #708]	@ (8001734 <SignLetter+0x39c>)
 8001470:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001472:	4bb1      	ldr	r3, [pc, #708]	@ (8001738 <SignLetter+0x3a0>)
 8001474:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001478:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800147c:	3b10      	subs	r3, #16
 800147e:	4aaf      	ldr	r2, [pc, #700]	@ (800173c <SignLetter+0x3a4>)
 8001480:	6013      	str	r3, [r2, #0]
		break;
 8001482:	f000 be40 	b.w	8002106 <SignLetter+0xd6e>

	 case 'B':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001486:	4ba4      	ldr	r3, [pc, #656]	@ (8001718 <SignLetter+0x380>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001490:	3b10      	subs	r3, #16
 8001492:	4aa2      	ldr	r2, [pc, #648]	@ (800171c <SignLetter+0x384>)
 8001494:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001496:	4ba2      	ldr	r3, [pc, #648]	@ (8001720 <SignLetter+0x388>)
 8001498:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149c:	461a      	mov	r2, r3
 800149e:	4ba1      	ldr	r3, [pc, #644]	@ (8001724 <SignLetter+0x38c>)
 80014a0:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 80014a2:	4ba1      	ldr	r3, [pc, #644]	@ (8001728 <SignLetter+0x390>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	461a      	mov	r2, r3
 80014aa:	4ba0      	ldr	r3, [pc, #640]	@ (800172c <SignLetter+0x394>)
 80014ac:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 0 * RING_CLOSED;
 80014ae:	4ba0      	ldr	r3, [pc, #640]	@ (8001730 <SignLetter+0x398>)
 80014b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b9f      	ldr	r3, [pc, #636]	@ (8001734 <SignLetter+0x39c>)
 80014b8:	601a      	str	r2, [r3, #0]
		pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 80014ba:	4b9f      	ldr	r3, [pc, #636]	@ (8001738 <SignLetter+0x3a0>)
 80014bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b9e      	ldr	r3, [pc, #632]	@ (800173c <SignLetter+0x3a4>)
 80014c4:	601a      	str	r2, [r3, #0]
		break;
 80014c6:	f000 be1e 	b.w	8002106 <SignLetter+0xd6e>

	case 'C':
		thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 80014ca:	4b93      	ldr	r3, [pc, #588]	@ (8001718 <SignLetter+0x380>)
 80014cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7fe ffd7 	bl	8000484 <__aeabi_i2d>
 80014d6:	a388      	add	r3, pc, #544	@ (adr r3, 80016f8 <SignLetter+0x360>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7fe fe84 	bl	80001e8 <__aeabi_dsub>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	f7ff f836 	bl	8000558 <__aeabi_d2iz>
 80014ec:	4603      	mov	r3, r0
 80014ee:	4a8b      	ldr	r2, [pc, #556]	@ (800171c <SignLetter+0x384>)
 80014f0:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.5 * INDEX_CLOSED;
 80014f2:	4b8b      	ldr	r3, [pc, #556]	@ (8001720 <SignLetter+0x388>)
 80014f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7fe ffc3 	bl	8000484 <__aeabi_i2d>
 80014fe:	f04f 0200 	mov.w	r2, #0
 8001502:	4b8f      	ldr	r3, [pc, #572]	@ (8001740 <SignLetter+0x3a8>)
 8001504:	f7fe fe70 	bl	80001e8 <__aeabi_dsub>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4610      	mov	r0, r2
 800150e:	4619      	mov	r1, r3
 8001510:	f7ff f822 	bl	8000558 <__aeabi_d2iz>
 8001514:	4603      	mov	r3, r0
 8001516:	4a83      	ldr	r2, [pc, #524]	@ (8001724 <SignLetter+0x38c>)
 8001518:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.5 * MIDDLE_CLOSED;
 800151a:	4b83      	ldr	r3, [pc, #524]	@ (8001728 <SignLetter+0x390>)
 800151c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ffaf 	bl	8000484 <__aeabi_i2d>
 8001526:	a376      	add	r3, pc, #472	@ (adr r3, 8001700 <SignLetter+0x368>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7fe fe5c 	bl	80001e8 <__aeabi_dsub>
 8001530:	4602      	mov	r2, r0
 8001532:	460b      	mov	r3, r1
 8001534:	4610      	mov	r0, r2
 8001536:	4619      	mov	r1, r3
 8001538:	f7ff f80e 	bl	8000558 <__aeabi_d2iz>
 800153c:	4603      	mov	r3, r0
 800153e:	4a7b      	ldr	r2, [pc, #492]	@ (800172c <SignLetter+0x394>)
 8001540:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 0.5 * RING_CLOSED;
 8001542:	4b7b      	ldr	r3, [pc, #492]	@ (8001730 <SignLetter+0x398>)
 8001544:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001548:	4618      	mov	r0, r3
 800154a:	f7fe ff9b 	bl	8000484 <__aeabi_i2d>
 800154e:	a36c      	add	r3, pc, #432	@ (adr r3, 8001700 <SignLetter+0x368>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7fe fe48 	bl	80001e8 <__aeabi_dsub>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7fe fffa 	bl	8000558 <__aeabi_d2iz>
 8001564:	4603      	mov	r3, r0
 8001566:	4a73      	ldr	r2, [pc, #460]	@ (8001734 <SignLetter+0x39c>)
 8001568:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0.5 * PINKY_CLOSED;
 800156a:	4b73      	ldr	r3, [pc, #460]	@ (8001738 <SignLetter+0x3a0>)
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe ff87 	bl	8000484 <__aeabi_i2d>
 8001576:	a362      	add	r3, pc, #392	@ (adr r3, 8001700 <SignLetter+0x368>)
 8001578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800157c:	f7fe fe34 	bl	80001e8 <__aeabi_dsub>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4610      	mov	r0, r2
 8001586:	4619      	mov	r1, r3
 8001588:	f7fe ffe6 	bl	8000558 <__aeabi_d2iz>
 800158c:	4603      	mov	r3, r0
 800158e:	4a6b      	ldr	r2, [pc, #428]	@ (800173c <SignLetter+0x3a4>)
 8001590:	6013      	str	r3, [r2, #0]
		break;
 8001592:	f000 bdb8 	b.w	8002106 <SignLetter+0xd6e>

	case 'D':
		thumb_desired_position = thumb_current - 0.5 * THUMB_CLOSED;
 8001596:	4b60      	ldr	r3, [pc, #384]	@ (8001718 <SignLetter+0x380>)
 8001598:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159c:	4618      	mov	r0, r3
 800159e:	f7fe ff71 	bl	8000484 <__aeabi_i2d>
 80015a2:	a357      	add	r3, pc, #348	@ (adr r3, 8001700 <SignLetter+0x368>)
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f7fe fe1e 	bl	80001e8 <__aeabi_dsub>
 80015ac:	4602      	mov	r2, r0
 80015ae:	460b      	mov	r3, r1
 80015b0:	4610      	mov	r0, r2
 80015b2:	4619      	mov	r1, r3
 80015b4:	f7fe ffd0 	bl	8000558 <__aeabi_d2iz>
 80015b8:	4603      	mov	r3, r0
 80015ba:	4a58      	ldr	r2, [pc, #352]	@ (800171c <SignLetter+0x384>)
 80015bc:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 80015be:	4b58      	ldr	r3, [pc, #352]	@ (8001720 <SignLetter+0x388>)
 80015c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c4:	461a      	mov	r2, r3
 80015c6:	4b57      	ldr	r3, [pc, #348]	@ (8001724 <SignLetter+0x38c>)
 80015c8:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0.75 * MIDDLE_CLOSED;
 80015ca:	4b57      	ldr	r3, [pc, #348]	@ (8001728 <SignLetter+0x390>)
 80015cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ff57 	bl	8000484 <__aeabi_i2d>
 80015d6:	a34c      	add	r3, pc, #304	@ (adr r3, 8001708 <SignLetter+0x370>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7fe fe04 	bl	80001e8 <__aeabi_dsub>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4610      	mov	r0, r2
 80015e6:	4619      	mov	r1, r3
 80015e8:	f7fe ffb6 	bl	8000558 <__aeabi_d2iz>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4a4f      	ldr	r2, [pc, #316]	@ (800172c <SignLetter+0x394>)
 80015f0:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 0.75 * RING_CLOSED;
 80015f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001730 <SignLetter+0x398>)
 80015f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe ff43 	bl	8000484 <__aeabi_i2d>
 80015fe:	a342      	add	r3, pc, #264	@ (adr r3, 8001708 <SignLetter+0x370>)
 8001600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001604:	f7fe fdf0 	bl	80001e8 <__aeabi_dsub>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	4610      	mov	r0, r2
 800160e:	4619      	mov	r1, r3
 8001610:	f7fe ffa2 	bl	8000558 <__aeabi_d2iz>
 8001614:	4603      	mov	r3, r0
 8001616:	4a47      	ldr	r2, [pc, #284]	@ (8001734 <SignLetter+0x39c>)
 8001618:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0.75 * PINKY_CLOSED;
 800161a:	4b47      	ldr	r3, [pc, #284]	@ (8001738 <SignLetter+0x3a0>)
 800161c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff2f 	bl	8000484 <__aeabi_i2d>
 8001626:	a338      	add	r3, pc, #224	@ (adr r3, 8001708 <SignLetter+0x370>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7fe fddc 	bl	80001e8 <__aeabi_dsub>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	4610      	mov	r0, r2
 8001636:	4619      	mov	r1, r3
 8001638:	f7fe ff8e 	bl	8000558 <__aeabi_d2iz>
 800163c:	4603      	mov	r3, r0
 800163e:	4a3f      	ldr	r2, [pc, #252]	@ (800173c <SignLetter+0x3a4>)
 8001640:	6013      	str	r3, [r2, #0]

	case 'E':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001642:	4b35      	ldr	r3, [pc, #212]	@ (8001718 <SignLetter+0x380>)
 8001644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001648:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800164c:	3b10      	subs	r3, #16
 800164e:	4a33      	ldr	r2, [pc, #204]	@ (800171c <SignLetter+0x384>)
 8001650:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.75 * INDEX_CLOSED;
 8001652:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <SignLetter+0x388>)
 8001654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff13 	bl	8000484 <__aeabi_i2d>
 800165e:	a32c      	add	r3, pc, #176	@ (adr r3, 8001710 <SignLetter+0x378>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fdc0 	bl	80001e8 <__aeabi_dsub>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7fe ff72 	bl	8000558 <__aeabi_d2iz>
 8001674:	4603      	mov	r3, r0
 8001676:	4a2b      	ldr	r2, [pc, #172]	@ (8001724 <SignLetter+0x38c>)
 8001678:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.75 * MIDDLE_CLOSED;
 800167a:	4b2b      	ldr	r3, [pc, #172]	@ (8001728 <SignLetter+0x390>)
 800167c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe feff 	bl	8000484 <__aeabi_i2d>
 8001686:	a320      	add	r3, pc, #128	@ (adr r3, 8001708 <SignLetter+0x370>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe fdac 	bl	80001e8 <__aeabi_dsub>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4610      	mov	r0, r2
 8001696:	4619      	mov	r1, r3
 8001698:	f7fe ff5e 	bl	8000558 <__aeabi_d2iz>
 800169c:	4603      	mov	r3, r0
 800169e:	4a23      	ldr	r2, [pc, #140]	@ (800172c <SignLetter+0x394>)
 80016a0:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 0.75 * RING_CLOSED;
 80016a2:	4b23      	ldr	r3, [pc, #140]	@ (8001730 <SignLetter+0x398>)
 80016a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe feeb 	bl	8000484 <__aeabi_i2d>
 80016ae:	a316      	add	r3, pc, #88	@ (adr r3, 8001708 <SignLetter+0x370>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe fd98 	bl	80001e8 <__aeabi_dsub>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f7fe ff4a 	bl	8000558 <__aeabi_d2iz>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001734 <SignLetter+0x39c>)
 80016c8:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0.75 * PINKY_CLOSED;
 80016ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001738 <SignLetter+0x3a0>)
 80016cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fed7 	bl	8000484 <__aeabi_i2d>
 80016d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8001708 <SignLetter+0x370>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7fe fd84 	bl	80001e8 <__aeabi_dsub>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7fe ff36 	bl	8000558 <__aeabi_d2iz>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a13      	ldr	r2, [pc, #76]	@ (800173c <SignLetter+0x3a4>)
 80016f0:	6013      	str	r3, [r2, #0]
		break;
 80016f2:	f000 bd08 	b.w	8002106 <SignLetter+0xd6e>
 80016f6:	bf00      	nop
 80016f8:	00000000 	.word	0x00000000
 80016fc:	40a38800 	.word	0x40a38800
 8001700:	00000000 	.word	0x00000000
 8001704:	40b38800 	.word	0x40b38800
 8001708:	00000000 	.word	0x00000000
 800170c:	40bd4c00 	.word	0x40bd4c00
 8001710:	00000000 	.word	0x00000000
 8001714:	40977000 	.word	0x40977000
 8001718:	200003a4 	.word	0x200003a4
 800171c:	200003b0 	.word	0x200003b0
 8001720:	200003a6 	.word	0x200003a6
 8001724:	200003b4 	.word	0x200003b4
 8001728:	200003a8 	.word	0x200003a8
 800172c:	200003b8 	.word	0x200003b8
 8001730:	200003aa 	.word	0x200003aa
 8001734:	200003bc 	.word	0x200003bc
 8001738:	200003ac 	.word	0x200003ac
 800173c:	200003c0 	.word	0x200003c0
 8001740:	408f4000 	.word	0x408f4000

	case 'F':
		thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001744:	4baa      	ldr	r3, [pc, #680]	@ (80019f0 <SignLetter+0x658>)
 8001746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fe9a 	bl	8000484 <__aeabi_i2d>
 8001750:	a39f      	add	r3, pc, #636	@ (adr r3, 80019d0 <SignLetter+0x638>)
 8001752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001756:	f7fe fd47 	bl	80001e8 <__aeabi_dsub>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4610      	mov	r0, r2
 8001760:	4619      	mov	r1, r3
 8001762:	f7fe fef9 	bl	8000558 <__aeabi_d2iz>
 8001766:	4603      	mov	r3, r0
 8001768:	4aa2      	ldr	r2, [pc, #648]	@ (80019f4 <SignLetter+0x65c>)
 800176a:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.75 * INDEX_CLOSED;
 800176c:	4ba2      	ldr	r3, [pc, #648]	@ (80019f8 <SignLetter+0x660>)
 800176e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe fe86 	bl	8000484 <__aeabi_i2d>
 8001778:	a397      	add	r3, pc, #604	@ (adr r3, 80019d8 <SignLetter+0x640>)
 800177a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177e:	f7fe fd33 	bl	80001e8 <__aeabi_dsub>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	4610      	mov	r0, r2
 8001788:	4619      	mov	r1, r3
 800178a:	f7fe fee5 	bl	8000558 <__aeabi_d2iz>
 800178e:	4603      	mov	r3, r0
 8001790:	4a9a      	ldr	r2, [pc, #616]	@ (80019fc <SignLetter+0x664>)
 8001792:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001794:	4b9a      	ldr	r3, [pc, #616]	@ (8001a00 <SignLetter+0x668>)
 8001796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179a:	461a      	mov	r2, r3
 800179c:	4b99      	ldr	r3, [pc, #612]	@ (8001a04 <SignLetter+0x66c>)
 800179e:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 0 * RING_CLOSED;
 80017a0:	4b99      	ldr	r3, [pc, #612]	@ (8001a08 <SignLetter+0x670>)
 80017a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b98      	ldr	r3, [pc, #608]	@ (8001a0c <SignLetter+0x674>)
 80017aa:	601a      	str	r2, [r3, #0]
		pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 80017ac:	4b98      	ldr	r3, [pc, #608]	@ (8001a10 <SignLetter+0x678>)
 80017ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b2:	461a      	mov	r2, r3
 80017b4:	4b97      	ldr	r3, [pc, #604]	@ (8001a14 <SignLetter+0x67c>)
 80017b6:	601a      	str	r2, [r3, #0]
		break;
 80017b8:	f000 bca5 	b.w	8002106 <SignLetter+0xd6e>

	case 'G':
		thumb_desired_position = thumb_current - 0.5 * THUMB_CLOSED;
 80017bc:	4b8c      	ldr	r3, [pc, #560]	@ (80019f0 <SignLetter+0x658>)
 80017be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fe5e 	bl	8000484 <__aeabi_i2d>
 80017c8:	a385      	add	r3, pc, #532	@ (adr r3, 80019e0 <SignLetter+0x648>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe fd0b 	bl	80001e8 <__aeabi_dsub>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f7fe febd 	bl	8000558 <__aeabi_d2iz>
 80017de:	4603      	mov	r3, r0
 80017e0:	4a84      	ldr	r2, [pc, #528]	@ (80019f4 <SignLetter+0x65c>)
 80017e2:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 80017e4:	4b84      	ldr	r3, [pc, #528]	@ (80019f8 <SignLetter+0x660>)
 80017e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ea:	461a      	mov	r2, r3
 80017ec:	4b83      	ldr	r3, [pc, #524]	@ (80019fc <SignLetter+0x664>)
 80017ee:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80017f0:	4b83      	ldr	r3, [pc, #524]	@ (8001a00 <SignLetter+0x668>)
 80017f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80017fa:	3b10      	subs	r3, #16
 80017fc:	4a81      	ldr	r2, [pc, #516]	@ (8001a04 <SignLetter+0x66c>)
 80017fe:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001800:	4b81      	ldr	r3, [pc, #516]	@ (8001a08 <SignLetter+0x670>)
 8001802:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001806:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800180a:	3b10      	subs	r3, #16
 800180c:	4a7f      	ldr	r2, [pc, #508]	@ (8001a0c <SignLetter+0x674>)
 800180e:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001810:	4b7f      	ldr	r3, [pc, #508]	@ (8001a10 <SignLetter+0x678>)
 8001812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001816:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800181a:	3b10      	subs	r3, #16
 800181c:	4a7d      	ldr	r2, [pc, #500]	@ (8001a14 <SignLetter+0x67c>)
 800181e:	6013      	str	r3, [r2, #0]
		break;
 8001820:	f000 bc71 	b.w	8002106 <SignLetter+0xd6e>

	case 'H':
		thumb_desired_position = thumb_current - 0.75 * THUMB_CLOSED;
 8001824:	4b72      	ldr	r3, [pc, #456]	@ (80019f0 <SignLetter+0x658>)
 8001826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe fe2a 	bl	8000484 <__aeabi_i2d>
 8001830:	a36d      	add	r3, pc, #436	@ (adr r3, 80019e8 <SignLetter+0x650>)
 8001832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001836:	f7fe fcd7 	bl	80001e8 <__aeabi_dsub>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7fe fe89 	bl	8000558 <__aeabi_d2iz>
 8001846:	4603      	mov	r3, r0
 8001848:	4a6a      	ldr	r2, [pc, #424]	@ (80019f4 <SignLetter+0x65c>)
 800184a:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 800184c:	4b6a      	ldr	r3, [pc, #424]	@ (80019f8 <SignLetter+0x660>)
 800184e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001852:	461a      	mov	r2, r3
 8001854:	4b69      	ldr	r3, [pc, #420]	@ (80019fc <SignLetter+0x664>)
 8001856:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001858:	4b69      	ldr	r3, [pc, #420]	@ (8001a00 <SignLetter+0x668>)
 800185a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185e:	461a      	mov	r2, r3
 8001860:	4b68      	ldr	r3, [pc, #416]	@ (8001a04 <SignLetter+0x66c>)
 8001862:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001864:	4b68      	ldr	r3, [pc, #416]	@ (8001a08 <SignLetter+0x670>)
 8001866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186a:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800186e:	3b10      	subs	r3, #16
 8001870:	4a66      	ldr	r2, [pc, #408]	@ (8001a0c <SignLetter+0x674>)
 8001872:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001874:	4b66      	ldr	r3, [pc, #408]	@ (8001a10 <SignLetter+0x678>)
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800187e:	3b10      	subs	r3, #16
 8001880:	4a64      	ldr	r2, [pc, #400]	@ (8001a14 <SignLetter+0x67c>)
 8001882:	6013      	str	r3, [r2, #0]
		break;
 8001884:	f000 bc3f 	b.w	8002106 <SignLetter+0xd6e>

	case 'I':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001888:	4b59      	ldr	r3, [pc, #356]	@ (80019f0 <SignLetter+0x658>)
 800188a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800188e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001892:	3b10      	subs	r3, #16
 8001894:	4a57      	ldr	r2, [pc, #348]	@ (80019f4 <SignLetter+0x65c>)
 8001896:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001898:	4b57      	ldr	r3, [pc, #348]	@ (80019f8 <SignLetter+0x660>)
 800189a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80018a2:	4a56      	ldr	r2, [pc, #344]	@ (80019fc <SignLetter+0x664>)
 80018a4:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80018a6:	4b56      	ldr	r3, [pc, #344]	@ (8001a00 <SignLetter+0x668>)
 80018a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ac:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80018b0:	3b10      	subs	r3, #16
 80018b2:	4a54      	ldr	r2, [pc, #336]	@ (8001a04 <SignLetter+0x66c>)
 80018b4:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 80018b6:	4b54      	ldr	r3, [pc, #336]	@ (8001a08 <SignLetter+0x670>)
 80018b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018bc:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80018c0:	3b10      	subs	r3, #16
 80018c2:	4a52      	ldr	r2, [pc, #328]	@ (8001a0c <SignLetter+0x674>)
 80018c4:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 80018c6:	4b52      	ldr	r3, [pc, #328]	@ (8001a10 <SignLetter+0x678>)
 80018c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018cc:	461a      	mov	r2, r3
 80018ce:	4b51      	ldr	r3, [pc, #324]	@ (8001a14 <SignLetter+0x67c>)
 80018d0:	601a      	str	r2, [r3, #0]
		break;
 80018d2:	f000 bc18 	b.w	8002106 <SignLetter+0xd6e>

	case 'J':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80018d6:	4b46      	ldr	r3, [pc, #280]	@ (80019f0 <SignLetter+0x658>)
 80018d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018dc:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80018e0:	3b10      	subs	r3, #16
 80018e2:	4a44      	ldr	r2, [pc, #272]	@ (80019f4 <SignLetter+0x65c>)
 80018e4:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 80018e6:	4b44      	ldr	r3, [pc, #272]	@ (80019f8 <SignLetter+0x660>)
 80018e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ec:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80018f0:	4a42      	ldr	r2, [pc, #264]	@ (80019fc <SignLetter+0x664>)
 80018f2:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80018f4:	4b42      	ldr	r3, [pc, #264]	@ (8001a00 <SignLetter+0x668>)
 80018f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fa:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80018fe:	3b10      	subs	r3, #16
 8001900:	4a40      	ldr	r2, [pc, #256]	@ (8001a04 <SignLetter+0x66c>)
 8001902:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001904:	4b40      	ldr	r3, [pc, #256]	@ (8001a08 <SignLetter+0x670>)
 8001906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190a:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800190e:	3b10      	subs	r3, #16
 8001910:	4a3e      	ldr	r2, [pc, #248]	@ (8001a0c <SignLetter+0x674>)
 8001912:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8001914:	4b3e      	ldr	r3, [pc, #248]	@ (8001a10 <SignLetter+0x678>)
 8001916:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191a:	461a      	mov	r2, r3
 800191c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a14 <SignLetter+0x67c>)
 800191e:	601a      	str	r2, [r3, #0]
		break;
 8001920:	e3f1      	b.n	8002106 <SignLetter+0xd6e>

	case 'K':
		thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001922:	4b33      	ldr	r3, [pc, #204]	@ (80019f0 <SignLetter+0x658>)
 8001924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fdab 	bl	8000484 <__aeabi_i2d>
 800192e:	a328      	add	r3, pc, #160	@ (adr r3, 80019d0 <SignLetter+0x638>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe fc58 	bl	80001e8 <__aeabi_dsub>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7fe fe0a 	bl	8000558 <__aeabi_d2iz>
 8001944:	4603      	mov	r3, r0
 8001946:	4a2b      	ldr	r2, [pc, #172]	@ (80019f4 <SignLetter+0x65c>)
 8001948:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 800194a:	4b2b      	ldr	r3, [pc, #172]	@ (80019f8 <SignLetter+0x660>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	461a      	mov	r2, r3
 8001952:	4b2a      	ldr	r3, [pc, #168]	@ (80019fc <SignLetter+0x664>)
 8001954:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001956:	4b2a      	ldr	r3, [pc, #168]	@ (8001a00 <SignLetter+0x668>)
 8001958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195c:	461a      	mov	r2, r3
 800195e:	4b29      	ldr	r3, [pc, #164]	@ (8001a04 <SignLetter+0x66c>)
 8001960:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001962:	4b29      	ldr	r3, [pc, #164]	@ (8001a08 <SignLetter+0x670>)
 8001964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001968:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800196c:	3b10      	subs	r3, #16
 800196e:	4a27      	ldr	r2, [pc, #156]	@ (8001a0c <SignLetter+0x674>)
 8001970:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001972:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <SignLetter+0x678>)
 8001974:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001978:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800197c:	3b10      	subs	r3, #16
 800197e:	4a25      	ldr	r2, [pc, #148]	@ (8001a14 <SignLetter+0x67c>)
 8001980:	6013      	str	r3, [r2, #0]
		break;
 8001982:	e3c0      	b.n	8002106 <SignLetter+0xd6e>

	case 'L':
		thumb_desired_position = thumb_current - 0 * THUMB_CLOSED;
 8001984:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <SignLetter+0x658>)
 8001986:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198a:	461a      	mov	r2, r3
 800198c:	4b19      	ldr	r3, [pc, #100]	@ (80019f4 <SignLetter+0x65c>)
 800198e:	601a      	str	r2, [r3, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001990:	4b19      	ldr	r3, [pc, #100]	@ (80019f8 <SignLetter+0x660>)
 8001992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001996:	461a      	mov	r2, r3
 8001998:	4b18      	ldr	r3, [pc, #96]	@ (80019fc <SignLetter+0x664>)
 800199a:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800199c:	4b18      	ldr	r3, [pc, #96]	@ (8001a00 <SignLetter+0x668>)
 800199e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80019a6:	3b10      	subs	r3, #16
 80019a8:	4a16      	ldr	r2, [pc, #88]	@ (8001a04 <SignLetter+0x66c>)
 80019aa:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 80019ac:	4b16      	ldr	r3, [pc, #88]	@ (8001a08 <SignLetter+0x670>)
 80019ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80019b6:	3b10      	subs	r3, #16
 80019b8:	4a14      	ldr	r2, [pc, #80]	@ (8001a0c <SignLetter+0x674>)
 80019ba:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80019bc:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <SignLetter+0x678>)
 80019be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80019c6:	3b10      	subs	r3, #16
 80019c8:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <SignLetter+0x67c>)
 80019ca:	6013      	str	r3, [r2, #0]
		break;
 80019cc:	e39b      	b.n	8002106 <SignLetter+0xd6e>
 80019ce:	bf00      	nop
 80019d0:	00000000 	.word	0x00000000
 80019d4:	40a38800 	.word	0x40a38800
 80019d8:	00000000 	.word	0x00000000
 80019dc:	40977000 	.word	0x40977000
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40b38800 	.word	0x40b38800
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40bd4c00 	.word	0x40bd4c00
 80019f0:	200003a4 	.word	0x200003a4
 80019f4:	200003b0 	.word	0x200003b0
 80019f8:	200003a6 	.word	0x200003a6
 80019fc:	200003b4 	.word	0x200003b4
 8001a00:	200003a8 	.word	0x200003a8
 8001a04:	200003b8 	.word	0x200003b8
 8001a08:	200003aa 	.word	0x200003aa
 8001a0c:	200003bc 	.word	0x200003bc
 8001a10:	200003ac 	.word	0x200003ac
 8001a14:	200003c0 	.word	0x200003c0

	case 'M':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //Make speed faster so thumb closes first or the speed of the other 4 fingers slower.
 8001a18:	4bc7      	ldr	r3, [pc, #796]	@ (8001d38 <SignLetter+0x9a0>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001a22:	3b10      	subs	r3, #16
 8001a24:	4ac5      	ldr	r2, [pc, #788]	@ (8001d3c <SignLetter+0x9a4>)
 8001a26:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.9 * INDEX_CLOSED;
 8001a28:	4bc5      	ldr	r3, [pc, #788]	@ (8001d40 <SignLetter+0x9a8>)
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fd28 	bl	8000484 <__aeabi_i2d>
 8001a34:	f04f 0200 	mov.w	r2, #0
 8001a38:	4bc2      	ldr	r3, [pc, #776]	@ (8001d44 <SignLetter+0x9ac>)
 8001a3a:	f7fe fbd5 	bl	80001e8 <__aeabi_dsub>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7fe fd87 	bl	8000558 <__aeabi_d2iz>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	4abe      	ldr	r2, [pc, #760]	@ (8001d48 <SignLetter+0x9b0>)
 8001a4e:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.9 * MIDDLE_CLOSED;
 8001a50:	4bbe      	ldr	r3, [pc, #760]	@ (8001d4c <SignLetter+0x9b4>)
 8001a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd14 	bl	8000484 <__aeabi_i2d>
 8001a5c:	a3b0      	add	r3, pc, #704	@ (adr r3, 8001d20 <SignLetter+0x988>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fbc1 	bl	80001e8 <__aeabi_dsub>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f7fe fd73 	bl	8000558 <__aeabi_d2iz>
 8001a72:	4603      	mov	r3, r0
 8001a74:	4ab6      	ldr	r2, [pc, #728]	@ (8001d50 <SignLetter+0x9b8>)
 8001a76:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 0.9 * RING_CLOSED;
 8001a78:	4bb6      	ldr	r3, [pc, #728]	@ (8001d54 <SignLetter+0x9bc>)
 8001a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe fd00 	bl	8000484 <__aeabi_i2d>
 8001a84:	a3a6      	add	r3, pc, #664	@ (adr r3, 8001d20 <SignLetter+0x988>)
 8001a86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8a:	f7fe fbad 	bl	80001e8 <__aeabi_dsub>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	4610      	mov	r0, r2
 8001a94:	4619      	mov	r1, r3
 8001a96:	f7fe fd5f 	bl	8000558 <__aeabi_d2iz>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4aae      	ldr	r2, [pc, #696]	@ (8001d58 <SignLetter+0x9c0>)
 8001a9e:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001aa0:	4bae      	ldr	r3, [pc, #696]	@ (8001d5c <SignLetter+0x9c4>)
 8001aa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001aaa:	3b10      	subs	r3, #16
 8001aac:	4aac      	ldr	r2, [pc, #688]	@ (8001d60 <SignLetter+0x9c8>)
 8001aae:	6013      	str	r3, [r2, #0]
		break;
 8001ab0:	e329      	b.n	8002106 <SignLetter+0xd6e>

	case 'N':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //Also change the speeds on this one
 8001ab2:	4ba1      	ldr	r3, [pc, #644]	@ (8001d38 <SignLetter+0x9a0>)
 8001ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab8:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001abc:	3b10      	subs	r3, #16
 8001abe:	4a9f      	ldr	r2, [pc, #636]	@ (8001d3c <SignLetter+0x9a4>)
 8001ac0:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.9 * INDEX_CLOSED;
 8001ac2:	4b9f      	ldr	r3, [pc, #636]	@ (8001d40 <SignLetter+0x9a8>)
 8001ac4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fcdb 	bl	8000484 <__aeabi_i2d>
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	4b9c      	ldr	r3, [pc, #624]	@ (8001d44 <SignLetter+0x9ac>)
 8001ad4:	f7fe fb88 	bl	80001e8 <__aeabi_dsub>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	460b      	mov	r3, r1
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7fe fd3a 	bl	8000558 <__aeabi_d2iz>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4a98      	ldr	r2, [pc, #608]	@ (8001d48 <SignLetter+0x9b0>)
 8001ae8:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.9 * MIDDLE_CLOSED;
 8001aea:	4b98      	ldr	r3, [pc, #608]	@ (8001d4c <SignLetter+0x9b4>)
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fcc7 	bl	8000484 <__aeabi_i2d>
 8001af6:	a38a      	add	r3, pc, #552	@ (adr r3, 8001d20 <SignLetter+0x988>)
 8001af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afc:	f7fe fb74 	bl	80001e8 <__aeabi_dsub>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	4610      	mov	r0, r2
 8001b06:	4619      	mov	r1, r3
 8001b08:	f7fe fd26 	bl	8000558 <__aeabi_d2iz>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	4a90      	ldr	r2, [pc, #576]	@ (8001d50 <SignLetter+0x9b8>)
 8001b10:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001b12:	4b90      	ldr	r3, [pc, #576]	@ (8001d54 <SignLetter+0x9bc>)
 8001b14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b18:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001b1c:	3b10      	subs	r3, #16
 8001b1e:	4a8e      	ldr	r2, [pc, #568]	@ (8001d58 <SignLetter+0x9c0>)
 8001b20:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001b22:	4b8e      	ldr	r3, [pc, #568]	@ (8001d5c <SignLetter+0x9c4>)
 8001b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b28:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001b2c:	3b10      	subs	r3, #16
 8001b2e:	4a8c      	ldr	r2, [pc, #560]	@ (8001d60 <SignLetter+0x9c8>)
 8001b30:	6013      	str	r3, [r2, #0]
		break;
 8001b32:	e2e8      	b.n	8002106 <SignLetter+0xd6e>

	case 'O':
		thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001b34:	4b80      	ldr	r3, [pc, #512]	@ (8001d38 <SignLetter+0x9a0>)
 8001b36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fca2 	bl	8000484 <__aeabi_i2d>
 8001b40:	a379      	add	r3, pc, #484	@ (adr r3, 8001d28 <SignLetter+0x990>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fb4f 	bl	80001e8 <__aeabi_dsub>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f7fe fd01 	bl	8000558 <__aeabi_d2iz>
 8001b56:	4603      	mov	r3, r0
 8001b58:	4a78      	ldr	r2, [pc, #480]	@ (8001d3c <SignLetter+0x9a4>)
 8001b5a:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.5 * INDEX_CLOSED;
 8001b5c:	4b78      	ldr	r3, [pc, #480]	@ (8001d40 <SignLetter+0x9a8>)
 8001b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe fc8e 	bl	8000484 <__aeabi_i2d>
 8001b68:	f04f 0200 	mov.w	r2, #0
 8001b6c:	4b7d      	ldr	r3, [pc, #500]	@ (8001d64 <SignLetter+0x9cc>)
 8001b6e:	f7fe fb3b 	bl	80001e8 <__aeabi_dsub>
 8001b72:	4602      	mov	r2, r0
 8001b74:	460b      	mov	r3, r1
 8001b76:	4610      	mov	r0, r2
 8001b78:	4619      	mov	r1, r3
 8001b7a:	f7fe fced 	bl	8000558 <__aeabi_d2iz>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	4a71      	ldr	r2, [pc, #452]	@ (8001d48 <SignLetter+0x9b0>)
 8001b82:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.5 * MIDDLE_CLOSED;
 8001b84:	4b71      	ldr	r3, [pc, #452]	@ (8001d4c <SignLetter+0x9b4>)
 8001b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fc7a 	bl	8000484 <__aeabi_i2d>
 8001b90:	a367      	add	r3, pc, #412	@ (adr r3, 8001d30 <SignLetter+0x998>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	f7fe fb27 	bl	80001e8 <__aeabi_dsub>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	460b      	mov	r3, r1
 8001b9e:	4610      	mov	r0, r2
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	f7fe fcd9 	bl	8000558 <__aeabi_d2iz>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	4a69      	ldr	r2, [pc, #420]	@ (8001d50 <SignLetter+0x9b8>)
 8001baa:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 0.5 * RING_CLOSED;
 8001bac:	4b69      	ldr	r3, [pc, #420]	@ (8001d54 <SignLetter+0x9bc>)
 8001bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7fe fc66 	bl	8000484 <__aeabi_i2d>
 8001bb8:	a35d      	add	r3, pc, #372	@ (adr r3, 8001d30 <SignLetter+0x998>)
 8001bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bbe:	f7fe fb13 	bl	80001e8 <__aeabi_dsub>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f7fe fcc5 	bl	8000558 <__aeabi_d2iz>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	4a61      	ldr	r2, [pc, #388]	@ (8001d58 <SignLetter+0x9c0>)
 8001bd2:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0.5 * PINKY_CLOSED;
 8001bd4:	4b61      	ldr	r3, [pc, #388]	@ (8001d5c <SignLetter+0x9c4>)
 8001bd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fc52 	bl	8000484 <__aeabi_i2d>
 8001be0:	a353      	add	r3, pc, #332	@ (adr r3, 8001d30 <SignLetter+0x998>)
 8001be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be6:	f7fe faff 	bl	80001e8 <__aeabi_dsub>
 8001bea:	4602      	mov	r2, r0
 8001bec:	460b      	mov	r3, r1
 8001bee:	4610      	mov	r0, r2
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7fe fcb1 	bl	8000558 <__aeabi_d2iz>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a59      	ldr	r2, [pc, #356]	@ (8001d60 <SignLetter+0x9c8>)
 8001bfa:	6013      	str	r3, [r2, #0]
		break;
 8001bfc:	e283      	b.n	8002106 <SignLetter+0xd6e>

	case 'P':
		thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001bfe:	4b4e      	ldr	r3, [pc, #312]	@ (8001d38 <SignLetter+0x9a0>)
 8001c00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fc3d 	bl	8000484 <__aeabi_i2d>
 8001c0a:	a347      	add	r3, pc, #284	@ (adr r3, 8001d28 <SignLetter+0x990>)
 8001c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c10:	f7fe faea 	bl	80001e8 <__aeabi_dsub>
 8001c14:	4602      	mov	r2, r0
 8001c16:	460b      	mov	r3, r1
 8001c18:	4610      	mov	r0, r2
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	f7fe fc9c 	bl	8000558 <__aeabi_d2iz>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4a46      	ldr	r2, [pc, #280]	@ (8001d3c <SignLetter+0x9a4>)
 8001c24:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.25 * INDEX_CLOSED;
 8001c26:	4b46      	ldr	r3, [pc, #280]	@ (8001d40 <SignLetter+0x9a8>)
 8001c28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7fe fc29 	bl	8000484 <__aeabi_i2d>
 8001c32:	f04f 0200 	mov.w	r2, #0
 8001c36:	4b4c      	ldr	r3, [pc, #304]	@ (8001d68 <SignLetter+0x9d0>)
 8001c38:	f7fe fad6 	bl	80001e8 <__aeabi_dsub>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4610      	mov	r0, r2
 8001c42:	4619      	mov	r1, r3
 8001c44:	f7fe fc88 	bl	8000558 <__aeabi_d2iz>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d48 <SignLetter+0x9b0>)
 8001c4c:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.5 * MIDDLE_CLOSED;
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8001d4c <SignLetter+0x9b4>)
 8001c50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc15 	bl	8000484 <__aeabi_i2d>
 8001c5a:	a335      	add	r3, pc, #212	@ (adr r3, 8001d30 <SignLetter+0x998>)
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f7fe fac2 	bl	80001e8 <__aeabi_dsub>
 8001c64:	4602      	mov	r2, r0
 8001c66:	460b      	mov	r3, r1
 8001c68:	4610      	mov	r0, r2
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	f7fe fc74 	bl	8000558 <__aeabi_d2iz>
 8001c70:	4603      	mov	r3, r0
 8001c72:	4a37      	ldr	r2, [pc, #220]	@ (8001d50 <SignLetter+0x9b8>)
 8001c74:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001c76:	4b37      	ldr	r3, [pc, #220]	@ (8001d54 <SignLetter+0x9bc>)
 8001c78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7c:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001c80:	3b10      	subs	r3, #16
 8001c82:	4a35      	ldr	r2, [pc, #212]	@ (8001d58 <SignLetter+0x9c0>)
 8001c84:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001c86:	4b35      	ldr	r3, [pc, #212]	@ (8001d5c <SignLetter+0x9c4>)
 8001c88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8c:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001c90:	3b10      	subs	r3, #16
 8001c92:	4a33      	ldr	r2, [pc, #204]	@ (8001d60 <SignLetter+0x9c8>)
 8001c94:	6013      	str	r3, [r2, #0]
		break;
 8001c96:	e236      	b.n	8002106 <SignLetter+0xd6e>

	case 'Q':
		thumb_desired_position = thumb_current - 0.1 * THUMB_CLOSED;
 8001c98:	4b27      	ldr	r3, [pc, #156]	@ (8001d38 <SignLetter+0x9a0>)
 8001c9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7fe fbf0 	bl	8000484 <__aeabi_i2d>
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d64 <SignLetter+0x9cc>)
 8001caa:	f7fe fa9d 	bl	80001e8 <__aeabi_dsub>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f7fe fc4f 	bl	8000558 <__aeabi_d2iz>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8001d3c <SignLetter+0x9a4>)
 8001cbe:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.3 * INDEX_CLOSED;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <SignLetter+0x9a8>)
 8001cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe fbdc 	bl	8000484 <__aeabi_i2d>
 8001ccc:	f04f 0200 	mov.w	r2, #0
 8001cd0:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <SignLetter+0x9d4>)
 8001cd2:	f7fe fa89 	bl	80001e8 <__aeabi_dsub>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	460b      	mov	r3, r1
 8001cda:	4610      	mov	r0, r2
 8001cdc:	4619      	mov	r1, r3
 8001cde:	f7fe fc3b 	bl	8000558 <__aeabi_d2iz>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a18      	ldr	r2, [pc, #96]	@ (8001d48 <SignLetter+0x9b0>)
 8001ce6:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001ce8:	4b18      	ldr	r3, [pc, #96]	@ (8001d4c <SignLetter+0x9b4>)
 8001cea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cee:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001cf2:	3b10      	subs	r3, #16
 8001cf4:	4a16      	ldr	r2, [pc, #88]	@ (8001d50 <SignLetter+0x9b8>)
 8001cf6:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001cf8:	4b16      	ldr	r3, [pc, #88]	@ (8001d54 <SignLetter+0x9bc>)
 8001cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfe:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001d02:	3b10      	subs	r3, #16
 8001d04:	4a14      	ldr	r2, [pc, #80]	@ (8001d58 <SignLetter+0x9c0>)
 8001d06:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001d08:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <SignLetter+0x9c4>)
 8001d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001d12:	3b10      	subs	r3, #16
 8001d14:	4a12      	ldr	r2, [pc, #72]	@ (8001d60 <SignLetter+0x9c8>)
 8001d16:	6013      	str	r3, [r2, #0]
		break;
 8001d18:	e1f5      	b.n	8002106 <SignLetter+0xd6e>
 8001d1a:	bf00      	nop
 8001d1c:	f3af 8000 	nop.w
 8001d20:	00000000 	.word	0x00000000
 8001d24:	40c19400 	.word	0x40c19400
 8001d28:	00000000 	.word	0x00000000
 8001d2c:	40a38800 	.word	0x40a38800
 8001d30:	00000000 	.word	0x00000000
 8001d34:	40b38800 	.word	0x40b38800
 8001d38:	200003a4 	.word	0x200003a4
 8001d3c:	200003b0 	.word	0x200003b0
 8001d40:	200003a6 	.word	0x200003a6
 8001d44:	409c2000 	.word	0x409c2000
 8001d48:	200003b4 	.word	0x200003b4
 8001d4c:	200003a8 	.word	0x200003a8
 8001d50:	200003b8 	.word	0x200003b8
 8001d54:	200003aa 	.word	0x200003aa
 8001d58:	200003bc 	.word	0x200003bc
 8001d5c:	200003ac 	.word	0x200003ac
 8001d60:	200003c0 	.word	0x200003c0
 8001d64:	408f4000 	.word	0x408f4000
 8001d68:	407f4000 	.word	0x407f4000
 8001d6c:	4082c000 	.word	0x4082c000

	case 'R':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //TBD
 8001d70:	4bb1      	ldr	r3, [pc, #708]	@ (8002038 <SignLetter+0xca0>)
 8001d72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d76:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001d7a:	3b10      	subs	r3, #16
 8001d7c:	4aaf      	ldr	r2, [pc, #700]	@ (800203c <SignLetter+0xca4>)
 8001d7e:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001d80:	4baf      	ldr	r3, [pc, #700]	@ (8002040 <SignLetter+0xca8>)
 8001d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d86:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001d8a:	4aae      	ldr	r2, [pc, #696]	@ (8002044 <SignLetter+0xcac>)
 8001d8c:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001d8e:	4bae      	ldr	r3, [pc, #696]	@ (8002048 <SignLetter+0xcb0>)
 8001d90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d94:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001d98:	3b10      	subs	r3, #16
 8001d9a:	4aac      	ldr	r2, [pc, #688]	@ (800204c <SignLetter+0xcb4>)
 8001d9c:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001d9e:	4bac      	ldr	r3, [pc, #688]	@ (8002050 <SignLetter+0xcb8>)
 8001da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da4:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001da8:	3b10      	subs	r3, #16
 8001daa:	4aaa      	ldr	r2, [pc, #680]	@ (8002054 <SignLetter+0xcbc>)
 8001dac:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001dae:	4baa      	ldr	r3, [pc, #680]	@ (8002058 <SignLetter+0xcc0>)
 8001db0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db4:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001db8:	3b10      	subs	r3, #16
 8001dba:	4aa8      	ldr	r2, [pc, #672]	@ (800205c <SignLetter+0xcc4>)
 8001dbc:	6013      	str	r3, [r2, #0]
		break;
 8001dbe:	e1a2      	b.n	8002106 <SignLetter+0xd6e>

	case 'S':
		thumb_desired_position = thumb_current - 0.8 * THUMB_CLOSED;//Make thumb slower so it ends on top of the other fingers
 8001dc0:	4b9d      	ldr	r3, [pc, #628]	@ (8002038 <SignLetter+0xca0>)
 8001dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fb5c 	bl	8000484 <__aeabi_i2d>
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	4ba3      	ldr	r3, [pc, #652]	@ (8002060 <SignLetter+0xcc8>)
 8001dd2:	f7fe fa09 	bl	80001e8 <__aeabi_dsub>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fbbb 	bl	8000558 <__aeabi_d2iz>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4a95      	ldr	r2, [pc, #596]	@ (800203c <SignLetter+0xca4>)
 8001de6:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001de8:	4b95      	ldr	r3, [pc, #596]	@ (8002040 <SignLetter+0xca8>)
 8001dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dee:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001df2:	4a94      	ldr	r2, [pc, #592]	@ (8002044 <SignLetter+0xcac>)
 8001df4:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001df6:	4b94      	ldr	r3, [pc, #592]	@ (8002048 <SignLetter+0xcb0>)
 8001df8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dfc:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001e00:	3b10      	subs	r3, #16
 8001e02:	4a92      	ldr	r2, [pc, #584]	@ (800204c <SignLetter+0xcb4>)
 8001e04:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001e06:	4b92      	ldr	r3, [pc, #584]	@ (8002050 <SignLetter+0xcb8>)
 8001e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0c:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001e10:	3b10      	subs	r3, #16
 8001e12:	4a90      	ldr	r2, [pc, #576]	@ (8002054 <SignLetter+0xcbc>)
 8001e14:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001e16:	4b90      	ldr	r3, [pc, #576]	@ (8002058 <SignLetter+0xcc0>)
 8001e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e1c:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001e20:	3b10      	subs	r3, #16
 8001e22:	4a8e      	ldr	r2, [pc, #568]	@ (800205c <SignLetter+0xcc4>)
 8001e24:	6013      	str	r3, [r2, #0]
		break;
 8001e26:	e16e      	b.n	8002106 <SignLetter+0xd6e>

	case 'T':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //TBD
 8001e28:	4b83      	ldr	r3, [pc, #524]	@ (8002038 <SignLetter+0xca0>)
 8001e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001e32:	3b10      	subs	r3, #16
 8001e34:	4a81      	ldr	r2, [pc, #516]	@ (800203c <SignLetter+0xca4>)
 8001e36:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001e38:	4b81      	ldr	r3, [pc, #516]	@ (8002040 <SignLetter+0xca8>)
 8001e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001e42:	4a80      	ldr	r2, [pc, #512]	@ (8002044 <SignLetter+0xcac>)
 8001e44:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001e46:	4b80      	ldr	r3, [pc, #512]	@ (8002048 <SignLetter+0xcb0>)
 8001e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4c:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001e50:	3b10      	subs	r3, #16
 8001e52:	4a7e      	ldr	r2, [pc, #504]	@ (800204c <SignLetter+0xcb4>)
 8001e54:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001e56:	4b7e      	ldr	r3, [pc, #504]	@ (8002050 <SignLetter+0xcb8>)
 8001e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5c:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001e60:	3b10      	subs	r3, #16
 8001e62:	4a7c      	ldr	r2, [pc, #496]	@ (8002054 <SignLetter+0xcbc>)
 8001e64:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001e66:	4b7c      	ldr	r3, [pc, #496]	@ (8002058 <SignLetter+0xcc0>)
 8001e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6c:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001e70:	3b10      	subs	r3, #16
 8001e72:	4a7a      	ldr	r2, [pc, #488]	@ (800205c <SignLetter+0xcc4>)
 8001e74:	6013      	str	r3, [r2, #0]
		break;
 8001e76:	e146      	b.n	8002106 <SignLetter+0xd6e>

	case 'U':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001e78:	4b6f      	ldr	r3, [pc, #444]	@ (8002038 <SignLetter+0xca0>)
 8001e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e7e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001e82:	3b10      	subs	r3, #16
 8001e84:	4a6d      	ldr	r2, [pc, #436]	@ (800203c <SignLetter+0xca4>)
 8001e86:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001e88:	4b6d      	ldr	r3, [pc, #436]	@ (8002040 <SignLetter+0xca8>)
 8001e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b6c      	ldr	r3, [pc, #432]	@ (8002044 <SignLetter+0xcac>)
 8001e92:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001e94:	4b6c      	ldr	r3, [pc, #432]	@ (8002048 <SignLetter+0xcb0>)
 8001e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b6b      	ldr	r3, [pc, #428]	@ (800204c <SignLetter+0xcb4>)
 8001e9e:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001ea0:	4b6b      	ldr	r3, [pc, #428]	@ (8002050 <SignLetter+0xcb8>)
 8001ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001eaa:	3b10      	subs	r3, #16
 8001eac:	4a69      	ldr	r2, [pc, #420]	@ (8002054 <SignLetter+0xcbc>)
 8001eae:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001eb0:	4b69      	ldr	r3, [pc, #420]	@ (8002058 <SignLetter+0xcc0>)
 8001eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001eba:	3b10      	subs	r3, #16
 8001ebc:	4a67      	ldr	r2, [pc, #412]	@ (800205c <SignLetter+0xcc4>)
 8001ebe:	6013      	str	r3, [r2, #0]
		break;
 8001ec0:	e121      	b.n	8002106 <SignLetter+0xd6e>

	case 'V':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001ec2:	4b5d      	ldr	r3, [pc, #372]	@ (8002038 <SignLetter+0xca0>)
 8001ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec8:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001ecc:	3b10      	subs	r3, #16
 8001ece:	4a5b      	ldr	r2, [pc, #364]	@ (800203c <SignLetter+0xca4>)
 8001ed0:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001ed2:	4b5b      	ldr	r3, [pc, #364]	@ (8002040 <SignLetter+0xca8>)
 8001ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4b5a      	ldr	r3, [pc, #360]	@ (8002044 <SignLetter+0xcac>)
 8001edc:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001ede:	4b5a      	ldr	r3, [pc, #360]	@ (8002048 <SignLetter+0xcb0>)
 8001ee0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	4b59      	ldr	r3, [pc, #356]	@ (800204c <SignLetter+0xcb4>)
 8001ee8:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001eea:	4b59      	ldr	r3, [pc, #356]	@ (8002050 <SignLetter+0xcb8>)
 8001eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef0:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001ef4:	3b10      	subs	r3, #16
 8001ef6:	4a57      	ldr	r2, [pc, #348]	@ (8002054 <SignLetter+0xcbc>)
 8001ef8:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001efa:	4b57      	ldr	r3, [pc, #348]	@ (8002058 <SignLetter+0xcc0>)
 8001efc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f00:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001f04:	3b10      	subs	r3, #16
 8001f06:	4a55      	ldr	r2, [pc, #340]	@ (800205c <SignLetter+0xcc4>)
 8001f08:	6013      	str	r3, [r2, #0]
		break;
 8001f0a:	e0fc      	b.n	8002106 <SignLetter+0xd6e>

	case 'W':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002038 <SignLetter+0xca0>)
 8001f0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f12:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001f16:	3b10      	subs	r3, #16
 8001f18:	4a48      	ldr	r2, [pc, #288]	@ (800203c <SignLetter+0xca4>)
 8001f1a:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001f1c:	4b48      	ldr	r3, [pc, #288]	@ (8002040 <SignLetter+0xca8>)
 8001f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f22:	461a      	mov	r2, r3
 8001f24:	4b47      	ldr	r3, [pc, #284]	@ (8002044 <SignLetter+0xcac>)
 8001f26:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001f28:	4b47      	ldr	r3, [pc, #284]	@ (8002048 <SignLetter+0xcb0>)
 8001f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4b46      	ldr	r3, [pc, #280]	@ (800204c <SignLetter+0xcb4>)
 8001f32:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 0 * RING_CLOSED;
 8001f34:	4b46      	ldr	r3, [pc, #280]	@ (8002050 <SignLetter+0xcb8>)
 8001f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b45      	ldr	r3, [pc, #276]	@ (8002054 <SignLetter+0xcbc>)
 8001f3e:	601a      	str	r2, [r3, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001f40:	4b45      	ldr	r3, [pc, #276]	@ (8002058 <SignLetter+0xcc0>)
 8001f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f46:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001f4a:	3b10      	subs	r3, #16
 8001f4c:	4a43      	ldr	r2, [pc, #268]	@ (800205c <SignLetter+0xcc4>)
 8001f4e:	6013      	str	r3, [r2, #0]
		break;
 8001f50:	e0d9      	b.n	8002106 <SignLetter+0xd6e>

	case 'X':
		thumb_desired_position = thumb_current - 0.5 * THUMB_CLOSED;
 8001f52:	4b39      	ldr	r3, [pc, #228]	@ (8002038 <SignLetter+0xca0>)
 8001f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7fe fa93 	bl	8000484 <__aeabi_i2d>
 8001f5e:	a330      	add	r3, pc, #192	@ (adr r3, 8002020 <SignLetter+0xc88>)
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	f7fe f940 	bl	80001e8 <__aeabi_dsub>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	460b      	mov	r3, r1
 8001f6c:	4610      	mov	r0, r2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	f7fe faf2 	bl	8000558 <__aeabi_d2iz>
 8001f74:	4603      	mov	r3, r0
 8001f76:	4a31      	ldr	r2, [pc, #196]	@ (800203c <SignLetter+0xca4>)
 8001f78:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.25 * INDEX_CLOSED;
 8001f7a:	4b31      	ldr	r3, [pc, #196]	@ (8002040 <SignLetter+0xca8>)
 8001f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7fe fa7f 	bl	8000484 <__aeabi_i2d>
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4b36      	ldr	r3, [pc, #216]	@ (8002064 <SignLetter+0xccc>)
 8001f8c:	f7fe f92c 	bl	80001e8 <__aeabi_dsub>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	f7fe fade 	bl	8000558 <__aeabi_d2iz>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4a29      	ldr	r2, [pc, #164]	@ (8002044 <SignLetter+0xcac>)
 8001fa0:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.75 * MIDDLE_CLOSED;
 8001fa2:	4b29      	ldr	r3, [pc, #164]	@ (8002048 <SignLetter+0xcb0>)
 8001fa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fa6b 	bl	8000484 <__aeabi_i2d>
 8001fae:	a31e      	add	r3, pc, #120	@ (adr r3, 8002028 <SignLetter+0xc90>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	f7fe f918 	bl	80001e8 <__aeabi_dsub>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4610      	mov	r0, r2
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	f7fe faca 	bl	8000558 <__aeabi_d2iz>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	4a21      	ldr	r2, [pc, #132]	@ (800204c <SignLetter+0xcb4>)
 8001fc8:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 0.9 * RING_CLOSED;
 8001fca:	4b21      	ldr	r3, [pc, #132]	@ (8002050 <SignLetter+0xcb8>)
 8001fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fa57 	bl	8000484 <__aeabi_i2d>
 8001fd6:	a316      	add	r3, pc, #88	@ (adr r3, 8002030 <SignLetter+0xc98>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe f904 	bl	80001e8 <__aeabi_dsub>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4610      	mov	r0, r2
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	f7fe fab6 	bl	8000558 <__aeabi_d2iz>
 8001fec:	4603      	mov	r3, r0
 8001fee:	4a19      	ldr	r2, [pc, #100]	@ (8002054 <SignLetter+0xcbc>)
 8001ff0:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0.9 * PINKY_CLOSED;
 8001ff2:	4b19      	ldr	r3, [pc, #100]	@ (8002058 <SignLetter+0xcc0>)
 8001ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7fe fa43 	bl	8000484 <__aeabi_i2d>
 8001ffe:	a30c      	add	r3, pc, #48	@ (adr r3, 8002030 <SignLetter+0xc98>)
 8002000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002004:	f7fe f8f0 	bl	80001e8 <__aeabi_dsub>
 8002008:	4602      	mov	r2, r0
 800200a:	460b      	mov	r3, r1
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe faa2 	bl	8000558 <__aeabi_d2iz>
 8002014:	4603      	mov	r3, r0
 8002016:	4a11      	ldr	r2, [pc, #68]	@ (800205c <SignLetter+0xcc4>)
 8002018:	6013      	str	r3, [r2, #0]
		break;
 800201a:	e074      	b.n	8002106 <SignLetter+0xd6e>
 800201c:	f3af 8000 	nop.w
 8002020:	00000000 	.word	0x00000000
 8002024:	40b38800 	.word	0x40b38800
 8002028:	00000000 	.word	0x00000000
 800202c:	40bd4c00 	.word	0x40bd4c00
 8002030:	00000000 	.word	0x00000000
 8002034:	40c19400 	.word	0x40c19400
 8002038:	200003a4 	.word	0x200003a4
 800203c:	200003b0 	.word	0x200003b0
 8002040:	200003a6 	.word	0x200003a6
 8002044:	200003b4 	.word	0x200003b4
 8002048:	200003a8 	.word	0x200003a8
 800204c:	200003b8 	.word	0x200003b8
 8002050:	200003aa 	.word	0x200003aa
 8002054:	200003bc 	.word	0x200003bc
 8002058:	200003ac 	.word	0x200003ac
 800205c:	200003c0 	.word	0x200003c0
 8002060:	40bf4000 	.word	0x40bf4000
 8002064:	407f4000 	.word	0x407f4000

	case 'Y':
		thumb_desired_position = thumb_current - 0 * THUMB_CLOSED;
 8002068:	4b29      	ldr	r3, [pc, #164]	@ (8002110 <SignLetter+0xd78>)
 800206a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206e:	461a      	mov	r2, r3
 8002070:	4b28      	ldr	r3, [pc, #160]	@ (8002114 <SignLetter+0xd7c>)
 8002072:	601a      	str	r2, [r3, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 8002074:	4b28      	ldr	r3, [pc, #160]	@ (8002118 <SignLetter+0xd80>)
 8002076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800207e:	4a27      	ldr	r2, [pc, #156]	@ (800211c <SignLetter+0xd84>)
 8002080:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8002082:	4b27      	ldr	r3, [pc, #156]	@ (8002120 <SignLetter+0xd88>)
 8002084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002088:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800208c:	3b10      	subs	r3, #16
 800208e:	4a25      	ldr	r2, [pc, #148]	@ (8002124 <SignLetter+0xd8c>)
 8002090:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8002092:	4b25      	ldr	r3, [pc, #148]	@ (8002128 <SignLetter+0xd90>)
 8002094:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002098:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800209c:	3b10      	subs	r3, #16
 800209e:	4a23      	ldr	r2, [pc, #140]	@ (800212c <SignLetter+0xd94>)
 80020a0:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 80020a2:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <SignLetter+0xd98>)
 80020a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a8:	461a      	mov	r2, r3
 80020aa:	4b22      	ldr	r3, [pc, #136]	@ (8002134 <SignLetter+0xd9c>)
 80020ac:	601a      	str	r2, [r3, #0]
		break;
 80020ae:	e02a      	b.n	8002106 <SignLetter+0xd6e>

	case 'Z':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //TDB
 80020b0:	4b17      	ldr	r3, [pc, #92]	@ (8002110 <SignLetter+0xd78>)
 80020b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80020ba:	3b10      	subs	r3, #16
 80020bc:	4a15      	ldr	r2, [pc, #84]	@ (8002114 <SignLetter+0xd7c>)
 80020be:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 80020c0:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <SignLetter+0xd80>)
 80020c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c6:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80020ca:	4a14      	ldr	r2, [pc, #80]	@ (800211c <SignLetter+0xd84>)
 80020cc:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80020ce:	4b14      	ldr	r3, [pc, #80]	@ (8002120 <SignLetter+0xd88>)
 80020d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d4:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80020d8:	3b10      	subs	r3, #16
 80020da:	4a12      	ldr	r2, [pc, #72]	@ (8002124 <SignLetter+0xd8c>)
 80020dc:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 80020de:	4b12      	ldr	r3, [pc, #72]	@ (8002128 <SignLetter+0xd90>)
 80020e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e4:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80020e8:	3b10      	subs	r3, #16
 80020ea:	4a10      	ldr	r2, [pc, #64]	@ (800212c <SignLetter+0xd94>)
 80020ec:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <SignLetter+0xd98>)
 80020f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f4:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80020f8:	3b10      	subs	r3, #16
 80020fa:	4a0e      	ldr	r2, [pc, #56]	@ (8002134 <SignLetter+0xd9c>)
 80020fc:	6013      	str	r3, [r2, #0]
		break;
 80020fe:	e002      	b.n	8002106 <SignLetter+0xd6e>

	default:
	   // Default position (rest)
	   Servo_StopAll();
 8002100:	f7ff f896 	bl	8001230 <Servo_StopAll>
	   break;
 8002104:	bf00      	nop
	}
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200003a4 	.word	0x200003a4
 8002114:	200003b0 	.word	0x200003b0
 8002118:	200003a6 	.word	0x200003a6
 800211c:	200003b4 	.word	0x200003b4
 8002120:	200003a8 	.word	0x200003a8
 8002124:	200003b8 	.word	0x200003b8
 8002128:	200003aa 	.word	0x200003aa
 800212c:	200003bc 	.word	0x200003bc
 8002130:	200003ac 	.word	0x200003ac
 8002134:	200003c0 	.word	0x200003c0

08002138 <HAL_GPIO_EXTI_Callback>:
 * @param None
 * @retval None
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	4603      	mov	r3, r0
 8002140:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) // Check it’s B1 triggering the interrupt
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002148:	d107      	bne.n	800215a <HAL_GPIO_EXTI_Callback+0x22>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Toggle LED2 as a test
 800214a:	2120      	movs	r1, #32
 800214c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002150:	f000 ff56 	bl	8003000 <HAL_GPIO_TogglePin>
		SignLetter('A');
 8002154:	2041      	movs	r0, #65	@ 0x41
 8002156:	f7ff f91f 	bl	8001398 <SignLetter>

	}
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b096      	sub	sp, #88	@ 0x58
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	Servo_Init();
 800216c:	f7ff f8da 	bl	8001324 <Servo_Init>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002170:	2120      	movs	r1, #32
 8002172:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002176:	f000 ff43 	bl	8003000 <HAL_GPIO_TogglePin>

	SignLetter('A');
 800217a:	2041      	movs	r0, #65	@ 0x41
 800217c:	f7ff f90c 	bl	8001398 <SignLetter>

	osDelay(10);
 8002180:	200a      	movs	r0, #10
 8002182:	f004 fb5d 	bl	8006840 <osDelay>

	ServoState state1 = {25,Direction_Decider(&thumb_desired_position),0,THUMB}; // Sets motion for Thumb
 8002186:	2319      	movs	r3, #25
 8002188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800218a:	485f      	ldr	r0, [pc, #380]	@ (8002308 <StartDefaultTask+0x1a4>)
 800218c:	f7ff f8ec 	bl	8001368 <Direction_Decider>
 8002190:	4603      	mov	r3, r0
 8002192:	b2db      	uxtb	r3, r3
 8002194:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8002198:	2300      	movs	r3, #0
 800219a:	653b      	str	r3, [r7, #80]	@ 0x50
 800219c:	2300      	movs	r3, #0
 800219e:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
	osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 80021a2:	4b5a      	ldr	r3, [pc, #360]	@ (800230c <StartDefaultTask+0x1a8>)
 80021a4:	6818      	ldr	r0, [r3, #0]
 80021a6:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80021aa:	2300      	movs	r3, #0
 80021ac:	2200      	movs	r2, #0
 80021ae:	f004 fc95 	bl	8006adc <osMessageQueuePut>

	ServoState state2 = {25,Direction_Decider(&index_desired_position),0,INDEX}; // Sets motion for Index Finger
 80021b2:	2319      	movs	r3, #25
 80021b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021b6:	4856      	ldr	r0, [pc, #344]	@ (8002310 <StartDefaultTask+0x1ac>)
 80021b8:	f7ff f8d6 	bl	8001368 <Direction_Decider>
 80021bc:	4603      	mov	r3, r0
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
 80021c4:	2300      	movs	r3, #0
 80021c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80021c8:	2301      	movs	r3, #1
 80021ca:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
	osMessageQueuePut(servoQueueHandle, &state2, 0, 0);
 80021ce:	4b4f      	ldr	r3, [pc, #316]	@ (800230c <StartDefaultTask+0x1a8>)
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80021d6:	2300      	movs	r3, #0
 80021d8:	2200      	movs	r2, #0
 80021da:	f004 fc7f 	bl	8006adc <osMessageQueuePut>

	ServoState state3 = {25,Direction_Decider(&middle_desired_position),0,MIDDLE}; // Sets motion for Middle Finger
 80021de:	2319      	movs	r3, #25
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021e2:	484c      	ldr	r0, [pc, #304]	@ (8002314 <StartDefaultTask+0x1b0>)
 80021e4:	f7ff f8c0 	bl	8001368 <Direction_Decider>
 80021e8:	4603      	mov	r3, r0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 80021f0:	2300      	movs	r3, #0
 80021f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80021f4:	2302      	movs	r3, #2
 80021f6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
	osMessageQueuePut(servoQueueHandle, &state3, 0, 0);
 80021fa:	4b44      	ldr	r3, [pc, #272]	@ (800230c <StartDefaultTask+0x1a8>)
 80021fc:	6818      	ldr	r0, [r3, #0]
 80021fe:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002202:	2300      	movs	r3, #0
 8002204:	2200      	movs	r2, #0
 8002206:	f004 fc69 	bl	8006adc <osMessageQueuePut>

	ServoState state4 = {25,Direction_Decider(&ring_desired_position),0,RING}; // Sets motion for Ring Finger
 800220a:	2319      	movs	r3, #25
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	4842      	ldr	r0, [pc, #264]	@ (8002318 <StartDefaultTask+0x1b4>)
 8002210:	f7ff f8aa 	bl	8001368 <Direction_Decider>
 8002214:	4603      	mov	r3, r0
 8002216:	b2db      	uxtb	r3, r3
 8002218:	773b      	strb	r3, [r7, #28]
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
 800221e:	2303      	movs	r3, #3
 8002220:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	osMessageQueuePut(servoQueueHandle, &state4, 0, 0);
 8002224:	4b39      	ldr	r3, [pc, #228]	@ (800230c <StartDefaultTask+0x1a8>)
 8002226:	6818      	ldr	r0, [r3, #0]
 8002228:	f107 0118 	add.w	r1, r7, #24
 800222c:	2300      	movs	r3, #0
 800222e:	2200      	movs	r2, #0
 8002230:	f004 fc54 	bl	8006adc <osMessageQueuePut>

	ServoState state5 = {25,Direction_Decider(&pinky_desired_position),0,PINKY}; // Sets motion for Pinky Finger0
 8002234:	2319      	movs	r3, #25
 8002236:	60bb      	str	r3, [r7, #8]
 8002238:	4838      	ldr	r0, [pc, #224]	@ (800231c <StartDefaultTask+0x1b8>)
 800223a:	f7ff f895 	bl	8001368 <Direction_Decider>
 800223e:	4603      	mov	r3, r0
 8002240:	b2db      	uxtb	r3, r3
 8002242:	733b      	strb	r3, [r7, #12]
 8002244:	2300      	movs	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	2304      	movs	r3, #4
 800224a:	753b      	strb	r3, [r7, #20]
	osMessageQueuePut(servoQueueHandle, &state5, 0, 0);
 800224c:	4b2f      	ldr	r3, [pc, #188]	@ (800230c <StartDefaultTask+0x1a8>)
 800224e:	6818      	ldr	r0, [r3, #0]
 8002250:	f107 0108 	add.w	r1, r7, #8
 8002254:	2300      	movs	r3, #0
 8002256:	2200      	movs	r2, #0
 8002258:	f004 fc40 	bl	8006adc <osMessageQueuePut>

	osTimerStart(Index_FingerHandle, abs(index_desired_position));
 800225c:	4b30      	ldr	r3, [pc, #192]	@ (8002320 <StartDefaultTask+0x1bc>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b2b      	ldr	r3, [pc, #172]	@ (8002310 <StartDefaultTask+0x1ac>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	bfb8      	it	lt
 8002268:	425b      	neglt	r3, r3
 800226a:	4619      	mov	r1, r3
 800226c:	4610      	mov	r0, r2
 800226e:	f004 fb93 	bl	8006998 <osTimerStart>
	osTimerStart(Thumb_FingerHandle, abs(thumb_desired_position));
 8002272:	4b2c      	ldr	r3, [pc, #176]	@ (8002324 <StartDefaultTask+0x1c0>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <StartDefaultTask+0x1a4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	bfb8      	it	lt
 800227e:	425b      	neglt	r3, r3
 8002280:	4619      	mov	r1, r3
 8002282:	4610      	mov	r0, r2
 8002284:	f004 fb88 	bl	8006998 <osTimerStart>
	osTimerStart(Middle_FingerHandle, abs(middle_desired_position));
 8002288:	4b27      	ldr	r3, [pc, #156]	@ (8002328 <StartDefaultTask+0x1c4>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b21      	ldr	r3, [pc, #132]	@ (8002314 <StartDefaultTask+0x1b0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b00      	cmp	r3, #0
 8002292:	bfb8      	it	lt
 8002294:	425b      	neglt	r3, r3
 8002296:	4619      	mov	r1, r3
 8002298:	4610      	mov	r0, r2
 800229a:	f004 fb7d 	bl	8006998 <osTimerStart>
	osTimerStart(Ring_FingerHandle, abs(ring_desired_position));
 800229e:	4b23      	ldr	r3, [pc, #140]	@ (800232c <StartDefaultTask+0x1c8>)
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002318 <StartDefaultTask+0x1b4>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	bfb8      	it	lt
 80022aa:	425b      	neglt	r3, r3
 80022ac:	4619      	mov	r1, r3
 80022ae:	4610      	mov	r0, r2
 80022b0:	f004 fb72 	bl	8006998 <osTimerStart>
	osTimerStart(Pinky_FingerHandle, abs(pinky_desired_position));
 80022b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002330 <StartDefaultTask+0x1cc>)
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b18      	ldr	r3, [pc, #96]	@ (800231c <StartDefaultTask+0x1b8>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	bfb8      	it	lt
 80022c0:	425b      	neglt	r3, r3
 80022c2:	4619      	mov	r1, r3
 80022c4:	4610      	mov	r0, r2
 80022c6:	f004 fb67 	bl	8006998 <osTimerStart>

	/* Infinite loop to keep it in the task */
  for(;;)
  {

	if (IsButtonPressed() && messageReady)
 80022ca:	f7fe fead 	bl	8001028 <IsButtonPressed>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d015      	beq.n	8002300 <StartDefaultTask+0x19c>
 80022d4:	4b17      	ldr	r3, [pc, #92]	@ (8002334 <StartDefaultTask+0x1d0>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d011      	beq.n	8002300 <StartDefaultTask+0x19c>
	  {
		/* Process the message when button is pressed and message is available */
		ProcessReceivedMessage(message);
 80022dc:	4816      	ldr	r0, [pc, #88]	@ (8002338 <StartDefaultTask+0x1d4>)
 80022de:	f7fe feb5 	bl	800104c <ProcessReceivedMessage>

		/* Reset message buffer */
		messageIndex = 0;
 80022e2:	4b16      	ldr	r3, [pc, #88]	@ (800233c <StartDefaultTask+0x1d8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	801a      	strh	r2, [r3, #0]
		messageReady = 0;
 80022e8:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <StartDefaultTask+0x1d0>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
		memset(message, 0, sizeof(message));
 80022ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022f2:	2100      	movs	r1, #0
 80022f4:	4810      	ldr	r0, [pc, #64]	@ (8002338 <StartDefaultTask+0x1d4>)
 80022f6:	f007 fab7 	bl	8009868 <memset>

		/* Debounce */
		HAL_Delay(200);
 80022fa:	20c8      	movs	r0, #200	@ 0xc8
 80022fc:	f000 fba0 	bl	8002a40 <HAL_Delay>
	  }
	  osDelay(100);
 8002300:	2064      	movs	r0, #100	@ 0x64
 8002302:	f004 fa9d 	bl	8006840 <osDelay>
	if (IsButtonPressed() && messageReady)
 8002306:	e7e0      	b.n	80022ca <StartDefaultTask+0x166>
 8002308:	200003b0 	.word	0x200003b0
 800230c:	20000298 	.word	0x20000298
 8002310:	200003b4 	.word	0x200003b4
 8002314:	200003b8 	.word	0x200003b8
 8002318:	200003bc 	.word	0x200003bc
 800231c:	200003c0 	.word	0x200003c0
 8002320:	20000284 	.word	0x20000284
 8002324:	20000288 	.word	0x20000288
 8002328:	2000028c 	.word	0x2000028c
 800232c:	20000290 	.word	0x20000290
 8002330:	20000294 	.word	0x20000294
 8002334:	200003a2 	.word	0x200003a2
 8002338:	200002a0 	.word	0x200002a0
 800233c:	200003a0 	.word	0x200003a0

08002340 <Index>:
  /* USER CODE END 5 */
}

/* Index function */
void Index(void *argument)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Index */

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002348:	2120      	movs	r1, #32
 800234a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800234e:	f000 fe57 	bl	8003000 <HAL_GPIO_TogglePin>
	ServoState state1 = {0,STOP,0,INDEX}; // Stops Index Finger
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	2300      	movs	r3, #0
 8002358:	733b      	strb	r3, [r7, #12]
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	2301      	movs	r3, #1
 8002360:	753b      	strb	r3, [r7, #20]
	osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 8002362:	4b0a      	ldr	r3, [pc, #40]	@ (800238c <Index+0x4c>)
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	f107 0108 	add.w	r1, r7, #8
 800236a:	2300      	movs	r3, #0
 800236c:	2200      	movs	r2, #0
 800236e:	f004 fbb5 	bl	8006adc <osMessageQueuePut>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002372:	2100      	movs	r1, #0
 8002374:	4806      	ldr	r0, [pc, #24]	@ (8002390 <Index+0x50>)
 8002376:	f002 fbf7 	bl	8004b68 <HAL_TIM_PWM_Stop>
	index_current = index_desired_position;
 800237a:	4b06      	ldr	r3, [pc, #24]	@ (8002394 <Index+0x54>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	b21a      	sxth	r2, r3
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <Index+0x58>)
 8002382:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Index */
}
 8002384:	bf00      	nop
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000298 	.word	0x20000298
 8002390:	200000c8 	.word	0x200000c8
 8002394:	200003b4 	.word	0x200003b4
 8002398:	200003a6 	.word	0x200003a6

0800239c <Thumb>:

/* Thumb function */
void Thumb(void *argument)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thumb */
	Servo_StopAll();
 80023a4:	f7fe ff44 	bl	8001230 <Servo_StopAll>

    thumb_current = thumb_desired_position;
 80023a8:	4b04      	ldr	r3, [pc, #16]	@ (80023bc <Thumb+0x20>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b21a      	sxth	r2, r3
 80023ae:	4b04      	ldr	r3, [pc, #16]	@ (80023c0 <Thumb+0x24>)
 80023b0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Thumb */
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200003b0 	.word	0x200003b0
 80023c0:	200003a4 	.word	0x200003a4

080023c4 <Middle>:

/* Middle function */
void Middle(void *argument)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Middle */
	Servo_StopAll();
 80023cc:	f7fe ff30 	bl	8001230 <Servo_StopAll>

	middle_current = middle_desired_position;
 80023d0:	4b04      	ldr	r3, [pc, #16]	@ (80023e4 <Middle+0x20>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	b21a      	sxth	r2, r3
 80023d6:	4b04      	ldr	r3, [pc, #16]	@ (80023e8 <Middle+0x24>)
 80023d8:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Middle */
}
 80023da:	bf00      	nop
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	200003b8 	.word	0x200003b8
 80023e8:	200003a8 	.word	0x200003a8

080023ec <Ring>:

/* Ring function */
void Ring(void *argument)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b082      	sub	sp, #8
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ring */
	Servo_StopAll();
 80023f4:	f7fe ff1c 	bl	8001230 <Servo_StopAll>

	ring_current = ring_desired_position;
 80023f8:	4b04      	ldr	r3, [pc, #16]	@ (800240c <Ring+0x20>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	b21a      	sxth	r2, r3
 80023fe:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <Ring+0x24>)
 8002400:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Ring */
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	200003bc 	.word	0x200003bc
 8002410:	200003aa 	.word	0x200003aa

08002414 <Pinky>:

/* Pinky function */
void Pinky(void *argument)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Pinky */
	Servo_StopAll();
 800241c:	f7fe ff08 	bl	8001230 <Servo_StopAll>

	pinky_current = pinky_desired_position;
 8002420:	4b04      	ldr	r3, [pc, #16]	@ (8002434 <Pinky+0x20>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	b21a      	sxth	r2, r3
 8002426:	4b04      	ldr	r3, [pc, #16]	@ (8002438 <Pinky+0x24>)
 8002428:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Pinky */
}
 800242a:	bf00      	nop
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200003c0 	.word	0x200003c0
 8002438:	200003ac 	.word	0x200003ac

0800243c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a04      	ldr	r2, [pc, #16]	@ (800245c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d101      	bne.n	8002452 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800244e:	f000 fad7 	bl	8002a00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002452:	bf00      	nop
 8002454:	3708      	adds	r7, #8
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40000c00 	.word	0x40000c00

08002460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002464:	b672      	cpsid	i
}
 8002466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002468:	bf00      	nop
 800246a:	e7fd      	b.n	8002468 <Error_Handler+0x8>

0800246c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002472:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_MspInit+0x4c>)
 8002474:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002476:	4a10      	ldr	r2, [pc, #64]	@ (80024b8 <HAL_MspInit+0x4c>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6613      	str	r3, [r2, #96]	@ 0x60
 800247e:	4b0e      	ldr	r3, [pc, #56]	@ (80024b8 <HAL_MspInit+0x4c>)
 8002480:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800248a:	4b0b      	ldr	r3, [pc, #44]	@ (80024b8 <HAL_MspInit+0x4c>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800248e:	4a0a      	ldr	r2, [pc, #40]	@ (80024b8 <HAL_MspInit+0x4c>)
 8002490:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002494:	6593      	str	r3, [r2, #88]	@ 0x58
 8002496:	4b08      	ldr	r3, [pc, #32]	@ (80024b8 <HAL_MspInit+0x4c>)
 8002498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	210f      	movs	r1, #15
 80024a6:	f06f 0001 	mvn.w	r0, #1
 80024aa:	f000 fba5 	bl	8002bf8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000

080024bc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80024bc:	b480      	push	{r7}
 80024be:	b089      	sub	sp, #36	@ 0x24
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a2e      	ldr	r2, [pc, #184]	@ (8002584 <HAL_TIM_PWM_MspInit+0xc8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10c      	bne.n	80024e8 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80024ce:	4b2e      	ldr	r3, [pc, #184]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 80024d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d2:	4a2d      	ldr	r2, [pc, #180]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 80024d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80024d8:	6613      	str	r3, [r2, #96]	@ 0x60
 80024da:	4b2b      	ldr	r3, [pc, #172]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 80024dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024e2:	61fb      	str	r3, [r7, #28]
 80024e4:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80024e6:	e046      	b.n	8002576 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024f0:	d10c      	bne.n	800250c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024f2:	4b25      	ldr	r3, [pc, #148]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024f6:	4a24      	ldr	r2, [pc, #144]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80024fe:	4b22      	ldr	r3, [pc, #136]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	61bb      	str	r3, [r7, #24]
 8002508:	69bb      	ldr	r3, [r7, #24]
}
 800250a:	e034      	b.n	8002576 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1e      	ldr	r2, [pc, #120]	@ (800258c <HAL_TIM_PWM_MspInit+0xd0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d10c      	bne.n	8002530 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002516:	4b1c      	ldr	r3, [pc, #112]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	4a1b      	ldr	r2, [pc, #108]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 800251c:	f043 0302 	orr.w	r3, r3, #2
 8002520:	6593      	str	r3, [r2, #88]	@ 0x58
 8002522:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]
}
 800252e:	e022      	b.n	8002576 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM4)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a16      	ldr	r2, [pc, #88]	@ (8002590 <HAL_TIM_PWM_MspInit+0xd4>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d10c      	bne.n	8002554 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800253a:	4b13      	ldr	r3, [pc, #76]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 800253c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800253e:	4a12      	ldr	r2, [pc, #72]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 8002540:	f043 0304 	orr.w	r3, r3, #4
 8002544:	6593      	str	r3, [r2, #88]	@ 0x58
 8002546:	4b10      	ldr	r3, [pc, #64]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 8002548:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]
}
 8002552:	e010      	b.n	8002576 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM8)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a0e      	ldr	r2, [pc, #56]	@ (8002594 <HAL_TIM_PWM_MspInit+0xd8>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d10b      	bne.n	8002576 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800255e:	4b0a      	ldr	r3, [pc, #40]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 8002560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002562:	4a09      	ldr	r2, [pc, #36]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 8002564:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002568:	6613      	str	r3, [r2, #96]	@ 0x60
 800256a:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <HAL_TIM_PWM_MspInit+0xcc>)
 800256c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	68fb      	ldr	r3, [r7, #12]
}
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	@ 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40012c00 	.word	0x40012c00
 8002588:	40021000 	.word	0x40021000
 800258c:	40000400 	.word	0x40000400
 8002590:	40000800 	.word	0x40000800
 8002594:	40013400 	.word	0x40013400

08002598 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08c      	sub	sp, #48	@ 0x30
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 031c 	add.w	r3, r7, #28
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a57      	ldr	r2, [pc, #348]	@ (8002714 <HAL_TIM_MspPostInit+0x17c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d11e      	bne.n	80025f8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	4b57      	ldr	r3, [pc, #348]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 80025bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025be:	4a56      	ldr	r2, [pc, #344]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c6:	4b54      	ldr	r3, [pc, #336]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 80025c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	61bb      	str	r3, [r7, #24]
 80025d0:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80025d2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d8:	2302      	movs	r3, #2
 80025da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025dc:	2300      	movs	r3, #0
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	4619      	mov	r1, r3
 80025ee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025f2:	f000 fb2b 	bl	8002c4c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80025f6:	e088      	b.n	800270a <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002600:	d11d      	bne.n	800263e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	4b45      	ldr	r3, [pc, #276]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 8002604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002606:	4a44      	ldr	r2, [pc, #272]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 8002608:	f043 0301 	orr.w	r3, r3, #1
 800260c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800260e:	4b42      	ldr	r3, [pc, #264]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 8002610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800261a:	2301      	movs	r3, #1
 800261c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261e:	2302      	movs	r3, #2
 8002620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800262a:	2301      	movs	r3, #1
 800262c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800262e:	f107 031c 	add.w	r3, r7, #28
 8002632:	4619      	mov	r1, r3
 8002634:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002638:	f000 fb08 	bl	8002c4c <HAL_GPIO_Init>
}
 800263c:	e065      	b.n	800270a <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a36      	ldr	r2, [pc, #216]	@ (800271c <HAL_TIM_MspPostInit+0x184>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d11d      	bne.n	8002684 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002648:	4b33      	ldr	r3, [pc, #204]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 800264a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800264c:	4a32      	ldr	r2, [pc, #200]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 800264e:	f043 0301 	orr.w	r3, r3, #1
 8002652:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002654:	4b30      	ldr	r3, [pc, #192]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 8002656:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002660:	2340      	movs	r3, #64	@ 0x40
 8002662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002670:	2302      	movs	r3, #2
 8002672:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	4619      	mov	r1, r3
 800267a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800267e:	f000 fae5 	bl	8002c4c <HAL_GPIO_Init>
}
 8002682:	e042      	b.n	800270a <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a25      	ldr	r2, [pc, #148]	@ (8002720 <HAL_TIM_MspPostInit+0x188>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d11c      	bne.n	80026c8 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	4b22      	ldr	r3, [pc, #136]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 8002690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002692:	4a21      	ldr	r2, [pc, #132]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800269a:	4b1f      	ldr	r3, [pc, #124]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	60fb      	str	r3, [r7, #12]
 80026a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026a6:	2340      	movs	r3, #64	@ 0x40
 80026a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026aa:	2302      	movs	r3, #2
 80026ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ae:	2300      	movs	r3, #0
 80026b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b2:	2300      	movs	r3, #0
 80026b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026b6:	2302      	movs	r3, #2
 80026b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ba:	f107 031c 	add.w	r3, r7, #28
 80026be:	4619      	mov	r1, r3
 80026c0:	4818      	ldr	r0, [pc, #96]	@ (8002724 <HAL_TIM_MspPostInit+0x18c>)
 80026c2:	f000 fac3 	bl	8002c4c <HAL_GPIO_Init>
}
 80026c6:	e020      	b.n	800270a <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM8)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a16      	ldr	r2, [pc, #88]	@ (8002728 <HAL_TIM_MspPostInit+0x190>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d11b      	bne.n	800270a <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d2:	4b11      	ldr	r3, [pc, #68]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 80026d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026d6:	4a10      	ldr	r2, [pc, #64]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 80026d8:	f043 0304 	orr.w	r3, r3, #4
 80026dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80026de:	4b0e      	ldr	r3, [pc, #56]	@ (8002718 <HAL_TIM_MspPostInit+0x180>)
 80026e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026ea:	2340      	movs	r3, #64	@ 0x40
 80026ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026fa:	2303      	movs	r3, #3
 80026fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fe:	f107 031c 	add.w	r3, r7, #28
 8002702:	4619      	mov	r1, r3
 8002704:	4809      	ldr	r0, [pc, #36]	@ (800272c <HAL_TIM_MspPostInit+0x194>)
 8002706:	f000 faa1 	bl	8002c4c <HAL_GPIO_Init>
}
 800270a:	bf00      	nop
 800270c:	3730      	adds	r7, #48	@ 0x30
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40012c00 	.word	0x40012c00
 8002718:	40021000 	.word	0x40021000
 800271c:	40000400 	.word	0x40000400
 8002720:	40000800 	.word	0x40000800
 8002724:	48000400 	.word	0x48000400
 8002728:	40013400 	.word	0x40013400
 800272c:	48000800 	.word	0x48000800

08002730 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b0ac      	sub	sp, #176	@ 0xb0
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002738:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800273c:	2200      	movs	r2, #0
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	605a      	str	r2, [r3, #4]
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	60da      	str	r2, [r3, #12]
 8002746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002748:	f107 0314 	add.w	r3, r7, #20
 800274c:	2288      	movs	r2, #136	@ 0x88
 800274e:	2100      	movs	r1, #0
 8002750:	4618      	mov	r0, r3
 8002752:	f007 f889 	bl	8009868 <memset>
  if(huart->Instance==USART2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a25      	ldr	r2, [pc, #148]	@ (80027f0 <HAL_UART_MspInit+0xc0>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d143      	bne.n	80027e8 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002760:	2302      	movs	r3, #2
 8002762:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002764:	2300      	movs	r3, #0
 8002766:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4618      	mov	r0, r3
 800276e:	f001 fb0f 	bl	8003d90 <HAL_RCCEx_PeriphCLKConfig>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d001      	beq.n	800277c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002778:	f7ff fe72 	bl	8002460 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800277c:	4b1d      	ldr	r3, [pc, #116]	@ (80027f4 <HAL_UART_MspInit+0xc4>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	4a1c      	ldr	r2, [pc, #112]	@ (80027f4 <HAL_UART_MspInit+0xc4>)
 8002782:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002786:	6593      	str	r3, [r2, #88]	@ 0x58
 8002788:	4b1a      	ldr	r3, [pc, #104]	@ (80027f4 <HAL_UART_MspInit+0xc4>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002794:	4b17      	ldr	r3, [pc, #92]	@ (80027f4 <HAL_UART_MspInit+0xc4>)
 8002796:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002798:	4a16      	ldr	r2, [pc, #88]	@ (80027f4 <HAL_UART_MspInit+0xc4>)
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027a0:	4b14      	ldr	r3, [pc, #80]	@ (80027f4 <HAL_UART_MspInit+0xc4>)
 80027a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a4:	f003 0301 	and.w	r3, r3, #1
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80027ac:	230c      	movs	r3, #12
 80027ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027be:	2303      	movs	r3, #3
 80027c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027c4:	2307      	movs	r3, #7
 80027c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ca:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80027ce:	4619      	mov	r1, r3
 80027d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027d4:	f000 fa3a 	bl	8002c4c <HAL_GPIO_Init>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80027d8:	2200      	movs	r2, #0
 80027da:	2100      	movs	r1, #0
 80027dc:	2026      	movs	r0, #38	@ 0x26
 80027de:	f000 fa0b 	bl	8002bf8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80027e2:	2026      	movs	r0, #38	@ 0x26
 80027e4:	f000 fa24 	bl	8002c30 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80027e8:	bf00      	nop
 80027ea:	37b0      	adds	r7, #176	@ 0xb0
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	40004400 	.word	0x40004400
 80027f4:	40021000 	.word	0x40021000

080027f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08e      	sub	sp, #56	@ 0x38
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002806:	4b34      	ldr	r3, [pc, #208]	@ (80028d8 <HAL_InitTick+0xe0>)
 8002808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280a:	4a33      	ldr	r2, [pc, #204]	@ (80028d8 <HAL_InitTick+0xe0>)
 800280c:	f043 0308 	orr.w	r3, r3, #8
 8002810:	6593      	str	r3, [r2, #88]	@ 0x58
 8002812:	4b31      	ldr	r3, [pc, #196]	@ (80028d8 <HAL_InitTick+0xe0>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800281e:	f107 0210 	add.w	r2, r7, #16
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4611      	mov	r1, r2
 8002828:	4618      	mov	r0, r3
 800282a:	f001 fa1f 	bl	8003c6c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d103      	bne.n	8002840 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002838:	f001 f9ec 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 800283c:	6378      	str	r0, [r7, #52]	@ 0x34
 800283e:	e004      	b.n	800284a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002840:	f001 f9e8 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8002844:	4603      	mov	r3, r0
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800284a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800284c:	4a23      	ldr	r2, [pc, #140]	@ (80028dc <HAL_InitTick+0xe4>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	0c9b      	lsrs	r3, r3, #18
 8002854:	3b01      	subs	r3, #1
 8002856:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8002858:	4b21      	ldr	r3, [pc, #132]	@ (80028e0 <HAL_InitTick+0xe8>)
 800285a:	4a22      	ldr	r2, [pc, #136]	@ (80028e4 <HAL_InitTick+0xec>)
 800285c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800285e:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <HAL_InitTick+0xe8>)
 8002860:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002864:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8002866:	4a1e      	ldr	r2, [pc, #120]	@ (80028e0 <HAL_InitTick+0xe8>)
 8002868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 800286c:	4b1c      	ldr	r3, [pc, #112]	@ (80028e0 <HAL_InitTick+0xe8>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002872:	4b1b      	ldr	r3, [pc, #108]	@ (80028e0 <HAL_InitTick+0xe8>)
 8002874:	2200      	movs	r2, #0
 8002876:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002878:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <HAL_InitTick+0xe8>)
 800287a:	2200      	movs	r2, #0
 800287c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800287e:	4818      	ldr	r0, [pc, #96]	@ (80028e0 <HAL_InitTick+0xe8>)
 8002880:	f001 ff42 	bl	8004708 <HAL_TIM_Base_Init>
 8002884:	4603      	mov	r3, r0
 8002886:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800288a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800288e:	2b00      	cmp	r3, #0
 8002890:	d11b      	bne.n	80028ca <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002892:	4813      	ldr	r0, [pc, #76]	@ (80028e0 <HAL_InitTick+0xe8>)
 8002894:	f001 ff9a 	bl	80047cc <HAL_TIM_Base_Start_IT>
 8002898:	4603      	mov	r3, r0
 800289a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800289e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d111      	bne.n	80028ca <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80028a6:	2032      	movs	r0, #50	@ 0x32
 80028a8:	f000 f9c2 	bl	8002c30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b0f      	cmp	r3, #15
 80028b0:	d808      	bhi.n	80028c4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 80028b2:	2200      	movs	r2, #0
 80028b4:	6879      	ldr	r1, [r7, #4]
 80028b6:	2032      	movs	r0, #50	@ 0x32
 80028b8:	f000 f99e 	bl	8002bf8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028bc:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <HAL_InitTick+0xf0>)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e002      	b.n	80028ca <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80028ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3738      	adds	r7, #56	@ 0x38
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	431bde83 	.word	0x431bde83
 80028e0:	200003c4 	.word	0x200003c4
 80028e4:	40000c00 	.word	0x40000c00
 80028e8:	20000054 	.word	0x20000054

080028ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <NMI_Handler+0x4>

080028f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <HardFault_Handler+0x4>

080028fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <MemManage_Handler+0x4>

08002904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <BusFault_Handler+0x4>

0800290c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002910:	bf00      	nop
 8002912:	e7fd      	b.n	8002910 <UsageFault_Handler+0x4>

08002914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002914:	b480      	push	{r7}
 8002916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr

08002922 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002926:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800292a:	f000 fb83 	bl	8003034 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002938:	4802      	ldr	r0, [pc, #8]	@ (8002944 <TIM5_IRQHandler+0x10>)
 800293a:	f002 f9ab 	bl	8004c94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	200003c4 	.word	0x200003c4

08002948 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800294c:	4b06      	ldr	r3, [pc, #24]	@ (8002968 <SystemInit+0x20>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002952:	4a05      	ldr	r2, [pc, #20]	@ (8002968 <SystemInit+0x20>)
 8002954:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002958:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800295c:	bf00      	nop
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
 8002966:	bf00      	nop
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800296c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80029a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002970:	f7ff ffea 	bl	8002948 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002974:	480c      	ldr	r0, [pc, #48]	@ (80029a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8002976:	490d      	ldr	r1, [pc, #52]	@ (80029ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8002978:	4a0d      	ldr	r2, [pc, #52]	@ (80029b0 <LoopForever+0xe>)
  movs r3, #0
 800297a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800297c:	e002      	b.n	8002984 <LoopCopyDataInit>

0800297e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002980:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002982:	3304      	adds	r3, #4

08002984 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002984:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002986:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002988:	d3f9      	bcc.n	800297e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800298a:	4a0a      	ldr	r2, [pc, #40]	@ (80029b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800298c:	4c0a      	ldr	r4, [pc, #40]	@ (80029b8 <LoopForever+0x16>)
  movs r3, #0
 800298e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002990:	e001      	b.n	8002996 <LoopFillZerobss>

08002992 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002992:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002994:	3204      	adds	r2, #4

08002996 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002996:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002998:	d3fb      	bcc.n	8002992 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800299a:	f006 ff6d 	bl	8009878 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800299e:	f7fd ff99 	bl	80008d4 <main>

080029a2 <LoopForever>:

LoopForever:
    b LoopForever
 80029a2:	e7fe      	b.n	80029a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029a4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80029a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029ac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80029b0:	08009ad4 	.word	0x08009ad4
  ldr r2, =_sbss
 80029b4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80029b8:	20001d1c 	.word	0x20001d1c

080029bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80029bc:	e7fe      	b.n	80029bc <ADC1_2_IRQHandler>
	...

080029c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b082      	sub	sp, #8
 80029c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029c6:	2300      	movs	r3, #0
 80029c8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029ca:	4b0c      	ldr	r3, [pc, #48]	@ (80029fc <HAL_Init+0x3c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a0b      	ldr	r2, [pc, #44]	@ (80029fc <HAL_Init+0x3c>)
 80029d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d6:	2003      	movs	r0, #3
 80029d8:	f000 f903 	bl	8002be2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029dc:	200f      	movs	r0, #15
 80029de:	f7ff ff0b 	bl	80027f8 <HAL_InitTick>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d002      	beq.n	80029ee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	71fb      	strb	r3, [r7, #7]
 80029ec:	e001      	b.n	80029f2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029ee:	f7ff fd3d 	bl	800246c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029f2:	79fb      	ldrb	r3, [r7, #7]
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40022000 	.word	0x40022000

08002a00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002a04:	4b06      	ldr	r3, [pc, #24]	@ (8002a20 <HAL_IncTick+0x20>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	461a      	mov	r2, r3
 8002a0a:	4b06      	ldr	r3, [pc, #24]	@ (8002a24 <HAL_IncTick+0x24>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4413      	add	r3, r2
 8002a10:	4a04      	ldr	r2, [pc, #16]	@ (8002a24 <HAL_IncTick+0x24>)
 8002a12:	6013      	str	r3, [r2, #0]
}
 8002a14:	bf00      	nop
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	20000058 	.word	0x20000058
 8002a24:	20000410 	.word	0x20000410

08002a28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a2c:	4b03      	ldr	r3, [pc, #12]	@ (8002a3c <HAL_GetTick+0x14>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	20000410 	.word	0x20000410

08002a40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a48:	f7ff ffee 	bl	8002a28 <HAL_GetTick>
 8002a4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a58:	d005      	beq.n	8002a66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a84 <HAL_Delay+0x44>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	461a      	mov	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a66:	bf00      	nop
 8002a68:	f7ff ffde 	bl	8002a28 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d8f7      	bhi.n	8002a68 <HAL_Delay+0x28>
  {
  }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	20000058 	.word	0x20000058

08002a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a98:	4b0c      	ldr	r3, [pc, #48]	@ (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a9e:	68ba      	ldr	r2, [r7, #8]
 8002aa0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ab4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aba:	4a04      	ldr	r2, [pc, #16]	@ (8002acc <__NVIC_SetPriorityGrouping+0x44>)
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	60d3      	str	r3, [r2, #12]
}
 8002ac0:	bf00      	nop
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	e000ed00 	.word	0xe000ed00

08002ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad4:	4b04      	ldr	r3, [pc, #16]	@ (8002ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	0a1b      	lsrs	r3, r3, #8
 8002ada:	f003 0307 	and.w	r3, r3, #7
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr
 8002ae8:	e000ed00 	.word	0xe000ed00

08002aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	4603      	mov	r3, r0
 8002af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db0b      	blt.n	8002b16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002afe:	79fb      	ldrb	r3, [r7, #7]
 8002b00:	f003 021f 	and.w	r2, r3, #31
 8002b04:	4907      	ldr	r1, [pc, #28]	@ (8002b24 <__NVIC_EnableIRQ+0x38>)
 8002b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0a:	095b      	lsrs	r3, r3, #5
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
 8002b22:	bf00      	nop
 8002b24:	e000e100 	.word	0xe000e100

08002b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	6039      	str	r1, [r7, #0]
 8002b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	db0a      	blt.n	8002b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	b2da      	uxtb	r2, r3
 8002b40:	490c      	ldr	r1, [pc, #48]	@ (8002b74 <__NVIC_SetPriority+0x4c>)
 8002b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b46:	0112      	lsls	r2, r2, #4
 8002b48:	b2d2      	uxtb	r2, r2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b50:	e00a      	b.n	8002b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	b2da      	uxtb	r2, r3
 8002b56:	4908      	ldr	r1, [pc, #32]	@ (8002b78 <__NVIC_SetPriority+0x50>)
 8002b58:	79fb      	ldrb	r3, [r7, #7]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	3b04      	subs	r3, #4
 8002b60:	0112      	lsls	r2, r2, #4
 8002b62:	b2d2      	uxtb	r2, r2
 8002b64:	440b      	add	r3, r1
 8002b66:	761a      	strb	r2, [r3, #24]
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr
 8002b74:	e000e100 	.word	0xe000e100
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b089      	sub	sp, #36	@ 0x24
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f1c3 0307 	rsb	r3, r3, #7
 8002b96:	2b04      	cmp	r3, #4
 8002b98:	bf28      	it	cs
 8002b9a:	2304      	movcs	r3, #4
 8002b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	2b06      	cmp	r3, #6
 8002ba4:	d902      	bls.n	8002bac <NVIC_EncodePriority+0x30>
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	3b03      	subs	r3, #3
 8002baa:	e000      	b.n	8002bae <NVIC_EncodePriority+0x32>
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	43da      	mvns	r2, r3
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	fa01 f303 	lsl.w	r3, r1, r3
 8002bce:	43d9      	mvns	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	4313      	orrs	r3, r2
         );
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3724      	adds	r7, #36	@ 0x24
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr

08002be2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b082      	sub	sp, #8
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f7ff ff4c 	bl	8002a88 <__NVIC_SetPriorityGrouping>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
 8002c04:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002c06:	2300      	movs	r3, #0
 8002c08:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c0a:	f7ff ff61 	bl	8002ad0 <__NVIC_GetPriorityGrouping>
 8002c0e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	68b9      	ldr	r1, [r7, #8]
 8002c14:	6978      	ldr	r0, [r7, #20]
 8002c16:	f7ff ffb1 	bl	8002b7c <NVIC_EncodePriority>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff80 	bl	8002b28 <__NVIC_SetPriority>
}
 8002c28:	bf00      	nop
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f7ff ff54 	bl	8002aec <__NVIC_EnableIRQ>
}
 8002c44:	bf00      	nop
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b087      	sub	sp, #28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c56:	2300      	movs	r3, #0
 8002c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c5a:	e17f      	b.n	8002f5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	2101      	movs	r1, #1
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	fa01 f303 	lsl.w	r3, r1, r3
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f000 8171 	beq.w	8002f56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d005      	beq.n	8002c8c <HAL_GPIO_Init+0x40>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f003 0303 	and.w	r3, r3, #3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d130      	bne.n	8002cee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	693a      	ldr	r2, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	091b      	lsrs	r3, r3, #4
 8002cd8:	f003 0201 	and.w	r2, r3, #1
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d118      	bne.n	8002d2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002d00:	2201      	movs	r2, #1
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	08db      	lsrs	r3, r3, #3
 8002d16:	f003 0201 	and.w	r2, r3, #1
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	693a      	ldr	r2, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d017      	beq.n	8002d68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	005b      	lsls	r3, r3, #1
 8002d58:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 0303 	and.w	r3, r3, #3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d123      	bne.n	8002dbc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	08da      	lsrs	r2, r3, #3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3208      	adds	r2, #8
 8002d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	220f      	movs	r2, #15
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	693a      	ldr	r2, [r7, #16]
 8002d94:	4013      	ands	r3, r2
 8002d96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	08da      	lsrs	r2, r3, #3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	3208      	adds	r2, #8
 8002db6:	6939      	ldr	r1, [r7, #16]
 8002db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	005b      	lsls	r3, r3, #1
 8002dc6:	2203      	movs	r2, #3
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	693a      	ldr	r2, [r7, #16]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f003 0203 	and.w	r2, r3, #3
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	693a      	ldr	r2, [r7, #16]
 8002dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 80ac 	beq.w	8002f56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002f7c <HAL_GPIO_Init+0x330>)
 8002e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e02:	4a5e      	ldr	r2, [pc, #376]	@ (8002f7c <HAL_GPIO_Init+0x330>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002f7c <HAL_GPIO_Init+0x330>)
 8002e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	60bb      	str	r3, [r7, #8]
 8002e14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e16:	4a5a      	ldr	r2, [pc, #360]	@ (8002f80 <HAL_GPIO_Init+0x334>)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	089b      	lsrs	r3, r3, #2
 8002e1c:	3302      	adds	r3, #2
 8002e1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f003 0303 	and.w	r3, r3, #3
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	220f      	movs	r2, #15
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	693a      	ldr	r2, [r7, #16]
 8002e36:	4013      	ands	r3, r2
 8002e38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e40:	d025      	beq.n	8002e8e <HAL_GPIO_Init+0x242>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a4f      	ldr	r2, [pc, #316]	@ (8002f84 <HAL_GPIO_Init+0x338>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d01f      	beq.n	8002e8a <HAL_GPIO_Init+0x23e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a4e      	ldr	r2, [pc, #312]	@ (8002f88 <HAL_GPIO_Init+0x33c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d019      	beq.n	8002e86 <HAL_GPIO_Init+0x23a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a4d      	ldr	r2, [pc, #308]	@ (8002f8c <HAL_GPIO_Init+0x340>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d013      	beq.n	8002e82 <HAL_GPIO_Init+0x236>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a4c      	ldr	r2, [pc, #304]	@ (8002f90 <HAL_GPIO_Init+0x344>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d00d      	beq.n	8002e7e <HAL_GPIO_Init+0x232>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a4b      	ldr	r2, [pc, #300]	@ (8002f94 <HAL_GPIO_Init+0x348>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d007      	beq.n	8002e7a <HAL_GPIO_Init+0x22e>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002f98 <HAL_GPIO_Init+0x34c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d101      	bne.n	8002e76 <HAL_GPIO_Init+0x22a>
 8002e72:	2306      	movs	r3, #6
 8002e74:	e00c      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e76:	2307      	movs	r3, #7
 8002e78:	e00a      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e7a:	2305      	movs	r3, #5
 8002e7c:	e008      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e7e:	2304      	movs	r3, #4
 8002e80:	e006      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e82:	2303      	movs	r3, #3
 8002e84:	e004      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e002      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <HAL_GPIO_Init+0x244>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	697a      	ldr	r2, [r7, #20]
 8002e92:	f002 0203 	and.w	r2, r2, #3
 8002e96:	0092      	lsls	r2, r2, #2
 8002e98:	4093      	lsls	r3, r2
 8002e9a:	693a      	ldr	r2, [r7, #16]
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ea0:	4937      	ldr	r1, [pc, #220]	@ (8002f80 <HAL_GPIO_Init+0x334>)
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	089b      	lsrs	r3, r3, #2
 8002ea6:	3302      	adds	r3, #2
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002eae:	4b3b      	ldr	r3, [pc, #236]	@ (8002f9c <HAL_GPIO_Init+0x350>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ed2:	4a32      	ldr	r2, [pc, #200]	@ (8002f9c <HAL_GPIO_Init+0x350>)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ed8:	4b30      	ldr	r3, [pc, #192]	@ (8002f9c <HAL_GPIO_Init+0x350>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002efc:	4a27      	ldr	r2, [pc, #156]	@ (8002f9c <HAL_GPIO_Init+0x350>)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002f02:	4b26      	ldr	r3, [pc, #152]	@ (8002f9c <HAL_GPIO_Init+0x350>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002f26:	4a1d      	ldr	r2, [pc, #116]	@ (8002f9c <HAL_GPIO_Init+0x350>)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002f9c <HAL_GPIO_Init+0x350>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	43db      	mvns	r3, r3
 8002f36:	693a      	ldr	r2, [r7, #16]
 8002f38:	4013      	ands	r3, r2
 8002f3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f50:	4a12      	ldr	r2, [pc, #72]	@ (8002f9c <HAL_GPIO_Init+0x350>)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	3301      	adds	r3, #1
 8002f5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	fa22 f303 	lsr.w	r3, r2, r3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	f47f ae78 	bne.w	8002c5c <HAL_GPIO_Init+0x10>
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	371c      	adds	r7, #28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40021000 	.word	0x40021000
 8002f80:	40010000 	.word	0x40010000
 8002f84:	48000400 	.word	0x48000400
 8002f88:	48000800 	.word	0x48000800
 8002f8c:	48000c00 	.word	0x48000c00
 8002f90:	48001000 	.word	0x48001000
 8002f94:	48001400 	.word	0x48001400
 8002f98:	48001800 	.word	0x48001800
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691a      	ldr	r2, [r3, #16]
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
 8002fbc:	e001      	b.n	8002fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	460b      	mov	r3, r1
 8002fda:	807b      	strh	r3, [r7, #2]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fe0:	787b      	ldrb	r3, [r7, #1]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002fe6:	887a      	ldrh	r2, [r7, #2]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffe:	4770      	bx	lr

08003000 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	460b      	mov	r3, r1
 800300a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	695b      	ldr	r3, [r3, #20]
 8003010:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003012:	887a      	ldrh	r2, [r7, #2]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4013      	ands	r3, r2
 8003018:	041a      	lsls	r2, r3, #16
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	43d9      	mvns	r1, r3
 800301e:	887b      	ldrh	r3, [r7, #2]
 8003020:	400b      	ands	r3, r1
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	619a      	str	r2, [r3, #24]
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	4603      	mov	r3, r0
 800303c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800303e:	4b08      	ldr	r3, [pc, #32]	@ (8003060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	4013      	ands	r3, r2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d006      	beq.n	8003058 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800304a:	4a05      	ldr	r2, [pc, #20]	@ (8003060 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800304c:	88fb      	ldrh	r3, [r7, #6]
 800304e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003050:	88fb      	ldrh	r3, [r7, #6]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff f870 	bl	8002138 <HAL_GPIO_EXTI_Callback>
  }
}
 8003058:	bf00      	nop
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	40010400 	.word	0x40010400

08003064 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003068:	4b04      	ldr	r3, [pc, #16]	@ (800307c <HAL_PWREx_GetVoltageRange+0x18>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40007000 	.word	0x40007000

08003080 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800308e:	d130      	bne.n	80030f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003090:	4b23      	ldr	r3, [pc, #140]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003098:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800309c:	d038      	beq.n	8003110 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800309e:	4b20      	ldr	r3, [pc, #128]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80030a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80030ae:	4b1d      	ldr	r3, [pc, #116]	@ (8003124 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2232      	movs	r2, #50	@ 0x32
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	4a1b      	ldr	r2, [pc, #108]	@ (8003128 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80030ba:	fba2 2303 	umull	r2, r3, r2, r3
 80030be:	0c9b      	lsrs	r3, r3, #18
 80030c0:	3301      	adds	r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030c4:	e002      	b.n	80030cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	3b01      	subs	r3, #1
 80030ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030cc:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030d8:	d102      	bne.n	80030e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f2      	bne.n	80030c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030e0:	4b0f      	ldr	r3, [pc, #60]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030ec:	d110      	bne.n	8003110 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80030ee:	2303      	movs	r3, #3
 80030f0:	e00f      	b.n	8003112 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80030f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80030fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030fe:	d007      	beq.n	8003110 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003100:	4b07      	ldr	r3, [pc, #28]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003108:	4a05      	ldr	r2, [pc, #20]	@ (8003120 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800310a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800310e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003110:	2300      	movs	r3, #0
}
 8003112:	4618      	mov	r0, r3
 8003114:	3714      	adds	r7, #20
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40007000 	.word	0x40007000
 8003124:	20000050 	.word	0x20000050
 8003128:	431bde83 	.word	0x431bde83

0800312c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e3ca      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800313e:	4b97      	ldr	r3, [pc, #604]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003148:	4b94      	ldr	r3, [pc, #592]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0310 	and.w	r3, r3, #16
 800315a:	2b00      	cmp	r3, #0
 800315c:	f000 80e4 	beq.w	8003328 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d007      	beq.n	8003176 <HAL_RCC_OscConfig+0x4a>
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	2b0c      	cmp	r3, #12
 800316a:	f040 808b 	bne.w	8003284 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	2b01      	cmp	r3, #1
 8003172:	f040 8087 	bne.w	8003284 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003176:	4b89      	ldr	r3, [pc, #548]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0302 	and.w	r3, r3, #2
 800317e:	2b00      	cmp	r3, #0
 8003180:	d005      	beq.n	800318e <HAL_RCC_OscConfig+0x62>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e3a2      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1a      	ldr	r2, [r3, #32]
 8003192:	4b82      	ldr	r3, [pc, #520]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d004      	beq.n	80031a8 <HAL_RCC_OscConfig+0x7c>
 800319e:	4b7f      	ldr	r3, [pc, #508]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031a6:	e005      	b.n	80031b4 <HAL_RCC_OscConfig+0x88>
 80031a8:	4b7c      	ldr	r3, [pc, #496]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031ae:	091b      	lsrs	r3, r3, #4
 80031b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d223      	bcs.n	8003200 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4618      	mov	r0, r3
 80031be:	f000 fd87 	bl	8003cd0 <RCC_SetFlashLatencyFromMSIRange>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d001      	beq.n	80031cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e383      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031cc:	4b73      	ldr	r3, [pc, #460]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a72      	ldr	r2, [pc, #456]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031d2:	f043 0308 	orr.w	r3, r3, #8
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	4b70      	ldr	r3, [pc, #448]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	496d      	ldr	r1, [pc, #436]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ea:	4b6c      	ldr	r3, [pc, #432]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	69db      	ldr	r3, [r3, #28]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	4968      	ldr	r1, [pc, #416]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80031fa:	4313      	orrs	r3, r2
 80031fc:	604b      	str	r3, [r1, #4]
 80031fe:	e025      	b.n	800324c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003200:	4b66      	ldr	r3, [pc, #408]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a65      	ldr	r2, [pc, #404]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003206:	f043 0308 	orr.w	r3, r3, #8
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	4b63      	ldr	r3, [pc, #396]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a1b      	ldr	r3, [r3, #32]
 8003218:	4960      	ldr	r1, [pc, #384]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800321a:	4313      	orrs	r3, r2
 800321c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800321e:	4b5f      	ldr	r3, [pc, #380]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	021b      	lsls	r3, r3, #8
 800322c:	495b      	ldr	r1, [pc, #364]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800322e:	4313      	orrs	r3, r2
 8003230:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d109      	bne.n	800324c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	4618      	mov	r0, r3
 800323e:	f000 fd47 	bl	8003cd0 <RCC_SetFlashLatencyFromMSIRange>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e343      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800324c:	f000 fc4a 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003250:	4602      	mov	r2, r0
 8003252:	4b52      	ldr	r3, [pc, #328]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	f003 030f 	and.w	r3, r3, #15
 800325c:	4950      	ldr	r1, [pc, #320]	@ (80033a0 <HAL_RCC_OscConfig+0x274>)
 800325e:	5ccb      	ldrb	r3, [r1, r3]
 8003260:	f003 031f 	and.w	r3, r3, #31
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
 8003268:	4a4e      	ldr	r2, [pc, #312]	@ (80033a4 <HAL_RCC_OscConfig+0x278>)
 800326a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800326c:	4b4e      	ldr	r3, [pc, #312]	@ (80033a8 <HAL_RCC_OscConfig+0x27c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f7ff fac1 	bl	80027f8 <HAL_InitTick>
 8003276:	4603      	mov	r3, r0
 8003278:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d052      	beq.n	8003326 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003280:	7bfb      	ldrb	r3, [r7, #15]
 8003282:	e327      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d032      	beq.n	80032f2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800328c:	4b43      	ldr	r3, [pc, #268]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a42      	ldr	r2, [pc, #264]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003298:	f7ff fbc6 	bl	8002a28 <HAL_GetTick>
 800329c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800329e:	e008      	b.n	80032b2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032a0:	f7ff fbc2 	bl	8002a28 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e310      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80032b2:	4b3a      	ldr	r3, [pc, #232]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0f0      	beq.n	80032a0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032be:	4b37      	ldr	r3, [pc, #220]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a36      	ldr	r2, [pc, #216]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032c4:	f043 0308 	orr.w	r3, r3, #8
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	4b34      	ldr	r3, [pc, #208]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4931      	ldr	r1, [pc, #196]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032dc:	4b2f      	ldr	r3, [pc, #188]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	492c      	ldr	r1, [pc, #176]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	604b      	str	r3, [r1, #4]
 80032f0:	e01a      	b.n	8003328 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032f2:	4b2a      	ldr	r3, [pc, #168]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a29      	ldr	r2, [pc, #164]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032fe:	f7ff fb93 	bl	8002a28 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003306:	f7ff fb8f 	bl	8002a28 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e2dd      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003318:	4b20      	ldr	r3, [pc, #128]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0302 	and.w	r3, r3, #2
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1f0      	bne.n	8003306 <HAL_RCC_OscConfig+0x1da>
 8003324:	e000      	b.n	8003328 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003326:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d074      	beq.n	800341e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	2b08      	cmp	r3, #8
 8003338:	d005      	beq.n	8003346 <HAL_RCC_OscConfig+0x21a>
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2b0c      	cmp	r3, #12
 800333e:	d10e      	bne.n	800335e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d10b      	bne.n	800335e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003346:	4b15      	ldr	r3, [pc, #84]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d064      	beq.n	800341c <HAL_RCC_OscConfig+0x2f0>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d160      	bne.n	800341c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e2ba      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003366:	d106      	bne.n	8003376 <HAL_RCC_OscConfig+0x24a>
 8003368:	4b0c      	ldr	r3, [pc, #48]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a0b      	ldr	r2, [pc, #44]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800336e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003372:	6013      	str	r3, [r2, #0]
 8003374:	e026      	b.n	80033c4 <HAL_RCC_OscConfig+0x298>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800337e:	d115      	bne.n	80033ac <HAL_RCC_OscConfig+0x280>
 8003380:	4b06      	ldr	r3, [pc, #24]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a05      	ldr	r2, [pc, #20]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003386:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a02      	ldr	r2, [pc, #8]	@ (800339c <HAL_RCC_OscConfig+0x270>)
 8003392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	e014      	b.n	80033c4 <HAL_RCC_OscConfig+0x298>
 800339a:	bf00      	nop
 800339c:	40021000 	.word	0x40021000
 80033a0:	08009a7c 	.word	0x08009a7c
 80033a4:	20000050 	.word	0x20000050
 80033a8:	20000054 	.word	0x20000054
 80033ac:	4ba0      	ldr	r3, [pc, #640]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a9f      	ldr	r2, [pc, #636]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b9d      	ldr	r3, [pc, #628]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a9c      	ldr	r2, [pc, #624]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80033be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033cc:	f7ff fb2c 	bl	8002a28 <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033d4:	f7ff fb28 	bl	8002a28 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	@ 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e276      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033e6:	4b92      	ldr	r3, [pc, #584]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x2a8>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7ff fb18 	bl	8002a28 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7ff fb14 	bl	8002a28 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	@ 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e262      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800340e:	4b88      	ldr	r3, [pc, #544]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0x2d0>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d060      	beq.n	80034ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	2b04      	cmp	r3, #4
 800342e:	d005      	beq.n	800343c <HAL_RCC_OscConfig+0x310>
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	2b0c      	cmp	r3, #12
 8003434:	d119      	bne.n	800346a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	2b02      	cmp	r3, #2
 800343a:	d116      	bne.n	800346a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800343c:	4b7c      	ldr	r3, [pc, #496]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <HAL_RCC_OscConfig+0x328>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e23f      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003454:	4b76      	ldr	r3, [pc, #472]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	061b      	lsls	r3, r3, #24
 8003462:	4973      	ldr	r1, [pc, #460]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003468:	e040      	b.n	80034ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d023      	beq.n	80034ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003472:	4b6f      	ldr	r3, [pc, #444]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a6e      	ldr	r2, [pc, #440]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003478:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800347c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7ff fad3 	bl	8002a28 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003486:	f7ff facf 	bl	8002a28 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e21d      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003498:	4b65      	ldr	r3, [pc, #404]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b62      	ldr	r3, [pc, #392]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	061b      	lsls	r3, r3, #24
 80034b2:	495f      	ldr	r1, [pc, #380]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
 80034b8:	e018      	b.n	80034ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a5c      	ldr	r2, [pc, #368]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80034c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c6:	f7ff faaf 	bl	8002a28 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ce:	f7ff faab 	bl	8002a28 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e1f9      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034e0:	4b53      	ldr	r3, [pc, #332]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1f0      	bne.n	80034ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f003 0308 	and.w	r3, r3, #8
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d03c      	beq.n	8003572 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d01c      	beq.n	800353a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003500:	4b4b      	ldr	r3, [pc, #300]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003506:	4a4a      	ldr	r2, [pc, #296]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003510:	f7ff fa8a 	bl	8002a28 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003518:	f7ff fa86 	bl	8002a28 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e1d4      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800352a:	4b41      	ldr	r3, [pc, #260]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800352c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0ef      	beq.n	8003518 <HAL_RCC_OscConfig+0x3ec>
 8003538:	e01b      	b.n	8003572 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800353a:	4b3d      	ldr	r3, [pc, #244]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800353c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003540:	4a3b      	ldr	r2, [pc, #236]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003542:	f023 0301 	bic.w	r3, r3, #1
 8003546:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7ff fa6d 	bl	8002a28 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003550:	e008      	b.n	8003564 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003552:	f7ff fa69 	bl	8002a28 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	2b02      	cmp	r3, #2
 800355e:	d901      	bls.n	8003564 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e1b7      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003564:	4b32      	ldr	r3, [pc, #200]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003566:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1ef      	bne.n	8003552 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 80a6 	beq.w	80036cc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003580:	2300      	movs	r3, #0
 8003582:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003584:	4b2a      	ldr	r3, [pc, #168]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003588:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10d      	bne.n	80035ac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003590:	4b27      	ldr	r3, [pc, #156]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003594:	4a26      	ldr	r2, [pc, #152]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800359a:	6593      	str	r3, [r2, #88]	@ 0x58
 800359c:	4b24      	ldr	r3, [pc, #144]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800359e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a8:	2301      	movs	r3, #1
 80035aa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ac:	4b21      	ldr	r3, [pc, #132]	@ (8003634 <HAL_RCC_OscConfig+0x508>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d118      	bne.n	80035ea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035b8:	4b1e      	ldr	r3, [pc, #120]	@ (8003634 <HAL_RCC_OscConfig+0x508>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003634 <HAL_RCC_OscConfig+0x508>)
 80035be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c4:	f7ff fa30 	bl	8002a28 <HAL_GetTick>
 80035c8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035ca:	e008      	b.n	80035de <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035cc:	f7ff fa2c 	bl	8002a28 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e17a      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035de:	4b15      	ldr	r3, [pc, #84]	@ (8003634 <HAL_RCC_OscConfig+0x508>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0f0      	beq.n	80035cc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d108      	bne.n	8003604 <HAL_RCC_OscConfig+0x4d8>
 80035f2:	4b0f      	ldr	r3, [pc, #60]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80035f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035f8:	4a0d      	ldr	r2, [pc, #52]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 80035fa:	f043 0301 	orr.w	r3, r3, #1
 80035fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003602:	e029      	b.n	8003658 <HAL_RCC_OscConfig+0x52c>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d115      	bne.n	8003638 <HAL_RCC_OscConfig+0x50c>
 800360c:	4b08      	ldr	r3, [pc, #32]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800360e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003612:	4a07      	ldr	r2, [pc, #28]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003614:	f043 0304 	orr.w	r3, r3, #4
 8003618:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800361c:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 800361e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003622:	4a03      	ldr	r2, [pc, #12]	@ (8003630 <HAL_RCC_OscConfig+0x504>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800362c:	e014      	b.n	8003658 <HAL_RCC_OscConfig+0x52c>
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	40007000 	.word	0x40007000
 8003638:	4b9c      	ldr	r3, [pc, #624]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800363a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800363e:	4a9b      	ldr	r2, [pc, #620]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003640:	f023 0301 	bic.w	r3, r3, #1
 8003644:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003648:	4b98      	ldr	r3, [pc, #608]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800364a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800364e:	4a97      	ldr	r2, [pc, #604]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003650:	f023 0304 	bic.w	r3, r3, #4
 8003654:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d016      	beq.n	800368e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003660:	f7ff f9e2 	bl	8002a28 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7ff f9de 	bl	8002a28 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e12a      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800367e:	4b8b      	ldr	r3, [pc, #556]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003680:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0ed      	beq.n	8003668 <HAL_RCC_OscConfig+0x53c>
 800368c:	e015      	b.n	80036ba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368e:	f7ff f9cb 	bl	8002a28 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7ff f9c7 	bl	8002a28 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e113      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80036ac:	4b7f      	ldr	r3, [pc, #508]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036b2:	f003 0302 	and.w	r3, r3, #2
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ed      	bne.n	8003696 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036ba:	7ffb      	ldrb	r3, [r7, #31]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c0:	4b7a      	ldr	r3, [pc, #488]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c4:	4a79      	ldr	r2, [pc, #484]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80036c6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ca:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 80fe 	beq.w	80038d2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036da:	2b02      	cmp	r3, #2
 80036dc:	f040 80d0 	bne.w	8003880 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80036e0:	4b72      	ldr	r3, [pc, #456]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f003 0203 	and.w	r2, r3, #3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d130      	bne.n	8003756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fe:	3b01      	subs	r3, #1
 8003700:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003702:	429a      	cmp	r2, r3
 8003704:	d127      	bne.n	8003756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003710:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003712:	429a      	cmp	r2, r3
 8003714:	d11f      	bne.n	8003756 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003720:	2a07      	cmp	r2, #7
 8003722:	bf14      	ite	ne
 8003724:	2201      	movne	r2, #1
 8003726:	2200      	moveq	r2, #0
 8003728:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800372a:	4293      	cmp	r3, r2
 800372c:	d113      	bne.n	8003756 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003738:	085b      	lsrs	r3, r3, #1
 800373a:	3b01      	subs	r3, #1
 800373c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800373e:	429a      	cmp	r2, r3
 8003740:	d109      	bne.n	8003756 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	3b01      	subs	r3, #1
 8003750:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003752:	429a      	cmp	r2, r3
 8003754:	d06e      	beq.n	8003834 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	2b0c      	cmp	r3, #12
 800375a:	d069      	beq.n	8003830 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800375c:	4b53      	ldr	r3, [pc, #332]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003768:	4b50      	ldr	r3, [pc, #320]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e0ad      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003778:	4b4c      	ldr	r3, [pc, #304]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a4b      	ldr	r2, [pc, #300]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800377e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003782:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003784:	f7ff f950 	bl	8002a28 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800378c:	f7ff f94c 	bl	8002a28 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e09a      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800379e:	4b43      	ldr	r3, [pc, #268]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037aa:	4b40      	ldr	r3, [pc, #256]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80037ac:	68da      	ldr	r2, [r3, #12]
 80037ae:	4b40      	ldr	r3, [pc, #256]	@ (80038b0 <HAL_RCC_OscConfig+0x784>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80037ba:	3a01      	subs	r2, #1
 80037bc:	0112      	lsls	r2, r2, #4
 80037be:	4311      	orrs	r1, r2
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80037c4:	0212      	lsls	r2, r2, #8
 80037c6:	4311      	orrs	r1, r2
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80037cc:	0852      	lsrs	r2, r2, #1
 80037ce:	3a01      	subs	r2, #1
 80037d0:	0552      	lsls	r2, r2, #21
 80037d2:	4311      	orrs	r1, r2
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80037d8:	0852      	lsrs	r2, r2, #1
 80037da:	3a01      	subs	r2, #1
 80037dc:	0652      	lsls	r2, r2, #25
 80037de:	4311      	orrs	r1, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80037e4:	0912      	lsrs	r2, r2, #4
 80037e6:	0452      	lsls	r2, r2, #17
 80037e8:	430a      	orrs	r2, r1
 80037ea:	4930      	ldr	r1, [pc, #192]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80037ec:	4313      	orrs	r3, r2
 80037ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80037f0:	4b2e      	ldr	r3, [pc, #184]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a2d      	ldr	r2, [pc, #180]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80037f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037fc:	4b2b      	ldr	r3, [pc, #172]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4a2a      	ldr	r2, [pc, #168]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003802:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003806:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003808:	f7ff f90e 	bl	8002a28 <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003810:	f7ff f90a 	bl	8002a28 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e058      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003822:	4b22      	ldr	r3, [pc, #136]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0f0      	beq.n	8003810 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800382e:	e050      	b.n	80038d2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e04f      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003834:	4b1d      	ldr	r3, [pc, #116]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d148      	bne.n	80038d2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003840:	4b1a      	ldr	r3, [pc, #104]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a19      	ldr	r2, [pc, #100]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800384a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800384c:	4b17      	ldr	r3, [pc, #92]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800384e:	68db      	ldr	r3, [r3, #12]
 8003850:	4a16      	ldr	r2, [pc, #88]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003852:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003856:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003858:	f7ff f8e6 	bl	8002a28 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003860:	f7ff f8e2 	bl	8002a28 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e030      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003872:	4b0e      	ldr	r3, [pc, #56]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0x734>
 800387e:	e028      	b.n	80038d2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003880:	69bb      	ldr	r3, [r7, #24]
 8003882:	2b0c      	cmp	r3, #12
 8003884:	d023      	beq.n	80038ce <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003886:	4b09      	ldr	r3, [pc, #36]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a08      	ldr	r2, [pc, #32]	@ (80038ac <HAL_RCC_OscConfig+0x780>)
 800388c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003890:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003892:	f7ff f8c9 	bl	8002a28 <HAL_GetTick>
 8003896:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003898:	e00c      	b.n	80038b4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800389a:	f7ff f8c5 	bl	8002a28 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d905      	bls.n	80038b4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e013      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
 80038ac:	40021000 	.word	0x40021000
 80038b0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038b4:	4b09      	ldr	r3, [pc, #36]	@ (80038dc <HAL_RCC_OscConfig+0x7b0>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ec      	bne.n	800389a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80038c0:	4b06      	ldr	r3, [pc, #24]	@ (80038dc <HAL_RCC_OscConfig+0x7b0>)
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	4905      	ldr	r1, [pc, #20]	@ (80038dc <HAL_RCC_OscConfig+0x7b0>)
 80038c6:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <HAL_RCC_OscConfig+0x7b4>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	60cb      	str	r3, [r1, #12]
 80038cc:	e001      	b.n	80038d2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e000      	b.n	80038d4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3720      	adds	r7, #32
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40021000 	.word	0x40021000
 80038e0:	feeefffc 	.word	0xfeeefffc

080038e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e0e7      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038f8:	4b75      	ldr	r3, [pc, #468]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	683a      	ldr	r2, [r7, #0]
 8003902:	429a      	cmp	r2, r3
 8003904:	d910      	bls.n	8003928 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003906:	4b72      	ldr	r3, [pc, #456]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 0207 	bic.w	r2, r3, #7
 800390e:	4970      	ldr	r1, [pc, #448]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003916:	4b6e      	ldr	r3, [pc, #440]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 0307 	and.w	r3, r3, #7
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	429a      	cmp	r2, r3
 8003922:	d001      	beq.n	8003928 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e0cf      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d010      	beq.n	8003956 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	4b66      	ldr	r3, [pc, #408]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003940:	429a      	cmp	r2, r3
 8003942:	d908      	bls.n	8003956 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003944:	4b63      	ldr	r3, [pc, #396]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4960      	ldr	r1, [pc, #384]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003952:	4313      	orrs	r3, r2
 8003954:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d04c      	beq.n	80039fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	2b03      	cmp	r3, #3
 8003968:	d107      	bne.n	800397a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396a:	4b5a      	ldr	r3, [pc, #360]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d121      	bne.n	80039ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e0a6      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d107      	bne.n	8003992 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003982:	4b54      	ldr	r3, [pc, #336]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d115      	bne.n	80039ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e09a      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800399a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d109      	bne.n	80039ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e08e      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039aa:	4b4a      	ldr	r3, [pc, #296]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e086      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039ba:	4b46      	ldr	r3, [pc, #280]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 0203 	bic.w	r2, r3, #3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	4943      	ldr	r1, [pc, #268]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039cc:	f7ff f82c 	bl	8002a28 <HAL_GetTick>
 80039d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039d2:	e00a      	b.n	80039ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d4:	f7ff f828 	bl	8002a28 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d901      	bls.n	80039ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e06e      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ea:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 020c 	and.w	r2, r3, #12
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d1eb      	bne.n	80039d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	689a      	ldr	r2, [r3, #8]
 8003a0c:	4b31      	ldr	r3, [pc, #196]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d208      	bcs.n	8003a2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a18:	4b2e      	ldr	r3, [pc, #184]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	492b      	ldr	r1, [pc, #172]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2a:	4b29      	ldr	r3, [pc, #164]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	683a      	ldr	r2, [r7, #0]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d210      	bcs.n	8003a5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a38:	4b25      	ldr	r3, [pc, #148]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f023 0207 	bic.w	r2, r3, #7
 8003a40:	4923      	ldr	r1, [pc, #140]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a48:	4b21      	ldr	r3, [pc, #132]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1ec>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d001      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e036      	b.n	8003ac8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0304 	and.w	r3, r3, #4
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a66:	4b1b      	ldr	r3, [pc, #108]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	4918      	ldr	r1, [pc, #96]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0308 	and.w	r3, r3, #8
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d009      	beq.n	8003a98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a84:	4b13      	ldr	r3, [pc, #76]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4910      	ldr	r1, [pc, #64]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a98:	f000 f824 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1f0>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 030f 	and.w	r3, r3, #15
 8003aa8:	490b      	ldr	r1, [pc, #44]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1f4>)
 8003aaa:	5ccb      	ldrb	r3, [r1, r3]
 8003aac:	f003 031f 	and.w	r3, r3, #31
 8003ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab4:	4a09      	ldr	r2, [pc, #36]	@ (8003adc <HAL_RCC_ClockConfig+0x1f8>)
 8003ab6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ab8:	4b09      	ldr	r3, [pc, #36]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1fc>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7fe fe9b 	bl	80027f8 <HAL_InitTick>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ac6:	7afb      	ldrb	r3, [r7, #11]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40022000 	.word	0x40022000
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	08009a7c 	.word	0x08009a7c
 8003adc:	20000050 	.word	0x20000050
 8003ae0:	20000054 	.word	0x20000054

08003ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b089      	sub	sp, #36	@ 0x24
 8003ae8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aea:	2300      	movs	r3, #0
 8003aec:	61fb      	str	r3, [r7, #28]
 8003aee:	2300      	movs	r3, #0
 8003af0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af2:	4b3e      	ldr	r3, [pc, #248]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003afc:	4b3b      	ldr	r3, [pc, #236]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d005      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x34>
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	2b0c      	cmp	r3, #12
 8003b10:	d121      	bne.n	8003b56 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d11e      	bne.n	8003b56 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b18:	4b34      	ldr	r3, [pc, #208]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0308 	and.w	r3, r3, #8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d107      	bne.n	8003b34 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b24:	4b31      	ldr	r3, [pc, #196]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b2a:	0a1b      	lsrs	r3, r3, #8
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	61fb      	str	r3, [r7, #28]
 8003b32:	e005      	b.n	8003b40 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b34:	4b2d      	ldr	r3, [pc, #180]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	091b      	lsrs	r3, r3, #4
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b40:	4a2b      	ldr	r2, [pc, #172]	@ (8003bf0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b48:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d10d      	bne.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d102      	bne.n	8003b62 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b5c:	4b25      	ldr	r3, [pc, #148]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b5e:	61bb      	str	r3, [r7, #24]
 8003b60:	e004      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b08      	cmp	r3, #8
 8003b66:	d101      	bne.n	8003b6c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b68:	4b23      	ldr	r3, [pc, #140]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b6a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	2b0c      	cmp	r3, #12
 8003b70:	d134      	bne.n	8003bdc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b72:	4b1e      	ldr	r3, [pc, #120]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003b74:	68db      	ldr	r3, [r3, #12]
 8003b76:	f003 0303 	and.w	r3, r3, #3
 8003b7a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d003      	beq.n	8003b8a <HAL_RCC_GetSysClockFreq+0xa6>
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d003      	beq.n	8003b90 <HAL_RCC_GetSysClockFreq+0xac>
 8003b88:	e005      	b.n	8003b96 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b8c:	617b      	str	r3, [r7, #20]
      break;
 8003b8e:	e005      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b90:	4b19      	ldr	r3, [pc, #100]	@ (8003bf8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b92:	617b      	str	r3, [r7, #20]
      break;
 8003b94:	e002      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	617b      	str	r3, [r7, #20]
      break;
 8003b9a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b9c:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003baa:	4b10      	ldr	r3, [pc, #64]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003bb4:	697a      	ldr	r2, [r7, #20]
 8003bb6:	fb03 f202 	mul.w	r2, r3, r2
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bec <HAL_RCC_GetSysClockFreq+0x108>)
 8003bc4:	68db      	ldr	r3, [r3, #12]
 8003bc6:	0e5b      	lsrs	r3, r3, #25
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	3301      	adds	r3, #1
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bda:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bdc:	69bb      	ldr	r3, [r7, #24]
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3724      	adds	r7, #36	@ 0x24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	08009a94 	.word	0x08009a94
 8003bf4:	00f42400 	.word	0x00f42400
 8003bf8:	007a1200 	.word	0x007a1200

08003bfc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c00:	4b03      	ldr	r3, [pc, #12]	@ (8003c10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c02:	681b      	ldr	r3, [r3, #0]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	20000050 	.word	0x20000050

08003c14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003c18:	f7ff fff0 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	0a1b      	lsrs	r3, r3, #8
 8003c24:	f003 0307 	and.w	r3, r3, #7
 8003c28:	4904      	ldr	r1, [pc, #16]	@ (8003c3c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003c2a:	5ccb      	ldrb	r3, [r1, r3]
 8003c2c:	f003 031f 	and.w	r3, r3, #31
 8003c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	40021000 	.word	0x40021000
 8003c3c:	08009a8c 	.word	0x08009a8c

08003c40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003c44:	f7ff ffda 	bl	8003bfc <HAL_RCC_GetHCLKFreq>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	4b06      	ldr	r3, [pc, #24]	@ (8003c64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	0adb      	lsrs	r3, r3, #11
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	4904      	ldr	r1, [pc, #16]	@ (8003c68 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003c56:	5ccb      	ldrb	r3, [r1, r3]
 8003c58:	f003 031f 	and.w	r3, r3, #31
 8003c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	40021000 	.word	0x40021000
 8003c68:	08009a8c 	.word	0x08009a8c

08003c6c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	220f      	movs	r2, #15
 8003c7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003c7c:	4b12      	ldr	r3, [pc, #72]	@ (8003cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f003 0203 	and.w	r2, r3, #3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003c88:	4b0f      	ldr	r3, [pc, #60]	@ (8003cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003c94:	4b0c      	ldr	r3, [pc, #48]	@ (8003cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003ca0:	4b09      	ldr	r3, [pc, #36]	@ (8003cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	08db      	lsrs	r3, r3, #3
 8003ca6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003cae:	4b07      	ldr	r3, [pc, #28]	@ (8003ccc <HAL_RCC_GetClockConfig+0x60>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0207 	and.w	r2, r3, #7
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	601a      	str	r2, [r3, #0]
}
 8003cba:	bf00      	nop
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
 8003cc6:	bf00      	nop
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	40022000 	.word	0x40022000

08003cd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cdc:	4b2a      	ldr	r3, [pc, #168]	@ (8003d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ce8:	f7ff f9bc 	bl	8003064 <HAL_PWREx_GetVoltageRange>
 8003cec:	6178      	str	r0, [r7, #20]
 8003cee:	e014      	b.n	8003d1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	4b25      	ldr	r3, [pc, #148]	@ (8003d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf4:	4a24      	ldr	r2, [pc, #144]	@ (8003d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cfc:	4b22      	ldr	r3, [pc, #136]	@ (8003d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d08:	f7ff f9ac 	bl	8003064 <HAL_PWREx_GetVoltageRange>
 8003d0c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d12:	4a1d      	ldr	r2, [pc, #116]	@ (8003d88 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d20:	d10b      	bne.n	8003d3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2b80      	cmp	r3, #128	@ 0x80
 8003d26:	d919      	bls.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d2c:	d902      	bls.n	8003d34 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d2e:	2302      	movs	r3, #2
 8003d30:	613b      	str	r3, [r7, #16]
 8003d32:	e013      	b.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d34:	2301      	movs	r3, #1
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	e010      	b.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2b80      	cmp	r3, #128	@ 0x80
 8003d3e:	d902      	bls.n	8003d46 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d40:	2303      	movs	r3, #3
 8003d42:	613b      	str	r3, [r7, #16]
 8003d44:	e00a      	b.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b80      	cmp	r3, #128	@ 0x80
 8003d4a:	d102      	bne.n	8003d52 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	613b      	str	r3, [r7, #16]
 8003d50:	e004      	b.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b70      	cmp	r3, #112	@ 0x70
 8003d56:	d101      	bne.n	8003d5c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d58:	2301      	movs	r3, #1
 8003d5a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f023 0207 	bic.w	r2, r3, #7
 8003d64:	4909      	ldr	r1, [pc, #36]	@ (8003d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d6c:	4b07      	ldr	r3, [pc, #28]	@ (8003d8c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0307 	and.w	r3, r3, #7
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d001      	beq.n	8003d7e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	3718      	adds	r7, #24
 8003d84:	46bd      	mov	sp, r7
 8003d86:	bd80      	pop	{r7, pc}
 8003d88:	40021000 	.word	0x40021000
 8003d8c:	40022000 	.word	0x40022000

08003d90 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d98:	2300      	movs	r3, #0
 8003d9a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d041      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003db0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003db4:	d02a      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003db6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003dba:	d824      	bhi.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003dbc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dc0:	d008      	beq.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003dc2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003dc6:	d81e      	bhi.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003dcc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dd0:	d010      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003dd2:	e018      	b.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003dd4:	4b86      	ldr	r3, [pc, #536]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	4a85      	ldr	r2, [pc, #532]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003dda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dde:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003de0:	e015      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3304      	adds	r3, #4
 8003de6:	2100      	movs	r1, #0
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fabb 	bl	8004364 <RCCEx_PLLSAI1_Config>
 8003dee:	4603      	mov	r3, r0
 8003df0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003df2:	e00c      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3320      	adds	r3, #32
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fba6 	bl	800454c <RCCEx_PLLSAI2_Config>
 8003e00:	4603      	mov	r3, r0
 8003e02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003e04:	e003      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	74fb      	strb	r3, [r7, #19]
      break;
 8003e0a:	e000      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003e0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e0e:	7cfb      	ldrb	r3, [r7, #19]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e14:	4b76      	ldr	r3, [pc, #472]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003e22:	4973      	ldr	r1, [pc, #460]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003e2a:	e001      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e2c:	7cfb      	ldrb	r3, [r7, #19]
 8003e2e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d041      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003e40:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e44:	d02a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003e46:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003e4a:	d824      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e4c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e50:	d008      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003e56:	d81e      	bhi.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003e60:	d010      	beq.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003e62:	e018      	b.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e64:	4b62      	ldr	r3, [pc, #392]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	4a61      	ldr	r2, [pc, #388]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003e6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e70:	e015      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3304      	adds	r3, #4
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fa73 	bl	8004364 <RCCEx_PLLSAI1_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e82:	e00c      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3320      	adds	r3, #32
 8003e88:	2100      	movs	r1, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fb5e 	bl	800454c <RCCEx_PLLSAI2_Config>
 8003e90:	4603      	mov	r3, r0
 8003e92:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e94:	e003      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	74fb      	strb	r3, [r7, #19]
      break;
 8003e9a:	e000      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003e9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e9e:	7cfb      	ldrb	r3, [r7, #19]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003ea4:	4b52      	ldr	r3, [pc, #328]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eaa:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eb2:	494f      	ldr	r1, [pc, #316]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003eba:	e001      	b.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ebc:	7cfb      	ldrb	r3, [r7, #19]
 8003ebe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	f000 80a0 	beq.w	800400e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ed2:	4b47      	ldr	r3, [pc, #284]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e000      	b.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00d      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ee8:	4b41      	ldr	r3, [pc, #260]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eec:	4a40      	ldr	r2, [pc, #256]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003eee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ef2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ef4:	4b3e      	ldr	r3, [pc, #248]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f00:	2301      	movs	r3, #1
 8003f02:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f04:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a3a      	ldr	r2, [pc, #232]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f0e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f10:	f7fe fd8a 	bl	8002a28 <HAL_GetTick>
 8003f14:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f16:	e009      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f18:	f7fe fd86 	bl	8002a28 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d902      	bls.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	74fb      	strb	r3, [r7, #19]
        break;
 8003f2a:	e005      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f2c:	4b31      	ldr	r3, [pc, #196]	@ (8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0ef      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003f38:	7cfb      	ldrb	r3, [r7, #19]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d15c      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f48:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d01f      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d019      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f5c:	4b24      	ldr	r3, [pc, #144]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f68:	4b21      	ldr	r3, [pc, #132]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6e:	4a20      	ldr	r2, [pc, #128]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f78:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f88:	4a19      	ldr	r2, [pc, #100]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d016      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9a:	f7fe fd45 	bl	8002a28 <HAL_GetTick>
 8003f9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa0:	e00b      	b.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fa2:	f7fe fd41 	bl	8002a28 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d902      	bls.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	74fb      	strb	r3, [r7, #19]
            break;
 8003fb8:	e006      	b.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fba:	4b0d      	ldr	r3, [pc, #52]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0ec      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003fc8:	7cfb      	ldrb	r3, [r7, #19]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10c      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fce:	4b08      	ldr	r3, [pc, #32]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fde:	4904      	ldr	r1, [pc, #16]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003fe6:	e009      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fe8:	7cfb      	ldrb	r3, [r7, #19]
 8003fea:	74bb      	strb	r3, [r7, #18]
 8003fec:	e006      	b.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003fee:	bf00      	nop
 8003ff0:	40021000 	.word	0x40021000
 8003ff4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff8:	7cfb      	ldrb	r3, [r7, #19]
 8003ffa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ffc:	7c7b      	ldrb	r3, [r7, #17]
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d105      	bne.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004002:	4b9e      	ldr	r3, [pc, #632]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004006:	4a9d      	ldr	r2, [pc, #628]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004008:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800400c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800401a:	4b98      	ldr	r3, [pc, #608]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004020:	f023 0203 	bic.w	r2, r3, #3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004028:	4994      	ldr	r1, [pc, #592]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800403c:	4b8f      	ldr	r3, [pc, #572]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800403e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004042:	f023 020c 	bic.w	r2, r3, #12
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800404a:	498c      	ldr	r1, [pc, #560]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800405e:	4b87      	ldr	r3, [pc, #540]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004060:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004064:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	4983      	ldr	r1, [pc, #524]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0308 	and.w	r3, r3, #8
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004080:	4b7e      	ldr	r3, [pc, #504]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004086:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408e:	497b      	ldr	r1, [pc, #492]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0310 	and.w	r3, r3, #16
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040a2:	4b76      	ldr	r3, [pc, #472]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b0:	4972      	ldr	r1, [pc, #456]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040c4:	4b6d      	ldr	r3, [pc, #436]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ca:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d2:	496a      	ldr	r1, [pc, #424]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040e6:	4b65      	ldr	r3, [pc, #404]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040ec:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f4:	4961      	ldr	r1, [pc, #388]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004108:	4b5c      	ldr	r3, [pc, #368]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800410a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800410e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004116:	4959      	ldr	r1, [pc, #356]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800412a:	4b54      	ldr	r3, [pc, #336]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800412c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004130:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004138:	4950      	ldr	r1, [pc, #320]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800414c:	4b4b      	ldr	r3, [pc, #300]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004152:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415a:	4948      	ldr	r1, [pc, #288]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800416e:	4b43      	ldr	r3, [pc, #268]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004170:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004174:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800417c:	493f      	ldr	r1, [pc, #252]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d028      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004190:	4b3a      	ldr	r3, [pc, #232]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004196:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800419e:	4937      	ldr	r1, [pc, #220]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041ae:	d106      	bne.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041b0:	4b32      	ldr	r3, [pc, #200]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4a31      	ldr	r2, [pc, #196]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80041ba:	60d3      	str	r3, [r2, #12]
 80041bc:	e011      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80041c6:	d10c      	bne.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3304      	adds	r3, #4
 80041cc:	2101      	movs	r1, #1
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f8c8 	bl	8004364 <RCCEx_PLLSAI1_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041d8:	7cfb      	ldrb	r3, [r7, #19]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80041de:	7cfb      	ldrb	r3, [r7, #19]
 80041e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d028      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041ee:	4b23      	ldr	r3, [pc, #140]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fc:	491f      	ldr	r1, [pc, #124]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80041fe:	4313      	orrs	r3, r2
 8004200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004208:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800420c:	d106      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800420e:	4b1b      	ldr	r3, [pc, #108]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	4a1a      	ldr	r2, [pc, #104]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004214:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004218:	60d3      	str	r3, [r2, #12]
 800421a:	e011      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004220:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004224:	d10c      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	3304      	adds	r3, #4
 800422a:	2101      	movs	r1, #1
 800422c:	4618      	mov	r0, r3
 800422e:	f000 f899 	bl	8004364 <RCCEx_PLLSAI1_Config>
 8004232:	4603      	mov	r3, r0
 8004234:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004236:	7cfb      	ldrb	r3, [r7, #19]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800423c:	7cfb      	ldrb	r3, [r7, #19]
 800423e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d02b      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800424c:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800424e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004252:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800425a:	4908      	ldr	r1, [pc, #32]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800425c:	4313      	orrs	r3, r2
 800425e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004266:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800426a:	d109      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800426c:	4b03      	ldr	r3, [pc, #12]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	4a02      	ldr	r2, [pc, #8]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004272:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004276:	60d3      	str	r3, [r2, #12]
 8004278:	e014      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800427a:	bf00      	nop
 800427c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004284:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	3304      	adds	r3, #4
 800428e:	2101      	movs	r1, #1
 8004290:	4618      	mov	r0, r3
 8004292:	f000 f867 	bl	8004364 <RCCEx_PLLSAI1_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800429a:	7cfb      	ldrb	r3, [r7, #19]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80042a0:	7cfb      	ldrb	r3, [r7, #19]
 80042a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d02f      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042b0:	4b2b      	ldr	r3, [pc, #172]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042be:	4928      	ldr	r1, [pc, #160]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80042ce:	d10d      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	3304      	adds	r3, #4
 80042d4:	2102      	movs	r1, #2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f844 	bl	8004364 <RCCEx_PLLSAI1_Config>
 80042dc:	4603      	mov	r3, r0
 80042de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042e0:	7cfb      	ldrb	r3, [r7, #19]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d014      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80042e6:	7cfb      	ldrb	r3, [r7, #19]
 80042e8:	74bb      	strb	r3, [r7, #18]
 80042ea:	e011      	b.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80042f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80042f4:	d10c      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	3320      	adds	r3, #32
 80042fa:	2102      	movs	r1, #2
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 f925 	bl	800454c <RCCEx_PLLSAI2_Config>
 8004302:	4603      	mov	r3, r0
 8004304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004306:	7cfb      	ldrb	r3, [r7, #19]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d001      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800431c:	4b10      	ldr	r3, [pc, #64]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004322:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800432a:	490d      	ldr	r1, [pc, #52]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00b      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800433e:	4b08      	ldr	r3, [pc, #32]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800434e:	4904      	ldr	r1, [pc, #16]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004350:	4313      	orrs	r3, r2
 8004352:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004356:	7cbb      	ldrb	r3, [r7, #18]
}
 8004358:	4618      	mov	r0, r3
 800435a:	3718      	adds	r7, #24
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}
 8004360:	40021000 	.word	0x40021000

08004364 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800436e:	2300      	movs	r3, #0
 8004370:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004372:	4b75      	ldr	r3, [pc, #468]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	f003 0303 	and.w	r3, r3, #3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d018      	beq.n	80043b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800437e:	4b72      	ldr	r3, [pc, #456]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004380:	68db      	ldr	r3, [r3, #12]
 8004382:	f003 0203 	and.w	r2, r3, #3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d10d      	bne.n	80043aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
       ||
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004396:	4b6c      	ldr	r3, [pc, #432]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	1c5a      	adds	r2, r3, #1
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
       ||
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d047      	beq.n	800443a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
 80043ae:	e044      	b.n	800443a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d018      	beq.n	80043ea <RCCEx_PLLSAI1_Config+0x86>
 80043b8:	2b03      	cmp	r3, #3
 80043ba:	d825      	bhi.n	8004408 <RCCEx_PLLSAI1_Config+0xa4>
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d002      	beq.n	80043c6 <RCCEx_PLLSAI1_Config+0x62>
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d009      	beq.n	80043d8 <RCCEx_PLLSAI1_Config+0x74>
 80043c4:	e020      	b.n	8004408 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80043c6:	4b60      	ldr	r3, [pc, #384]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d11d      	bne.n	800440e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043d6:	e01a      	b.n	800440e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80043d8:	4b5b      	ldr	r3, [pc, #364]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d116      	bne.n	8004412 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043e8:	e013      	b.n	8004412 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80043ea:	4b57      	ldr	r3, [pc, #348]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10f      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80043f6:	4b54      	ldr	r3, [pc, #336]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004406:	e006      	b.n	8004416 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
      break;
 800440c:	e004      	b.n	8004418 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800440e:	bf00      	nop
 8004410:	e002      	b.n	8004418 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004412:	bf00      	nop
 8004414:	e000      	b.n	8004418 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004416:	bf00      	nop
    }

    if(status == HAL_OK)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800441e:	4b4a      	ldr	r3, [pc, #296]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6819      	ldr	r1, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	3b01      	subs	r3, #1
 8004430:	011b      	lsls	r3, r3, #4
 8004432:	430b      	orrs	r3, r1
 8004434:	4944      	ldr	r1, [pc, #272]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004436:	4313      	orrs	r3, r2
 8004438:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d17d      	bne.n	800453c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004440:	4b41      	ldr	r3, [pc, #260]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a40      	ldr	r2, [pc, #256]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004446:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800444a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800444c:	f7fe faec 	bl	8002a28 <HAL_GetTick>
 8004450:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004452:	e009      	b.n	8004468 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004454:	f7fe fae8 	bl	8002a28 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	2b02      	cmp	r3, #2
 8004460:	d902      	bls.n	8004468 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	73fb      	strb	r3, [r7, #15]
        break;
 8004466:	e005      	b.n	8004474 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004468:	4b37      	ldr	r3, [pc, #220]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d1ef      	bne.n	8004454 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d160      	bne.n	800453c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d111      	bne.n	80044a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004480:	4b31      	ldr	r3, [pc, #196]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004488:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6892      	ldr	r2, [r2, #8]
 8004490:	0211      	lsls	r1, r2, #8
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	68d2      	ldr	r2, [r2, #12]
 8004496:	0912      	lsrs	r2, r2, #4
 8004498:	0452      	lsls	r2, r2, #17
 800449a:	430a      	orrs	r2, r1
 800449c:	492a      	ldr	r1, [pc, #168]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	610b      	str	r3, [r1, #16]
 80044a2:	e027      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d112      	bne.n	80044d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044aa:	4b27      	ldr	r3, [pc, #156]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80044b2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	6892      	ldr	r2, [r2, #8]
 80044ba:	0211      	lsls	r1, r2, #8
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6912      	ldr	r2, [r2, #16]
 80044c0:	0852      	lsrs	r2, r2, #1
 80044c2:	3a01      	subs	r2, #1
 80044c4:	0552      	lsls	r2, r2, #21
 80044c6:	430a      	orrs	r2, r1
 80044c8:	491f      	ldr	r1, [pc, #124]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	610b      	str	r3, [r1, #16]
 80044ce:	e011      	b.n	80044f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80044d8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6892      	ldr	r2, [r2, #8]
 80044e0:	0211      	lsls	r1, r2, #8
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	6952      	ldr	r2, [r2, #20]
 80044e6:	0852      	lsrs	r2, r2, #1
 80044e8:	3a01      	subs	r2, #1
 80044ea:	0652      	lsls	r2, r2, #25
 80044ec:	430a      	orrs	r2, r1
 80044ee:	4916      	ldr	r1, [pc, #88]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80044f4:	4b14      	ldr	r3, [pc, #80]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a13      	ldr	r2, [pc, #76]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80044fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fe fa92 	bl	8002a28 <HAL_GetTick>
 8004504:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004506:	e009      	b.n	800451c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004508:	f7fe fa8e 	bl	8002a28 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	2b02      	cmp	r3, #2
 8004514:	d902      	bls.n	800451c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	73fb      	strb	r3, [r7, #15]
          break;
 800451a:	e005      	b.n	8004528 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800451c:	4b0a      	ldr	r3, [pc, #40]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ef      	beq.n	8004508 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d106      	bne.n	800453c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800452e:	4b06      	ldr	r3, [pc, #24]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	4904      	ldr	r1, [pc, #16]	@ (8004548 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004538:	4313      	orrs	r3, r2
 800453a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800453c:	7bfb      	ldrb	r3, [r7, #15]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	40021000 	.word	0x40021000

0800454c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004556:	2300      	movs	r3, #0
 8004558:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800455a:	4b6a      	ldr	r3, [pc, #424]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d018      	beq.n	8004598 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004566:	4b67      	ldr	r3, [pc, #412]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f003 0203 	and.w	r2, r3, #3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	429a      	cmp	r2, r3
 8004574:	d10d      	bne.n	8004592 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
       ||
 800457a:	2b00      	cmp	r3, #0
 800457c:	d009      	beq.n	8004592 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800457e:	4b61      	ldr	r3, [pc, #388]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	f003 0307 	and.w	r3, r3, #7
 8004588:	1c5a      	adds	r2, r3, #1
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
       ||
 800458e:	429a      	cmp	r2, r3
 8004590:	d047      	beq.n	8004622 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	73fb      	strb	r3, [r7, #15]
 8004596:	e044      	b.n	8004622 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d018      	beq.n	80045d2 <RCCEx_PLLSAI2_Config+0x86>
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d825      	bhi.n	80045f0 <RCCEx_PLLSAI2_Config+0xa4>
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d002      	beq.n	80045ae <RCCEx_PLLSAI2_Config+0x62>
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d009      	beq.n	80045c0 <RCCEx_PLLSAI2_Config+0x74>
 80045ac:	e020      	b.n	80045f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045ae:	4b55      	ldr	r3, [pc, #340]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d11d      	bne.n	80045f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045be:	e01a      	b.n	80045f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045c0:	4b50      	ldr	r3, [pc, #320]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d116      	bne.n	80045fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d0:	e013      	b.n	80045fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80045d2:	4b4c      	ldr	r3, [pc, #304]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10f      	bne.n	80045fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045de:	4b49      	ldr	r3, [pc, #292]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045ee:	e006      	b.n	80045fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
      break;
 80045f4:	e004      	b.n	8004600 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045f6:	bf00      	nop
 80045f8:	e002      	b.n	8004600 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80045fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10d      	bne.n	8004622 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004606:	4b3f      	ldr	r3, [pc, #252]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004608:	68db      	ldr	r3, [r3, #12]
 800460a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	3b01      	subs	r3, #1
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	430b      	orrs	r3, r1
 800461c:	4939      	ldr	r1, [pc, #228]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800461e:	4313      	orrs	r3, r2
 8004620:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004622:	7bfb      	ldrb	r3, [r7, #15]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d167      	bne.n	80046f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004628:	4b36      	ldr	r3, [pc, #216]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a35      	ldr	r2, [pc, #212]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800462e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004634:	f7fe f9f8 	bl	8002a28 <HAL_GetTick>
 8004638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800463a:	e009      	b.n	8004650 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800463c:	f7fe f9f4 	bl	8002a28 <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	2b02      	cmp	r3, #2
 8004648:	d902      	bls.n	8004650 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	73fb      	strb	r3, [r7, #15]
        break;
 800464e:	e005      	b.n	800465c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004650:	4b2c      	ldr	r3, [pc, #176]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d1ef      	bne.n	800463c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d14a      	bne.n	80046f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d111      	bne.n	800468c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004668:	4b26      	ldr	r3, [pc, #152]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004670:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6892      	ldr	r2, [r2, #8]
 8004678:	0211      	lsls	r1, r2, #8
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68d2      	ldr	r2, [r2, #12]
 800467e:	0912      	lsrs	r2, r2, #4
 8004680:	0452      	lsls	r2, r2, #17
 8004682:	430a      	orrs	r2, r1
 8004684:	491f      	ldr	r1, [pc, #124]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004686:	4313      	orrs	r3, r2
 8004688:	614b      	str	r3, [r1, #20]
 800468a:	e011      	b.n	80046b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800468c:	4b1d      	ldr	r3, [pc, #116]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004694:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6892      	ldr	r2, [r2, #8]
 800469c:	0211      	lsls	r1, r2, #8
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6912      	ldr	r2, [r2, #16]
 80046a2:	0852      	lsrs	r2, r2, #1
 80046a4:	3a01      	subs	r2, #1
 80046a6:	0652      	lsls	r2, r2, #25
 80046a8:	430a      	orrs	r2, r1
 80046aa:	4916      	ldr	r1, [pc, #88]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80046b0:	4b14      	ldr	r3, [pc, #80]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a13      	ldr	r2, [pc, #76]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046bc:	f7fe f9b4 	bl	8002a28 <HAL_GetTick>
 80046c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046c2:	e009      	b.n	80046d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046c4:	f7fe f9b0 	bl	8002a28 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d902      	bls.n	80046d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	73fb      	strb	r3, [r7, #15]
          break;
 80046d6:	e005      	b.n	80046e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80046d8:	4b0a      	ldr	r3, [pc, #40]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d0ef      	beq.n	80046c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80046e4:	7bfb      	ldrb	r3, [r7, #15]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d106      	bne.n	80046f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80046ea:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	4904      	ldr	r1, [pc, #16]	@ (8004704 <RCCEx_PLLSAI2_Config+0x1b8>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80046f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3710      	adds	r7, #16
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40021000 	.word	0x40021000

08004708 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b082      	sub	sp, #8
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e049      	b.n	80047ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d106      	bne.n	8004734 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f841 	bl	80047b6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3304      	adds	r3, #4
 8004744:	4619      	mov	r1, r3
 8004746:	4610      	mov	r0, r2
 8004748:	f000 fce8 	bl	800511c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2201      	movs	r2, #1
 8004788:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3708      	adds	r7, #8
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr
	...

080047cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d001      	beq.n	80047e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e04f      	b.n	8004884 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f042 0201 	orr.w	r2, r2, #1
 80047fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a23      	ldr	r2, [pc, #140]	@ (8004890 <HAL_TIM_Base_Start_IT+0xc4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01d      	beq.n	8004842 <HAL_TIM_Base_Start_IT+0x76>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800480e:	d018      	beq.n	8004842 <HAL_TIM_Base_Start_IT+0x76>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <HAL_TIM_Base_Start_IT+0xc8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d013      	beq.n	8004842 <HAL_TIM_Base_Start_IT+0x76>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1e      	ldr	r2, [pc, #120]	@ (8004898 <HAL_TIM_Base_Start_IT+0xcc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d00e      	beq.n	8004842 <HAL_TIM_Base_Start_IT+0x76>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1c      	ldr	r2, [pc, #112]	@ (800489c <HAL_TIM_Base_Start_IT+0xd0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d009      	beq.n	8004842 <HAL_TIM_Base_Start_IT+0x76>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1b      	ldr	r2, [pc, #108]	@ (80048a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d004      	beq.n	8004842 <HAL_TIM_Base_Start_IT+0x76>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a19      	ldr	r2, [pc, #100]	@ (80048a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d115      	bne.n	800486e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	4b17      	ldr	r3, [pc, #92]	@ (80048a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800484a:	4013      	ands	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2b06      	cmp	r3, #6
 8004852:	d015      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0xb4>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800485a:	d011      	beq.n	8004880 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486c:	e008      	b.n	8004880 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f042 0201 	orr.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]
 800487e:	e000      	b.n	8004882 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004880:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3714      	adds	r7, #20
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	40012c00 	.word	0x40012c00
 8004894:	40000400 	.word	0x40000400
 8004898:	40000800 	.word	0x40000800
 800489c:	40000c00 	.word	0x40000c00
 80048a0:	40013400 	.word	0x40013400
 80048a4:	40014000 	.word	0x40014000
 80048a8:	00010007 	.word	0x00010007

080048ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e049      	b.n	8004952 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7fd fdf2 	bl	80024bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3304      	adds	r3, #4
 80048e8:	4619      	mov	r1, r3
 80048ea:	4610      	mov	r0, r2
 80048ec:	f000 fc16 	bl	800511c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d109      	bne.n	8004980 <HAL_TIM_PWM_Start+0x24>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	bf14      	ite	ne
 8004978:	2301      	movne	r3, #1
 800497a:	2300      	moveq	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	e03c      	b.n	80049fa <HAL_TIM_PWM_Start+0x9e>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	2b04      	cmp	r3, #4
 8004984:	d109      	bne.n	800499a <HAL_TIM_PWM_Start+0x3e>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b01      	cmp	r3, #1
 8004990:	bf14      	ite	ne
 8004992:	2301      	movne	r3, #1
 8004994:	2300      	moveq	r3, #0
 8004996:	b2db      	uxtb	r3, r3
 8004998:	e02f      	b.n	80049fa <HAL_TIM_PWM_Start+0x9e>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b08      	cmp	r3, #8
 800499e:	d109      	bne.n	80049b4 <HAL_TIM_PWM_Start+0x58>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	bf14      	ite	ne
 80049ac:	2301      	movne	r3, #1
 80049ae:	2300      	moveq	r3, #0
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	e022      	b.n	80049fa <HAL_TIM_PWM_Start+0x9e>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b0c      	cmp	r3, #12
 80049b8:	d109      	bne.n	80049ce <HAL_TIM_PWM_Start+0x72>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	bf14      	ite	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	2300      	moveq	r3, #0
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	e015      	b.n	80049fa <HAL_TIM_PWM_Start+0x9e>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d109      	bne.n	80049e8 <HAL_TIM_PWM_Start+0x8c>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049da:	b2db      	uxtb	r3, r3
 80049dc:	2b01      	cmp	r3, #1
 80049de:	bf14      	ite	ne
 80049e0:	2301      	movne	r3, #1
 80049e2:	2300      	moveq	r3, #0
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	e008      	b.n	80049fa <HAL_TIM_PWM_Start+0x9e>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	bf14      	ite	ne
 80049f4:	2301      	movne	r3, #1
 80049f6:	2300      	moveq	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e09c      	b.n	8004b3c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d104      	bne.n	8004a12 <HAL_TIM_PWM_Start+0xb6>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a10:	e023      	b.n	8004a5a <HAL_TIM_PWM_Start+0xfe>
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d104      	bne.n	8004a22 <HAL_TIM_PWM_Start+0xc6>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a20:	e01b      	b.n	8004a5a <HAL_TIM_PWM_Start+0xfe>
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d104      	bne.n	8004a32 <HAL_TIM_PWM_Start+0xd6>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a30:	e013      	b.n	8004a5a <HAL_TIM_PWM_Start+0xfe>
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	2b0c      	cmp	r3, #12
 8004a36:	d104      	bne.n	8004a42 <HAL_TIM_PWM_Start+0xe6>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a40:	e00b      	b.n	8004a5a <HAL_TIM_PWM_Start+0xfe>
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b10      	cmp	r3, #16
 8004a46:	d104      	bne.n	8004a52 <HAL_TIM_PWM_Start+0xf6>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a50:	e003      	b.n	8004a5a <HAL_TIM_PWM_Start+0xfe>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	6839      	ldr	r1, [r7, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fed6 	bl	8005814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a35      	ldr	r2, [pc, #212]	@ (8004b44 <HAL_TIM_PWM_Start+0x1e8>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d013      	beq.n	8004a9a <HAL_TIM_PWM_Start+0x13e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a34      	ldr	r2, [pc, #208]	@ (8004b48 <HAL_TIM_PWM_Start+0x1ec>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <HAL_TIM_PWM_Start+0x13e>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a32      	ldr	r2, [pc, #200]	@ (8004b4c <HAL_TIM_PWM_Start+0x1f0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_TIM_PWM_Start+0x13e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a31      	ldr	r2, [pc, #196]	@ (8004b50 <HAL_TIM_PWM_Start+0x1f4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_TIM_PWM_Start+0x13e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a2f      	ldr	r2, [pc, #188]	@ (8004b54 <HAL_TIM_PWM_Start+0x1f8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d101      	bne.n	8004a9e <HAL_TIM_PWM_Start+0x142>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <HAL_TIM_PWM_Start+0x144>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d007      	beq.n	8004ab4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	@ (8004b44 <HAL_TIM_PWM_Start+0x1e8>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d01d      	beq.n	8004afa <HAL_TIM_PWM_Start+0x19e>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ac6:	d018      	beq.n	8004afa <HAL_TIM_PWM_Start+0x19e>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a22      	ldr	r2, [pc, #136]	@ (8004b58 <HAL_TIM_PWM_Start+0x1fc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d013      	beq.n	8004afa <HAL_TIM_PWM_Start+0x19e>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a21      	ldr	r2, [pc, #132]	@ (8004b5c <HAL_TIM_PWM_Start+0x200>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00e      	beq.n	8004afa <HAL_TIM_PWM_Start+0x19e>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b60 <HAL_TIM_PWM_Start+0x204>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d009      	beq.n	8004afa <HAL_TIM_PWM_Start+0x19e>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a17      	ldr	r2, [pc, #92]	@ (8004b48 <HAL_TIM_PWM_Start+0x1ec>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d004      	beq.n	8004afa <HAL_TIM_PWM_Start+0x19e>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a15      	ldr	r2, [pc, #84]	@ (8004b4c <HAL_TIM_PWM_Start+0x1f0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d115      	bne.n	8004b26 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689a      	ldr	r2, [r3, #8]
 8004b00:	4b18      	ldr	r3, [pc, #96]	@ (8004b64 <HAL_TIM_PWM_Start+0x208>)
 8004b02:	4013      	ands	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b06      	cmp	r3, #6
 8004b0a:	d015      	beq.n	8004b38 <HAL_TIM_PWM_Start+0x1dc>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b12:	d011      	beq.n	8004b38 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f042 0201 	orr.w	r2, r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b24:	e008      	b.n	8004b38 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681a      	ldr	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f042 0201 	orr.w	r2, r2, #1
 8004b34:	601a      	str	r2, [r3, #0]
 8004b36:	e000      	b.n	8004b3a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b38:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40012c00 	.word	0x40012c00
 8004b48:	40013400 	.word	0x40013400
 8004b4c:	40014000 	.word	0x40014000
 8004b50:	40014400 	.word	0x40014400
 8004b54:	40014800 	.word	0x40014800
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00
 8004b64:	00010007 	.word	0x00010007

08004b68 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b082      	sub	sp, #8
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2200      	movs	r2, #0
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 fe4a 	bl	8005814 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a3e      	ldr	r2, [pc, #248]	@ (8004c80 <HAL_TIM_PWM_Stop+0x118>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d013      	beq.n	8004bb2 <HAL_TIM_PWM_Stop+0x4a>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a3d      	ldr	r2, [pc, #244]	@ (8004c84 <HAL_TIM_PWM_Stop+0x11c>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d00e      	beq.n	8004bb2 <HAL_TIM_PWM_Stop+0x4a>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a3b      	ldr	r2, [pc, #236]	@ (8004c88 <HAL_TIM_PWM_Stop+0x120>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d009      	beq.n	8004bb2 <HAL_TIM_PWM_Stop+0x4a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a3a      	ldr	r2, [pc, #232]	@ (8004c8c <HAL_TIM_PWM_Stop+0x124>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d004      	beq.n	8004bb2 <HAL_TIM_PWM_Stop+0x4a>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a38      	ldr	r2, [pc, #224]	@ (8004c90 <HAL_TIM_PWM_Stop+0x128>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d101      	bne.n	8004bb6 <HAL_TIM_PWM_Stop+0x4e>
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <HAL_TIM_PWM_Stop+0x50>
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d017      	beq.n	8004bec <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6a1a      	ldr	r2, [r3, #32]
 8004bc2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10f      	bne.n	8004bec <HAL_TIM_PWM_Stop+0x84>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	f240 4344 	movw	r3, #1092	@ 0x444
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d107      	bne.n	8004bec <HAL_TIM_PWM_Stop+0x84>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004bea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	6a1a      	ldr	r2, [r3, #32]
 8004bf2:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d10f      	bne.n	8004c1c <HAL_TIM_PWM_Stop+0xb4>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6a1a      	ldr	r2, [r3, #32]
 8004c02:	f240 4344 	movw	r3, #1092	@ 0x444
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d107      	bne.n	8004c1c <HAL_TIM_PWM_Stop+0xb4>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	681a      	ldr	r2, [r3, #0]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f022 0201 	bic.w	r2, r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d104      	bne.n	8004c2c <HAL_TIM_PWM_Stop+0xc4>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2201      	movs	r2, #1
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c2a:	e023      	b.n	8004c74 <HAL_TIM_PWM_Stop+0x10c>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d104      	bne.n	8004c3c <HAL_TIM_PWM_Stop+0xd4>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c3a:	e01b      	b.n	8004c74 <HAL_TIM_PWM_Stop+0x10c>
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	2b08      	cmp	r3, #8
 8004c40:	d104      	bne.n	8004c4c <HAL_TIM_PWM_Stop+0xe4>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c4a:	e013      	b.n	8004c74 <HAL_TIM_PWM_Stop+0x10c>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	2b0c      	cmp	r3, #12
 8004c50:	d104      	bne.n	8004c5c <HAL_TIM_PWM_Stop+0xf4>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c5a:	e00b      	b.n	8004c74 <HAL_TIM_PWM_Stop+0x10c>
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	2b10      	cmp	r3, #16
 8004c60:	d104      	bne.n	8004c6c <HAL_TIM_PWM_Stop+0x104>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c6a:	e003      	b.n	8004c74 <HAL_TIM_PWM_Stop+0x10c>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40012c00 	.word	0x40012c00
 8004c84:	40013400 	.word	0x40013400
 8004c88:	40014000 	.word	0x40014000
 8004c8c:	40014400 	.word	0x40014400
 8004c90:	40014800 	.word	0x40014800

08004c94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	f003 0302 	and.w	r3, r3, #2
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d020      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d01b      	beq.n	8004cf8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f06f 0202 	mvn.w	r2, #2
 8004cc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f9fe 	bl	80050e0 <HAL_TIM_IC_CaptureCallback>
 8004ce4:	e005      	b.n	8004cf2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f9f0 	bl	80050cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 fa01 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d020      	beq.n	8004d44 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f003 0304 	and.w	r3, r3, #4
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d01b      	beq.n	8004d44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0204 	mvn.w	r2, #4
 8004d14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2202      	movs	r2, #2
 8004d1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699b      	ldr	r3, [r3, #24]
 8004d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d003      	beq.n	8004d32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f000 f9d8 	bl	80050e0 <HAL_TIM_IC_CaptureCallback>
 8004d30:	e005      	b.n	8004d3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f9ca 	bl	80050cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 f9db 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d020      	beq.n	8004d90 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01b      	beq.n	8004d90 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f06f 0208 	mvn.w	r2, #8
 8004d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2204      	movs	r2, #4
 8004d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	69db      	ldr	r3, [r3, #28]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d003      	beq.n	8004d7e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 f9b2 	bl	80050e0 <HAL_TIM_IC_CaptureCallback>
 8004d7c:	e005      	b.n	8004d8a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 f9a4 	bl	80050cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d84:	6878      	ldr	r0, [r7, #4]
 8004d86:	f000 f9b5 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0310 	and.w	r3, r3, #16
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d020      	beq.n	8004ddc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0310 	and.w	r3, r3, #16
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d01b      	beq.n	8004ddc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0210 	mvn.w	r2, #16
 8004dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2208      	movs	r2, #8
 8004db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f98c 	bl	80050e0 <HAL_TIM_IC_CaptureCallback>
 8004dc8:	e005      	b.n	8004dd6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f97e 	bl	80050cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f000 f98f 	bl	80050f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00c      	beq.n	8004e00 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f06f 0201 	mvn.w	r2, #1
 8004df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f7fd fb1e 	bl	800243c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d104      	bne.n	8004e14 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00c      	beq.n	8004e2e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d007      	beq.n	8004e2e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004e26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 fe29 	bl	8005a80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00c      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d007      	beq.n	8004e52 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004e4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fe21 	bl	8005a94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00c      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d007      	beq.n	8004e76 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f949 	bl	8005108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00c      	beq.n	8004e9a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d007      	beq.n	8004e9a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f06f 0220 	mvn.w	r2, #32
 8004e92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 fde9 	bl	8005a6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e9a:	bf00      	nop
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
	...

08004ea4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	60f8      	str	r0, [r7, #12]
 8004eac:	60b9      	str	r1, [r7, #8]
 8004eae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e0ff      	b.n	80050c2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b14      	cmp	r3, #20
 8004ece:	f200 80f0 	bhi.w	80050b2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004f2d 	.word	0x08004f2d
 8004edc:	080050b3 	.word	0x080050b3
 8004ee0:	080050b3 	.word	0x080050b3
 8004ee4:	080050b3 	.word	0x080050b3
 8004ee8:	08004f6d 	.word	0x08004f6d
 8004eec:	080050b3 	.word	0x080050b3
 8004ef0:	080050b3 	.word	0x080050b3
 8004ef4:	080050b3 	.word	0x080050b3
 8004ef8:	08004faf 	.word	0x08004faf
 8004efc:	080050b3 	.word	0x080050b3
 8004f00:	080050b3 	.word	0x080050b3
 8004f04:	080050b3 	.word	0x080050b3
 8004f08:	08004fef 	.word	0x08004fef
 8004f0c:	080050b3 	.word	0x080050b3
 8004f10:	080050b3 	.word	0x080050b3
 8004f14:	080050b3 	.word	0x080050b3
 8004f18:	08005031 	.word	0x08005031
 8004f1c:	080050b3 	.word	0x080050b3
 8004f20:	080050b3 	.word	0x080050b3
 8004f24:	080050b3 	.word	0x080050b3
 8004f28:	08005071 	.word	0x08005071
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 f998 	bl	8005268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0208 	orr.w	r2, r2, #8
 8004f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0204 	bic.w	r2, r2, #4
 8004f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6999      	ldr	r1, [r3, #24]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	619a      	str	r2, [r3, #24]
      break;
 8004f6a:	e0a5      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 fa08 	bl	8005388 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6999      	ldr	r1, [r3, #24]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	021a      	lsls	r2, r3, #8
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	619a      	str	r2, [r3, #24]
      break;
 8004fac:	e084      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 fa71 	bl	800549c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0208 	orr.w	r2, r2, #8
 8004fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0204 	bic.w	r2, r2, #4
 8004fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69d9      	ldr	r1, [r3, #28]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	61da      	str	r2, [r3, #28]
      break;
 8004fec:	e064      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fad9 	bl	80055ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69d9      	ldr	r1, [r3, #28]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	021a      	lsls	r2, r3, #8
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	61da      	str	r2, [r3, #28]
      break;
 800502e:	e043      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fb22 	bl	8005680 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0208 	orr.w	r2, r2, #8
 800504a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0204 	bic.w	r2, r2, #4
 800505a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800506e:	e023      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fb66 	bl	8005748 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800508a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800509a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	021a      	lsls	r2, r3, #8
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80050b0:	e002      	b.n	80050b8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	75fb      	strb	r3, [r7, #23]
      break;
 80050b6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80050c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop

080050cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a46      	ldr	r2, [pc, #280]	@ (8005248 <TIM_Base_SetConfig+0x12c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d013      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800513a:	d00f      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a43      	ldr	r2, [pc, #268]	@ (800524c <TIM_Base_SetConfig+0x130>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00b      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a42      	ldr	r2, [pc, #264]	@ (8005250 <TIM_Base_SetConfig+0x134>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d007      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a41      	ldr	r2, [pc, #260]	@ (8005254 <TIM_Base_SetConfig+0x138>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d003      	beq.n	800515c <TIM_Base_SetConfig+0x40>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a40      	ldr	r2, [pc, #256]	@ (8005258 <TIM_Base_SetConfig+0x13c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d108      	bne.n	800516e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a35      	ldr	r2, [pc, #212]	@ (8005248 <TIM_Base_SetConfig+0x12c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d01f      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800517c:	d01b      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a32      	ldr	r2, [pc, #200]	@ (800524c <TIM_Base_SetConfig+0x130>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d017      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a31      	ldr	r2, [pc, #196]	@ (8005250 <TIM_Base_SetConfig+0x134>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d013      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	4a30      	ldr	r2, [pc, #192]	@ (8005254 <TIM_Base_SetConfig+0x138>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00f      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	4a2f      	ldr	r2, [pc, #188]	@ (8005258 <TIM_Base_SetConfig+0x13c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d00b      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a2e      	ldr	r2, [pc, #184]	@ (800525c <TIM_Base_SetConfig+0x140>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d007      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	4a2d      	ldr	r2, [pc, #180]	@ (8005260 <TIM_Base_SetConfig+0x144>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d003      	beq.n	80051b6 <TIM_Base_SetConfig+0x9a>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005264 <TIM_Base_SetConfig+0x148>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d108      	bne.n	80051c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	4313      	orrs	r3, r2
 80051c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	4313      	orrs	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689a      	ldr	r2, [r3, #8]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a16      	ldr	r2, [pc, #88]	@ (8005248 <TIM_Base_SetConfig+0x12c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d00f      	beq.n	8005214 <TIM_Base_SetConfig+0xf8>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a18      	ldr	r2, [pc, #96]	@ (8005258 <TIM_Base_SetConfig+0x13c>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d00b      	beq.n	8005214 <TIM_Base_SetConfig+0xf8>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a17      	ldr	r2, [pc, #92]	@ (800525c <TIM_Base_SetConfig+0x140>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d007      	beq.n	8005214 <TIM_Base_SetConfig+0xf8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a16      	ldr	r2, [pc, #88]	@ (8005260 <TIM_Base_SetConfig+0x144>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d003      	beq.n	8005214 <TIM_Base_SetConfig+0xf8>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a15      	ldr	r2, [pc, #84]	@ (8005264 <TIM_Base_SetConfig+0x148>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d103      	bne.n	800521c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	691a      	ldr	r2, [r3, #16]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b01      	cmp	r3, #1
 800522c:	d105      	bne.n	800523a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f023 0201 	bic.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	611a      	str	r2, [r3, #16]
  }
}
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40012c00 	.word	0x40012c00
 800524c:	40000400 	.word	0x40000400
 8005250:	40000800 	.word	0x40000800
 8005254:	40000c00 	.word	0x40000c00
 8005258:	40013400 	.word	0x40013400
 800525c:	40014000 	.word	0x40014000
 8005260:	40014400 	.word	0x40014400
 8005264:	40014800 	.word	0x40014800

08005268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a1b      	ldr	r3, [r3, #32]
 800527c:	f023 0201 	bic.w	r2, r3, #1
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005296:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0303 	bic.w	r3, r3, #3
 80052a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f023 0302 	bic.w	r3, r3, #2
 80052b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a2c      	ldr	r2, [pc, #176]	@ (8005374 <TIM_OC1_SetConfig+0x10c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d00f      	beq.n	80052e8 <TIM_OC1_SetConfig+0x80>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a2b      	ldr	r2, [pc, #172]	@ (8005378 <TIM_OC1_SetConfig+0x110>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00b      	beq.n	80052e8 <TIM_OC1_SetConfig+0x80>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a2a      	ldr	r2, [pc, #168]	@ (800537c <TIM_OC1_SetConfig+0x114>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d007      	beq.n	80052e8 <TIM_OC1_SetConfig+0x80>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a29      	ldr	r2, [pc, #164]	@ (8005380 <TIM_OC1_SetConfig+0x118>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d003      	beq.n	80052e8 <TIM_OC1_SetConfig+0x80>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a28      	ldr	r2, [pc, #160]	@ (8005384 <TIM_OC1_SetConfig+0x11c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d10c      	bne.n	8005302 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f023 0308 	bic.w	r3, r3, #8
 80052ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f023 0304 	bic.w	r3, r3, #4
 8005300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a1b      	ldr	r2, [pc, #108]	@ (8005374 <TIM_OC1_SetConfig+0x10c>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d00f      	beq.n	800532a <TIM_OC1_SetConfig+0xc2>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a1a      	ldr	r2, [pc, #104]	@ (8005378 <TIM_OC1_SetConfig+0x110>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d00b      	beq.n	800532a <TIM_OC1_SetConfig+0xc2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a19      	ldr	r2, [pc, #100]	@ (800537c <TIM_OC1_SetConfig+0x114>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d007      	beq.n	800532a <TIM_OC1_SetConfig+0xc2>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a18      	ldr	r2, [pc, #96]	@ (8005380 <TIM_OC1_SetConfig+0x118>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d003      	beq.n	800532a <TIM_OC1_SetConfig+0xc2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a17      	ldr	r2, [pc, #92]	@ (8005384 <TIM_OC1_SetConfig+0x11c>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d111      	bne.n	800534e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005330:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005338:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	695b      	ldr	r3, [r3, #20]
 800533e:	693a      	ldr	r2, [r7, #16]
 8005340:	4313      	orrs	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	621a      	str	r2, [r3, #32]
}
 8005368:	bf00      	nop
 800536a:	371c      	adds	r7, #28
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr
 8005374:	40012c00 	.word	0x40012c00
 8005378:	40013400 	.word	0x40013400
 800537c:	40014000 	.word	0x40014000
 8005380:	40014400 	.word	0x40014400
 8005384:	40014800 	.word	0x40014800

08005388 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005388:	b480      	push	{r7}
 800538a:	b087      	sub	sp, #28
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
 8005390:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a1b      	ldr	r3, [r3, #32]
 800539c:	f023 0210 	bic.w	r2, r3, #16
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80053b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 0320 	bic.w	r3, r3, #32
 80053d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a28      	ldr	r2, [pc, #160]	@ (8005488 <TIM_OC2_SetConfig+0x100>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_OC2_SetConfig+0x6c>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a27      	ldr	r2, [pc, #156]	@ (800548c <TIM_OC2_SetConfig+0x104>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d10d      	bne.n	8005410 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	011b      	lsls	r3, r3, #4
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800540e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a1d      	ldr	r2, [pc, #116]	@ (8005488 <TIM_OC2_SetConfig+0x100>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00f      	beq.n	8005438 <TIM_OC2_SetConfig+0xb0>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a1c      	ldr	r2, [pc, #112]	@ (800548c <TIM_OC2_SetConfig+0x104>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00b      	beq.n	8005438 <TIM_OC2_SetConfig+0xb0>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a1b      	ldr	r2, [pc, #108]	@ (8005490 <TIM_OC2_SetConfig+0x108>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d007      	beq.n	8005438 <TIM_OC2_SetConfig+0xb0>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a1a      	ldr	r2, [pc, #104]	@ (8005494 <TIM_OC2_SetConfig+0x10c>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_OC2_SetConfig+0xb0>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a19      	ldr	r2, [pc, #100]	@ (8005498 <TIM_OC2_SetConfig+0x110>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d113      	bne.n	8005460 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800543e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005446:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	695b      	ldr	r3, [r3, #20]
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	4313      	orrs	r3, r2
 8005452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	693a      	ldr	r2, [r7, #16]
 800545c:	4313      	orrs	r3, r2
 800545e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685a      	ldr	r2, [r3, #4]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	621a      	str	r2, [r3, #32]
}
 800547a:	bf00      	nop
 800547c:	371c      	adds	r7, #28
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	40012c00 	.word	0x40012c00
 800548c:	40013400 	.word	0x40013400
 8005490:	40014000 	.word	0x40014000
 8005494:	40014400 	.word	0x40014400
 8005498:	40014800 	.word	0x40014800

0800549c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800549c:	b480      	push	{r7}
 800549e:	b087      	sub	sp, #28
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80054ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f023 0303 	bic.w	r3, r3, #3
 80054d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	021b      	lsls	r3, r3, #8
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a27      	ldr	r2, [pc, #156]	@ (8005598 <TIM_OC3_SetConfig+0xfc>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d003      	beq.n	8005506 <TIM_OC3_SetConfig+0x6a>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a26      	ldr	r2, [pc, #152]	@ (800559c <TIM_OC3_SetConfig+0x100>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d10d      	bne.n	8005522 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800550c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	697a      	ldr	r2, [r7, #20]
 8005516:	4313      	orrs	r3, r2
 8005518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	4a1c      	ldr	r2, [pc, #112]	@ (8005598 <TIM_OC3_SetConfig+0xfc>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d00f      	beq.n	800554a <TIM_OC3_SetConfig+0xae>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a1b      	ldr	r2, [pc, #108]	@ (800559c <TIM_OC3_SetConfig+0x100>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00b      	beq.n	800554a <TIM_OC3_SetConfig+0xae>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a1a      	ldr	r2, [pc, #104]	@ (80055a0 <TIM_OC3_SetConfig+0x104>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d007      	beq.n	800554a <TIM_OC3_SetConfig+0xae>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a19      	ldr	r2, [pc, #100]	@ (80055a4 <TIM_OC3_SetConfig+0x108>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d003      	beq.n	800554a <TIM_OC3_SetConfig+0xae>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a18      	ldr	r2, [pc, #96]	@ (80055a8 <TIM_OC3_SetConfig+0x10c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d113      	bne.n	8005572 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005550:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005558:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	011b      	lsls	r3, r3, #4
 8005560:	693a      	ldr	r2, [r7, #16]
 8005562:	4313      	orrs	r3, r2
 8005564:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	699b      	ldr	r3, [r3, #24]
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	621a      	str	r2, [r3, #32]
}
 800558c:	bf00      	nop
 800558e:	371c      	adds	r7, #28
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr
 8005598:	40012c00 	.word	0x40012c00
 800559c:	40013400 	.word	0x40013400
 80055a0:	40014000 	.word	0x40014000
 80055a4:	40014400 	.word	0x40014400
 80055a8:	40014800 	.word	0x40014800

080055ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6a1b      	ldr	r3, [r3, #32]
 80055c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80055da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80055de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	021b      	lsls	r3, r3, #8
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	031b      	lsls	r3, r3, #12
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4313      	orrs	r3, r2
 8005606:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a18      	ldr	r2, [pc, #96]	@ (800566c <TIM_OC4_SetConfig+0xc0>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d00f      	beq.n	8005630 <TIM_OC4_SetConfig+0x84>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a17      	ldr	r2, [pc, #92]	@ (8005670 <TIM_OC4_SetConfig+0xc4>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d00b      	beq.n	8005630 <TIM_OC4_SetConfig+0x84>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a16      	ldr	r2, [pc, #88]	@ (8005674 <TIM_OC4_SetConfig+0xc8>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d007      	beq.n	8005630 <TIM_OC4_SetConfig+0x84>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a15      	ldr	r2, [pc, #84]	@ (8005678 <TIM_OC4_SetConfig+0xcc>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d003      	beq.n	8005630 <TIM_OC4_SetConfig+0x84>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a14      	ldr	r2, [pc, #80]	@ (800567c <TIM_OC4_SetConfig+0xd0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d109      	bne.n	8005644 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005630:	697b      	ldr	r3, [r7, #20]
 8005632:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	019b      	lsls	r3, r3, #6
 800563e:	697a      	ldr	r2, [r7, #20]
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	693a      	ldr	r2, [r7, #16]
 800565c:	621a      	str	r2, [r3, #32]
}
 800565e:	bf00      	nop
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40013400 	.word	0x40013400
 8005674:	40014000 	.word	0x40014000
 8005678:	40014400 	.word	0x40014400
 800567c:	40014800 	.word	0x40014800

08005680 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a1b      	ldr	r3, [r3, #32]
 8005694:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80056c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	041b      	lsls	r3, r3, #16
 80056cc:	693a      	ldr	r2, [r7, #16]
 80056ce:	4313      	orrs	r3, r2
 80056d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a17      	ldr	r2, [pc, #92]	@ (8005734 <TIM_OC5_SetConfig+0xb4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00f      	beq.n	80056fa <TIM_OC5_SetConfig+0x7a>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a16      	ldr	r2, [pc, #88]	@ (8005738 <TIM_OC5_SetConfig+0xb8>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00b      	beq.n	80056fa <TIM_OC5_SetConfig+0x7a>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a15      	ldr	r2, [pc, #84]	@ (800573c <TIM_OC5_SetConfig+0xbc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d007      	beq.n	80056fa <TIM_OC5_SetConfig+0x7a>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a14      	ldr	r2, [pc, #80]	@ (8005740 <TIM_OC5_SetConfig+0xc0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d003      	beq.n	80056fa <TIM_OC5_SetConfig+0x7a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a13      	ldr	r2, [pc, #76]	@ (8005744 <TIM_OC5_SetConfig+0xc4>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d109      	bne.n	800570e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005700:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	021b      	lsls	r3, r3, #8
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	4313      	orrs	r3, r2
 800570c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	621a      	str	r2, [r3, #32]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40013400 	.word	0x40013400
 800573c:	40014000 	.word	0x40014000
 8005740:	40014400 	.word	0x40014400
 8005744:	40014800 	.word	0x40014800

08005748 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005748:	b480      	push	{r7}
 800574a:	b087      	sub	sp, #28
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a1b      	ldr	r3, [r3, #32]
 8005756:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005776:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800577a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800578e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	051b      	lsls	r3, r3, #20
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	4313      	orrs	r3, r2
 800579a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a18      	ldr	r2, [pc, #96]	@ (8005800 <TIM_OC6_SetConfig+0xb8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00f      	beq.n	80057c4 <TIM_OC6_SetConfig+0x7c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a17      	ldr	r2, [pc, #92]	@ (8005804 <TIM_OC6_SetConfig+0xbc>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00b      	beq.n	80057c4 <TIM_OC6_SetConfig+0x7c>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a16      	ldr	r2, [pc, #88]	@ (8005808 <TIM_OC6_SetConfig+0xc0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d007      	beq.n	80057c4 <TIM_OC6_SetConfig+0x7c>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a15      	ldr	r2, [pc, #84]	@ (800580c <TIM_OC6_SetConfig+0xc4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_OC6_SetConfig+0x7c>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a14      	ldr	r2, [pc, #80]	@ (8005810 <TIM_OC6_SetConfig+0xc8>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d109      	bne.n	80057d8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057ca:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	029b      	lsls	r3, r3, #10
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685a      	ldr	r2, [r3, #4]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	693a      	ldr	r2, [r7, #16]
 80057f0:	621a      	str	r2, [r3, #32]
}
 80057f2:	bf00      	nop
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fc:	4770      	bx	lr
 80057fe:	bf00      	nop
 8005800:	40012c00 	.word	0x40012c00
 8005804:	40013400 	.word	0x40013400
 8005808:	40014000 	.word	0x40014000
 800580c:	40014400 	.word	0x40014400
 8005810:	40014800 	.word	0x40014800

08005814 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005814:	b480      	push	{r7}
 8005816:	b087      	sub	sp, #28
 8005818:	af00      	add	r7, sp, #0
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f003 031f 	and.w	r3, r3, #31
 8005826:	2201      	movs	r2, #1
 8005828:	fa02 f303 	lsl.w	r3, r2, r3
 800582c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a1a      	ldr	r2, [r3, #32]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	43db      	mvns	r3, r3
 8005836:	401a      	ands	r2, r3
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a1a      	ldr	r2, [r3, #32]
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	fa01 f303 	lsl.w	r3, r1, r3
 800584c:	431a      	orrs	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	621a      	str	r2, [r3, #32]
}
 8005852:	bf00      	nop
 8005854:	371c      	adds	r7, #28
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
	...

08005860 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005860:	b480      	push	{r7}
 8005862:	b085      	sub	sp, #20
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005874:	2302      	movs	r3, #2
 8005876:	e068      	b.n	800594a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2202      	movs	r2, #2
 8005884:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a2e      	ldr	r2, [pc, #184]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d004      	beq.n	80058ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a2d      	ldr	r2, [pc, #180]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d108      	bne.n	80058be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80058b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68fa      	ldr	r2, [r7, #12]
 80058d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1e      	ldr	r2, [pc, #120]	@ (8005958 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01d      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058ea:	d018      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1b      	ldr	r2, [pc, #108]	@ (8005960 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d013      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1a      	ldr	r2, [pc, #104]	@ (8005964 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00e      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a18      	ldr	r2, [pc, #96]	@ (8005968 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d009      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a13      	ldr	r2, [pc, #76]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d004      	beq.n	800591e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4a14      	ldr	r2, [pc, #80]	@ (800596c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d10c      	bne.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	4313      	orrs	r3, r2
 800592e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005948:	2300      	movs	r3, #0
}
 800594a:	4618      	mov	r0, r3
 800594c:	3714      	adds	r7, #20
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	40012c00 	.word	0x40012c00
 800595c:	40013400 	.word	0x40013400
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800
 8005968:	40000c00 	.word	0x40000c00
 800596c:	40014000 	.word	0x40014000

08005970 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005970:	b480      	push	{r7}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005984:	2b01      	cmp	r3, #1
 8005986:	d101      	bne.n	800598c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005988:	2302      	movs	r3, #2
 800598a:	e065      	b.n	8005a58 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	4313      	orrs	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	4313      	orrs	r3, r2
 80059ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4313      	orrs	r3, r2
 80059ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	695b      	ldr	r3, [r3, #20]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	041b      	lsls	r3, r3, #16
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a16      	ldr	r2, [pc, #88]	@ (8005a64 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d004      	beq.n	8005a1a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a14      	ldr	r2, [pc, #80]	@ (8005a68 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d115      	bne.n	8005a46 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	051b      	lsls	r3, r3, #20
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	69db      	ldr	r3, [r3, #28]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	40012c00 	.word	0x40012c00
 8005a68:	40013400 	.word	0x40013400

08005a6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b083      	sub	sp, #12
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr

08005a94 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a9c:	bf00      	nop
 8005a9e:	370c      	adds	r7, #12
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr

08005aa8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d101      	bne.n	8005aba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	e040      	b.n	8005b3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fc fe30 	bl	8002730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2224      	movs	r2, #36	@ 0x24
 8005ad4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0201 	bic.w	r2, r2, #1
 8005ae4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d002      	beq.n	8005af4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fb6a 	bl	80061c8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f8af 	bl	8005c58 <UART_SetConfig>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d101      	bne.n	8005b04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005b00:	2301      	movs	r3, #1
 8005b02:	e01b      	b.n	8005b3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	689a      	ldr	r2, [r3, #8]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0201 	orr.w	r2, r2, #1
 8005b32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 fbe9 	bl	800630c <UART_CheckIdleState>
 8005b3a:	4603      	mov	r3, r0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b08a      	sub	sp, #40	@ 0x28
 8005b48:	af02      	add	r7, sp, #8
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	603b      	str	r3, [r7, #0]
 8005b50:	4613      	mov	r3, r2
 8005b52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d177      	bne.n	8005c4c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d002      	beq.n	8005b68 <HAL_UART_Transmit+0x24>
 8005b62:	88fb      	ldrh	r3, [r7, #6]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e070      	b.n	8005c4e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2221      	movs	r2, #33	@ 0x21
 8005b78:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b7a:	f7fc ff55 	bl	8002a28 <HAL_GetTick>
 8005b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	88fa      	ldrh	r2, [r7, #6]
 8005b84:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	88fa      	ldrh	r2, [r7, #6]
 8005b8c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b98:	d108      	bne.n	8005bac <HAL_UART_Transmit+0x68>
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d104      	bne.n	8005bac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	e003      	b.n	8005bb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bb4:	e02f      	b.n	8005c16 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	9300      	str	r3, [sp, #0]
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	2180      	movs	r1, #128	@ 0x80
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fc4b 	bl	800645c <UART_WaitOnFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d004      	beq.n	8005bd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2220      	movs	r2, #32
 8005bd0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005bd2:	2303      	movs	r3, #3
 8005bd4:	e03b      	b.n	8005c4e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bdc:	69bb      	ldr	r3, [r7, #24]
 8005bde:	881a      	ldrh	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005be8:	b292      	uxth	r2, r2
 8005bea:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	3302      	adds	r3, #2
 8005bf0:	61bb      	str	r3, [r7, #24]
 8005bf2:	e007      	b.n	8005c04 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005bf4:	69fb      	ldr	r3, [r7, #28]
 8005bf6:	781a      	ldrb	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	3301      	adds	r3, #1
 8005c02:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	3b01      	subs	r3, #1
 8005c0e:	b29a      	uxth	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1c9      	bne.n	8005bb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	9300      	str	r3, [sp, #0]
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	2140      	movs	r1, #64	@ 0x40
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fc15 	bl	800645c <UART_WaitOnFlagUntilTimeout>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d004      	beq.n	8005c42 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e005      	b.n	8005c4e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2220      	movs	r2, #32
 8005c46:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e000      	b.n	8005c4e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
  }
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3720      	adds	r7, #32
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
	...

08005c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c5c:	b08a      	sub	sp, #40	@ 0x28
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c62:	2300      	movs	r3, #0
 8005c64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	689a      	ldr	r2, [r3, #8]
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	69db      	ldr	r3, [r3, #28]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	4ba4      	ldr	r3, [pc, #656]	@ (8005f18 <UART_SetConfig+0x2c0>)
 8005c88:	4013      	ands	r3, r2
 8005c8a:	68fa      	ldr	r2, [r7, #12]
 8005c8c:	6812      	ldr	r2, [r2, #0]
 8005c8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c90:	430b      	orrs	r3, r1
 8005c92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	68da      	ldr	r2, [r3, #12]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	430a      	orrs	r2, r1
 8005ca8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	699b      	ldr	r3, [r3, #24]
 8005cae:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a99      	ldr	r2, [pc, #612]	@ (8005f1c <UART_SetConfig+0x2c4>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d004      	beq.n	8005cc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a90      	ldr	r2, [pc, #576]	@ (8005f20 <UART_SetConfig+0x2c8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d126      	bne.n	8005d30 <UART_SetConfig+0xd8>
 8005ce2:	4b90      	ldr	r3, [pc, #576]	@ (8005f24 <UART_SetConfig+0x2cc>)
 8005ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ce8:	f003 0303 	and.w	r3, r3, #3
 8005cec:	2b03      	cmp	r3, #3
 8005cee:	d81b      	bhi.n	8005d28 <UART_SetConfig+0xd0>
 8005cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf8 <UART_SetConfig+0xa0>)
 8005cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cf6:	bf00      	nop
 8005cf8:	08005d09 	.word	0x08005d09
 8005cfc:	08005d19 	.word	0x08005d19
 8005d00:	08005d11 	.word	0x08005d11
 8005d04:	08005d21 	.word	0x08005d21
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d0e:	e116      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005d10:	2302      	movs	r3, #2
 8005d12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d16:	e112      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005d18:	2304      	movs	r3, #4
 8005d1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d1e:	e10e      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005d20:	2308      	movs	r3, #8
 8005d22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d26:	e10a      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d2e:	e106      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a7c      	ldr	r2, [pc, #496]	@ (8005f28 <UART_SetConfig+0x2d0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d138      	bne.n	8005dac <UART_SetConfig+0x154>
 8005d3a:	4b7a      	ldr	r3, [pc, #488]	@ (8005f24 <UART_SetConfig+0x2cc>)
 8005d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d40:	f003 030c 	and.w	r3, r3, #12
 8005d44:	2b0c      	cmp	r3, #12
 8005d46:	d82d      	bhi.n	8005da4 <UART_SetConfig+0x14c>
 8005d48:	a201      	add	r2, pc, #4	@ (adr r2, 8005d50 <UART_SetConfig+0xf8>)
 8005d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4e:	bf00      	nop
 8005d50:	08005d85 	.word	0x08005d85
 8005d54:	08005da5 	.word	0x08005da5
 8005d58:	08005da5 	.word	0x08005da5
 8005d5c:	08005da5 	.word	0x08005da5
 8005d60:	08005d95 	.word	0x08005d95
 8005d64:	08005da5 	.word	0x08005da5
 8005d68:	08005da5 	.word	0x08005da5
 8005d6c:	08005da5 	.word	0x08005da5
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	08005da5 	.word	0x08005da5
 8005d78:	08005da5 	.word	0x08005da5
 8005d7c:	08005da5 	.word	0x08005da5
 8005d80:	08005d9d 	.word	0x08005d9d
 8005d84:	2300      	movs	r3, #0
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8a:	e0d8      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d92:	e0d4      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9a:	e0d0      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da2:	e0cc      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005daa:	e0c8      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a5e      	ldr	r2, [pc, #376]	@ (8005f2c <UART_SetConfig+0x2d4>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d125      	bne.n	8005e02 <UART_SetConfig+0x1aa>
 8005db6:	4b5b      	ldr	r3, [pc, #364]	@ (8005f24 <UART_SetConfig+0x2cc>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dbc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005dc0:	2b30      	cmp	r3, #48	@ 0x30
 8005dc2:	d016      	beq.n	8005df2 <UART_SetConfig+0x19a>
 8005dc4:	2b30      	cmp	r3, #48	@ 0x30
 8005dc6:	d818      	bhi.n	8005dfa <UART_SetConfig+0x1a2>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d00a      	beq.n	8005de2 <UART_SetConfig+0x18a>
 8005dcc:	2b20      	cmp	r3, #32
 8005dce:	d814      	bhi.n	8005dfa <UART_SetConfig+0x1a2>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d002      	beq.n	8005dda <UART_SetConfig+0x182>
 8005dd4:	2b10      	cmp	r3, #16
 8005dd6:	d008      	beq.n	8005dea <UART_SetConfig+0x192>
 8005dd8:	e00f      	b.n	8005dfa <UART_SetConfig+0x1a2>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de0:	e0ad      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005de2:	2302      	movs	r3, #2
 8005de4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005de8:	e0a9      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005dea:	2304      	movs	r3, #4
 8005dec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df0:	e0a5      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005df2:	2308      	movs	r3, #8
 8005df4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005df8:	e0a1      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005dfa:	2310      	movs	r3, #16
 8005dfc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e00:	e09d      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a4a      	ldr	r2, [pc, #296]	@ (8005f30 <UART_SetConfig+0x2d8>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d125      	bne.n	8005e58 <UART_SetConfig+0x200>
 8005e0c:	4b45      	ldr	r3, [pc, #276]	@ (8005f24 <UART_SetConfig+0x2cc>)
 8005e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e16:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e18:	d016      	beq.n	8005e48 <UART_SetConfig+0x1f0>
 8005e1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e1c:	d818      	bhi.n	8005e50 <UART_SetConfig+0x1f8>
 8005e1e:	2b80      	cmp	r3, #128	@ 0x80
 8005e20:	d00a      	beq.n	8005e38 <UART_SetConfig+0x1e0>
 8005e22:	2b80      	cmp	r3, #128	@ 0x80
 8005e24:	d814      	bhi.n	8005e50 <UART_SetConfig+0x1f8>
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d002      	beq.n	8005e30 <UART_SetConfig+0x1d8>
 8005e2a:	2b40      	cmp	r3, #64	@ 0x40
 8005e2c:	d008      	beq.n	8005e40 <UART_SetConfig+0x1e8>
 8005e2e:	e00f      	b.n	8005e50 <UART_SetConfig+0x1f8>
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e36:	e082      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005e38:	2302      	movs	r3, #2
 8005e3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e3e:	e07e      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e46:	e07a      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e4e:	e076      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e56:	e072      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a35      	ldr	r2, [pc, #212]	@ (8005f34 <UART_SetConfig+0x2dc>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d12a      	bne.n	8005eb8 <UART_SetConfig+0x260>
 8005e62:	4b30      	ldr	r3, [pc, #192]	@ (8005f24 <UART_SetConfig+0x2cc>)
 8005e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e70:	d01a      	beq.n	8005ea8 <UART_SetConfig+0x250>
 8005e72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e76:	d81b      	bhi.n	8005eb0 <UART_SetConfig+0x258>
 8005e78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e7c:	d00c      	beq.n	8005e98 <UART_SetConfig+0x240>
 8005e7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e82:	d815      	bhi.n	8005eb0 <UART_SetConfig+0x258>
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <UART_SetConfig+0x238>
 8005e88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e8c:	d008      	beq.n	8005ea0 <UART_SetConfig+0x248>
 8005e8e:	e00f      	b.n	8005eb0 <UART_SetConfig+0x258>
 8005e90:	2300      	movs	r3, #0
 8005e92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e96:	e052      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e9e:	e04e      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ea6:	e04a      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005ea8:	2308      	movs	r3, #8
 8005eaa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eae:	e046      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb6:	e042      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a17      	ldr	r2, [pc, #92]	@ (8005f1c <UART_SetConfig+0x2c4>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d13a      	bne.n	8005f38 <UART_SetConfig+0x2e0>
 8005ec2:	4b18      	ldr	r3, [pc, #96]	@ (8005f24 <UART_SetConfig+0x2cc>)
 8005ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005ecc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ed0:	d01a      	beq.n	8005f08 <UART_SetConfig+0x2b0>
 8005ed2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ed6:	d81b      	bhi.n	8005f10 <UART_SetConfig+0x2b8>
 8005ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005edc:	d00c      	beq.n	8005ef8 <UART_SetConfig+0x2a0>
 8005ede:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ee2:	d815      	bhi.n	8005f10 <UART_SetConfig+0x2b8>
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d003      	beq.n	8005ef0 <UART_SetConfig+0x298>
 8005ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eec:	d008      	beq.n	8005f00 <UART_SetConfig+0x2a8>
 8005eee:	e00f      	b.n	8005f10 <UART_SetConfig+0x2b8>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ef6:	e022      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005efe:	e01e      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005f00:	2304      	movs	r3, #4
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f06:	e01a      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f0e:	e016      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005f10:	2310      	movs	r3, #16
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f16:	e012      	b.n	8005f3e <UART_SetConfig+0x2e6>
 8005f18:	efff69f3 	.word	0xefff69f3
 8005f1c:	40008000 	.word	0x40008000
 8005f20:	40013800 	.word	0x40013800
 8005f24:	40021000 	.word	0x40021000
 8005f28:	40004400 	.word	0x40004400
 8005f2c:	40004800 	.word	0x40004800
 8005f30:	40004c00 	.word	0x40004c00
 8005f34:	40005000 	.word	0x40005000
 8005f38:	2310      	movs	r3, #16
 8005f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a9f      	ldr	r2, [pc, #636]	@ (80061c0 <UART_SetConfig+0x568>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d17a      	bne.n	800603e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005f48:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005f4c:	2b08      	cmp	r3, #8
 8005f4e:	d824      	bhi.n	8005f9a <UART_SetConfig+0x342>
 8005f50:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <UART_SetConfig+0x300>)
 8005f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f56:	bf00      	nop
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005f9b 	.word	0x08005f9b
 8005f60:	08005f85 	.word	0x08005f85
 8005f64:	08005f9b 	.word	0x08005f9b
 8005f68:	08005f8b 	.word	0x08005f8b
 8005f6c:	08005f9b 	.word	0x08005f9b
 8005f70:	08005f9b 	.word	0x08005f9b
 8005f74:	08005f9b 	.word	0x08005f9b
 8005f78:	08005f93 	.word	0x08005f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f7c:	f7fd fe4a 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8005f80:	61f8      	str	r0, [r7, #28]
        break;
 8005f82:	e010      	b.n	8005fa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f84:	4b8f      	ldr	r3, [pc, #572]	@ (80061c4 <UART_SetConfig+0x56c>)
 8005f86:	61fb      	str	r3, [r7, #28]
        break;
 8005f88:	e00d      	b.n	8005fa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f8a:	f7fd fdab 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8005f8e:	61f8      	str	r0, [r7, #28]
        break;
 8005f90:	e009      	b.n	8005fa6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f96:	61fb      	str	r3, [r7, #28]
        break;
 8005f98:	e005      	b.n	8005fa6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005fa4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	f000 80fb 	beq.w	80061a4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	685a      	ldr	r2, [r3, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	005b      	lsls	r3, r3, #1
 8005fb6:	4413      	add	r3, r2
 8005fb8:	69fa      	ldr	r2, [r7, #28]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d305      	bcc.n	8005fca <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005fc4:	69fa      	ldr	r2, [r7, #28]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d903      	bls.n	8005fd2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005fd0:	e0e8      	b.n	80061a4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	461c      	mov	r4, r3
 8005fd8:	4615      	mov	r5, r2
 8005fda:	f04f 0200 	mov.w	r2, #0
 8005fde:	f04f 0300 	mov.w	r3, #0
 8005fe2:	022b      	lsls	r3, r5, #8
 8005fe4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005fe8:	0222      	lsls	r2, r4, #8
 8005fea:	68f9      	ldr	r1, [r7, #12]
 8005fec:	6849      	ldr	r1, [r1, #4]
 8005fee:	0849      	lsrs	r1, r1, #1
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	4688      	mov	r8, r1
 8005ff4:	4681      	mov	r9, r0
 8005ff6:	eb12 0a08 	adds.w	sl, r2, r8
 8005ffa:	eb43 0b09 	adc.w	fp, r3, r9
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	603b      	str	r3, [r7, #0]
 8006006:	607a      	str	r2, [r7, #4]
 8006008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800600c:	4650      	mov	r0, sl
 800600e:	4659      	mov	r1, fp
 8006010:	f7fa faca 	bl	80005a8 <__aeabi_uldivmod>
 8006014:	4602      	mov	r2, r0
 8006016:	460b      	mov	r3, r1
 8006018:	4613      	mov	r3, r2
 800601a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006022:	d308      	bcc.n	8006036 <UART_SetConfig+0x3de>
 8006024:	69bb      	ldr	r3, [r7, #24]
 8006026:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800602a:	d204      	bcs.n	8006036 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	69ba      	ldr	r2, [r7, #24]
 8006032:	60da      	str	r2, [r3, #12]
 8006034:	e0b6      	b.n	80061a4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800603c:	e0b2      	b.n	80061a4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006046:	d15e      	bne.n	8006106 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006048:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800604c:	2b08      	cmp	r3, #8
 800604e:	d828      	bhi.n	80060a2 <UART_SetConfig+0x44a>
 8006050:	a201      	add	r2, pc, #4	@ (adr r2, 8006058 <UART_SetConfig+0x400>)
 8006052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006056:	bf00      	nop
 8006058:	0800607d 	.word	0x0800607d
 800605c:	08006085 	.word	0x08006085
 8006060:	0800608d 	.word	0x0800608d
 8006064:	080060a3 	.word	0x080060a3
 8006068:	08006093 	.word	0x08006093
 800606c:	080060a3 	.word	0x080060a3
 8006070:	080060a3 	.word	0x080060a3
 8006074:	080060a3 	.word	0x080060a3
 8006078:	0800609b 	.word	0x0800609b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800607c:	f7fd fdca 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 8006080:	61f8      	str	r0, [r7, #28]
        break;
 8006082:	e014      	b.n	80060ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006084:	f7fd fddc 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 8006088:	61f8      	str	r0, [r7, #28]
        break;
 800608a:	e010      	b.n	80060ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800608c:	4b4d      	ldr	r3, [pc, #308]	@ (80061c4 <UART_SetConfig+0x56c>)
 800608e:	61fb      	str	r3, [r7, #28]
        break;
 8006090:	e00d      	b.n	80060ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006092:	f7fd fd27 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8006096:	61f8      	str	r0, [r7, #28]
        break;
 8006098:	e009      	b.n	80060ae <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800609a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800609e:	61fb      	str	r3, [r7, #28]
        break;
 80060a0:	e005      	b.n	80060ae <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80060a2:	2300      	movs	r3, #0
 80060a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80060ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d077      	beq.n	80061a4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	005a      	lsls	r2, r3, #1
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	085b      	lsrs	r3, r3, #1
 80060be:	441a      	add	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b0f      	cmp	r3, #15
 80060ce:	d916      	bls.n	80060fe <UART_SetConfig+0x4a6>
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80060d6:	d212      	bcs.n	80060fe <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	b29b      	uxth	r3, r3
 80060dc:	f023 030f 	bic.w	r3, r3, #15
 80060e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	085b      	lsrs	r3, r3, #1
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f003 0307 	and.w	r3, r3, #7
 80060ec:	b29a      	uxth	r2, r3
 80060ee:	8afb      	ldrh	r3, [r7, #22]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	8afa      	ldrh	r2, [r7, #22]
 80060fa:	60da      	str	r2, [r3, #12]
 80060fc:	e052      	b.n	80061a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006104:	e04e      	b.n	80061a4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006106:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800610a:	2b08      	cmp	r3, #8
 800610c:	d827      	bhi.n	800615e <UART_SetConfig+0x506>
 800610e:	a201      	add	r2, pc, #4	@ (adr r2, 8006114 <UART_SetConfig+0x4bc>)
 8006110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006114:	08006139 	.word	0x08006139
 8006118:	08006141 	.word	0x08006141
 800611c:	08006149 	.word	0x08006149
 8006120:	0800615f 	.word	0x0800615f
 8006124:	0800614f 	.word	0x0800614f
 8006128:	0800615f 	.word	0x0800615f
 800612c:	0800615f 	.word	0x0800615f
 8006130:	0800615f 	.word	0x0800615f
 8006134:	08006157 	.word	0x08006157
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006138:	f7fd fd6c 	bl	8003c14 <HAL_RCC_GetPCLK1Freq>
 800613c:	61f8      	str	r0, [r7, #28]
        break;
 800613e:	e014      	b.n	800616a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006140:	f7fd fd7e 	bl	8003c40 <HAL_RCC_GetPCLK2Freq>
 8006144:	61f8      	str	r0, [r7, #28]
        break;
 8006146:	e010      	b.n	800616a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006148:	4b1e      	ldr	r3, [pc, #120]	@ (80061c4 <UART_SetConfig+0x56c>)
 800614a:	61fb      	str	r3, [r7, #28]
        break;
 800614c:	e00d      	b.n	800616a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800614e:	f7fd fcc9 	bl	8003ae4 <HAL_RCC_GetSysClockFreq>
 8006152:	61f8      	str	r0, [r7, #28]
        break;
 8006154:	e009      	b.n	800616a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006156:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800615a:	61fb      	str	r3, [r7, #28]
        break;
 800615c:	e005      	b.n	800616a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800615e:	2300      	movs	r3, #0
 8006160:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006168:	bf00      	nop
    }

    if (pclk != 0U)
 800616a:	69fb      	ldr	r3, [r7, #28]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d019      	beq.n	80061a4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	085a      	lsrs	r2, r3, #1
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	441a      	add	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006182:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2b0f      	cmp	r3, #15
 8006188:	d909      	bls.n	800619e <UART_SetConfig+0x546>
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006190:	d205      	bcs.n	800619e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	b29a      	uxth	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	60da      	str	r2, [r3, #12]
 800619c:	e002      	b.n	80061a4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800619e:	2301      	movs	r3, #1
 80061a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2200      	movs	r2, #0
 80061ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80061b0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3728      	adds	r7, #40	@ 0x28
 80061b8:	46bd      	mov	sp, r7
 80061ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061be:	bf00      	nop
 80061c0:	40008000 	.word	0x40008000
 80061c4:	00f42400 	.word	0x00f42400

080061c8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	f003 0308 	and.w	r3, r3, #8
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00a      	beq.n	80061f2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f6:	f003 0301 	and.w	r3, r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d00a      	beq.n	8006214 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	430a      	orrs	r2, r1
 8006212:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	f003 0304 	and.w	r3, r3, #4
 800623e:	2b00      	cmp	r3, #0
 8006240:	d00a      	beq.n	8006258 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	430a      	orrs	r2, r1
 8006256:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800625c:	f003 0310 	and.w	r3, r3, #16
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800627e:	f003 0320 	and.w	r3, r3, #32
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d01a      	beq.n	80062de <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062c6:	d10a      	bne.n	80062de <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]
  }
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b098      	sub	sp, #96	@ 0x60
 8006310:	af02      	add	r7, sp, #8
 8006312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800631c:	f7fc fb84 	bl	8002a28 <HAL_GetTick>
 8006320:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f003 0308 	and.w	r3, r3, #8
 800632c:	2b08      	cmp	r3, #8
 800632e:	d12e      	bne.n	800638e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006330:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006338:	2200      	movs	r2, #0
 800633a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 f88c 	bl	800645c <UART_WaitOnFlagUntilTimeout>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d021      	beq.n	800638e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800635e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	461a      	mov	r2, r3
 8006366:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006368:	647b      	str	r3, [r7, #68]	@ 0x44
 800636a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800636e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e6      	bne.n	800634a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800638a:	2303      	movs	r3, #3
 800638c:	e062      	b.n	8006454 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b04      	cmp	r3, #4
 800639a:	d149      	bne.n	8006430 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800639c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063a4:	2200      	movs	r2, #0
 80063a6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f856 	bl	800645c <UART_WaitOnFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d03c      	beq.n	8006430 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	e853 3f00 	ldrex	r3, [r3]
 80063c2:	623b      	str	r3, [r7, #32]
   return(result);
 80063c4:	6a3b      	ldr	r3, [r7, #32]
 80063c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80063d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063dc:	e841 2300 	strex	r3, r2, [r1]
 80063e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1e6      	bne.n	80063b6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3308      	adds	r3, #8
 80063ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	e853 3f00 	ldrex	r3, [r3]
 80063f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 0301 	bic.w	r3, r3, #1
 80063fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	3308      	adds	r3, #8
 8006406:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006408:	61fa      	str	r2, [r7, #28]
 800640a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800640c:	69b9      	ldr	r1, [r7, #24]
 800640e:	69fa      	ldr	r2, [r7, #28]
 8006410:	e841 2300 	strex	r3, r2, [r1]
 8006414:	617b      	str	r3, [r7, #20]
   return(result);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d1e5      	bne.n	80063e8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2200      	movs	r2, #0
 8006428:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e011      	b.n	8006454 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2220      	movs	r2, #32
 8006434:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2220      	movs	r2, #32
 800643a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2200      	movs	r2, #0
 8006442:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3758      	adds	r7, #88	@ 0x58
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	603b      	str	r3, [r7, #0]
 8006468:	4613      	mov	r3, r2
 800646a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800646c:	e04f      	b.n	800650e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d04b      	beq.n	800650e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006476:	f7fc fad7 	bl	8002a28 <HAL_GetTick>
 800647a:	4602      	mov	r2, r0
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	429a      	cmp	r2, r3
 8006484:	d302      	bcc.n	800648c <UART_WaitOnFlagUntilTimeout+0x30>
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e04e      	b.n	800652e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f003 0304 	and.w	r3, r3, #4
 800649a:	2b00      	cmp	r3, #0
 800649c:	d037      	beq.n	800650e <UART_WaitOnFlagUntilTimeout+0xb2>
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	2b80      	cmp	r3, #128	@ 0x80
 80064a2:	d034      	beq.n	800650e <UART_WaitOnFlagUntilTimeout+0xb2>
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	2b40      	cmp	r3, #64	@ 0x40
 80064a8:	d031      	beq.n	800650e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	f003 0308 	and.w	r3, r3, #8
 80064b4:	2b08      	cmp	r3, #8
 80064b6:	d110      	bne.n	80064da <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2208      	movs	r2, #8
 80064be:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064c0:	68f8      	ldr	r0, [r7, #12]
 80064c2:	f000 f838 	bl	8006536 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	2208      	movs	r2, #8
 80064ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e029      	b.n	800652e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	69db      	ldr	r3, [r3, #28]
 80064e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80064e4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80064e8:	d111      	bne.n	800650e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80064f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 f81e 	bl	8006536 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2220      	movs	r2, #32
 80064fe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e00f      	b.n	800652e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	69da      	ldr	r2, [r3, #28]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	4013      	ands	r3, r2
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	429a      	cmp	r2, r3
 800651c:	bf0c      	ite	eq
 800651e:	2301      	moveq	r3, #1
 8006520:	2300      	movne	r3, #0
 8006522:	b2db      	uxtb	r3, r3
 8006524:	461a      	mov	r2, r3
 8006526:	79fb      	ldrb	r3, [r7, #7]
 8006528:	429a      	cmp	r2, r3
 800652a:	d0a0      	beq.n	800646e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006536:	b480      	push	{r7}
 8006538:	b095      	sub	sp, #84	@ 0x54
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006546:	e853 3f00 	ldrex	r3, [r3]
 800654a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800654c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800654e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	461a      	mov	r2, r3
 800655a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800655c:	643b      	str	r3, [r7, #64]	@ 0x40
 800655e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006560:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006562:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006564:	e841 2300 	strex	r3, r2, [r1]
 8006568:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800656a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	d1e6      	bne.n	800653e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3308      	adds	r3, #8
 8006576:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	e853 3f00 	ldrex	r3, [r3]
 800657e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	f023 0301 	bic.w	r3, r3, #1
 8006586:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	3308      	adds	r3, #8
 800658e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006590:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006592:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006594:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006598:	e841 2300 	strex	r3, r2, [r1]
 800659c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d1e5      	bne.n	8006570 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d118      	bne.n	80065de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	e853 3f00 	ldrex	r3, [r3]
 80065b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f023 0310 	bic.w	r3, r3, #16
 80065c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	461a      	mov	r2, r3
 80065c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ca:	61bb      	str	r3, [r7, #24]
 80065cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ce:	6979      	ldr	r1, [r7, #20]
 80065d0:	69ba      	ldr	r2, [r7, #24]
 80065d2:	e841 2300 	strex	r3, r2, [r1]
 80065d6:	613b      	str	r3, [r7, #16]
   return(result);
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d1e6      	bne.n	80065ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80065f2:	bf00      	nop
 80065f4:	3754      	adds	r7, #84	@ 0x54
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr
	...

08006600 <__NVIC_SetPriority>:
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	6039      	str	r1, [r7, #0]
 800660a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800660c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006610:	2b00      	cmp	r3, #0
 8006612:	db0a      	blt.n	800662a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	b2da      	uxtb	r2, r3
 8006618:	490c      	ldr	r1, [pc, #48]	@ (800664c <__NVIC_SetPriority+0x4c>)
 800661a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800661e:	0112      	lsls	r2, r2, #4
 8006620:	b2d2      	uxtb	r2, r2
 8006622:	440b      	add	r3, r1
 8006624:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006628:	e00a      	b.n	8006640 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	b2da      	uxtb	r2, r3
 800662e:	4908      	ldr	r1, [pc, #32]	@ (8006650 <__NVIC_SetPriority+0x50>)
 8006630:	79fb      	ldrb	r3, [r7, #7]
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	3b04      	subs	r3, #4
 8006638:	0112      	lsls	r2, r2, #4
 800663a:	b2d2      	uxtb	r2, r2
 800663c:	440b      	add	r3, r1
 800663e:	761a      	strb	r2, [r3, #24]
}
 8006640:	bf00      	nop
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr
 800664c:	e000e100 	.word	0xe000e100
 8006650:	e000ed00 	.word	0xe000ed00

08006654 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006658:	4b05      	ldr	r3, [pc, #20]	@ (8006670 <SysTick_Handler+0x1c>)
 800665a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800665c:	f001 ffc6 	bl	80085ec <xTaskGetSchedulerState>
 8006660:	4603      	mov	r3, r0
 8006662:	2b01      	cmp	r3, #1
 8006664:	d001      	beq.n	800666a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006666:	f002 fe7f 	bl	8009368 <xPortSysTickHandler>
  }
}
 800666a:	bf00      	nop
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	e000e010 	.word	0xe000e010

08006674 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006674:	b580      	push	{r7, lr}
 8006676:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006678:	2100      	movs	r1, #0
 800667a:	f06f 0004 	mvn.w	r0, #4
 800667e:	f7ff ffbf 	bl	8006600 <__NVIC_SetPriority>
#endif
}
 8006682:	bf00      	nop
 8006684:	bd80      	pop	{r7, pc}
	...

08006688 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800668e:	f3ef 8305 	mrs	r3, IPSR
 8006692:	603b      	str	r3, [r7, #0]
  return(result);
 8006694:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800669a:	f06f 0305 	mvn.w	r3, #5
 800669e:	607b      	str	r3, [r7, #4]
 80066a0:	e00c      	b.n	80066bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80066a2:	4b0a      	ldr	r3, [pc, #40]	@ (80066cc <osKernelInitialize+0x44>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d105      	bne.n	80066b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80066aa:	4b08      	ldr	r3, [pc, #32]	@ (80066cc <osKernelInitialize+0x44>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80066b0:	2300      	movs	r3, #0
 80066b2:	607b      	str	r3, [r7, #4]
 80066b4:	e002      	b.n	80066bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295
 80066ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066bc:	687b      	ldr	r3, [r7, #4]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	370c      	adds	r7, #12
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	20000414 	.word	0x20000414

080066d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066d6:	f3ef 8305 	mrs	r3, IPSR
 80066da:	603b      	str	r3, [r7, #0]
  return(result);
 80066dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d003      	beq.n	80066ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80066e2:	f06f 0305 	mvn.w	r3, #5
 80066e6:	607b      	str	r3, [r7, #4]
 80066e8:	e010      	b.n	800670c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80066ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006718 <osKernelStart+0x48>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d109      	bne.n	8006706 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80066f2:	f7ff ffbf 	bl	8006674 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80066f6:	4b08      	ldr	r3, [pc, #32]	@ (8006718 <osKernelStart+0x48>)
 80066f8:	2202      	movs	r2, #2
 80066fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80066fc:	f001 fb28 	bl	8007d50 <vTaskStartScheduler>
      stat = osOK;
 8006700:	2300      	movs	r3, #0
 8006702:	607b      	str	r3, [r7, #4]
 8006704:	e002      	b.n	800670c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006706:	f04f 33ff 	mov.w	r3, #4294967295
 800670a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800670c:	687b      	ldr	r3, [r7, #4]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000414 	.word	0x20000414

0800671c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800671c:	b580      	push	{r7, lr}
 800671e:	b08e      	sub	sp, #56	@ 0x38
 8006720:	af04      	add	r7, sp, #16
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006728:	2300      	movs	r3, #0
 800672a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800672c:	f3ef 8305 	mrs	r3, IPSR
 8006730:	617b      	str	r3, [r7, #20]
  return(result);
 8006732:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006734:	2b00      	cmp	r3, #0
 8006736:	d17e      	bne.n	8006836 <osThreadNew+0x11a>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d07b      	beq.n	8006836 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800673e:	2380      	movs	r3, #128	@ 0x80
 8006740:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006742:	2318      	movs	r3, #24
 8006744:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006746:	2300      	movs	r3, #0
 8006748:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800674a:	f04f 33ff 	mov.w	r3, #4294967295
 800674e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d045      	beq.n	80067e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <osThreadNew+0x48>
        name = attr->name;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <osThreadNew+0x6e>
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	2b38      	cmp	r3, #56	@ 0x38
 800677c:	d805      	bhi.n	800678a <osThreadNew+0x6e>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <osThreadNew+0x72>
        return (NULL);
 800678a:	2300      	movs	r3, #0
 800678c:	e054      	b.n	8006838 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	089b      	lsrs	r3, r3, #2
 800679c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00e      	beq.n	80067c4 <osThreadNew+0xa8>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68db      	ldr	r3, [r3, #12]
 80067aa:	2b5b      	cmp	r3, #91	@ 0x5b
 80067ac:	d90a      	bls.n	80067c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d006      	beq.n	80067c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	695b      	ldr	r3, [r3, #20]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <osThreadNew+0xa8>
        mem = 1;
 80067be:	2301      	movs	r3, #1
 80067c0:	61bb      	str	r3, [r7, #24]
 80067c2:	e010      	b.n	80067e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10c      	bne.n	80067e6 <osThreadNew+0xca>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d108      	bne.n	80067e6 <osThreadNew+0xca>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <osThreadNew+0xca>
          mem = 0;
 80067dc:	2300      	movs	r3, #0
 80067de:	61bb      	str	r3, [r7, #24]
 80067e0:	e001      	b.n	80067e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80067e2:	2300      	movs	r3, #0
 80067e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d110      	bne.n	800680e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80067f0:	687a      	ldr	r2, [r7, #4]
 80067f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067f4:	9202      	str	r2, [sp, #8]
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	6a3a      	ldr	r2, [r7, #32]
 8006800:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f001 f8c8 	bl	8007998 <xTaskCreateStatic>
 8006808:	4603      	mov	r3, r0
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	e013      	b.n	8006836 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d110      	bne.n	8006836 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	b29a      	uxth	r2, r3
 8006818:	f107 0310 	add.w	r3, r7, #16
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f001 f916 	bl	8007a58 <xTaskCreate>
 800682c:	4603      	mov	r3, r0
 800682e:	2b01      	cmp	r3, #1
 8006830:	d001      	beq.n	8006836 <osThreadNew+0x11a>
            hTask = NULL;
 8006832:	2300      	movs	r3, #0
 8006834:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006836:	693b      	ldr	r3, [r7, #16]
}
 8006838:	4618      	mov	r0, r3
 800683a:	3728      	adds	r7, #40	@ 0x28
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b084      	sub	sp, #16
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006848:	f3ef 8305 	mrs	r3, IPSR
 800684c:	60bb      	str	r3, [r7, #8]
  return(result);
 800684e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <osDelay+0x1c>
    stat = osErrorISR;
 8006854:	f06f 0305 	mvn.w	r3, #5
 8006858:	60fb      	str	r3, [r7, #12]
 800685a:	e007      	b.n	800686c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800685c:	2300      	movs	r3, #0
 800685e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <osDelay+0x2c>
      vTaskDelay(ticks);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f001 fa3c 	bl	8007ce4 <vTaskDelay>
    }
  }

  return (stat);
 800686c:	68fb      	ldr	r3, [r7, #12]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}

08006876 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006876:	b580      	push	{r7, lr}
 8006878:	b084      	sub	sp, #16
 800687a:	af00      	add	r7, sp, #0
 800687c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f002 fb8e 	bl	8008fa0 <pvTimerGetTimerID>
 8006884:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d005      	beq.n	8006898 <TimerCallback+0x22>
    callb->func (callb->arg);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	6852      	ldr	r2, [r2, #4]
 8006894:	4610      	mov	r0, r2
 8006896:	4798      	blx	r3
  }
}
 8006898:	bf00      	nop
 800689a:	3710      	adds	r7, #16
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}

080068a0 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b08c      	sub	sp, #48	@ 0x30
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	607a      	str	r2, [r7, #4]
 80068aa:	603b      	str	r3, [r7, #0]
 80068ac:	460b      	mov	r3, r1
 80068ae:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80068b0:	2300      	movs	r3, #0
 80068b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b4:	f3ef 8305 	mrs	r3, IPSR
 80068b8:	613b      	str	r3, [r7, #16]
  return(result);
 80068ba:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d163      	bne.n	8006988 <osTimerNew+0xe8>
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d060      	beq.n	8006988 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80068c6:	2008      	movs	r0, #8
 80068c8:	f002 fde0 	bl	800948c <pvPortMalloc>
 80068cc:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d059      	beq.n	8006988 <osTimerNew+0xe8>
      callb->func = func;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	68fa      	ldr	r2, [r7, #12]
 80068d8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80068e0:	7afb      	ldrb	r3, [r7, #11]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d102      	bne.n	80068ec <osTimerNew+0x4c>
        reload = pdFALSE;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61fb      	str	r3, [r7, #28]
 80068ea:	e001      	b.n	80068f0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80068ec:	2301      	movs	r3, #1
 80068ee:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80068f0:	f04f 33ff 	mov.w	r3, #4294967295
 80068f4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 80068fa:	683b      	ldr	r3, [r7, #0]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01c      	beq.n	800693a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d002      	beq.n	800690e <osTimerNew+0x6e>
          name = attr->name;
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d006      	beq.n	8006924 <osTimerNew+0x84>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	2b2b      	cmp	r3, #43	@ 0x2b
 800691c:	d902      	bls.n	8006924 <osTimerNew+0x84>
          mem = 1;
 800691e:	2301      	movs	r3, #1
 8006920:	61bb      	str	r3, [r7, #24]
 8006922:	e00c      	b.n	800693e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d108      	bne.n	800693e <osTimerNew+0x9e>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d104      	bne.n	800693e <osTimerNew+0x9e>
            mem = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	61bb      	str	r3, [r7, #24]
 8006938:	e001      	b.n	800693e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800693a:	2300      	movs	r3, #0
 800693c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d10c      	bne.n	800695e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	689b      	ldr	r3, [r3, #8]
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	4b12      	ldr	r3, [pc, #72]	@ (8006994 <osTimerNew+0xf4>)
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	2101      	movs	r1, #1
 8006954:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006956:	f001 ff96 	bl	8008886 <xTimerCreateStatic>
 800695a:	6238      	str	r0, [r7, #32]
 800695c:	e00b      	b.n	8006976 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d108      	bne.n	8006976 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006964:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <osTimerNew+0xf4>)
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	2101      	movs	r1, #1
 800696e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006970:	f001 ff68 	bl	8008844 <xTimerCreate>
 8006974:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d105      	bne.n	8006988 <osTimerNew+0xe8>
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <osTimerNew+0xe8>
        vPortFree (callb);
 8006982:	6978      	ldr	r0, [r7, #20]
 8006984:	f002 fe50 	bl	8009628 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8006988:	6a3b      	ldr	r3, [r7, #32]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3728      	adds	r7, #40	@ 0x28
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	08006877 	.word	0x08006877

08006998 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006998:	b580      	push	{r7, lr}
 800699a:	b088      	sub	sp, #32
 800699c:	af02      	add	r7, sp, #8
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069a6:	f3ef 8305 	mrs	r3, IPSR
 80069aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80069ac:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <osTimerStart+0x22>
    stat = osErrorISR;
 80069b2:	f06f 0305 	mvn.w	r3, #5
 80069b6:	617b      	str	r3, [r7, #20]
 80069b8:	e017      	b.n	80069ea <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d103      	bne.n	80069c8 <osTimerStart+0x30>
    stat = osErrorParameter;
 80069c0:	f06f 0303 	mvn.w	r3, #3
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	e010      	b.n	80069ea <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80069c8:	2300      	movs	r3, #0
 80069ca:	9300      	str	r3, [sp, #0]
 80069cc:	2300      	movs	r3, #0
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	2104      	movs	r1, #4
 80069d2:	6938      	ldr	r0, [r7, #16]
 80069d4:	f001 ffd4 	bl	8008980 <xTimerGenericCommand>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d102      	bne.n	80069e4 <osTimerStart+0x4c>
      stat = osOK;
 80069de:	2300      	movs	r3, #0
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	e002      	b.n	80069ea <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80069e4:	f06f 0302 	mvn.w	r3, #2
 80069e8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80069ea:	697b      	ldr	r3, [r7, #20]
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3718      	adds	r7, #24
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	@ 0x28
 80069f8:	af02      	add	r7, sp, #8
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006a00:	2300      	movs	r3, #0
 8006a02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a04:	f3ef 8305 	mrs	r3, IPSR
 8006a08:	613b      	str	r3, [r7, #16]
  return(result);
 8006a0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d15f      	bne.n	8006ad0 <osMessageQueueNew+0xdc>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d05c      	beq.n	8006ad0 <osMessageQueueNew+0xdc>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d059      	beq.n	8006ad0 <osMessageQueueNew+0xdc>
    mem = -1;
 8006a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d029      	beq.n	8006a7c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d012      	beq.n	8006a56 <osMessageQueueNew+0x62>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	2b4f      	cmp	r3, #79	@ 0x4f
 8006a36:	d90e      	bls.n	8006a56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	695a      	ldr	r2, [r3, #20]
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	68b9      	ldr	r1, [r7, #8]
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d302      	bcc.n	8006a56 <osMessageQueueNew+0x62>
        mem = 1;
 8006a50:	2301      	movs	r3, #1
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	e014      	b.n	8006a80 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d110      	bne.n	8006a80 <osMessageQueueNew+0x8c>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d10c      	bne.n	8006a80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d108      	bne.n	8006a80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	695b      	ldr	r3, [r3, #20]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d104      	bne.n	8006a80 <osMessageQueueNew+0x8c>
          mem = 0;
 8006a76:	2300      	movs	r3, #0
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	e001      	b.n	8006a80 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d10b      	bne.n	8006a9e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	691a      	ldr	r2, [r3, #16]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	2100      	movs	r1, #0
 8006a90:	9100      	str	r1, [sp, #0]
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 fa31 	bl	8006efc <xQueueGenericCreateStatic>
 8006a9a:	61f8      	str	r0, [r7, #28]
 8006a9c:	e008      	b.n	8006ab0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d105      	bne.n	8006ab0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 faa4 	bl	8006ff6 <xQueueGenericCreate>
 8006aae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00c      	beq.n	8006ad0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	e001      	b.n	8006ac8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006ac8:	6979      	ldr	r1, [r7, #20]
 8006aca:	69f8      	ldr	r0, [r7, #28]
 8006acc:	f000 ff06 	bl	80078dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006ad0:	69fb      	ldr	r3, [r7, #28]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3720      	adds	r7, #32
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b088      	sub	sp, #32
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	603b      	str	r3, [r7, #0]
 8006ae8:	4613      	mov	r3, r2
 8006aea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006af4:	f3ef 8305 	mrs	r3, IPSR
 8006af8:	617b      	str	r3, [r7, #20]
  return(result);
 8006afa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d028      	beq.n	8006b52 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d005      	beq.n	8006b12 <osMessageQueuePut+0x36>
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <osMessageQueuePut+0x36>
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8006b12:	f06f 0303 	mvn.w	r3, #3
 8006b16:	61fb      	str	r3, [r7, #28]
 8006b18:	e038      	b.n	8006b8c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006b1e:	f107 0210 	add.w	r2, r7, #16
 8006b22:	2300      	movs	r3, #0
 8006b24:	68b9      	ldr	r1, [r7, #8]
 8006b26:	69b8      	ldr	r0, [r7, #24]
 8006b28:	f000 fbc6 	bl	80072b8 <xQueueGenericSendFromISR>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d003      	beq.n	8006b3a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8006b32:	f06f 0302 	mvn.w	r3, #2
 8006b36:	61fb      	str	r3, [r7, #28]
 8006b38:	e028      	b.n	8006b8c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d025      	beq.n	8006b8c <osMessageQueuePut+0xb0>
 8006b40:	4b15      	ldr	r3, [pc, #84]	@ (8006b98 <osMessageQueuePut+0xbc>)
 8006b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	f3bf 8f6f 	isb	sy
 8006b50:	e01c      	b.n	8006b8c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006b52:	69bb      	ldr	r3, [r7, #24]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <osMessageQueuePut+0x82>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d103      	bne.n	8006b66 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8006b5e:	f06f 0303 	mvn.w	r3, #3
 8006b62:	61fb      	str	r3, [r7, #28]
 8006b64:	e012      	b.n	8006b8c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006b66:	2300      	movs	r3, #0
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	68b9      	ldr	r1, [r7, #8]
 8006b6c:	69b8      	ldr	r0, [r7, #24]
 8006b6e:	f000 faa1 	bl	80070b4 <xQueueGenericSend>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d009      	beq.n	8006b8c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8006b7e:	f06f 0301 	mvn.w	r3, #1
 8006b82:	61fb      	str	r3, [r7, #28]
 8006b84:	e002      	b.n	8006b8c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8006b86:	f06f 0302 	mvn.w	r3, #2
 8006b8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006b8c:	69fb      	ldr	r3, [r7, #28]
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3720      	adds	r7, #32
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	e000ed04 	.word	0xe000ed04

08006b9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
 8006ba8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006bb2:	f3ef 8305 	mrs	r3, IPSR
 8006bb6:	617b      	str	r3, [r7, #20]
  return(result);
 8006bb8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d028      	beq.n	8006c10 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <osMessageQueueGet+0x34>
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d002      	beq.n	8006bd0 <osMessageQueueGet+0x34>
 8006bca:	683b      	ldr	r3, [r7, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d003      	beq.n	8006bd8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006bd0:	f06f 0303 	mvn.w	r3, #3
 8006bd4:	61fb      	str	r3, [r7, #28]
 8006bd6:	e037      	b.n	8006c48 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006bdc:	f107 0310 	add.w	r3, r7, #16
 8006be0:	461a      	mov	r2, r3
 8006be2:	68b9      	ldr	r1, [r7, #8]
 8006be4:	69b8      	ldr	r0, [r7, #24]
 8006be6:	f000 fce7 	bl	80075b8 <xQueueReceiveFromISR>
 8006bea:	4603      	mov	r3, r0
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d003      	beq.n	8006bf8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006bf0:	f06f 0302 	mvn.w	r3, #2
 8006bf4:	61fb      	str	r3, [r7, #28]
 8006bf6:	e027      	b.n	8006c48 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d024      	beq.n	8006c48 <osMessageQueueGet+0xac>
 8006bfe:	4b15      	ldr	r3, [pc, #84]	@ (8006c54 <osMessageQueueGet+0xb8>)
 8006c00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	f3bf 8f4f 	dsb	sy
 8006c0a:	f3bf 8f6f 	isb	sy
 8006c0e:	e01b      	b.n	8006c48 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006c10:	69bb      	ldr	r3, [r7, #24]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <osMessageQueueGet+0x80>
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d103      	bne.n	8006c24 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006c1c:	f06f 0303 	mvn.w	r3, #3
 8006c20:	61fb      	str	r3, [r7, #28]
 8006c22:	e011      	b.n	8006c48 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	68b9      	ldr	r1, [r7, #8]
 8006c28:	69b8      	ldr	r0, [r7, #24]
 8006c2a:	f000 fbe3 	bl	80073f4 <xQueueReceive>
 8006c2e:	4603      	mov	r3, r0
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d009      	beq.n	8006c48 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d003      	beq.n	8006c42 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8006c3a:	f06f 0301 	mvn.w	r3, #1
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	e002      	b.n	8006c48 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8006c42:	f06f 0302 	mvn.w	r3, #2
 8006c46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006c48:	69fb      	ldr	r3, [r7, #28]
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	e000ed04 	.word	0xe000ed04

08006c58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c58:	b480      	push	{r7}
 8006c5a:	b085      	sub	sp, #20
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	4a07      	ldr	r2, [pc, #28]	@ (8006c84 <vApplicationGetIdleTaskMemory+0x2c>)
 8006c68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	4a06      	ldr	r2, [pc, #24]	@ (8006c88 <vApplicationGetIdleTaskMemory+0x30>)
 8006c6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2280      	movs	r2, #128	@ 0x80
 8006c74:	601a      	str	r2, [r3, #0]
}
 8006c76:	bf00      	nop
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000418 	.word	0x20000418
 8006c88:	20000474 	.word	0x20000474

08006c8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	60f8      	str	r0, [r7, #12]
 8006c94:	60b9      	str	r1, [r7, #8]
 8006c96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4a07      	ldr	r2, [pc, #28]	@ (8006cb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	4a06      	ldr	r2, [pc, #24]	@ (8006cbc <vApplicationGetTimerTaskMemory+0x30>)
 8006ca2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006caa:	601a      	str	r2, [r3, #0]
}
 8006cac:	bf00      	nop
 8006cae:	3714      	adds	r7, #20
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	20000674 	.word	0x20000674
 8006cbc:	200006d0 	.word	0x200006d0

08006cc0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f103 0208 	add.w	r2, r3, #8
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f103 0208 	add.w	r2, r3, #8
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f103 0208 	add.w	r2, r3, #8
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006d0e:	bf00      	nop
 8006d10:	370c      	adds	r7, #12
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr

08006d1a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d1a:	b480      	push	{r7}
 8006d1c:	b085      	sub	sp, #20
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
 8006d22:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	689a      	ldr	r2, [r3, #8]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	601a      	str	r2, [r3, #0]
}
 8006d56:	bf00      	nop
 8006d58:	3714      	adds	r7, #20
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr

08006d62 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d62:	b480      	push	{r7}
 8006d64:	b085      	sub	sp, #20
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
 8006d6a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d78:	d103      	bne.n	8006d82 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	e00c      	b.n	8006d9c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	3308      	adds	r3, #8
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	e002      	b.n	8006d90 <vListInsert+0x2e>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	60fb      	str	r3, [r7, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68ba      	ldr	r2, [r7, #8]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d2f6      	bcs.n	8006d8a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	683a      	ldr	r2, [r7, #0]
 8006db6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	687a      	ldr	r2, [r7, #4]
 8006dbc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	601a      	str	r2, [r3, #0]
}
 8006dc8:	bf00      	nop
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	691b      	ldr	r3, [r3, #16]
 8006de0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6892      	ldr	r2, [r2, #8]
 8006dea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6852      	ldr	r2, [r2, #4]
 8006df4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d103      	bne.n	8006e08 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689a      	ldr	r2, [r3, #8]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	1e5a      	subs	r2, r3, #1
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3714      	adds	r7, #20
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10b      	bne.n	8006e54 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e40:	f383 8811 	msr	BASEPRI, r3
 8006e44:	f3bf 8f6f 	isb	sy
 8006e48:	f3bf 8f4f 	dsb	sy
 8006e4c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e4e:	bf00      	nop
 8006e50:	bf00      	nop
 8006e52:	e7fd      	b.n	8006e50 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006e54:	f002 f9f8 	bl	8009248 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e60:	68f9      	ldr	r1, [r7, #12]
 8006e62:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e64:	fb01 f303 	mul.w	r3, r1, r3
 8006e68:	441a      	add	r2, r3
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e84:	3b01      	subs	r3, #1
 8006e86:	68f9      	ldr	r1, [r7, #12]
 8006e88:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006e8a:	fb01 f303 	mul.w	r3, r1, r3
 8006e8e:	441a      	add	r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	22ff      	movs	r2, #255	@ 0xff
 8006e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	22ff      	movs	r2, #255	@ 0xff
 8006ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d114      	bne.n	8006ed4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d01a      	beq.n	8006ee8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3310      	adds	r3, #16
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f001 f9d8 	bl	800826c <xTaskRemoveFromEventList>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d012      	beq.n	8006ee8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef8 <xQueueGenericReset+0xd0>)
 8006ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ec8:	601a      	str	r2, [r3, #0]
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	f3bf 8f6f 	isb	sy
 8006ed2:	e009      	b.n	8006ee8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3310      	adds	r3, #16
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7ff fef1 	bl	8006cc0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3324      	adds	r3, #36	@ 0x24
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff feec 	bl	8006cc0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ee8:	f002 f9e0 	bl	80092ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006eec:	2301      	movs	r3, #1
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3710      	adds	r7, #16
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	e000ed04 	.word	0xe000ed04

08006efc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b08e      	sub	sp, #56	@ 0x38
 8006f00:	af02      	add	r7, sp, #8
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10b      	bne.n	8006f28 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	e7fd      	b.n	8006f24 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10b      	bne.n	8006f46 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f40:	bf00      	nop
 8006f42:	bf00      	nop
 8006f44:	e7fd      	b.n	8006f42 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <xQueueGenericCreateStatic+0x56>
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <xQueueGenericCreateStatic+0x5a>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e000      	b.n	8006f58 <xQueueGenericCreateStatic+0x5c>
 8006f56:	2300      	movs	r3, #0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10b      	bne.n	8006f74 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f60:	f383 8811 	msr	BASEPRI, r3
 8006f64:	f3bf 8f6f 	isb	sy
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	623b      	str	r3, [r7, #32]
}
 8006f6e:	bf00      	nop
 8006f70:	bf00      	nop
 8006f72:	e7fd      	b.n	8006f70 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d102      	bne.n	8006f80 <xQueueGenericCreateStatic+0x84>
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <xQueueGenericCreateStatic+0x88>
 8006f80:	2301      	movs	r3, #1
 8006f82:	e000      	b.n	8006f86 <xQueueGenericCreateStatic+0x8a>
 8006f84:	2300      	movs	r3, #0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d10b      	bne.n	8006fa2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	61fb      	str	r3, [r7, #28]
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	e7fd      	b.n	8006f9e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006fa2:	2350      	movs	r3, #80	@ 0x50
 8006fa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b50      	cmp	r3, #80	@ 0x50
 8006faa:	d00b      	beq.n	8006fc4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	61bb      	str	r3, [r7, #24]
}
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	e7fd      	b.n	8006fc0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fc4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00d      	beq.n	8006fec <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fd8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006fdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	687a      	ldr	r2, [r7, #4]
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f000 f840 	bl	800706c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3730      	adds	r7, #48	@ 0x30
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b08a      	sub	sp, #40	@ 0x28
 8006ffa:	af02      	add	r7, sp, #8
 8006ffc:	60f8      	str	r0, [r7, #12]
 8006ffe:	60b9      	str	r1, [r7, #8]
 8007000:	4613      	mov	r3, r2
 8007002:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d10b      	bne.n	8007022 <xQueueGenericCreate+0x2c>
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	613b      	str	r3, [r7, #16]
}
 800701c:	bf00      	nop
 800701e:	bf00      	nop
 8007020:	e7fd      	b.n	800701e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	fb02 f303 	mul.w	r3, r2, r3
 800702a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	3350      	adds	r3, #80	@ 0x50
 8007030:	4618      	mov	r0, r3
 8007032:	f002 fa2b 	bl	800948c <pvPortMalloc>
 8007036:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d011      	beq.n	8007062 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	3350      	adds	r3, #80	@ 0x50
 8007046:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007050:	79fa      	ldrb	r2, [r7, #7]
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	4613      	mov	r3, r2
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	68b9      	ldr	r1, [r7, #8]
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f805 	bl	800706c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007062:	69bb      	ldr	r3, [r7, #24]
	}
 8007064:	4618      	mov	r0, r3
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d103      	bne.n	8007088 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	e002      	b.n	800708e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800709a:	2101      	movs	r1, #1
 800709c:	69b8      	ldr	r0, [r7, #24]
 800709e:	f7ff fec3 	bl	8006e28 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	78fa      	ldrb	r2, [r7, #3]
 80070a6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b08e      	sub	sp, #56	@ 0x38
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	60f8      	str	r0, [r7, #12]
 80070bc:	60b9      	str	r1, [r7, #8]
 80070be:	607a      	str	r2, [r7, #4]
 80070c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80070c2:	2300      	movs	r3, #0
 80070c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80070ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10b      	bne.n	80070e8 <xQueueGenericSend+0x34>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80070e2:	bf00      	nop
 80070e4:	bf00      	nop
 80070e6:	e7fd      	b.n	80070e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d103      	bne.n	80070f6 <xQueueGenericSend+0x42>
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <xQueueGenericSend+0x46>
 80070f6:	2301      	movs	r3, #1
 80070f8:	e000      	b.n	80070fc <xQueueGenericSend+0x48>
 80070fa:	2300      	movs	r3, #0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10b      	bne.n	8007118 <xQueueGenericSend+0x64>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	e7fd      	b.n	8007114 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	2b02      	cmp	r3, #2
 800711c:	d103      	bne.n	8007126 <xQueueGenericSend+0x72>
 800711e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <xQueueGenericSend+0x76>
 8007126:	2301      	movs	r3, #1
 8007128:	e000      	b.n	800712c <xQueueGenericSend+0x78>
 800712a:	2300      	movs	r3, #0
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10b      	bne.n	8007148 <xQueueGenericSend+0x94>
	__asm volatile
 8007130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007134:	f383 8811 	msr	BASEPRI, r3
 8007138:	f3bf 8f6f 	isb	sy
 800713c:	f3bf 8f4f 	dsb	sy
 8007140:	623b      	str	r3, [r7, #32]
}
 8007142:	bf00      	nop
 8007144:	bf00      	nop
 8007146:	e7fd      	b.n	8007144 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007148:	f001 fa50 	bl	80085ec <xTaskGetSchedulerState>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d102      	bne.n	8007158 <xQueueGenericSend+0xa4>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d101      	bne.n	800715c <xQueueGenericSend+0xa8>
 8007158:	2301      	movs	r3, #1
 800715a:	e000      	b.n	800715e <xQueueGenericSend+0xaa>
 800715c:	2300      	movs	r3, #0
 800715e:	2b00      	cmp	r3, #0
 8007160:	d10b      	bne.n	800717a <xQueueGenericSend+0xc6>
	__asm volatile
 8007162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007166:	f383 8811 	msr	BASEPRI, r3
 800716a:	f3bf 8f6f 	isb	sy
 800716e:	f3bf 8f4f 	dsb	sy
 8007172:	61fb      	str	r3, [r7, #28]
}
 8007174:	bf00      	nop
 8007176:	bf00      	nop
 8007178:	e7fd      	b.n	8007176 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800717a:	f002 f865 	bl	8009248 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800717e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007186:	429a      	cmp	r2, r3
 8007188:	d302      	bcc.n	8007190 <xQueueGenericSend+0xdc>
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	2b02      	cmp	r3, #2
 800718e:	d129      	bne.n	80071e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007190:	683a      	ldr	r2, [r7, #0]
 8007192:	68b9      	ldr	r1, [r7, #8]
 8007194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007196:	f000 fa91 	bl	80076bc <prvCopyDataToQueue>
 800719a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800719c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800719e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d010      	beq.n	80071c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80071a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a6:	3324      	adds	r3, #36	@ 0x24
 80071a8:	4618      	mov	r0, r3
 80071aa:	f001 f85f 	bl	800826c <xTaskRemoveFromEventList>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d013      	beq.n	80071dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80071b4:	4b3f      	ldr	r3, [pc, #252]	@ (80072b4 <xQueueGenericSend+0x200>)
 80071b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071ba:	601a      	str	r2, [r3, #0]
 80071bc:	f3bf 8f4f 	dsb	sy
 80071c0:	f3bf 8f6f 	isb	sy
 80071c4:	e00a      	b.n	80071dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80071c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d007      	beq.n	80071dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80071cc:	4b39      	ldr	r3, [pc, #228]	@ (80072b4 <xQueueGenericSend+0x200>)
 80071ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	f3bf 8f4f 	dsb	sy
 80071d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80071dc:	f002 f866 	bl	80092ac <vPortExitCritical>
				return pdPASS;
 80071e0:	2301      	movs	r3, #1
 80071e2:	e063      	b.n	80072ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d103      	bne.n	80071f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80071ea:	f002 f85f 	bl	80092ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	e05c      	b.n	80072ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80071f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80071f8:	f107 0314 	add.w	r3, r7, #20
 80071fc:	4618      	mov	r0, r3
 80071fe:	f001 f899 	bl	8008334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007202:	2301      	movs	r3, #1
 8007204:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007206:	f002 f851 	bl	80092ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800720a:	f000 fe09 	bl	8007e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800720e:	f002 f81b 	bl	8009248 <vPortEnterCritical>
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007218:	b25b      	sxtb	r3, r3
 800721a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800721e:	d103      	bne.n	8007228 <xQueueGenericSend+0x174>
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800722a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800722e:	b25b      	sxtb	r3, r3
 8007230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007234:	d103      	bne.n	800723e <xQueueGenericSend+0x18a>
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	2200      	movs	r2, #0
 800723a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800723e:	f002 f835 	bl	80092ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007242:	1d3a      	adds	r2, r7, #4
 8007244:	f107 0314 	add.w	r3, r7, #20
 8007248:	4611      	mov	r1, r2
 800724a:	4618      	mov	r0, r3
 800724c:	f001 f888 	bl	8008360 <xTaskCheckForTimeOut>
 8007250:	4603      	mov	r3, r0
 8007252:	2b00      	cmp	r3, #0
 8007254:	d124      	bne.n	80072a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007256:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007258:	f000 fb28 	bl	80078ac <prvIsQueueFull>
 800725c:	4603      	mov	r3, r0
 800725e:	2b00      	cmp	r3, #0
 8007260:	d018      	beq.n	8007294 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007264:	3310      	adds	r3, #16
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	4611      	mov	r1, r2
 800726a:	4618      	mov	r0, r3
 800726c:	f000 ffac 	bl	80081c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007270:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007272:	f000 fab3 	bl	80077dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007276:	f000 fde1 	bl	8007e3c <xTaskResumeAll>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	f47f af7c 	bne.w	800717a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007282:	4b0c      	ldr	r3, [pc, #48]	@ (80072b4 <xQueueGenericSend+0x200>)
 8007284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007288:	601a      	str	r2, [r3, #0]
 800728a:	f3bf 8f4f 	dsb	sy
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	e772      	b.n	800717a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007294:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007296:	f000 faa1 	bl	80077dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800729a:	f000 fdcf 	bl	8007e3c <xTaskResumeAll>
 800729e:	e76c      	b.n	800717a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80072a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80072a2:	f000 fa9b 	bl	80077dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80072a6:	f000 fdc9 	bl	8007e3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80072aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3738      	adds	r7, #56	@ 0x38
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	e000ed04 	.word	0xe000ed04

080072b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b090      	sub	sp, #64	@ 0x40
 80072bc:	af00      	add	r7, sp, #0
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	60b9      	str	r1, [r7, #8]
 80072c2:	607a      	str	r2, [r7, #4]
 80072c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80072ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10b      	bne.n	80072e8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80072e2:	bf00      	nop
 80072e4:	bf00      	nop
 80072e6:	e7fd      	b.n	80072e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d103      	bne.n	80072f6 <xQueueGenericSendFromISR+0x3e>
 80072ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d101      	bne.n	80072fa <xQueueGenericSendFromISR+0x42>
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <xQueueGenericSendFromISR+0x44>
 80072fa:	2300      	movs	r3, #0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d10b      	bne.n	8007318 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007304:	f383 8811 	msr	BASEPRI, r3
 8007308:	f3bf 8f6f 	isb	sy
 800730c:	f3bf 8f4f 	dsb	sy
 8007310:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007312:	bf00      	nop
 8007314:	bf00      	nop
 8007316:	e7fd      	b.n	8007314 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	2b02      	cmp	r3, #2
 800731c:	d103      	bne.n	8007326 <xQueueGenericSendFromISR+0x6e>
 800731e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007322:	2b01      	cmp	r3, #1
 8007324:	d101      	bne.n	800732a <xQueueGenericSendFromISR+0x72>
 8007326:	2301      	movs	r3, #1
 8007328:	e000      	b.n	800732c <xQueueGenericSendFromISR+0x74>
 800732a:	2300      	movs	r3, #0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10b      	bne.n	8007348 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	623b      	str	r3, [r7, #32]
}
 8007342:	bf00      	nop
 8007344:	bf00      	nop
 8007346:	e7fd      	b.n	8007344 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007348:	f002 f85e 	bl	8009408 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800734c:	f3ef 8211 	mrs	r2, BASEPRI
 8007350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007354:	f383 8811 	msr	BASEPRI, r3
 8007358:	f3bf 8f6f 	isb	sy
 800735c:	f3bf 8f4f 	dsb	sy
 8007360:	61fa      	str	r2, [r7, #28]
 8007362:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007364:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007366:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800736c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800736e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007370:	429a      	cmp	r2, r3
 8007372:	d302      	bcc.n	800737a <xQueueGenericSendFromISR+0xc2>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d12f      	bne.n	80073da <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800737a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800737c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007380:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007388:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007390:	f000 f994 	bl	80076bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007394:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739c:	d112      	bne.n	80073c4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800739e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d016      	beq.n	80073d4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80073a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a8:	3324      	adds	r3, #36	@ 0x24
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 ff5e 	bl	800826c <xTaskRemoveFromEventList>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00e      	beq.n	80073d4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00b      	beq.n	80073d4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2201      	movs	r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
 80073c2:	e007      	b.n	80073d4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80073c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80073c8:	3301      	adds	r3, #1
 80073ca:	b2db      	uxtb	r3, r3
 80073cc:	b25a      	sxtb	r2, r3
 80073ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80073d4:	2301      	movs	r3, #1
 80073d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80073d8:	e001      	b.n	80073de <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80073da:	2300      	movs	r3, #0
 80073dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80073de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073e0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80073e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80073ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3740      	adds	r7, #64	@ 0x40
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08c      	sub	sp, #48	@ 0x30
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007400:	2300      	movs	r3, #0
 8007402:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10b      	bne.n	8007426 <xQueueReceive+0x32>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	623b      	str	r3, [r7, #32]
}
 8007420:	bf00      	nop
 8007422:	bf00      	nop
 8007424:	e7fd      	b.n	8007422 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d103      	bne.n	8007434 <xQueueReceive+0x40>
 800742c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007430:	2b00      	cmp	r3, #0
 8007432:	d101      	bne.n	8007438 <xQueueReceive+0x44>
 8007434:	2301      	movs	r3, #1
 8007436:	e000      	b.n	800743a <xQueueReceive+0x46>
 8007438:	2300      	movs	r3, #0
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10b      	bne.n	8007456 <xQueueReceive+0x62>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	61fb      	str	r3, [r7, #28]
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	e7fd      	b.n	8007452 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007456:	f001 f8c9 	bl	80085ec <xTaskGetSchedulerState>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d102      	bne.n	8007466 <xQueueReceive+0x72>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <xQueueReceive+0x76>
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <xQueueReceive+0x78>
 800746a:	2300      	movs	r3, #0
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10b      	bne.n	8007488 <xQueueReceive+0x94>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	61bb      	str	r3, [r7, #24]
}
 8007482:	bf00      	nop
 8007484:	bf00      	nop
 8007486:	e7fd      	b.n	8007484 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007488:	f001 fede 	bl	8009248 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800748c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800748e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007490:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007494:	2b00      	cmp	r3, #0
 8007496:	d01f      	beq.n	80074d8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007498:	68b9      	ldr	r1, [r7, #8]
 800749a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800749c:	f000 f978 	bl	8007790 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a2:	1e5a      	subs	r2, r3, #1
 80074a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074a6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00f      	beq.n	80074d0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b2:	3310      	adds	r3, #16
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fed9 	bl	800826c <xTaskRemoveFromEventList>
 80074ba:	4603      	mov	r3, r0
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d007      	beq.n	80074d0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80074c0:	4b3c      	ldr	r3, [pc, #240]	@ (80075b4 <xQueueReceive+0x1c0>)
 80074c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80074d0:	f001 feec 	bl	80092ac <vPortExitCritical>
				return pdPASS;
 80074d4:	2301      	movs	r3, #1
 80074d6:	e069      	b.n	80075ac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d103      	bne.n	80074e6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80074de:	f001 fee5 	bl	80092ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80074e2:	2300      	movs	r3, #0
 80074e4:	e062      	b.n	80075ac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80074e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d106      	bne.n	80074fa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80074ec:	f107 0310 	add.w	r3, r7, #16
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 ff1f 	bl	8008334 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80074f6:	2301      	movs	r3, #1
 80074f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80074fa:	f001 fed7 	bl	80092ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80074fe:	f000 fc8f 	bl	8007e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007502:	f001 fea1 	bl	8009248 <vPortEnterCritical>
 8007506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800750c:	b25b      	sxtb	r3, r3
 800750e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007512:	d103      	bne.n	800751c <xQueueReceive+0x128>
 8007514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800751c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800751e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007522:	b25b      	sxtb	r3, r3
 8007524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007528:	d103      	bne.n	8007532 <xQueueReceive+0x13e>
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007532:	f001 febb 	bl	80092ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007536:	1d3a      	adds	r2, r7, #4
 8007538:	f107 0310 	add.w	r3, r7, #16
 800753c:	4611      	mov	r1, r2
 800753e:	4618      	mov	r0, r3
 8007540:	f000 ff0e 	bl	8008360 <xTaskCheckForTimeOut>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d123      	bne.n	8007592 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800754a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800754c:	f000 f998 	bl	8007880 <prvIsQueueEmpty>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d017      	beq.n	8007586 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007558:	3324      	adds	r3, #36	@ 0x24
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	4611      	mov	r1, r2
 800755e:	4618      	mov	r0, r3
 8007560:	f000 fe32 	bl	80081c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007564:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007566:	f000 f939 	bl	80077dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800756a:	f000 fc67 	bl	8007e3c <xTaskResumeAll>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d189      	bne.n	8007488 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007574:	4b0f      	ldr	r3, [pc, #60]	@ (80075b4 <xQueueReceive+0x1c0>)
 8007576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800757a:	601a      	str	r2, [r3, #0]
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	e780      	b.n	8007488 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007588:	f000 f928 	bl	80077dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800758c:	f000 fc56 	bl	8007e3c <xTaskResumeAll>
 8007590:	e77a      	b.n	8007488 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007594:	f000 f922 	bl	80077dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007598:	f000 fc50 	bl	8007e3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800759c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800759e:	f000 f96f 	bl	8007880 <prvIsQueueEmpty>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	f43f af6f 	beq.w	8007488 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80075aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3730      	adds	r7, #48	@ 0x30
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	e000ed04 	.word	0xe000ed04

080075b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08e      	sub	sp, #56	@ 0x38
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80075c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10b      	bne.n	80075e6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80075ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d2:	f383 8811 	msr	BASEPRI, r3
 80075d6:	f3bf 8f6f 	isb	sy
 80075da:	f3bf 8f4f 	dsb	sy
 80075de:	623b      	str	r3, [r7, #32]
}
 80075e0:	bf00      	nop
 80075e2:	bf00      	nop
 80075e4:	e7fd      	b.n	80075e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d103      	bne.n	80075f4 <xQueueReceiveFromISR+0x3c>
 80075ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <xQueueReceiveFromISR+0x40>
 80075f4:	2301      	movs	r3, #1
 80075f6:	e000      	b.n	80075fa <xQueueReceiveFromISR+0x42>
 80075f8:	2300      	movs	r3, #0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d10b      	bne.n	8007616 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	61fb      	str	r3, [r7, #28]
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007616:	f001 fef7 	bl	8009408 <vPortValidateInterruptPriority>
	__asm volatile
 800761a:	f3ef 8211 	mrs	r2, BASEPRI
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	61ba      	str	r2, [r7, #24]
 8007630:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007632:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007634:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800763a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800763c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800763e:	2b00      	cmp	r3, #0
 8007640:	d02f      	beq.n	80076a2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800764c:	68b9      	ldr	r1, [r7, #8]
 800764e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007650:	f000 f89e 	bl	8007790 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007656:	1e5a      	subs	r2, r3, #1
 8007658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800765c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007660:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007664:	d112      	bne.n	800768c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007668:	691b      	ldr	r3, [r3, #16]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d016      	beq.n	800769c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	3310      	adds	r3, #16
 8007672:	4618      	mov	r0, r3
 8007674:	f000 fdfa 	bl	800826c <xTaskRemoveFromEventList>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d00e      	beq.n	800769c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00b      	beq.n	800769c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2201      	movs	r2, #1
 8007688:	601a      	str	r2, [r3, #0]
 800768a:	e007      	b.n	800769c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800768c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007690:	3301      	adds	r3, #1
 8007692:	b2db      	uxtb	r3, r3
 8007694:	b25a      	sxtb	r2, r3
 8007696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800769c:	2301      	movs	r3, #1
 800769e:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a0:	e001      	b.n	80076a6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f383 8811 	msr	BASEPRI, r3
}
 80076b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80076b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3738      	adds	r7, #56	@ 0x38
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80076c8:	2300      	movs	r3, #0
 80076ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10d      	bne.n	80076f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d14d      	bne.n	800777e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 ff9e 	bl	8008628 <xTaskPriorityDisinherit>
 80076ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	609a      	str	r2, [r3, #8]
 80076f4:	e043      	b.n	800777e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d119      	bne.n	8007730 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6858      	ldr	r0, [r3, #4]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007704:	461a      	mov	r2, r3
 8007706:	68b9      	ldr	r1, [r7, #8]
 8007708:	f002 f8da 	bl	80098c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	685a      	ldr	r2, [r3, #4]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007714:	441a      	add	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	685a      	ldr	r2, [r3, #4]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	689b      	ldr	r3, [r3, #8]
 8007722:	429a      	cmp	r2, r3
 8007724:	d32b      	bcc.n	800777e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	605a      	str	r2, [r3, #4]
 800772e:	e026      	b.n	800777e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	68d8      	ldr	r0, [r3, #12]
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007738:	461a      	mov	r2, r3
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	f002 f8c0 	bl	80098c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007748:	425b      	negs	r3, r3
 800774a:	441a      	add	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	68da      	ldr	r2, [r3, #12]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	429a      	cmp	r2, r3
 800775a:	d207      	bcs.n	800776c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007764:	425b      	negs	r3, r3
 8007766:	441a      	add	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d105      	bne.n	800777e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007772:	693b      	ldr	r3, [r7, #16]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	3b01      	subs	r3, #1
 800777c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	1c5a      	adds	r2, r3, #1
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007786:	697b      	ldr	r3, [r7, #20]
}
 8007788:	4618      	mov	r0, r3
 800778a:	3718      	adds	r7, #24
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d018      	beq.n	80077d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	68da      	ldr	r2, [r3, #12]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077aa:	441a      	add	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68da      	ldr	r2, [r3, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d303      	bcc.n	80077c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	68d9      	ldr	r1, [r3, #12]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077cc:	461a      	mov	r2, r3
 80077ce:	6838      	ldr	r0, [r7, #0]
 80077d0:	f002 f876 	bl	80098c0 <memcpy>
	}
}
 80077d4:	bf00      	nop
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80077e4:	f001 fd30 	bl	8009248 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80077f0:	e011      	b.n	8007816 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d012      	beq.n	8007820 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	3324      	adds	r3, #36	@ 0x24
 80077fe:	4618      	mov	r0, r3
 8007800:	f000 fd34 	bl	800826c <xTaskRemoveFromEventList>
 8007804:	4603      	mov	r3, r0
 8007806:	2b00      	cmp	r3, #0
 8007808:	d001      	beq.n	800780e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800780a:	f000 fe0d 	bl	8008428 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	3b01      	subs	r3, #1
 8007812:	b2db      	uxtb	r3, r3
 8007814:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800781a:	2b00      	cmp	r3, #0
 800781c:	dce9      	bgt.n	80077f2 <prvUnlockQueue+0x16>
 800781e:	e000      	b.n	8007822 <prvUnlockQueue+0x46>
					break;
 8007820:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	22ff      	movs	r2, #255	@ 0xff
 8007826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800782a:	f001 fd3f 	bl	80092ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800782e:	f001 fd0b 	bl	8009248 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007838:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800783a:	e011      	b.n	8007860 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	691b      	ldr	r3, [r3, #16]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d012      	beq.n	800786a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	3310      	adds	r3, #16
 8007848:	4618      	mov	r0, r3
 800784a:	f000 fd0f 	bl	800826c <xTaskRemoveFromEventList>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007854:	f000 fde8 	bl	8008428 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007858:	7bbb      	ldrb	r3, [r7, #14]
 800785a:	3b01      	subs	r3, #1
 800785c:	b2db      	uxtb	r3, r3
 800785e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007864:	2b00      	cmp	r3, #0
 8007866:	dce9      	bgt.n	800783c <prvUnlockQueue+0x60>
 8007868:	e000      	b.n	800786c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800786a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	22ff      	movs	r2, #255	@ 0xff
 8007870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007874:	f001 fd1a 	bl	80092ac <vPortExitCritical>
}
 8007878:	bf00      	nop
 800787a:	3710      	adds	r7, #16
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b084      	sub	sp, #16
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007888:	f001 fcde 	bl	8009248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007890:	2b00      	cmp	r3, #0
 8007892:	d102      	bne.n	800789a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007894:	2301      	movs	r3, #1
 8007896:	60fb      	str	r3, [r7, #12]
 8007898:	e001      	b.n	800789e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800789e:	f001 fd05 	bl	80092ac <vPortExitCritical>

	return xReturn;
 80078a2:	68fb      	ldr	r3, [r7, #12]
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80078b4:	f001 fcc8 	bl	8009248 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d102      	bne.n	80078ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80078c4:	2301      	movs	r3, #1
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	e001      	b.n	80078ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80078ca:	2300      	movs	r3, #0
 80078cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80078ce:	f001 fced 	bl	80092ac <vPortExitCritical>

	return xReturn;
 80078d2:	68fb      	ldr	r3, [r7, #12]
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80078dc:	b480      	push	{r7}
 80078de:	b085      	sub	sp, #20
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80078e6:	2300      	movs	r3, #0
 80078e8:	60fb      	str	r3, [r7, #12]
 80078ea:	e014      	b.n	8007916 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80078ec:	4a0f      	ldr	r2, [pc, #60]	@ (800792c <vQueueAddToRegistry+0x50>)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10b      	bne.n	8007910 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80078f8:	490c      	ldr	r1, [pc, #48]	@ (800792c <vQueueAddToRegistry+0x50>)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007902:	4a0a      	ldr	r2, [pc, #40]	@ (800792c <vQueueAddToRegistry+0x50>)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	00db      	lsls	r3, r3, #3
 8007908:	4413      	add	r3, r2
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800790e:	e006      	b.n	800791e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	3301      	adds	r3, #1
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2b07      	cmp	r3, #7
 800791a:	d9e7      	bls.n	80078ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	3714      	adds	r7, #20
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop
 800792c:	20000ad0 	.word	0x20000ad0

08007930 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007930:	b580      	push	{r7, lr}
 8007932:	b086      	sub	sp, #24
 8007934:	af00      	add	r7, sp, #0
 8007936:	60f8      	str	r0, [r7, #12]
 8007938:	60b9      	str	r1, [r7, #8]
 800793a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007940:	f001 fc82 	bl	8009248 <vPortEnterCritical>
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800794a:	b25b      	sxtb	r3, r3
 800794c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007950:	d103      	bne.n	800795a <vQueueWaitForMessageRestricted+0x2a>
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007960:	b25b      	sxtb	r3, r3
 8007962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007966:	d103      	bne.n	8007970 <vQueueWaitForMessageRestricted+0x40>
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007970:	f001 fc9c 	bl	80092ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007978:	2b00      	cmp	r3, #0
 800797a:	d106      	bne.n	800798a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	3324      	adds	r3, #36	@ 0x24
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	4618      	mov	r0, r3
 8007986:	f000 fc45 	bl	8008214 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800798a:	6978      	ldr	r0, [r7, #20]
 800798c:	f7ff ff26 	bl	80077dc <prvUnlockQueue>
	}
 8007990:	bf00      	nop
 8007992:	3718      	adds	r7, #24
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007998:	b580      	push	{r7, lr}
 800799a:	b08e      	sub	sp, #56	@ 0x38
 800799c:	af04      	add	r7, sp, #16
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	607a      	str	r2, [r7, #4]
 80079a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80079a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10b      	bne.n	80079c4 <xTaskCreateStatic+0x2c>
	__asm volatile
 80079ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b0:	f383 8811 	msr	BASEPRI, r3
 80079b4:	f3bf 8f6f 	isb	sy
 80079b8:	f3bf 8f4f 	dsb	sy
 80079bc:	623b      	str	r3, [r7, #32]
}
 80079be:	bf00      	nop
 80079c0:	bf00      	nop
 80079c2:	e7fd      	b.n	80079c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80079c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10b      	bne.n	80079e2 <xTaskCreateStatic+0x4a>
	__asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	61fb      	str	r3, [r7, #28]
}
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	e7fd      	b.n	80079de <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80079e2:	235c      	movs	r3, #92	@ 0x5c
 80079e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	2b5c      	cmp	r3, #92	@ 0x5c
 80079ea:	d00b      	beq.n	8007a04 <xTaskCreateStatic+0x6c>
	__asm volatile
 80079ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f0:	f383 8811 	msr	BASEPRI, r3
 80079f4:	f3bf 8f6f 	isb	sy
 80079f8:	f3bf 8f4f 	dsb	sy
 80079fc:	61bb      	str	r3, [r7, #24]
}
 80079fe:	bf00      	nop
 8007a00:	bf00      	nop
 8007a02:	e7fd      	b.n	8007a00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007a04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01e      	beq.n	8007a4a <xTaskCreateStatic+0xb2>
 8007a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d01b      	beq.n	8007a4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007a1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1e:	2202      	movs	r2, #2
 8007a20:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007a24:	2300      	movs	r3, #0
 8007a26:	9303      	str	r3, [sp, #12]
 8007a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2a:	9302      	str	r3, [sp, #8]
 8007a2c:	f107 0314 	add.w	r3, r7, #20
 8007a30:	9301      	str	r3, [sp, #4]
 8007a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	68b9      	ldr	r1, [r7, #8]
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f850 	bl	8007ae2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007a42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a44:	f000 f8de 	bl	8007c04 <prvAddNewTaskToReadyList>
 8007a48:	e001      	b.n	8007a4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007a4e:	697b      	ldr	r3, [r7, #20]
	}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3728      	adds	r7, #40	@ 0x28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08c      	sub	sp, #48	@ 0x30
 8007a5c:	af04      	add	r7, sp, #16
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	4613      	mov	r3, r2
 8007a66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007a68:	88fb      	ldrh	r3, [r7, #6]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f001 fd0d 	bl	800948c <pvPortMalloc>
 8007a72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007a74:	697b      	ldr	r3, [r7, #20]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00e      	beq.n	8007a98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007a7a:	205c      	movs	r0, #92	@ 0x5c
 8007a7c:	f001 fd06 	bl	800948c <pvPortMalloc>
 8007a80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007a82:	69fb      	ldr	r3, [r7, #28]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d003      	beq.n	8007a90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	697a      	ldr	r2, [r7, #20]
 8007a8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a8e:	e005      	b.n	8007a9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007a90:	6978      	ldr	r0, [r7, #20]
 8007a92:	f001 fdc9 	bl	8009628 <vPortFree>
 8007a96:	e001      	b.n	8007a9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d017      	beq.n	8007ad2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007aaa:	88fa      	ldrh	r2, [r7, #6]
 8007aac:	2300      	movs	r3, #0
 8007aae:	9303      	str	r3, [sp, #12]
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	9302      	str	r3, [sp, #8]
 8007ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	68b9      	ldr	r1, [r7, #8]
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f80e 	bl	8007ae2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ac6:	69f8      	ldr	r0, [r7, #28]
 8007ac8:	f000 f89c 	bl	8007c04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007acc:	2301      	movs	r3, #1
 8007ace:	61bb      	str	r3, [r7, #24]
 8007ad0:	e002      	b.n	8007ad8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ad8:	69bb      	ldr	r3, [r7, #24]
	}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3720      	adds	r7, #32
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}

08007ae2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b088      	sub	sp, #32
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	60f8      	str	r0, [r7, #12]
 8007aea:	60b9      	str	r1, [r7, #8]
 8007aec:	607a      	str	r2, [r7, #4]
 8007aee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	461a      	mov	r2, r3
 8007afa:	21a5      	movs	r1, #165	@ 0xa5
 8007afc:	f001 feb4 	bl	8009868 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	f023 0307 	bic.w	r3, r3, #7
 8007b18:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	f003 0307 	and.w	r3, r3, #7
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00b      	beq.n	8007b3c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b28:	f383 8811 	msr	BASEPRI, r3
 8007b2c:	f3bf 8f6f 	isb	sy
 8007b30:	f3bf 8f4f 	dsb	sy
 8007b34:	617b      	str	r3, [r7, #20]
}
 8007b36:	bf00      	nop
 8007b38:	bf00      	nop
 8007b3a:	e7fd      	b.n	8007b38 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d01f      	beq.n	8007b82 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b42:	2300      	movs	r3, #0
 8007b44:	61fb      	str	r3, [r7, #28]
 8007b46:	e012      	b.n	8007b6e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	69fb      	ldr	r3, [r7, #28]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	7819      	ldrb	r1, [r3, #0]
 8007b50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	3334      	adds	r3, #52	@ 0x34
 8007b58:	460a      	mov	r2, r1
 8007b5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007b5c:	68ba      	ldr	r2, [r7, #8]
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	4413      	add	r3, r2
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d006      	beq.n	8007b76 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	61fb      	str	r3, [r7, #28]
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	2b0f      	cmp	r3, #15
 8007b72:	d9e9      	bls.n	8007b48 <prvInitialiseNewTask+0x66>
 8007b74:	e000      	b.n	8007b78 <prvInitialiseNewTask+0x96>
			{
				break;
 8007b76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007b80:	e003      	b.n	8007b8a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8c:	2b37      	cmp	r3, #55	@ 0x37
 8007b8e:	d901      	bls.n	8007b94 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b90:	2337      	movs	r3, #55	@ 0x37
 8007b92:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b98:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b9e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba8:	3304      	adds	r3, #4
 8007baa:	4618      	mov	r0, r3
 8007bac:	f7ff f8a8 	bl	8006d00 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bb2:	3318      	adds	r3, #24
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff f8a3 	bl	8006d00 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007bde:	683a      	ldr	r2, [r7, #0]
 8007be0:	68f9      	ldr	r1, [r7, #12]
 8007be2:	69b8      	ldr	r0, [r7, #24]
 8007be4:	f001 f9fe 	bl	8008fe4 <pxPortInitialiseStack>
 8007be8:	4602      	mov	r2, r0
 8007bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d002      	beq.n	8007bfa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bfa:	bf00      	nop
 8007bfc:	3720      	adds	r7, #32
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
	...

08007c04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007c0c:	f001 fb1c 	bl	8009248 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007c10:	4b2d      	ldr	r3, [pc, #180]	@ (8007cc8 <prvAddNewTaskToReadyList+0xc4>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3301      	adds	r3, #1
 8007c16:	4a2c      	ldr	r2, [pc, #176]	@ (8007cc8 <prvAddNewTaskToReadyList+0xc4>)
 8007c18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8007ccc <prvAddNewTaskToReadyList+0xc8>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d109      	bne.n	8007c36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007c22:	4a2a      	ldr	r2, [pc, #168]	@ (8007ccc <prvAddNewTaskToReadyList+0xc8>)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007c28:	4b27      	ldr	r3, [pc, #156]	@ (8007cc8 <prvAddNewTaskToReadyList+0xc4>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d110      	bne.n	8007c52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007c30:	f000 fc1e 	bl	8008470 <prvInitialiseTaskLists>
 8007c34:	e00d      	b.n	8007c52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007c36:	4b26      	ldr	r3, [pc, #152]	@ (8007cd0 <prvAddNewTaskToReadyList+0xcc>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d109      	bne.n	8007c52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007c3e:	4b23      	ldr	r3, [pc, #140]	@ (8007ccc <prvAddNewTaskToReadyList+0xc8>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d802      	bhi.n	8007c52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007c4c:	4a1f      	ldr	r2, [pc, #124]	@ (8007ccc <prvAddNewTaskToReadyList+0xc8>)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007c52:	4b20      	ldr	r3, [pc, #128]	@ (8007cd4 <prvAddNewTaskToReadyList+0xd0>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	3301      	adds	r3, #1
 8007c58:	4a1e      	ldr	r2, [pc, #120]	@ (8007cd4 <prvAddNewTaskToReadyList+0xd0>)
 8007c5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007c5c:	4b1d      	ldr	r3, [pc, #116]	@ (8007cd4 <prvAddNewTaskToReadyList+0xd0>)
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c68:	4b1b      	ldr	r3, [pc, #108]	@ (8007cd8 <prvAddNewTaskToReadyList+0xd4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d903      	bls.n	8007c78 <prvAddNewTaskToReadyList+0x74>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c74:	4a18      	ldr	r2, [pc, #96]	@ (8007cd8 <prvAddNewTaskToReadyList+0xd4>)
 8007c76:	6013      	str	r3, [r2, #0]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4a15      	ldr	r2, [pc, #84]	@ (8007cdc <prvAddNewTaskToReadyList+0xd8>)
 8007c86:	441a      	add	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3304      	adds	r3, #4
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	4610      	mov	r0, r2
 8007c90:	f7ff f843 	bl	8006d1a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007c94:	f001 fb0a 	bl	80092ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007c98:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd0 <prvAddNewTaskToReadyList+0xcc>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d00e      	beq.n	8007cbe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <prvAddNewTaskToReadyList+0xc8>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d207      	bcs.n	8007cbe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007cae:	4b0c      	ldr	r3, [pc, #48]	@ (8007ce0 <prvAddNewTaskToReadyList+0xdc>)
 8007cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cb4:	601a      	str	r2, [r3, #0]
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007cbe:	bf00      	nop
 8007cc0:	3708      	adds	r7, #8
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
 8007cc6:	bf00      	nop
 8007cc8:	20000fe4 	.word	0x20000fe4
 8007ccc:	20000b10 	.word	0x20000b10
 8007cd0:	20000ff0 	.word	0x20000ff0
 8007cd4:	20001000 	.word	0x20001000
 8007cd8:	20000fec 	.word	0x20000fec
 8007cdc:	20000b14 	.word	0x20000b14
 8007ce0:	e000ed04 	.word	0xe000ed04

08007ce4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d018      	beq.n	8007d28 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007cf6:	4b14      	ldr	r3, [pc, #80]	@ (8007d48 <vTaskDelay+0x64>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00b      	beq.n	8007d16 <vTaskDelay+0x32>
	__asm volatile
 8007cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d02:	f383 8811 	msr	BASEPRI, r3
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	f3bf 8f4f 	dsb	sy
 8007d0e:	60bb      	str	r3, [r7, #8]
}
 8007d10:	bf00      	nop
 8007d12:	bf00      	nop
 8007d14:	e7fd      	b.n	8007d12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007d16:	f000 f883 	bl	8007e20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d1a:	2100      	movs	r1, #0
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fcf3 	bl	8008708 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007d22:	f000 f88b 	bl	8007e3c <xTaskResumeAll>
 8007d26:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d107      	bne.n	8007d3e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007d2e:	4b07      	ldr	r3, [pc, #28]	@ (8007d4c <vTaskDelay+0x68>)
 8007d30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d34:	601a      	str	r2, [r3, #0]
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007d3e:	bf00      	nop
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	2000100c 	.word	0x2000100c
 8007d4c:	e000ed04 	.word	0xe000ed04

08007d50 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08a      	sub	sp, #40	@ 0x28
 8007d54:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007d56:	2300      	movs	r3, #0
 8007d58:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007d5e:	463a      	mov	r2, r7
 8007d60:	1d39      	adds	r1, r7, #4
 8007d62:	f107 0308 	add.w	r3, r7, #8
 8007d66:	4618      	mov	r0, r3
 8007d68:	f7fe ff76 	bl	8006c58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	68ba      	ldr	r2, [r7, #8]
 8007d72:	9202      	str	r2, [sp, #8]
 8007d74:	9301      	str	r3, [sp, #4]
 8007d76:	2300      	movs	r3, #0
 8007d78:	9300      	str	r3, [sp, #0]
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	460a      	mov	r2, r1
 8007d7e:	4922      	ldr	r1, [pc, #136]	@ (8007e08 <vTaskStartScheduler+0xb8>)
 8007d80:	4822      	ldr	r0, [pc, #136]	@ (8007e0c <vTaskStartScheduler+0xbc>)
 8007d82:	f7ff fe09 	bl	8007998 <xTaskCreateStatic>
 8007d86:	4603      	mov	r3, r0
 8007d88:	4a21      	ldr	r2, [pc, #132]	@ (8007e10 <vTaskStartScheduler+0xc0>)
 8007d8a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007d8c:	4b20      	ldr	r3, [pc, #128]	@ (8007e10 <vTaskStartScheduler+0xc0>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007d94:	2301      	movs	r3, #1
 8007d96:	617b      	str	r3, [r7, #20]
 8007d98:	e001      	b.n	8007d9e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d102      	bne.n	8007daa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007da4:	f000 fd04 	bl	80087b0 <xTimerCreateTimerTask>
 8007da8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d116      	bne.n	8007dde <vTaskStartScheduler+0x8e>
	__asm volatile
 8007db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db4:	f383 8811 	msr	BASEPRI, r3
 8007db8:	f3bf 8f6f 	isb	sy
 8007dbc:	f3bf 8f4f 	dsb	sy
 8007dc0:	613b      	str	r3, [r7, #16]
}
 8007dc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007dc4:	4b13      	ldr	r3, [pc, #76]	@ (8007e14 <vTaskStartScheduler+0xc4>)
 8007dc6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007dcc:	4b12      	ldr	r3, [pc, #72]	@ (8007e18 <vTaskStartScheduler+0xc8>)
 8007dce:	2201      	movs	r2, #1
 8007dd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007dd2:	4b12      	ldr	r3, [pc, #72]	@ (8007e1c <vTaskStartScheduler+0xcc>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007dd8:	f001 f992 	bl	8009100 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007ddc:	e00f      	b.n	8007dfe <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de4:	d10b      	bne.n	8007dfe <vTaskStartScheduler+0xae>
	__asm volatile
 8007de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dea:	f383 8811 	msr	BASEPRI, r3
 8007dee:	f3bf 8f6f 	isb	sy
 8007df2:	f3bf 8f4f 	dsb	sy
 8007df6:	60fb      	str	r3, [r7, #12]
}
 8007df8:	bf00      	nop
 8007dfa:	bf00      	nop
 8007dfc:	e7fd      	b.n	8007dfa <vTaskStartScheduler+0xaa>
}
 8007dfe:	bf00      	nop
 8007e00:	3718      	adds	r7, #24
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
 8007e06:	bf00      	nop
 8007e08:	080099cc 	.word	0x080099cc
 8007e0c:	08008441 	.word	0x08008441
 8007e10:	20001008 	.word	0x20001008
 8007e14:	20001004 	.word	0x20001004
 8007e18:	20000ff0 	.word	0x20000ff0
 8007e1c:	20000fe8 	.word	0x20000fe8

08007e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e20:	b480      	push	{r7}
 8007e22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007e24:	4b04      	ldr	r3, [pc, #16]	@ (8007e38 <vTaskSuspendAll+0x18>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	3301      	adds	r3, #1
 8007e2a:	4a03      	ldr	r2, [pc, #12]	@ (8007e38 <vTaskSuspendAll+0x18>)
 8007e2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007e2e:	bf00      	nop
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr
 8007e38:	2000100c 	.word	0x2000100c

08007e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007e46:	2300      	movs	r3, #0
 8007e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007e4a:	4b42      	ldr	r3, [pc, #264]	@ (8007f54 <xTaskResumeAll+0x118>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d10b      	bne.n	8007e6a <xTaskResumeAll+0x2e>
	__asm volatile
 8007e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e56:	f383 8811 	msr	BASEPRI, r3
 8007e5a:	f3bf 8f6f 	isb	sy
 8007e5e:	f3bf 8f4f 	dsb	sy
 8007e62:	603b      	str	r3, [r7, #0]
}
 8007e64:	bf00      	nop
 8007e66:	bf00      	nop
 8007e68:	e7fd      	b.n	8007e66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007e6a:	f001 f9ed 	bl	8009248 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007e6e:	4b39      	ldr	r3, [pc, #228]	@ (8007f54 <xTaskResumeAll+0x118>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	3b01      	subs	r3, #1
 8007e74:	4a37      	ldr	r2, [pc, #220]	@ (8007f54 <xTaskResumeAll+0x118>)
 8007e76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e78:	4b36      	ldr	r3, [pc, #216]	@ (8007f54 <xTaskResumeAll+0x118>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d162      	bne.n	8007f46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e80:	4b35      	ldr	r3, [pc, #212]	@ (8007f58 <xTaskResumeAll+0x11c>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d05e      	beq.n	8007f46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e88:	e02f      	b.n	8007eea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e8a:	4b34      	ldr	r3, [pc, #208]	@ (8007f5c <xTaskResumeAll+0x120>)
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3318      	adds	r3, #24
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7fe ff9c 	bl	8006dd4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3304      	adds	r3, #4
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe ff97 	bl	8006dd4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8007f60 <xTaskResumeAll+0x124>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d903      	bls.n	8007eba <xTaskResumeAll+0x7e>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8007f60 <xTaskResumeAll+0x124>)
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	009b      	lsls	r3, r3, #2
 8007ec2:	4413      	add	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4a27      	ldr	r2, [pc, #156]	@ (8007f64 <xTaskResumeAll+0x128>)
 8007ec8:	441a      	add	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	f7fe ff22 	bl	8006d1a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eda:	4b23      	ldr	r3, [pc, #140]	@ (8007f68 <xTaskResumeAll+0x12c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d302      	bcc.n	8007eea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007ee4:	4b21      	ldr	r3, [pc, #132]	@ (8007f6c <xTaskResumeAll+0x130>)
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007eea:	4b1c      	ldr	r3, [pc, #112]	@ (8007f5c <xTaskResumeAll+0x120>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d1cb      	bne.n	8007e8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007ef8:	f000 fb58 	bl	80085ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007efc:	4b1c      	ldr	r3, [pc, #112]	@ (8007f70 <xTaskResumeAll+0x134>)
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d010      	beq.n	8007f2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007f08:	f000 f846 	bl	8007f98 <xTaskIncrementTick>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d002      	beq.n	8007f18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007f12:	4b16      	ldr	r3, [pc, #88]	@ (8007f6c <xTaskResumeAll+0x130>)
 8007f14:	2201      	movs	r2, #1
 8007f16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d1f1      	bne.n	8007f08 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007f24:	4b12      	ldr	r3, [pc, #72]	@ (8007f70 <xTaskResumeAll+0x134>)
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007f2a:	4b10      	ldr	r3, [pc, #64]	@ (8007f6c <xTaskResumeAll+0x130>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d009      	beq.n	8007f46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007f36:	4b0f      	ldr	r3, [pc, #60]	@ (8007f74 <xTaskResumeAll+0x138>)
 8007f38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	f3bf 8f4f 	dsb	sy
 8007f42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f46:	f001 f9b1 	bl	80092ac <vPortExitCritical>

	return xAlreadyYielded;
 8007f4a:	68bb      	ldr	r3, [r7, #8]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	2000100c 	.word	0x2000100c
 8007f58:	20000fe4 	.word	0x20000fe4
 8007f5c:	20000fa4 	.word	0x20000fa4
 8007f60:	20000fec 	.word	0x20000fec
 8007f64:	20000b14 	.word	0x20000b14
 8007f68:	20000b10 	.word	0x20000b10
 8007f6c:	20000ff8 	.word	0x20000ff8
 8007f70:	20000ff4 	.word	0x20000ff4
 8007f74:	e000ed04 	.word	0xe000ed04

08007f78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007f7e:	4b05      	ldr	r3, [pc, #20]	@ (8007f94 <xTaskGetTickCount+0x1c>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007f84:	687b      	ldr	r3, [r7, #4]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	20000fe8 	.word	0x20000fe8

08007f98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b086      	sub	sp, #24
 8007f9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80080e0 <xTaskIncrementTick+0x148>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f040 8090 	bne.w	80080cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007fac:	4b4d      	ldr	r3, [pc, #308]	@ (80080e4 <xTaskIncrementTick+0x14c>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3301      	adds	r3, #1
 8007fb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80080e4 <xTaskIncrementTick+0x14c>)
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007fba:	693b      	ldr	r3, [r7, #16]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d121      	bne.n	8008004 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007fc0:	4b49      	ldr	r3, [pc, #292]	@ (80080e8 <xTaskIncrementTick+0x150>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00b      	beq.n	8007fe2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	603b      	str	r3, [r7, #0]
}
 8007fdc:	bf00      	nop
 8007fde:	bf00      	nop
 8007fe0:	e7fd      	b.n	8007fde <xTaskIncrementTick+0x46>
 8007fe2:	4b41      	ldr	r3, [pc, #260]	@ (80080e8 <xTaskIncrementTick+0x150>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	60fb      	str	r3, [r7, #12]
 8007fe8:	4b40      	ldr	r3, [pc, #256]	@ (80080ec <xTaskIncrementTick+0x154>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a3e      	ldr	r2, [pc, #248]	@ (80080e8 <xTaskIncrementTick+0x150>)
 8007fee:	6013      	str	r3, [r2, #0]
 8007ff0:	4a3e      	ldr	r2, [pc, #248]	@ (80080ec <xTaskIncrementTick+0x154>)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6013      	str	r3, [r2, #0]
 8007ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80080f0 <xTaskIncrementTick+0x158>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80080f0 <xTaskIncrementTick+0x158>)
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	f000 fad4 	bl	80085ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008004:	4b3b      	ldr	r3, [pc, #236]	@ (80080f4 <xTaskIncrementTick+0x15c>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	429a      	cmp	r2, r3
 800800c:	d349      	bcc.n	80080a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800800e:	4b36      	ldr	r3, [pc, #216]	@ (80080e8 <xTaskIncrementTick+0x150>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d104      	bne.n	8008022 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008018:	4b36      	ldr	r3, [pc, #216]	@ (80080f4 <xTaskIncrementTick+0x15c>)
 800801a:	f04f 32ff 	mov.w	r2, #4294967295
 800801e:	601a      	str	r2, [r3, #0]
					break;
 8008020:	e03f      	b.n	80080a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008022:	4b31      	ldr	r3, [pc, #196]	@ (80080e8 <xTaskIncrementTick+0x150>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	685b      	ldr	r3, [r3, #4]
 8008030:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	429a      	cmp	r2, r3
 8008038:	d203      	bcs.n	8008042 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800803a:	4a2e      	ldr	r2, [pc, #184]	@ (80080f4 <xTaskIncrementTick+0x15c>)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008040:	e02f      	b.n	80080a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	3304      	adds	r3, #4
 8008046:	4618      	mov	r0, r3
 8008048:	f7fe fec4 	bl	8006dd4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008050:	2b00      	cmp	r3, #0
 8008052:	d004      	beq.n	800805e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	3318      	adds	r3, #24
 8008058:	4618      	mov	r0, r3
 800805a:	f7fe febb 	bl	8006dd4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008062:	4b25      	ldr	r3, [pc, #148]	@ (80080f8 <xTaskIncrementTick+0x160>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	429a      	cmp	r2, r3
 8008068:	d903      	bls.n	8008072 <xTaskIncrementTick+0xda>
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806e:	4a22      	ldr	r2, [pc, #136]	@ (80080f8 <xTaskIncrementTick+0x160>)
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008076:	4613      	mov	r3, r2
 8008078:	009b      	lsls	r3, r3, #2
 800807a:	4413      	add	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4a1f      	ldr	r2, [pc, #124]	@ (80080fc <xTaskIncrementTick+0x164>)
 8008080:	441a      	add	r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	3304      	adds	r3, #4
 8008086:	4619      	mov	r1, r3
 8008088:	4610      	mov	r0, r2
 800808a:	f7fe fe46 	bl	8006d1a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008092:	4b1b      	ldr	r3, [pc, #108]	@ (8008100 <xTaskIncrementTick+0x168>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008098:	429a      	cmp	r2, r3
 800809a:	d3b8      	bcc.n	800800e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800809c:	2301      	movs	r3, #1
 800809e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080a0:	e7b5      	b.n	800800e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80080a2:	4b17      	ldr	r3, [pc, #92]	@ (8008100 <xTaskIncrementTick+0x168>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a8:	4914      	ldr	r1, [pc, #80]	@ (80080fc <xTaskIncrementTick+0x164>)
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	440b      	add	r3, r1
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2b01      	cmp	r3, #1
 80080b8:	d901      	bls.n	80080be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80080ba:	2301      	movs	r3, #1
 80080bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80080be:	4b11      	ldr	r3, [pc, #68]	@ (8008104 <xTaskIncrementTick+0x16c>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d007      	beq.n	80080d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80080c6:	2301      	movs	r3, #1
 80080c8:	617b      	str	r3, [r7, #20]
 80080ca:	e004      	b.n	80080d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80080cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008108 <xTaskIncrementTick+0x170>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	3301      	adds	r3, #1
 80080d2:	4a0d      	ldr	r2, [pc, #52]	@ (8008108 <xTaskIncrementTick+0x170>)
 80080d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80080d6:	697b      	ldr	r3, [r7, #20]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3718      	adds	r7, #24
 80080dc:	46bd      	mov	sp, r7
 80080de:	bd80      	pop	{r7, pc}
 80080e0:	2000100c 	.word	0x2000100c
 80080e4:	20000fe8 	.word	0x20000fe8
 80080e8:	20000f9c 	.word	0x20000f9c
 80080ec:	20000fa0 	.word	0x20000fa0
 80080f0:	20000ffc 	.word	0x20000ffc
 80080f4:	20001004 	.word	0x20001004
 80080f8:	20000fec 	.word	0x20000fec
 80080fc:	20000b14 	.word	0x20000b14
 8008100:	20000b10 	.word	0x20000b10
 8008104:	20000ff8 	.word	0x20000ff8
 8008108:	20000ff4 	.word	0x20000ff4

0800810c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800810c:	b480      	push	{r7}
 800810e:	b085      	sub	sp, #20
 8008110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008112:	4b28      	ldr	r3, [pc, #160]	@ (80081b4 <vTaskSwitchContext+0xa8>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800811a:	4b27      	ldr	r3, [pc, #156]	@ (80081b8 <vTaskSwitchContext+0xac>)
 800811c:	2201      	movs	r2, #1
 800811e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008120:	e042      	b.n	80081a8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008122:	4b25      	ldr	r3, [pc, #148]	@ (80081b8 <vTaskSwitchContext+0xac>)
 8008124:	2200      	movs	r2, #0
 8008126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008128:	4b24      	ldr	r3, [pc, #144]	@ (80081bc <vTaskSwitchContext+0xb0>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60fb      	str	r3, [r7, #12]
 800812e:	e011      	b.n	8008154 <vTaskSwitchContext+0x48>
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d10b      	bne.n	800814e <vTaskSwitchContext+0x42>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	607b      	str	r3, [r7, #4]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <vTaskSwitchContext+0x3e>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	3b01      	subs	r3, #1
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	491a      	ldr	r1, [pc, #104]	@ (80081c0 <vTaskSwitchContext+0xb4>)
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	440b      	add	r3, r1
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d0e3      	beq.n	8008130 <vTaskSwitchContext+0x24>
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4a13      	ldr	r2, [pc, #76]	@ (80081c0 <vTaskSwitchContext+0xb4>)
 8008174:	4413      	add	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	605a      	str	r2, [r3, #4]
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	685a      	ldr	r2, [r3, #4]
 8008186:	68bb      	ldr	r3, [r7, #8]
 8008188:	3308      	adds	r3, #8
 800818a:	429a      	cmp	r2, r3
 800818c:	d104      	bne.n	8008198 <vTaskSwitchContext+0x8c>
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	68bb      	ldr	r3, [r7, #8]
 8008196:	605a      	str	r2, [r3, #4]
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	4a09      	ldr	r2, [pc, #36]	@ (80081c4 <vTaskSwitchContext+0xb8>)
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	4a06      	ldr	r2, [pc, #24]	@ (80081bc <vTaskSwitchContext+0xb0>)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	6013      	str	r3, [r2, #0]
}
 80081a8:	bf00      	nop
 80081aa:	3714      	adds	r7, #20
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	2000100c 	.word	0x2000100c
 80081b8:	20000ff8 	.word	0x20000ff8
 80081bc:	20000fec 	.word	0x20000fec
 80081c0:	20000b14 	.word	0x20000b14
 80081c4:	20000b10 	.word	0x20000b10

080081c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10b      	bne.n	80081f0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	60fb      	str	r3, [r7, #12]
}
 80081ea:	bf00      	nop
 80081ec:	bf00      	nop
 80081ee:	e7fd      	b.n	80081ec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80081f0:	4b07      	ldr	r3, [pc, #28]	@ (8008210 <vTaskPlaceOnEventList+0x48>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	3318      	adds	r3, #24
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7fe fdb2 	bl	8006d62 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80081fe:	2101      	movs	r1, #1
 8008200:	6838      	ldr	r0, [r7, #0]
 8008202:	f000 fa81 	bl	8008708 <prvAddCurrentTaskToDelayedList>
}
 8008206:	bf00      	nop
 8008208:	3710      	adds	r7, #16
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	20000b10 	.word	0x20000b10

08008214 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008214:	b580      	push	{r7, lr}
 8008216:	b086      	sub	sp, #24
 8008218:	af00      	add	r7, sp, #0
 800821a:	60f8      	str	r0, [r7, #12]
 800821c:	60b9      	str	r1, [r7, #8]
 800821e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10b      	bne.n	800823e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822a:	f383 8811 	msr	BASEPRI, r3
 800822e:	f3bf 8f6f 	isb	sy
 8008232:	f3bf 8f4f 	dsb	sy
 8008236:	617b      	str	r3, [r7, #20]
}
 8008238:	bf00      	nop
 800823a:	bf00      	nop
 800823c:	e7fd      	b.n	800823a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800823e:	4b0a      	ldr	r3, [pc, #40]	@ (8008268 <vTaskPlaceOnEventListRestricted+0x54>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	3318      	adds	r3, #24
 8008244:	4619      	mov	r1, r3
 8008246:	68f8      	ldr	r0, [r7, #12]
 8008248:	f7fe fd67 	bl	8006d1a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d002      	beq.n	8008258 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008252:	f04f 33ff 	mov.w	r3, #4294967295
 8008256:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008258:	6879      	ldr	r1, [r7, #4]
 800825a:	68b8      	ldr	r0, [r7, #8]
 800825c:	f000 fa54 	bl	8008708 <prvAddCurrentTaskToDelayedList>
	}
 8008260:	bf00      	nop
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}
 8008268:	20000b10 	.word	0x20000b10

0800826c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b086      	sub	sp, #24
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	68db      	ldr	r3, [r3, #12]
 800827a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10b      	bne.n	800829a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	60fb      	str	r3, [r7, #12]
}
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	e7fd      	b.n	8008296 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	3318      	adds	r3, #24
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fe fd98 	bl	8006dd4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082a4:	4b1d      	ldr	r3, [pc, #116]	@ (800831c <xTaskRemoveFromEventList+0xb0>)
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d11d      	bne.n	80082e8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	3304      	adds	r3, #4
 80082b0:	4618      	mov	r0, r3
 80082b2:	f7fe fd8f 	bl	8006dd4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ba:	4b19      	ldr	r3, [pc, #100]	@ (8008320 <xTaskRemoveFromEventList+0xb4>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	429a      	cmp	r2, r3
 80082c0:	d903      	bls.n	80082ca <xTaskRemoveFromEventList+0x5e>
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c6:	4a16      	ldr	r2, [pc, #88]	@ (8008320 <xTaskRemoveFromEventList+0xb4>)
 80082c8:	6013      	str	r3, [r2, #0]
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ce:	4613      	mov	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4413      	add	r3, r2
 80082d4:	009b      	lsls	r3, r3, #2
 80082d6:	4a13      	ldr	r2, [pc, #76]	@ (8008324 <xTaskRemoveFromEventList+0xb8>)
 80082d8:	441a      	add	r2, r3
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	3304      	adds	r3, #4
 80082de:	4619      	mov	r1, r3
 80082e0:	4610      	mov	r0, r2
 80082e2:	f7fe fd1a 	bl	8006d1a <vListInsertEnd>
 80082e6:	e005      	b.n	80082f4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80082e8:	693b      	ldr	r3, [r7, #16]
 80082ea:	3318      	adds	r3, #24
 80082ec:	4619      	mov	r1, r3
 80082ee:	480e      	ldr	r0, [pc, #56]	@ (8008328 <xTaskRemoveFromEventList+0xbc>)
 80082f0:	f7fe fd13 	bl	8006d1a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082f8:	4b0c      	ldr	r3, [pc, #48]	@ (800832c <xTaskRemoveFromEventList+0xc0>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fe:	429a      	cmp	r2, r3
 8008300:	d905      	bls.n	800830e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008302:	2301      	movs	r3, #1
 8008304:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008306:	4b0a      	ldr	r3, [pc, #40]	@ (8008330 <xTaskRemoveFromEventList+0xc4>)
 8008308:	2201      	movs	r2, #1
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	e001      	b.n	8008312 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800830e:	2300      	movs	r3, #0
 8008310:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008312:	697b      	ldr	r3, [r7, #20]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}
 800831c:	2000100c 	.word	0x2000100c
 8008320:	20000fec 	.word	0x20000fec
 8008324:	20000b14 	.word	0x20000b14
 8008328:	20000fa4 	.word	0x20000fa4
 800832c:	20000b10 	.word	0x20000b10
 8008330:	20000ff8 	.word	0x20000ff8

08008334 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008334:	b480      	push	{r7}
 8008336:	b083      	sub	sp, #12
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800833c:	4b06      	ldr	r3, [pc, #24]	@ (8008358 <vTaskInternalSetTimeOutState+0x24>)
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008344:	4b05      	ldr	r3, [pc, #20]	@ (800835c <vTaskInternalSetTimeOutState+0x28>)
 8008346:	681a      	ldr	r2, [r3, #0]
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	605a      	str	r2, [r3, #4]
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr
 8008358:	20000ffc 	.word	0x20000ffc
 800835c:	20000fe8 	.word	0x20000fe8

08008360 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b088      	sub	sp, #32
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10b      	bne.n	8008388 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008374:	f383 8811 	msr	BASEPRI, r3
 8008378:	f3bf 8f6f 	isb	sy
 800837c:	f3bf 8f4f 	dsb	sy
 8008380:	613b      	str	r3, [r7, #16]
}
 8008382:	bf00      	nop
 8008384:	bf00      	nop
 8008386:	e7fd      	b.n	8008384 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d10b      	bne.n	80083a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	60fb      	str	r3, [r7, #12]
}
 80083a0:	bf00      	nop
 80083a2:	bf00      	nop
 80083a4:	e7fd      	b.n	80083a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80083a6:	f000 ff4f 	bl	8009248 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80083aa:	4b1d      	ldr	r3, [pc, #116]	@ (8008420 <xTaskCheckForTimeOut+0xc0>)
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	685b      	ldr	r3, [r3, #4]
 80083b4:	69ba      	ldr	r2, [r7, #24]
 80083b6:	1ad3      	subs	r3, r2, r3
 80083b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c2:	d102      	bne.n	80083ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80083c4:	2300      	movs	r3, #0
 80083c6:	61fb      	str	r3, [r7, #28]
 80083c8:	e023      	b.n	8008412 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681a      	ldr	r2, [r3, #0]
 80083ce:	4b15      	ldr	r3, [pc, #84]	@ (8008424 <xTaskCheckForTimeOut+0xc4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d007      	beq.n	80083e6 <xTaskCheckForTimeOut+0x86>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	685b      	ldr	r3, [r3, #4]
 80083da:	69ba      	ldr	r2, [r7, #24]
 80083dc:	429a      	cmp	r2, r3
 80083de:	d302      	bcc.n	80083e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80083e0:	2301      	movs	r3, #1
 80083e2:	61fb      	str	r3, [r7, #28]
 80083e4:	e015      	b.n	8008412 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	697a      	ldr	r2, [r7, #20]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d20b      	bcs.n	8008408 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	1ad2      	subs	r2, r2, r3
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f7ff ff99 	bl	8008334 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008402:	2300      	movs	r3, #0
 8008404:	61fb      	str	r3, [r7, #28]
 8008406:	e004      	b.n	8008412 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	2200      	movs	r2, #0
 800840c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800840e:	2301      	movs	r3, #1
 8008410:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008412:	f000 ff4b 	bl	80092ac <vPortExitCritical>

	return xReturn;
 8008416:	69fb      	ldr	r3, [r7, #28]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3720      	adds	r7, #32
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	20000fe8 	.word	0x20000fe8
 8008424:	20000ffc 	.word	0x20000ffc

08008428 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008428:	b480      	push	{r7}
 800842a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800842c:	4b03      	ldr	r3, [pc, #12]	@ (800843c <vTaskMissedYield+0x14>)
 800842e:	2201      	movs	r2, #1
 8008430:	601a      	str	r2, [r3, #0]
}
 8008432:	bf00      	nop
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	20000ff8 	.word	0x20000ff8

08008440 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b082      	sub	sp, #8
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008448:	f000 f852 	bl	80084f0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800844c:	4b06      	ldr	r3, [pc, #24]	@ (8008468 <prvIdleTask+0x28>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d9f9      	bls.n	8008448 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008454:	4b05      	ldr	r3, [pc, #20]	@ (800846c <prvIdleTask+0x2c>)
 8008456:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	f3bf 8f4f 	dsb	sy
 8008460:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008464:	e7f0      	b.n	8008448 <prvIdleTask+0x8>
 8008466:	bf00      	nop
 8008468:	20000b14 	.word	0x20000b14
 800846c:	e000ed04 	.word	0xe000ed04

08008470 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008476:	2300      	movs	r3, #0
 8008478:	607b      	str	r3, [r7, #4]
 800847a:	e00c      	b.n	8008496 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	4613      	mov	r3, r2
 8008480:	009b      	lsls	r3, r3, #2
 8008482:	4413      	add	r3, r2
 8008484:	009b      	lsls	r3, r3, #2
 8008486:	4a12      	ldr	r2, [pc, #72]	@ (80084d0 <prvInitialiseTaskLists+0x60>)
 8008488:	4413      	add	r3, r2
 800848a:	4618      	mov	r0, r3
 800848c:	f7fe fc18 	bl	8006cc0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3301      	adds	r3, #1
 8008494:	607b      	str	r3, [r7, #4]
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2b37      	cmp	r3, #55	@ 0x37
 800849a:	d9ef      	bls.n	800847c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800849c:	480d      	ldr	r0, [pc, #52]	@ (80084d4 <prvInitialiseTaskLists+0x64>)
 800849e:	f7fe fc0f 	bl	8006cc0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80084a2:	480d      	ldr	r0, [pc, #52]	@ (80084d8 <prvInitialiseTaskLists+0x68>)
 80084a4:	f7fe fc0c 	bl	8006cc0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80084a8:	480c      	ldr	r0, [pc, #48]	@ (80084dc <prvInitialiseTaskLists+0x6c>)
 80084aa:	f7fe fc09 	bl	8006cc0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80084ae:	480c      	ldr	r0, [pc, #48]	@ (80084e0 <prvInitialiseTaskLists+0x70>)
 80084b0:	f7fe fc06 	bl	8006cc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80084b4:	480b      	ldr	r0, [pc, #44]	@ (80084e4 <prvInitialiseTaskLists+0x74>)
 80084b6:	f7fe fc03 	bl	8006cc0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80084ba:	4b0b      	ldr	r3, [pc, #44]	@ (80084e8 <prvInitialiseTaskLists+0x78>)
 80084bc:	4a05      	ldr	r2, [pc, #20]	@ (80084d4 <prvInitialiseTaskLists+0x64>)
 80084be:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80084c0:	4b0a      	ldr	r3, [pc, #40]	@ (80084ec <prvInitialiseTaskLists+0x7c>)
 80084c2:	4a05      	ldr	r2, [pc, #20]	@ (80084d8 <prvInitialiseTaskLists+0x68>)
 80084c4:	601a      	str	r2, [r3, #0]
}
 80084c6:	bf00      	nop
 80084c8:	3708      	adds	r7, #8
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
 80084ce:	bf00      	nop
 80084d0:	20000b14 	.word	0x20000b14
 80084d4:	20000f74 	.word	0x20000f74
 80084d8:	20000f88 	.word	0x20000f88
 80084dc:	20000fa4 	.word	0x20000fa4
 80084e0:	20000fb8 	.word	0x20000fb8
 80084e4:	20000fd0 	.word	0x20000fd0
 80084e8:	20000f9c 	.word	0x20000f9c
 80084ec:	20000fa0 	.word	0x20000fa0

080084f0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80084f6:	e019      	b.n	800852c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80084f8:	f000 fea6 	bl	8009248 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084fc:	4b10      	ldr	r3, [pc, #64]	@ (8008540 <prvCheckTasksWaitingTermination+0x50>)
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	3304      	adds	r3, #4
 8008508:	4618      	mov	r0, r3
 800850a:	f7fe fc63 	bl	8006dd4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800850e:	4b0d      	ldr	r3, [pc, #52]	@ (8008544 <prvCheckTasksWaitingTermination+0x54>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	3b01      	subs	r3, #1
 8008514:	4a0b      	ldr	r2, [pc, #44]	@ (8008544 <prvCheckTasksWaitingTermination+0x54>)
 8008516:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008518:	4b0b      	ldr	r3, [pc, #44]	@ (8008548 <prvCheckTasksWaitingTermination+0x58>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	3b01      	subs	r3, #1
 800851e:	4a0a      	ldr	r2, [pc, #40]	@ (8008548 <prvCheckTasksWaitingTermination+0x58>)
 8008520:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008522:	f000 fec3 	bl	80092ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 f810 	bl	800854c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800852c:	4b06      	ldr	r3, [pc, #24]	@ (8008548 <prvCheckTasksWaitingTermination+0x58>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1e1      	bne.n	80084f8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008534:	bf00      	nop
 8008536:	bf00      	nop
 8008538:	3708      	adds	r7, #8
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20000fb8 	.word	0x20000fb8
 8008544:	20000fe4 	.word	0x20000fe4
 8008548:	20000fcc 	.word	0x20000fcc

0800854c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800855a:	2b00      	cmp	r3, #0
 800855c:	d108      	bne.n	8008570 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008562:	4618      	mov	r0, r3
 8008564:	f001 f860 	bl	8009628 <vPortFree>
				vPortFree( pxTCB );
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f001 f85d 	bl	8009628 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800856e:	e019      	b.n	80085a4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008576:	2b01      	cmp	r3, #1
 8008578:	d103      	bne.n	8008582 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800857a:	6878      	ldr	r0, [r7, #4]
 800857c:	f001 f854 	bl	8009628 <vPortFree>
	}
 8008580:	e010      	b.n	80085a4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008588:	2b02      	cmp	r3, #2
 800858a:	d00b      	beq.n	80085a4 <prvDeleteTCB+0x58>
	__asm volatile
 800858c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008590:	f383 8811 	msr	BASEPRI, r3
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	f3bf 8f4f 	dsb	sy
 800859c:	60fb      	str	r3, [r7, #12]
}
 800859e:	bf00      	nop
 80085a0:	bf00      	nop
 80085a2:	e7fd      	b.n	80085a0 <prvDeleteTCB+0x54>
	}
 80085a4:	bf00      	nop
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085b2:	4b0c      	ldr	r3, [pc, #48]	@ (80085e4 <prvResetNextTaskUnblockTime+0x38>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d104      	bne.n	80085c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80085bc:	4b0a      	ldr	r3, [pc, #40]	@ (80085e8 <prvResetNextTaskUnblockTime+0x3c>)
 80085be:	f04f 32ff 	mov.w	r2, #4294967295
 80085c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80085c4:	e008      	b.n	80085d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c6:	4b07      	ldr	r3, [pc, #28]	@ (80085e4 <prvResetNextTaskUnblockTime+0x38>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	4a04      	ldr	r2, [pc, #16]	@ (80085e8 <prvResetNextTaskUnblockTime+0x3c>)
 80085d6:	6013      	str	r3, [r2, #0]
}
 80085d8:	bf00      	nop
 80085da:	370c      	adds	r7, #12
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	20000f9c 	.word	0x20000f9c
 80085e8:	20001004 	.word	0x20001004

080085ec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80085f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008620 <xTaskGetSchedulerState+0x34>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d102      	bne.n	8008600 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80085fa:	2301      	movs	r3, #1
 80085fc:	607b      	str	r3, [r7, #4]
 80085fe:	e008      	b.n	8008612 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008600:	4b08      	ldr	r3, [pc, #32]	@ (8008624 <xTaskGetSchedulerState+0x38>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d102      	bne.n	800860e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008608:	2302      	movs	r3, #2
 800860a:	607b      	str	r3, [r7, #4]
 800860c:	e001      	b.n	8008612 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800860e:	2300      	movs	r3, #0
 8008610:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008612:	687b      	ldr	r3, [r7, #4]
	}
 8008614:	4618      	mov	r0, r3
 8008616:	370c      	adds	r7, #12
 8008618:	46bd      	mov	sp, r7
 800861a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861e:	4770      	bx	lr
 8008620:	20000ff0 	.word	0x20000ff0
 8008624:	2000100c 	.word	0x2000100c

08008628 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008628:	b580      	push	{r7, lr}
 800862a:	b086      	sub	sp, #24
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d058      	beq.n	80086f0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800863e:	4b2f      	ldr	r3, [pc, #188]	@ (80086fc <xTaskPriorityDisinherit+0xd4>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	429a      	cmp	r2, r3
 8008646:	d00b      	beq.n	8008660 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864c:	f383 8811 	msr	BASEPRI, r3
 8008650:	f3bf 8f6f 	isb	sy
 8008654:	f3bf 8f4f 	dsb	sy
 8008658:	60fb      	str	r3, [r7, #12]
}
 800865a:	bf00      	nop
 800865c:	bf00      	nop
 800865e:	e7fd      	b.n	800865c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10b      	bne.n	8008680 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866c:	f383 8811 	msr	BASEPRI, r3
 8008670:	f3bf 8f6f 	isb	sy
 8008674:	f3bf 8f4f 	dsb	sy
 8008678:	60bb      	str	r3, [r7, #8]
}
 800867a:	bf00      	nop
 800867c:	bf00      	nop
 800867e:	e7fd      	b.n	800867c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008684:	1e5a      	subs	r2, r3, #1
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800868a:	693b      	ldr	r3, [r7, #16]
 800868c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008692:	429a      	cmp	r2, r3
 8008694:	d02c      	beq.n	80086f0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800869a:	2b00      	cmp	r3, #0
 800869c:	d128      	bne.n	80086f0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800869e:	693b      	ldr	r3, [r7, #16]
 80086a0:	3304      	adds	r3, #4
 80086a2:	4618      	mov	r0, r3
 80086a4:	f7fe fb96 	bl	8006dd4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80086a8:	693b      	ldr	r3, [r7, #16]
 80086aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086b0:	693b      	ldr	r3, [r7, #16]
 80086b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086b4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80086bc:	693b      	ldr	r3, [r7, #16]
 80086be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086c0:	4b0f      	ldr	r3, [pc, #60]	@ (8008700 <xTaskPriorityDisinherit+0xd8>)
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d903      	bls.n	80086d0 <xTaskPriorityDisinherit+0xa8>
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086cc:	4a0c      	ldr	r2, [pc, #48]	@ (8008700 <xTaskPriorityDisinherit+0xd8>)
 80086ce:	6013      	str	r3, [r2, #0]
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086d4:	4613      	mov	r3, r2
 80086d6:	009b      	lsls	r3, r3, #2
 80086d8:	4413      	add	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4a09      	ldr	r2, [pc, #36]	@ (8008704 <xTaskPriorityDisinherit+0xdc>)
 80086de:	441a      	add	r2, r3
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	3304      	adds	r3, #4
 80086e4:	4619      	mov	r1, r3
 80086e6:	4610      	mov	r0, r2
 80086e8:	f7fe fb17 	bl	8006d1a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80086ec:	2301      	movs	r3, #1
 80086ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80086f0:	697b      	ldr	r3, [r7, #20]
	}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000b10 	.word	0x20000b10
 8008700:	20000fec 	.word	0x20000fec
 8008704:	20000b14 	.word	0x20000b14

08008708 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008712:	4b21      	ldr	r3, [pc, #132]	@ (8008798 <prvAddCurrentTaskToDelayedList+0x90>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008718:	4b20      	ldr	r3, [pc, #128]	@ (800879c <prvAddCurrentTaskToDelayedList+0x94>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3304      	adds	r3, #4
 800871e:	4618      	mov	r0, r3
 8008720:	f7fe fb58 	bl	8006dd4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800872a:	d10a      	bne.n	8008742 <prvAddCurrentTaskToDelayedList+0x3a>
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d007      	beq.n	8008742 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008732:	4b1a      	ldr	r3, [pc, #104]	@ (800879c <prvAddCurrentTaskToDelayedList+0x94>)
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3304      	adds	r3, #4
 8008738:	4619      	mov	r1, r3
 800873a:	4819      	ldr	r0, [pc, #100]	@ (80087a0 <prvAddCurrentTaskToDelayedList+0x98>)
 800873c:	f7fe faed 	bl	8006d1a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008740:	e026      	b.n	8008790 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	4413      	add	r3, r2
 8008748:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800874a:	4b14      	ldr	r3, [pc, #80]	@ (800879c <prvAddCurrentTaskToDelayedList+0x94>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68ba      	ldr	r2, [r7, #8]
 8008750:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008752:	68ba      	ldr	r2, [r7, #8]
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	429a      	cmp	r2, r3
 8008758:	d209      	bcs.n	800876e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800875a:	4b12      	ldr	r3, [pc, #72]	@ (80087a4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800875c:	681a      	ldr	r2, [r3, #0]
 800875e:	4b0f      	ldr	r3, [pc, #60]	@ (800879c <prvAddCurrentTaskToDelayedList+0x94>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3304      	adds	r3, #4
 8008764:	4619      	mov	r1, r3
 8008766:	4610      	mov	r0, r2
 8008768:	f7fe fafb 	bl	8006d62 <vListInsert>
}
 800876c:	e010      	b.n	8008790 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800876e:	4b0e      	ldr	r3, [pc, #56]	@ (80087a8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008770:	681a      	ldr	r2, [r3, #0]
 8008772:	4b0a      	ldr	r3, [pc, #40]	@ (800879c <prvAddCurrentTaskToDelayedList+0x94>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3304      	adds	r3, #4
 8008778:	4619      	mov	r1, r3
 800877a:	4610      	mov	r0, r2
 800877c:	f7fe faf1 	bl	8006d62 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008780:	4b0a      	ldr	r3, [pc, #40]	@ (80087ac <prvAddCurrentTaskToDelayedList+0xa4>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	429a      	cmp	r2, r3
 8008788:	d202      	bcs.n	8008790 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800878a:	4a08      	ldr	r2, [pc, #32]	@ (80087ac <prvAddCurrentTaskToDelayedList+0xa4>)
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	6013      	str	r3, [r2, #0]
}
 8008790:	bf00      	nop
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	20000fe8 	.word	0x20000fe8
 800879c:	20000b10 	.word	0x20000b10
 80087a0:	20000fd0 	.word	0x20000fd0
 80087a4:	20000fa0 	.word	0x20000fa0
 80087a8:	20000f9c 	.word	0x20000f9c
 80087ac:	20001004 	.word	0x20001004

080087b0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b08a      	sub	sp, #40	@ 0x28
 80087b4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80087b6:	2300      	movs	r3, #0
 80087b8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80087ba:	f000 fbb1 	bl	8008f20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80087be:	4b1d      	ldr	r3, [pc, #116]	@ (8008834 <xTimerCreateTimerTask+0x84>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d021      	beq.n	800880a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80087c6:	2300      	movs	r3, #0
 80087c8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80087ca:	2300      	movs	r3, #0
 80087cc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80087ce:	1d3a      	adds	r2, r7, #4
 80087d0:	f107 0108 	add.w	r1, r7, #8
 80087d4:	f107 030c 	add.w	r3, r7, #12
 80087d8:	4618      	mov	r0, r3
 80087da:	f7fe fa57 	bl	8006c8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80087de:	6879      	ldr	r1, [r7, #4]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	9202      	str	r2, [sp, #8]
 80087e6:	9301      	str	r3, [sp, #4]
 80087e8:	2302      	movs	r3, #2
 80087ea:	9300      	str	r3, [sp, #0]
 80087ec:	2300      	movs	r3, #0
 80087ee:	460a      	mov	r2, r1
 80087f0:	4911      	ldr	r1, [pc, #68]	@ (8008838 <xTimerCreateTimerTask+0x88>)
 80087f2:	4812      	ldr	r0, [pc, #72]	@ (800883c <xTimerCreateTimerTask+0x8c>)
 80087f4:	f7ff f8d0 	bl	8007998 <xTaskCreateStatic>
 80087f8:	4603      	mov	r3, r0
 80087fa:	4a11      	ldr	r2, [pc, #68]	@ (8008840 <xTimerCreateTimerTask+0x90>)
 80087fc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80087fe:	4b10      	ldr	r3, [pc, #64]	@ (8008840 <xTimerCreateTimerTask+0x90>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008806:	2301      	movs	r3, #1
 8008808:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d10b      	bne.n	8008828 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008814:	f383 8811 	msr	BASEPRI, r3
 8008818:	f3bf 8f6f 	isb	sy
 800881c:	f3bf 8f4f 	dsb	sy
 8008820:	613b      	str	r3, [r7, #16]
}
 8008822:	bf00      	nop
 8008824:	bf00      	nop
 8008826:	e7fd      	b.n	8008824 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008828:	697b      	ldr	r3, [r7, #20]
}
 800882a:	4618      	mov	r0, r3
 800882c:	3718      	adds	r7, #24
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	20001040 	.word	0x20001040
 8008838:	080099d4 	.word	0x080099d4
 800883c:	08008ab9 	.word	0x08008ab9
 8008840:	20001044 	.word	0x20001044

08008844 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af02      	add	r7, sp, #8
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
 8008850:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008852:	202c      	movs	r0, #44	@ 0x2c
 8008854:	f000 fe1a 	bl	800948c <pvPortMalloc>
 8008858:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00d      	beq.n	800887c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	6a3b      	ldr	r3, [r7, #32]
 800886e:	9300      	str	r3, [sp, #0]
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	68b9      	ldr	r1, [r7, #8]
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 f845 	bl	8008906 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800887c:	697b      	ldr	r3, [r7, #20]
	}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}

08008886 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008886:	b580      	push	{r7, lr}
 8008888:	b08a      	sub	sp, #40	@ 0x28
 800888a:	af02      	add	r7, sp, #8
 800888c:	60f8      	str	r0, [r7, #12]
 800888e:	60b9      	str	r1, [r7, #8]
 8008890:	607a      	str	r2, [r7, #4]
 8008892:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008894:	232c      	movs	r3, #44	@ 0x2c
 8008896:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	2b2c      	cmp	r3, #44	@ 0x2c
 800889c:	d00b      	beq.n	80088b6 <xTimerCreateStatic+0x30>
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	61bb      	str	r3, [r7, #24]
}
 80088b0:	bf00      	nop
 80088b2:	bf00      	nop
 80088b4:	e7fd      	b.n	80088b2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80088b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80088b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d10b      	bne.n	80088d6 <xTimerCreateStatic+0x50>
	__asm volatile
 80088be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c2:	f383 8811 	msr	BASEPRI, r3
 80088c6:	f3bf 8f6f 	isb	sy
 80088ca:	f3bf 8f4f 	dsb	sy
 80088ce:	617b      	str	r3, [r7, #20]
}
 80088d0:	bf00      	nop
 80088d2:	bf00      	nop
 80088d4:	e7fd      	b.n	80088d2 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80088d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088d8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00d      	beq.n	80088fc <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80088e0:	69fb      	ldr	r3, [r7, #28]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	9301      	str	r3, [sp, #4]
 80088ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ee:	9300      	str	r3, [sp, #0]
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	68b9      	ldr	r1, [r7, #8]
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f000 f805 	bl	8008906 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80088fc:	69fb      	ldr	r3, [r7, #28]
	}
 80088fe:	4618      	mov	r0, r3
 8008900:	3720      	adds	r7, #32
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b086      	sub	sp, #24
 800890a:	af00      	add	r7, sp, #0
 800890c:	60f8      	str	r0, [r7, #12]
 800890e:	60b9      	str	r1, [r7, #8]
 8008910:	607a      	str	r2, [r7, #4]
 8008912:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d10b      	bne.n	8008932 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800891a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891e:	f383 8811 	msr	BASEPRI, r3
 8008922:	f3bf 8f6f 	isb	sy
 8008926:	f3bf 8f4f 	dsb	sy
 800892a:	617b      	str	r3, [r7, #20]
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	e7fd      	b.n	800892e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01e      	beq.n	8008976 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008938:	f000 faf2 	bl	8008f20 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800893c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800893e:	68fa      	ldr	r2, [r7, #12]
 8008940:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008944:	68ba      	ldr	r2, [r7, #8]
 8008946:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800894e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008950:	6a3a      	ldr	r2, [r7, #32]
 8008952:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008956:	3304      	adds	r3, #4
 8008958:	4618      	mov	r0, r3
 800895a:	f7fe f9d1 	bl	8006d00 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d008      	beq.n	8008976 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800896a:	f043 0304 	orr.w	r3, r3, #4
 800896e:	b2da      	uxtb	r2, r3
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008976:	bf00      	nop
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}
	...

08008980 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	@ 0x28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	60b9      	str	r1, [r7, #8]
 800898a:	607a      	str	r2, [r7, #4]
 800898c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800898e:	2300      	movs	r3, #0
 8008990:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d10b      	bne.n	80089b0 <xTimerGenericCommand+0x30>
	__asm volatile
 8008998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800899c:	f383 8811 	msr	BASEPRI, r3
 80089a0:	f3bf 8f6f 	isb	sy
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	623b      	str	r3, [r7, #32]
}
 80089aa:	bf00      	nop
 80089ac:	bf00      	nop
 80089ae:	e7fd      	b.n	80089ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80089b0:	4b19      	ldr	r3, [pc, #100]	@ (8008a18 <xTimerGenericCommand+0x98>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d02a      	beq.n	8008a0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b05      	cmp	r3, #5
 80089c8:	dc18      	bgt.n	80089fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80089ca:	f7ff fe0f 	bl	80085ec <xTaskGetSchedulerState>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d109      	bne.n	80089e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80089d4:	4b10      	ldr	r3, [pc, #64]	@ (8008a18 <xTimerGenericCommand+0x98>)
 80089d6:	6818      	ldr	r0, [r3, #0]
 80089d8:	f107 0110 	add.w	r1, r7, #16
 80089dc:	2300      	movs	r3, #0
 80089de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089e0:	f7fe fb68 	bl	80070b4 <xQueueGenericSend>
 80089e4:	6278      	str	r0, [r7, #36]	@ 0x24
 80089e6:	e012      	b.n	8008a0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80089e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008a18 <xTimerGenericCommand+0x98>)
 80089ea:	6818      	ldr	r0, [r3, #0]
 80089ec:	f107 0110 	add.w	r1, r7, #16
 80089f0:	2300      	movs	r3, #0
 80089f2:	2200      	movs	r2, #0
 80089f4:	f7fe fb5e 	bl	80070b4 <xQueueGenericSend>
 80089f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80089fa:	e008      	b.n	8008a0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80089fc:	4b06      	ldr	r3, [pc, #24]	@ (8008a18 <xTimerGenericCommand+0x98>)
 80089fe:	6818      	ldr	r0, [r3, #0]
 8008a00:	f107 0110 	add.w	r1, r7, #16
 8008a04:	2300      	movs	r3, #0
 8008a06:	683a      	ldr	r2, [r7, #0]
 8008a08:	f7fe fc56 	bl	80072b8 <xQueueGenericSendFromISR>
 8008a0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3728      	adds	r7, #40	@ 0x28
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	20001040 	.word	0x20001040

08008a1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b088      	sub	sp, #32
 8008a20:	af02      	add	r7, sp, #8
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a26:	4b23      	ldr	r3, [pc, #140]	@ (8008ab4 <prvProcessExpiredTimer+0x98>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	68db      	ldr	r3, [r3, #12]
 8008a2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	3304      	adds	r3, #4
 8008a34:	4618      	mov	r0, r3
 8008a36:	f7fe f9cd 	bl	8006dd4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a40:	f003 0304 	and.w	r3, r3, #4
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d023      	beq.n	8008a90 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	699a      	ldr	r2, [r3, #24]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	18d1      	adds	r1, r2, r3
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	6978      	ldr	r0, [r7, #20]
 8008a56:	f000 f8d5 	bl	8008c04 <prvInsertTimerInActiveList>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d020      	beq.n	8008aa2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008a60:	2300      	movs	r3, #0
 8008a62:	9300      	str	r3, [sp, #0]
 8008a64:	2300      	movs	r3, #0
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	6978      	ldr	r0, [r7, #20]
 8008a6c:	f7ff ff88 	bl	8008980 <xTimerGenericCommand>
 8008a70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d114      	bne.n	8008aa2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a7c:	f383 8811 	msr	BASEPRI, r3
 8008a80:	f3bf 8f6f 	isb	sy
 8008a84:	f3bf 8f4f 	dsb	sy
 8008a88:	60fb      	str	r3, [r7, #12]
}
 8008a8a:	bf00      	nop
 8008a8c:	bf00      	nop
 8008a8e:	e7fd      	b.n	8008a8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008a96:	f023 0301 	bic.w	r3, r3, #1
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	6a1b      	ldr	r3, [r3, #32]
 8008aa6:	6978      	ldr	r0, [r7, #20]
 8008aa8:	4798      	blx	r3
}
 8008aaa:	bf00      	nop
 8008aac:	3718      	adds	r7, #24
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	20001038 	.word	0x20001038

08008ab8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ac0:	f107 0308 	add.w	r3, r7, #8
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f000 f859 	bl	8008b7c <prvGetNextExpireTime>
 8008aca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4619      	mov	r1, r3
 8008ad0:	68f8      	ldr	r0, [r7, #12]
 8008ad2:	f000 f805 	bl	8008ae0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008ad6:	f000 f8d7 	bl	8008c88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008ada:	bf00      	nop
 8008adc:	e7f0      	b.n	8008ac0 <prvTimerTask+0x8>
	...

08008ae0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008aea:	f7ff f999 	bl	8007e20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008aee:	f107 0308 	add.w	r3, r7, #8
 8008af2:	4618      	mov	r0, r3
 8008af4:	f000 f866 	bl	8008bc4 <prvSampleTimeNow>
 8008af8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008afa:	68bb      	ldr	r3, [r7, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d130      	bne.n	8008b62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10a      	bne.n	8008b1c <prvProcessTimerOrBlockTask+0x3c>
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d806      	bhi.n	8008b1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008b0e:	f7ff f995 	bl	8007e3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008b12:	68f9      	ldr	r1, [r7, #12]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f7ff ff81 	bl	8008a1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008b1a:	e024      	b.n	8008b66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d008      	beq.n	8008b34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008b22:	4b13      	ldr	r3, [pc, #76]	@ (8008b70 <prvProcessTimerOrBlockTask+0x90>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <prvProcessTimerOrBlockTask+0x50>
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e000      	b.n	8008b32 <prvProcessTimerOrBlockTask+0x52>
 8008b30:	2300      	movs	r3, #0
 8008b32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008b34:	4b0f      	ldr	r3, [pc, #60]	@ (8008b74 <prvProcessTimerOrBlockTask+0x94>)
 8008b36:	6818      	ldr	r0, [r3, #0]
 8008b38:	687a      	ldr	r2, [r7, #4]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	683a      	ldr	r2, [r7, #0]
 8008b40:	4619      	mov	r1, r3
 8008b42:	f7fe fef5 	bl	8007930 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008b46:	f7ff f979 	bl	8007e3c <xTaskResumeAll>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d10a      	bne.n	8008b66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008b50:	4b09      	ldr	r3, [pc, #36]	@ (8008b78 <prvProcessTimerOrBlockTask+0x98>)
 8008b52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b56:	601a      	str	r2, [r3, #0]
 8008b58:	f3bf 8f4f 	dsb	sy
 8008b5c:	f3bf 8f6f 	isb	sy
}
 8008b60:	e001      	b.n	8008b66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008b62:	f7ff f96b 	bl	8007e3c <xTaskResumeAll>
}
 8008b66:	bf00      	nop
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
 8008b6e:	bf00      	nop
 8008b70:	2000103c 	.word	0x2000103c
 8008b74:	20001040 	.word	0x20001040
 8008b78:	e000ed04 	.word	0xe000ed04

08008b7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b085      	sub	sp, #20
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008b84:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc0 <prvGetNextExpireTime+0x44>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <prvGetNextExpireTime+0x16>
 8008b8e:	2201      	movs	r2, #1
 8008b90:	e000      	b.n	8008b94 <prvGetNextExpireTime+0x18>
 8008b92:	2200      	movs	r2, #0
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d105      	bne.n	8008bac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ba0:	4b07      	ldr	r3, [pc, #28]	@ (8008bc0 <prvGetNextExpireTime+0x44>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	68db      	ldr	r3, [r3, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	60fb      	str	r3, [r7, #12]
 8008baa:	e001      	b.n	8008bb0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008bac:	2300      	movs	r3, #0
 8008bae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	3714      	adds	r7, #20
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr
 8008bbe:	bf00      	nop
 8008bc0:	20001038 	.word	0x20001038

08008bc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008bcc:	f7ff f9d4 	bl	8007f78 <xTaskGetTickCount>
 8008bd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8008c00 <prvSampleTimeNow+0x3c>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	68fa      	ldr	r2, [r7, #12]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d205      	bcs.n	8008be8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008bdc:	f000 f93a 	bl	8008e54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2201      	movs	r2, #1
 8008be4:	601a      	str	r2, [r3, #0]
 8008be6:	e002      	b.n	8008bee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008bee:	4a04      	ldr	r2, [pc, #16]	@ (8008c00 <prvSampleTimeNow+0x3c>)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	20001048 	.word	0x20001048

08008c04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	68ba      	ldr	r2, [r7, #8]
 8008c1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	429a      	cmp	r2, r3
 8008c28:	d812      	bhi.n	8008c50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	1ad2      	subs	r2, r2, r3
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	699b      	ldr	r3, [r3, #24]
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d302      	bcc.n	8008c3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	617b      	str	r3, [r7, #20]
 8008c3c:	e01b      	b.n	8008c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008c3e:	4b10      	ldr	r3, [pc, #64]	@ (8008c80 <prvInsertTimerInActiveList+0x7c>)
 8008c40:	681a      	ldr	r2, [r3, #0]
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	3304      	adds	r3, #4
 8008c46:	4619      	mov	r1, r3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f7fe f88a 	bl	8006d62 <vListInsert>
 8008c4e:	e012      	b.n	8008c76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d206      	bcs.n	8008c66 <prvInsertTimerInActiveList+0x62>
 8008c58:	68ba      	ldr	r2, [r7, #8]
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	d302      	bcc.n	8008c66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008c60:	2301      	movs	r3, #1
 8008c62:	617b      	str	r3, [r7, #20]
 8008c64:	e007      	b.n	8008c76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c66:	4b07      	ldr	r3, [pc, #28]	@ (8008c84 <prvInsertTimerInActiveList+0x80>)
 8008c68:	681a      	ldr	r2, [r3, #0]
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	4619      	mov	r1, r3
 8008c70:	4610      	mov	r0, r2
 8008c72:	f7fe f876 	bl	8006d62 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008c76:	697b      	ldr	r3, [r7, #20]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	2000103c 	.word	0x2000103c
 8008c84:	20001038 	.word	0x20001038

08008c88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b08e      	sub	sp, #56	@ 0x38
 8008c8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c8e:	e0ce      	b.n	8008e2e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	da19      	bge.n	8008cca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008c96:	1d3b      	adds	r3, r7, #4
 8008c98:	3304      	adds	r3, #4
 8008c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d10b      	bne.n	8008cba <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca6:	f383 8811 	msr	BASEPRI, r3
 8008caa:	f3bf 8f6f 	isb	sy
 8008cae:	f3bf 8f4f 	dsb	sy
 8008cb2:	61fb      	str	r3, [r7, #28]
}
 8008cb4:	bf00      	nop
 8008cb6:	bf00      	nop
 8008cb8:	e7fd      	b.n	8008cb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cc0:	6850      	ldr	r0, [r2, #4]
 8008cc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cc4:	6892      	ldr	r2, [r2, #8]
 8008cc6:	4611      	mov	r1, r2
 8008cc8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	f2c0 80ae 	blt.w	8008e2e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d004      	beq.n	8008ce8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce0:	3304      	adds	r3, #4
 8008ce2:	4618      	mov	r0, r3
 8008ce4:	f7fe f876 	bl	8006dd4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ce8:	463b      	mov	r3, r7
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7ff ff6a 	bl	8008bc4 <prvSampleTimeNow>
 8008cf0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2b09      	cmp	r3, #9
 8008cf6:	f200 8097 	bhi.w	8008e28 <prvProcessReceivedCommands+0x1a0>
 8008cfa:	a201      	add	r2, pc, #4	@ (adr r2, 8008d00 <prvProcessReceivedCommands+0x78>)
 8008cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d00:	08008d29 	.word	0x08008d29
 8008d04:	08008d29 	.word	0x08008d29
 8008d08:	08008d29 	.word	0x08008d29
 8008d0c:	08008d9f 	.word	0x08008d9f
 8008d10:	08008db3 	.word	0x08008db3
 8008d14:	08008dff 	.word	0x08008dff
 8008d18:	08008d29 	.word	0x08008d29
 8008d1c:	08008d29 	.word	0x08008d29
 8008d20:	08008d9f 	.word	0x08008d9f
 8008d24:	08008db3 	.word	0x08008db3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d2e:	f043 0301 	orr.w	r3, r3, #1
 8008d32:	b2da      	uxtb	r2, r3
 8008d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	18d1      	adds	r1, r2, r3
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d48:	f7ff ff5c 	bl	8008c04 <prvInsertTimerInActiveList>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d06c      	beq.n	8008e2c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d54:	6a1b      	ldr	r3, [r3, #32]
 8008d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d60:	f003 0304 	and.w	r3, r3, #4
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d061      	beq.n	8008e2c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	441a      	add	r2, r3
 8008d70:	2300      	movs	r3, #0
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	2300      	movs	r3, #0
 8008d76:	2100      	movs	r1, #0
 8008d78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008d7a:	f7ff fe01 	bl	8008980 <xTimerGenericCommand>
 8008d7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d152      	bne.n	8008e2c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	61bb      	str	r3, [r7, #24]
}
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	e7fd      	b.n	8008d9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008da0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008da4:	f023 0301 	bic.w	r3, r3, #1
 8008da8:	b2da      	uxtb	r2, r3
 8008daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008db0:	e03d      	b.n	8008e2e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008db4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008db8:	f043 0301 	orr.w	r3, r3, #1
 8008dbc:	b2da      	uxtb	r2, r3
 8008dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008dc4:	68ba      	ldr	r2, [r7, #8]
 8008dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dc8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dcc:	699b      	ldr	r3, [r3, #24]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d10b      	bne.n	8008dea <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd6:	f383 8811 	msr	BASEPRI, r3
 8008dda:	f3bf 8f6f 	isb	sy
 8008dde:	f3bf 8f4f 	dsb	sy
 8008de2:	617b      	str	r3, [r7, #20]
}
 8008de4:	bf00      	nop
 8008de6:	bf00      	nop
 8008de8:	e7fd      	b.n	8008de6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008dea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dec:	699a      	ldr	r2, [r3, #24]
 8008dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df0:	18d1      	adds	r1, r2, r3
 8008df2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008df6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008df8:	f7ff ff04 	bl	8008c04 <prvInsertTimerInActiveList>
					break;
 8008dfc:	e017      	b.n	8008e2e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e04:	f003 0302 	and.w	r3, r3, #2
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d103      	bne.n	8008e14 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008e0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008e0e:	f000 fc0b 	bl	8009628 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008e12:	e00c      	b.n	8008e2e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e1a:	f023 0301 	bic.w	r3, r3, #1
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008e26:	e002      	b.n	8008e2e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008e28:	bf00      	nop
 8008e2a:	e000      	b.n	8008e2e <prvProcessReceivedCommands+0x1a6>
					break;
 8008e2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008e2e:	4b08      	ldr	r3, [pc, #32]	@ (8008e50 <prvProcessReceivedCommands+0x1c8>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	1d39      	adds	r1, r7, #4
 8008e34:	2200      	movs	r2, #0
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7fe fadc 	bl	80073f4 <xQueueReceive>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f47f af26 	bne.w	8008c90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008e44:	bf00      	nop
 8008e46:	bf00      	nop
 8008e48:	3730      	adds	r7, #48	@ 0x30
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	20001040 	.word	0x20001040

08008e54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b088      	sub	sp, #32
 8008e58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008e5a:	e049      	b.n	8008ef0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e5c:	4b2e      	ldr	r3, [pc, #184]	@ (8008f18 <prvSwitchTimerLists+0xc4>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	68db      	ldr	r3, [r3, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e66:	4b2c      	ldr	r3, [pc, #176]	@ (8008f18 <prvSwitchTimerLists+0xc4>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68db      	ldr	r3, [r3, #12]
 8008e6c:	68db      	ldr	r3, [r3, #12]
 8008e6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	3304      	adds	r3, #4
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fd ffad 	bl	8006dd4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	6a1b      	ldr	r3, [r3, #32]
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008e88:	f003 0304 	and.w	r3, r3, #4
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d02f      	beq.n	8008ef0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	4413      	add	r3, r2
 8008e98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008e9a:	68ba      	ldr	r2, [r7, #8]
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d90e      	bls.n	8008ec0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008eae:	4b1a      	ldr	r3, [pc, #104]	@ (8008f18 <prvSwitchTimerLists+0xc4>)
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	3304      	adds	r3, #4
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	4610      	mov	r0, r2
 8008eba:	f7fd ff52 	bl	8006d62 <vListInsert>
 8008ebe:	e017      	b.n	8008ef0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	9300      	str	r3, [sp, #0]
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	2100      	movs	r1, #0
 8008eca:	68f8      	ldr	r0, [r7, #12]
 8008ecc:	f7ff fd58 	bl	8008980 <xTimerGenericCommand>
 8008ed0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d10b      	bne.n	8008ef0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008edc:	f383 8811 	msr	BASEPRI, r3
 8008ee0:	f3bf 8f6f 	isb	sy
 8008ee4:	f3bf 8f4f 	dsb	sy
 8008ee8:	603b      	str	r3, [r7, #0]
}
 8008eea:	bf00      	nop
 8008eec:	bf00      	nop
 8008eee:	e7fd      	b.n	8008eec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ef0:	4b09      	ldr	r3, [pc, #36]	@ (8008f18 <prvSwitchTimerLists+0xc4>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d1b0      	bne.n	8008e5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008efa:	4b07      	ldr	r3, [pc, #28]	@ (8008f18 <prvSwitchTimerLists+0xc4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008f00:	4b06      	ldr	r3, [pc, #24]	@ (8008f1c <prvSwitchTimerLists+0xc8>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	4a04      	ldr	r2, [pc, #16]	@ (8008f18 <prvSwitchTimerLists+0xc4>)
 8008f06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008f08:	4a04      	ldr	r2, [pc, #16]	@ (8008f1c <prvSwitchTimerLists+0xc8>)
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	6013      	str	r3, [r2, #0]
}
 8008f0e:	bf00      	nop
 8008f10:	3718      	adds	r7, #24
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
 8008f16:	bf00      	nop
 8008f18:	20001038 	.word	0x20001038
 8008f1c:	2000103c 	.word	0x2000103c

08008f20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b082      	sub	sp, #8
 8008f24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008f26:	f000 f98f 	bl	8009248 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008f2a:	4b15      	ldr	r3, [pc, #84]	@ (8008f80 <prvCheckForValidListAndQueue+0x60>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d120      	bne.n	8008f74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008f32:	4814      	ldr	r0, [pc, #80]	@ (8008f84 <prvCheckForValidListAndQueue+0x64>)
 8008f34:	f7fd fec4 	bl	8006cc0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008f38:	4813      	ldr	r0, [pc, #76]	@ (8008f88 <prvCheckForValidListAndQueue+0x68>)
 8008f3a:	f7fd fec1 	bl	8006cc0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008f3e:	4b13      	ldr	r3, [pc, #76]	@ (8008f8c <prvCheckForValidListAndQueue+0x6c>)
 8008f40:	4a10      	ldr	r2, [pc, #64]	@ (8008f84 <prvCheckForValidListAndQueue+0x64>)
 8008f42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008f44:	4b12      	ldr	r3, [pc, #72]	@ (8008f90 <prvCheckForValidListAndQueue+0x70>)
 8008f46:	4a10      	ldr	r2, [pc, #64]	@ (8008f88 <prvCheckForValidListAndQueue+0x68>)
 8008f48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	4b11      	ldr	r3, [pc, #68]	@ (8008f94 <prvCheckForValidListAndQueue+0x74>)
 8008f50:	4a11      	ldr	r2, [pc, #68]	@ (8008f98 <prvCheckForValidListAndQueue+0x78>)
 8008f52:	2110      	movs	r1, #16
 8008f54:	200a      	movs	r0, #10
 8008f56:	f7fd ffd1 	bl	8006efc <xQueueGenericCreateStatic>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	4a08      	ldr	r2, [pc, #32]	@ (8008f80 <prvCheckForValidListAndQueue+0x60>)
 8008f5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008f60:	4b07      	ldr	r3, [pc, #28]	@ (8008f80 <prvCheckForValidListAndQueue+0x60>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d005      	beq.n	8008f74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008f68:	4b05      	ldr	r3, [pc, #20]	@ (8008f80 <prvCheckForValidListAndQueue+0x60>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	490b      	ldr	r1, [pc, #44]	@ (8008f9c <prvCheckForValidListAndQueue+0x7c>)
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7fe fcb4 	bl	80078dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f74:	f000 f99a 	bl	80092ac <vPortExitCritical>
}
 8008f78:	bf00      	nop
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	20001040 	.word	0x20001040
 8008f84:	20001010 	.word	0x20001010
 8008f88:	20001024 	.word	0x20001024
 8008f8c:	20001038 	.word	0x20001038
 8008f90:	2000103c 	.word	0x2000103c
 8008f94:	200010ec 	.word	0x200010ec
 8008f98:	2000104c 	.word	0x2000104c
 8008f9c:	080099dc 	.word	0x080099dc

08008fa0 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b086      	sub	sp, #24
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10b      	bne.n	8008fca <pvTimerGetTimerID+0x2a>
	__asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	60fb      	str	r3, [r7, #12]
}
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop
 8008fc8:	e7fd      	b.n	8008fc6 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008fca:	f000 f93d 	bl	8009248 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008fd4:	f000 f96a 	bl	80092ac <vPortExitCritical>

	return pvReturn;
 8008fd8:	693b      	ldr	r3, [r7, #16]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3718      	adds	r7, #24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
	...

08008fe4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b085      	sub	sp, #20
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	60f8      	str	r0, [r7, #12]
 8008fec:	60b9      	str	r1, [r7, #8]
 8008fee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	3b04      	subs	r3, #4
 8008ff4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008ffc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	3b04      	subs	r3, #4
 8009002:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	f023 0201 	bic.w	r2, r3, #1
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	3b04      	subs	r3, #4
 8009012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009014:	4a0c      	ldr	r2, [pc, #48]	@ (8009048 <pxPortInitialiseStack+0x64>)
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	3b14      	subs	r3, #20
 800901e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009020:	687a      	ldr	r2, [r7, #4]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	3b04      	subs	r3, #4
 800902a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	f06f 0202 	mvn.w	r2, #2
 8009032:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	3b20      	subs	r3, #32
 8009038:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800903a:	68fb      	ldr	r3, [r7, #12]
}
 800903c:	4618      	mov	r0, r3
 800903e:	3714      	adds	r7, #20
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr
 8009048:	0800904d 	.word	0x0800904d

0800904c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009052:	2300      	movs	r3, #0
 8009054:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009056:	4b13      	ldr	r3, [pc, #76]	@ (80090a4 <prvTaskExitError+0x58>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800905e:	d00b      	beq.n	8009078 <prvTaskExitError+0x2c>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	60fb      	str	r3, [r7, #12]
}
 8009072:	bf00      	nop
 8009074:	bf00      	nop
 8009076:	e7fd      	b.n	8009074 <prvTaskExitError+0x28>
	__asm volatile
 8009078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907c:	f383 8811 	msr	BASEPRI, r3
 8009080:	f3bf 8f6f 	isb	sy
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	60bb      	str	r3, [r7, #8]
}
 800908a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800908c:	bf00      	nop
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0fc      	beq.n	800908e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009094:	bf00      	nop
 8009096:	bf00      	nop
 8009098:	3714      	adds	r7, #20
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	2000005c 	.word	0x2000005c
	...

080090b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80090b0:	4b07      	ldr	r3, [pc, #28]	@ (80090d0 <pxCurrentTCBConst2>)
 80090b2:	6819      	ldr	r1, [r3, #0]
 80090b4:	6808      	ldr	r0, [r1, #0]
 80090b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ba:	f380 8809 	msr	PSP, r0
 80090be:	f3bf 8f6f 	isb	sy
 80090c2:	f04f 0000 	mov.w	r0, #0
 80090c6:	f380 8811 	msr	BASEPRI, r0
 80090ca:	4770      	bx	lr
 80090cc:	f3af 8000 	nop.w

080090d0 <pxCurrentTCBConst2>:
 80090d0:	20000b10 	.word	0x20000b10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80090d4:	bf00      	nop
 80090d6:	bf00      	nop

080090d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80090d8:	4808      	ldr	r0, [pc, #32]	@ (80090fc <prvPortStartFirstTask+0x24>)
 80090da:	6800      	ldr	r0, [r0, #0]
 80090dc:	6800      	ldr	r0, [r0, #0]
 80090de:	f380 8808 	msr	MSP, r0
 80090e2:	f04f 0000 	mov.w	r0, #0
 80090e6:	f380 8814 	msr	CONTROL, r0
 80090ea:	b662      	cpsie	i
 80090ec:	b661      	cpsie	f
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	f3bf 8f6f 	isb	sy
 80090f6:	df00      	svc	0
 80090f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80090fa:	bf00      	nop
 80090fc:	e000ed08 	.word	0xe000ed08

08009100 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009106:	4b47      	ldr	r3, [pc, #284]	@ (8009224 <xPortStartScheduler+0x124>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	4a47      	ldr	r2, [pc, #284]	@ (8009228 <xPortStartScheduler+0x128>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d10b      	bne.n	8009128 <xPortStartScheduler+0x28>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	60fb      	str	r3, [r7, #12]
}
 8009122:	bf00      	nop
 8009124:	bf00      	nop
 8009126:	e7fd      	b.n	8009124 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009128:	4b3e      	ldr	r3, [pc, #248]	@ (8009224 <xPortStartScheduler+0x124>)
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4a3f      	ldr	r2, [pc, #252]	@ (800922c <xPortStartScheduler+0x12c>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d10b      	bne.n	800914a <xPortStartScheduler+0x4a>
	__asm volatile
 8009132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009136:	f383 8811 	msr	BASEPRI, r3
 800913a:	f3bf 8f6f 	isb	sy
 800913e:	f3bf 8f4f 	dsb	sy
 8009142:	613b      	str	r3, [r7, #16]
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop
 8009148:	e7fd      	b.n	8009146 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800914a:	4b39      	ldr	r3, [pc, #228]	@ (8009230 <xPortStartScheduler+0x130>)
 800914c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	b2db      	uxtb	r3, r3
 8009154:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	22ff      	movs	r2, #255	@ 0xff
 800915a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	b2db      	uxtb	r3, r3
 8009162:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009164:	78fb      	ldrb	r3, [r7, #3]
 8009166:	b2db      	uxtb	r3, r3
 8009168:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800916c:	b2da      	uxtb	r2, r3
 800916e:	4b31      	ldr	r3, [pc, #196]	@ (8009234 <xPortStartScheduler+0x134>)
 8009170:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009172:	4b31      	ldr	r3, [pc, #196]	@ (8009238 <xPortStartScheduler+0x138>)
 8009174:	2207      	movs	r2, #7
 8009176:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009178:	e009      	b.n	800918e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800917a:	4b2f      	ldr	r3, [pc, #188]	@ (8009238 <xPortStartScheduler+0x138>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	3b01      	subs	r3, #1
 8009180:	4a2d      	ldr	r2, [pc, #180]	@ (8009238 <xPortStartScheduler+0x138>)
 8009182:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009184:	78fb      	ldrb	r3, [r7, #3]
 8009186:	b2db      	uxtb	r3, r3
 8009188:	005b      	lsls	r3, r3, #1
 800918a:	b2db      	uxtb	r3, r3
 800918c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800918e:	78fb      	ldrb	r3, [r7, #3]
 8009190:	b2db      	uxtb	r3, r3
 8009192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009196:	2b80      	cmp	r3, #128	@ 0x80
 8009198:	d0ef      	beq.n	800917a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800919a:	4b27      	ldr	r3, [pc, #156]	@ (8009238 <xPortStartScheduler+0x138>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f1c3 0307 	rsb	r3, r3, #7
 80091a2:	2b04      	cmp	r3, #4
 80091a4:	d00b      	beq.n	80091be <xPortStartScheduler+0xbe>
	__asm volatile
 80091a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091aa:	f383 8811 	msr	BASEPRI, r3
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	f3bf 8f4f 	dsb	sy
 80091b6:	60bb      	str	r3, [r7, #8]
}
 80091b8:	bf00      	nop
 80091ba:	bf00      	nop
 80091bc:	e7fd      	b.n	80091ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80091be:	4b1e      	ldr	r3, [pc, #120]	@ (8009238 <xPortStartScheduler+0x138>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	021b      	lsls	r3, r3, #8
 80091c4:	4a1c      	ldr	r2, [pc, #112]	@ (8009238 <xPortStartScheduler+0x138>)
 80091c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80091c8:	4b1b      	ldr	r3, [pc, #108]	@ (8009238 <xPortStartScheduler+0x138>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80091d0:	4a19      	ldr	r2, [pc, #100]	@ (8009238 <xPortStartScheduler+0x138>)
 80091d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	b2da      	uxtb	r2, r3
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80091dc:	4b17      	ldr	r3, [pc, #92]	@ (800923c <xPortStartScheduler+0x13c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a16      	ldr	r2, [pc, #88]	@ (800923c <xPortStartScheduler+0x13c>)
 80091e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80091e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80091e8:	4b14      	ldr	r3, [pc, #80]	@ (800923c <xPortStartScheduler+0x13c>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a13      	ldr	r2, [pc, #76]	@ (800923c <xPortStartScheduler+0x13c>)
 80091ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80091f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80091f4:	f000 f8da 	bl	80093ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80091f8:	4b11      	ldr	r3, [pc, #68]	@ (8009240 <xPortStartScheduler+0x140>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80091fe:	f000 f8f9 	bl	80093f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009202:	4b10      	ldr	r3, [pc, #64]	@ (8009244 <xPortStartScheduler+0x144>)
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	4a0f      	ldr	r2, [pc, #60]	@ (8009244 <xPortStartScheduler+0x144>)
 8009208:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800920c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800920e:	f7ff ff63 	bl	80090d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009212:	f7fe ff7b 	bl	800810c <vTaskSwitchContext>
	prvTaskExitError();
 8009216:	f7ff ff19 	bl	800904c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3718      	adds	r7, #24
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}
 8009224:	e000ed00 	.word	0xe000ed00
 8009228:	410fc271 	.word	0x410fc271
 800922c:	410fc270 	.word	0x410fc270
 8009230:	e000e400 	.word	0xe000e400
 8009234:	2000113c 	.word	0x2000113c
 8009238:	20001140 	.word	0x20001140
 800923c:	e000ed20 	.word	0xe000ed20
 8009240:	2000005c 	.word	0x2000005c
 8009244:	e000ef34 	.word	0xe000ef34

08009248 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
	__asm volatile
 800924e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009252:	f383 8811 	msr	BASEPRI, r3
 8009256:	f3bf 8f6f 	isb	sy
 800925a:	f3bf 8f4f 	dsb	sy
 800925e:	607b      	str	r3, [r7, #4]
}
 8009260:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009262:	4b10      	ldr	r3, [pc, #64]	@ (80092a4 <vPortEnterCritical+0x5c>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3301      	adds	r3, #1
 8009268:	4a0e      	ldr	r2, [pc, #56]	@ (80092a4 <vPortEnterCritical+0x5c>)
 800926a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800926c:	4b0d      	ldr	r3, [pc, #52]	@ (80092a4 <vPortEnterCritical+0x5c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d110      	bne.n	8009296 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009274:	4b0c      	ldr	r3, [pc, #48]	@ (80092a8 <vPortEnterCritical+0x60>)
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00b      	beq.n	8009296 <vPortEnterCritical+0x4e>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	603b      	str	r3, [r7, #0]
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	e7fd      	b.n	8009292 <vPortEnterCritical+0x4a>
	}
}
 8009296:	bf00      	nop
 8009298:	370c      	adds	r7, #12
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	2000005c 	.word	0x2000005c
 80092a8:	e000ed04 	.word	0xe000ed04

080092ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80092ac:	b480      	push	{r7}
 80092ae:	b083      	sub	sp, #12
 80092b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80092b2:	4b12      	ldr	r3, [pc, #72]	@ (80092fc <vPortExitCritical+0x50>)
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10b      	bne.n	80092d2 <vPortExitCritical+0x26>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092be:	f383 8811 	msr	BASEPRI, r3
 80092c2:	f3bf 8f6f 	isb	sy
 80092c6:	f3bf 8f4f 	dsb	sy
 80092ca:	607b      	str	r3, [r7, #4]
}
 80092cc:	bf00      	nop
 80092ce:	bf00      	nop
 80092d0:	e7fd      	b.n	80092ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80092d2:	4b0a      	ldr	r3, [pc, #40]	@ (80092fc <vPortExitCritical+0x50>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3b01      	subs	r3, #1
 80092d8:	4a08      	ldr	r2, [pc, #32]	@ (80092fc <vPortExitCritical+0x50>)
 80092da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80092dc:	4b07      	ldr	r3, [pc, #28]	@ (80092fc <vPortExitCritical+0x50>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d105      	bne.n	80092f0 <vPortExitCritical+0x44>
 80092e4:	2300      	movs	r3, #0
 80092e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	f383 8811 	msr	BASEPRI, r3
}
 80092ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80092f0:	bf00      	nop
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	2000005c 	.word	0x2000005c

08009300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009300:	f3ef 8009 	mrs	r0, PSP
 8009304:	f3bf 8f6f 	isb	sy
 8009308:	4b15      	ldr	r3, [pc, #84]	@ (8009360 <pxCurrentTCBConst>)
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	f01e 0f10 	tst.w	lr, #16
 8009310:	bf08      	it	eq
 8009312:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009316:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931a:	6010      	str	r0, [r2, #0]
 800931c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009320:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009324:	f380 8811 	msr	BASEPRI, r0
 8009328:	f3bf 8f4f 	dsb	sy
 800932c:	f3bf 8f6f 	isb	sy
 8009330:	f7fe feec 	bl	800810c <vTaskSwitchContext>
 8009334:	f04f 0000 	mov.w	r0, #0
 8009338:	f380 8811 	msr	BASEPRI, r0
 800933c:	bc09      	pop	{r0, r3}
 800933e:	6819      	ldr	r1, [r3, #0]
 8009340:	6808      	ldr	r0, [r1, #0]
 8009342:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009346:	f01e 0f10 	tst.w	lr, #16
 800934a:	bf08      	it	eq
 800934c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009350:	f380 8809 	msr	PSP, r0
 8009354:	f3bf 8f6f 	isb	sy
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	f3af 8000 	nop.w

08009360 <pxCurrentTCBConst>:
 8009360:	20000b10 	.word	0x20000b10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop

08009368 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	607b      	str	r3, [r7, #4]
}
 8009380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009382:	f7fe fe09 	bl	8007f98 <xTaskIncrementTick>
 8009386:	4603      	mov	r3, r0
 8009388:	2b00      	cmp	r3, #0
 800938a:	d003      	beq.n	8009394 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800938c:	4b06      	ldr	r3, [pc, #24]	@ (80093a8 <xPortSysTickHandler+0x40>)
 800938e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009392:	601a      	str	r2, [r3, #0]
 8009394:	2300      	movs	r3, #0
 8009396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	f383 8811 	msr	BASEPRI, r3
}
 800939e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80093a0:	bf00      	nop
 80093a2:	3708      	adds	r7, #8
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}
 80093a8:	e000ed04 	.word	0xe000ed04

080093ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80093ac:	b480      	push	{r7}
 80093ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80093b0:	4b0b      	ldr	r3, [pc, #44]	@ (80093e0 <vPortSetupTimerInterrupt+0x34>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80093b6:	4b0b      	ldr	r3, [pc, #44]	@ (80093e4 <vPortSetupTimerInterrupt+0x38>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80093bc:	4b0a      	ldr	r3, [pc, #40]	@ (80093e8 <vPortSetupTimerInterrupt+0x3c>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4a0a      	ldr	r2, [pc, #40]	@ (80093ec <vPortSetupTimerInterrupt+0x40>)
 80093c2:	fba2 2303 	umull	r2, r3, r2, r3
 80093c6:	099b      	lsrs	r3, r3, #6
 80093c8:	4a09      	ldr	r2, [pc, #36]	@ (80093f0 <vPortSetupTimerInterrupt+0x44>)
 80093ca:	3b01      	subs	r3, #1
 80093cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80093ce:	4b04      	ldr	r3, [pc, #16]	@ (80093e0 <vPortSetupTimerInterrupt+0x34>)
 80093d0:	2207      	movs	r2, #7
 80093d2:	601a      	str	r2, [r3, #0]
}
 80093d4:	bf00      	nop
 80093d6:	46bd      	mov	sp, r7
 80093d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093dc:	4770      	bx	lr
 80093de:	bf00      	nop
 80093e0:	e000e010 	.word	0xe000e010
 80093e4:	e000e018 	.word	0xe000e018
 80093e8:	20000050 	.word	0x20000050
 80093ec:	10624dd3 	.word	0x10624dd3
 80093f0:	e000e014 	.word	0xe000e014

080093f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80093f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009404 <vPortEnableVFP+0x10>
 80093f8:	6801      	ldr	r1, [r0, #0]
 80093fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80093fe:	6001      	str	r1, [r0, #0]
 8009400:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009402:	bf00      	nop
 8009404:	e000ed88 	.word	0xe000ed88

08009408 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009408:	b480      	push	{r7}
 800940a:	b085      	sub	sp, #20
 800940c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800940e:	f3ef 8305 	mrs	r3, IPSR
 8009412:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2b0f      	cmp	r3, #15
 8009418:	d915      	bls.n	8009446 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800941a:	4a18      	ldr	r2, [pc, #96]	@ (800947c <vPortValidateInterruptPriority+0x74>)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	4413      	add	r3, r2
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009424:	4b16      	ldr	r3, [pc, #88]	@ (8009480 <vPortValidateInterruptPriority+0x78>)
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	7afa      	ldrb	r2, [r7, #11]
 800942a:	429a      	cmp	r2, r3
 800942c:	d20b      	bcs.n	8009446 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800942e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009432:	f383 8811 	msr	BASEPRI, r3
 8009436:	f3bf 8f6f 	isb	sy
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	607b      	str	r3, [r7, #4]
}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	e7fd      	b.n	8009442 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009446:	4b0f      	ldr	r3, [pc, #60]	@ (8009484 <vPortValidateInterruptPriority+0x7c>)
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800944e:	4b0e      	ldr	r3, [pc, #56]	@ (8009488 <vPortValidateInterruptPriority+0x80>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	429a      	cmp	r2, r3
 8009454:	d90b      	bls.n	800946e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009456:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800945a:	f383 8811 	msr	BASEPRI, r3
 800945e:	f3bf 8f6f 	isb	sy
 8009462:	f3bf 8f4f 	dsb	sy
 8009466:	603b      	str	r3, [r7, #0]
}
 8009468:	bf00      	nop
 800946a:	bf00      	nop
 800946c:	e7fd      	b.n	800946a <vPortValidateInterruptPriority+0x62>
	}
 800946e:	bf00      	nop
 8009470:	3714      	adds	r7, #20
 8009472:	46bd      	mov	sp, r7
 8009474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009478:	4770      	bx	lr
 800947a:	bf00      	nop
 800947c:	e000e3f0 	.word	0xe000e3f0
 8009480:	2000113c 	.word	0x2000113c
 8009484:	e000ed0c 	.word	0xe000ed0c
 8009488:	20001140 	.word	0x20001140

0800948c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b08a      	sub	sp, #40	@ 0x28
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009494:	2300      	movs	r3, #0
 8009496:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009498:	f7fe fcc2 	bl	8007e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800949c:	4b5c      	ldr	r3, [pc, #368]	@ (8009610 <pvPortMalloc+0x184>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80094a4:	f000 f924 	bl	80096f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80094a8:	4b5a      	ldr	r3, [pc, #360]	@ (8009614 <pvPortMalloc+0x188>)
 80094aa:	681a      	ldr	r2, [r3, #0]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	4013      	ands	r3, r2
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f040 8095 	bne.w	80095e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d01e      	beq.n	80094fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80094bc:	2208      	movs	r2, #8
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	4413      	add	r3, r2
 80094c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	f003 0307 	and.w	r3, r3, #7
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d015      	beq.n	80094fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f023 0307 	bic.w	r3, r3, #7
 80094d4:	3308      	adds	r3, #8
 80094d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f003 0307 	and.w	r3, r3, #7
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d00b      	beq.n	80094fa <pvPortMalloc+0x6e>
	__asm volatile
 80094e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094e6:	f383 8811 	msr	BASEPRI, r3
 80094ea:	f3bf 8f6f 	isb	sy
 80094ee:	f3bf 8f4f 	dsb	sy
 80094f2:	617b      	str	r3, [r7, #20]
}
 80094f4:	bf00      	nop
 80094f6:	bf00      	nop
 80094f8:	e7fd      	b.n	80094f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d06f      	beq.n	80095e0 <pvPortMalloc+0x154>
 8009500:	4b45      	ldr	r3, [pc, #276]	@ (8009618 <pvPortMalloc+0x18c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	687a      	ldr	r2, [r7, #4]
 8009506:	429a      	cmp	r2, r3
 8009508:	d86a      	bhi.n	80095e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800950a:	4b44      	ldr	r3, [pc, #272]	@ (800961c <pvPortMalloc+0x190>)
 800950c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800950e:	4b43      	ldr	r3, [pc, #268]	@ (800961c <pvPortMalloc+0x190>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009514:	e004      	b.n	8009520 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009518:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800951a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	429a      	cmp	r2, r3
 8009528:	d903      	bls.n	8009532 <pvPortMalloc+0xa6>
 800952a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1f1      	bne.n	8009516 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009532:	4b37      	ldr	r3, [pc, #220]	@ (8009610 <pvPortMalloc+0x184>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009538:	429a      	cmp	r2, r3
 800953a:	d051      	beq.n	80095e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800953c:	6a3b      	ldr	r3, [r7, #32]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	2208      	movs	r2, #8
 8009542:	4413      	add	r3, r2
 8009544:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800954e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009550:	685a      	ldr	r2, [r3, #4]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	1ad2      	subs	r2, r2, r3
 8009556:	2308      	movs	r3, #8
 8009558:	005b      	lsls	r3, r3, #1
 800955a:	429a      	cmp	r2, r3
 800955c:	d920      	bls.n	80095a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800955e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4413      	add	r3, r2
 8009564:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009566:	69bb      	ldr	r3, [r7, #24]
 8009568:	f003 0307 	and.w	r3, r3, #7
 800956c:	2b00      	cmp	r3, #0
 800956e:	d00b      	beq.n	8009588 <pvPortMalloc+0xfc>
	__asm volatile
 8009570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009574:	f383 8811 	msr	BASEPRI, r3
 8009578:	f3bf 8f6f 	isb	sy
 800957c:	f3bf 8f4f 	dsb	sy
 8009580:	613b      	str	r3, [r7, #16]
}
 8009582:	bf00      	nop
 8009584:	bf00      	nop
 8009586:	e7fd      	b.n	8009584 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	1ad2      	subs	r2, r2, r3
 8009590:	69bb      	ldr	r3, [r7, #24]
 8009592:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800959a:	69b8      	ldr	r0, [r7, #24]
 800959c:	f000 f90a 	bl	80097b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80095a0:	4b1d      	ldr	r3, [pc, #116]	@ (8009618 <pvPortMalloc+0x18c>)
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	685b      	ldr	r3, [r3, #4]
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	4a1b      	ldr	r2, [pc, #108]	@ (8009618 <pvPortMalloc+0x18c>)
 80095ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80095ae:	4b1a      	ldr	r3, [pc, #104]	@ (8009618 <pvPortMalloc+0x18c>)
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	4b1b      	ldr	r3, [pc, #108]	@ (8009620 <pvPortMalloc+0x194>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d203      	bcs.n	80095c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80095ba:	4b17      	ldr	r3, [pc, #92]	@ (8009618 <pvPortMalloc+0x18c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	4a18      	ldr	r2, [pc, #96]	@ (8009620 <pvPortMalloc+0x194>)
 80095c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80095c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095c4:	685a      	ldr	r2, [r3, #4]
 80095c6:	4b13      	ldr	r3, [pc, #76]	@ (8009614 <pvPortMalloc+0x188>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	431a      	orrs	r2, r3
 80095cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80095d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095d2:	2200      	movs	r2, #0
 80095d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80095d6:	4b13      	ldr	r3, [pc, #76]	@ (8009624 <pvPortMalloc+0x198>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	3301      	adds	r3, #1
 80095dc:	4a11      	ldr	r2, [pc, #68]	@ (8009624 <pvPortMalloc+0x198>)
 80095de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80095e0:	f7fe fc2c 	bl	8007e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	f003 0307 	and.w	r3, r3, #7
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00b      	beq.n	8009606 <pvPortMalloc+0x17a>
	__asm volatile
 80095ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095f2:	f383 8811 	msr	BASEPRI, r3
 80095f6:	f3bf 8f6f 	isb	sy
 80095fa:	f3bf 8f4f 	dsb	sy
 80095fe:	60fb      	str	r3, [r7, #12]
}
 8009600:	bf00      	nop
 8009602:	bf00      	nop
 8009604:	e7fd      	b.n	8009602 <pvPortMalloc+0x176>
	return pvReturn;
 8009606:	69fb      	ldr	r3, [r7, #28]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3728      	adds	r7, #40	@ 0x28
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	20001d04 	.word	0x20001d04
 8009614:	20001d18 	.word	0x20001d18
 8009618:	20001d08 	.word	0x20001d08
 800961c:	20001cfc 	.word	0x20001cfc
 8009620:	20001d0c 	.word	0x20001d0c
 8009624:	20001d10 	.word	0x20001d10

08009628 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b086      	sub	sp, #24
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d04f      	beq.n	80096da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800963a:	2308      	movs	r3, #8
 800963c:	425b      	negs	r3, r3
 800963e:	697a      	ldr	r2, [r7, #20]
 8009640:	4413      	add	r3, r2
 8009642:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	4b25      	ldr	r3, [pc, #148]	@ (80096e4 <vPortFree+0xbc>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4013      	ands	r3, r2
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10b      	bne.n	800966e <vPortFree+0x46>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	60fb      	str	r3, [r7, #12]
}
 8009668:	bf00      	nop
 800966a:	bf00      	nop
 800966c:	e7fd      	b.n	800966a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d00b      	beq.n	800968e <vPortFree+0x66>
	__asm volatile
 8009676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800967a:	f383 8811 	msr	BASEPRI, r3
 800967e:	f3bf 8f6f 	isb	sy
 8009682:	f3bf 8f4f 	dsb	sy
 8009686:	60bb      	str	r3, [r7, #8]
}
 8009688:	bf00      	nop
 800968a:	bf00      	nop
 800968c:	e7fd      	b.n	800968a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800968e:	693b      	ldr	r3, [r7, #16]
 8009690:	685a      	ldr	r2, [r3, #4]
 8009692:	4b14      	ldr	r3, [pc, #80]	@ (80096e4 <vPortFree+0xbc>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4013      	ands	r3, r2
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01e      	beq.n	80096da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d11a      	bne.n	80096da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	4b0e      	ldr	r3, [pc, #56]	@ (80096e4 <vPortFree+0xbc>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	43db      	mvns	r3, r3
 80096ae:	401a      	ands	r2, r3
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80096b4:	f7fe fbb4 	bl	8007e20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	685a      	ldr	r2, [r3, #4]
 80096bc:	4b0a      	ldr	r3, [pc, #40]	@ (80096e8 <vPortFree+0xc0>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	4413      	add	r3, r2
 80096c2:	4a09      	ldr	r2, [pc, #36]	@ (80096e8 <vPortFree+0xc0>)
 80096c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80096c6:	6938      	ldr	r0, [r7, #16]
 80096c8:	f000 f874 	bl	80097b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80096cc:	4b07      	ldr	r3, [pc, #28]	@ (80096ec <vPortFree+0xc4>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	3301      	adds	r3, #1
 80096d2:	4a06      	ldr	r2, [pc, #24]	@ (80096ec <vPortFree+0xc4>)
 80096d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80096d6:	f7fe fbb1 	bl	8007e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80096da:	bf00      	nop
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	20001d18 	.word	0x20001d18
 80096e8:	20001d08 	.word	0x20001d08
 80096ec:	20001d14 	.word	0x20001d14

080096f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80096f6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80096fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80096fc:	4b27      	ldr	r3, [pc, #156]	@ (800979c <prvHeapInit+0xac>)
 80096fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	f003 0307 	and.w	r3, r3, #7
 8009706:	2b00      	cmp	r3, #0
 8009708:	d00c      	beq.n	8009724 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	3307      	adds	r3, #7
 800970e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	f023 0307 	bic.w	r3, r3, #7
 8009716:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009718:	68ba      	ldr	r2, [r7, #8]
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	4a1f      	ldr	r2, [pc, #124]	@ (800979c <prvHeapInit+0xac>)
 8009720:	4413      	add	r3, r2
 8009722:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009728:	4a1d      	ldr	r2, [pc, #116]	@ (80097a0 <prvHeapInit+0xb0>)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800972e:	4b1c      	ldr	r3, [pc, #112]	@ (80097a0 <prvHeapInit+0xb0>)
 8009730:	2200      	movs	r2, #0
 8009732:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	68ba      	ldr	r2, [r7, #8]
 8009738:	4413      	add	r3, r2
 800973a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800973c:	2208      	movs	r2, #8
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	1a9b      	subs	r3, r3, r2
 8009742:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f023 0307 	bic.w	r3, r3, #7
 800974a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	4a15      	ldr	r2, [pc, #84]	@ (80097a4 <prvHeapInit+0xb4>)
 8009750:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009752:	4b14      	ldr	r3, [pc, #80]	@ (80097a4 <prvHeapInit+0xb4>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2200      	movs	r2, #0
 8009758:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800975a:	4b12      	ldr	r3, [pc, #72]	@ (80097a4 <prvHeapInit+0xb4>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	2200      	movs	r2, #0
 8009760:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	1ad2      	subs	r2, r2, r3
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009770:	4b0c      	ldr	r3, [pc, #48]	@ (80097a4 <prvHeapInit+0xb4>)
 8009772:	681a      	ldr	r2, [r3, #0]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685b      	ldr	r3, [r3, #4]
 800977c:	4a0a      	ldr	r2, [pc, #40]	@ (80097a8 <prvHeapInit+0xb8>)
 800977e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	4a09      	ldr	r2, [pc, #36]	@ (80097ac <prvHeapInit+0xbc>)
 8009786:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009788:	4b09      	ldr	r3, [pc, #36]	@ (80097b0 <prvHeapInit+0xc0>)
 800978a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800978e:	601a      	str	r2, [r3, #0]
}
 8009790:	bf00      	nop
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	20001144 	.word	0x20001144
 80097a0:	20001cfc 	.word	0x20001cfc
 80097a4:	20001d04 	.word	0x20001d04
 80097a8:	20001d0c 	.word	0x20001d0c
 80097ac:	20001d08 	.word	0x20001d08
 80097b0:	20001d18 	.word	0x20001d18

080097b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80097b4:	b480      	push	{r7}
 80097b6:	b085      	sub	sp, #20
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80097bc:	4b28      	ldr	r3, [pc, #160]	@ (8009860 <prvInsertBlockIntoFreeList+0xac>)
 80097be:	60fb      	str	r3, [r7, #12]
 80097c0:	e002      	b.n	80097c8 <prvInsertBlockIntoFreeList+0x14>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	60fb      	str	r3, [r7, #12]
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	429a      	cmp	r2, r3
 80097d0:	d8f7      	bhi.n	80097c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	4413      	add	r3, r2
 80097de:	687a      	ldr	r2, [r7, #4]
 80097e0:	429a      	cmp	r2, r3
 80097e2:	d108      	bne.n	80097f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	685a      	ldr	r2, [r3, #4]
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	441a      	add	r2, r3
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	685b      	ldr	r3, [r3, #4]
 80097fe:	68ba      	ldr	r2, [r7, #8]
 8009800:	441a      	add	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	429a      	cmp	r2, r3
 8009808:	d118      	bne.n	800983c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	4b15      	ldr	r3, [pc, #84]	@ (8009864 <prvInsertBlockIntoFreeList+0xb0>)
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	429a      	cmp	r2, r3
 8009814:	d00d      	beq.n	8009832 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	685a      	ldr	r2, [r3, #4]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	685b      	ldr	r3, [r3, #4]
 8009820:	441a      	add	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	e008      	b.n	8009844 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009832:	4b0c      	ldr	r3, [pc, #48]	@ (8009864 <prvInsertBlockIntoFreeList+0xb0>)
 8009834:	681a      	ldr	r2, [r3, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	601a      	str	r2, [r3, #0]
 800983a:	e003      	b.n	8009844 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009844:	68fa      	ldr	r2, [r7, #12]
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	429a      	cmp	r2, r3
 800984a:	d002      	beq.n	8009852 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	687a      	ldr	r2, [r7, #4]
 8009850:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009852:	bf00      	nop
 8009854:	3714      	adds	r7, #20
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
 800985e:	bf00      	nop
 8009860:	20001cfc 	.word	0x20001cfc
 8009864:	20001d04 	.word	0x20001d04

08009868 <memset>:
 8009868:	4402      	add	r2, r0
 800986a:	4603      	mov	r3, r0
 800986c:	4293      	cmp	r3, r2
 800986e:	d100      	bne.n	8009872 <memset+0xa>
 8009870:	4770      	bx	lr
 8009872:	f803 1b01 	strb.w	r1, [r3], #1
 8009876:	e7f9      	b.n	800986c <memset+0x4>

08009878 <__libc_init_array>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	4d0d      	ldr	r5, [pc, #52]	@ (80098b0 <__libc_init_array+0x38>)
 800987c:	4c0d      	ldr	r4, [pc, #52]	@ (80098b4 <__libc_init_array+0x3c>)
 800987e:	1b64      	subs	r4, r4, r5
 8009880:	10a4      	asrs	r4, r4, #2
 8009882:	2600      	movs	r6, #0
 8009884:	42a6      	cmp	r6, r4
 8009886:	d109      	bne.n	800989c <__libc_init_array+0x24>
 8009888:	4d0b      	ldr	r5, [pc, #44]	@ (80098b8 <__libc_init_array+0x40>)
 800988a:	4c0c      	ldr	r4, [pc, #48]	@ (80098bc <__libc_init_array+0x44>)
 800988c:	f000 f826 	bl	80098dc <_init>
 8009890:	1b64      	subs	r4, r4, r5
 8009892:	10a4      	asrs	r4, r4, #2
 8009894:	2600      	movs	r6, #0
 8009896:	42a6      	cmp	r6, r4
 8009898:	d105      	bne.n	80098a6 <__libc_init_array+0x2e>
 800989a:	bd70      	pop	{r4, r5, r6, pc}
 800989c:	f855 3b04 	ldr.w	r3, [r5], #4
 80098a0:	4798      	blx	r3
 80098a2:	3601      	adds	r6, #1
 80098a4:	e7ee      	b.n	8009884 <__libc_init_array+0xc>
 80098a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098aa:	4798      	blx	r3
 80098ac:	3601      	adds	r6, #1
 80098ae:	e7f2      	b.n	8009896 <__libc_init_array+0x1e>
 80098b0:	08009acc 	.word	0x08009acc
 80098b4:	08009acc 	.word	0x08009acc
 80098b8:	08009acc 	.word	0x08009acc
 80098bc:	08009ad0 	.word	0x08009ad0

080098c0 <memcpy>:
 80098c0:	440a      	add	r2, r1
 80098c2:	4291      	cmp	r1, r2
 80098c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80098c8:	d100      	bne.n	80098cc <memcpy+0xc>
 80098ca:	4770      	bx	lr
 80098cc:	b510      	push	{r4, lr}
 80098ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80098d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80098d6:	4291      	cmp	r1, r2
 80098d8:	d1f9      	bne.n	80098ce <memcpy+0xe>
 80098da:	bd10      	pop	{r4, pc}

080098dc <_init>:
 80098dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098de:	bf00      	nop
 80098e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098e2:	bc08      	pop	{r3}
 80098e4:	469e      	mov	lr, r3
 80098e6:	4770      	bx	lr

080098e8 <_fini>:
 80098e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ea:	bf00      	nop
 80098ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ee:	bc08      	pop	{r3}
 80098f0:	469e      	mov	lr, r3
 80098f2:	4770      	bx	lr

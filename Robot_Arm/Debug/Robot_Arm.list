
Robot_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008db4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08008f44  08008f44  00009f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090e0  080090e0  0000b04c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080090e0  080090e0  0000a0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090e8  080090e8  0000b04c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090e8  080090e8  0000a0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080090ec  080090ec  0000a0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  080090f0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb0  2000004c  0800913c  0000b04c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bfc  0800913c  0000bbfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b04c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6ac  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b9  00000000  00000000  00025728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00028ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011fe  00000000  00000000  0002a3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c76  00000000  00000000  0002b5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001936a  00000000  00000000  0002f26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcf8a  00000000  00000000  000485d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145560  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b0  00000000  00000000  001455a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0014b854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000004c 	.word	0x2000004c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f2c 	.word	0x08008f2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000050 	.word	0x20000050
 80001cc:	08008f2c 	.word	0x08008f2c

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	@ 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2iz>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007a4:	d215      	bcs.n	80007d2 <__aeabi_d2iz+0x36>
 80007a6:	d511      	bpl.n	80007cc <__aeabi_d2iz+0x30>
 80007a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b0:	d912      	bls.n	80007d8 <__aeabi_d2iz+0x3c>
 80007b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	bf18      	it	ne
 80007c8:	4240      	negne	r0, r0
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d105      	bne.n	80007e4 <__aeabi_d2iz+0x48>
 80007d8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007dc:	bf08      	it	eq
 80007de:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000800:	f000 b988 	b.w	8000b14 <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9d08      	ldr	r5, [sp, #32]
 8000822:	468e      	mov	lr, r1
 8000824:	4604      	mov	r4, r0
 8000826:	4688      	mov	r8, r1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d14a      	bne.n	80008c2 <__udivmoddi4+0xa6>
 800082c:	428a      	cmp	r2, r1
 800082e:	4617      	mov	r7, r2
 8000830:	d962      	bls.n	80008f8 <__udivmoddi4+0xdc>
 8000832:	fab2 f682 	clz	r6, r2
 8000836:	b14e      	cbz	r6, 800084c <__udivmoddi4+0x30>
 8000838:	f1c6 0320 	rsb	r3, r6, #32
 800083c:	fa01 f806 	lsl.w	r8, r1, r6
 8000840:	fa20 f303 	lsr.w	r3, r0, r3
 8000844:	40b7      	lsls	r7, r6
 8000846:	ea43 0808 	orr.w	r8, r3, r8
 800084a:	40b4      	lsls	r4, r6
 800084c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000850:	fa1f fc87 	uxth.w	ip, r7
 8000854:	fbb8 f1fe 	udiv	r1, r8, lr
 8000858:	0c23      	lsrs	r3, r4, #16
 800085a:	fb0e 8811 	mls	r8, lr, r1, r8
 800085e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000862:	fb01 f20c 	mul.w	r2, r1, ip
 8000866:	429a      	cmp	r2, r3
 8000868:	d909      	bls.n	800087e <__udivmoddi4+0x62>
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000870:	f080 80ea 	bcs.w	8000a48 <__udivmoddi4+0x22c>
 8000874:	429a      	cmp	r2, r3
 8000876:	f240 80e7 	bls.w	8000a48 <__udivmoddi4+0x22c>
 800087a:	3902      	subs	r1, #2
 800087c:	443b      	add	r3, r7
 800087e:	1a9a      	subs	r2, r3, r2
 8000880:	b2a3      	uxth	r3, r4
 8000882:	fbb2 f0fe 	udiv	r0, r2, lr
 8000886:	fb0e 2210 	mls	r2, lr, r0, r2
 800088a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800088e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000892:	459c      	cmp	ip, r3
 8000894:	d909      	bls.n	80008aa <__udivmoddi4+0x8e>
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	f100 32ff 	add.w	r2, r0, #4294967295
 800089c:	f080 80d6 	bcs.w	8000a4c <__udivmoddi4+0x230>
 80008a0:	459c      	cmp	ip, r3
 80008a2:	f240 80d3 	bls.w	8000a4c <__udivmoddi4+0x230>
 80008a6:	443b      	add	r3, r7
 80008a8:	3802      	subs	r0, #2
 80008aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008ae:	eba3 030c 	sub.w	r3, r3, ip
 80008b2:	2100      	movs	r1, #0
 80008b4:	b11d      	cbz	r5, 80008be <__udivmoddi4+0xa2>
 80008b6:	40f3      	lsrs	r3, r6
 80008b8:	2200      	movs	r2, #0
 80008ba:	e9c5 3200 	strd	r3, r2, [r5]
 80008be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d905      	bls.n	80008d2 <__udivmoddi4+0xb6>
 80008c6:	b10d      	cbz	r5, 80008cc <__udivmoddi4+0xb0>
 80008c8:	e9c5 0100 	strd	r0, r1, [r5]
 80008cc:	2100      	movs	r1, #0
 80008ce:	4608      	mov	r0, r1
 80008d0:	e7f5      	b.n	80008be <__udivmoddi4+0xa2>
 80008d2:	fab3 f183 	clz	r1, r3
 80008d6:	2900      	cmp	r1, #0
 80008d8:	d146      	bne.n	8000968 <__udivmoddi4+0x14c>
 80008da:	4573      	cmp	r3, lr
 80008dc:	d302      	bcc.n	80008e4 <__udivmoddi4+0xc8>
 80008de:	4282      	cmp	r2, r0
 80008e0:	f200 8105 	bhi.w	8000aee <__udivmoddi4+0x2d2>
 80008e4:	1a84      	subs	r4, r0, r2
 80008e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80008ea:	2001      	movs	r0, #1
 80008ec:	4690      	mov	r8, r2
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d0e5      	beq.n	80008be <__udivmoddi4+0xa2>
 80008f2:	e9c5 4800 	strd	r4, r8, [r5]
 80008f6:	e7e2      	b.n	80008be <__udivmoddi4+0xa2>
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	f000 8090 	beq.w	8000a1e <__udivmoddi4+0x202>
 80008fe:	fab2 f682 	clz	r6, r2
 8000902:	2e00      	cmp	r6, #0
 8000904:	f040 80a4 	bne.w	8000a50 <__udivmoddi4+0x234>
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	0c03      	lsrs	r3, r0, #16
 800090c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000910:	b280      	uxth	r0, r0
 8000912:	b2bc      	uxth	r4, r7
 8000914:	2101      	movs	r1, #1
 8000916:	fbb2 fcfe 	udiv	ip, r2, lr
 800091a:	fb0e 221c 	mls	r2, lr, ip, r2
 800091e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000922:	fb04 f20c 	mul.w	r2, r4, ip
 8000926:	429a      	cmp	r2, r3
 8000928:	d907      	bls.n	800093a <__udivmoddi4+0x11e>
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000930:	d202      	bcs.n	8000938 <__udivmoddi4+0x11c>
 8000932:	429a      	cmp	r2, r3
 8000934:	f200 80e0 	bhi.w	8000af8 <__udivmoddi4+0x2dc>
 8000938:	46c4      	mov	ip, r8
 800093a:	1a9b      	subs	r3, r3, r2
 800093c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000940:	fb0e 3312 	mls	r3, lr, r2, r3
 8000944:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000948:	fb02 f404 	mul.w	r4, r2, r4
 800094c:	429c      	cmp	r4, r3
 800094e:	d907      	bls.n	8000960 <__udivmoddi4+0x144>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f102 30ff 	add.w	r0, r2, #4294967295
 8000956:	d202      	bcs.n	800095e <__udivmoddi4+0x142>
 8000958:	429c      	cmp	r4, r3
 800095a:	f200 80ca 	bhi.w	8000af2 <__udivmoddi4+0x2d6>
 800095e:	4602      	mov	r2, r0
 8000960:	1b1b      	subs	r3, r3, r4
 8000962:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000966:	e7a5      	b.n	80008b4 <__udivmoddi4+0x98>
 8000968:	f1c1 0620 	rsb	r6, r1, #32
 800096c:	408b      	lsls	r3, r1
 800096e:	fa22 f706 	lsr.w	r7, r2, r6
 8000972:	431f      	orrs	r7, r3
 8000974:	fa0e f401 	lsl.w	r4, lr, r1
 8000978:	fa20 f306 	lsr.w	r3, r0, r6
 800097c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000980:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000984:	4323      	orrs	r3, r4
 8000986:	fa00 f801 	lsl.w	r8, r0, r1
 800098a:	fa1f fc87 	uxth.w	ip, r7
 800098e:	fbbe f0f9 	udiv	r0, lr, r9
 8000992:	0c1c      	lsrs	r4, r3, #16
 8000994:	fb09 ee10 	mls	lr, r9, r0, lr
 8000998:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800099c:	fb00 fe0c 	mul.w	lr, r0, ip
 80009a0:	45a6      	cmp	lr, r4
 80009a2:	fa02 f201 	lsl.w	r2, r2, r1
 80009a6:	d909      	bls.n	80009bc <__udivmoddi4+0x1a0>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80009ae:	f080 809c 	bcs.w	8000aea <__udivmoddi4+0x2ce>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f240 8099 	bls.w	8000aea <__udivmoddi4+0x2ce>
 80009b8:	3802      	subs	r0, #2
 80009ba:	443c      	add	r4, r7
 80009bc:	eba4 040e 	sub.w	r4, r4, lr
 80009c0:	fa1f fe83 	uxth.w	lr, r3
 80009c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80009c8:	fb09 4413 	mls	r4, r9, r3, r4
 80009cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80009d4:	45a4      	cmp	ip, r4
 80009d6:	d908      	bls.n	80009ea <__udivmoddi4+0x1ce>
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	f103 3eff 	add.w	lr, r3, #4294967295
 80009de:	f080 8082 	bcs.w	8000ae6 <__udivmoddi4+0x2ca>
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d97f      	bls.n	8000ae6 <__udivmoddi4+0x2ca>
 80009e6:	3b02      	subs	r3, #2
 80009e8:	443c      	add	r4, r7
 80009ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009ee:	eba4 040c 	sub.w	r4, r4, ip
 80009f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80009f6:	4564      	cmp	r4, ip
 80009f8:	4673      	mov	r3, lr
 80009fa:	46e1      	mov	r9, ip
 80009fc:	d362      	bcc.n	8000ac4 <__udivmoddi4+0x2a8>
 80009fe:	d05f      	beq.n	8000ac0 <__udivmoddi4+0x2a4>
 8000a00:	b15d      	cbz	r5, 8000a1a <__udivmoddi4+0x1fe>
 8000a02:	ebb8 0203 	subs.w	r2, r8, r3
 8000a06:	eb64 0409 	sbc.w	r4, r4, r9
 8000a0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000a12:	431e      	orrs	r6, r3
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	e9c5 6400 	strd	r6, r4, [r5]
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	e74f      	b.n	80008be <__udivmoddi4+0xa2>
 8000a1e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a22:	0c01      	lsrs	r1, r0, #16
 8000a24:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a28:	b280      	uxth	r0, r0
 8000a2a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4638      	mov	r0, r7
 8000a32:	463c      	mov	r4, r7
 8000a34:	46b8      	mov	r8, r7
 8000a36:	46be      	mov	lr, r7
 8000a38:	2620      	movs	r6, #32
 8000a3a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a3e:	eba2 0208 	sub.w	r2, r2, r8
 8000a42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a46:	e766      	b.n	8000916 <__udivmoddi4+0xfa>
 8000a48:	4601      	mov	r1, r0
 8000a4a:	e718      	b.n	800087e <__udivmoddi4+0x62>
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	e72c      	b.n	80008aa <__udivmoddi4+0x8e>
 8000a50:	f1c6 0220 	rsb	r2, r6, #32
 8000a54:	fa2e f302 	lsr.w	r3, lr, r2
 8000a58:	40b7      	lsls	r7, r6
 8000a5a:	40b1      	lsls	r1, r6
 8000a5c:	fa20 f202 	lsr.w	r2, r0, r2
 8000a60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a64:	430a      	orrs	r2, r1
 8000a66:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a6a:	b2bc      	uxth	r4, r7
 8000a6c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a70:	0c11      	lsrs	r1, r2, #16
 8000a72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a76:	fb08 f904 	mul.w	r9, r8, r4
 8000a7a:	40b0      	lsls	r0, r6
 8000a7c:	4589      	cmp	r9, r1
 8000a7e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a82:	b280      	uxth	r0, r0
 8000a84:	d93e      	bls.n	8000b04 <__udivmoddi4+0x2e8>
 8000a86:	1879      	adds	r1, r7, r1
 8000a88:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a8c:	d201      	bcs.n	8000a92 <__udivmoddi4+0x276>
 8000a8e:	4589      	cmp	r9, r1
 8000a90:	d81f      	bhi.n	8000ad2 <__udivmoddi4+0x2b6>
 8000a92:	eba1 0109 	sub.w	r1, r1, r9
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa2:	b292      	uxth	r2, r2
 8000aa4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000aa8:	4542      	cmp	r2, r8
 8000aaa:	d229      	bcs.n	8000b00 <__udivmoddi4+0x2e4>
 8000aac:	18ba      	adds	r2, r7, r2
 8000aae:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ab2:	d2c4      	bcs.n	8000a3e <__udivmoddi4+0x222>
 8000ab4:	4542      	cmp	r2, r8
 8000ab6:	d2c2      	bcs.n	8000a3e <__udivmoddi4+0x222>
 8000ab8:	f1a9 0102 	sub.w	r1, r9, #2
 8000abc:	443a      	add	r2, r7
 8000abe:	e7be      	b.n	8000a3e <__udivmoddi4+0x222>
 8000ac0:	45f0      	cmp	r8, lr
 8000ac2:	d29d      	bcs.n	8000a00 <__udivmoddi4+0x1e4>
 8000ac4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ac8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000acc:	3801      	subs	r0, #1
 8000ace:	46e1      	mov	r9, ip
 8000ad0:	e796      	b.n	8000a00 <__udivmoddi4+0x1e4>
 8000ad2:	eba7 0909 	sub.w	r9, r7, r9
 8000ad6:	4449      	add	r1, r9
 8000ad8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000adc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ae0:	fb09 f804 	mul.w	r8, r9, r4
 8000ae4:	e7db      	b.n	8000a9e <__udivmoddi4+0x282>
 8000ae6:	4673      	mov	r3, lr
 8000ae8:	e77f      	b.n	80009ea <__udivmoddi4+0x1ce>
 8000aea:	4650      	mov	r0, sl
 8000aec:	e766      	b.n	80009bc <__udivmoddi4+0x1a0>
 8000aee:	4608      	mov	r0, r1
 8000af0:	e6fd      	b.n	80008ee <__udivmoddi4+0xd2>
 8000af2:	443b      	add	r3, r7
 8000af4:	3a02      	subs	r2, #2
 8000af6:	e733      	b.n	8000960 <__udivmoddi4+0x144>
 8000af8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	e71c      	b.n	800093a <__udivmoddi4+0x11e>
 8000b00:	4649      	mov	r1, r9
 8000b02:	e79c      	b.n	8000a3e <__udivmoddi4+0x222>
 8000b04:	eba1 0109 	sub.w	r1, r1, r9
 8000b08:	46c4      	mov	ip, r8
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fb09 f804 	mul.w	r8, r9, r4
 8000b12:	e7c4      	b.n	8000a9e <__udivmoddi4+0x282>

08000b14 <__aeabi_idiv0>:
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f001 fd3a 	bl	8002594 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f870 	bl	8000c04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f000 fb1e 	bl	8001164 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b28:	f000 faec 	bl	8001104 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b2c:	f000 f94c 	bl	8000dc8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b30:	f000 f9a4 	bl	8000e7c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b34:	f000 f8b8 	bl	8000ca8 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000b38:	f000 f9fa 	bl	8000f30 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000b3c:	f000 fa52 	bl	8000fe4 <MX_TIM8_Init>
//  HAL_Delay(2000);
//
//  memset(message, 0, sizeof(message));
//  HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, 1);

  SignLetter('A');
 8000b40:	2041      	movs	r0, #65	@ 0x41
 8000b42:	f000 fc6f 	bl	8001424 <SignLetter>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b46:	f005 fab5 	bl	80060b4 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Index_Finger */
  Index_FingerHandle = osTimerNew(Index, osTimerOnce, NULL, &Index_Finger_attributes);
 8000b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bbc <main+0xa4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	481b      	ldr	r0, [pc, #108]	@ (8000bc0 <main+0xa8>)
 8000b52:	f005 fbbb 	bl	80062cc <osTimerNew>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a1a      	ldr	r2, [pc, #104]	@ (8000bc4 <main+0xac>)
 8000b5a:	6013      	str	r3, [r2, #0]

  /* creation of Thumb_Finger */
  Thumb_FingerHandle = osTimerNew(Thumb, osTimerPeriodic, NULL, &Thumb_Finger_attributes);
 8000b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc8 <main+0xb0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2101      	movs	r1, #1
 8000b62:	481a      	ldr	r0, [pc, #104]	@ (8000bcc <main+0xb4>)
 8000b64:	f005 fbb2 	bl	80062cc <osTimerNew>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4a19      	ldr	r2, [pc, #100]	@ (8000bd0 <main+0xb8>)
 8000b6c:	6013      	str	r3, [r2, #0]

  /* creation of Middle_Finger */
  Middle_FingerHandle = osTimerNew(Middle, osTimerPeriodic, NULL, &Middle_Finger_attributes);
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <main+0xbc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	2101      	movs	r1, #1
 8000b74:	4818      	ldr	r0, [pc, #96]	@ (8000bd8 <main+0xc0>)
 8000b76:	f005 fba9 	bl	80062cc <osTimerNew>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a17      	ldr	r2, [pc, #92]	@ (8000bdc <main+0xc4>)
 8000b7e:	6013      	str	r3, [r2, #0]

  /* creation of Ring_Finger */
  Ring_FingerHandle = osTimerNew(Ring, osTimerPeriodic, NULL, &Ring_Finger_attributes);
 8000b80:	4b17      	ldr	r3, [pc, #92]	@ (8000be0 <main+0xc8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	2101      	movs	r1, #1
 8000b86:	4817      	ldr	r0, [pc, #92]	@ (8000be4 <main+0xcc>)
 8000b88:	f005 fba0 	bl	80062cc <osTimerNew>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a16      	ldr	r2, [pc, #88]	@ (8000be8 <main+0xd0>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* creation of Pinky_Finger */
  Pinky_FingerHandle = osTimerNew(Pinky, osTimerPeriodic, NULL, &Pinky_Finger_attributes);
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <main+0xd4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	2101      	movs	r1, #1
 8000b98:	4815      	ldr	r0, [pc, #84]	@ (8000bf0 <main+0xd8>)
 8000b9a:	f005 fb97 	bl	80062cc <osTimerNew>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a14      	ldr	r2, [pc, #80]	@ (8000bf4 <main+0xdc>)
 8000ba2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ba4:	4a14      	ldr	r2, [pc, #80]	@ (8000bf8 <main+0xe0>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4814      	ldr	r0, [pc, #80]	@ (8000bfc <main+0xe4>)
 8000baa:	f005 facd 	bl	8006148 <osThreadNew>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a13      	ldr	r2, [pc, #76]	@ (8000c00 <main+0xe8>)
 8000bb2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bb4:	f005 faa2 	bl	80060fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bb8:	bf00      	nop
 8000bba:	e7fd      	b.n	8000bb8 <main+0xa0>
 8000bbc:	08009048 	.word	0x08009048
 8000bc0:	08001f21 	.word	0x08001f21
 8000bc4:	20000270 	.word	0x20000270
 8000bc8:	08009058 	.word	0x08009058
 8000bcc:	08001f51 	.word	0x08001f51
 8000bd0:	20000274 	.word	0x20000274
 8000bd4:	08009068 	.word	0x08009068
 8000bd8:	08001f81 	.word	0x08001f81
 8000bdc:	20000278 	.word	0x20000278
 8000be0:	08009078 	.word	0x08009078
 8000be4:	08001fb1 	.word	0x08001fb1
 8000be8:	2000027c 	.word	0x2000027c
 8000bec:	08009088 	.word	0x08009088
 8000bf0:	08001fe1 	.word	0x08001fe1
 8000bf4:	20000280 	.word	0x20000280
 8000bf8:	08009024 	.word	0x08009024
 8000bfc:	08001df9 	.word	0x08001df9
 8000c00:	2000026c 	.word	0x2000026c

08000c04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b096      	sub	sp, #88	@ 0x58
 8000c08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2244      	movs	r2, #68	@ 0x44
 8000c10:	2100      	movs	r1, #0
 8000c12:	4618      	mov	r0, r3
 8000c14:	f008 f950 	bl	8008eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c18:	463b      	mov	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c26:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c2a:	f001 ffc9 	bl	8002bc0 <HAL_PWREx_ControlVoltageScaling>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c34:	f001 f9fe 	bl	8002034 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c42:	2310      	movs	r3, #16
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c46:	2302      	movs	r3, #2
 8000c48:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c52:	230a      	movs	r3, #10
 8000c54:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c56:	2307      	movs	r3, #7
 8000c58:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c62:	f107 0314 	add.w	r3, r7, #20
 8000c66:	4618      	mov	r0, r3
 8000c68:	f002 f800 	bl	8002c6c <HAL_RCC_OscConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c72:	f001 f9df 	bl	8002034 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c76:	230f      	movs	r3, #15
 8000c78:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c8a:	463b      	mov	r3, r7
 8000c8c:	2104      	movs	r1, #4
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f002 fbc8 	bl	8003424 <HAL_RCC_ClockConfig>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c9a:	f001 f9cb 	bl	8002034 <Error_Handler>
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	3758      	adds	r7, #88	@ 0x58
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b096      	sub	sp, #88	@ 0x58
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]
 8000cca:	615a      	str	r2, [r3, #20]
 8000ccc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cce:	1d3b      	adds	r3, r7, #4
 8000cd0:	222c      	movs	r2, #44	@ 0x2c
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f008 f8ef 	bl	8008eb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cda:	4b39      	ldr	r3, [pc, #228]	@ (8000dc0 <MX_TIM1_Init+0x118>)
 8000cdc:	4a39      	ldr	r2, [pc, #228]	@ (8000dc4 <MX_TIM1_Init+0x11c>)
 8000cde:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000ce0:	4b37      	ldr	r3, [pc, #220]	@ (8000dc0 <MX_TIM1_Init+0x118>)
 8000ce2:	224f      	movs	r2, #79	@ 0x4f
 8000ce4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce6:	4b36      	ldr	r3, [pc, #216]	@ (8000dc0 <MX_TIM1_Init+0x118>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000cec:	4b34      	ldr	r3, [pc, #208]	@ (8000dc0 <MX_TIM1_Init+0x118>)
 8000cee:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000cf2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf4:	4b32      	ldr	r3, [pc, #200]	@ (8000dc0 <MX_TIM1_Init+0x118>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cfa:	4b31      	ldr	r3, [pc, #196]	@ (8000dc0 <MX_TIM1_Init+0x118>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d00:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc0 <MX_TIM1_Init+0x118>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d06:	482e      	ldr	r0, [pc, #184]	@ (8000dc0 <MX_TIM1_Init+0x118>)
 8000d08:	f003 fb70 	bl	80043ec <HAL_TIM_PWM_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d12:	f001 f98f 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d16:	2300      	movs	r3, #0
 8000d18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d22:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d26:	4619      	mov	r1, r3
 8000d28:	4825      	ldr	r0, [pc, #148]	@ (8000dc0 <MX_TIM1_Init+0x118>)
 8000d2a:	f004 fb39 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d34:	f001 f97e 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d38:	2360      	movs	r3, #96	@ 0x60
 8000d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d40:	2300      	movs	r3, #0
 8000d42:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d54:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4818      	ldr	r0, [pc, #96]	@ (8000dc0 <MX_TIM1_Init+0x118>)
 8000d5e:	f003 fe41 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d68:	f001 f964 	bl	8002034 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d74:	2300      	movs	r3, #0
 8000d76:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d80:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d84:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d8e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000d92:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4807      	ldr	r0, [pc, #28]	@ (8000dc0 <MX_TIM1_Init+0x118>)
 8000da2:	f004 fb85 	bl	80054b0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000dac:	f001 f942 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000db0:	4803      	ldr	r0, [pc, #12]	@ (8000dc0 <MX_TIM1_Init+0x118>)
 8000db2:	f001 f9db 	bl	800216c <HAL_TIM_MspPostInit>

}
 8000db6:	bf00      	nop
 8000db8:	3758      	adds	r7, #88	@ 0x58
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000068 	.word	0x20000068
 8000dc4:	40012c00 	.word	0x40012c00

08000dc8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b08a      	sub	sp, #40	@ 0x28
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	605a      	str	r2, [r3, #4]
 8000dd8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dda:	463b      	mov	r3, r7
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
 8000de8:	615a      	str	r2, [r3, #20]
 8000dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dec:	4b22      	ldr	r3, [pc, #136]	@ (8000e78 <MX_TIM2_Init+0xb0>)
 8000dee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000df2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000df4:	4b20      	ldr	r3, [pc, #128]	@ (8000e78 <MX_TIM2_Init+0xb0>)
 8000df6:	224f      	movs	r2, #79	@ 0x4f
 8000df8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000e78 <MX_TIM2_Init+0xb0>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	@ (8000e78 <MX_TIM2_Init+0xb0>)
 8000e02:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000e06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e08:	4b1b      	ldr	r3, [pc, #108]	@ (8000e78 <MX_TIM2_Init+0xb0>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000e78 <MX_TIM2_Init+0xb0>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e14:	4818      	ldr	r0, [pc, #96]	@ (8000e78 <MX_TIM2_Init+0xb0>)
 8000e16:	f003 fae9 	bl	80043ec <HAL_TIM_PWM_Init>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e20:	f001 f908 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e24:	2300      	movs	r3, #0
 8000e26:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4811      	ldr	r0, [pc, #68]	@ (8000e78 <MX_TIM2_Init+0xb0>)
 8000e34:	f004 fab4 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e3e:	f001 f8f9 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e42:	2360      	movs	r3, #96	@ 0x60
 8000e44:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e52:	463b      	mov	r3, r7
 8000e54:	2200      	movs	r2, #0
 8000e56:	4619      	mov	r1, r3
 8000e58:	4807      	ldr	r0, [pc, #28]	@ (8000e78 <MX_TIM2_Init+0xb0>)
 8000e5a:	f003 fdc3 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e64:	f001 f8e6 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e68:	4803      	ldr	r0, [pc, #12]	@ (8000e78 <MX_TIM2_Init+0xb0>)
 8000e6a:	f001 f97f 	bl	800216c <HAL_TIM_MspPostInit>

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	@ 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200000b4 	.word	0x200000b4

08000e7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08a      	sub	sp, #40	@ 0x28
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e8e:	463b      	mov	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
 8000e9c:	615a      	str	r2, [r3, #20]
 8000e9e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea0:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <MX_TIM3_Init+0xac>)
 8000ea2:	4a22      	ldr	r2, [pc, #136]	@ (8000f2c <MX_TIM3_Init+0xb0>)
 8000ea4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000ea6:	4b20      	ldr	r3, [pc, #128]	@ (8000f28 <MX_TIM3_Init+0xac>)
 8000ea8:	224f      	movs	r2, #79	@ 0x4f
 8000eaa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <MX_TIM3_Init+0xac>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <MX_TIM3_Init+0xac>)
 8000eb4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000eb8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eba:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <MX_TIM3_Init+0xac>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec0:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <MX_TIM3_Init+0xac>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ec6:	4818      	ldr	r0, [pc, #96]	@ (8000f28 <MX_TIM3_Init+0xac>)
 8000ec8:	f003 fa90 	bl	80043ec <HAL_TIM_PWM_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000ed2:	f001 f8af 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eda:	2300      	movs	r3, #0
 8000edc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4810      	ldr	r0, [pc, #64]	@ (8000f28 <MX_TIM3_Init+0xac>)
 8000ee6:	f004 fa5b 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000ef0:	f001 f8a0 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ef4:	2360      	movs	r3, #96	@ 0x60
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f00:	2300      	movs	r3, #0
 8000f02:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f04:	463b      	mov	r3, r7
 8000f06:	2200      	movs	r2, #0
 8000f08:	4619      	mov	r1, r3
 8000f0a:	4807      	ldr	r0, [pc, #28]	@ (8000f28 <MX_TIM3_Init+0xac>)
 8000f0c:	f003 fd6a 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f16:	f001 f88d 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f1a:	4803      	ldr	r0, [pc, #12]	@ (8000f28 <MX_TIM3_Init+0xac>)
 8000f1c:	f001 f926 	bl	800216c <HAL_TIM_MspPostInit>

}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	@ 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000100 	.word	0x20000100
 8000f2c:	40000400 	.word	0x40000400

08000f30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08a      	sub	sp, #40	@ 0x28
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f36:	f107 031c 	add.w	r3, r7, #28
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f42:	463b      	mov	r3, r7
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	615a      	str	r2, [r3, #20]
 8000f52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f54:	4b21      	ldr	r3, [pc, #132]	@ (8000fdc <MX_TIM4_Init+0xac>)
 8000f56:	4a22      	ldr	r2, [pc, #136]	@ (8000fe0 <MX_TIM4_Init+0xb0>)
 8000f58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8000f5a:	4b20      	ldr	r3, [pc, #128]	@ (8000fdc <MX_TIM4_Init+0xac>)
 8000f5c:	224f      	movs	r2, #79	@ 0x4f
 8000f5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <MX_TIM4_Init+0xac>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000f66:	4b1d      	ldr	r3, [pc, #116]	@ (8000fdc <MX_TIM4_Init+0xac>)
 8000f68:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6e:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <MX_TIM4_Init+0xac>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f74:	4b19      	ldr	r3, [pc, #100]	@ (8000fdc <MX_TIM4_Init+0xac>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f7a:	4818      	ldr	r0, [pc, #96]	@ (8000fdc <MX_TIM4_Init+0xac>)
 8000f7c:	f003 fa36 	bl	80043ec <HAL_TIM_PWM_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000f86:	f001 f855 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f92:	f107 031c 	add.w	r3, r7, #28
 8000f96:	4619      	mov	r1, r3
 8000f98:	4810      	ldr	r0, [pc, #64]	@ (8000fdc <MX_TIM4_Init+0xac>)
 8000f9a:	f004 fa01 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000fa4:	f001 f846 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fa8:	2360      	movs	r3, #96	@ 0x60
 8000faa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fac:	2300      	movs	r3, #0
 8000fae:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4807      	ldr	r0, [pc, #28]	@ (8000fdc <MX_TIM4_Init+0xac>)
 8000fc0:	f003 fd10 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000fca:	f001 f833 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fce:	4803      	ldr	r0, [pc, #12]	@ (8000fdc <MX_TIM4_Init+0xac>)
 8000fd0:	f001 f8cc 	bl	800216c <HAL_TIM_MspPostInit>

}
 8000fd4:	bf00      	nop
 8000fd6:	3728      	adds	r7, #40	@ 0x28
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2000014c 	.word	0x2000014c
 8000fe0:	40000800 	.word	0x40000800

08000fe4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b096      	sub	sp, #88	@ 0x58
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	605a      	str	r2, [r3, #4]
 8001000:	609a      	str	r2, [r3, #8]
 8001002:	60da      	str	r2, [r3, #12]
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	615a      	str	r2, [r3, #20]
 8001008:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	222c      	movs	r2, #44	@ 0x2c
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f007 ff51 	bl	8008eb8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001016:	4b39      	ldr	r3, [pc, #228]	@ (80010fc <MX_TIM8_Init+0x118>)
 8001018:	4a39      	ldr	r2, [pc, #228]	@ (8001100 <MX_TIM8_Init+0x11c>)
 800101a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 800101c:	4b37      	ldr	r3, [pc, #220]	@ (80010fc <MX_TIM8_Init+0x118>)
 800101e:	224f      	movs	r2, #79	@ 0x4f
 8001020:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001022:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <MX_TIM8_Init+0x118>)
 8001024:	2200      	movs	r2, #0
 8001026:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001028:	4b34      	ldr	r3, [pc, #208]	@ (80010fc <MX_TIM8_Init+0x118>)
 800102a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800102e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b32      	ldr	r3, [pc, #200]	@ (80010fc <MX_TIM8_Init+0x118>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001036:	4b31      	ldr	r3, [pc, #196]	@ (80010fc <MX_TIM8_Init+0x118>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103c:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <MX_TIM8_Init+0x118>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001042:	482e      	ldr	r0, [pc, #184]	@ (80010fc <MX_TIM8_Init+0x118>)
 8001044:	f003 f9d2 	bl	80043ec <HAL_TIM_PWM_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800104e:	f000 fff1 	bl	8002034 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001052:	2300      	movs	r3, #0
 8001054:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105a:	2300      	movs	r3, #0
 800105c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800105e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001062:	4619      	mov	r1, r3
 8001064:	4825      	ldr	r0, [pc, #148]	@ (80010fc <MX_TIM8_Init+0x118>)
 8001066:	f004 f99b 	bl	80053a0 <HAL_TIMEx_MasterConfigSynchronization>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001070:	f000 ffe0 	bl	8002034 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001074:	2360      	movs	r3, #96	@ 0x60
 8001076:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800107c:	2300      	movs	r3, #0
 800107e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001080:	2300      	movs	r3, #0
 8001082:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001088:	2300      	movs	r3, #0
 800108a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800108c:	2300      	movs	r3, #0
 800108e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001090:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001094:	2200      	movs	r2, #0
 8001096:	4619      	mov	r1, r3
 8001098:	4818      	ldr	r0, [pc, #96]	@ (80010fc <MX_TIM8_Init+0x118>)
 800109a:	f003 fca3 	bl	80049e4 <HAL_TIM_PWM_ConfigChannel>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80010a4:	f000 ffc6 	bl	8002034 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010ac:	2300      	movs	r3, #0
 80010ae:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010b0:	2300      	movs	r3, #0
 80010b2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010b4:	2300      	movs	r3, #0
 80010b6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010c0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010ca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	4619      	mov	r1, r3
 80010dc:	4807      	ldr	r0, [pc, #28]	@ (80010fc <MX_TIM8_Init+0x118>)
 80010de:	f004 f9e7 	bl	80054b0 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 80010e8:	f000 ffa4 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010ec:	4803      	ldr	r0, [pc, #12]	@ (80010fc <MX_TIM8_Init+0x118>)
 80010ee:	f001 f83d 	bl	800216c <HAL_TIM_MspPostInit>

}
 80010f2:	bf00      	nop
 80010f4:	3758      	adds	r7, #88	@ 0x58
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000198 	.word	0x20000198
 8001100:	40013400 	.word	0x40013400

08001104 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <MX_USART2_UART_Init+0x58>)
 800110a:	4a15      	ldr	r2, [pc, #84]	@ (8001160 <MX_USART2_UART_Init+0x5c>)
 800110c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001110:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001114:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001116:	4b11      	ldr	r3, [pc, #68]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800111c:	4b0f      	ldr	r3, [pc, #60]	@ (800115c <MX_USART2_UART_Init+0x58>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001122:	4b0e      	ldr	r3, [pc, #56]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001128:	4b0c      	ldr	r3, [pc, #48]	@ (800115c <MX_USART2_UART_Init+0x58>)
 800112a:	220c      	movs	r2, #12
 800112c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800112e:	4b0b      	ldr	r3, [pc, #44]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001134:	4b09      	ldr	r3, [pc, #36]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001136:	2200      	movs	r2, #0
 8001138:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800113a:	4b08      	ldr	r3, [pc, #32]	@ (800115c <MX_USART2_UART_Init+0x58>)
 800113c:	2200      	movs	r2, #0
 800113e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001142:	2200      	movs	r2, #0
 8001144:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001146:	4805      	ldr	r0, [pc, #20]	@ (800115c <MX_USART2_UART_Init+0x58>)
 8001148:	f004 fa4e 	bl	80055e8 <HAL_UART_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001152:	f000 ff6f 	bl	8002034 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001e4 	.word	0x200001e4
 8001160:	40004400 	.word	0x40004400

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08a      	sub	sp, #40	@ 0x28
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b2b      	ldr	r3, [pc, #172]	@ (8001228 <MX_GPIO_Init+0xc4>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a2a      	ldr	r2, [pc, #168]	@ (8001228 <MX_GPIO_Init+0xc4>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b28      	ldr	r3, [pc, #160]	@ (8001228 <MX_GPIO_Init+0xc4>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001192:	4b25      	ldr	r3, [pc, #148]	@ (8001228 <MX_GPIO_Init+0xc4>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a24      	ldr	r2, [pc, #144]	@ (8001228 <MX_GPIO_Init+0xc4>)
 8001198:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b22      	ldr	r3, [pc, #136]	@ (8001228 <MX_GPIO_Init+0xc4>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001228 <MX_GPIO_Init+0xc4>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001228 <MX_GPIO_Init+0xc4>)
 80011b0:	f043 0301 	orr.w	r3, r3, #1
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001228 <MX_GPIO_Init+0xc4>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0301 	and.w	r3, r3, #1
 80011be:	60bb      	str	r3, [r7, #8]
 80011c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011c2:	4b19      	ldr	r3, [pc, #100]	@ (8001228 <MX_GPIO_Init+0xc4>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c6:	4a18      	ldr	r2, [pc, #96]	@ (8001228 <MX_GPIO_Init+0xc4>)
 80011c8:	f043 0302 	orr.w	r3, r3, #2
 80011cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ce:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <MX_GPIO_Init+0xc4>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011da:	2200      	movs	r2, #0
 80011dc:	2120      	movs	r1, #32
 80011de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011e2:	f001 fca3 	bl	8002b2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011f6:	f107 0314 	add.w	r3, r7, #20
 80011fa:	4619      	mov	r1, r3
 80011fc:	480b      	ldr	r0, [pc, #44]	@ (800122c <MX_GPIO_Init+0xc8>)
 80011fe:	f001 faeb 	bl	80027d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001202:	2320      	movs	r3, #32
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001206:	2301      	movs	r3, #1
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800121c:	f001 fadc 	bl	80027d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001220:	bf00      	nop
 8001222:	3728      	adds	r7, #40	@ 0x28
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	40021000 	.word	0x40021000
 800122c:	48000800 	.word	0x48000800

08001230 <Servo_SetMotion>:
 * @param finger: Which finger (THUMB, INDEX, MIDDLE, RING, PINKY)
 * @param direction: STOP, CLOCKWISE, or COUNTERCLOCKWISE
 * @param speed: Speed percentage (0-100)
 * @retval None
 */
void Servo_SetMotion(Finger finger, Direction direction, int speed) {
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	603a      	str	r2, [r7, #0]
 800123a:	71fb      	strb	r3, [r7, #7]
 800123c:	460b      	mov	r3, r1
 800123e:	71bb      	strb	r3, [r7, #6]
    uint32_t pulse;

    // Clamp speed to 0-100%
    if (speed < 0) speed = 0;
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	da01      	bge.n	800124a <Servo_SetMotion+0x1a>
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
    if (speed > 100) speed = 100;
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b64      	cmp	r3, #100	@ 0x64
 800124e:	dd01      	ble.n	8001254 <Servo_SetMotion+0x24>
 8001250:	2364      	movs	r3, #100	@ 0x64
 8001252:	603b      	str	r3, [r7, #0]

    // Calculate pulse width based on direction and speed
    if (direction == STOP) {
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d103      	bne.n	8001262 <Servo_SetMotion+0x32>
        pulse = SERVO_STOP;
 800125a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	e013      	b.n	800128a <Servo_SetMotion+0x5a>
    } else if (direction == CLOCKWISE) {
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d109      	bne.n	800127c <Servo_SetMotion+0x4c>
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CW
        pulse = SERVO_STOP - ((SERVO_STOP - SERVO_MAX_CW) * speed / 100);
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	4613      	mov	r3, r2
 800126c:	079b      	lsls	r3, r3, #30
 800126e:	1a9b      	subs	r3, r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	1a9b      	subs	r3, r3, r2
 8001274:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e006      	b.n	800128a <Servo_SetMotion+0x5a>
    } else { // COUNTERCLOCKWISE
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CCW
        pulse = SERVO_STOP + ((SERVO_MAX_CCW - SERVO_STOP) * speed / 100);
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8001288:	60fb      	str	r3, [r7, #12]
    }

    // Update servo state
    servoStates[finger].speed = speed;
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	4925      	ldr	r1, [pc, #148]	@ (8001324 <Servo_SetMotion+0xf4>)
 800128e:	4613      	mov	r3, r2
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	4413      	add	r3, r2
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	440b      	add	r3, r1
 8001298:	683a      	ldr	r2, [r7, #0]
 800129a:	601a      	str	r2, [r3, #0]
    servoStates[finger].dir = direction;
 800129c:	79fa      	ldrb	r2, [r7, #7]
 800129e:	4921      	ldr	r1, [pc, #132]	@ (8001324 <Servo_SetMotion+0xf4>)
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	440b      	add	r3, r1
 80012aa:	3304      	adds	r3, #4
 80012ac:	79ba      	ldrb	r2, [r7, #6]
 80012ae:	701a      	strb	r2, [r3, #0]
    servoStates[finger].pulse = pulse;
 80012b0:	79fa      	ldrb	r2, [r7, #7]
 80012b2:	491c      	ldr	r1, [pc, #112]	@ (8001324 <Servo_SetMotion+0xf4>)
 80012b4:	4613      	mov	r3, r2
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	4413      	add	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	440b      	add	r3, r1
 80012be:	3308      	adds	r3, #8
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	601a      	str	r2, [r3, #0]

    // Apply pulse width to the appropriate timer
    switch (finger) {
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b04      	cmp	r3, #4
 80012c8:	d825      	bhi.n	8001316 <Servo_SetMotion+0xe6>
 80012ca:	a201      	add	r2, pc, #4	@ (adr r2, 80012d0 <Servo_SetMotion+0xa0>)
 80012cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d0:	080012e5 	.word	0x080012e5
 80012d4:	080012ef 	.word	0x080012ef
 80012d8:	080012f9 	.word	0x080012f9
 80012dc:	08001303 	.word	0x08001303
 80012e0:	0800130d 	.word	0x0800130d
        case THUMB:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 80012e4:	4b10      	ldr	r3, [pc, #64]	@ (8001328 <Servo_SetMotion+0xf8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 80012ec:	e013      	b.n	8001316 <Servo_SetMotion+0xe6>
        case INDEX:
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 80012ee:	4b0f      	ldr	r3, [pc, #60]	@ (800132c <Servo_SetMotion+0xfc>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 80012f6:	e00e      	b.n	8001316 <Servo_SetMotion+0xe6>
        case MIDDLE:
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 80012f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001330 <Servo_SetMotion+0x100>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8001300:	e009      	b.n	8001316 <Servo_SetMotion+0xe6>
        case RING:
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <Servo_SetMotion+0x104>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	68fa      	ldr	r2, [r7, #12]
 8001308:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 800130a:	e004      	b.n	8001316 <Servo_SetMotion+0xe6>
        case PINKY:
            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pulse);
 800130c:	4b0a      	ldr	r3, [pc, #40]	@ (8001338 <Servo_SetMotion+0x108>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	68fa      	ldr	r2, [r7, #12]
 8001312:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8001314:	bf00      	nop
    }
	}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000000 	.word	0x20000000
 8001328:	20000068 	.word	0x20000068
 800132c:	200000b4 	.word	0x200000b4
 8001330:	20000100 	.word	0x20000100
 8001334:	2000014c 	.word	0x2000014c
 8001338:	20000198 	.word	0x20000198

0800133c <Servo_StopAll>:
	/**
	 * @brief Stops all servos
	 * @param None
	 * @retval None
	 */
	void Servo_StopAll(void) {
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
		Servo_SetMotion(THUMB, STOP, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2100      	movs	r1, #0
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff ff73 	bl	8001230 <Servo_SetMotion>
		Servo_SetMotion(INDEX, STOP, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	2001      	movs	r0, #1
 8001350:	f7ff ff6e 	bl	8001230 <Servo_SetMotion>
		Servo_SetMotion(MIDDLE, STOP, 0);
 8001354:	2200      	movs	r2, #0
 8001356:	2100      	movs	r1, #0
 8001358:	2002      	movs	r0, #2
 800135a:	f7ff ff69 	bl	8001230 <Servo_SetMotion>
		Servo_SetMotion(RING, STOP, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2003      	movs	r0, #3
 8001364:	f7ff ff64 	bl	8001230 <Servo_SetMotion>
		Servo_SetMotion(PINKY, STOP, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	2004      	movs	r0, #4
 800136e:	f7ff ff5f 	bl	8001230 <Servo_SetMotion>

	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001372:	2100      	movs	r1, #0
 8001374:	480a      	ldr	r0, [pc, #40]	@ (80013a0 <Servo_StopAll+0x64>)
 8001376:	f003 f997 	bl	80046a8 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800137a:	2100      	movs	r1, #0
 800137c:	4809      	ldr	r0, [pc, #36]	@ (80013a4 <Servo_StopAll+0x68>)
 800137e:	f003 f993 	bl	80046a8 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001382:	2100      	movs	r1, #0
 8001384:	4808      	ldr	r0, [pc, #32]	@ (80013a8 <Servo_StopAll+0x6c>)
 8001386:	f003 f98f 	bl	80046a8 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800138a:	2100      	movs	r1, #0
 800138c:	4807      	ldr	r0, [pc, #28]	@ (80013ac <Servo_StopAll+0x70>)
 800138e:	f003 f98b 	bl	80046a8 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001392:	2100      	movs	r1, #0
 8001394:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <Servo_StopAll+0x74>)
 8001396:	f003 f987 	bl	80046a8 <HAL_TIM_PWM_Stop>
	}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	20000068 	.word	0x20000068
 80013a4:	200000b4 	.word	0x200000b4
 80013a8:	20000100 	.word	0x20000100
 80013ac:	2000014c 	.word	0x2000014c
 80013b0:	20000198 	.word	0x20000198

080013b4 <Servo_Init>:
	/**
	 * @brief Initialize all servo timers and start PWM
	 * @param None
	 * @retval None
	 */
	void Servo_Init(void) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	    // Start all PWM channels
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80013b8:	2100      	movs	r1, #0
 80013ba:	480a      	ldr	r0, [pc, #40]	@ (80013e4 <Servo_Init+0x30>)
 80013bc:	f003 f86e 	bl	800449c <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80013c0:	2100      	movs	r1, #0
 80013c2:	4809      	ldr	r0, [pc, #36]	@ (80013e8 <Servo_Init+0x34>)
 80013c4:	f003 f86a 	bl	800449c <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80013c8:	2100      	movs	r1, #0
 80013ca:	4808      	ldr	r0, [pc, #32]	@ (80013ec <Servo_Init+0x38>)
 80013cc:	f003 f866 	bl	800449c <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80013d0:	2100      	movs	r1, #0
 80013d2:	4807      	ldr	r0, [pc, #28]	@ (80013f0 <Servo_Init+0x3c>)
 80013d4:	f003 f862 	bl	800449c <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80013d8:	2100      	movs	r1, #0
 80013da:	4806      	ldr	r0, [pc, #24]	@ (80013f4 <Servo_Init+0x40>)
 80013dc:	f003 f85e 	bl	800449c <HAL_TIM_PWM_Start>

//	    // Initialize all servos to stop position
//	    Servo_StopAll();
	}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000068 	.word	0x20000068
 80013e8:	200000b4 	.word	0x200000b4
 80013ec:	20000100 	.word	0x20000100
 80013f0:	2000014c 	.word	0x2000014c
 80013f4:	20000198 	.word	0x20000198

080013f8 <Direction_Decider>:

	int Direction_Decider(int* Desired_Position){
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
		if(*Desired_Position < 0){
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	da06      	bge.n	8001416 <Direction_Decider+0x1e>
			*Desired_Position = *Desired_Position * -1;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	425a      	negs	r2, r3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	601a      	str	r2, [r3, #0]
			return CLOCKWISE;
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <Direction_Decider+0x20>
		}
		else{
			return COUNTERCLOCKWISE;
 8001416:	2302      	movs	r3, #2
		}
	}
 8001418:	4618      	mov	r0, r3
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <SignLetter>:
	 * @brief Example function to demonstrate a sign language letter
	 * @param letter: ASCII character (A-Z)
	 * @param duration: How long to hold the position (in ms)
	 * @retval None
	 */
	void SignLetter(char letter) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]
	    // Reset to neutral position
	    Servo_Init();
 800142e:	f7ff ffc1 	bl	80013b4 <Servo_Init>


	    // Set finger positions based on the letter
	    switch(letter) {
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	3b41      	subs	r3, #65	@ 0x41
 8001436:	2b19      	cmp	r3, #25
 8001438:	f200 8406 	bhi.w	8001c48 <SignLetter+0x824>
 800143c:	a201      	add	r2, pc, #4	@ (adr r2, 8001444 <SignLetter+0x20>)
 800143e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001442:	bf00      	nop
 8001444:	080014ad 	.word	0x080014ad
 8001448:	080014f5 	.word	0x080014f5
 800144c:	08001565 	.word	0x08001565
 8001450:	080015ab 	.word	0x080015ab
 8001454:	080015f1 	.word	0x080015f1
 8001458:	08001637 	.word	0x08001637
 800145c:	0800167d 	.word	0x0800167d
 8001460:	080016c3 	.word	0x080016c3
 8001464:	08001709 	.word	0x08001709
 8001468:	0800174f 	.word	0x0800174f
 800146c:	08001795 	.word	0x08001795
 8001470:	080017db 	.word	0x080017db
 8001474:	08001821 	.word	0x08001821
 8001478:	08001891 	.word	0x08001891
 800147c:	080018d7 	.word	0x080018d7
 8001480:	0800191d 	.word	0x0800191d
 8001484:	08001963 	.word	0x08001963
 8001488:	080019a9 	.word	0x080019a9
 800148c:	080019ef 	.word	0x080019ef
 8001490:	08001a35 	.word	0x08001a35
 8001494:	08001a7b 	.word	0x08001a7b
 8001498:	08001ac1 	.word	0x08001ac1
 800149c:	08001b07 	.word	0x08001b07
 80014a0:	08001b77 	.word	0x08001b77
 80014a4:	08001bbd 	.word	0x08001bbd
 80014a8:	08001c03 	.word	0x08001c03
	        case 'A':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80014ac:	4b23      	ldr	r3, [pc, #140]	@ (800153c <SignLetter+0x118>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80014b6:	4a22      	ldr	r2, [pc, #136]	@ (8001540 <SignLetter+0x11c>)
 80014b8:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80014ba:	4b22      	ldr	r3, [pc, #136]	@ (8001544 <SignLetter+0x120>)
 80014bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80014c4:	4a20      	ldr	r2, [pc, #128]	@ (8001548 <SignLetter+0x124>)
 80014c6:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80014c8:	4b20      	ldr	r3, [pc, #128]	@ (800154c <SignLetter+0x128>)
 80014ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ce:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80014d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001550 <SignLetter+0x12c>)
 80014d4:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80014d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001554 <SignLetter+0x130>)
 80014d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014dc:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80014e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001558 <SignLetter+0x134>)
 80014e2:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80014e4:	4b1d      	ldr	r3, [pc, #116]	@ (800155c <SignLetter+0x138>)
 80014e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ea:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80014ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001560 <SignLetter+0x13c>)
 80014f0:	6013      	str	r3, [r2, #0]
	            break;
 80014f2:	e3ac      	b.n	8001c4e <SignLetter+0x82a>

	        case 'B':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <SignLetter+0x118>)
 80014f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fa:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80014fe:	4a10      	ldr	r2, [pc, #64]	@ (8001540 <SignLetter+0x11c>)
 8001500:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001502:	4b10      	ldr	r3, [pc, #64]	@ (8001544 <SignLetter+0x120>)
 8001504:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001508:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800150c:	4a0e      	ldr	r2, [pc, #56]	@ (8001548 <SignLetter+0x124>)
 800150e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001510:	4b0e      	ldr	r3, [pc, #56]	@ (800154c <SignLetter+0x128>)
 8001512:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001516:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800151a:	4a0d      	ldr	r2, [pc, #52]	@ (8001550 <SignLetter+0x12c>)
 800151c:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800151e:	4b0d      	ldr	r3, [pc, #52]	@ (8001554 <SignLetter+0x130>)
 8001520:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001524:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001528:	4a0b      	ldr	r2, [pc, #44]	@ (8001558 <SignLetter+0x134>)
 800152a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800152c:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <SignLetter+0x138>)
 800152e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001532:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001536:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <SignLetter+0x13c>)
 8001538:	6013      	str	r3, [r2, #0]
	            break;
 800153a:	e388      	b.n	8001c4e <SignLetter+0x82a>
 800153c:	20000284 	.word	0x20000284
 8001540:	20000290 	.word	0x20000290
 8001544:	20000286 	.word	0x20000286
 8001548:	20000294 	.word	0x20000294
 800154c:	20000288 	.word	0x20000288
 8001550:	20000298 	.word	0x20000298
 8001554:	2000028a 	.word	0x2000028a
 8001558:	2000029c 	.word	0x2000029c
 800155c:	2000028c 	.word	0x2000028c
 8001560:	200002a0 	.word	0x200002a0

	        case 'C':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001564:	4bb1      	ldr	r3, [pc, #708]	@ (800182c <SignLetter+0x408>)
 8001566:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800156e:	4ab0      	ldr	r2, [pc, #704]	@ (8001830 <SignLetter+0x40c>)
 8001570:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001572:	4bb0      	ldr	r3, [pc, #704]	@ (8001834 <SignLetter+0x410>)
 8001574:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001578:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800157c:	4aae      	ldr	r2, [pc, #696]	@ (8001838 <SignLetter+0x414>)
 800157e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001580:	4bae      	ldr	r3, [pc, #696]	@ (800183c <SignLetter+0x418>)
 8001582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001586:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800158a:	4aad      	ldr	r2, [pc, #692]	@ (8001840 <SignLetter+0x41c>)
 800158c:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800158e:	4bad      	ldr	r3, [pc, #692]	@ (8001844 <SignLetter+0x420>)
 8001590:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001594:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001598:	4aab      	ldr	r2, [pc, #684]	@ (8001848 <SignLetter+0x424>)
 800159a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800159c:	4bab      	ldr	r3, [pc, #684]	@ (800184c <SignLetter+0x428>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80015a6:	4aaa      	ldr	r2, [pc, #680]	@ (8001850 <SignLetter+0x42c>)
 80015a8:	6013      	str	r3, [r2, #0]

	        case 'D':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80015aa:	4ba0      	ldr	r3, [pc, #640]	@ (800182c <SignLetter+0x408>)
 80015ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80015b4:	4a9e      	ldr	r2, [pc, #632]	@ (8001830 <SignLetter+0x40c>)
 80015b6:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80015b8:	4b9e      	ldr	r3, [pc, #632]	@ (8001834 <SignLetter+0x410>)
 80015ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015be:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80015c2:	4a9d      	ldr	r2, [pc, #628]	@ (8001838 <SignLetter+0x414>)
 80015c4:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80015c6:	4b9d      	ldr	r3, [pc, #628]	@ (800183c <SignLetter+0x418>)
 80015c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015cc:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80015d0:	4a9b      	ldr	r2, [pc, #620]	@ (8001840 <SignLetter+0x41c>)
 80015d2:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80015d4:	4b9b      	ldr	r3, [pc, #620]	@ (8001844 <SignLetter+0x420>)
 80015d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015da:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80015de:	4a9a      	ldr	r2, [pc, #616]	@ (8001848 <SignLetter+0x424>)
 80015e0:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80015e2:	4b9a      	ldr	r3, [pc, #616]	@ (800184c <SignLetter+0x428>)
 80015e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e8:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80015ec:	4a98      	ldr	r2, [pc, #608]	@ (8001850 <SignLetter+0x42c>)
 80015ee:	6013      	str	r3, [r2, #0]

	        case 'E':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80015f0:	4b8e      	ldr	r3, [pc, #568]	@ (800182c <SignLetter+0x408>)
 80015f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f6:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80015fa:	4a8d      	ldr	r2, [pc, #564]	@ (8001830 <SignLetter+0x40c>)
 80015fc:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80015fe:	4b8d      	ldr	r3, [pc, #564]	@ (8001834 <SignLetter+0x410>)
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001608:	4a8b      	ldr	r2, [pc, #556]	@ (8001838 <SignLetter+0x414>)
 800160a:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800160c:	4b8b      	ldr	r3, [pc, #556]	@ (800183c <SignLetter+0x418>)
 800160e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001612:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001616:	4a8a      	ldr	r2, [pc, #552]	@ (8001840 <SignLetter+0x41c>)
 8001618:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800161a:	4b8a      	ldr	r3, [pc, #552]	@ (8001844 <SignLetter+0x420>)
 800161c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001620:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001624:	4a88      	ldr	r2, [pc, #544]	@ (8001848 <SignLetter+0x424>)
 8001626:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001628:	4b88      	ldr	r3, [pc, #544]	@ (800184c <SignLetter+0x428>)
 800162a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001632:	4a87      	ldr	r2, [pc, #540]	@ (8001850 <SignLetter+0x42c>)
 8001634:	6013      	str	r3, [r2, #0]

	        case 'F':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001636:	4b7d      	ldr	r3, [pc, #500]	@ (800182c <SignLetter+0x408>)
 8001638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001640:	4a7b      	ldr	r2, [pc, #492]	@ (8001830 <SignLetter+0x40c>)
 8001642:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001644:	4b7b      	ldr	r3, [pc, #492]	@ (8001834 <SignLetter+0x410>)
 8001646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800164e:	4a7a      	ldr	r2, [pc, #488]	@ (8001838 <SignLetter+0x414>)
 8001650:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001652:	4b7a      	ldr	r3, [pc, #488]	@ (800183c <SignLetter+0x418>)
 8001654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001658:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800165c:	4a78      	ldr	r2, [pc, #480]	@ (8001840 <SignLetter+0x41c>)
 800165e:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001660:	4b78      	ldr	r3, [pc, #480]	@ (8001844 <SignLetter+0x420>)
 8001662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001666:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800166a:	4a77      	ldr	r2, [pc, #476]	@ (8001848 <SignLetter+0x424>)
 800166c:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800166e:	4b77      	ldr	r3, [pc, #476]	@ (800184c <SignLetter+0x428>)
 8001670:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001674:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001678:	4a75      	ldr	r2, [pc, #468]	@ (8001850 <SignLetter+0x42c>)
 800167a:	6013      	str	r3, [r2, #0]

	        case 'G':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800167c:	4b6b      	ldr	r3, [pc, #428]	@ (800182c <SignLetter+0x408>)
 800167e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001682:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001686:	4a6a      	ldr	r2, [pc, #424]	@ (8001830 <SignLetter+0x40c>)
 8001688:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800168a:	4b6a      	ldr	r3, [pc, #424]	@ (8001834 <SignLetter+0x410>)
 800168c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001690:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001694:	4a68      	ldr	r2, [pc, #416]	@ (8001838 <SignLetter+0x414>)
 8001696:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001698:	4b68      	ldr	r3, [pc, #416]	@ (800183c <SignLetter+0x418>)
 800169a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80016a2:	4a67      	ldr	r2, [pc, #412]	@ (8001840 <SignLetter+0x41c>)
 80016a4:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80016a6:	4b67      	ldr	r3, [pc, #412]	@ (8001844 <SignLetter+0x420>)
 80016a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ac:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80016b0:	4a65      	ldr	r2, [pc, #404]	@ (8001848 <SignLetter+0x424>)
 80016b2:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80016b4:	4b65      	ldr	r3, [pc, #404]	@ (800184c <SignLetter+0x428>)
 80016b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ba:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80016be:	4a64      	ldr	r2, [pc, #400]	@ (8001850 <SignLetter+0x42c>)
 80016c0:	6013      	str	r3, [r2, #0]

	        case 'H':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80016c2:	4b5a      	ldr	r3, [pc, #360]	@ (800182c <SignLetter+0x408>)
 80016c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c8:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80016cc:	4a58      	ldr	r2, [pc, #352]	@ (8001830 <SignLetter+0x40c>)
 80016ce:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80016d0:	4b58      	ldr	r3, [pc, #352]	@ (8001834 <SignLetter+0x410>)
 80016d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d6:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80016da:	4a57      	ldr	r2, [pc, #348]	@ (8001838 <SignLetter+0x414>)
 80016dc:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80016de:	4b57      	ldr	r3, [pc, #348]	@ (800183c <SignLetter+0x418>)
 80016e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e4:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80016e8:	4a55      	ldr	r2, [pc, #340]	@ (8001840 <SignLetter+0x41c>)
 80016ea:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80016ec:	4b55      	ldr	r3, [pc, #340]	@ (8001844 <SignLetter+0x420>)
 80016ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f2:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80016f6:	4a54      	ldr	r2, [pc, #336]	@ (8001848 <SignLetter+0x424>)
 80016f8:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80016fa:	4b54      	ldr	r3, [pc, #336]	@ (800184c <SignLetter+0x428>)
 80016fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001700:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001704:	4a52      	ldr	r2, [pc, #328]	@ (8001850 <SignLetter+0x42c>)
 8001706:	6013      	str	r3, [r2, #0]

	        case 'I':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001708:	4b48      	ldr	r3, [pc, #288]	@ (800182c <SignLetter+0x408>)
 800170a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001712:	4a47      	ldr	r2, [pc, #284]	@ (8001830 <SignLetter+0x40c>)
 8001714:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001716:	4b47      	ldr	r3, [pc, #284]	@ (8001834 <SignLetter+0x410>)
 8001718:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001720:	4a45      	ldr	r2, [pc, #276]	@ (8001838 <SignLetter+0x414>)
 8001722:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001724:	4b45      	ldr	r3, [pc, #276]	@ (800183c <SignLetter+0x418>)
 8001726:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800172e:	4a44      	ldr	r2, [pc, #272]	@ (8001840 <SignLetter+0x41c>)
 8001730:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001732:	4b44      	ldr	r3, [pc, #272]	@ (8001844 <SignLetter+0x420>)
 8001734:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001738:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800173c:	4a42      	ldr	r2, [pc, #264]	@ (8001848 <SignLetter+0x424>)
 800173e:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001740:	4b42      	ldr	r3, [pc, #264]	@ (800184c <SignLetter+0x428>)
 8001742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001746:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800174a:	4a41      	ldr	r2, [pc, #260]	@ (8001850 <SignLetter+0x42c>)
 800174c:	6013      	str	r3, [r2, #0]

	        case 'J':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800174e:	4b37      	ldr	r3, [pc, #220]	@ (800182c <SignLetter+0x408>)
 8001750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001754:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001758:	4a35      	ldr	r2, [pc, #212]	@ (8001830 <SignLetter+0x40c>)
 800175a:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800175c:	4b35      	ldr	r3, [pc, #212]	@ (8001834 <SignLetter+0x410>)
 800175e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001762:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001766:	4a34      	ldr	r2, [pc, #208]	@ (8001838 <SignLetter+0x414>)
 8001768:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800176a:	4b34      	ldr	r3, [pc, #208]	@ (800183c <SignLetter+0x418>)
 800176c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001770:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001774:	4a32      	ldr	r2, [pc, #200]	@ (8001840 <SignLetter+0x41c>)
 8001776:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001778:	4b32      	ldr	r3, [pc, #200]	@ (8001844 <SignLetter+0x420>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001782:	4a31      	ldr	r2, [pc, #196]	@ (8001848 <SignLetter+0x424>)
 8001784:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001786:	4b31      	ldr	r3, [pc, #196]	@ (800184c <SignLetter+0x428>)
 8001788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001790:	4a2f      	ldr	r2, [pc, #188]	@ (8001850 <SignLetter+0x42c>)
 8001792:	6013      	str	r3, [r2, #0]

	        case 'K':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001794:	4b25      	ldr	r3, [pc, #148]	@ (800182c <SignLetter+0x408>)
 8001796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800179e:	4a24      	ldr	r2, [pc, #144]	@ (8001830 <SignLetter+0x40c>)
 80017a0:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80017a2:	4b24      	ldr	r3, [pc, #144]	@ (8001834 <SignLetter+0x410>)
 80017a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a8:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80017ac:	4a22      	ldr	r2, [pc, #136]	@ (8001838 <SignLetter+0x414>)
 80017ae:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80017b0:	4b22      	ldr	r3, [pc, #136]	@ (800183c <SignLetter+0x418>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80017ba:	4a21      	ldr	r2, [pc, #132]	@ (8001840 <SignLetter+0x41c>)
 80017bc:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80017be:	4b21      	ldr	r3, [pc, #132]	@ (8001844 <SignLetter+0x420>)
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80017c8:	4a1f      	ldr	r2, [pc, #124]	@ (8001848 <SignLetter+0x424>)
 80017ca:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80017cc:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <SignLetter+0x428>)
 80017ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d2:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80017d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001850 <SignLetter+0x42c>)
 80017d8:	6013      	str	r3, [r2, #0]

	        case 'L':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80017da:	4b14      	ldr	r3, [pc, #80]	@ (800182c <SignLetter+0x408>)
 80017dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80017e4:	4a12      	ldr	r2, [pc, #72]	@ (8001830 <SignLetter+0x40c>)
 80017e6:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80017e8:	4b12      	ldr	r3, [pc, #72]	@ (8001834 <SignLetter+0x410>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80017f2:	4a11      	ldr	r2, [pc, #68]	@ (8001838 <SignLetter+0x414>)
 80017f4:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80017f6:	4b11      	ldr	r3, [pc, #68]	@ (800183c <SignLetter+0x418>)
 80017f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fc:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001800:	4a0f      	ldr	r2, [pc, #60]	@ (8001840 <SignLetter+0x41c>)
 8001802:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001804:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <SignLetter+0x420>)
 8001806:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800180e:	4a0e      	ldr	r2, [pc, #56]	@ (8001848 <SignLetter+0x424>)
 8001810:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <SignLetter+0x428>)
 8001814:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001818:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800181c:	4a0c      	ldr	r2, [pc, #48]	@ (8001850 <SignLetter+0x42c>)
 800181e:	6013      	str	r3, [r2, #0]

	        case 'M':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001820:	4b02      	ldr	r3, [pc, #8]	@ (800182c <SignLetter+0x408>)
 8001822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001826:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800182a:	e013      	b.n	8001854 <SignLetter+0x430>
 800182c:	20000284 	.word	0x20000284
 8001830:	20000290 	.word	0x20000290
 8001834:	20000286 	.word	0x20000286
 8001838:	20000294 	.word	0x20000294
 800183c:	20000288 	.word	0x20000288
 8001840:	20000298 	.word	0x20000298
 8001844:	2000028a 	.word	0x2000028a
 8001848:	2000029c 	.word	0x2000029c
 800184c:	2000028c 	.word	0x2000028c
 8001850:	200002a0 	.word	0x200002a0
 8001854:	4ab1      	ldr	r2, [pc, #708]	@ (8001b1c <SignLetter+0x6f8>)
 8001856:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001858:	4bb1      	ldr	r3, [pc, #708]	@ (8001b20 <SignLetter+0x6fc>)
 800185a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001862:	4ab0      	ldr	r2, [pc, #704]	@ (8001b24 <SignLetter+0x700>)
 8001864:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001866:	4bb0      	ldr	r3, [pc, #704]	@ (8001b28 <SignLetter+0x704>)
 8001868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001870:	4aae      	ldr	r2, [pc, #696]	@ (8001b2c <SignLetter+0x708>)
 8001872:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001874:	4bae      	ldr	r3, [pc, #696]	@ (8001b30 <SignLetter+0x70c>)
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800187e:	4aad      	ldr	r2, [pc, #692]	@ (8001b34 <SignLetter+0x710>)
 8001880:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001882:	4bad      	ldr	r3, [pc, #692]	@ (8001b38 <SignLetter+0x714>)
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800188c:	4aab      	ldr	r2, [pc, #684]	@ (8001b3c <SignLetter+0x718>)
 800188e:	6013      	str	r3, [r2, #0]

	        case 'N':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001890:	4bab      	ldr	r3, [pc, #684]	@ (8001b40 <SignLetter+0x71c>)
 8001892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001896:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800189a:	4aa0      	ldr	r2, [pc, #640]	@ (8001b1c <SignLetter+0x6f8>)
 800189c:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800189e:	4ba0      	ldr	r3, [pc, #640]	@ (8001b20 <SignLetter+0x6fc>)
 80018a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a4:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80018a8:	4a9e      	ldr	r2, [pc, #632]	@ (8001b24 <SignLetter+0x700>)
 80018aa:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80018ac:	4b9e      	ldr	r3, [pc, #632]	@ (8001b28 <SignLetter+0x704>)
 80018ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018b2:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80018b6:	4a9d      	ldr	r2, [pc, #628]	@ (8001b2c <SignLetter+0x708>)
 80018b8:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80018ba:	4b9d      	ldr	r3, [pc, #628]	@ (8001b30 <SignLetter+0x70c>)
 80018bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80018c4:	4a9b      	ldr	r2, [pc, #620]	@ (8001b34 <SignLetter+0x710>)
 80018c6:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80018c8:	4b9b      	ldr	r3, [pc, #620]	@ (8001b38 <SignLetter+0x714>)
 80018ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ce:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80018d2:	4a9a      	ldr	r2, [pc, #616]	@ (8001b3c <SignLetter+0x718>)
 80018d4:	6013      	str	r3, [r2, #0]

	        case 'O':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80018d6:	4b9a      	ldr	r3, [pc, #616]	@ (8001b40 <SignLetter+0x71c>)
 80018d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018dc:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80018e0:	4a8e      	ldr	r2, [pc, #568]	@ (8001b1c <SignLetter+0x6f8>)
 80018e2:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80018e4:	4b8e      	ldr	r3, [pc, #568]	@ (8001b20 <SignLetter+0x6fc>)
 80018e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ea:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80018ee:	4a8d      	ldr	r2, [pc, #564]	@ (8001b24 <SignLetter+0x700>)
 80018f0:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80018f2:	4b8d      	ldr	r3, [pc, #564]	@ (8001b28 <SignLetter+0x704>)
 80018f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f8:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80018fc:	4a8b      	ldr	r2, [pc, #556]	@ (8001b2c <SignLetter+0x708>)
 80018fe:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001900:	4b8b      	ldr	r3, [pc, #556]	@ (8001b30 <SignLetter+0x70c>)
 8001902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001906:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800190a:	4a8a      	ldr	r2, [pc, #552]	@ (8001b34 <SignLetter+0x710>)
 800190c:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800190e:	4b8a      	ldr	r3, [pc, #552]	@ (8001b38 <SignLetter+0x714>)
 8001910:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001914:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001918:	4a88      	ldr	r2, [pc, #544]	@ (8001b3c <SignLetter+0x718>)
 800191a:	6013      	str	r3, [r2, #0]

	        case 'P':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800191c:	4b88      	ldr	r3, [pc, #544]	@ (8001b40 <SignLetter+0x71c>)
 800191e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001922:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001926:	4a7d      	ldr	r2, [pc, #500]	@ (8001b1c <SignLetter+0x6f8>)
 8001928:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800192a:	4b7d      	ldr	r3, [pc, #500]	@ (8001b20 <SignLetter+0x6fc>)
 800192c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001930:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001934:	4a7b      	ldr	r2, [pc, #492]	@ (8001b24 <SignLetter+0x700>)
 8001936:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001938:	4b7b      	ldr	r3, [pc, #492]	@ (8001b28 <SignLetter+0x704>)
 800193a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001942:	4a7a      	ldr	r2, [pc, #488]	@ (8001b2c <SignLetter+0x708>)
 8001944:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001946:	4b7a      	ldr	r3, [pc, #488]	@ (8001b30 <SignLetter+0x70c>)
 8001948:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001950:	4a78      	ldr	r2, [pc, #480]	@ (8001b34 <SignLetter+0x710>)
 8001952:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001954:	4b78      	ldr	r3, [pc, #480]	@ (8001b38 <SignLetter+0x714>)
 8001956:	f9b3 3000 	ldrsh.w	r3, [r3]
 800195a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800195e:	4a77      	ldr	r2, [pc, #476]	@ (8001b3c <SignLetter+0x718>)
 8001960:	6013      	str	r3, [r2, #0]

	        case 'Q':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001962:	4b77      	ldr	r3, [pc, #476]	@ (8001b40 <SignLetter+0x71c>)
 8001964:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001968:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800196c:	4a6b      	ldr	r2, [pc, #428]	@ (8001b1c <SignLetter+0x6f8>)
 800196e:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001970:	4b6b      	ldr	r3, [pc, #428]	@ (8001b20 <SignLetter+0x6fc>)
 8001972:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001976:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 800197a:	4a6a      	ldr	r2, [pc, #424]	@ (8001b24 <SignLetter+0x700>)
 800197c:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800197e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b28 <SignLetter+0x704>)
 8001980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001984:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001988:	4a68      	ldr	r2, [pc, #416]	@ (8001b2c <SignLetter+0x708>)
 800198a:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800198c:	4b68      	ldr	r3, [pc, #416]	@ (8001b30 <SignLetter+0x70c>)
 800198e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001992:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001996:	4a67      	ldr	r2, [pc, #412]	@ (8001b34 <SignLetter+0x710>)
 8001998:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800199a:	4b67      	ldr	r3, [pc, #412]	@ (8001b38 <SignLetter+0x714>)
 800199c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80019a4:	4a65      	ldr	r2, [pc, #404]	@ (8001b3c <SignLetter+0x718>)
 80019a6:	6013      	str	r3, [r2, #0]

	        case 'R':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80019a8:	4b65      	ldr	r3, [pc, #404]	@ (8001b40 <SignLetter+0x71c>)
 80019aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ae:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80019b2:	4a5a      	ldr	r2, [pc, #360]	@ (8001b1c <SignLetter+0x6f8>)
 80019b4:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80019b6:	4b5a      	ldr	r3, [pc, #360]	@ (8001b20 <SignLetter+0x6fc>)
 80019b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019bc:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80019c0:	4a58      	ldr	r2, [pc, #352]	@ (8001b24 <SignLetter+0x700>)
 80019c2:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80019c4:	4b58      	ldr	r3, [pc, #352]	@ (8001b28 <SignLetter+0x704>)
 80019c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ca:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80019ce:	4a57      	ldr	r2, [pc, #348]	@ (8001b2c <SignLetter+0x708>)
 80019d0:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80019d2:	4b57      	ldr	r3, [pc, #348]	@ (8001b30 <SignLetter+0x70c>)
 80019d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d8:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80019dc:	4a55      	ldr	r2, [pc, #340]	@ (8001b34 <SignLetter+0x710>)
 80019de:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80019e0:	4b55      	ldr	r3, [pc, #340]	@ (8001b38 <SignLetter+0x714>)
 80019e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e6:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80019ea:	4a54      	ldr	r2, [pc, #336]	@ (8001b3c <SignLetter+0x718>)
 80019ec:	6013      	str	r3, [r2, #0]

	        case 'S':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80019ee:	4b54      	ldr	r3, [pc, #336]	@ (8001b40 <SignLetter+0x71c>)
 80019f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f4:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 80019f8:	4a48      	ldr	r2, [pc, #288]	@ (8001b1c <SignLetter+0x6f8>)
 80019fa:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80019fc:	4b48      	ldr	r3, [pc, #288]	@ (8001b20 <SignLetter+0x6fc>)
 80019fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a02:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a06:	4a47      	ldr	r2, [pc, #284]	@ (8001b24 <SignLetter+0x700>)
 8001a08:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001a0a:	4b47      	ldr	r3, [pc, #284]	@ (8001b28 <SignLetter+0x704>)
 8001a0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a10:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a14:	4a45      	ldr	r2, [pc, #276]	@ (8001b2c <SignLetter+0x708>)
 8001a16:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001a18:	4b45      	ldr	r3, [pc, #276]	@ (8001b30 <SignLetter+0x70c>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a22:	4a44      	ldr	r2, [pc, #272]	@ (8001b34 <SignLetter+0x710>)
 8001a24:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001a26:	4b44      	ldr	r3, [pc, #272]	@ (8001b38 <SignLetter+0x714>)
 8001a28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a30:	4a42      	ldr	r2, [pc, #264]	@ (8001b3c <SignLetter+0x718>)
 8001a32:	6013      	str	r3, [r2, #0]

	        case 'T':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001a34:	4b42      	ldr	r3, [pc, #264]	@ (8001b40 <SignLetter+0x71c>)
 8001a36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a3a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a3e:	4a37      	ldr	r2, [pc, #220]	@ (8001b1c <SignLetter+0x6f8>)
 8001a40:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001a42:	4b37      	ldr	r3, [pc, #220]	@ (8001b20 <SignLetter+0x6fc>)
 8001a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a48:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a4c:	4a35      	ldr	r2, [pc, #212]	@ (8001b24 <SignLetter+0x700>)
 8001a4e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001a50:	4b35      	ldr	r3, [pc, #212]	@ (8001b28 <SignLetter+0x704>)
 8001a52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a56:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a5a:	4a34      	ldr	r2, [pc, #208]	@ (8001b2c <SignLetter+0x708>)
 8001a5c:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001a5e:	4b34      	ldr	r3, [pc, #208]	@ (8001b30 <SignLetter+0x70c>)
 8001a60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a64:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a68:	4a32      	ldr	r2, [pc, #200]	@ (8001b34 <SignLetter+0x710>)
 8001a6a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001a6c:	4b32      	ldr	r3, [pc, #200]	@ (8001b38 <SignLetter+0x714>)
 8001a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a72:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a76:	4a31      	ldr	r2, [pc, #196]	@ (8001b3c <SignLetter+0x718>)
 8001a78:	6013      	str	r3, [r2, #0]

	        case 'U':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001a7a:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <SignLetter+0x71c>)
 8001a7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a80:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a84:	4a25      	ldr	r2, [pc, #148]	@ (8001b1c <SignLetter+0x6f8>)
 8001a86:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001a88:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <SignLetter+0x6fc>)
 8001a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001a92:	4a24      	ldr	r2, [pc, #144]	@ (8001b24 <SignLetter+0x700>)
 8001a94:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001a96:	4b24      	ldr	r3, [pc, #144]	@ (8001b28 <SignLetter+0x704>)
 8001a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001aa0:	4a22      	ldr	r2, [pc, #136]	@ (8001b2c <SignLetter+0x708>)
 8001aa2:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001aa4:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <SignLetter+0x70c>)
 8001aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aaa:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001aae:	4a21      	ldr	r2, [pc, #132]	@ (8001b34 <SignLetter+0x710>)
 8001ab0:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001ab2:	4b21      	ldr	r3, [pc, #132]	@ (8001b38 <SignLetter+0x714>)
 8001ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab8:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001abc:	4a1f      	ldr	r2, [pc, #124]	@ (8001b3c <SignLetter+0x718>)
 8001abe:	6013      	str	r3, [r2, #0]

	        case 'V':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b40 <SignLetter+0x71c>)
 8001ac2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac6:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001aca:	4a14      	ldr	r2, [pc, #80]	@ (8001b1c <SignLetter+0x6f8>)
 8001acc:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001ace:	4b14      	ldr	r3, [pc, #80]	@ (8001b20 <SignLetter+0x6fc>)
 8001ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad4:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001ad8:	4a12      	ldr	r2, [pc, #72]	@ (8001b24 <SignLetter+0x700>)
 8001ada:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001adc:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <SignLetter+0x704>)
 8001ade:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae2:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001ae6:	4a11      	ldr	r2, [pc, #68]	@ (8001b2c <SignLetter+0x708>)
 8001ae8:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001aea:	4b11      	ldr	r3, [pc, #68]	@ (8001b30 <SignLetter+0x70c>)
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001af4:	4a0f      	ldr	r2, [pc, #60]	@ (8001b34 <SignLetter+0x710>)
 8001af6:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001af8:	4b0f      	ldr	r3, [pc, #60]	@ (8001b38 <SignLetter+0x714>)
 8001afa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afe:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001b02:	4a0e      	ldr	r2, [pc, #56]	@ (8001b3c <SignLetter+0x718>)
 8001b04:	6013      	str	r3, [r2, #0]

	        case 'W':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <SignLetter+0x71c>)
 8001b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001b10:	4a02      	ldr	r2, [pc, #8]	@ (8001b1c <SignLetter+0x6f8>)
 8001b12:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001b14:	4b02      	ldr	r3, [pc, #8]	@ (8001b20 <SignLetter+0x6fc>)
 8001b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1a:	e013      	b.n	8001b44 <SignLetter+0x720>
 8001b1c:	20000290 	.word	0x20000290
 8001b20:	20000286 	.word	0x20000286
 8001b24:	20000294 	.word	0x20000294
 8001b28:	20000288 	.word	0x20000288
 8001b2c:	20000298 	.word	0x20000298
 8001b30:	2000028a 	.word	0x2000028a
 8001b34:	2000029c 	.word	0x2000029c
 8001b38:	2000028c 	.word	0x2000028c
 8001b3c:	200002a0 	.word	0x200002a0
 8001b40:	20000284 	.word	0x20000284
 8001b44:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001b48:	4a5d      	ldr	r2, [pc, #372]	@ (8001cc0 <SignLetter+0x89c>)
 8001b4a:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001b4c:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc4 <SignLetter+0x8a0>)
 8001b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b52:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001b56:	4a5c      	ldr	r2, [pc, #368]	@ (8001cc8 <SignLetter+0x8a4>)
 8001b58:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001b5a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ccc <SignLetter+0x8a8>)
 8001b5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b60:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001b64:	4a5a      	ldr	r2, [pc, #360]	@ (8001cd0 <SignLetter+0x8ac>)
 8001b66:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001b68:	4b5a      	ldr	r3, [pc, #360]	@ (8001cd4 <SignLetter+0x8b0>)
 8001b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b6e:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001b72:	4a59      	ldr	r2, [pc, #356]	@ (8001cd8 <SignLetter+0x8b4>)
 8001b74:	6013      	str	r3, [r2, #0]

	        case 'X':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001b76:	4b59      	ldr	r3, [pc, #356]	@ (8001cdc <SignLetter+0x8b8>)
 8001b78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7c:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001b80:	4a57      	ldr	r2, [pc, #348]	@ (8001ce0 <SignLetter+0x8bc>)
 8001b82:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001b84:	4b57      	ldr	r3, [pc, #348]	@ (8001ce4 <SignLetter+0x8c0>)
 8001b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8a:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001b8e:	4a4c      	ldr	r2, [pc, #304]	@ (8001cc0 <SignLetter+0x89c>)
 8001b90:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001b92:	4b4c      	ldr	r3, [pc, #304]	@ (8001cc4 <SignLetter+0x8a0>)
 8001b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b98:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001b9c:	4a4a      	ldr	r2, [pc, #296]	@ (8001cc8 <SignLetter+0x8a4>)
 8001b9e:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001ba0:	4b4a      	ldr	r3, [pc, #296]	@ (8001ccc <SignLetter+0x8a8>)
 8001ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba6:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001baa:	4a49      	ldr	r2, [pc, #292]	@ (8001cd0 <SignLetter+0x8ac>)
 8001bac:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001bae:	4b49      	ldr	r3, [pc, #292]	@ (8001cd4 <SignLetter+0x8b0>)
 8001bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb4:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001bb8:	4a47      	ldr	r2, [pc, #284]	@ (8001cd8 <SignLetter+0x8b4>)
 8001bba:	6013      	str	r3, [r2, #0]

	        case 'Y':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001bbc:	4b47      	ldr	r3, [pc, #284]	@ (8001cdc <SignLetter+0x8b8>)
 8001bbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc2:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001bc6:	4a46      	ldr	r2, [pc, #280]	@ (8001ce0 <SignLetter+0x8bc>)
 8001bc8:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001bca:	4b46      	ldr	r3, [pc, #280]	@ (8001ce4 <SignLetter+0x8c0>)
 8001bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd0:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001bd4:	4a3a      	ldr	r2, [pc, #232]	@ (8001cc0 <SignLetter+0x89c>)
 8001bd6:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	@ (8001cc4 <SignLetter+0x8a0>)
 8001bda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bde:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001be2:	4a39      	ldr	r2, [pc, #228]	@ (8001cc8 <SignLetter+0x8a4>)
 8001be4:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001be6:	4b39      	ldr	r3, [pc, #228]	@ (8001ccc <SignLetter+0x8a8>)
 8001be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bec:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001bf0:	4a37      	ldr	r2, [pc, #220]	@ (8001cd0 <SignLetter+0x8ac>)
 8001bf2:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001bf4:	4b37      	ldr	r3, [pc, #220]	@ (8001cd4 <SignLetter+0x8b0>)
 8001bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfa:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001bfe:	4a36      	ldr	r2, [pc, #216]	@ (8001cd8 <SignLetter+0x8b4>)
 8001c00:	6013      	str	r3, [r2, #0]

	        case 'Z':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001c02:	4b36      	ldr	r3, [pc, #216]	@ (8001cdc <SignLetter+0x8b8>)
 8001c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c08:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001c0c:	4a34      	ldr	r2, [pc, #208]	@ (8001ce0 <SignLetter+0x8bc>)
 8001c0e:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001c10:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <SignLetter+0x8c0>)
 8001c12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c16:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001c1a:	4a29      	ldr	r2, [pc, #164]	@ (8001cc0 <SignLetter+0x89c>)
 8001c1c:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001c1e:	4b29      	ldr	r3, [pc, #164]	@ (8001cc4 <SignLetter+0x8a0>)
 8001c20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c24:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001c28:	4a27      	ldr	r2, [pc, #156]	@ (8001cc8 <SignLetter+0x8a4>)
 8001c2a:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001c2c:	4b27      	ldr	r3, [pc, #156]	@ (8001ccc <SignLetter+0x8a8>)
 8001c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c32:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001c36:	4a26      	ldr	r2, [pc, #152]	@ (8001cd0 <SignLetter+0x8ac>)
 8001c38:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001c3a:	4b26      	ldr	r3, [pc, #152]	@ (8001cd4 <SignLetter+0x8b0>)
 8001c3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c40:	f5a3 63fa 	sub.w	r3, r3, #2000	@ 0x7d0
 8001c44:	4a24      	ldr	r2, [pc, #144]	@ (8001cd8 <SignLetter+0x8b4>)
 8001c46:	6013      	str	r3, [r2, #0]

	        default:
	            // Default position (rest)
	            Servo_StopAll();
 8001c48:	f7ff fb78 	bl	800133c <Servo_StopAll>
	            break;
 8001c4c:	bf00      	nop

	    }

	    Servo_SetMotion(THUMB, Direction_Decider(&thumb_desired_position), 100);
 8001c4e:	4824      	ldr	r0, [pc, #144]	@ (8001ce0 <SignLetter+0x8bc>)
 8001c50:	f7ff fbd2 	bl	80013f8 <Direction_Decider>
 8001c54:	4603      	mov	r3, r0
 8001c56:	b2db      	uxtb	r3, r3
 8001c58:	2264      	movs	r2, #100	@ 0x64
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	f7ff fae7 	bl	8001230 <Servo_SetMotion>
	    Servo_SetMotion(INDEX, Direction_Decider(&index_desired_position), 100);
 8001c62:	4817      	ldr	r0, [pc, #92]	@ (8001cc0 <SignLetter+0x89c>)
 8001c64:	f7ff fbc8 	bl	80013f8 <Direction_Decider>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2264      	movs	r2, #100	@ 0x64
 8001c6e:	4619      	mov	r1, r3
 8001c70:	2001      	movs	r0, #1
 8001c72:	f7ff fadd 	bl	8001230 <Servo_SetMotion>
	    Servo_SetMotion(MIDDLE, Direction_Decider(&middle_desired_position), 100);
 8001c76:	4814      	ldr	r0, [pc, #80]	@ (8001cc8 <SignLetter+0x8a4>)
 8001c78:	f7ff fbbe 	bl	80013f8 <Direction_Decider>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2264      	movs	r2, #100	@ 0x64
 8001c82:	4619      	mov	r1, r3
 8001c84:	2002      	movs	r0, #2
 8001c86:	f7ff fad3 	bl	8001230 <Servo_SetMotion>
	    Servo_SetMotion(RING, Direction_Decider(&ring_desired_position), 100);
 8001c8a:	4811      	ldr	r0, [pc, #68]	@ (8001cd0 <SignLetter+0x8ac>)
 8001c8c:	f7ff fbb4 	bl	80013f8 <Direction_Decider>
 8001c90:	4603      	mov	r3, r0
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2264      	movs	r2, #100	@ 0x64
 8001c96:	4619      	mov	r1, r3
 8001c98:	2003      	movs	r0, #3
 8001c9a:	f7ff fac9 	bl	8001230 <Servo_SetMotion>
	    Servo_SetMotion(PINKY, Direction_Decider(&pinky_desired_position), 100);
 8001c9e:	480e      	ldr	r0, [pc, #56]	@ (8001cd8 <SignLetter+0x8b4>)
 8001ca0:	f7ff fbaa 	bl	80013f8 <Direction_Decider>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2264      	movs	r2, #100	@ 0x64
 8001caa:	4619      	mov	r1, r3
 8001cac:	2004      	movs	r0, #4
 8001cae:	f7ff fabf 	bl	8001230 <Servo_SetMotion>

	    TimeVariation();
 8001cb2:	f000 f819 	bl	8001ce8 <TimeVariation>
	    // Return to neutral position
//	    Servo_StopAll();
	}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000294 	.word	0x20000294
 8001cc4:	20000288 	.word	0x20000288
 8001cc8:	20000298 	.word	0x20000298
 8001ccc:	2000028a 	.word	0x2000028a
 8001cd0:	2000029c 	.word	0x2000029c
 8001cd4:	2000028c 	.word	0x2000028c
 8001cd8:	200002a0 	.word	0x200002a0
 8001cdc:	20000284 	.word	0x20000284
 8001ce0:	20000290 	.word	0x20000290
 8001ce4:	20000286 	.word	0x20000286

08001ce8 <TimeVariation>:

	    // Give servos time to reach position
	    HAL_Delay(2000);
	}

	void TimeVariation(void){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
		if (thumb_desired_position == THUMB_CLOSED){
 8001cec:	4b3c      	ldr	r3, [pc, #240]	@ (8001de0 <TimeVariation+0xf8>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001cf4:	d112      	bne.n	8001d1c <TimeVariation+0x34>
			thumb_desired_position *= 0.5;
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8001de0 <TimeVariation+0xf8>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fce4 	bl	80006c8 <__aeabi_i2d>
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b37      	ldr	r3, [pc, #220]	@ (8001de4 <TimeVariation+0xfc>)
 8001d06:	f7fe fa63 	bl	80001d0 <__aeabi_dmul>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe fd43 	bl	800079c <__aeabi_d2iz>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a31      	ldr	r2, [pc, #196]	@ (8001de0 <TimeVariation+0xf8>)
 8001d1a:	6013      	str	r3, [r2, #0]
		}
		if (index_desired_position == INDEX_CLOSED){
 8001d1c:	4b32      	ldr	r3, [pc, #200]	@ (8001de8 <TimeVariation+0x100>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d24:	d112      	bne.n	8001d4c <TimeVariation+0x64>
			index_desired_position *= 0.5;
 8001d26:	4b30      	ldr	r3, [pc, #192]	@ (8001de8 <TimeVariation+0x100>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7fe fccc 	bl	80006c8 <__aeabi_i2d>
 8001d30:	f04f 0200 	mov.w	r2, #0
 8001d34:	4b2b      	ldr	r3, [pc, #172]	@ (8001de4 <TimeVariation+0xfc>)
 8001d36:	f7fe fa4b 	bl	80001d0 <__aeabi_dmul>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	4610      	mov	r0, r2
 8001d40:	4619      	mov	r1, r3
 8001d42:	f7fe fd2b 	bl	800079c <__aeabi_d2iz>
 8001d46:	4603      	mov	r3, r0
 8001d48:	4a27      	ldr	r2, [pc, #156]	@ (8001de8 <TimeVariation+0x100>)
 8001d4a:	6013      	str	r3, [r2, #0]
		}
		if (middle_desired_position == MIDDLE_CLOSED){
 8001d4c:	4b27      	ldr	r3, [pc, #156]	@ (8001dec <TimeVariation+0x104>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d54:	d112      	bne.n	8001d7c <TimeVariation+0x94>
			middle_desired_position *= 0.5;
 8001d56:	4b25      	ldr	r3, [pc, #148]	@ (8001dec <TimeVariation+0x104>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fcb4 	bl	80006c8 <__aeabi_i2d>
 8001d60:	f04f 0200 	mov.w	r2, #0
 8001d64:	4b1f      	ldr	r3, [pc, #124]	@ (8001de4 <TimeVariation+0xfc>)
 8001d66:	f7fe fa33 	bl	80001d0 <__aeabi_dmul>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4610      	mov	r0, r2
 8001d70:	4619      	mov	r1, r3
 8001d72:	f7fe fd13 	bl	800079c <__aeabi_d2iz>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4a1c      	ldr	r2, [pc, #112]	@ (8001dec <TimeVariation+0x104>)
 8001d7a:	6013      	str	r3, [r2, #0]
		}
		if (ring_desired_position == RING_CLOSED){
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001df0 <TimeVariation+0x108>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001d84:	d112      	bne.n	8001dac <TimeVariation+0xc4>
			ring_desired_position *= 0.5;
 8001d86:	4b1a      	ldr	r3, [pc, #104]	@ (8001df0 <TimeVariation+0x108>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7fe fc9c 	bl	80006c8 <__aeabi_i2d>
 8001d90:	f04f 0200 	mov.w	r2, #0
 8001d94:	4b13      	ldr	r3, [pc, #76]	@ (8001de4 <TimeVariation+0xfc>)
 8001d96:	f7fe fa1b 	bl	80001d0 <__aeabi_dmul>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	4610      	mov	r0, r2
 8001da0:	4619      	mov	r1, r3
 8001da2:	f7fe fcfb 	bl	800079c <__aeabi_d2iz>
 8001da6:	4603      	mov	r3, r0
 8001da8:	4a11      	ldr	r2, [pc, #68]	@ (8001df0 <TimeVariation+0x108>)
 8001daa:	6013      	str	r3, [r2, #0]
		}
		if (pinky_desired_position == PINKY_CLOSED){
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <TimeVariation+0x10c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001db4:	d112      	bne.n	8001ddc <TimeVariation+0xf4>
			pinky_desired_position *= 0.5;
 8001db6:	4b0f      	ldr	r3, [pc, #60]	@ (8001df4 <TimeVariation+0x10c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fc84 	bl	80006c8 <__aeabi_i2d>
 8001dc0:	f04f 0200 	mov.w	r2, #0
 8001dc4:	4b07      	ldr	r3, [pc, #28]	@ (8001de4 <TimeVariation+0xfc>)
 8001dc6:	f7fe fa03 	bl	80001d0 <__aeabi_dmul>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4610      	mov	r0, r2
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f7fe fce3 	bl	800079c <__aeabi_d2iz>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	4a06      	ldr	r2, [pc, #24]	@ (8001df4 <TimeVariation+0x10c>)
 8001dda:	6013      	str	r3, [r2, #0]
		}
	}
 8001ddc:	bf00      	nop
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000290 	.word	0x20000290
 8001de4:	3fe00000 	.word	0x3fe00000
 8001de8:	20000294 	.word	0x20000294
 8001dec:	20000298 	.word	0x20000298
 8001df0:	2000029c 	.word	0x2000029c
 8001df4:	200002a0 	.word	0x200002a0

08001df8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	SignLetter('A');
 8001e00:	2041      	movs	r0, #65	@ 0x41
 8001e02:	f7ff fb0f 	bl	8001424 <SignLetter>

	osTimerStart(Index_FingerHandle, abs(index_desired_position));
 8001e06:	4b3c      	ldr	r3, [pc, #240]	@ (8001ef8 <StartDefaultTask+0x100>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b3c      	ldr	r3, [pc, #240]	@ (8001efc <StartDefaultTask+0x104>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	bfb8      	it	lt
 8001e12:	425b      	neglt	r3, r3
 8001e14:	4619      	mov	r1, r3
 8001e16:	4610      	mov	r0, r2
 8001e18:	f004 fad4 	bl	80063c4 <osTimerStart>
	osTimerStart(Thumb_FingerHandle, abs(thumb_desired_position));
 8001e1c:	4b38      	ldr	r3, [pc, #224]	@ (8001f00 <StartDefaultTask+0x108>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b38      	ldr	r3, [pc, #224]	@ (8001f04 <StartDefaultTask+0x10c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bfb8      	it	lt
 8001e28:	425b      	neglt	r3, r3
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	f004 fac9 	bl	80063c4 <osTimerStart>
	osTimerStart(Middle_FingerHandle, abs(middle_desired_position));
 8001e32:	4b35      	ldr	r3, [pc, #212]	@ (8001f08 <StartDefaultTask+0x110>)
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4b35      	ldr	r3, [pc, #212]	@ (8001f0c <StartDefaultTask+0x114>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	bfb8      	it	lt
 8001e3e:	425b      	neglt	r3, r3
 8001e40:	4619      	mov	r1, r3
 8001e42:	4610      	mov	r0, r2
 8001e44:	f004 fabe 	bl	80063c4 <osTimerStart>
	osTimerStart(Ring_FingerHandle, abs(ring_desired_position));
 8001e48:	4b31      	ldr	r3, [pc, #196]	@ (8001f10 <StartDefaultTask+0x118>)
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b31      	ldr	r3, [pc, #196]	@ (8001f14 <StartDefaultTask+0x11c>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	bfb8      	it	lt
 8001e54:	425b      	neglt	r3, r3
 8001e56:	4619      	mov	r1, r3
 8001e58:	4610      	mov	r0, r2
 8001e5a:	f004 fab3 	bl	80063c4 <osTimerStart>
	osTimerStart(Pinky_FingerHandle, abs(pinky_desired_position));
 8001e5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001f18 <StartDefaultTask+0x120>)
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	4b2e      	ldr	r3, [pc, #184]	@ (8001f1c <StartDefaultTask+0x124>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	bfb8      	it	lt
 8001e6a:	425b      	neglt	r3, r3
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4610      	mov	r0, r2
 8001e70:	f004 faa8 	bl	80063c4 <osTimerStart>

	osDelay(5000);
 8001e74:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001e78:	f004 f9f8 	bl	800626c <osDelay>

	SignLetter('B');
 8001e7c:	2042      	movs	r0, #66	@ 0x42
 8001e7e:	f7ff fad1 	bl	8001424 <SignLetter>
	osTimerStart(Index_FingerHandle, abs(index_desired_position));
 8001e82:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef8 <StartDefaultTask+0x100>)
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <StartDefaultTask+0x104>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bfb8      	it	lt
 8001e8e:	425b      	neglt	r3, r3
 8001e90:	4619      	mov	r1, r3
 8001e92:	4610      	mov	r0, r2
 8001e94:	f004 fa96 	bl	80063c4 <osTimerStart>
	osTimerStart(Thumb_FingerHandle, abs(thumb_desired_position));
 8001e98:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <StartDefaultTask+0x108>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b19      	ldr	r3, [pc, #100]	@ (8001f04 <StartDefaultTask+0x10c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	bfb8      	it	lt
 8001ea4:	425b      	neglt	r3, r3
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4610      	mov	r0, r2
 8001eaa:	f004 fa8b 	bl	80063c4 <osTimerStart>
	osTimerStart(Middle_FingerHandle, abs(middle_desired_position));
 8001eae:	4b16      	ldr	r3, [pc, #88]	@ (8001f08 <StartDefaultTask+0x110>)
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	4b16      	ldr	r3, [pc, #88]	@ (8001f0c <StartDefaultTask+0x114>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	bfb8      	it	lt
 8001eba:	425b      	neglt	r3, r3
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4610      	mov	r0, r2
 8001ec0:	f004 fa80 	bl	80063c4 <osTimerStart>
	osTimerStart(Ring_FingerHandle, abs(ring_desired_position));
 8001ec4:	4b12      	ldr	r3, [pc, #72]	@ (8001f10 <StartDefaultTask+0x118>)
 8001ec6:	681a      	ldr	r2, [r3, #0]
 8001ec8:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <StartDefaultTask+0x11c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bfb8      	it	lt
 8001ed0:	425b      	neglt	r3, r3
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	f004 fa75 	bl	80063c4 <osTimerStart>
	osTimerStart(Pinky_FingerHandle, abs(pinky_desired_position));
 8001eda:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <StartDefaultTask+0x120>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4b0f      	ldr	r3, [pc, #60]	@ (8001f1c <StartDefaultTask+0x124>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	bfb8      	it	lt
 8001ee6:	425b      	neglt	r3, r3
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4610      	mov	r0, r2
 8001eec:	f004 fa6a 	bl	80063c4 <osTimerStart>

  for(;;)
  {
    osDelay(1);
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f004 f9bb 	bl	800626c <osDelay>
 8001ef6:	e7fb      	b.n	8001ef0 <StartDefaultTask+0xf8>
 8001ef8:	20000270 	.word	0x20000270
 8001efc:	20000294 	.word	0x20000294
 8001f00:	20000274 	.word	0x20000274
 8001f04:	20000290 	.word	0x20000290
 8001f08:	20000278 	.word	0x20000278
 8001f0c:	20000298 	.word	0x20000298
 8001f10:	2000027c 	.word	0x2000027c
 8001f14:	2000029c 	.word	0x2000029c
 8001f18:	20000280 	.word	0x20000280
 8001f1c:	200002a0 	.word	0x200002a0

08001f20 <Index>:
  /* USER CODE END 5 */
}

/* Index function */
void Index(void *argument)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Index */
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8001f28:	2100      	movs	r1, #0
 8001f2a:	4806      	ldr	r0, [pc, #24]	@ (8001f44 <Index+0x24>)
 8001f2c:	f002 fbbc 	bl	80046a8 <HAL_TIM_PWM_Stop>
	index_current = index_desired_position;
 8001f30:	4b05      	ldr	r3, [pc, #20]	@ (8001f48 <Index+0x28>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	b21a      	sxth	r2, r3
 8001f36:	4b05      	ldr	r3, [pc, #20]	@ (8001f4c <Index+0x2c>)
 8001f38:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Index */
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200000b4 	.word	0x200000b4
 8001f48:	20000294 	.word	0x20000294
 8001f4c:	20000286 	.word	0x20000286

08001f50 <Thumb>:

/* Thumb function */
void Thumb(void *argument)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thumb */
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001f58:	2100      	movs	r1, #0
 8001f5a:	4806      	ldr	r0, [pc, #24]	@ (8001f74 <Thumb+0x24>)
 8001f5c:	f002 fba4 	bl	80046a8 <HAL_TIM_PWM_Stop>
	thumb_current = thumb_desired_position;
 8001f60:	4b05      	ldr	r3, [pc, #20]	@ (8001f78 <Thumb+0x28>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	b21a      	sxth	r2, r3
 8001f66:	4b05      	ldr	r3, [pc, #20]	@ (8001f7c <Thumb+0x2c>)
 8001f68:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Thumb */
}
 8001f6a:	bf00      	nop
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000068 	.word	0x20000068
 8001f78:	20000290 	.word	0x20000290
 8001f7c:	20000284 	.word	0x20000284

08001f80 <Middle>:

/* Middle function */
void Middle(void *argument)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Middle */
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001f88:	2100      	movs	r1, #0
 8001f8a:	4806      	ldr	r0, [pc, #24]	@ (8001fa4 <Middle+0x24>)
 8001f8c:	f002 fb8c 	bl	80046a8 <HAL_TIM_PWM_Stop>
	middle_current = middle_desired_position;
 8001f90:	4b05      	ldr	r3, [pc, #20]	@ (8001fa8 <Middle+0x28>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	b21a      	sxth	r2, r3
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <Middle+0x2c>)
 8001f98:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Middle */
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000100 	.word	0x20000100
 8001fa8:	20000298 	.word	0x20000298
 8001fac:	20000288 	.word	0x20000288

08001fb0 <Ring>:

/* Ring function */
void Ring(void *argument)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ring */
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4806      	ldr	r0, [pc, #24]	@ (8001fd4 <Ring+0x24>)
 8001fbc:	f002 fb74 	bl	80046a8 <HAL_TIM_PWM_Stop>
	ring_current = ring_desired_position;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <Ring+0x28>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	b21a      	sxth	r2, r3
 8001fc6:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <Ring+0x2c>)
 8001fc8:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Ring */
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	2000014c 	.word	0x2000014c
 8001fd8:	2000029c 	.word	0x2000029c
 8001fdc:	2000028a 	.word	0x2000028a

08001fe0 <Pinky>:

/* Pinky function */
void Pinky(void *argument)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Pinky */
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001fe8:	2100      	movs	r1, #0
 8001fea:	4806      	ldr	r0, [pc, #24]	@ (8002004 <Pinky+0x24>)
 8001fec:	f002 fb5c 	bl	80046a8 <HAL_TIM_PWM_Stop>
	pinky_current = pinky_desired_position;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <Pinky+0x28>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	4b05      	ldr	r3, [pc, #20]	@ (800200c <Pinky+0x2c>)
 8001ff8:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Pinky */
}
 8001ffa:	bf00      	nop
 8001ffc:	3708      	adds	r7, #8
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000198 	.word	0x20000198
 8002008:	200002a0 	.word	0x200002a0
 800200c:	2000028c 	.word	0x2000028c

08002010 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a04      	ldr	r2, [pc, #16]	@ (8002030 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d101      	bne.n	8002026 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002022:	f000 fad7 	bl	80025d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002026:	bf00      	nop
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	40000c00 	.word	0x40000c00

08002034 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002038:	b672      	cpsid	i
}
 800203a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800203c:	bf00      	nop
 800203e:	e7fd      	b.n	800203c <Error_Handler+0x8>

08002040 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	4b11      	ldr	r3, [pc, #68]	@ (800208c <HAL_MspInit+0x4c>)
 8002048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800204a:	4a10      	ldr	r2, [pc, #64]	@ (800208c <HAL_MspInit+0x4c>)
 800204c:	f043 0301 	orr.w	r3, r3, #1
 8002050:	6613      	str	r3, [r2, #96]	@ 0x60
 8002052:	4b0e      	ldr	r3, [pc, #56]	@ (800208c <HAL_MspInit+0x4c>)
 8002054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	607b      	str	r3, [r7, #4]
 800205c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b0b      	ldr	r3, [pc, #44]	@ (800208c <HAL_MspInit+0x4c>)
 8002060:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002062:	4a0a      	ldr	r2, [pc, #40]	@ (800208c <HAL_MspInit+0x4c>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002068:	6593      	str	r3, [r2, #88]	@ 0x58
 800206a:	4b08      	ldr	r3, [pc, #32]	@ (800208c <HAL_MspInit+0x4c>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	210f      	movs	r1, #15
 800207a:	f06f 0001 	mvn.w	r0, #1
 800207e:	f000 fb81 	bl	8002784 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002082:	bf00      	nop
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	40021000 	.word	0x40021000

08002090 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	@ 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a2e      	ldr	r2, [pc, #184]	@ (8002158 <HAL_TIM_PWM_MspInit+0xc8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10c      	bne.n	80020bc <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020a2:	4b2e      	ldr	r3, [pc, #184]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 80020a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a6:	4a2d      	ldr	r2, [pc, #180]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 80020a8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020ac:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ae:	4b2b      	ldr	r3, [pc, #172]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 80020b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020b6:	61fb      	str	r3, [r7, #28]
 80020b8:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80020ba:	e046      	b.n	800214a <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c4:	d10c      	bne.n	80020e0 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020c6:	4b25      	ldr	r3, [pc, #148]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ca:	4a24      	ldr	r2, [pc, #144]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 80020cc:	f043 0301 	orr.w	r3, r3, #1
 80020d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020d2:	4b22      	ldr	r3, [pc, #136]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 80020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	69bb      	ldr	r3, [r7, #24]
}
 80020de:	e034      	b.n	800214a <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1e      	ldr	r2, [pc, #120]	@ (8002160 <HAL_TIM_PWM_MspInit+0xd0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d10c      	bne.n	8002104 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020ea:	4b1c      	ldr	r3, [pc, #112]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 80020ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020ee:	4a1b      	ldr	r2, [pc, #108]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80020f6:	4b19      	ldr	r3, [pc, #100]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 80020f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	617b      	str	r3, [r7, #20]
 8002100:	697b      	ldr	r3, [r7, #20]
}
 8002102:	e022      	b.n	800214a <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM4)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a16      	ldr	r2, [pc, #88]	@ (8002164 <HAL_TIM_PWM_MspInit+0xd4>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d10c      	bne.n	8002128 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800210e:	4b13      	ldr	r3, [pc, #76]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002112:	4a12      	ldr	r2, [pc, #72]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6593      	str	r3, [r2, #88]	@ 0x58
 800211a:	4b10      	ldr	r3, [pc, #64]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 800211c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	693b      	ldr	r3, [r7, #16]
}
 8002126:	e010      	b.n	800214a <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM8)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0e      	ldr	r2, [pc, #56]	@ (8002168 <HAL_TIM_PWM_MspInit+0xd8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10b      	bne.n	800214a <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002132:	4b0a      	ldr	r3, [pc, #40]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 8002134:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002136:	4a09      	ldr	r2, [pc, #36]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 8002138:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800213c:	6613      	str	r3, [r2, #96]	@ 0x60
 800213e:	4b07      	ldr	r3, [pc, #28]	@ (800215c <HAL_TIM_PWM_MspInit+0xcc>)
 8002140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002142:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	68fb      	ldr	r3, [r7, #12]
}
 800214a:	bf00      	nop
 800214c:	3724      	adds	r7, #36	@ 0x24
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40012c00 	.word	0x40012c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800
 8002168:	40013400 	.word	0x40013400

0800216c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	@ 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 031c 	add.w	r3, r7, #28
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a57      	ldr	r2, [pc, #348]	@ (80022e8 <HAL_TIM_MspPostInit+0x17c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d11e      	bne.n	80021cc <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800218e:	4b57      	ldr	r3, [pc, #348]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 8002190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002192:	4a56      	ldr	r2, [pc, #344]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 8002194:	f043 0301 	orr.w	r3, r3, #1
 8002198:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800219a:	4b54      	ldr	r3, [pc, #336]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 800219c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	61bb      	str	r3, [r7, #24]
 80021a4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021b8:	2301      	movs	r3, #1
 80021ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c6:	f000 fb07 	bl	80027d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80021ca:	e088      	b.n	80022de <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d4:	d11d      	bne.n	8002212 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	4b45      	ldr	r3, [pc, #276]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 80021d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021da:	4a44      	ldr	r2, [pc, #272]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80021e2:	4b42      	ldr	r3, [pc, #264]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 80021e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021ee:	2301      	movs	r3, #1
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021fe:	2301      	movs	r3, #1
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800220c:	f000 fae4 	bl	80027d8 <HAL_GPIO_Init>
}
 8002210:	e065      	b.n	80022de <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a36      	ldr	r2, [pc, #216]	@ (80022f0 <HAL_TIM_MspPostInit+0x184>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d11d      	bne.n	8002258 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221c:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 800221e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002220:	4a32      	ldr	r2, [pc, #200]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002228:	4b30      	ldr	r3, [pc, #192]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 800222a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002234:	2340      	movs	r3, #64	@ 0x40
 8002236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002244:	2302      	movs	r3, #2
 8002246:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002252:	f000 fac1 	bl	80027d8 <HAL_GPIO_Init>
}
 8002256:	e042      	b.n	80022de <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a25      	ldr	r2, [pc, #148]	@ (80022f4 <HAL_TIM_MspPostInit+0x188>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d11c      	bne.n	800229c <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	4b22      	ldr	r3, [pc, #136]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 8002264:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002266:	4a21      	ldr	r2, [pc, #132]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 8002268:	f043 0302 	orr.w	r3, r3, #2
 800226c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800226e:	4b1f      	ldr	r3, [pc, #124]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 8002270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800227a:	2340      	movs	r3, #64	@ 0x40
 800227c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227e:	2302      	movs	r3, #2
 8002280:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002282:	2300      	movs	r3, #0
 8002284:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002286:	2300      	movs	r3, #0
 8002288:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800228a:	2302      	movs	r3, #2
 800228c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228e:	f107 031c 	add.w	r3, r7, #28
 8002292:	4619      	mov	r1, r3
 8002294:	4818      	ldr	r0, [pc, #96]	@ (80022f8 <HAL_TIM_MspPostInit+0x18c>)
 8002296:	f000 fa9f 	bl	80027d8 <HAL_GPIO_Init>
}
 800229a:	e020      	b.n	80022de <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM8)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a16      	ldr	r2, [pc, #88]	@ (80022fc <HAL_TIM_MspPostInit+0x190>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d11b      	bne.n	80022de <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022a6:	4b11      	ldr	r3, [pc, #68]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 80022a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022aa:	4a10      	ldr	r2, [pc, #64]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 80022ac:	f043 0304 	orr.w	r3, r3, #4
 80022b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022b2:	4b0e      	ldr	r3, [pc, #56]	@ (80022ec <HAL_TIM_MspPostInit+0x180>)
 80022b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022be:	2340      	movs	r3, #64	@ 0x40
 80022c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c2:	2302      	movs	r3, #2
 80022c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ca:	2300      	movs	r3, #0
 80022cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022ce:	2303      	movs	r3, #3
 80022d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d2:	f107 031c 	add.w	r3, r7, #28
 80022d6:	4619      	mov	r1, r3
 80022d8:	4809      	ldr	r0, [pc, #36]	@ (8002300 <HAL_TIM_MspPostInit+0x194>)
 80022da:	f000 fa7d 	bl	80027d8 <HAL_GPIO_Init>
}
 80022de:	bf00      	nop
 80022e0:	3730      	adds	r7, #48	@ 0x30
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40012c00 	.word	0x40012c00
 80022ec:	40021000 	.word	0x40021000
 80022f0:	40000400 	.word	0x40000400
 80022f4:	40000800 	.word	0x40000800
 80022f8:	48000400 	.word	0x48000400
 80022fc:	40013400 	.word	0x40013400
 8002300:	48000800 	.word	0x48000800

08002304 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b0ac      	sub	sp, #176	@ 0xb0
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800230c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]
 8002318:	60da      	str	r2, [r3, #12]
 800231a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	2288      	movs	r2, #136	@ 0x88
 8002322:	2100      	movs	r1, #0
 8002324:	4618      	mov	r0, r3
 8002326:	f006 fdc7 	bl	8008eb8 <memset>
  if(huart->Instance==USART2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a25      	ldr	r2, [pc, #148]	@ (80023c4 <HAL_UART_MspInit+0xc0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d143      	bne.n	80023bc <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002334:	2302      	movs	r3, #2
 8002336:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002338:	2300      	movs	r3, #0
 800233a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4618      	mov	r0, r3
 8002342:	f001 fac5 	bl	80038d0 <HAL_RCCEx_PeriphCLKConfig>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800234c:	f7ff fe72 	bl	8002034 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002350:	4b1d      	ldr	r3, [pc, #116]	@ (80023c8 <HAL_UART_MspInit+0xc4>)
 8002352:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002354:	4a1c      	ldr	r2, [pc, #112]	@ (80023c8 <HAL_UART_MspInit+0xc4>)
 8002356:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800235a:	6593      	str	r3, [r2, #88]	@ 0x58
 800235c:	4b1a      	ldr	r3, [pc, #104]	@ (80023c8 <HAL_UART_MspInit+0xc4>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002360:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002368:	4b17      	ldr	r3, [pc, #92]	@ (80023c8 <HAL_UART_MspInit+0xc4>)
 800236a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236c:	4a16      	ldr	r2, [pc, #88]	@ (80023c8 <HAL_UART_MspInit+0xc4>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002374:	4b14      	ldr	r3, [pc, #80]	@ (80023c8 <HAL_UART_MspInit+0xc4>)
 8002376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	60fb      	str	r3, [r7, #12]
 800237e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002380:	230c      	movs	r3, #12
 8002382:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002386:	2302      	movs	r3, #2
 8002388:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238c:	2300      	movs	r3, #0
 800238e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002392:	2303      	movs	r3, #3
 8002394:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002398:	2307      	movs	r3, #7
 800239a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800239e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023a2:	4619      	mov	r1, r3
 80023a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a8:	f000 fa16 	bl	80027d8 <HAL_GPIO_Init>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80023ac:	2200      	movs	r2, #0
 80023ae:	2100      	movs	r1, #0
 80023b0:	2026      	movs	r0, #38	@ 0x26
 80023b2:	f000 f9e7 	bl	8002784 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80023b6:	2026      	movs	r0, #38	@ 0x26
 80023b8:	f000 fa00 	bl	80027bc <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80023bc:	bf00      	nop
 80023be:	37b0      	adds	r7, #176	@ 0xb0
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40004400 	.word	0x40004400
 80023c8:	40021000 	.word	0x40021000

080023cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08e      	sub	sp, #56	@ 0x38
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80023da:	4b34      	ldr	r3, [pc, #208]	@ (80024ac <HAL_InitTick+0xe0>)
 80023dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023de:	4a33      	ldr	r2, [pc, #204]	@ (80024ac <HAL_InitTick+0xe0>)
 80023e0:	f043 0308 	orr.w	r3, r3, #8
 80023e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023e6:	4b31      	ldr	r3, [pc, #196]	@ (80024ac <HAL_InitTick+0xe0>)
 80023e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80023f2:	f107 0210 	add.w	r2, r7, #16
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4611      	mov	r1, r2
 80023fc:	4618      	mov	r0, r3
 80023fe:	f001 f9d5 	bl	80037ac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002408:	2b00      	cmp	r3, #0
 800240a:	d103      	bne.n	8002414 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800240c:	f001 f9a2 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8002410:	6378      	str	r0, [r7, #52]	@ 0x34
 8002412:	e004      	b.n	800241e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002414:	f001 f99e 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8002418:	4603      	mov	r3, r0
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800241e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002420:	4a23      	ldr	r2, [pc, #140]	@ (80024b0 <HAL_InitTick+0xe4>)
 8002422:	fba2 2303 	umull	r2, r3, r2, r3
 8002426:	0c9b      	lsrs	r3, r3, #18
 8002428:	3b01      	subs	r3, #1
 800242a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 800242c:	4b21      	ldr	r3, [pc, #132]	@ (80024b4 <HAL_InitTick+0xe8>)
 800242e:	4a22      	ldr	r2, [pc, #136]	@ (80024b8 <HAL_InitTick+0xec>)
 8002430:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8002432:	4b20      	ldr	r3, [pc, #128]	@ (80024b4 <HAL_InitTick+0xe8>)
 8002434:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002438:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 800243a:	4a1e      	ldr	r2, [pc, #120]	@ (80024b4 <HAL_InitTick+0xe8>)
 800243c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800243e:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8002440:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <HAL_InitTick+0xe8>)
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002446:	4b1b      	ldr	r3, [pc, #108]	@ (80024b4 <HAL_InitTick+0xe8>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800244c:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <HAL_InitTick+0xe8>)
 800244e:	2200      	movs	r2, #0
 8002450:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8002452:	4818      	ldr	r0, [pc, #96]	@ (80024b4 <HAL_InitTick+0xe8>)
 8002454:	f001 fef8 	bl	8004248 <HAL_TIM_Base_Init>
 8002458:	4603      	mov	r3, r0
 800245a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800245e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002462:	2b00      	cmp	r3, #0
 8002464:	d11b      	bne.n	800249e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8002466:	4813      	ldr	r0, [pc, #76]	@ (80024b4 <HAL_InitTick+0xe8>)
 8002468:	f001 ff50 	bl	800430c <HAL_TIM_Base_Start_IT>
 800246c:	4603      	mov	r3, r0
 800246e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002472:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002476:	2b00      	cmp	r3, #0
 8002478:	d111      	bne.n	800249e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800247a:	2032      	movs	r0, #50	@ 0x32
 800247c:	f000 f99e 	bl	80027bc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2b0f      	cmp	r3, #15
 8002484:	d808      	bhi.n	8002498 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002486:	2200      	movs	r2, #0
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	2032      	movs	r0, #50	@ 0x32
 800248c:	f000 f97a 	bl	8002784 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002490:	4a0a      	ldr	r2, [pc, #40]	@ (80024bc <HAL_InitTick+0xf0>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6013      	str	r3, [r2, #0]
 8002496:	e002      	b.n	800249e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800249e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3738      	adds	r7, #56	@ 0x38
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40021000 	.word	0x40021000
 80024b0:	431bde83 	.word	0x431bde83
 80024b4:	200002a4 	.word	0x200002a4
 80024b8:	40000c00 	.word	0x40000c00
 80024bc:	20000040 	.word	0x20000040

080024c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024c4:	bf00      	nop
 80024c6:	e7fd      	b.n	80024c4 <NMI_Handler+0x4>

080024c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024cc:	bf00      	nop
 80024ce:	e7fd      	b.n	80024cc <HardFault_Handler+0x4>

080024d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <MemManage_Handler+0x4>

080024d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024dc:	bf00      	nop
 80024de:	e7fd      	b.n	80024dc <BusFault_Handler+0x4>

080024e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <UsageFault_Handler+0x4>

080024e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80024fa:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80024fe:	f000 fb2d 	bl	8002b5c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800250c:	4802      	ldr	r0, [pc, #8]	@ (8002518 <TIM5_IRQHandler+0x10>)
 800250e:	f002 f961 	bl	80047d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200002a4 	.word	0x200002a4

0800251c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002520:	4b06      	ldr	r3, [pc, #24]	@ (800253c <SystemInit+0x20>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002526:	4a05      	ldr	r2, [pc, #20]	@ (800253c <SystemInit+0x20>)
 8002528:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800252c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002540:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002578 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002544:	f7ff ffea 	bl	800251c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002548:	480c      	ldr	r0, [pc, #48]	@ (800257c <LoopForever+0x6>)
  ldr r1, =_edata
 800254a:	490d      	ldr	r1, [pc, #52]	@ (8002580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800254c:	4a0d      	ldr	r2, [pc, #52]	@ (8002584 <LoopForever+0xe>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a0a      	ldr	r2, [pc, #40]	@ (8002588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002560:	4c0a      	ldr	r4, [pc, #40]	@ (800258c <LoopForever+0x16>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800256e:	f006 fcab 	bl	8008ec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002572:	f7fe fad1 	bl	8000b18 <main>

08002576 <LoopForever>:

LoopForever:
    b LoopForever
 8002576:	e7fe      	b.n	8002576 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002578:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800257c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002580:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8002584:	080090f0 	.word	0x080090f0
  ldr r2, =_sbss
 8002588:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 800258c:	20001bfc 	.word	0x20001bfc

08002590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC1_2_IRQHandler>
	...

08002594 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b082      	sub	sp, #8
 8002598:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800259e:	4b0c      	ldr	r3, [pc, #48]	@ (80025d0 <HAL_Init+0x3c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a0b      	ldr	r2, [pc, #44]	@ (80025d0 <HAL_Init+0x3c>)
 80025a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025aa:	2003      	movs	r0, #3
 80025ac:	f000 f8df 	bl	800276e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025b0:	200f      	movs	r0, #15
 80025b2:	f7ff ff0b 	bl	80023cc <HAL_InitTick>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d002      	beq.n	80025c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	71fb      	strb	r3, [r7, #7]
 80025c0:	e001      	b.n	80025c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80025c2:	f7ff fd3d 	bl	8002040 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025c6:	79fb      	ldrb	r3, [r7, #7]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40022000 	.word	0x40022000

080025d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_IncTick+0x20>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_IncTick+0x24>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	4a04      	ldr	r2, [pc, #16]	@ (80025f8 <HAL_IncTick+0x24>)
 80025e6:	6013      	str	r3, [r2, #0]
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000044 	.word	0x20000044
 80025f8:	200002f0 	.word	0x200002f0

080025fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002600:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <HAL_GetTick+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	200002f0 	.word	0x200002f0

08002614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002624:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002630:	4013      	ands	r3, r2
 8002632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800263c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002640:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002646:	4a04      	ldr	r2, [pc, #16]	@ (8002658 <__NVIC_SetPriorityGrouping+0x44>)
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	60d3      	str	r3, [r2, #12]
}
 800264c:	bf00      	nop
 800264e:	3714      	adds	r7, #20
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	e000ed00 	.word	0xe000ed00

0800265c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002660:	4b04      	ldr	r3, [pc, #16]	@ (8002674 <__NVIC_GetPriorityGrouping+0x18>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	0a1b      	lsrs	r3, r3, #8
 8002666:	f003 0307 	and.w	r3, r3, #7
}
 800266a:	4618      	mov	r0, r3
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000ed00 	.word	0xe000ed00

08002678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002686:	2b00      	cmp	r3, #0
 8002688:	db0b      	blt.n	80026a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268a:	79fb      	ldrb	r3, [r7, #7]
 800268c:	f003 021f 	and.w	r2, r3, #31
 8002690:	4907      	ldr	r1, [pc, #28]	@ (80026b0 <__NVIC_EnableIRQ+0x38>)
 8002692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002696:	095b      	lsrs	r3, r3, #5
 8002698:	2001      	movs	r0, #1
 800269a:	fa00 f202 	lsl.w	r2, r0, r2
 800269e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026a2:	bf00      	nop
 80026a4:	370c      	adds	r7, #12
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000e100 	.word	0xe000e100

080026b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	db0a      	blt.n	80026de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	490c      	ldr	r1, [pc, #48]	@ (8002700 <__NVIC_SetPriority+0x4c>)
 80026ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026d2:	0112      	lsls	r2, r2, #4
 80026d4:	b2d2      	uxtb	r2, r2
 80026d6:	440b      	add	r3, r1
 80026d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026dc:	e00a      	b.n	80026f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4908      	ldr	r1, [pc, #32]	@ (8002704 <__NVIC_SetPriority+0x50>)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	3b04      	subs	r3, #4
 80026ec:	0112      	lsls	r2, r2, #4
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	440b      	add	r3, r1
 80026f2:	761a      	strb	r2, [r3, #24]
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000e100 	.word	0xe000e100
 8002704:	e000ed00 	.word	0xe000ed00

08002708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002708:	b480      	push	{r7}
 800270a:	b089      	sub	sp, #36	@ 0x24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	f1c3 0307 	rsb	r3, r3, #7
 8002722:	2b04      	cmp	r3, #4
 8002724:	bf28      	it	cs
 8002726:	2304      	movcs	r3, #4
 8002728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3304      	adds	r3, #4
 800272e:	2b06      	cmp	r3, #6
 8002730:	d902      	bls.n	8002738 <NVIC_EncodePriority+0x30>
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3b03      	subs	r3, #3
 8002736:	e000      	b.n	800273a <NVIC_EncodePriority+0x32>
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800273c:	f04f 32ff 	mov.w	r2, #4294967295
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	fa02 f303 	lsl.w	r3, r2, r3
 8002746:	43da      	mvns	r2, r3
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	401a      	ands	r2, r3
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002750:	f04f 31ff 	mov.w	r1, #4294967295
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	43d9      	mvns	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	4313      	orrs	r3, r2
         );
}
 8002762:	4618      	mov	r0, r3
 8002764:	3724      	adds	r7, #36	@ 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr

0800276e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff4c 	bl	8002614 <__NVIC_SetPriorityGrouping>
}
 800277c:	bf00      	nop
 800277e:	3708      	adds	r7, #8
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002796:	f7ff ff61 	bl	800265c <__NVIC_GetPriorityGrouping>
 800279a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	68b9      	ldr	r1, [r7, #8]
 80027a0:	6978      	ldr	r0, [r7, #20]
 80027a2:	f7ff ffb1 	bl	8002708 <NVIC_EncodePriority>
 80027a6:	4602      	mov	r2, r0
 80027a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027ac:	4611      	mov	r1, r2
 80027ae:	4618      	mov	r0, r3
 80027b0:	f7ff ff80 	bl	80026b4 <__NVIC_SetPriority>
}
 80027b4:	bf00      	nop
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff54 	bl	8002678 <__NVIC_EnableIRQ>
}
 80027d0:	bf00      	nop
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027e6:	e17f      	b.n	8002ae8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2101      	movs	r1, #1
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	4013      	ands	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	f000 8171 	beq.w	8002ae2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f003 0303 	and.w	r3, r3, #3
 8002808:	2b01      	cmp	r3, #1
 800280a:	d005      	beq.n	8002818 <HAL_GPIO_Init+0x40>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	f003 0303 	and.w	r3, r3, #3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d130      	bne.n	800287a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	2203      	movs	r2, #3
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	693a      	ldr	r2, [r7, #16]
 800282c:	4013      	ands	r3, r2
 800282e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	005b      	lsls	r3, r3, #1
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800284e:	2201      	movs	r2, #1
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	4013      	ands	r3, r2
 800285c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	091b      	lsrs	r3, r3, #4
 8002864:	f003 0201 	and.w	r2, r3, #1
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	fa02 f303 	lsl.w	r3, r2, r3
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	4313      	orrs	r3, r2
 8002872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	693a      	ldr	r2, [r7, #16]
 8002878:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b03      	cmp	r3, #3
 8002884:	d118      	bne.n	80028b8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800288a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800288c:	2201      	movs	r2, #1
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	43db      	mvns	r3, r3
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	4013      	ands	r3, r2
 800289a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	08db      	lsrs	r3, r3, #3
 80028a2:	f003 0201 	and.w	r2, r3, #1
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	693a      	ldr	r2, [r7, #16]
 80028b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 0303 	and.w	r3, r3, #3
 80028c0:	2b03      	cmp	r3, #3
 80028c2:	d017      	beq.n	80028f4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	2203      	movs	r2, #3
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43db      	mvns	r3, r3
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4013      	ands	r3, r2
 80028da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	693a      	ldr	r2, [r7, #16]
 80028f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0303 	and.w	r3, r3, #3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d123      	bne.n	8002948 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	08da      	lsrs	r2, r3, #3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3208      	adds	r2, #8
 8002908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800290c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	220f      	movs	r2, #15
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	693a      	ldr	r2, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	08da      	lsrs	r2, r3, #3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	3208      	adds	r2, #8
 8002942:	6939      	ldr	r1, [r7, #16]
 8002944:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	005b      	lsls	r3, r3, #1
 8002952:	2203      	movs	r2, #3
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	693a      	ldr	r2, [r7, #16]
 800295c:	4013      	ands	r3, r2
 800295e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0203 	and.w	r2, r3, #3
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002984:	2b00      	cmp	r3, #0
 8002986:	f000 80ac 	beq.w	8002ae2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298a:	4b5f      	ldr	r3, [pc, #380]	@ (8002b08 <HAL_GPIO_Init+0x330>)
 800298c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800298e:	4a5e      	ldr	r2, [pc, #376]	@ (8002b08 <HAL_GPIO_Init+0x330>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6613      	str	r3, [r2, #96]	@ 0x60
 8002996:	4b5c      	ldr	r3, [pc, #368]	@ (8002b08 <HAL_GPIO_Init+0x330>)
 8002998:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029a2:	4a5a      	ldr	r2, [pc, #360]	@ (8002b0c <HAL_GPIO_Init+0x334>)
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	089b      	lsrs	r3, r3, #2
 80029a8:	3302      	adds	r3, #2
 80029aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	f003 0303 	and.w	r3, r3, #3
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	220f      	movs	r2, #15
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43db      	mvns	r3, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4013      	ands	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80029cc:	d025      	beq.n	8002a1a <HAL_GPIO_Init+0x242>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a4f      	ldr	r2, [pc, #316]	@ (8002b10 <HAL_GPIO_Init+0x338>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d01f      	beq.n	8002a16 <HAL_GPIO_Init+0x23e>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b14 <HAL_GPIO_Init+0x33c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d019      	beq.n	8002a12 <HAL_GPIO_Init+0x23a>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	4a4d      	ldr	r2, [pc, #308]	@ (8002b18 <HAL_GPIO_Init+0x340>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_GPIO_Init+0x236>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a4c      	ldr	r2, [pc, #304]	@ (8002b1c <HAL_GPIO_Init+0x344>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d00d      	beq.n	8002a0a <HAL_GPIO_Init+0x232>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4a4b      	ldr	r2, [pc, #300]	@ (8002b20 <HAL_GPIO_Init+0x348>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d007      	beq.n	8002a06 <HAL_GPIO_Init+0x22e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a4a      	ldr	r2, [pc, #296]	@ (8002b24 <HAL_GPIO_Init+0x34c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d101      	bne.n	8002a02 <HAL_GPIO_Init+0x22a>
 80029fe:	2306      	movs	r3, #6
 8002a00:	e00c      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a02:	2307      	movs	r3, #7
 8002a04:	e00a      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a06:	2305      	movs	r3, #5
 8002a08:	e008      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a0a:	2304      	movs	r3, #4
 8002a0c:	e006      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e004      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a12:	2302      	movs	r3, #2
 8002a14:	e002      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <HAL_GPIO_Init+0x244>
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	f002 0203 	and.w	r2, r2, #3
 8002a22:	0092      	lsls	r2, r2, #2
 8002a24:	4093      	lsls	r3, r2
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a2c:	4937      	ldr	r1, [pc, #220]	@ (8002b0c <HAL_GPIO_Init+0x334>)
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	693a      	ldr	r2, [r7, #16]
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	43db      	mvns	r3, r3
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4013      	ands	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d003      	beq.n	8002a5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a5e:	4a32      	ldr	r2, [pc, #200]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a64:	4b30      	ldr	r3, [pc, #192]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4013      	ands	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d003      	beq.n	8002a88 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002a80:	693a      	ldr	r2, [r7, #16]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002a88:	4a27      	ldr	r2, [pc, #156]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002a8e:	4b26      	ldr	r3, [pc, #152]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002ab2:	4a1d      	ldr	r2, [pc, #116]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d003      	beq.n	8002adc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002adc:	4a12      	ldr	r2, [pc, #72]	@ (8002b28 <HAL_GPIO_Init+0x350>)
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa22 f303 	lsr.w	r3, r2, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f47f ae78 	bne.w	80027e8 <HAL_GPIO_Init+0x10>
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	40010000 	.word	0x40010000
 8002b10:	48000400 	.word	0x48000400
 8002b14:	48000800 	.word	0x48000800
 8002b18:	48000c00 	.word	0x48000c00
 8002b1c:	48001000 	.word	0x48001000
 8002b20:	48001400 	.word	0x48001400
 8002b24:	48001800 	.word	0x48001800
 8002b28:	40010400 	.word	0x40010400

08002b2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	460b      	mov	r3, r1
 8002b36:	807b      	strh	r3, [r7, #2]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b3c:	787b      	ldrb	r3, [r7, #1]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002b42:	887a      	ldrh	r2, [r7, #2]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002b48:	e002      	b.n	8002b50 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002b4a:	887a      	ldrh	r2, [r7, #2]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002b66:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b68:	695a      	ldr	r2, [r3, #20]
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d006      	beq.n	8002b80 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b72:	4a05      	ldr	r2, [pc, #20]	@ (8002b88 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b74:	88fb      	ldrh	r3, [r7, #6]
 8002b76:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b78:	88fb      	ldrh	r3, [r7, #6]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 f806 	bl	8002b8c <HAL_GPIO_EXTI_Callback>
  }
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40010400 	.word	0x40010400

08002b8c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	4603      	mov	r3, r0
 8002b94:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr
	...

08002ba4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ba8:	4b04      	ldr	r3, [pc, #16]	@ (8002bbc <HAL_PWREx_GetVoltageRange+0x18>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	40007000 	.word	0x40007000

08002bc0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bce:	d130      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bd0:	4b23      	ldr	r3, [pc, #140]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bdc:	d038      	beq.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bde:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002be6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002be8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002bec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002bee:	4b1d      	ldr	r3, [pc, #116]	@ (8002c64 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2232      	movs	r2, #50	@ 0x32
 8002bf4:	fb02 f303 	mul.w	r3, r2, r3
 8002bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c68 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfe:	0c9b      	lsrs	r3, r3, #18
 8002c00:	3301      	adds	r3, #1
 8002c02:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c04:	e002      	b.n	8002c0c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	3b01      	subs	r3, #1
 8002c0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c0c:	4b14      	ldr	r3, [pc, #80]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0e:	695b      	ldr	r3, [r3, #20]
 8002c10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c18:	d102      	bne.n	8002c20 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f2      	bne.n	8002c06 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c20:	4b0f      	ldr	r3, [pc, #60]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c22:	695b      	ldr	r3, [r3, #20]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2c:	d110      	bne.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e00f      	b.n	8002c52 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c32:	4b0b      	ldr	r3, [pc, #44]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c3e:	d007      	beq.n	8002c50 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c40:	4b07      	ldr	r3, [pc, #28]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c48:	4a05      	ldr	r2, [pc, #20]	@ (8002c60 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c4e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40007000 	.word	0x40007000
 8002c64:	2000003c 	.word	0x2000003c
 8002c68:	431bde83 	.word	0x431bde83

08002c6c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e3ca      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c7e:	4b97      	ldr	r3, [pc, #604]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002c80:	689b      	ldr	r3, [r3, #8]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c88:	4b94      	ldr	r3, [pc, #592]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 80e4 	beq.w	8002e68 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ca0:	69bb      	ldr	r3, [r7, #24]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d007      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x4a>
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b0c      	cmp	r3, #12
 8002caa:	f040 808b 	bne.w	8002dc4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	f040 8087 	bne.w	8002dc4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002cb6:	4b89      	ldr	r3, [pc, #548]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d005      	beq.n	8002cce <HAL_RCC_OscConfig+0x62>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e3a2      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a1a      	ldr	r2, [r3, #32]
 8002cd2:	4b82      	ldr	r3, [pc, #520]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0308 	and.w	r3, r3, #8
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d004      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x7c>
 8002cde:	4b7f      	ldr	r3, [pc, #508]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce6:	e005      	b.n	8002cf4 <HAL_RCC_OscConfig+0x88>
 8002ce8:	4b7c      	ldr	r3, [pc, #496]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d223      	bcs.n	8002d40 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 fd87 	bl	8003810 <RCC_SetFlashLatencyFromMSIRange>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e383      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d0c:	4b73      	ldr	r3, [pc, #460]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a72      	ldr	r2, [pc, #456]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d12:	f043 0308 	orr.w	r3, r3, #8
 8002d16:	6013      	str	r3, [r2, #0]
 8002d18:	4b70      	ldr	r3, [pc, #448]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	496d      	ldr	r1, [pc, #436]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d2a:	4b6c      	ldr	r3, [pc, #432]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69db      	ldr	r3, [r3, #28]
 8002d36:	021b      	lsls	r3, r3, #8
 8002d38:	4968      	ldr	r1, [pc, #416]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	604b      	str	r3, [r1, #4]
 8002d3e:	e025      	b.n	8002d8c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d40:	4b66      	ldr	r3, [pc, #408]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a65      	ldr	r2, [pc, #404]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d46:	f043 0308 	orr.w	r3, r3, #8
 8002d4a:	6013      	str	r3, [r2, #0]
 8002d4c:	4b63      	ldr	r3, [pc, #396]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4960      	ldr	r1, [pc, #384]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	495b      	ldr	r1, [pc, #364]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d109      	bne.n	8002d8c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a1b      	ldr	r3, [r3, #32]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fd47 	bl	8003810 <RCC_SetFlashLatencyFromMSIRange>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e343      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d8c:	f000 fc4a 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8002d90:	4602      	mov	r2, r0
 8002d92:	4b52      	ldr	r3, [pc, #328]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	091b      	lsrs	r3, r3, #4
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	4950      	ldr	r1, [pc, #320]	@ (8002ee0 <HAL_RCC_OscConfig+0x274>)
 8002d9e:	5ccb      	ldrb	r3, [r1, r3]
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	fa22 f303 	lsr.w	r3, r2, r3
 8002da8:	4a4e      	ldr	r2, [pc, #312]	@ (8002ee4 <HAL_RCC_OscConfig+0x278>)
 8002daa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dac:	4b4e      	ldr	r3, [pc, #312]	@ (8002ee8 <HAL_RCC_OscConfig+0x27c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fb0b 	bl	80023cc <HAL_InitTick>
 8002db6:	4603      	mov	r3, r0
 8002db8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d052      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
 8002dc2:	e327      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d032      	beq.n	8002e32 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dcc:	4b43      	ldr	r3, [pc, #268]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a42      	ldr	r2, [pc, #264]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002dd2:	f043 0301 	orr.w	r3, r3, #1
 8002dd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dd8:	f7ff fc10 	bl	80025fc <HAL_GetTick>
 8002ddc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dde:	e008      	b.n	8002df2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002de0:	f7ff fc0c 	bl	80025fc <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	2b02      	cmp	r3, #2
 8002dec:	d901      	bls.n	8002df2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002dee:	2303      	movs	r3, #3
 8002df0:	e310      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002df2:	4b3a      	ldr	r3, [pc, #232]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0302 	and.w	r3, r3, #2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d0f0      	beq.n	8002de0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002dfe:	4b37      	ldr	r3, [pc, #220]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a36      	ldr	r2, [pc, #216]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e04:	f043 0308 	orr.w	r3, r3, #8
 8002e08:	6013      	str	r3, [r2, #0]
 8002e0a:	4b34      	ldr	r3, [pc, #208]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a1b      	ldr	r3, [r3, #32]
 8002e16:	4931      	ldr	r1, [pc, #196]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	021b      	lsls	r3, r3, #8
 8002e2a:	492c      	ldr	r1, [pc, #176]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	604b      	str	r3, [r1, #4]
 8002e30:	e01a      	b.n	8002e68 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e32:	4b2a      	ldr	r3, [pc, #168]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a29      	ldr	r2, [pc, #164]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e3e:	f7ff fbdd 	bl	80025fc <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e44:	e008      	b.n	8002e58 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e46:	f7ff fbd9 	bl	80025fc <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d901      	bls.n	8002e58 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e2dd      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e58:	4b20      	ldr	r3, [pc, #128]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1f0      	bne.n	8002e46 <HAL_RCC_OscConfig+0x1da>
 8002e64:	e000      	b.n	8002e68 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e66:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0301 	and.w	r3, r3, #1
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d074      	beq.n	8002f5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d005      	beq.n	8002e86 <HAL_RCC_OscConfig+0x21a>
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	2b0c      	cmp	r3, #12
 8002e7e:	d10e      	bne.n	8002e9e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d10b      	bne.n	8002e9e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e86:	4b15      	ldr	r3, [pc, #84]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d064      	beq.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d160      	bne.n	8002f5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e2ba      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ea6:	d106      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x24a>
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a0b      	ldr	r2, [pc, #44]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	e026      	b.n	8002f04 <HAL_RCC_OscConfig+0x298>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ebe:	d115      	bne.n	8002eec <HAL_RCC_OscConfig+0x280>
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a05      	ldr	r2, [pc, #20]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002ec6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a02      	ldr	r2, [pc, #8]	@ (8002edc <HAL_RCC_OscConfig+0x270>)
 8002ed2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	e014      	b.n	8002f04 <HAL_RCC_OscConfig+0x298>
 8002eda:	bf00      	nop
 8002edc:	40021000 	.word	0x40021000
 8002ee0:	08009098 	.word	0x08009098
 8002ee4:	2000003c 	.word	0x2000003c
 8002ee8:	20000040 	.word	0x20000040
 8002eec:	4ba0      	ldr	r3, [pc, #640]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a9f      	ldr	r2, [pc, #636]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002ef2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef6:	6013      	str	r3, [r2, #0]
 8002ef8:	4b9d      	ldr	r3, [pc, #628]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a9c      	ldr	r2, [pc, #624]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002efe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d013      	beq.n	8002f34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0c:	f7ff fb76 	bl	80025fc <HAL_GetTick>
 8002f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f12:	e008      	b.n	8002f26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f14:	f7ff fb72 	bl	80025fc <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b64      	cmp	r3, #100	@ 0x64
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e276      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f26:	4b92      	ldr	r3, [pc, #584]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d0f0      	beq.n	8002f14 <HAL_RCC_OscConfig+0x2a8>
 8002f32:	e014      	b.n	8002f5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f34:	f7ff fb62 	bl	80025fc <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7ff fb5e 	bl	80025fc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	@ 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e262      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f4e:	4b88      	ldr	r3, [pc, #544]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_OscConfig+0x2d0>
 8002f5a:	e000      	b.n	8002f5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d060      	beq.n	800302c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f6a:	69bb      	ldr	r3, [r7, #24]
 8002f6c:	2b04      	cmp	r3, #4
 8002f6e:	d005      	beq.n	8002f7c <HAL_RCC_OscConfig+0x310>
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	2b0c      	cmp	r3, #12
 8002f74:	d119      	bne.n	8002faa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d116      	bne.n	8002faa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f7c:	4b7c      	ldr	r3, [pc, #496]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_OscConfig+0x328>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e23f      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b76      	ldr	r3, [pc, #472]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	061b      	lsls	r3, r3, #24
 8002fa2:	4973      	ldr	r1, [pc, #460]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa8:	e040      	b.n	800302c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68db      	ldr	r3, [r3, #12]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d023      	beq.n	8002ffa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fb2:	4b6f      	ldr	r3, [pc, #444]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a6e      	ldr	r2, [pc, #440]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002fb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002fbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbe:	f7ff fb1d 	bl	80025fc <HAL_GetTick>
 8002fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fc6:	f7ff fb19 	bl	80025fc <HAL_GetTick>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e21d      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fd8:	4b65      	ldr	r3, [pc, #404]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe4:	4b62      	ldr	r3, [pc, #392]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	061b      	lsls	r3, r3, #24
 8002ff2:	495f      	ldr	r1, [pc, #380]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	604b      	str	r3, [r1, #4]
 8002ff8:	e018      	b.n	800302c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a5c      	ldr	r2, [pc, #368]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8003000:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003004:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003006:	f7ff faf9 	bl	80025fc <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800300e:	f7ff faf5 	bl	80025fc <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e1f9      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003020:	4b53      	ldr	r3, [pc, #332]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003028:	2b00      	cmp	r3, #0
 800302a:	d1f0      	bne.n	800300e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d03c      	beq.n	80030b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01c      	beq.n	800307a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003040:	4b4b      	ldr	r3, [pc, #300]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8003042:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003046:	4a4a      	ldr	r2, [pc, #296]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003050:	f7ff fad4 	bl	80025fc <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003056:	e008      	b.n	800306a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7ff fad0 	bl	80025fc <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d901      	bls.n	800306a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e1d4      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800306a:	4b41      	ldr	r3, [pc, #260]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 800306c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d0ef      	beq.n	8003058 <HAL_RCC_OscConfig+0x3ec>
 8003078:	e01b      	b.n	80030b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307a:	4b3d      	ldr	r3, [pc, #244]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 800307c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003080:	4a3b      	ldr	r2, [pc, #236]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8003082:	f023 0301 	bic.w	r3, r3, #1
 8003086:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308a:	f7ff fab7 	bl	80025fc <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003092:	f7ff fab3 	bl	80025fc <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1b7      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030a4:	4b32      	ldr	r3, [pc, #200]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 80030a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ef      	bne.n	8003092 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80a6 	beq.w	800320c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c0:	2300      	movs	r3, #0
 80030c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030c4:	4b2a      	ldr	r3, [pc, #168]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 80030c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10d      	bne.n	80030ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d0:	4b27      	ldr	r3, [pc, #156]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 80030d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d4:	4a26      	ldr	r2, [pc, #152]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 80030d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030da:	6593      	str	r3, [r2, #88]	@ 0x58
 80030dc:	4b24      	ldr	r3, [pc, #144]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 80030de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030e8:	2301      	movs	r3, #1
 80030ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030ec:	4b21      	ldr	r3, [pc, #132]	@ (8003174 <HAL_RCC_OscConfig+0x508>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d118      	bne.n	800312a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f8:	4b1e      	ldr	r3, [pc, #120]	@ (8003174 <HAL_RCC_OscConfig+0x508>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1d      	ldr	r2, [pc, #116]	@ (8003174 <HAL_RCC_OscConfig+0x508>)
 80030fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003102:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003104:	f7ff fa7a 	bl	80025fc <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310c:	f7ff fa76 	bl	80025fc <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e17a      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800311e:	4b15      	ldr	r3, [pc, #84]	@ (8003174 <HAL_RCC_OscConfig+0x508>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d108      	bne.n	8003144 <HAL_RCC_OscConfig+0x4d8>
 8003132:	4b0f      	ldr	r3, [pc, #60]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8003134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003138:	4a0d      	ldr	r2, [pc, #52]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003142:	e029      	b.n	8003198 <HAL_RCC_OscConfig+0x52c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b05      	cmp	r3, #5
 800314a:	d115      	bne.n	8003178 <HAL_RCC_OscConfig+0x50c>
 800314c:	4b08      	ldr	r3, [pc, #32]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 800314e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003152:	4a07      	ldr	r2, [pc, #28]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800315c:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 800315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003162:	4a03      	ldr	r2, [pc, #12]	@ (8003170 <HAL_RCC_OscConfig+0x504>)
 8003164:	f043 0301 	orr.w	r3, r3, #1
 8003168:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800316c:	e014      	b.n	8003198 <HAL_RCC_OscConfig+0x52c>
 800316e:	bf00      	nop
 8003170:	40021000 	.word	0x40021000
 8003174:	40007000 	.word	0x40007000
 8003178:	4b9c      	ldr	r3, [pc, #624]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800317e:	4a9b      	ldr	r2, [pc, #620]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003180:	f023 0301 	bic.w	r3, r3, #1
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003188:	4b98      	ldr	r3, [pc, #608]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800318e:	4a97      	ldr	r2, [pc, #604]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003190:	f023 0304 	bic.w	r3, r3, #4
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d016      	beq.n	80031ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a0:	f7ff fa2c 	bl	80025fc <HAL_GetTick>
 80031a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a6:	e00a      	b.n	80031be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a8:	f7ff fa28 	bl	80025fc <HAL_GetTick>
 80031ac:	4602      	mov	r2, r0
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e12a      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031be:	4b8b      	ldr	r3, [pc, #556]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0ed      	beq.n	80031a8 <HAL_RCC_OscConfig+0x53c>
 80031cc:	e015      	b.n	80031fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ce:	f7ff fa15 	bl	80025fc <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031d4:	e00a      	b.n	80031ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d6:	f7ff fa11 	bl	80025fc <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d901      	bls.n	80031ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e113      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031ec:	4b7f      	ldr	r3, [pc, #508]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	f003 0302 	and.w	r3, r3, #2
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1ed      	bne.n	80031d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031fa:	7ffb      	ldrb	r3, [r7, #31]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d105      	bne.n	800320c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003200:	4b7a      	ldr	r3, [pc, #488]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003204:	4a79      	ldr	r2, [pc, #484]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003206:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80fe 	beq.w	8003412 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800321a:	2b02      	cmp	r3, #2
 800321c:	f040 80d0 	bne.w	80033c0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003220:	4b72      	ldr	r3, [pc, #456]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0203 	and.w	r2, r3, #3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003230:	429a      	cmp	r2, r3
 8003232:	d130      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	3b01      	subs	r3, #1
 8003240:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003242:	429a      	cmp	r2, r3
 8003244:	d127      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003250:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003252:	429a      	cmp	r2, r3
 8003254:	d11f      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003260:	2a07      	cmp	r2, #7
 8003262:	bf14      	ite	ne
 8003264:	2201      	movne	r2, #1
 8003266:	2200      	moveq	r2, #0
 8003268:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800326a:	4293      	cmp	r3, r2
 800326c:	d113      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003278:	085b      	lsrs	r3, r3, #1
 800327a:	3b01      	subs	r3, #1
 800327c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d109      	bne.n	8003296 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	085b      	lsrs	r3, r3, #1
 800328e:	3b01      	subs	r3, #1
 8003290:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003292:	429a      	cmp	r2, r3
 8003294:	d06e      	beq.n	8003374 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	2b0c      	cmp	r3, #12
 800329a:	d069      	beq.n	8003370 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800329c:	4b53      	ldr	r3, [pc, #332]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d105      	bne.n	80032b4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80032a8:	4b50      	ldr	r3, [pc, #320]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d001      	beq.n	80032b8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e0ad      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80032b8:	4b4c      	ldr	r3, [pc, #304]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a4b      	ldr	r2, [pc, #300]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 80032be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80032c2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032c4:	f7ff f99a 	bl	80025fc <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7ff f996 	bl	80025fc <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e09a      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80032de:	4b43      	ldr	r3, [pc, #268]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ea:	4b40      	ldr	r3, [pc, #256]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	4b40      	ldr	r3, [pc, #256]	@ (80033f0 <HAL_RCC_OscConfig+0x784>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032fa:	3a01      	subs	r2, #1
 80032fc:	0112      	lsls	r2, r2, #4
 80032fe:	4311      	orrs	r1, r2
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003304:	0212      	lsls	r2, r2, #8
 8003306:	4311      	orrs	r1, r2
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800330c:	0852      	lsrs	r2, r2, #1
 800330e:	3a01      	subs	r2, #1
 8003310:	0552      	lsls	r2, r2, #21
 8003312:	4311      	orrs	r1, r2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003318:	0852      	lsrs	r2, r2, #1
 800331a:	3a01      	subs	r2, #1
 800331c:	0652      	lsls	r2, r2, #25
 800331e:	4311      	orrs	r1, r2
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003324:	0912      	lsrs	r2, r2, #4
 8003326:	0452      	lsls	r2, r2, #17
 8003328:	430a      	orrs	r2, r1
 800332a:	4930      	ldr	r1, [pc, #192]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 800332c:	4313      	orrs	r3, r2
 800332e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003330:	4b2e      	ldr	r3, [pc, #184]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a2d      	ldr	r2, [pc, #180]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003336:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800333a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800333c:	4b2b      	ldr	r3, [pc, #172]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a2a      	ldr	r2, [pc, #168]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003342:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003346:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003348:	f7ff f958 	bl	80025fc <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800334e:	e008      	b.n	8003362 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003350:	f7ff f954 	bl	80025fc <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	2b02      	cmp	r3, #2
 800335c:	d901      	bls.n	8003362 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e058      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003362:	4b22      	ldr	r3, [pc, #136]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0f0      	beq.n	8003350 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800336e:	e050      	b.n	8003412 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e04f      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003374:	4b1d      	ldr	r3, [pc, #116]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d148      	bne.n	8003412 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003380:	4b1a      	ldr	r3, [pc, #104]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a19      	ldr	r2, [pc, #100]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003386:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800338a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800338c:	4b17      	ldr	r3, [pc, #92]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	4a16      	ldr	r2, [pc, #88]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 8003392:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003396:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003398:	f7ff f930 	bl	80025fc <HAL_GetTick>
 800339c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800339e:	e008      	b.n	80033b2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033a0:	f7ff f92c 	bl	80025fc <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d901      	bls.n	80033b2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e030      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033b2:	4b0e      	ldr	r3, [pc, #56]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d0f0      	beq.n	80033a0 <HAL_RCC_OscConfig+0x734>
 80033be:	e028      	b.n	8003412 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2b0c      	cmp	r3, #12
 80033c4:	d023      	beq.n	800340e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c6:	4b09      	ldr	r3, [pc, #36]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a08      	ldr	r2, [pc, #32]	@ (80033ec <HAL_RCC_OscConfig+0x780>)
 80033cc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80033d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d2:	f7ff f913 	bl	80025fc <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033d8:	e00c      	b.n	80033f4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033da:	f7ff f90f 	bl	80025fc <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d905      	bls.n	80033f4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e013      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
 80033ec:	40021000 	.word	0x40021000
 80033f0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033f4:	4b09      	ldr	r3, [pc, #36]	@ (800341c <HAL_RCC_OscConfig+0x7b0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d1ec      	bne.n	80033da <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003400:	4b06      	ldr	r3, [pc, #24]	@ (800341c <HAL_RCC_OscConfig+0x7b0>)
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	4905      	ldr	r1, [pc, #20]	@ (800341c <HAL_RCC_OscConfig+0x7b0>)
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_RCC_OscConfig+0x7b4>)
 8003408:	4013      	ands	r3, r2
 800340a:	60cb      	str	r3, [r1, #12]
 800340c:	e001      	b.n	8003412 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3720      	adds	r7, #32
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	40021000 	.word	0x40021000
 8003420:	feeefffc 	.word	0xfeeefffc

08003424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0e7      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b75      	ldr	r3, [pc, #468]	@ (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d910      	bls.n	8003468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b72      	ldr	r3, [pc, #456]	@ (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 0207 	bic.w	r2, r3, #7
 800344e:	4970      	ldr	r1, [pc, #448]	@ (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b6e      	ldr	r3, [pc, #440]	@ (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0cf      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d010      	beq.n	8003496 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	4b66      	ldr	r3, [pc, #408]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003480:	429a      	cmp	r2, r3
 8003482:	d908      	bls.n	8003496 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003484:	4b63      	ldr	r3, [pc, #396]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	4960      	ldr	r1, [pc, #384]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d04c      	beq.n	800353c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b03      	cmp	r3, #3
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d121      	bne.n	80034fa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e0a6      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d107      	bne.n	80034d2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034c2:	4b54      	ldr	r3, [pc, #336]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d115      	bne.n	80034fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e09a      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d107      	bne.n	80034ea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80034da:	4b4e      	ldr	r3, [pc, #312]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d109      	bne.n	80034fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e08e      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034ea:	4b4a      	ldr	r3, [pc, #296]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e086      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034fa:	4b46      	ldr	r3, [pc, #280]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	f023 0203 	bic.w	r2, r3, #3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4943      	ldr	r1, [pc, #268]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 8003508:	4313      	orrs	r3, r2
 800350a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800350c:	f7ff f876 	bl	80025fc <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003512:	e00a      	b.n	800352a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003514:	f7ff f872 	bl	80025fc <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e06e      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352a:	4b3a      	ldr	r3, [pc, #232]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f003 020c 	and.w	r2, r3, #12
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	429a      	cmp	r2, r3
 800353a:	d1eb      	bne.n	8003514 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689a      	ldr	r2, [r3, #8]
 800354c:	4b31      	ldr	r3, [pc, #196]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003554:	429a      	cmp	r2, r3
 8003556:	d208      	bcs.n	800356a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003558:	4b2e      	ldr	r3, [pc, #184]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	492b      	ldr	r1, [pc, #172]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800356a:	4b29      	ldr	r3, [pc, #164]	@ (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0307 	and.w	r3, r3, #7
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d210      	bcs.n	800359a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003578:	4b25      	ldr	r3, [pc, #148]	@ (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f023 0207 	bic.w	r2, r3, #7
 8003580:	4923      	ldr	r1, [pc, #140]	@ (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	4313      	orrs	r3, r2
 8003586:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003588:	4b21      	ldr	r3, [pc, #132]	@ (8003610 <HAL_RCC_ClockConfig+0x1ec>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	429a      	cmp	r2, r3
 8003594:	d001      	beq.n	800359a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e036      	b.n	8003608 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	4918      	ldr	r1, [pc, #96]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0308 	and.w	r3, r3, #8
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d009      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035c4:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	4910      	ldr	r1, [pc, #64]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80035d8:	f000 f824 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80035dc:	4602      	mov	r2, r0
 80035de:	4b0d      	ldr	r3, [pc, #52]	@ (8003614 <HAL_RCC_ClockConfig+0x1f0>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	091b      	lsrs	r3, r3, #4
 80035e4:	f003 030f 	and.w	r3, r3, #15
 80035e8:	490b      	ldr	r1, [pc, #44]	@ (8003618 <HAL_RCC_ClockConfig+0x1f4>)
 80035ea:	5ccb      	ldrb	r3, [r1, r3]
 80035ec:	f003 031f 	and.w	r3, r3, #31
 80035f0:	fa22 f303 	lsr.w	r3, r2, r3
 80035f4:	4a09      	ldr	r2, [pc, #36]	@ (800361c <HAL_RCC_ClockConfig+0x1f8>)
 80035f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035f8:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <HAL_RCC_ClockConfig+0x1fc>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe fee5 	bl	80023cc <HAL_InitTick>
 8003602:	4603      	mov	r3, r0
 8003604:	72fb      	strb	r3, [r7, #11]

  return status;
 8003606:	7afb      	ldrb	r3, [r7, #11]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}
 8003610:	40022000 	.word	0x40022000
 8003614:	40021000 	.word	0x40021000
 8003618:	08009098 	.word	0x08009098
 800361c:	2000003c 	.word	0x2000003c
 8003620:	20000040 	.word	0x20000040

08003624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	b089      	sub	sp, #36	@ 0x24
 8003628:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800362a:	2300      	movs	r3, #0
 800362c:	61fb      	str	r3, [r7, #28]
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003632:	4b3e      	ldr	r3, [pc, #248]	@ (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 030c 	and.w	r3, r3, #12
 800363a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800363c:	4b3b      	ldr	r3, [pc, #236]	@ (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0303 	and.w	r3, r3, #3
 8003644:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d005      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x34>
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2b0c      	cmp	r3, #12
 8003650:	d121      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d11e      	bne.n	8003696 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003658:	4b34      	ldr	r3, [pc, #208]	@ (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d107      	bne.n	8003674 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003664:	4b31      	ldr	r3, [pc, #196]	@ (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 8003666:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	f003 030f 	and.w	r3, r3, #15
 8003670:	61fb      	str	r3, [r7, #28]
 8003672:	e005      	b.n	8003680 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003674:	4b2d      	ldr	r3, [pc, #180]	@ (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	091b      	lsrs	r3, r3, #4
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003680:	4a2b      	ldr	r2, [pc, #172]	@ (8003730 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003682:	69fb      	ldr	r3, [r7, #28]
 8003684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003688:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10d      	bne.n	80036ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b04      	cmp	r3, #4
 800369a:	d102      	bne.n	80036a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800369c:	4b25      	ldr	r3, [pc, #148]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x110>)
 800369e:	61bb      	str	r3, [r7, #24]
 80036a0:	e004      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d101      	bne.n	80036ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036a8:	4b23      	ldr	r3, [pc, #140]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x114>)
 80036aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d134      	bne.n	800371c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036b2:	4b1e      	ldr	r3, [pc, #120]	@ (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d003      	beq.n	80036ca <HAL_RCC_GetSysClockFreq+0xa6>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b03      	cmp	r3, #3
 80036c6:	d003      	beq.n	80036d0 <HAL_RCC_GetSysClockFreq+0xac>
 80036c8:	e005      	b.n	80036d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80036ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003734 <HAL_RCC_GetSysClockFreq+0x110>)
 80036cc:	617b      	str	r3, [r7, #20]
      break;
 80036ce:	e005      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80036d0:	4b19      	ldr	r3, [pc, #100]	@ (8003738 <HAL_RCC_GetSysClockFreq+0x114>)
 80036d2:	617b      	str	r3, [r7, #20]
      break;
 80036d4:	e002      	b.n	80036dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	617b      	str	r3, [r7, #20]
      break;
 80036da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036dc:	4b13      	ldr	r3, [pc, #76]	@ (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 0307 	and.w	r3, r3, #7
 80036e6:	3301      	adds	r3, #1
 80036e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80036ea:	4b10      	ldr	r3, [pc, #64]	@ (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 80036ec:	68db      	ldr	r3, [r3, #12]
 80036ee:	0a1b      	lsrs	r3, r3, #8
 80036f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	fb03 f202 	mul.w	r2, r3, r2
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003702:	4b0a      	ldr	r3, [pc, #40]	@ (800372c <HAL_RCC_GetSysClockFreq+0x108>)
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	0e5b      	lsrs	r3, r3, #25
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	3301      	adds	r3, #1
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	fbb2 f3f3 	udiv	r3, r2, r3
 800371a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800371c:	69bb      	ldr	r3, [r7, #24]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3724      	adds	r7, #36	@ 0x24
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000
 8003730:	080090b0 	.word	0x080090b0
 8003734:	00f42400 	.word	0x00f42400
 8003738:	007a1200 	.word	0x007a1200

0800373c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003740:	4b03      	ldr	r3, [pc, #12]	@ (8003750 <HAL_RCC_GetHCLKFreq+0x14>)
 8003742:	681b      	ldr	r3, [r3, #0]
}
 8003744:	4618      	mov	r0, r3
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	2000003c 	.word	0x2000003c

08003754 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003758:	f7ff fff0 	bl	800373c <HAL_RCC_GetHCLKFreq>
 800375c:	4602      	mov	r2, r0
 800375e:	4b06      	ldr	r3, [pc, #24]	@ (8003778 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	4904      	ldr	r1, [pc, #16]	@ (800377c <HAL_RCC_GetPCLK1Freq+0x28>)
 800376a:	5ccb      	ldrb	r3, [r1, r3]
 800376c:	f003 031f 	and.w	r3, r3, #31
 8003770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003774:	4618      	mov	r0, r3
 8003776:	bd80      	pop	{r7, pc}
 8003778:	40021000 	.word	0x40021000
 800377c:	080090a8 	.word	0x080090a8

08003780 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003784:	f7ff ffda 	bl	800373c <HAL_RCC_GetHCLKFreq>
 8003788:	4602      	mov	r2, r0
 800378a:	4b06      	ldr	r3, [pc, #24]	@ (80037a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	0adb      	lsrs	r3, r3, #11
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	4904      	ldr	r1, [pc, #16]	@ (80037a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003796:	5ccb      	ldrb	r3, [r1, r3]
 8003798:	f003 031f 	and.w	r3, r3, #31
 800379c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	40021000 	.word	0x40021000
 80037a8:	080090a8 	.word	0x080090a8

080037ac <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	220f      	movs	r2, #15
 80037ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80037bc:	4b12      	ldr	r3, [pc, #72]	@ (8003808 <HAL_RCC_GetClockConfig+0x5c>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	f003 0203 	and.w	r2, r3, #3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80037c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003808 <HAL_RCC_GetClockConfig+0x5c>)
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80037d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003808 <HAL_RCC_GetClockConfig+0x5c>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80037e0:	4b09      	ldr	r3, [pc, #36]	@ (8003808 <HAL_RCC_GetClockConfig+0x5c>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	08db      	lsrs	r3, r3, #3
 80037e6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80037ee:	4b07      	ldr	r3, [pc, #28]	@ (800380c <HAL_RCC_GetClockConfig+0x60>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0207 	and.w	r2, r3, #7
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	601a      	str	r2, [r3, #0]
}
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	40021000 	.word	0x40021000
 800380c:	40022000 	.word	0x40022000

08003810 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800381c:	4b2a      	ldr	r3, [pc, #168]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800381e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003828:	f7ff f9bc 	bl	8002ba4 <HAL_PWREx_GetVoltageRange>
 800382c:	6178      	str	r0, [r7, #20]
 800382e:	e014      	b.n	800385a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003830:	4b25      	ldr	r3, [pc, #148]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003834:	4a24      	ldr	r2, [pc, #144]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800383a:	6593      	str	r3, [r2, #88]	@ 0x58
 800383c:	4b22      	ldr	r3, [pc, #136]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800383e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003848:	f7ff f9ac 	bl	8002ba4 <HAL_PWREx_GetVoltageRange>
 800384c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800384e:	4b1e      	ldr	r3, [pc, #120]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	4a1d      	ldr	r2, [pc, #116]	@ (80038c8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003858:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003860:	d10b      	bne.n	800387a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2b80      	cmp	r3, #128	@ 0x80
 8003866:	d919      	bls.n	800389c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2ba0      	cmp	r3, #160	@ 0xa0
 800386c:	d902      	bls.n	8003874 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800386e:	2302      	movs	r3, #2
 8003870:	613b      	str	r3, [r7, #16]
 8003872:	e013      	b.n	800389c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003874:	2301      	movs	r3, #1
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	e010      	b.n	800389c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2b80      	cmp	r3, #128	@ 0x80
 800387e:	d902      	bls.n	8003886 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003880:	2303      	movs	r3, #3
 8003882:	613b      	str	r3, [r7, #16]
 8003884:	e00a      	b.n	800389c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b80      	cmp	r3, #128	@ 0x80
 800388a:	d102      	bne.n	8003892 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800388c:	2302      	movs	r3, #2
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	e004      	b.n	800389c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b70      	cmp	r3, #112	@ 0x70
 8003896:	d101      	bne.n	800389c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003898:	2301      	movs	r3, #1
 800389a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800389c:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f023 0207 	bic.w	r2, r3, #7
 80038a4:	4909      	ldr	r1, [pc, #36]	@ (80038cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80038ac:	4b07      	ldr	r3, [pc, #28]	@ (80038cc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d001      	beq.n	80038be <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e000      	b.n	80038c0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	40021000 	.word	0x40021000
 80038cc:	40022000 	.word	0x40022000

080038d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80038d8:	2300      	movs	r3, #0
 80038da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80038dc:	2300      	movs	r3, #0
 80038de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d041      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038f0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038f4:	d02a      	beq.n	800394c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80038f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80038fa:	d824      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80038fc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003900:	d008      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003902:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003906:	d81e      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800390c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003910:	d010      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003912:	e018      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003914:	4b86      	ldr	r3, [pc, #536]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	4a85      	ldr	r2, [pc, #532]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800391a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800391e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003920:	e015      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	3304      	adds	r3, #4
 8003926:	2100      	movs	r1, #0
 8003928:	4618      	mov	r0, r3
 800392a:	f000 fabb 	bl	8003ea4 <RCCEx_PLLSAI1_Config>
 800392e:	4603      	mov	r3, r0
 8003930:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003932:	e00c      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3320      	adds	r3, #32
 8003938:	2100      	movs	r1, #0
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fba6 	bl	800408c <RCCEx_PLLSAI2_Config>
 8003940:	4603      	mov	r3, r0
 8003942:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003944:	e003      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	74fb      	strb	r3, [r7, #19]
      break;
 800394a:	e000      	b.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800394c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d10b      	bne.n	800396c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003954:	4b76      	ldr	r3, [pc, #472]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800395a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003962:	4973      	ldr	r1, [pc, #460]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003964:	4313      	orrs	r3, r2
 8003966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800396a:	e001      	b.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800396c:	7cfb      	ldrb	r3, [r7, #19]
 800396e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d041      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003980:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003984:	d02a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003986:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800398a:	d824      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800398c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003990:	d008      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003992:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003996:	d81e      	bhi.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00a      	beq.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800399c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039a0:	d010      	beq.n	80039c4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80039a2:	e018      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80039a4:	4b62      	ldr	r3, [pc, #392]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	4a61      	ldr	r2, [pc, #388]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039b0:	e015      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	3304      	adds	r3, #4
 80039b6:	2100      	movs	r1, #0
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 fa73 	bl	8003ea4 <RCCEx_PLLSAI1_Config>
 80039be:	4603      	mov	r3, r0
 80039c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039c2:	e00c      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	3320      	adds	r3, #32
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f000 fb5e 	bl	800408c <RCCEx_PLLSAI2_Config>
 80039d0:	4603      	mov	r3, r0
 80039d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80039d4:	e003      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	74fb      	strb	r3, [r7, #19]
      break;
 80039da:	e000      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80039dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039de:	7cfb      	ldrb	r3, [r7, #19]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10b      	bne.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039e4:	4b52      	ldr	r3, [pc, #328]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ea:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80039f2:	494f      	ldr	r1, [pc, #316]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80039fa:	e001      	b.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039fc:	7cfb      	ldrb	r3, [r7, #19]
 80039fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f000 80a0 	beq.w	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a12:	4b47      	ldr	r3, [pc, #284]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003a22:	2300      	movs	r3, #0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00d      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a28:	4b41      	ldr	r3, [pc, #260]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2c:	4a40      	ldr	r2, [pc, #256]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a32:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a34:	4b3e      	ldr	r3, [pc, #248]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3c:	60bb      	str	r3, [r7, #8]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a40:	2301      	movs	r3, #1
 8003a42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a44:	4b3b      	ldr	r3, [pc, #236]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a3a      	ldr	r2, [pc, #232]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a4a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a50:	f7fe fdd4 	bl	80025fc <HAL_GetTick>
 8003a54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a56:	e009      	b.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a58:	f7fe fdd0 	bl	80025fc <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d902      	bls.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	74fb      	strb	r3, [r7, #19]
        break;
 8003a6a:	e005      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a6c:	4b31      	ldr	r3, [pc, #196]	@ (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ef      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d15c      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a7e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d01f      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d019      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a9c:	4b24      	ldr	r3, [pc, #144]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aa2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003aa8:	4b21      	ldr	r3, [pc, #132]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003aae:	4a20      	ldr	r2, [pc, #128]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ab4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ab8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003abe:	4a1c      	ldr	r2, [pc, #112]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003ac0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ac8:	4a19      	ldr	r2, [pc, #100]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d016      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ada:	f7fe fd8f 	bl	80025fc <HAL_GetTick>
 8003ade:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae0:	e00b      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae2:	f7fe fd8b 	bl	80025fc <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d902      	bls.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	74fb      	strb	r3, [r7, #19]
            break;
 8003af8:	e006      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003afa:	4b0d      	ldr	r3, [pc, #52]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0ec      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003b08:	7cfb      	ldrb	r3, [r7, #19]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10c      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b0e:	4b08      	ldr	r3, [pc, #32]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003b14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b1e:	4904      	ldr	r1, [pc, #16]	@ (8003b30 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003b20:	4313      	orrs	r3, r2
 8003b22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003b26:	e009      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b28:	7cfb      	ldrb	r3, [r7, #19]
 8003b2a:	74bb      	strb	r3, [r7, #18]
 8003b2c:	e006      	b.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003b2e:	bf00      	nop
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	7cfb      	ldrb	r3, [r7, #19]
 8003b3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b3c:	7c7b      	ldrb	r3, [r7, #17]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d105      	bne.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b42:	4b9e      	ldr	r3, [pc, #632]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b46:	4a9d      	ldr	r2, [pc, #628]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b4c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00a      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b5a:	4b98      	ldr	r3, [pc, #608]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b60:	f023 0203 	bic.w	r2, r3, #3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	4994      	ldr	r1, [pc, #592]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00a      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b7c:	4b8f      	ldr	r3, [pc, #572]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b82:	f023 020c 	bic.w	r2, r3, #12
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8a:	498c      	ldr	r1, [pc, #560]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0304 	and.w	r3, r3, #4
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b9e:	4b87      	ldr	r3, [pc, #540]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bac:	4983      	ldr	r1, [pc, #524]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003bc0:	4b7e      	ldr	r3, [pc, #504]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bc6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bce:	497b      	ldr	r1, [pc, #492]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 0310 	and.w	r3, r3, #16
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003be2:	4b76      	ldr	r3, [pc, #472]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003be8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bf0:	4972      	ldr	r1, [pc, #456]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0320 	and.w	r3, r3, #32
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d00a      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c04:	4b6d      	ldr	r3, [pc, #436]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c0a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c12:	496a      	ldr	r1, [pc, #424]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c14:	4313      	orrs	r3, r2
 8003c16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00a      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c26:	4b65      	ldr	r3, [pc, #404]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c2c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c34:	4961      	ldr	r1, [pc, #388]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003c48:	4b5c      	ldr	r3, [pc, #368]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c56:	4959      	ldr	r1, [pc, #356]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c6a:	4b54      	ldr	r3, [pc, #336]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c70:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c78:	4950      	ldr	r1, [pc, #320]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c8c:	4b4b      	ldr	r3, [pc, #300]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c92:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c9a:	4948      	ldr	r1, [pc, #288]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cae:	4b43      	ldr	r3, [pc, #268]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cb4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cbc:	493f      	ldr	r1, [pc, #252]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d028      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cd0:	4b3a      	ldr	r3, [pc, #232]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cd6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cde:	4937      	ldr	r1, [pc, #220]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cee:	d106      	bne.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf0:	4b32      	ldr	r3, [pc, #200]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	4a31      	ldr	r2, [pc, #196]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cf6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cfa:	60d3      	str	r3, [r2, #12]
 8003cfc:	e011      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d02:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d06:	d10c      	bne.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	3304      	adds	r3, #4
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 f8c8 	bl	8003ea4 <RCCEx_PLLSAI1_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003d18:	7cfb      	ldrb	r3, [r7, #19]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003d1e:	7cfb      	ldrb	r3, [r7, #19]
 8003d20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d028      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d2e:	4b23      	ldr	r3, [pc, #140]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d34:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3c:	491f      	ldr	r1, [pc, #124]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d48:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d4c:	d106      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	4a1a      	ldr	r2, [pc, #104]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003d58:	60d3      	str	r3, [r2, #12]
 8003d5a:	e011      	b.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d60:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003d64:	d10c      	bne.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 f899 	bl	8003ea4 <RCCEx_PLLSAI1_Config>
 8003d72:	4603      	mov	r3, r0
 8003d74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d76:	7cfb      	ldrb	r3, [r7, #19]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003d7c:	7cfb      	ldrb	r3, [r7, #19]
 8003d7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d02b      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d92:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d9a:	4908      	ldr	r1, [pc, #32]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003da6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003daa:	d109      	bne.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003dac:	4b03      	ldr	r3, [pc, #12]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	4a02      	ldr	r2, [pc, #8]	@ (8003dbc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003db2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003db6:	60d3      	str	r3, [r2, #12]
 8003db8:	e014      	b.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003dba:	bf00      	nop
 8003dbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003dc8:	d10c      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	3304      	adds	r3, #4
 8003dce:	2101      	movs	r1, #1
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 f867 	bl	8003ea4 <RCCEx_PLLSAI1_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003dda:	7cfb      	ldrb	r3, [r7, #19]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d001      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003de0:	7cfb      	ldrb	r3, [r7, #19]
 8003de2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d02f      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df0:	4b2b      	ldr	r3, [pc, #172]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003df6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003dfe:	4928      	ldr	r1, [pc, #160]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e0e:	d10d      	bne.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3304      	adds	r3, #4
 8003e14:	2102      	movs	r1, #2
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f844 	bl	8003ea4 <RCCEx_PLLSAI1_Config>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e20:	7cfb      	ldrb	r3, [r7, #19]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d014      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e26:	7cfb      	ldrb	r3, [r7, #19]
 8003e28:	74bb      	strb	r3, [r7, #18]
 8003e2a:	e011      	b.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e34:	d10c      	bne.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3320      	adds	r3, #32
 8003e3a:	2102      	movs	r1, #2
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f000 f925 	bl	800408c <RCCEx_PLLSAI2_Config>
 8003e42:	4603      	mov	r3, r0
 8003e44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003e46:	7cfb      	ldrb	r3, [r7, #19]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d001      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003e4c:	7cfb      	ldrb	r3, [r7, #19]
 8003e4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d00a      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e5c:	4b10      	ldr	r3, [pc, #64]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e62:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e6a:	490d      	ldr	r1, [pc, #52]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e84:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e8e:	4904      	ldr	r1, [pc, #16]	@ (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003e96:	7cbb      	ldrb	r3, [r7, #18]
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	3718      	adds	r7, #24
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40021000 	.word	0x40021000

08003ea4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003eb2:	4b75      	ldr	r3, [pc, #468]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d018      	beq.n	8003ef0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003ebe:	4b72      	ldr	r3, [pc, #456]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	f003 0203 	and.w	r2, r3, #3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d10d      	bne.n	8003eea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
       ||
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d009      	beq.n	8003eea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003ed6:	4b6c      	ldr	r3, [pc, #432]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	1c5a      	adds	r2, r3, #1
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
       ||
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d047      	beq.n	8003f7a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	73fb      	strb	r3, [r7, #15]
 8003eee:	e044      	b.n	8003f7a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d018      	beq.n	8003f2a <RCCEx_PLLSAI1_Config+0x86>
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d825      	bhi.n	8003f48 <RCCEx_PLLSAI1_Config+0xa4>
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d002      	beq.n	8003f06 <RCCEx_PLLSAI1_Config+0x62>
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d009      	beq.n	8003f18 <RCCEx_PLLSAI1_Config+0x74>
 8003f04:	e020      	b.n	8003f48 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003f06:	4b60      	ldr	r3, [pc, #384]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d11d      	bne.n	8003f4e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f16:	e01a      	b.n	8003f4e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003f18:	4b5b      	ldr	r3, [pc, #364]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d116      	bne.n	8003f52 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f28:	e013      	b.n	8003f52 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003f2a:	4b57      	ldr	r3, [pc, #348]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10f      	bne.n	8003f56 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003f36:	4b54      	ldr	r3, [pc, #336]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d109      	bne.n	8003f56 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003f46:	e006      	b.n	8003f56 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8003f4c:	e004      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f4e:	bf00      	nop
 8003f50:	e002      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f52:	bf00      	nop
 8003f54:	e000      	b.n	8003f58 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003f56:	bf00      	nop
    }

    if(status == HAL_OK)
 8003f58:	7bfb      	ldrb	r3, [r7, #15]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10d      	bne.n	8003f7a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003f5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6819      	ldr	r1, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	430b      	orrs	r3, r1
 8003f74:	4944      	ldr	r1, [pc, #272]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003f7a:	7bfb      	ldrb	r3, [r7, #15]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d17d      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003f80:	4b41      	ldr	r3, [pc, #260]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a40      	ldr	r2, [pc, #256]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003f86:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003f8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f8c:	f7fe fb36 	bl	80025fc <HAL_GetTick>
 8003f90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003f92:	e009      	b.n	8003fa8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f94:	f7fe fb32 	bl	80025fc <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d902      	bls.n	8003fa8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	73fb      	strb	r3, [r7, #15]
        break;
 8003fa6:	e005      	b.n	8003fb4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003fa8:	4b37      	ldr	r3, [pc, #220]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1ef      	bne.n	8003f94 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d160      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d111      	bne.n	8003fe4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fc0:	4b31      	ldr	r3, [pc, #196]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003fc8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6892      	ldr	r2, [r2, #8]
 8003fd0:	0211      	lsls	r1, r2, #8
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	68d2      	ldr	r2, [r2, #12]
 8003fd6:	0912      	lsrs	r2, r2, #4
 8003fd8:	0452      	lsls	r2, r2, #17
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	492a      	ldr	r1, [pc, #168]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	610b      	str	r3, [r1, #16]
 8003fe2:	e027      	b.n	8004034 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d112      	bne.n	8004010 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003fea:	4b27      	ldr	r3, [pc, #156]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003ff2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6892      	ldr	r2, [r2, #8]
 8003ffa:	0211      	lsls	r1, r2, #8
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6912      	ldr	r2, [r2, #16]
 8004000:	0852      	lsrs	r2, r2, #1
 8004002:	3a01      	subs	r2, #1
 8004004:	0552      	lsls	r2, r2, #21
 8004006:	430a      	orrs	r2, r1
 8004008:	491f      	ldr	r1, [pc, #124]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800400a:	4313      	orrs	r3, r2
 800400c:	610b      	str	r3, [r1, #16]
 800400e:	e011      	b.n	8004034 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004010:	4b1d      	ldr	r3, [pc, #116]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004018:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6892      	ldr	r2, [r2, #8]
 8004020:	0211      	lsls	r1, r2, #8
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6952      	ldr	r2, [r2, #20]
 8004026:	0852      	lsrs	r2, r2, #1
 8004028:	3a01      	subs	r2, #1
 800402a:	0652      	lsls	r2, r2, #25
 800402c:	430a      	orrs	r2, r1
 800402e:	4916      	ldr	r1, [pc, #88]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004030:	4313      	orrs	r3, r2
 8004032:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004034:	4b14      	ldr	r3, [pc, #80]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a13      	ldr	r2, [pc, #76]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800403a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800403e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004040:	f7fe fadc 	bl	80025fc <HAL_GetTick>
 8004044:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004046:	e009      	b.n	800405c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004048:	f7fe fad8 	bl	80025fc <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d902      	bls.n	800405c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	73fb      	strb	r3, [r7, #15]
          break;
 800405a:	e005      	b.n	8004068 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800405c:	4b0a      	ldr	r3, [pc, #40]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d0ef      	beq.n	8004048 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004068:	7bfb      	ldrb	r3, [r7, #15]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d106      	bne.n	800407c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800406e:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004070:	691a      	ldr	r2, [r3, #16]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	4904      	ldr	r1, [pc, #16]	@ (8004088 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800407c:	7bfb      	ldrb	r3, [r7, #15]
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40021000 	.word	0x40021000

0800408c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b084      	sub	sp, #16
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
 8004094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004096:	2300      	movs	r3, #0
 8004098:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800409a:	4b6a      	ldr	r3, [pc, #424]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f003 0303 	and.w	r3, r3, #3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d018      	beq.n	80040d8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80040a6:	4b67      	ldr	r3, [pc, #412]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	f003 0203 	and.w	r2, r3, #3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d10d      	bne.n	80040d2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
       ||
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d009      	beq.n	80040d2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80040be:	4b61      	ldr	r3, [pc, #388]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040c0:	68db      	ldr	r3, [r3, #12]
 80040c2:	091b      	lsrs	r3, r3, #4
 80040c4:	f003 0307 	and.w	r3, r3, #7
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
       ||
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d047      	beq.n	8004162 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	73fb      	strb	r3, [r7, #15]
 80040d6:	e044      	b.n	8004162 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d018      	beq.n	8004112 <RCCEx_PLLSAI2_Config+0x86>
 80040e0:	2b03      	cmp	r3, #3
 80040e2:	d825      	bhi.n	8004130 <RCCEx_PLLSAI2_Config+0xa4>
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d002      	beq.n	80040ee <RCCEx_PLLSAI2_Config+0x62>
 80040e8:	2b02      	cmp	r3, #2
 80040ea:	d009      	beq.n	8004100 <RCCEx_PLLSAI2_Config+0x74>
 80040ec:	e020      	b.n	8004130 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80040ee:	4b55      	ldr	r3, [pc, #340]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d11d      	bne.n	8004136 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80040fe:	e01a      	b.n	8004136 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004100:	4b50      	ldr	r3, [pc, #320]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004108:	2b00      	cmp	r3, #0
 800410a:	d116      	bne.n	800413a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004110:	e013      	b.n	800413a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004112:	4b4c      	ldr	r3, [pc, #304]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10f      	bne.n	800413e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800411e:	4b49      	ldr	r3, [pc, #292]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d109      	bne.n	800413e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800412e:	e006      	b.n	800413e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	73fb      	strb	r3, [r7, #15]
      break;
 8004134:	e004      	b.n	8004140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004136:	bf00      	nop
 8004138:	e002      	b.n	8004140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800413a:	bf00      	nop
 800413c:	e000      	b.n	8004140 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800413e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004140:	7bfb      	ldrb	r3, [r7, #15]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10d      	bne.n	8004162 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004146:	4b3f      	ldr	r3, [pc, #252]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6819      	ldr	r1, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	3b01      	subs	r3, #1
 8004158:	011b      	lsls	r3, r3, #4
 800415a:	430b      	orrs	r3, r1
 800415c:	4939      	ldr	r1, [pc, #228]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800415e:	4313      	orrs	r3, r2
 8004160:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004162:	7bfb      	ldrb	r3, [r7, #15]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d167      	bne.n	8004238 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004168:	4b36      	ldr	r3, [pc, #216]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a35      	ldr	r2, [pc, #212]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800416e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004174:	f7fe fa42 	bl	80025fc <HAL_GetTick>
 8004178:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800417a:	e009      	b.n	8004190 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800417c:	f7fe fa3e 	bl	80025fc <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d902      	bls.n	8004190 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	73fb      	strb	r3, [r7, #15]
        break;
 800418e:	e005      	b.n	800419c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004190:	4b2c      	ldr	r3, [pc, #176]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1ef      	bne.n	800417c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800419c:	7bfb      	ldrb	r3, [r7, #15]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d14a      	bne.n	8004238 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d111      	bne.n	80041cc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041a8:	4b26      	ldr	r3, [pc, #152]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80041b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	6892      	ldr	r2, [r2, #8]
 80041b8:	0211      	lsls	r1, r2, #8
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	68d2      	ldr	r2, [r2, #12]
 80041be:	0912      	lsrs	r2, r2, #4
 80041c0:	0452      	lsls	r2, r2, #17
 80041c2:	430a      	orrs	r2, r1
 80041c4:	491f      	ldr	r1, [pc, #124]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	614b      	str	r3, [r1, #20]
 80041ca:	e011      	b.n	80041f0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80041cc:	4b1d      	ldr	r3, [pc, #116]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80041d4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	6892      	ldr	r2, [r2, #8]
 80041dc:	0211      	lsls	r1, r2, #8
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6912      	ldr	r2, [r2, #16]
 80041e2:	0852      	lsrs	r2, r2, #1
 80041e4:	3a01      	subs	r2, #1
 80041e6:	0652      	lsls	r2, r2, #25
 80041e8:	430a      	orrs	r2, r1
 80041ea:	4916      	ldr	r1, [pc, #88]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041ec:	4313      	orrs	r3, r2
 80041ee:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80041f0:	4b14      	ldr	r3, [pc, #80]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a13      	ldr	r2, [pc, #76]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 80041f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041fc:	f7fe f9fe 	bl	80025fc <HAL_GetTick>
 8004200:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004202:	e009      	b.n	8004218 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004204:	f7fe f9fa 	bl	80025fc <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d902      	bls.n	8004218 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	73fb      	strb	r3, [r7, #15]
          break;
 8004216:	e005      	b.n	8004224 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004218:	4b0a      	ldr	r3, [pc, #40]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0ef      	beq.n	8004204 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800422a:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	695b      	ldr	r3, [r3, #20]
 8004232:	4904      	ldr	r1, [pc, #16]	@ (8004244 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004234:	4313      	orrs	r3, r2
 8004236:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000

08004248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e049      	b.n	80042ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f841 	bl	80042f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2202      	movs	r2, #2
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3304      	adds	r3, #4
 8004284:	4619      	mov	r1, r3
 8004286:	4610      	mov	r0, r2
 8004288:	f000 fce8 	bl	8004c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d001      	beq.n	8004324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e04f      	b.n	80043c4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0201 	orr.w	r2, r2, #1
 800433a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a23      	ldr	r2, [pc, #140]	@ (80043d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d01d      	beq.n	8004382 <HAL_TIM_Base_Start_IT+0x76>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800434e:	d018      	beq.n	8004382 <HAL_TIM_Base_Start_IT+0x76>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a1f      	ldr	r2, [pc, #124]	@ (80043d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d013      	beq.n	8004382 <HAL_TIM_Base_Start_IT+0x76>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a1e      	ldr	r2, [pc, #120]	@ (80043d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d00e      	beq.n	8004382 <HAL_TIM_Base_Start_IT+0x76>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a1c      	ldr	r2, [pc, #112]	@ (80043dc <HAL_TIM_Base_Start_IT+0xd0>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d009      	beq.n	8004382 <HAL_TIM_Base_Start_IT+0x76>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a1b      	ldr	r2, [pc, #108]	@ (80043e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d004      	beq.n	8004382 <HAL_TIM_Base_Start_IT+0x76>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a19      	ldr	r2, [pc, #100]	@ (80043e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d115      	bne.n	80043ae <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	4b17      	ldr	r3, [pc, #92]	@ (80043e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800438a:	4013      	ands	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b06      	cmp	r3, #6
 8004392:	d015      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0xb4>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800439a:	d011      	beq.n	80043c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f042 0201 	orr.w	r2, r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ac:	e008      	b.n	80043c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	e000      	b.n	80043c2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	40012c00 	.word	0x40012c00
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40000c00 	.word	0x40000c00
 80043e0:	40013400 	.word	0x40013400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	00010007 	.word	0x00010007

080043ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e049      	b.n	8004492 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fd fe3c 	bl	8002090 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3304      	adds	r3, #4
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f000 fc16 	bl	8004c5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2201      	movs	r2, #1
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2201      	movs	r2, #1
 8004454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d109      	bne.n	80044c0 <HAL_TIM_PWM_Start+0x24>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	bf14      	ite	ne
 80044b8:	2301      	movne	r3, #1
 80044ba:	2300      	moveq	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	e03c      	b.n	800453a <HAL_TIM_PWM_Start+0x9e>
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d109      	bne.n	80044da <HAL_TIM_PWM_Start+0x3e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	bf14      	ite	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	2300      	moveq	r3, #0
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	e02f      	b.n	800453a <HAL_TIM_PWM_Start+0x9e>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b08      	cmp	r3, #8
 80044de:	d109      	bne.n	80044f4 <HAL_TIM_PWM_Start+0x58>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80044e6:	b2db      	uxtb	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	bf14      	ite	ne
 80044ec:	2301      	movne	r3, #1
 80044ee:	2300      	moveq	r3, #0
 80044f0:	b2db      	uxtb	r3, r3
 80044f2:	e022      	b.n	800453a <HAL_TIM_PWM_Start+0x9e>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b0c      	cmp	r3, #12
 80044f8:	d109      	bne.n	800450e <HAL_TIM_PWM_Start+0x72>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b01      	cmp	r3, #1
 8004504:	bf14      	ite	ne
 8004506:	2301      	movne	r3, #1
 8004508:	2300      	moveq	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	e015      	b.n	800453a <HAL_TIM_PWM_Start+0x9e>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	2b10      	cmp	r3, #16
 8004512:	d109      	bne.n	8004528 <HAL_TIM_PWM_Start+0x8c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2b01      	cmp	r3, #1
 800451e:	bf14      	ite	ne
 8004520:	2301      	movne	r3, #1
 8004522:	2300      	moveq	r3, #0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	e008      	b.n	800453a <HAL_TIM_PWM_Start+0x9e>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b01      	cmp	r3, #1
 8004532:	bf14      	ite	ne
 8004534:	2301      	movne	r3, #1
 8004536:	2300      	moveq	r3, #0
 8004538:	b2db      	uxtb	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d001      	beq.n	8004542 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e09c      	b.n	800467c <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d104      	bne.n	8004552 <HAL_TIM_PWM_Start+0xb6>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2202      	movs	r2, #2
 800454c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004550:	e023      	b.n	800459a <HAL_TIM_PWM_Start+0xfe>
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	2b04      	cmp	r3, #4
 8004556:	d104      	bne.n	8004562 <HAL_TIM_PWM_Start+0xc6>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2202      	movs	r2, #2
 800455c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004560:	e01b      	b.n	800459a <HAL_TIM_PWM_Start+0xfe>
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	2b08      	cmp	r3, #8
 8004566:	d104      	bne.n	8004572 <HAL_TIM_PWM_Start+0xd6>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2202      	movs	r2, #2
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004570:	e013      	b.n	800459a <HAL_TIM_PWM_Start+0xfe>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b0c      	cmp	r3, #12
 8004576:	d104      	bne.n	8004582 <HAL_TIM_PWM_Start+0xe6>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2202      	movs	r2, #2
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004580:	e00b      	b.n	800459a <HAL_TIM_PWM_Start+0xfe>
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	2b10      	cmp	r3, #16
 8004586:	d104      	bne.n	8004592 <HAL_TIM_PWM_Start+0xf6>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004590:	e003      	b.n	800459a <HAL_TIM_PWM_Start+0xfe>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2202      	movs	r2, #2
 8004596:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2201      	movs	r2, #1
 80045a0:	6839      	ldr	r1, [r7, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f000 fed6 	bl	8005354 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a35      	ldr	r2, [pc, #212]	@ (8004684 <HAL_TIM_PWM_Start+0x1e8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <HAL_TIM_PWM_Start+0x13e>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a34      	ldr	r2, [pc, #208]	@ (8004688 <HAL_TIM_PWM_Start+0x1ec>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d00e      	beq.n	80045da <HAL_TIM_PWM_Start+0x13e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a32      	ldr	r2, [pc, #200]	@ (800468c <HAL_TIM_PWM_Start+0x1f0>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d009      	beq.n	80045da <HAL_TIM_PWM_Start+0x13e>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a31      	ldr	r2, [pc, #196]	@ (8004690 <HAL_TIM_PWM_Start+0x1f4>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d004      	beq.n	80045da <HAL_TIM_PWM_Start+0x13e>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a2f      	ldr	r2, [pc, #188]	@ (8004694 <HAL_TIM_PWM_Start+0x1f8>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d101      	bne.n	80045de <HAL_TIM_PWM_Start+0x142>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <HAL_TIM_PWM_Start+0x144>
 80045de:	2300      	movs	r3, #0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d007      	beq.n	80045f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045f2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a22      	ldr	r2, [pc, #136]	@ (8004684 <HAL_TIM_PWM_Start+0x1e8>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d01d      	beq.n	800463a <HAL_TIM_PWM_Start+0x19e>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004606:	d018      	beq.n	800463a <HAL_TIM_PWM_Start+0x19e>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a22      	ldr	r2, [pc, #136]	@ (8004698 <HAL_TIM_PWM_Start+0x1fc>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d013      	beq.n	800463a <HAL_TIM_PWM_Start+0x19e>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a21      	ldr	r2, [pc, #132]	@ (800469c <HAL_TIM_PWM_Start+0x200>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d00e      	beq.n	800463a <HAL_TIM_PWM_Start+0x19e>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1f      	ldr	r2, [pc, #124]	@ (80046a0 <HAL_TIM_PWM_Start+0x204>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d009      	beq.n	800463a <HAL_TIM_PWM_Start+0x19e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a17      	ldr	r2, [pc, #92]	@ (8004688 <HAL_TIM_PWM_Start+0x1ec>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d004      	beq.n	800463a <HAL_TIM_PWM_Start+0x19e>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a15      	ldr	r2, [pc, #84]	@ (800468c <HAL_TIM_PWM_Start+0x1f0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d115      	bne.n	8004666 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	4b18      	ldr	r3, [pc, #96]	@ (80046a4 <HAL_TIM_PWM_Start+0x208>)
 8004642:	4013      	ands	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b06      	cmp	r3, #6
 800464a:	d015      	beq.n	8004678 <HAL_TIM_PWM_Start+0x1dc>
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004652:	d011      	beq.n	8004678 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004664:	e008      	b.n	8004678 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0201 	orr.w	r2, r2, #1
 8004674:	601a      	str	r2, [r3, #0]
 8004676:	e000      	b.n	800467a <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004678:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	40012c00 	.word	0x40012c00
 8004688:	40013400 	.word	0x40013400
 800468c:	40014000 	.word	0x40014000
 8004690:	40014400 	.word	0x40014400
 8004694:	40014800 	.word	0x40014800
 8004698:	40000400 	.word	0x40000400
 800469c:	40000800 	.word	0x40000800
 80046a0:	40000c00 	.word	0x40000c00
 80046a4:	00010007 	.word	0x00010007

080046a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2200      	movs	r2, #0
 80046b8:	6839      	ldr	r1, [r7, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fe4a 	bl	8005354 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a3e      	ldr	r2, [pc, #248]	@ (80047c0 <HAL_TIM_PWM_Stop+0x118>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d013      	beq.n	80046f2 <HAL_TIM_PWM_Stop+0x4a>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a3d      	ldr	r2, [pc, #244]	@ (80047c4 <HAL_TIM_PWM_Stop+0x11c>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00e      	beq.n	80046f2 <HAL_TIM_PWM_Stop+0x4a>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a3b      	ldr	r2, [pc, #236]	@ (80047c8 <HAL_TIM_PWM_Stop+0x120>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d009      	beq.n	80046f2 <HAL_TIM_PWM_Stop+0x4a>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a3a      	ldr	r2, [pc, #232]	@ (80047cc <HAL_TIM_PWM_Stop+0x124>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <HAL_TIM_PWM_Stop+0x4a>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a38      	ldr	r2, [pc, #224]	@ (80047d0 <HAL_TIM_PWM_Stop+0x128>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d101      	bne.n	80046f6 <HAL_TIM_PWM_Stop+0x4e>
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <HAL_TIM_PWM_Stop+0x50>
 80046f6:	2300      	movs	r3, #0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d017      	beq.n	800472c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6a1a      	ldr	r2, [r3, #32]
 8004702:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004706:	4013      	ands	r3, r2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d10f      	bne.n	800472c <HAL_TIM_PWM_Stop+0x84>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6a1a      	ldr	r2, [r3, #32]
 8004712:	f240 4344 	movw	r3, #1092	@ 0x444
 8004716:	4013      	ands	r3, r2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d107      	bne.n	800472c <HAL_TIM_PWM_Stop+0x84>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800472a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6a1a      	ldr	r2, [r3, #32]
 8004732:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004736:	4013      	ands	r3, r2
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10f      	bne.n	800475c <HAL_TIM_PWM_Stop+0xb4>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	6a1a      	ldr	r2, [r3, #32]
 8004742:	f240 4344 	movw	r3, #1092	@ 0x444
 8004746:	4013      	ands	r3, r2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d107      	bne.n	800475c <HAL_TIM_PWM_Stop+0xb4>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f022 0201 	bic.w	r2, r2, #1
 800475a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d104      	bne.n	800476c <HAL_TIM_PWM_Stop+0xc4>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800476a:	e023      	b.n	80047b4 <HAL_TIM_PWM_Stop+0x10c>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b04      	cmp	r3, #4
 8004770:	d104      	bne.n	800477c <HAL_TIM_PWM_Stop+0xd4>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800477a:	e01b      	b.n	80047b4 <HAL_TIM_PWM_Stop+0x10c>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b08      	cmp	r3, #8
 8004780:	d104      	bne.n	800478c <HAL_TIM_PWM_Stop+0xe4>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800478a:	e013      	b.n	80047b4 <HAL_TIM_PWM_Stop+0x10c>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b0c      	cmp	r3, #12
 8004790:	d104      	bne.n	800479c <HAL_TIM_PWM_Stop+0xf4>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800479a:	e00b      	b.n	80047b4 <HAL_TIM_PWM_Stop+0x10c>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2b10      	cmp	r3, #16
 80047a0:	d104      	bne.n	80047ac <HAL_TIM_PWM_Stop+0x104>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047aa:	e003      	b.n	80047b4 <HAL_TIM_PWM_Stop+0x10c>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3708      	adds	r7, #8
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40013400 	.word	0x40013400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40014400 	.word	0x40014400
 80047d0:	40014800 	.word	0x40014800

080047d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d020      	beq.n	8004838 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f003 0302 	and.w	r3, r3, #2
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d01b      	beq.n	8004838 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0202 	mvn.w	r2, #2
 8004808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2201      	movs	r2, #1
 800480e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	f003 0303 	and.w	r3, r3, #3
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f9fe 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 8004824:	e005      	b.n	8004832 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f9f0 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fa01 	bl	8004c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0304 	and.w	r3, r3, #4
 800483e:	2b00      	cmp	r3, #0
 8004840:	d020      	beq.n	8004884 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01b      	beq.n	8004884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0204 	mvn.w	r2, #4
 8004854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f9d8 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f9ca 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f9db 	bl	8004c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d020      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b00      	cmp	r3, #0
 8004896:	d01b      	beq.n	80048d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f06f 0208 	mvn.w	r2, #8
 80048a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2204      	movs	r2, #4
 80048a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	f003 0303 	and.w	r3, r3, #3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9b2 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 80048bc:	e005      	b.n	80048ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 f9a4 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 f9b5 	bl	8004c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d020      	beq.n	800491c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d01b      	beq.n	800491c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0210 	mvn.w	r2, #16
 80048ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2208      	movs	r2, #8
 80048f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 f98c 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f97e 	bl	8004c0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f98f 	bl	8004c34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00c      	beq.n	8004940 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f003 0301 	and.w	r3, r3, #1
 800492c:	2b00      	cmp	r3, #0
 800492e:	d007      	beq.n	8004940 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f06f 0201 	mvn.w	r2, #1
 8004938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fd fb68 	bl	8002010 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004946:	2b00      	cmp	r3, #0
 8004948:	d104      	bne.n	8004954 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004950:	2b00      	cmp	r3, #0
 8004952:	d00c      	beq.n	800496e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800495a:	2b00      	cmp	r3, #0
 800495c:	d007      	beq.n	800496e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fe29 	bl	80055c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004974:	2b00      	cmp	r3, #0
 8004976:	d00c      	beq.n	8004992 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800498a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f000 fe21 	bl	80055d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00c      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f949 	bl	8004c48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f003 0320 	and.w	r3, r3, #32
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00c      	beq.n	80049da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d007      	beq.n	80049da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f06f 0220 	mvn.w	r2, #32
 80049d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f000 fde9 	bl	80055ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049da:	bf00      	nop
 80049dc:	3710      	adds	r7, #16
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e0ff      	b.n	8004c02 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b14      	cmp	r3, #20
 8004a0e:	f200 80f0 	bhi.w	8004bf2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a12:	a201      	add	r2, pc, #4	@ (adr r2, 8004a18 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a6d 	.word	0x08004a6d
 8004a1c:	08004bf3 	.word	0x08004bf3
 8004a20:	08004bf3 	.word	0x08004bf3
 8004a24:	08004bf3 	.word	0x08004bf3
 8004a28:	08004aad 	.word	0x08004aad
 8004a2c:	08004bf3 	.word	0x08004bf3
 8004a30:	08004bf3 	.word	0x08004bf3
 8004a34:	08004bf3 	.word	0x08004bf3
 8004a38:	08004aef 	.word	0x08004aef
 8004a3c:	08004bf3 	.word	0x08004bf3
 8004a40:	08004bf3 	.word	0x08004bf3
 8004a44:	08004bf3 	.word	0x08004bf3
 8004a48:	08004b2f 	.word	0x08004b2f
 8004a4c:	08004bf3 	.word	0x08004bf3
 8004a50:	08004bf3 	.word	0x08004bf3
 8004a54:	08004bf3 	.word	0x08004bf3
 8004a58:	08004b71 	.word	0x08004b71
 8004a5c:	08004bf3 	.word	0x08004bf3
 8004a60:	08004bf3 	.word	0x08004bf3
 8004a64:	08004bf3 	.word	0x08004bf3
 8004a68:	08004bb1 	.word	0x08004bb1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68b9      	ldr	r1, [r7, #8]
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 f998 	bl	8004da8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699a      	ldr	r2, [r3, #24]
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f042 0208 	orr.w	r2, r2, #8
 8004a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	699a      	ldr	r2, [r3, #24]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0204 	bic.w	r2, r2, #4
 8004a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6999      	ldr	r1, [r3, #24]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	691a      	ldr	r2, [r3, #16]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	619a      	str	r2, [r3, #24]
      break;
 8004aaa:	e0a5      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68b9      	ldr	r1, [r7, #8]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fa08 	bl	8004ec8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699a      	ldr	r2, [r3, #24]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	699a      	ldr	r2, [r3, #24]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6999      	ldr	r1, [r3, #24]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	021a      	lsls	r2, r3, #8
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	619a      	str	r2, [r3, #24]
      break;
 8004aec:	e084      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68b9      	ldr	r1, [r7, #8]
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 fa71 	bl	8004fdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69da      	ldr	r2, [r3, #28]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0208 	orr.w	r2, r2, #8
 8004b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	69da      	ldr	r2, [r3, #28]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f022 0204 	bic.w	r2, r2, #4
 8004b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69d9      	ldr	r1, [r3, #28]
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	691a      	ldr	r2, [r3, #16]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	61da      	str	r2, [r3, #28]
      break;
 8004b2c:	e064      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68b9      	ldr	r1, [r7, #8]
 8004b34:	4618      	mov	r0, r3
 8004b36:	f000 fad9 	bl	80050ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69da      	ldr	r2, [r3, #28]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69da      	ldr	r2, [r3, #28]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69d9      	ldr	r1, [r3, #28]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	021a      	lsls	r2, r3, #8
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	61da      	str	r2, [r3, #28]
      break;
 8004b6e:	e043      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fb22 	bl	80051c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0208 	orr.w	r2, r2, #8
 8004b8a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0204 	bic.w	r2, r2, #4
 8004b9a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004bae:	e023      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fb66 	bl	8005288 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004bda:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	021a      	lsls	r2, r3, #8
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004bf0:	e002      	b.n	8004bf8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	75fb      	strb	r3, [r7, #23]
      break;
 8004bf6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop

08004c0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a46      	ldr	r2, [pc, #280]	@ (8004d88 <TIM_Base_SetConfig+0x12c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d013      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c7a:	d00f      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a43      	ldr	r2, [pc, #268]	@ (8004d8c <TIM_Base_SetConfig+0x130>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00b      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a42      	ldr	r2, [pc, #264]	@ (8004d90 <TIM_Base_SetConfig+0x134>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d007      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	4a41      	ldr	r2, [pc, #260]	@ (8004d94 <TIM_Base_SetConfig+0x138>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d003      	beq.n	8004c9c <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a40      	ldr	r2, [pc, #256]	@ (8004d98 <TIM_Base_SetConfig+0x13c>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d108      	bne.n	8004cae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a35      	ldr	r2, [pc, #212]	@ (8004d88 <TIM_Base_SetConfig+0x12c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01f      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cbc:	d01b      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a32      	ldr	r2, [pc, #200]	@ (8004d8c <TIM_Base_SetConfig+0x130>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d017      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a31      	ldr	r2, [pc, #196]	@ (8004d90 <TIM_Base_SetConfig+0x134>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d013      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a30      	ldr	r2, [pc, #192]	@ (8004d94 <TIM_Base_SetConfig+0x138>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d00f      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a2f      	ldr	r2, [pc, #188]	@ (8004d98 <TIM_Base_SetConfig+0x13c>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d00b      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a2e      	ldr	r2, [pc, #184]	@ (8004d9c <TIM_Base_SetConfig+0x140>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d007      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a2d      	ldr	r2, [pc, #180]	@ (8004da0 <TIM_Base_SetConfig+0x144>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d003      	beq.n	8004cf6 <TIM_Base_SetConfig+0x9a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2c      	ldr	r2, [pc, #176]	@ (8004da4 <TIM_Base_SetConfig+0x148>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d108      	bne.n	8004d08 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a16      	ldr	r2, [pc, #88]	@ (8004d88 <TIM_Base_SetConfig+0x12c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00f      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4a18      	ldr	r2, [pc, #96]	@ (8004d98 <TIM_Base_SetConfig+0x13c>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d00b      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4a17      	ldr	r2, [pc, #92]	@ (8004d9c <TIM_Base_SetConfig+0x140>)
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d007      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a16      	ldr	r2, [pc, #88]	@ (8004da0 <TIM_Base_SetConfig+0x144>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d003      	beq.n	8004d54 <TIM_Base_SetConfig+0xf8>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a15      	ldr	r2, [pc, #84]	@ (8004da4 <TIM_Base_SetConfig+0x148>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d103      	bne.n	8004d5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	691a      	ldr	r2, [r3, #16]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d105      	bne.n	8004d7a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f023 0201 	bic.w	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	611a      	str	r2, [r3, #16]
  }
}
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40012c00 	.word	0x40012c00
 8004d8c:	40000400 	.word	0x40000400
 8004d90:	40000800 	.word	0x40000800
 8004d94:	40000c00 	.word	0x40000c00
 8004d98:	40013400 	.word	0x40013400
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	40014400 	.word	0x40014400
 8004da4:	40014800 	.word	0x40014800

08004da8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a1b      	ldr	r3, [r3, #32]
 8004dbc:	f023 0201 	bic.w	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004dd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f023 0303 	bic.w	r3, r3, #3
 8004de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68fa      	ldr	r2, [r7, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f023 0302 	bic.w	r3, r3, #2
 8004df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a2c      	ldr	r2, [pc, #176]	@ (8004eb4 <TIM_OC1_SetConfig+0x10c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d00f      	beq.n	8004e28 <TIM_OC1_SetConfig+0x80>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a2b      	ldr	r2, [pc, #172]	@ (8004eb8 <TIM_OC1_SetConfig+0x110>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00b      	beq.n	8004e28 <TIM_OC1_SetConfig+0x80>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a2a      	ldr	r2, [pc, #168]	@ (8004ebc <TIM_OC1_SetConfig+0x114>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d007      	beq.n	8004e28 <TIM_OC1_SetConfig+0x80>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a29      	ldr	r2, [pc, #164]	@ (8004ec0 <TIM_OC1_SetConfig+0x118>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_OC1_SetConfig+0x80>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a28      	ldr	r2, [pc, #160]	@ (8004ec4 <TIM_OC1_SetConfig+0x11c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d10c      	bne.n	8004e42 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f023 0308 	bic.w	r3, r3, #8
 8004e2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f023 0304 	bic.w	r3, r3, #4
 8004e40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1b      	ldr	r2, [pc, #108]	@ (8004eb4 <TIM_OC1_SetConfig+0x10c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00f      	beq.n	8004e6a <TIM_OC1_SetConfig+0xc2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb8 <TIM_OC1_SetConfig+0x110>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <TIM_OC1_SetConfig+0xc2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a19      	ldr	r2, [pc, #100]	@ (8004ebc <TIM_OC1_SetConfig+0x114>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d007      	beq.n	8004e6a <TIM_OC1_SetConfig+0xc2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a18      	ldr	r2, [pc, #96]	@ (8004ec0 <TIM_OC1_SetConfig+0x118>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_OC1_SetConfig+0xc2>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a17      	ldr	r2, [pc, #92]	@ (8004ec4 <TIM_OC1_SetConfig+0x11c>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d111      	bne.n	8004e8e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	693a      	ldr	r2, [r7, #16]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	693a      	ldr	r2, [r7, #16]
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	685a      	ldr	r2, [r3, #4]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	621a      	str	r2, [r3, #32]
}
 8004ea8:	bf00      	nop
 8004eaa:	371c      	adds	r7, #28
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr
 8004eb4:	40012c00 	.word	0x40012c00
 8004eb8:	40013400 	.word	0x40013400
 8004ebc:	40014000 	.word	0x40014000
 8004ec0:	40014400 	.word	0x40014400
 8004ec4:	40014800 	.word	0x40014800

08004ec8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b087      	sub	sp, #28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a1b      	ldr	r3, [r3, #32]
 8004ed6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	f023 0210 	bic.w	r2, r3, #16
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 0320 	bic.w	r3, r3, #32
 8004f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a28      	ldr	r2, [pc, #160]	@ (8004fc8 <TIM_OC2_SetConfig+0x100>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d003      	beq.n	8004f34 <TIM_OC2_SetConfig+0x6c>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a27      	ldr	r2, [pc, #156]	@ (8004fcc <TIM_OC2_SetConfig+0x104>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d10d      	bne.n	8004f50 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	697a      	ldr	r2, [r7, #20]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f4e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc8 <TIM_OC2_SetConfig+0x100>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d00f      	beq.n	8004f78 <TIM_OC2_SetConfig+0xb0>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fcc <TIM_OC2_SetConfig+0x104>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d00b      	beq.n	8004f78 <TIM_OC2_SetConfig+0xb0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd0 <TIM_OC2_SetConfig+0x108>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d007      	beq.n	8004f78 <TIM_OC2_SetConfig+0xb0>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004fd4 <TIM_OC2_SetConfig+0x10c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d003      	beq.n	8004f78 <TIM_OC2_SetConfig+0xb0>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	4a19      	ldr	r2, [pc, #100]	@ (8004fd8 <TIM_OC2_SetConfig+0x110>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d113      	bne.n	8004fa0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f7e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f86:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	693a      	ldr	r2, [r7, #16]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	699b      	ldr	r3, [r3, #24]
 8004f98:	009b      	lsls	r3, r3, #2
 8004f9a:	693a      	ldr	r2, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	685a      	ldr	r2, [r3, #4]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40013400 	.word	0x40013400
 8004fd0:	40014000 	.word	0x40014000
 8004fd4:	40014400 	.word	0x40014400
 8004fd8:	40014800 	.word	0x40014800

08004fdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b087      	sub	sp, #28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69db      	ldr	r3, [r3, #28]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800500a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800500e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f023 0303 	bic.w	r3, r3, #3
 8005016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	4313      	orrs	r3, r2
 8005034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a27      	ldr	r2, [pc, #156]	@ (80050d8 <TIM_OC3_SetConfig+0xfc>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d003      	beq.n	8005046 <TIM_OC3_SetConfig+0x6a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a26      	ldr	r2, [pc, #152]	@ (80050dc <TIM_OC3_SetConfig+0x100>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d10d      	bne.n	8005062 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800504c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	021b      	lsls	r3, r3, #8
 8005054:	697a      	ldr	r2, [r7, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a1c      	ldr	r2, [pc, #112]	@ (80050d8 <TIM_OC3_SetConfig+0xfc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d00f      	beq.n	800508a <TIM_OC3_SetConfig+0xae>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a1b      	ldr	r2, [pc, #108]	@ (80050dc <TIM_OC3_SetConfig+0x100>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d00b      	beq.n	800508a <TIM_OC3_SetConfig+0xae>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a1a      	ldr	r2, [pc, #104]	@ (80050e0 <TIM_OC3_SetConfig+0x104>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d007      	beq.n	800508a <TIM_OC3_SetConfig+0xae>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a19      	ldr	r2, [pc, #100]	@ (80050e4 <TIM_OC3_SetConfig+0x108>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d003      	beq.n	800508a <TIM_OC3_SetConfig+0xae>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a18      	ldr	r2, [pc, #96]	@ (80050e8 <TIM_OC3_SetConfig+0x10c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d113      	bne.n	80050b2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	011b      	lsls	r3, r3, #4
 80050a0:	693a      	ldr	r2, [r7, #16]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	011b      	lsls	r3, r3, #4
 80050ac:	693a      	ldr	r2, [r7, #16]
 80050ae:	4313      	orrs	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	68fa      	ldr	r2, [r7, #12]
 80050bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	697a      	ldr	r2, [r7, #20]
 80050ca:	621a      	str	r2, [r3, #32]
}
 80050cc:	bf00      	nop
 80050ce:	371c      	adds	r7, #28
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr
 80050d8:	40012c00 	.word	0x40012c00
 80050dc:	40013400 	.word	0x40013400
 80050e0:	40014000 	.word	0x40014000
 80050e4:	40014400 	.word	0x40014400
 80050e8:	40014800 	.word	0x40014800

080050ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a1b      	ldr	r3, [r3, #32]
 80050fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a1b      	ldr	r3, [r3, #32]
 8005100:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	69db      	ldr	r3, [r3, #28]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800511a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800511e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	021b      	lsls	r3, r3, #8
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	4313      	orrs	r3, r2
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800513a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	031b      	lsls	r3, r3, #12
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a18      	ldr	r2, [pc, #96]	@ (80051ac <TIM_OC4_SetConfig+0xc0>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00f      	beq.n	8005170 <TIM_OC4_SetConfig+0x84>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a17      	ldr	r2, [pc, #92]	@ (80051b0 <TIM_OC4_SetConfig+0xc4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00b      	beq.n	8005170 <TIM_OC4_SetConfig+0x84>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a16      	ldr	r2, [pc, #88]	@ (80051b4 <TIM_OC4_SetConfig+0xc8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d007      	beq.n	8005170 <TIM_OC4_SetConfig+0x84>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a15      	ldr	r2, [pc, #84]	@ (80051b8 <TIM_OC4_SetConfig+0xcc>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d003      	beq.n	8005170 <TIM_OC4_SetConfig+0x84>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	4a14      	ldr	r2, [pc, #80]	@ (80051bc <TIM_OC4_SetConfig+0xd0>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d109      	bne.n	8005184 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005176:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	019b      	lsls	r3, r3, #6
 800517e:	697a      	ldr	r2, [r7, #20]
 8005180:	4313      	orrs	r3, r2
 8005182:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	685a      	ldr	r2, [r3, #4]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	621a      	str	r2, [r3, #32]
}
 800519e:	bf00      	nop
 80051a0:	371c      	adds	r7, #28
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40012c00 	.word	0x40012c00
 80051b0:	40013400 	.word	0x40013400
 80051b4:	40014000 	.word	0x40014000
 80051b8:	40014400 	.word	0x40014400
 80051bc:	40014800 	.word	0x40014800

080051c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b087      	sub	sp, #28
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a1b      	ldr	r3, [r3, #32]
 80051d4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	68fa      	ldr	r2, [r7, #12]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005204:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4313      	orrs	r3, r2
 8005210:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a17      	ldr	r2, [pc, #92]	@ (8005274 <TIM_OC5_SetConfig+0xb4>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d00f      	beq.n	800523a <TIM_OC5_SetConfig+0x7a>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a16      	ldr	r2, [pc, #88]	@ (8005278 <TIM_OC5_SetConfig+0xb8>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d00b      	beq.n	800523a <TIM_OC5_SetConfig+0x7a>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a15      	ldr	r2, [pc, #84]	@ (800527c <TIM_OC5_SetConfig+0xbc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d007      	beq.n	800523a <TIM_OC5_SetConfig+0x7a>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a14      	ldr	r2, [pc, #80]	@ (8005280 <TIM_OC5_SetConfig+0xc0>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d003      	beq.n	800523a <TIM_OC5_SetConfig+0x7a>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a13      	ldr	r2, [pc, #76]	@ (8005284 <TIM_OC5_SetConfig+0xc4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d109      	bne.n	800524e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005240:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	021b      	lsls	r3, r3, #8
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	68fa      	ldr	r2, [r7, #12]
 8005258:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	693a      	ldr	r2, [r7, #16]
 8005266:	621a      	str	r2, [r3, #32]
}
 8005268:	bf00      	nop
 800526a:	371c      	adds	r7, #28
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr
 8005274:	40012c00 	.word	0x40012c00
 8005278:	40013400 	.word	0x40013400
 800527c:	40014000 	.word	0x40014000
 8005280:	40014400 	.word	0x40014400
 8005284:	40014800 	.word	0x40014800

08005288 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005288:	b480      	push	{r7}
 800528a:	b087      	sub	sp, #28
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
 8005290:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6a1b      	ldr	r3, [r3, #32]
 8005296:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a1b      	ldr	r3, [r3, #32]
 800529c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80052b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80052ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80052ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	051b      	lsls	r3, r3, #20
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	4313      	orrs	r3, r2
 80052da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a18      	ldr	r2, [pc, #96]	@ (8005340 <TIM_OC6_SetConfig+0xb8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d00f      	beq.n	8005304 <TIM_OC6_SetConfig+0x7c>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a17      	ldr	r2, [pc, #92]	@ (8005344 <TIM_OC6_SetConfig+0xbc>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d00b      	beq.n	8005304 <TIM_OC6_SetConfig+0x7c>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a16      	ldr	r2, [pc, #88]	@ (8005348 <TIM_OC6_SetConfig+0xc0>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d007      	beq.n	8005304 <TIM_OC6_SetConfig+0x7c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a15      	ldr	r2, [pc, #84]	@ (800534c <TIM_OC6_SetConfig+0xc4>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_OC6_SetConfig+0x7c>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a14      	ldr	r2, [pc, #80]	@ (8005350 <TIM_OC6_SetConfig+0xc8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d109      	bne.n	8005318 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800530a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	029b      	lsls	r3, r3, #10
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	697a      	ldr	r2, [r7, #20]
 800531c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	693a      	ldr	r2, [r7, #16]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40013400 	.word	0x40013400
 8005348:	40014000 	.word	0x40014000
 800534c:	40014400 	.word	0x40014400
 8005350:	40014800 	.word	0x40014800

08005354 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005354:	b480      	push	{r7}
 8005356:	b087      	sub	sp, #28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 031f 	and.w	r3, r3, #31
 8005366:	2201      	movs	r2, #1
 8005368:	fa02 f303 	lsl.w	r3, r2, r3
 800536c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	6a1a      	ldr	r2, [r3, #32]
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	43db      	mvns	r3, r3
 8005376:	401a      	ands	r2, r3
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6a1a      	ldr	r2, [r3, #32]
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	f003 031f 	and.w	r3, r3, #31
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	fa01 f303 	lsl.w	r3, r1, r3
 800538c:	431a      	orrs	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	621a      	str	r2, [r3, #32]
}
 8005392:	bf00      	nop
 8005394:	371c      	adds	r7, #28
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
	...

080053a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b085      	sub	sp, #20
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d101      	bne.n	80053b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053b4:	2302      	movs	r3, #2
 80053b6:	e068      	b.n	800548a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2e      	ldr	r2, [pc, #184]	@ (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d004      	beq.n	80053ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2d      	ldr	r2, [pc, #180]	@ (800549c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d108      	bne.n	80053fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80053f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005404:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4313      	orrs	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1e      	ldr	r2, [pc, #120]	@ (8005498 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d01d      	beq.n	800545e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800542a:	d018      	beq.n	800545e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a1b      	ldr	r2, [pc, #108]	@ (80054a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d013      	beq.n	800545e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1a      	ldr	r2, [pc, #104]	@ (80054a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d00e      	beq.n	800545e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a18      	ldr	r2, [pc, #96]	@ (80054a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d009      	beq.n	800545e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a13      	ldr	r2, [pc, #76]	@ (800549c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d004      	beq.n	800545e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a14      	ldr	r2, [pc, #80]	@ (80054ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d10c      	bne.n	8005478 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005464:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	68ba      	ldr	r2, [r7, #8]
 800546c:	4313      	orrs	r3, r2
 800546e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2201      	movs	r2, #1
 800547c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005488:	2300      	movs	r3, #0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3714      	adds	r7, #20
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40012c00 	.word	0x40012c00
 800549c:	40013400 	.word	0x40013400
 80054a0:	40000400 	.word	0x40000400
 80054a4:	40000800 	.word	0x40000800
 80054a8:	40000c00 	.word	0x40000c00
 80054ac:	40014000 	.word	0x40014000

080054b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e065      	b.n	8005598 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	695b      	ldr	r3, [r3, #20]
 8005524:	4313      	orrs	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	041b      	lsls	r3, r3, #16
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a16      	ldr	r2, [pc, #88]	@ (80055a4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d004      	beq.n	800555a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a14      	ldr	r2, [pc, #80]	@ (80055a8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d115      	bne.n	8005586 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005564:	051b      	lsls	r3, r3, #20
 8005566:	4313      	orrs	r3, r2
 8005568:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	4313      	orrs	r3, r2
 8005576:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3714      	adds	r7, #20
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr
 80055a4:	40012c00 	.word	0x40012c00
 80055a8:	40013400 	.word	0x40013400

080055ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b083      	sub	sp, #12
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80055c8:	bf00      	nop
 80055ca:	370c      	adds	r7, #12
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr

080055e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b082      	sub	sp, #8
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e040      	b.n	800567c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fc fe7a 	bl	8002304 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2224      	movs	r2, #36	@ 0x24
 8005614:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0201 	bic.w	r2, r2, #1
 8005624:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d002      	beq.n	8005634 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 fae0 	bl	8005bf4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f825 	bl	8005684 <UART_SetConfig>
 800563a:	4603      	mov	r3, r0
 800563c:	2b01      	cmp	r3, #1
 800563e:	d101      	bne.n	8005644 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e01b      	b.n	800567c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	689a      	ldr	r2, [r3, #8]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f042 0201 	orr.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fb5f 	bl	8005d38 <UART_CheckIdleState>
 800567a:	4603      	mov	r3, r0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3708      	adds	r7, #8
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005688:	b08a      	sub	sp, #40	@ 0x28
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	431a      	orrs	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	695b      	ldr	r3, [r3, #20]
 80056a2:	431a      	orrs	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	4ba4      	ldr	r3, [pc, #656]	@ (8005944 <UART_SetConfig+0x2c0>)
 80056b4:	4013      	ands	r3, r2
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	6812      	ldr	r2, [r2, #0]
 80056ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056bc:	430b      	orrs	r3, r1
 80056be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	68da      	ldr	r2, [r3, #12]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a99      	ldr	r2, [pc, #612]	@ (8005948 <UART_SetConfig+0x2c4>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d004      	beq.n	80056f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ec:	4313      	orrs	r3, r2
 80056ee:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005700:	430a      	orrs	r2, r1
 8005702:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a90      	ldr	r2, [pc, #576]	@ (800594c <UART_SetConfig+0x2c8>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d126      	bne.n	800575c <UART_SetConfig+0xd8>
 800570e:	4b90      	ldr	r3, [pc, #576]	@ (8005950 <UART_SetConfig+0x2cc>)
 8005710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	2b03      	cmp	r3, #3
 800571a:	d81b      	bhi.n	8005754 <UART_SetConfig+0xd0>
 800571c:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <UART_SetConfig+0xa0>)
 800571e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005722:	bf00      	nop
 8005724:	08005735 	.word	0x08005735
 8005728:	08005745 	.word	0x08005745
 800572c:	0800573d 	.word	0x0800573d
 8005730:	0800574d 	.word	0x0800574d
 8005734:	2301      	movs	r3, #1
 8005736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800573a:	e116      	b.n	800596a <UART_SetConfig+0x2e6>
 800573c:	2302      	movs	r3, #2
 800573e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005742:	e112      	b.n	800596a <UART_SetConfig+0x2e6>
 8005744:	2304      	movs	r3, #4
 8005746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800574a:	e10e      	b.n	800596a <UART_SetConfig+0x2e6>
 800574c:	2308      	movs	r3, #8
 800574e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005752:	e10a      	b.n	800596a <UART_SetConfig+0x2e6>
 8005754:	2310      	movs	r3, #16
 8005756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800575a:	e106      	b.n	800596a <UART_SetConfig+0x2e6>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a7c      	ldr	r2, [pc, #496]	@ (8005954 <UART_SetConfig+0x2d0>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d138      	bne.n	80057d8 <UART_SetConfig+0x154>
 8005766:	4b7a      	ldr	r3, [pc, #488]	@ (8005950 <UART_SetConfig+0x2cc>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800576c:	f003 030c 	and.w	r3, r3, #12
 8005770:	2b0c      	cmp	r3, #12
 8005772:	d82d      	bhi.n	80057d0 <UART_SetConfig+0x14c>
 8005774:	a201      	add	r2, pc, #4	@ (adr r2, 800577c <UART_SetConfig+0xf8>)
 8005776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577a:	bf00      	nop
 800577c:	080057b1 	.word	0x080057b1
 8005780:	080057d1 	.word	0x080057d1
 8005784:	080057d1 	.word	0x080057d1
 8005788:	080057d1 	.word	0x080057d1
 800578c:	080057c1 	.word	0x080057c1
 8005790:	080057d1 	.word	0x080057d1
 8005794:	080057d1 	.word	0x080057d1
 8005798:	080057d1 	.word	0x080057d1
 800579c:	080057b9 	.word	0x080057b9
 80057a0:	080057d1 	.word	0x080057d1
 80057a4:	080057d1 	.word	0x080057d1
 80057a8:	080057d1 	.word	0x080057d1
 80057ac:	080057c9 	.word	0x080057c9
 80057b0:	2300      	movs	r3, #0
 80057b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057b6:	e0d8      	b.n	800596a <UART_SetConfig+0x2e6>
 80057b8:	2302      	movs	r3, #2
 80057ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057be:	e0d4      	b.n	800596a <UART_SetConfig+0x2e6>
 80057c0:	2304      	movs	r3, #4
 80057c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057c6:	e0d0      	b.n	800596a <UART_SetConfig+0x2e6>
 80057c8:	2308      	movs	r3, #8
 80057ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057ce:	e0cc      	b.n	800596a <UART_SetConfig+0x2e6>
 80057d0:	2310      	movs	r3, #16
 80057d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80057d6:	e0c8      	b.n	800596a <UART_SetConfig+0x2e6>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a5e      	ldr	r2, [pc, #376]	@ (8005958 <UART_SetConfig+0x2d4>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d125      	bne.n	800582e <UART_SetConfig+0x1aa>
 80057e2:	4b5b      	ldr	r3, [pc, #364]	@ (8005950 <UART_SetConfig+0x2cc>)
 80057e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80057e8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80057ec:	2b30      	cmp	r3, #48	@ 0x30
 80057ee:	d016      	beq.n	800581e <UART_SetConfig+0x19a>
 80057f0:	2b30      	cmp	r3, #48	@ 0x30
 80057f2:	d818      	bhi.n	8005826 <UART_SetConfig+0x1a2>
 80057f4:	2b20      	cmp	r3, #32
 80057f6:	d00a      	beq.n	800580e <UART_SetConfig+0x18a>
 80057f8:	2b20      	cmp	r3, #32
 80057fa:	d814      	bhi.n	8005826 <UART_SetConfig+0x1a2>
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <UART_SetConfig+0x182>
 8005800:	2b10      	cmp	r3, #16
 8005802:	d008      	beq.n	8005816 <UART_SetConfig+0x192>
 8005804:	e00f      	b.n	8005826 <UART_SetConfig+0x1a2>
 8005806:	2300      	movs	r3, #0
 8005808:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800580c:	e0ad      	b.n	800596a <UART_SetConfig+0x2e6>
 800580e:	2302      	movs	r3, #2
 8005810:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005814:	e0a9      	b.n	800596a <UART_SetConfig+0x2e6>
 8005816:	2304      	movs	r3, #4
 8005818:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800581c:	e0a5      	b.n	800596a <UART_SetConfig+0x2e6>
 800581e:	2308      	movs	r3, #8
 8005820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005824:	e0a1      	b.n	800596a <UART_SetConfig+0x2e6>
 8005826:	2310      	movs	r3, #16
 8005828:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800582c:	e09d      	b.n	800596a <UART_SetConfig+0x2e6>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a4a      	ldr	r2, [pc, #296]	@ (800595c <UART_SetConfig+0x2d8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d125      	bne.n	8005884 <UART_SetConfig+0x200>
 8005838:	4b45      	ldr	r3, [pc, #276]	@ (8005950 <UART_SetConfig+0x2cc>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800583e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005842:	2bc0      	cmp	r3, #192	@ 0xc0
 8005844:	d016      	beq.n	8005874 <UART_SetConfig+0x1f0>
 8005846:	2bc0      	cmp	r3, #192	@ 0xc0
 8005848:	d818      	bhi.n	800587c <UART_SetConfig+0x1f8>
 800584a:	2b80      	cmp	r3, #128	@ 0x80
 800584c:	d00a      	beq.n	8005864 <UART_SetConfig+0x1e0>
 800584e:	2b80      	cmp	r3, #128	@ 0x80
 8005850:	d814      	bhi.n	800587c <UART_SetConfig+0x1f8>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <UART_SetConfig+0x1d8>
 8005856:	2b40      	cmp	r3, #64	@ 0x40
 8005858:	d008      	beq.n	800586c <UART_SetConfig+0x1e8>
 800585a:	e00f      	b.n	800587c <UART_SetConfig+0x1f8>
 800585c:	2300      	movs	r3, #0
 800585e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005862:	e082      	b.n	800596a <UART_SetConfig+0x2e6>
 8005864:	2302      	movs	r3, #2
 8005866:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800586a:	e07e      	b.n	800596a <UART_SetConfig+0x2e6>
 800586c:	2304      	movs	r3, #4
 800586e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005872:	e07a      	b.n	800596a <UART_SetConfig+0x2e6>
 8005874:	2308      	movs	r3, #8
 8005876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800587a:	e076      	b.n	800596a <UART_SetConfig+0x2e6>
 800587c:	2310      	movs	r3, #16
 800587e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005882:	e072      	b.n	800596a <UART_SetConfig+0x2e6>
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a35      	ldr	r2, [pc, #212]	@ (8005960 <UART_SetConfig+0x2dc>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d12a      	bne.n	80058e4 <UART_SetConfig+0x260>
 800588e:	4b30      	ldr	r3, [pc, #192]	@ (8005950 <UART_SetConfig+0x2cc>)
 8005890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005894:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005898:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800589c:	d01a      	beq.n	80058d4 <UART_SetConfig+0x250>
 800589e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058a2:	d81b      	bhi.n	80058dc <UART_SetConfig+0x258>
 80058a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058a8:	d00c      	beq.n	80058c4 <UART_SetConfig+0x240>
 80058aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058ae:	d815      	bhi.n	80058dc <UART_SetConfig+0x258>
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <UART_SetConfig+0x238>
 80058b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058b8:	d008      	beq.n	80058cc <UART_SetConfig+0x248>
 80058ba:	e00f      	b.n	80058dc <UART_SetConfig+0x258>
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058c2:	e052      	b.n	800596a <UART_SetConfig+0x2e6>
 80058c4:	2302      	movs	r3, #2
 80058c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058ca:	e04e      	b.n	800596a <UART_SetConfig+0x2e6>
 80058cc:	2304      	movs	r3, #4
 80058ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058d2:	e04a      	b.n	800596a <UART_SetConfig+0x2e6>
 80058d4:	2308      	movs	r3, #8
 80058d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058da:	e046      	b.n	800596a <UART_SetConfig+0x2e6>
 80058dc:	2310      	movs	r3, #16
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80058e2:	e042      	b.n	800596a <UART_SetConfig+0x2e6>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a17      	ldr	r2, [pc, #92]	@ (8005948 <UART_SetConfig+0x2c4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d13a      	bne.n	8005964 <UART_SetConfig+0x2e0>
 80058ee:	4b18      	ldr	r3, [pc, #96]	@ (8005950 <UART_SetConfig+0x2cc>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80058f8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80058fc:	d01a      	beq.n	8005934 <UART_SetConfig+0x2b0>
 80058fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005902:	d81b      	bhi.n	800593c <UART_SetConfig+0x2b8>
 8005904:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005908:	d00c      	beq.n	8005924 <UART_SetConfig+0x2a0>
 800590a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800590e:	d815      	bhi.n	800593c <UART_SetConfig+0x2b8>
 8005910:	2b00      	cmp	r3, #0
 8005912:	d003      	beq.n	800591c <UART_SetConfig+0x298>
 8005914:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005918:	d008      	beq.n	800592c <UART_SetConfig+0x2a8>
 800591a:	e00f      	b.n	800593c <UART_SetConfig+0x2b8>
 800591c:	2300      	movs	r3, #0
 800591e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005922:	e022      	b.n	800596a <UART_SetConfig+0x2e6>
 8005924:	2302      	movs	r3, #2
 8005926:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800592a:	e01e      	b.n	800596a <UART_SetConfig+0x2e6>
 800592c:	2304      	movs	r3, #4
 800592e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005932:	e01a      	b.n	800596a <UART_SetConfig+0x2e6>
 8005934:	2308      	movs	r3, #8
 8005936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800593a:	e016      	b.n	800596a <UART_SetConfig+0x2e6>
 800593c:	2310      	movs	r3, #16
 800593e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005942:	e012      	b.n	800596a <UART_SetConfig+0x2e6>
 8005944:	efff69f3 	.word	0xefff69f3
 8005948:	40008000 	.word	0x40008000
 800594c:	40013800 	.word	0x40013800
 8005950:	40021000 	.word	0x40021000
 8005954:	40004400 	.word	0x40004400
 8005958:	40004800 	.word	0x40004800
 800595c:	40004c00 	.word	0x40004c00
 8005960:	40005000 	.word	0x40005000
 8005964:	2310      	movs	r3, #16
 8005966:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a9f      	ldr	r2, [pc, #636]	@ (8005bec <UART_SetConfig+0x568>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d17a      	bne.n	8005a6a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005974:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005978:	2b08      	cmp	r3, #8
 800597a:	d824      	bhi.n	80059c6 <UART_SetConfig+0x342>
 800597c:	a201      	add	r2, pc, #4	@ (adr r2, 8005984 <UART_SetConfig+0x300>)
 800597e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005982:	bf00      	nop
 8005984:	080059a9 	.word	0x080059a9
 8005988:	080059c7 	.word	0x080059c7
 800598c:	080059b1 	.word	0x080059b1
 8005990:	080059c7 	.word	0x080059c7
 8005994:	080059b7 	.word	0x080059b7
 8005998:	080059c7 	.word	0x080059c7
 800599c:	080059c7 	.word	0x080059c7
 80059a0:	080059c7 	.word	0x080059c7
 80059a4:	080059bf 	.word	0x080059bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80059a8:	f7fd fed4 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 80059ac:	61f8      	str	r0, [r7, #28]
        break;
 80059ae:	e010      	b.n	80059d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80059b0:	4b8f      	ldr	r3, [pc, #572]	@ (8005bf0 <UART_SetConfig+0x56c>)
 80059b2:	61fb      	str	r3, [r7, #28]
        break;
 80059b4:	e00d      	b.n	80059d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80059b6:	f7fd fe35 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80059ba:	61f8      	str	r0, [r7, #28]
        break;
 80059bc:	e009      	b.n	80059d2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80059c2:	61fb      	str	r3, [r7, #28]
        break;
 80059c4:	e005      	b.n	80059d2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80059c6:	2300      	movs	r3, #0
 80059c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80059d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	f000 80fb 	beq.w	8005bd0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	4613      	mov	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d305      	bcc.n	80059f6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80059f0:	69fa      	ldr	r2, [r7, #28]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d903      	bls.n	80059fe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059fc:	e0e8      	b.n	8005bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	2200      	movs	r2, #0
 8005a02:	461c      	mov	r4, r3
 8005a04:	4615      	mov	r5, r2
 8005a06:	f04f 0200 	mov.w	r2, #0
 8005a0a:	f04f 0300 	mov.w	r3, #0
 8005a0e:	022b      	lsls	r3, r5, #8
 8005a10:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005a14:	0222      	lsls	r2, r4, #8
 8005a16:	68f9      	ldr	r1, [r7, #12]
 8005a18:	6849      	ldr	r1, [r1, #4]
 8005a1a:	0849      	lsrs	r1, r1, #1
 8005a1c:	2000      	movs	r0, #0
 8005a1e:	4688      	mov	r8, r1
 8005a20:	4681      	mov	r9, r0
 8005a22:	eb12 0a08 	adds.w	sl, r2, r8
 8005a26:	eb43 0b09 	adc.w	fp, r3, r9
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a38:	4650      	mov	r0, sl
 8005a3a:	4659      	mov	r1, fp
 8005a3c:	f7fa fed6 	bl	80007ec <__aeabi_uldivmod>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4613      	mov	r3, r2
 8005a46:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005a48:	69bb      	ldr	r3, [r7, #24]
 8005a4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a4e:	d308      	bcc.n	8005a62 <UART_SetConfig+0x3de>
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a56:	d204      	bcs.n	8005a62 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69ba      	ldr	r2, [r7, #24]
 8005a5e:	60da      	str	r2, [r3, #12]
 8005a60:	e0b6      	b.n	8005bd0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005a68:	e0b2      	b.n	8005bd0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a72:	d15e      	bne.n	8005b32 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005a74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d828      	bhi.n	8005ace <UART_SetConfig+0x44a>
 8005a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a84 <UART_SetConfig+0x400>)
 8005a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a82:	bf00      	nop
 8005a84:	08005aa9 	.word	0x08005aa9
 8005a88:	08005ab1 	.word	0x08005ab1
 8005a8c:	08005ab9 	.word	0x08005ab9
 8005a90:	08005acf 	.word	0x08005acf
 8005a94:	08005abf 	.word	0x08005abf
 8005a98:	08005acf 	.word	0x08005acf
 8005a9c:	08005acf 	.word	0x08005acf
 8005aa0:	08005acf 	.word	0x08005acf
 8005aa4:	08005ac7 	.word	0x08005ac7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005aa8:	f7fd fe54 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8005aac:	61f8      	str	r0, [r7, #28]
        break;
 8005aae:	e014      	b.n	8005ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ab0:	f7fd fe66 	bl	8003780 <HAL_RCC_GetPCLK2Freq>
 8005ab4:	61f8      	str	r0, [r7, #28]
        break;
 8005ab6:	e010      	b.n	8005ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8005bf0 <UART_SetConfig+0x56c>)
 8005aba:	61fb      	str	r3, [r7, #28]
        break;
 8005abc:	e00d      	b.n	8005ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005abe:	f7fd fdb1 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005ac2:	61f8      	str	r0, [r7, #28]
        break;
 8005ac4:	e009      	b.n	8005ada <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aca:	61fb      	str	r3, [r7, #28]
        break;
 8005acc:	e005      	b.n	8005ada <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005ad8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d077      	beq.n	8005bd0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	005a      	lsls	r2, r3, #1
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	085b      	lsrs	r3, r3, #1
 8005aea:	441a      	add	r2, r3
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	2b0f      	cmp	r3, #15
 8005afa:	d916      	bls.n	8005b2a <UART_SetConfig+0x4a6>
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b02:	d212      	bcs.n	8005b2a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	b29b      	uxth	r3, r3
 8005b08:	f023 030f 	bic.w	r3, r3, #15
 8005b0c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b0e:	69bb      	ldr	r3, [r7, #24]
 8005b10:	085b      	lsrs	r3, r3, #1
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	8afb      	ldrh	r3, [r7, #22]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	8afa      	ldrh	r2, [r7, #22]
 8005b26:	60da      	str	r2, [r3, #12]
 8005b28:	e052      	b.n	8005bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005b30:	e04e      	b.n	8005bd0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005b36:	2b08      	cmp	r3, #8
 8005b38:	d827      	bhi.n	8005b8a <UART_SetConfig+0x506>
 8005b3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <UART_SetConfig+0x4bc>)
 8005b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b40:	08005b65 	.word	0x08005b65
 8005b44:	08005b6d 	.word	0x08005b6d
 8005b48:	08005b75 	.word	0x08005b75
 8005b4c:	08005b8b 	.word	0x08005b8b
 8005b50:	08005b7b 	.word	0x08005b7b
 8005b54:	08005b8b 	.word	0x08005b8b
 8005b58:	08005b8b 	.word	0x08005b8b
 8005b5c:	08005b8b 	.word	0x08005b8b
 8005b60:	08005b83 	.word	0x08005b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b64:	f7fd fdf6 	bl	8003754 <HAL_RCC_GetPCLK1Freq>
 8005b68:	61f8      	str	r0, [r7, #28]
        break;
 8005b6a:	e014      	b.n	8005b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b6c:	f7fd fe08 	bl	8003780 <HAL_RCC_GetPCLK2Freq>
 8005b70:	61f8      	str	r0, [r7, #28]
        break;
 8005b72:	e010      	b.n	8005b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b74:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf0 <UART_SetConfig+0x56c>)
 8005b76:	61fb      	str	r3, [r7, #28]
        break;
 8005b78:	e00d      	b.n	8005b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b7a:	f7fd fd53 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 8005b7e:	61f8      	str	r0, [r7, #28]
        break;
 8005b80:	e009      	b.n	8005b96 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b86:	61fb      	str	r3, [r7, #28]
        break;
 8005b88:	e005      	b.n	8005b96 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005b94:	bf00      	nop
    }

    if (pclk != 0U)
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d019      	beq.n	8005bd0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	085a      	lsrs	r2, r3, #1
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	441a      	add	r2, r3
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	2b0f      	cmp	r3, #15
 8005bb4:	d909      	bls.n	8005bca <UART_SetConfig+0x546>
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bbc:	d205      	bcs.n	8005bca <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	60da      	str	r2, [r3, #12]
 8005bc8:	e002      	b.n	8005bd0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005bdc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3728      	adds	r7, #40	@ 0x28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bea:	bf00      	nop
 8005bec:	40008000 	.word	0x40008000
 8005bf0:	00f42400 	.word	0x00f42400

08005bf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d00a      	beq.n	8005c1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	430a      	orrs	r2, r1
 8005c1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c22:	f003 0301 	and.w	r3, r3, #1
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d00a      	beq.n	8005c40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	430a      	orrs	r2, r1
 8005c3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c44:	f003 0302 	and.w	r3, r3, #2
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d00a      	beq.n	8005c62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00a      	beq.n	8005c84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	430a      	orrs	r2, r1
 8005c82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	f003 0310 	and.w	r3, r3, #16
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00a      	beq.n	8005ca6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00a      	beq.n	8005cc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d01a      	beq.n	8005d0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005cf2:	d10a      	bne.n	8005d0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d00a      	beq.n	8005d2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	430a      	orrs	r2, r1
 8005d2a:	605a      	str	r2, [r3, #4]
  }
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b098      	sub	sp, #96	@ 0x60
 8005d3c:	af02      	add	r7, sp, #8
 8005d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005d48:	f7fc fc58 	bl	80025fc <HAL_GetTick>
 8005d4c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 0308 	and.w	r3, r3, #8
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d12e      	bne.n	8005dba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005d5c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d64:	2200      	movs	r2, #0
 8005d66:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 f88c 	bl	8005e88 <UART_WaitOnFlagUntilTimeout>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d021      	beq.n	8005dba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d86:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d96:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005da2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e6      	bne.n	8005d76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e062      	b.n	8005e80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0304 	and.w	r3, r3, #4
 8005dc4:	2b04      	cmp	r3, #4
 8005dc6:	d149      	bne.n	8005e5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005dc8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f856 	bl	8005e88 <UART_WaitOnFlagUntilTimeout>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d03c      	beq.n	8005e5c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dea:	e853 3f00 	ldrex	r3, [r3]
 8005dee:	623b      	str	r3, [r7, #32]
   return(result);
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e00:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e02:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e08:	e841 2300 	strex	r3, r2, [r1]
 8005e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1e6      	bne.n	8005de2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3308      	adds	r3, #8
 8005e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f023 0301 	bic.w	r3, r3, #1
 8005e2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3308      	adds	r3, #8
 8005e32:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005e34:	61fa      	str	r2, [r7, #28]
 8005e36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	69b9      	ldr	r1, [r7, #24]
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	617b      	str	r3, [r7, #20]
   return(result);
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e5      	bne.n	8005e14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2220      	movs	r2, #32
 8005e4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2200      	movs	r2, #0
 8005e54:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e011      	b.n	8005e80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2220      	movs	r2, #32
 8005e66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3758      	adds	r7, #88	@ 0x58
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	603b      	str	r3, [r7, #0]
 8005e94:	4613      	mov	r3, r2
 8005e96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e98:	e04f      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ea0:	d04b      	beq.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea2:	f7fc fbab 	bl	80025fc <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	69ba      	ldr	r2, [r7, #24]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d302      	bcc.n	8005eb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e04e      	b.n	8005f5a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 0304 	and.w	r3, r3, #4
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d037      	beq.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b80      	cmp	r3, #128	@ 0x80
 8005ece:	d034      	beq.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b40      	cmp	r3, #64	@ 0x40
 8005ed4:	d031      	beq.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	69db      	ldr	r3, [r3, #28]
 8005edc:	f003 0308 	and.w	r3, r3, #8
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d110      	bne.n	8005f06 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2208      	movs	r2, #8
 8005eea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eec:	68f8      	ldr	r0, [r7, #12]
 8005eee:	f000 f838 	bl	8005f62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e029      	b.n	8005f5a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f14:	d111      	bne.n	8005f3a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005f1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f20:	68f8      	ldr	r0, [r7, #12]
 8005f22:	f000 f81e 	bl	8005f62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e00f      	b.n	8005f5a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	69da      	ldr	r2, [r3, #28]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4013      	ands	r3, r2
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	bf0c      	ite	eq
 8005f4a:	2301      	moveq	r3, #1
 8005f4c:	2300      	movne	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d0a0      	beq.n	8005e9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b095      	sub	sp, #84	@ 0x54
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f88:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f8a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e6      	bne.n	8005f6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	3308      	adds	r3, #8
 8005fa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa4:	6a3b      	ldr	r3, [r7, #32]
 8005fa6:	e853 3f00 	ldrex	r3, [r3]
 8005faa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	f023 0301 	bic.w	r3, r3, #1
 8005fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	3308      	adds	r3, #8
 8005fba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fbc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fc4:	e841 2300 	strex	r3, r2, [r1]
 8005fc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1e5      	bne.n	8005f9c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d118      	bne.n	800600a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f023 0310 	bic.w	r3, r3, #16
 8005fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ff6:	61bb      	str	r3, [r7, #24]
 8005ff8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	6979      	ldr	r1, [r7, #20]
 8005ffc:	69ba      	ldr	r2, [r7, #24]
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	613b      	str	r3, [r7, #16]
   return(result);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e6      	bne.n	8005fd8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800601e:	bf00      	nop
 8006020:	3754      	adds	r7, #84	@ 0x54
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <__NVIC_SetPriority>:
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	6039      	str	r1, [r7, #0]
 8006036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800603c:	2b00      	cmp	r3, #0
 800603e:	db0a      	blt.n	8006056 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	b2da      	uxtb	r2, r3
 8006044:	490c      	ldr	r1, [pc, #48]	@ (8006078 <__NVIC_SetPriority+0x4c>)
 8006046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800604a:	0112      	lsls	r2, r2, #4
 800604c:	b2d2      	uxtb	r2, r2
 800604e:	440b      	add	r3, r1
 8006050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006054:	e00a      	b.n	800606c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	4908      	ldr	r1, [pc, #32]	@ (800607c <__NVIC_SetPriority+0x50>)
 800605c:	79fb      	ldrb	r3, [r7, #7]
 800605e:	f003 030f 	and.w	r3, r3, #15
 8006062:	3b04      	subs	r3, #4
 8006064:	0112      	lsls	r2, r2, #4
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	440b      	add	r3, r1
 800606a:	761a      	strb	r2, [r3, #24]
}
 800606c:	bf00      	nop
 800606e:	370c      	adds	r7, #12
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr
 8006078:	e000e100 	.word	0xe000e100
 800607c:	e000ed00 	.word	0xe000ed00

08006080 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006080:	b580      	push	{r7, lr}
 8006082:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006084:	4b05      	ldr	r3, [pc, #20]	@ (800609c <SysTick_Handler+0x1c>)
 8006086:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006088:	f001 fdd6 	bl	8007c38 <xTaskGetSchedulerState>
 800608c:	4603      	mov	r3, r0
 800608e:	2b01      	cmp	r3, #1
 8006090:	d001      	beq.n	8006096 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006092:	f002 fc91 	bl	80089b8 <xPortSysTickHandler>
  }
}
 8006096:	bf00      	nop
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	e000e010 	.word	0xe000e010

080060a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80060a4:	2100      	movs	r1, #0
 80060a6:	f06f 0004 	mvn.w	r0, #4
 80060aa:	f7ff ffbf 	bl	800602c <__NVIC_SetPriority>
#endif
}
 80060ae:	bf00      	nop
 80060b0:	bd80      	pop	{r7, pc}
	...

080060b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80060b4:	b480      	push	{r7}
 80060b6:	b083      	sub	sp, #12
 80060b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80060ba:	f3ef 8305 	mrs	r3, IPSR
 80060be:	603b      	str	r3, [r7, #0]
  return(result);
 80060c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d003      	beq.n	80060ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80060c6:	f06f 0305 	mvn.w	r3, #5
 80060ca:	607b      	str	r3, [r7, #4]
 80060cc:	e00c      	b.n	80060e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80060ce:	4b0a      	ldr	r3, [pc, #40]	@ (80060f8 <osKernelInitialize+0x44>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d105      	bne.n	80060e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80060d6:	4b08      	ldr	r3, [pc, #32]	@ (80060f8 <osKernelInitialize+0x44>)
 80060d8:	2201      	movs	r2, #1
 80060da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80060dc:	2300      	movs	r3, #0
 80060de:	607b      	str	r3, [r7, #4]
 80060e0:	e002      	b.n	80060e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80060e2:	f04f 33ff 	mov.w	r3, #4294967295
 80060e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80060e8:	687b      	ldr	r3, [r7, #4]
}
 80060ea:	4618      	mov	r0, r3
 80060ec:	370c      	adds	r7, #12
 80060ee:	46bd      	mov	sp, r7
 80060f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	200002f4 	.word	0x200002f4

080060fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006102:	f3ef 8305 	mrs	r3, IPSR
 8006106:	603b      	str	r3, [r7, #0]
  return(result);
 8006108:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800610a:	2b00      	cmp	r3, #0
 800610c:	d003      	beq.n	8006116 <osKernelStart+0x1a>
    stat = osErrorISR;
 800610e:	f06f 0305 	mvn.w	r3, #5
 8006112:	607b      	str	r3, [r7, #4]
 8006114:	e010      	b.n	8006138 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006116:	4b0b      	ldr	r3, [pc, #44]	@ (8006144 <osKernelStart+0x48>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d109      	bne.n	8006132 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800611e:	f7ff ffbf 	bl	80060a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006122:	4b08      	ldr	r3, [pc, #32]	@ (8006144 <osKernelStart+0x48>)
 8006124:	2202      	movs	r2, #2
 8006126:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006128:	f001 f938 	bl	800739c <vTaskStartScheduler>
      stat = osOK;
 800612c:	2300      	movs	r3, #0
 800612e:	607b      	str	r3, [r7, #4]
 8006130:	e002      	b.n	8006138 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006132:	f04f 33ff 	mov.w	r3, #4294967295
 8006136:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006138:	687b      	ldr	r3, [r7, #4]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	200002f4 	.word	0x200002f4

08006148 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006148:	b580      	push	{r7, lr}
 800614a:	b08e      	sub	sp, #56	@ 0x38
 800614c:	af04      	add	r7, sp, #16
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006154:	2300      	movs	r3, #0
 8006156:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006158:	f3ef 8305 	mrs	r3, IPSR
 800615c:	617b      	str	r3, [r7, #20]
  return(result);
 800615e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006160:	2b00      	cmp	r3, #0
 8006162:	d17e      	bne.n	8006262 <osThreadNew+0x11a>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d07b      	beq.n	8006262 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800616a:	2380      	movs	r3, #128	@ 0x80
 800616c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800616e:	2318      	movs	r3, #24
 8006170:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006172:	2300      	movs	r3, #0
 8006174:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006176:	f04f 33ff 	mov.w	r3, #4294967295
 800617a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d045      	beq.n	800620e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d002      	beq.n	8006190 <osThreadNew+0x48>
        name = attr->name;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699b      	ldr	r3, [r3, #24]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d002      	beq.n	800619e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d008      	beq.n	80061b6 <osThreadNew+0x6e>
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	2b38      	cmp	r3, #56	@ 0x38
 80061a8:	d805      	bhi.n	80061b6 <osThreadNew+0x6e>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f003 0301 	and.w	r3, r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <osThreadNew+0x72>
        return (NULL);
 80061b6:	2300      	movs	r3, #0
 80061b8:	e054      	b.n	8006264 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	695b      	ldr	r3, [r3, #20]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d003      	beq.n	80061ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	089b      	lsrs	r3, r3, #2
 80061c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d00e      	beq.n	80061f0 <osThreadNew+0xa8>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	2b5b      	cmp	r3, #91	@ 0x5b
 80061d8:	d90a      	bls.n	80061f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d006      	beq.n	80061f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	695b      	ldr	r3, [r3, #20]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d002      	beq.n	80061f0 <osThreadNew+0xa8>
        mem = 1;
 80061ea:	2301      	movs	r3, #1
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	e010      	b.n	8006212 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d10c      	bne.n	8006212 <osThreadNew+0xca>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d108      	bne.n	8006212 <osThreadNew+0xca>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d104      	bne.n	8006212 <osThreadNew+0xca>
          mem = 0;
 8006208:	2300      	movs	r3, #0
 800620a:	61bb      	str	r3, [r7, #24]
 800620c:	e001      	b.n	8006212 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800620e:	2300      	movs	r3, #0
 8006210:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b01      	cmp	r3, #1
 8006216:	d110      	bne.n	800623a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006220:	9202      	str	r2, [sp, #8]
 8006222:	9301      	str	r3, [sp, #4]
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	6a3a      	ldr	r2, [r7, #32]
 800622c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 fed8 	bl	8006fe4 <xTaskCreateStatic>
 8006234:	4603      	mov	r3, r0
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	e013      	b.n	8006262 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d110      	bne.n	8006262 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	b29a      	uxth	r2, r3
 8006244:	f107 0310 	add.w	r3, r7, #16
 8006248:	9301      	str	r3, [sp, #4]
 800624a:	69fb      	ldr	r3, [r7, #28]
 800624c:	9300      	str	r3, [sp, #0]
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 ff26 	bl	80070a4 <xTaskCreate>
 8006258:	4603      	mov	r3, r0
 800625a:	2b01      	cmp	r3, #1
 800625c:	d001      	beq.n	8006262 <osThreadNew+0x11a>
            hTask = NULL;
 800625e:	2300      	movs	r3, #0
 8006260:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006262:	693b      	ldr	r3, [r7, #16]
}
 8006264:	4618      	mov	r0, r3
 8006266:	3728      	adds	r7, #40	@ 0x28
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006274:	f3ef 8305 	mrs	r3, IPSR
 8006278:	60bb      	str	r3, [r7, #8]
  return(result);
 800627a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <osDelay+0x1c>
    stat = osErrorISR;
 8006280:	f06f 0305 	mvn.w	r3, #5
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e007      	b.n	8006298 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006288:	2300      	movs	r3, #0
 800628a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d002      	beq.n	8006298 <osDelay+0x2c>
      vTaskDelay(ticks);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f001 f84c 	bl	8007330 <vTaskDelay>
    }
  }

  return (stat);
 8006298:	68fb      	ldr	r3, [r7, #12]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f002 f99e 	bl	80085ec <pvTimerGetTimerID>
 80062b0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <TimerCallback+0x22>
    callb->func (callb->arg);
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	6852      	ldr	r2, [r2, #4]
 80062c0:	4610      	mov	r0, r2
 80062c2:	4798      	blx	r3
  }
}
 80062c4:	bf00      	nop
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b08c      	sub	sp, #48	@ 0x30
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	607a      	str	r2, [r7, #4]
 80062d6:	603b      	str	r3, [r7, #0]
 80062d8:	460b      	mov	r3, r1
 80062da:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80062dc:	2300      	movs	r3, #0
 80062de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062e0:	f3ef 8305 	mrs	r3, IPSR
 80062e4:	613b      	str	r3, [r7, #16]
  return(result);
 80062e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d163      	bne.n	80063b4 <osTimerNew+0xe8>
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d060      	beq.n	80063b4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80062f2:	2008      	movs	r0, #8
 80062f4:	f002 fbf2 	bl	8008adc <pvPortMalloc>
 80062f8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d059      	beq.n	80063b4 <osTimerNew+0xe8>
      callb->func = func;
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800630c:	7afb      	ldrb	r3, [r7, #11]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d102      	bne.n	8006318 <osTimerNew+0x4c>
        reload = pdFALSE;
 8006312:	2300      	movs	r3, #0
 8006314:	61fb      	str	r3, [r7, #28]
 8006316:	e001      	b.n	800631c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006318:	2301      	movs	r3, #1
 800631a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800631c:	f04f 33ff 	mov.w	r3, #4294967295
 8006320:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01c      	beq.n	8006366 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <osTimerNew+0x6e>
          name = attr->name;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d006      	beq.n	8006350 <osTimerNew+0x84>
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	2b2b      	cmp	r3, #43	@ 0x2b
 8006348:	d902      	bls.n	8006350 <osTimerNew+0x84>
          mem = 1;
 800634a:	2301      	movs	r3, #1
 800634c:	61bb      	str	r3, [r7, #24]
 800634e:	e00c      	b.n	800636a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d108      	bne.n	800636a <osTimerNew+0x9e>
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d104      	bne.n	800636a <osTimerNew+0x9e>
            mem = 0;
 8006360:	2300      	movs	r3, #0
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	e001      	b.n	800636a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8006366:	2300      	movs	r3, #0
 8006368:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d10c      	bne.n	800638a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	9301      	str	r3, [sp, #4]
 8006376:	4b12      	ldr	r3, [pc, #72]	@ (80063c0 <osTimerNew+0xf4>)
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	2101      	movs	r1, #1
 8006380:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006382:	f001 fda6 	bl	8007ed2 <xTimerCreateStatic>
 8006386:	6238      	str	r0, [r7, #32]
 8006388:	e00b      	b.n	80063a2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800638a:	69bb      	ldr	r3, [r7, #24]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d108      	bne.n	80063a2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8006390:	4b0b      	ldr	r3, [pc, #44]	@ (80063c0 <osTimerNew+0xf4>)
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	697b      	ldr	r3, [r7, #20]
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	2101      	movs	r1, #1
 800639a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800639c:	f001 fd78 	bl	8007e90 <xTimerCreate>
 80063a0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d105      	bne.n	80063b4 <osTimerNew+0xe8>
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d002      	beq.n	80063b4 <osTimerNew+0xe8>
        vPortFree (callb);
 80063ae:	6978      	ldr	r0, [r7, #20]
 80063b0:	f002 fc62 	bl	8008c78 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80063b4:	6a3b      	ldr	r3, [r7, #32]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3728      	adds	r7, #40	@ 0x28
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	080062a3 	.word	0x080062a3

080063c4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b088      	sub	sp, #32
 80063c8:	af02      	add	r7, sp, #8
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063d2:	f3ef 8305 	mrs	r3, IPSR
 80063d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80063d8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d003      	beq.n	80063e6 <osTimerStart+0x22>
    stat = osErrorISR;
 80063de:	f06f 0305 	mvn.w	r3, #5
 80063e2:	617b      	str	r3, [r7, #20]
 80063e4:	e017      	b.n	8006416 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d103      	bne.n	80063f4 <osTimerStart+0x30>
    stat = osErrorParameter;
 80063ec:	f06f 0303 	mvn.w	r3, #3
 80063f0:	617b      	str	r3, [r7, #20]
 80063f2:	e010      	b.n	8006416 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80063f4:	2300      	movs	r3, #0
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	2300      	movs	r3, #0
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	2104      	movs	r1, #4
 80063fe:	6938      	ldr	r0, [r7, #16]
 8006400:	f001 fde4 	bl	8007fcc <xTimerGenericCommand>
 8006404:	4603      	mov	r3, r0
 8006406:	2b01      	cmp	r3, #1
 8006408:	d102      	bne.n	8006410 <osTimerStart+0x4c>
      stat = osOK;
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e002      	b.n	8006416 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8006410:	f06f 0302 	mvn.w	r3, #2
 8006414:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006416:	697b      	ldr	r3, [r7, #20]
}
 8006418:	4618      	mov	r0, r3
 800641a:	3718      	adds	r7, #24
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4a07      	ldr	r2, [pc, #28]	@ (800644c <vApplicationGetIdleTaskMemory+0x2c>)
 8006430:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	4a06      	ldr	r2, [pc, #24]	@ (8006450 <vApplicationGetIdleTaskMemory+0x30>)
 8006436:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2280      	movs	r2, #128	@ 0x80
 800643c:	601a      	str	r2, [r3, #0]
}
 800643e:	bf00      	nop
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	200002f8 	.word	0x200002f8
 8006450:	20000354 	.word	0x20000354

08006454 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	4a07      	ldr	r2, [pc, #28]	@ (8006480 <vApplicationGetTimerTaskMemory+0x2c>)
 8006464:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4a06      	ldr	r2, [pc, #24]	@ (8006484 <vApplicationGetTimerTaskMemory+0x30>)
 800646a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006472:	601a      	str	r2, [r3, #0]
}
 8006474:	bf00      	nop
 8006476:	3714      	adds	r7, #20
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	20000554 	.word	0x20000554
 8006484:	200005b0 	.word	0x200005b0

08006488 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f103 0208 	add.w	r2, r3, #8
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f04f 32ff 	mov.w	r2, #4294967295
 80064a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f103 0208 	add.w	r2, r3, #8
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f103 0208 	add.w	r2, r3, #8
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064bc:	bf00      	nop
 80064be:	370c      	adds	r7, #12
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064c8:	b480      	push	{r7}
 80064ca:	b083      	sub	sp, #12
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064e2:	b480      	push	{r7}
 80064e4:	b085      	sub	sp, #20
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	6078      	str	r0, [r7, #4]
 80064ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68fa      	ldr	r2, [r7, #12]
 80064f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	689a      	ldr	r2, [r3, #8]
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	689b      	ldr	r3, [r3, #8]
 8006504:	683a      	ldr	r2, [r7, #0]
 8006506:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	683a      	ldr	r2, [r7, #0]
 800650c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	601a      	str	r2, [r3, #0]
}
 800651e:	bf00      	nop
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800652a:	b480      	push	{r7}
 800652c:	b085      	sub	sp, #20
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
 8006532:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006540:	d103      	bne.n	800654a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	e00c      	b.n	8006564 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3308      	adds	r3, #8
 800654e:	60fb      	str	r3, [r7, #12]
 8006550:	e002      	b.n	8006558 <vListInsert+0x2e>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	60fb      	str	r3, [r7, #12]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	429a      	cmp	r2, r3
 8006562:	d2f6      	bcs.n	8006552 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	683a      	ldr	r2, [r7, #0]
 800657e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	601a      	str	r2, [r3, #0]
}
 8006590:	bf00      	nop
 8006592:	3714      	adds	r7, #20
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	6892      	ldr	r2, [r2, #8]
 80065b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	689b      	ldr	r3, [r3, #8]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	6852      	ldr	r2, [r2, #4]
 80065bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d103      	bne.n	80065d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689a      	ldr	r2, [r3, #8]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	1e5a      	subs	r2, r3, #1
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3714      	adds	r7, #20
 80065e8:	46bd      	mov	sp, r7
 80065ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ee:	4770      	bx	lr

080065f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
 80065f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d10b      	bne.n	800661c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006608:	f383 8811 	msr	BASEPRI, r3
 800660c:	f3bf 8f6f 	isb	sy
 8006610:	f3bf 8f4f 	dsb	sy
 8006614:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006616:	bf00      	nop
 8006618:	bf00      	nop
 800661a:	e7fd      	b.n	8006618 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800661c:	f002 f93c 	bl	8008898 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006628:	68f9      	ldr	r1, [r7, #12]
 800662a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800662c:	fb01 f303 	mul.w	r3, r1, r3
 8006630:	441a      	add	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664c:	3b01      	subs	r3, #1
 800664e:	68f9      	ldr	r1, [r7, #12]
 8006650:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006652:	fb01 f303 	mul.w	r3, r1, r3
 8006656:	441a      	add	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	22ff      	movs	r2, #255	@ 0xff
 8006660:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	22ff      	movs	r2, #255	@ 0xff
 8006668:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d114      	bne.n	800669c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d01a      	beq.n	80066b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3310      	adds	r3, #16
 800667e:	4618      	mov	r0, r3
 8006680:	f001 f91a 	bl	80078b8 <xTaskRemoveFromEventList>
 8006684:	4603      	mov	r3, r0
 8006686:	2b00      	cmp	r3, #0
 8006688:	d012      	beq.n	80066b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800668a:	4b0d      	ldr	r3, [pc, #52]	@ (80066c0 <xQueueGenericReset+0xd0>)
 800668c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	f3bf 8f4f 	dsb	sy
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	e009      	b.n	80066b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3310      	adds	r3, #16
 80066a0:	4618      	mov	r0, r3
 80066a2:	f7ff fef1 	bl	8006488 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3324      	adds	r3, #36	@ 0x24
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7ff feec 	bl	8006488 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066b0:	f002 f924 	bl	80088fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066b4:	2301      	movs	r3, #1
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3710      	adds	r7, #16
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	e000ed04 	.word	0xe000ed04

080066c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b08e      	sub	sp, #56	@ 0x38
 80066c8:	af02      	add	r7, sp, #8
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10b      	bne.n	80066f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80066d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	f3bf 8f6f 	isb	sy
 80066e4:	f3bf 8f4f 	dsb	sy
 80066e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80066ea:	bf00      	nop
 80066ec:	bf00      	nop
 80066ee:	e7fd      	b.n	80066ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d10b      	bne.n	800670e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80066f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fa:	f383 8811 	msr	BASEPRI, r3
 80066fe:	f3bf 8f6f 	isb	sy
 8006702:	f3bf 8f4f 	dsb	sy
 8006706:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006708:	bf00      	nop
 800670a:	bf00      	nop
 800670c:	e7fd      	b.n	800670a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <xQueueGenericCreateStatic+0x56>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d001      	beq.n	800671e <xQueueGenericCreateStatic+0x5a>
 800671a:	2301      	movs	r3, #1
 800671c:	e000      	b.n	8006720 <xQueueGenericCreateStatic+0x5c>
 800671e:	2300      	movs	r3, #0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10b      	bne.n	800673c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006728:	f383 8811 	msr	BASEPRI, r3
 800672c:	f3bf 8f6f 	isb	sy
 8006730:	f3bf 8f4f 	dsb	sy
 8006734:	623b      	str	r3, [r7, #32]
}
 8006736:	bf00      	nop
 8006738:	bf00      	nop
 800673a:	e7fd      	b.n	8006738 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d102      	bne.n	8006748 <xQueueGenericCreateStatic+0x84>
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <xQueueGenericCreateStatic+0x88>
 8006748:	2301      	movs	r3, #1
 800674a:	e000      	b.n	800674e <xQueueGenericCreateStatic+0x8a>
 800674c:	2300      	movs	r3, #0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d10b      	bne.n	800676a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006756:	f383 8811 	msr	BASEPRI, r3
 800675a:	f3bf 8f6f 	isb	sy
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	61fb      	str	r3, [r7, #28]
}
 8006764:	bf00      	nop
 8006766:	bf00      	nop
 8006768:	e7fd      	b.n	8006766 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800676a:	2350      	movs	r3, #80	@ 0x50
 800676c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b50      	cmp	r3, #80	@ 0x50
 8006772:	d00b      	beq.n	800678c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	61bb      	str	r3, [r7, #24]
}
 8006786:	bf00      	nop
 8006788:	bf00      	nop
 800678a:	e7fd      	b.n	8006788 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800678c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00d      	beq.n	80067b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679a:	2201      	movs	r2, #1
 800679c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80067a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80067a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067a6:	9300      	str	r3, [sp, #0]
 80067a8:	4613      	mov	r3, r2
 80067aa:	687a      	ldr	r2, [r7, #4]
 80067ac:	68b9      	ldr	r1, [r7, #8]
 80067ae:	68f8      	ldr	r0, [r7, #12]
 80067b0:	f000 f805 	bl	80067be <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80067b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3730      	adds	r7, #48	@ 0x30
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b084      	sub	sp, #16
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	607a      	str	r2, [r7, #4]
 80067ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d103      	bne.n	80067da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80067d2:	69bb      	ldr	r3, [r7, #24]
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	e002      	b.n	80067e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	687a      	ldr	r2, [r7, #4]
 80067de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80067ec:	2101      	movs	r1, #1
 80067ee:	69b8      	ldr	r0, [r7, #24]
 80067f0:	f7ff fefe 	bl	80065f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80067f4:	69bb      	ldr	r3, [r7, #24]
 80067f6:	78fa      	ldrb	r2, [r7, #3]
 80067f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80067fc:	bf00      	nop
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08e      	sub	sp, #56	@ 0x38
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006812:	2300      	movs	r3, #0
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10b      	bne.n	8006838 <xQueueGenericSend+0x34>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	e7fd      	b.n	8006834 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d103      	bne.n	8006846 <xQueueGenericSend+0x42>
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	d101      	bne.n	800684a <xQueueGenericSend+0x46>
 8006846:	2301      	movs	r3, #1
 8006848:	e000      	b.n	800684c <xQueueGenericSend+0x48>
 800684a:	2300      	movs	r3, #0
 800684c:	2b00      	cmp	r3, #0
 800684e:	d10b      	bne.n	8006868 <xQueueGenericSend+0x64>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	e7fd      	b.n	8006864 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	2b02      	cmp	r3, #2
 800686c:	d103      	bne.n	8006876 <xQueueGenericSend+0x72>
 800686e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006870:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006872:	2b01      	cmp	r3, #1
 8006874:	d101      	bne.n	800687a <xQueueGenericSend+0x76>
 8006876:	2301      	movs	r3, #1
 8006878:	e000      	b.n	800687c <xQueueGenericSend+0x78>
 800687a:	2300      	movs	r3, #0
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10b      	bne.n	8006898 <xQueueGenericSend+0x94>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	623b      	str	r3, [r7, #32]
}
 8006892:	bf00      	nop
 8006894:	bf00      	nop
 8006896:	e7fd      	b.n	8006894 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006898:	f001 f9ce 	bl	8007c38 <xTaskGetSchedulerState>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d102      	bne.n	80068a8 <xQueueGenericSend+0xa4>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <xQueueGenericSend+0xa8>
 80068a8:	2301      	movs	r3, #1
 80068aa:	e000      	b.n	80068ae <xQueueGenericSend+0xaa>
 80068ac:	2300      	movs	r3, #0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10b      	bne.n	80068ca <xQueueGenericSend+0xc6>
	__asm volatile
 80068b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b6:	f383 8811 	msr	BASEPRI, r3
 80068ba:	f3bf 8f6f 	isb	sy
 80068be:	f3bf 8f4f 	dsb	sy
 80068c2:	61fb      	str	r3, [r7, #28]
}
 80068c4:	bf00      	nop
 80068c6:	bf00      	nop
 80068c8:	e7fd      	b.n	80068c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068ca:	f001 ffe5 	bl	8008898 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d302      	bcc.n	80068e0 <xQueueGenericSend+0xdc>
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d129      	bne.n	8006934 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068e6:	f000 fa0f 	bl	8006d08 <prvCopyDataToQueue>
 80068ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80068ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d010      	beq.n	8006916 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80068f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068f6:	3324      	adds	r3, #36	@ 0x24
 80068f8:	4618      	mov	r0, r3
 80068fa:	f000 ffdd 	bl	80078b8 <xTaskRemoveFromEventList>
 80068fe:	4603      	mov	r3, r0
 8006900:	2b00      	cmp	r3, #0
 8006902:	d013      	beq.n	800692c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006904:	4b3f      	ldr	r3, [pc, #252]	@ (8006a04 <xQueueGenericSend+0x200>)
 8006906:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800690a:	601a      	str	r2, [r3, #0]
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	e00a      	b.n	800692c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006918:	2b00      	cmp	r3, #0
 800691a:	d007      	beq.n	800692c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800691c:	4b39      	ldr	r3, [pc, #228]	@ (8006a04 <xQueueGenericSend+0x200>)
 800691e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006922:	601a      	str	r2, [r3, #0]
 8006924:	f3bf 8f4f 	dsb	sy
 8006928:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800692c:	f001 ffe6 	bl	80088fc <vPortExitCritical>
				return pdPASS;
 8006930:	2301      	movs	r3, #1
 8006932:	e063      	b.n	80069fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d103      	bne.n	8006942 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800693a:	f001 ffdf 	bl	80088fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800693e:	2300      	movs	r3, #0
 8006940:	e05c      	b.n	80069fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006948:	f107 0314 	add.w	r3, r7, #20
 800694c:	4618      	mov	r0, r3
 800694e:	f001 f817 	bl	8007980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006952:	2301      	movs	r3, #1
 8006954:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006956:	f001 ffd1 	bl	80088fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800695a:	f000 fd87 	bl	800746c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800695e:	f001 ff9b 	bl	8008898 <vPortEnterCritical>
 8006962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006964:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006968:	b25b      	sxtb	r3, r3
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d103      	bne.n	8006978 <xQueueGenericSend+0x174>
 8006970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800697e:	b25b      	sxtb	r3, r3
 8006980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006984:	d103      	bne.n	800698e <xQueueGenericSend+0x18a>
 8006986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006988:	2200      	movs	r2, #0
 800698a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800698e:	f001 ffb5 	bl	80088fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006992:	1d3a      	adds	r2, r7, #4
 8006994:	f107 0314 	add.w	r3, r7, #20
 8006998:	4611      	mov	r1, r2
 800699a:	4618      	mov	r0, r3
 800699c:	f001 f806 	bl	80079ac <xTaskCheckForTimeOut>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d124      	bne.n	80069f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80069a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069a8:	f000 faa6 	bl	8006ef8 <prvIsQueueFull>
 80069ac:	4603      	mov	r3, r0
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d018      	beq.n	80069e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80069b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b4:	3310      	adds	r3, #16
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f000 ff2a 	bl	8007814 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80069c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069c2:	f000 fa31 	bl	8006e28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80069c6:	f000 fd5f 	bl	8007488 <xTaskResumeAll>
 80069ca:	4603      	mov	r3, r0
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f47f af7c 	bne.w	80068ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80069d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006a04 <xQueueGenericSend+0x200>)
 80069d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069d8:	601a      	str	r2, [r3, #0]
 80069da:	f3bf 8f4f 	dsb	sy
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	e772      	b.n	80068ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80069e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069e6:	f000 fa1f 	bl	8006e28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069ea:	f000 fd4d 	bl	8007488 <xTaskResumeAll>
 80069ee:	e76c      	b.n	80068ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80069f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069f2:	f000 fa19 	bl	8006e28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069f6:	f000 fd47 	bl	8007488 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80069fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3738      	adds	r7, #56	@ 0x38
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b090      	sub	sp, #64	@ 0x40
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	607a      	str	r2, [r7, #4]
 8006a14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d10b      	bne.n	8006a38 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a24:	f383 8811 	msr	BASEPRI, r3
 8006a28:	f3bf 8f6f 	isb	sy
 8006a2c:	f3bf 8f4f 	dsb	sy
 8006a30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006a32:	bf00      	nop
 8006a34:	bf00      	nop
 8006a36:	e7fd      	b.n	8006a34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d103      	bne.n	8006a46 <xQueueGenericSendFromISR+0x3e>
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d101      	bne.n	8006a4a <xQueueGenericSendFromISR+0x42>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e000      	b.n	8006a4c <xQueueGenericSendFromISR+0x44>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d10b      	bne.n	8006a68 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a54:	f383 8811 	msr	BASEPRI, r3
 8006a58:	f3bf 8f6f 	isb	sy
 8006a5c:	f3bf 8f4f 	dsb	sy
 8006a60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006a62:	bf00      	nop
 8006a64:	bf00      	nop
 8006a66:	e7fd      	b.n	8006a64 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2b02      	cmp	r3, #2
 8006a6c:	d103      	bne.n	8006a76 <xQueueGenericSendFromISR+0x6e>
 8006a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d101      	bne.n	8006a7a <xQueueGenericSendFromISR+0x72>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <xQueueGenericSendFromISR+0x74>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10b      	bne.n	8006a98 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a84:	f383 8811 	msr	BASEPRI, r3
 8006a88:	f3bf 8f6f 	isb	sy
 8006a8c:	f3bf 8f4f 	dsb	sy
 8006a90:	623b      	str	r3, [r7, #32]
}
 8006a92:	bf00      	nop
 8006a94:	bf00      	nop
 8006a96:	e7fd      	b.n	8006a94 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006a98:	f001 ffde 	bl	8008a58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006a9c:	f3ef 8211 	mrs	r2, BASEPRI
 8006aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa4:	f383 8811 	msr	BASEPRI, r3
 8006aa8:	f3bf 8f6f 	isb	sy
 8006aac:	f3bf 8f4f 	dsb	sy
 8006ab0:	61fa      	str	r2, [r7, #28]
 8006ab2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006ab6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d302      	bcc.n	8006aca <xQueueGenericSendFromISR+0xc2>
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b02      	cmp	r3, #2
 8006ac8:	d12f      	bne.n	8006b2a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006aca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006acc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ad0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006ae0:	f000 f912 	bl	8006d08 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ae4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006aec:	d112      	bne.n	8006b14 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d016      	beq.n	8006b24 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006af6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af8:	3324      	adds	r3, #36	@ 0x24
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fedc 	bl	80078b8 <xTaskRemoveFromEventList>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00e      	beq.n	8006b24 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00b      	beq.n	8006b24 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2201      	movs	r2, #1
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e007      	b.n	8006b24 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006b14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006b18:	3301      	adds	r3, #1
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	b25a      	sxtb	r2, r3
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006b24:	2301      	movs	r3, #1
 8006b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006b28:	e001      	b.n	8006b2e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b30:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006b38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006b3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3740      	adds	r7, #64	@ 0x40
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b08c      	sub	sp, #48	@ 0x30
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006b50:	2300      	movs	r3, #0
 8006b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d10b      	bne.n	8006b76 <xQueueReceive+0x32>
	__asm volatile
 8006b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b62:	f383 8811 	msr	BASEPRI, r3
 8006b66:	f3bf 8f6f 	isb	sy
 8006b6a:	f3bf 8f4f 	dsb	sy
 8006b6e:	623b      	str	r3, [r7, #32]
}
 8006b70:	bf00      	nop
 8006b72:	bf00      	nop
 8006b74:	e7fd      	b.n	8006b72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d103      	bne.n	8006b84 <xQueueReceive+0x40>
 8006b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <xQueueReceive+0x44>
 8006b84:	2301      	movs	r3, #1
 8006b86:	e000      	b.n	8006b8a <xQueueReceive+0x46>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10b      	bne.n	8006ba6 <xQueueReceive+0x62>
	__asm volatile
 8006b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b92:	f383 8811 	msr	BASEPRI, r3
 8006b96:	f3bf 8f6f 	isb	sy
 8006b9a:	f3bf 8f4f 	dsb	sy
 8006b9e:	61fb      	str	r3, [r7, #28]
}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	e7fd      	b.n	8006ba2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ba6:	f001 f847 	bl	8007c38 <xTaskGetSchedulerState>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d102      	bne.n	8006bb6 <xQueueReceive+0x72>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <xQueueReceive+0x76>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <xQueueReceive+0x78>
 8006bba:	2300      	movs	r3, #0
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10b      	bne.n	8006bd8 <xQueueReceive+0x94>
	__asm volatile
 8006bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc4:	f383 8811 	msr	BASEPRI, r3
 8006bc8:	f3bf 8f6f 	isb	sy
 8006bcc:	f3bf 8f4f 	dsb	sy
 8006bd0:	61bb      	str	r3, [r7, #24]
}
 8006bd2:	bf00      	nop
 8006bd4:	bf00      	nop
 8006bd6:	e7fd      	b.n	8006bd4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006bd8:	f001 fe5e 	bl	8008898 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d01f      	beq.n	8006c28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006be8:	68b9      	ldr	r1, [r7, #8]
 8006bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006bec:	f000 f8f6 	bl	8006ddc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bf2:	1e5a      	subs	r2, r3, #1
 8006bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00f      	beq.n	8006c20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c02:	3310      	adds	r3, #16
 8006c04:	4618      	mov	r0, r3
 8006c06:	f000 fe57 	bl	80078b8 <xTaskRemoveFromEventList>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d007      	beq.n	8006c20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006c10:	4b3c      	ldr	r3, [pc, #240]	@ (8006d04 <xQueueReceive+0x1c0>)
 8006c12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c16:	601a      	str	r2, [r3, #0]
 8006c18:	f3bf 8f4f 	dsb	sy
 8006c1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006c20:	f001 fe6c 	bl	80088fc <vPortExitCritical>
				return pdPASS;
 8006c24:	2301      	movs	r3, #1
 8006c26:	e069      	b.n	8006cfc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d103      	bne.n	8006c36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c2e:	f001 fe65 	bl	80088fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e062      	b.n	8006cfc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d106      	bne.n	8006c4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c3c:	f107 0310 	add.w	r3, r7, #16
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 fe9d 	bl	8007980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c46:	2301      	movs	r3, #1
 8006c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c4a:	f001 fe57 	bl	80088fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c4e:	f000 fc0d 	bl	800746c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c52:	f001 fe21 	bl	8008898 <vPortEnterCritical>
 8006c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006c5c:	b25b      	sxtb	r3, r3
 8006c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c62:	d103      	bne.n	8006c6c <xQueueReceive+0x128>
 8006c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c66:	2200      	movs	r2, #0
 8006c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006c72:	b25b      	sxtb	r3, r3
 8006c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c78:	d103      	bne.n	8006c82 <xQueueReceive+0x13e>
 8006c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006c82:	f001 fe3b 	bl	80088fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c86:	1d3a      	adds	r2, r7, #4
 8006c88:	f107 0310 	add.w	r3, r7, #16
 8006c8c:	4611      	mov	r1, r2
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f000 fe8c 	bl	80079ac <xTaskCheckForTimeOut>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d123      	bne.n	8006ce2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c9c:	f000 f916 	bl	8006ecc <prvIsQueueEmpty>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d017      	beq.n	8006cd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca8:	3324      	adds	r3, #36	@ 0x24
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f000 fdb0 	bl	8007814 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006cb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cb6:	f000 f8b7 	bl	8006e28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006cba:	f000 fbe5 	bl	8007488 <xTaskResumeAll>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d189      	bne.n	8006bd8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006d04 <xQueueReceive+0x1c0>)
 8006cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cca:	601a      	str	r2, [r3, #0]
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	f3bf 8f6f 	isb	sy
 8006cd4:	e780      	b.n	8006bd8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cd8:	f000 f8a6 	bl	8006e28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cdc:	f000 fbd4 	bl	8007488 <xTaskResumeAll>
 8006ce0:	e77a      	b.n	8006bd8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ce2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ce4:	f000 f8a0 	bl	8006e28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ce8:	f000 fbce 	bl	8007488 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006cec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cee:	f000 f8ed 	bl	8006ecc <prvIsQueueEmpty>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f43f af6f 	beq.w	8006bd8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006cfa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3730      	adds	r7, #48	@ 0x30
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	e000ed04 	.word	0xe000ed04

08006d08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d14:	2300      	movs	r3, #0
 8006d16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d10d      	bne.n	8006d42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d14d      	bne.n	8006dca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	4618      	mov	r0, r3
 8006d34:	f000 ff9e 	bl	8007c74 <xTaskPriorityDisinherit>
 8006d38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	609a      	str	r2, [r3, #8]
 8006d40:	e043      	b.n	8006dca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d119      	bne.n	8006d7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	6858      	ldr	r0, [r3, #4]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d50:	461a      	mov	r2, r3
 8006d52:	68b9      	ldr	r1, [r7, #8]
 8006d54:	f002 f8dc 	bl	8008f10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685a      	ldr	r2, [r3, #4]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d60:	441a      	add	r2, r3
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	685a      	ldr	r2, [r3, #4]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d32b      	bcc.n	8006dca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	605a      	str	r2, [r3, #4]
 8006d7a:	e026      	b.n	8006dca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	68d8      	ldr	r0, [r3, #12]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d84:	461a      	mov	r2, r3
 8006d86:	68b9      	ldr	r1, [r7, #8]
 8006d88:	f002 f8c2 	bl	8008f10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	68da      	ldr	r2, [r3, #12]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d94:	425b      	negs	r3, r3
 8006d96:	441a      	add	r2, r3
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d207      	bcs.n	8006db8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db0:	425b      	negs	r3, r3
 8006db2:	441a      	add	r2, r3
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	d105      	bne.n	8006dca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d002      	beq.n	8006dca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006dca:	693b      	ldr	r3, [r7, #16]
 8006dcc:	1c5a      	adds	r2, r3, #1
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006dd2:	697b      	ldr	r3, [r7, #20]
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3718      	adds	r7, #24
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d018      	beq.n	8006e20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68da      	ldr	r2, [r3, #12]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006df6:	441a      	add	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68da      	ldr	r2, [r3, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d303      	bcc.n	8006e10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681a      	ldr	r2, [r3, #0]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	68d9      	ldr	r1, [r3, #12]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6838      	ldr	r0, [r7, #0]
 8006e1c:	f002 f878 	bl	8008f10 <memcpy>
	}
}
 8006e20:	bf00      	nop
 8006e22:	3708      	adds	r7, #8
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e30:	f001 fd32 	bl	8008898 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e3c:	e011      	b.n	8006e62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d012      	beq.n	8006e6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	3324      	adds	r3, #36	@ 0x24
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 fd34 	bl	80078b8 <xTaskRemoveFromEventList>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e56:	f000 fe0d 	bl	8007a74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	dce9      	bgt.n	8006e3e <prvUnlockQueue+0x16>
 8006e6a:	e000      	b.n	8006e6e <prvUnlockQueue+0x46>
					break;
 8006e6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	22ff      	movs	r2, #255	@ 0xff
 8006e72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006e76:	f001 fd41 	bl	80088fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006e7a:	f001 fd0d 	bl	8008898 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006e86:	e011      	b.n	8006eac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d012      	beq.n	8006eb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	3310      	adds	r3, #16
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 fd0f 	bl	80078b8 <xTaskRemoveFromEventList>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ea0:	f000 fde8 	bl	8007a74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	dce9      	bgt.n	8006e88 <prvUnlockQueue+0x60>
 8006eb4:	e000      	b.n	8006eb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006eb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	22ff      	movs	r2, #255	@ 0xff
 8006ebc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ec0:	f001 fd1c 	bl	80088fc <vPortExitCritical>
}
 8006ec4:	bf00      	nop
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ed4:	f001 fce0 	bl	8008898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d102      	bne.n	8006ee6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e001      	b.n	8006eea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006eea:	f001 fd07 	bl	80088fc <vPortExitCritical>

	return xReturn;
 8006eee:	68fb      	ldr	r3, [r7, #12]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f00:	f001 fcca 	bl	8008898 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d102      	bne.n	8006f16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f10:	2301      	movs	r3, #1
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	e001      	b.n	8006f1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f16:	2300      	movs	r3, #0
 8006f18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f1a:	f001 fcef 	bl	80088fc <vPortExitCritical>

	return xReturn;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f32:	2300      	movs	r3, #0
 8006f34:	60fb      	str	r3, [r7, #12]
 8006f36:	e014      	b.n	8006f62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006f38:	4a0f      	ldr	r2, [pc, #60]	@ (8006f78 <vQueueAddToRegistry+0x50>)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d10b      	bne.n	8006f5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006f44:	490c      	ldr	r1, [pc, #48]	@ (8006f78 <vQueueAddToRegistry+0x50>)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006f4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006f78 <vQueueAddToRegistry+0x50>)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	4413      	add	r3, r2
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006f5a:	e006      	b.n	8006f6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	2b07      	cmp	r3, #7
 8006f66:	d9e7      	bls.n	8006f38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006f68:	bf00      	nop
 8006f6a:	bf00      	nop
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
 8006f76:	bf00      	nop
 8006f78:	200009b0 	.word	0x200009b0

08006f7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b086      	sub	sp, #24
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006f8c:	f001 fc84 	bl	8008898 <vPortEnterCritical>
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f96:	b25b      	sxtb	r3, r3
 8006f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f9c:	d103      	bne.n	8006fa6 <vQueueWaitForMessageRestricted+0x2a>
 8006f9e:	697b      	ldr	r3, [r7, #20]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fac:	b25b      	sxtb	r3, r3
 8006fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb2:	d103      	bne.n	8006fbc <vQueueWaitForMessageRestricted+0x40>
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fbc:	f001 fc9e 	bl	80088fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d106      	bne.n	8006fd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	3324      	adds	r3, #36	@ 0x24
 8006fcc:	687a      	ldr	r2, [r7, #4]
 8006fce:	68b9      	ldr	r1, [r7, #8]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f000 fc45 	bl	8007860 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006fd6:	6978      	ldr	r0, [r7, #20]
 8006fd8:	f7ff ff26 	bl	8006e28 <prvUnlockQueue>
	}
 8006fdc:	bf00      	nop
 8006fde:	3718      	adds	r7, #24
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08e      	sub	sp, #56	@ 0x38
 8006fe8:	af04      	add	r7, sp, #16
 8006fea:	60f8      	str	r0, [r7, #12]
 8006fec:	60b9      	str	r1, [r7, #8]
 8006fee:	607a      	str	r2, [r7, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10b      	bne.n	8007010 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	623b      	str	r3, [r7, #32]
}
 800700a:	bf00      	nop
 800700c:	bf00      	nop
 800700e:	e7fd      	b.n	800700c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007012:	2b00      	cmp	r3, #0
 8007014:	d10b      	bne.n	800702e <xTaskCreateStatic+0x4a>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	61fb      	str	r3, [r7, #28]
}
 8007028:	bf00      	nop
 800702a:	bf00      	nop
 800702c:	e7fd      	b.n	800702a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800702e:	235c      	movs	r3, #92	@ 0x5c
 8007030:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b5c      	cmp	r3, #92	@ 0x5c
 8007036:	d00b      	beq.n	8007050 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	61bb      	str	r3, [r7, #24]
}
 800704a:	bf00      	nop
 800704c:	bf00      	nop
 800704e:	e7fd      	b.n	800704c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007050:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007054:	2b00      	cmp	r3, #0
 8007056:	d01e      	beq.n	8007096 <xTaskCreateStatic+0xb2>
 8007058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800705a:	2b00      	cmp	r3, #0
 800705c:	d01b      	beq.n	8007096 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800705e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007060:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007066:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	2202      	movs	r2, #2
 800706c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007070:	2300      	movs	r3, #0
 8007072:	9303      	str	r3, [sp, #12]
 8007074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007076:	9302      	str	r3, [sp, #8]
 8007078:	f107 0314 	add.w	r3, r7, #20
 800707c:	9301      	str	r3, [sp, #4]
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	9300      	str	r3, [sp, #0]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	687a      	ldr	r2, [r7, #4]
 8007086:	68b9      	ldr	r1, [r7, #8]
 8007088:	68f8      	ldr	r0, [r7, #12]
 800708a:	f000 f850 	bl	800712e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800708e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007090:	f000 f8de 	bl	8007250 <prvAddNewTaskToReadyList>
 8007094:	e001      	b.n	800709a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007096:	2300      	movs	r3, #0
 8007098:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800709a:	697b      	ldr	r3, [r7, #20]
	}
 800709c:	4618      	mov	r0, r3
 800709e:	3728      	adds	r7, #40	@ 0x28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b08c      	sub	sp, #48	@ 0x30
 80070a8:	af04      	add	r7, sp, #16
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	603b      	str	r3, [r7, #0]
 80070b0:	4613      	mov	r3, r2
 80070b2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80070b4:	88fb      	ldrh	r3, [r7, #6]
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4618      	mov	r0, r3
 80070ba:	f001 fd0f 	bl	8008adc <pvPortMalloc>
 80070be:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d00e      	beq.n	80070e4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80070c6:	205c      	movs	r0, #92	@ 0x5c
 80070c8:	f001 fd08 	bl	8008adc <pvPortMalloc>
 80070cc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	697a      	ldr	r2, [r7, #20]
 80070d8:	631a      	str	r2, [r3, #48]	@ 0x30
 80070da:	e005      	b.n	80070e8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80070dc:	6978      	ldr	r0, [r7, #20]
 80070de:	f001 fdcb 	bl	8008c78 <vPortFree>
 80070e2:	e001      	b.n	80070e8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80070e4:	2300      	movs	r3, #0
 80070e6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d017      	beq.n	800711e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80070ee:	69fb      	ldr	r3, [r7, #28]
 80070f0:	2200      	movs	r2, #0
 80070f2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80070f6:	88fa      	ldrh	r2, [r7, #6]
 80070f8:	2300      	movs	r3, #0
 80070fa:	9303      	str	r3, [sp, #12]
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	9302      	str	r3, [sp, #8]
 8007100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007102:	9301      	str	r3, [sp, #4]
 8007104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	68b9      	ldr	r1, [r7, #8]
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 f80e 	bl	800712e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007112:	69f8      	ldr	r0, [r7, #28]
 8007114:	f000 f89c 	bl	8007250 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007118:	2301      	movs	r3, #1
 800711a:	61bb      	str	r3, [r7, #24]
 800711c:	e002      	b.n	8007124 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800711e:	f04f 33ff 	mov.w	r3, #4294967295
 8007122:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007124:	69bb      	ldr	r3, [r7, #24]
	}
 8007126:	4618      	mov	r0, r3
 8007128:	3720      	adds	r7, #32
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b088      	sub	sp, #32
 8007132:	af00      	add	r7, sp, #0
 8007134:	60f8      	str	r0, [r7, #12]
 8007136:	60b9      	str	r1, [r7, #8]
 8007138:	607a      	str	r2, [r7, #4]
 800713a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800713c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	461a      	mov	r2, r3
 8007146:	21a5      	movs	r1, #165	@ 0xa5
 8007148:	f001 feb6 	bl	8008eb8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800714c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800714e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007156:	3b01      	subs	r3, #1
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4413      	add	r3, r2
 800715c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	f023 0307 	bic.w	r3, r3, #7
 8007164:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007166:	69bb      	ldr	r3, [r7, #24]
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00b      	beq.n	8007188 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	617b      	str	r3, [r7, #20]
}
 8007182:	bf00      	nop
 8007184:	bf00      	nop
 8007186:	e7fd      	b.n	8007184 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d01f      	beq.n	80071ce <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800718e:	2300      	movs	r3, #0
 8007190:	61fb      	str	r3, [r7, #28]
 8007192:	e012      	b.n	80071ba <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	69fb      	ldr	r3, [r7, #28]
 8007198:	4413      	add	r3, r2
 800719a:	7819      	ldrb	r1, [r3, #0]
 800719c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	4413      	add	r3, r2
 80071a2:	3334      	adds	r3, #52	@ 0x34
 80071a4:	460a      	mov	r2, r1
 80071a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80071a8:	68ba      	ldr	r2, [r7, #8]
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	4413      	add	r3, r2
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d006      	beq.n	80071c2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	3301      	adds	r3, #1
 80071b8:	61fb      	str	r3, [r7, #28]
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	2b0f      	cmp	r3, #15
 80071be:	d9e9      	bls.n	8007194 <prvInitialiseNewTask+0x66>
 80071c0:	e000      	b.n	80071c4 <prvInitialiseNewTask+0x96>
			{
				break;
 80071c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80071c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c6:	2200      	movs	r2, #0
 80071c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80071cc:	e003      	b.n	80071d6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80071ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80071d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d8:	2b37      	cmp	r3, #55	@ 0x37
 80071da:	d901      	bls.n	80071e0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80071dc:	2337      	movs	r3, #55	@ 0x37
 80071de:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80071e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071e4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80071e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80071ea:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80071ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ee:	2200      	movs	r2, #0
 80071f0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80071f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071f4:	3304      	adds	r3, #4
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff f966 	bl	80064c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80071fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fe:	3318      	adds	r3, #24
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff f961 	bl	80064c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800720a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800720c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007214:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800721a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800721c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800721e:	2200      	movs	r2, #0
 8007220:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007224:	2200      	movs	r2, #0
 8007226:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	68f9      	ldr	r1, [r7, #12]
 800722e:	69b8      	ldr	r0, [r7, #24]
 8007230:	f001 f9fe 	bl	8008630 <pxPortInitialiseStack>
 8007234:	4602      	mov	r2, r0
 8007236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007238:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800723a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007244:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007246:	bf00      	nop
 8007248:	3720      	adds	r7, #32
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
	...

08007250 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b082      	sub	sp, #8
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007258:	f001 fb1e 	bl	8008898 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800725c:	4b2d      	ldr	r3, [pc, #180]	@ (8007314 <prvAddNewTaskToReadyList+0xc4>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3301      	adds	r3, #1
 8007262:	4a2c      	ldr	r2, [pc, #176]	@ (8007314 <prvAddNewTaskToReadyList+0xc4>)
 8007264:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007266:	4b2c      	ldr	r3, [pc, #176]	@ (8007318 <prvAddNewTaskToReadyList+0xc8>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d109      	bne.n	8007282 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800726e:	4a2a      	ldr	r2, [pc, #168]	@ (8007318 <prvAddNewTaskToReadyList+0xc8>)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007274:	4b27      	ldr	r3, [pc, #156]	@ (8007314 <prvAddNewTaskToReadyList+0xc4>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d110      	bne.n	800729e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800727c:	f000 fc1e 	bl	8007abc <prvInitialiseTaskLists>
 8007280:	e00d      	b.n	800729e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007282:	4b26      	ldr	r3, [pc, #152]	@ (800731c <prvAddNewTaskToReadyList+0xcc>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d109      	bne.n	800729e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800728a:	4b23      	ldr	r3, [pc, #140]	@ (8007318 <prvAddNewTaskToReadyList+0xc8>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007294:	429a      	cmp	r2, r3
 8007296:	d802      	bhi.n	800729e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007298:	4a1f      	ldr	r2, [pc, #124]	@ (8007318 <prvAddNewTaskToReadyList+0xc8>)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800729e:	4b20      	ldr	r3, [pc, #128]	@ (8007320 <prvAddNewTaskToReadyList+0xd0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	3301      	adds	r3, #1
 80072a4:	4a1e      	ldr	r2, [pc, #120]	@ (8007320 <prvAddNewTaskToReadyList+0xd0>)
 80072a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80072a8:	4b1d      	ldr	r3, [pc, #116]	@ (8007320 <prvAddNewTaskToReadyList+0xd0>)
 80072aa:	681a      	ldr	r2, [r3, #0]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072b4:	4b1b      	ldr	r3, [pc, #108]	@ (8007324 <prvAddNewTaskToReadyList+0xd4>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	429a      	cmp	r2, r3
 80072ba:	d903      	bls.n	80072c4 <prvAddNewTaskToReadyList+0x74>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c0:	4a18      	ldr	r2, [pc, #96]	@ (8007324 <prvAddNewTaskToReadyList+0xd4>)
 80072c2:	6013      	str	r3, [r2, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c8:	4613      	mov	r3, r2
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	009b      	lsls	r3, r3, #2
 80072d0:	4a15      	ldr	r2, [pc, #84]	@ (8007328 <prvAddNewTaskToReadyList+0xd8>)
 80072d2:	441a      	add	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	3304      	adds	r3, #4
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7ff f901 	bl	80064e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80072e0:	f001 fb0c 	bl	80088fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80072e4:	4b0d      	ldr	r3, [pc, #52]	@ (800731c <prvAddNewTaskToReadyList+0xcc>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d00e      	beq.n	800730a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80072ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007318 <prvAddNewTaskToReadyList+0xc8>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d207      	bcs.n	800730a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072fa:	4b0c      	ldr	r3, [pc, #48]	@ (800732c <prvAddNewTaskToReadyList+0xdc>)
 80072fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007300:	601a      	str	r2, [r3, #0]
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800730a:	bf00      	nop
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop
 8007314:	20000ec4 	.word	0x20000ec4
 8007318:	200009f0 	.word	0x200009f0
 800731c:	20000ed0 	.word	0x20000ed0
 8007320:	20000ee0 	.word	0x20000ee0
 8007324:	20000ecc 	.word	0x20000ecc
 8007328:	200009f4 	.word	0x200009f4
 800732c:	e000ed04 	.word	0xe000ed04

08007330 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007338:	2300      	movs	r3, #0
 800733a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d018      	beq.n	8007374 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007342:	4b14      	ldr	r3, [pc, #80]	@ (8007394 <vTaskDelay+0x64>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d00b      	beq.n	8007362 <vTaskDelay+0x32>
	__asm volatile
 800734a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800734e:	f383 8811 	msr	BASEPRI, r3
 8007352:	f3bf 8f6f 	isb	sy
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	60bb      	str	r3, [r7, #8]
}
 800735c:	bf00      	nop
 800735e:	bf00      	nop
 8007360:	e7fd      	b.n	800735e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007362:	f000 f883 	bl	800746c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007366:	2100      	movs	r1, #0
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fcf3 	bl	8007d54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800736e:	f000 f88b 	bl	8007488 <xTaskResumeAll>
 8007372:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d107      	bne.n	800738a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800737a:	4b07      	ldr	r3, [pc, #28]	@ (8007398 <vTaskDelay+0x68>)
 800737c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007380:	601a      	str	r2, [r3, #0]
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800738a:	bf00      	nop
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	20000eec 	.word	0x20000eec
 8007398:	e000ed04 	.word	0xe000ed04

0800739c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08a      	sub	sp, #40	@ 0x28
 80073a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80073a6:	2300      	movs	r3, #0
 80073a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80073aa:	463a      	mov	r2, r7
 80073ac:	1d39      	adds	r1, r7, #4
 80073ae:	f107 0308 	add.w	r3, r7, #8
 80073b2:	4618      	mov	r0, r3
 80073b4:	f7ff f834 	bl	8006420 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80073b8:	6839      	ldr	r1, [r7, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	9202      	str	r2, [sp, #8]
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	2300      	movs	r3, #0
 80073c4:	9300      	str	r3, [sp, #0]
 80073c6:	2300      	movs	r3, #0
 80073c8:	460a      	mov	r2, r1
 80073ca:	4922      	ldr	r1, [pc, #136]	@ (8007454 <vTaskStartScheduler+0xb8>)
 80073cc:	4822      	ldr	r0, [pc, #136]	@ (8007458 <vTaskStartScheduler+0xbc>)
 80073ce:	f7ff fe09 	bl	8006fe4 <xTaskCreateStatic>
 80073d2:	4603      	mov	r3, r0
 80073d4:	4a21      	ldr	r2, [pc, #132]	@ (800745c <vTaskStartScheduler+0xc0>)
 80073d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80073d8:	4b20      	ldr	r3, [pc, #128]	@ (800745c <vTaskStartScheduler+0xc0>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d002      	beq.n	80073e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80073e0:	2301      	movs	r3, #1
 80073e2:	617b      	str	r3, [r7, #20]
 80073e4:	e001      	b.n	80073ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d102      	bne.n	80073f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80073f0:	f000 fd04 	bl	8007dfc <xTimerCreateTimerTask>
 80073f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d116      	bne.n	800742a <vTaskStartScheduler+0x8e>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	613b      	str	r3, [r7, #16]
}
 800740e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007410:	4b13      	ldr	r3, [pc, #76]	@ (8007460 <vTaskStartScheduler+0xc4>)
 8007412:	f04f 32ff 	mov.w	r2, #4294967295
 8007416:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007418:	4b12      	ldr	r3, [pc, #72]	@ (8007464 <vTaskStartScheduler+0xc8>)
 800741a:	2201      	movs	r2, #1
 800741c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800741e:	4b12      	ldr	r3, [pc, #72]	@ (8007468 <vTaskStartScheduler+0xcc>)
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007424:	f001 f994 	bl	8008750 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007428:	e00f      	b.n	800744a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007430:	d10b      	bne.n	800744a <vTaskStartScheduler+0xae>
	__asm volatile
 8007432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	60fb      	str	r3, [r7, #12]
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop
 8007448:	e7fd      	b.n	8007446 <vTaskStartScheduler+0xaa>
}
 800744a:	bf00      	nop
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	0800900c 	.word	0x0800900c
 8007458:	08007a8d 	.word	0x08007a8d
 800745c:	20000ee8 	.word	0x20000ee8
 8007460:	20000ee4 	.word	0x20000ee4
 8007464:	20000ed0 	.word	0x20000ed0
 8007468:	20000ec8 	.word	0x20000ec8

0800746c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800746c:	b480      	push	{r7}
 800746e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007470:	4b04      	ldr	r3, [pc, #16]	@ (8007484 <vTaskSuspendAll+0x18>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3301      	adds	r3, #1
 8007476:	4a03      	ldr	r2, [pc, #12]	@ (8007484 <vTaskSuspendAll+0x18>)
 8007478:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800747a:	bf00      	nop
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr
 8007484:	20000eec 	.word	0x20000eec

08007488 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007492:	2300      	movs	r3, #0
 8007494:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007496:	4b42      	ldr	r3, [pc, #264]	@ (80075a0 <xTaskResumeAll+0x118>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10b      	bne.n	80074b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800749e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a2:	f383 8811 	msr	BASEPRI, r3
 80074a6:	f3bf 8f6f 	isb	sy
 80074aa:	f3bf 8f4f 	dsb	sy
 80074ae:	603b      	str	r3, [r7, #0]
}
 80074b0:	bf00      	nop
 80074b2:	bf00      	nop
 80074b4:	e7fd      	b.n	80074b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80074b6:	f001 f9ef 	bl	8008898 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80074ba:	4b39      	ldr	r3, [pc, #228]	@ (80075a0 <xTaskResumeAll+0x118>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	3b01      	subs	r3, #1
 80074c0:	4a37      	ldr	r2, [pc, #220]	@ (80075a0 <xTaskResumeAll+0x118>)
 80074c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074c4:	4b36      	ldr	r3, [pc, #216]	@ (80075a0 <xTaskResumeAll+0x118>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d162      	bne.n	8007592 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80074cc:	4b35      	ldr	r3, [pc, #212]	@ (80075a4 <xTaskResumeAll+0x11c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d05e      	beq.n	8007592 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074d4:	e02f      	b.n	8007536 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074d6:	4b34      	ldr	r3, [pc, #208]	@ (80075a8 <xTaskResumeAll+0x120>)
 80074d8:	68db      	ldr	r3, [r3, #12]
 80074da:	68db      	ldr	r3, [r3, #12]
 80074dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	3318      	adds	r3, #24
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff f85a 	bl	800659c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	3304      	adds	r3, #4
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7ff f855 	bl	800659c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074f6:	4b2d      	ldr	r3, [pc, #180]	@ (80075ac <xTaskResumeAll+0x124>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d903      	bls.n	8007506 <xTaskResumeAll+0x7e>
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007502:	4a2a      	ldr	r2, [pc, #168]	@ (80075ac <xTaskResumeAll+0x124>)
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800750a:	4613      	mov	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	4413      	add	r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	4a27      	ldr	r2, [pc, #156]	@ (80075b0 <xTaskResumeAll+0x128>)
 8007514:	441a      	add	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	3304      	adds	r3, #4
 800751a:	4619      	mov	r1, r3
 800751c:	4610      	mov	r0, r2
 800751e:	f7fe ffe0 	bl	80064e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007526:	4b23      	ldr	r3, [pc, #140]	@ (80075b4 <xTaskResumeAll+0x12c>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800752c:	429a      	cmp	r2, r3
 800752e:	d302      	bcc.n	8007536 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007530:	4b21      	ldr	r3, [pc, #132]	@ (80075b8 <xTaskResumeAll+0x130>)
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007536:	4b1c      	ldr	r3, [pc, #112]	@ (80075a8 <xTaskResumeAll+0x120>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1cb      	bne.n	80074d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007544:	f000 fb58 	bl	8007bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007548:	4b1c      	ldr	r3, [pc, #112]	@ (80075bc <xTaskResumeAll+0x134>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d010      	beq.n	8007576 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007554:	f000 f846 	bl	80075e4 <xTaskIncrementTick>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800755e:	4b16      	ldr	r3, [pc, #88]	@ (80075b8 <xTaskResumeAll+0x130>)
 8007560:	2201      	movs	r2, #1
 8007562:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	3b01      	subs	r3, #1
 8007568:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d1f1      	bne.n	8007554 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007570:	4b12      	ldr	r3, [pc, #72]	@ (80075bc <xTaskResumeAll+0x134>)
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007576:	4b10      	ldr	r3, [pc, #64]	@ (80075b8 <xTaskResumeAll+0x130>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d009      	beq.n	8007592 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800757e:	2301      	movs	r3, #1
 8007580:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007582:	4b0f      	ldr	r3, [pc, #60]	@ (80075c0 <xTaskResumeAll+0x138>)
 8007584:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007592:	f001 f9b3 	bl	80088fc <vPortExitCritical>

	return xAlreadyYielded;
 8007596:	68bb      	ldr	r3, [r7, #8]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20000eec 	.word	0x20000eec
 80075a4:	20000ec4 	.word	0x20000ec4
 80075a8:	20000e84 	.word	0x20000e84
 80075ac:	20000ecc 	.word	0x20000ecc
 80075b0:	200009f4 	.word	0x200009f4
 80075b4:	200009f0 	.word	0x200009f0
 80075b8:	20000ed8 	.word	0x20000ed8
 80075bc:	20000ed4 	.word	0x20000ed4
 80075c0:	e000ed04 	.word	0xe000ed04

080075c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80075ca:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <xTaskGetTickCount+0x1c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80075d0:	687b      	ldr	r3, [r7, #4]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	370c      	adds	r7, #12
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	20000ec8 	.word	0x20000ec8

080075e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075ea:	2300      	movs	r3, #0
 80075ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075ee:	4b4f      	ldr	r3, [pc, #316]	@ (800772c <xTaskIncrementTick+0x148>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	f040 8090 	bne.w	8007718 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075f8:	4b4d      	ldr	r3, [pc, #308]	@ (8007730 <xTaskIncrementTick+0x14c>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3301      	adds	r3, #1
 80075fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007600:	4a4b      	ldr	r2, [pc, #300]	@ (8007730 <xTaskIncrementTick+0x14c>)
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d121      	bne.n	8007650 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800760c:	4b49      	ldr	r3, [pc, #292]	@ (8007734 <xTaskIncrementTick+0x150>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00b      	beq.n	800762e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761a:	f383 8811 	msr	BASEPRI, r3
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f3bf 8f4f 	dsb	sy
 8007626:	603b      	str	r3, [r7, #0]
}
 8007628:	bf00      	nop
 800762a:	bf00      	nop
 800762c:	e7fd      	b.n	800762a <xTaskIncrementTick+0x46>
 800762e:	4b41      	ldr	r3, [pc, #260]	@ (8007734 <xTaskIncrementTick+0x150>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	4b40      	ldr	r3, [pc, #256]	@ (8007738 <xTaskIncrementTick+0x154>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	4a3e      	ldr	r2, [pc, #248]	@ (8007734 <xTaskIncrementTick+0x150>)
 800763a:	6013      	str	r3, [r2, #0]
 800763c:	4a3e      	ldr	r2, [pc, #248]	@ (8007738 <xTaskIncrementTick+0x154>)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6013      	str	r3, [r2, #0]
 8007642:	4b3e      	ldr	r3, [pc, #248]	@ (800773c <xTaskIncrementTick+0x158>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3301      	adds	r3, #1
 8007648:	4a3c      	ldr	r2, [pc, #240]	@ (800773c <xTaskIncrementTick+0x158>)
 800764a:	6013      	str	r3, [r2, #0]
 800764c:	f000 fad4 	bl	8007bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007650:	4b3b      	ldr	r3, [pc, #236]	@ (8007740 <xTaskIncrementTick+0x15c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	429a      	cmp	r2, r3
 8007658:	d349      	bcc.n	80076ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800765a:	4b36      	ldr	r3, [pc, #216]	@ (8007734 <xTaskIncrementTick+0x150>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d104      	bne.n	800766e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007664:	4b36      	ldr	r3, [pc, #216]	@ (8007740 <xTaskIncrementTick+0x15c>)
 8007666:	f04f 32ff 	mov.w	r2, #4294967295
 800766a:	601a      	str	r2, [r3, #0]
					break;
 800766c:	e03f      	b.n	80076ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766e:	4b31      	ldr	r3, [pc, #196]	@ (8007734 <xTaskIncrementTick+0x150>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	68db      	ldr	r3, [r3, #12]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	429a      	cmp	r2, r3
 8007684:	d203      	bcs.n	800768e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007686:	4a2e      	ldr	r2, [pc, #184]	@ (8007740 <xTaskIncrementTick+0x15c>)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800768c:	e02f      	b.n	80076ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	3304      	adds	r3, #4
 8007692:	4618      	mov	r0, r3
 8007694:	f7fe ff82 	bl	800659c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800769c:	2b00      	cmp	r3, #0
 800769e:	d004      	beq.n	80076aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	3318      	adds	r3, #24
 80076a4:	4618      	mov	r0, r3
 80076a6:	f7fe ff79 	bl	800659c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ae:	4b25      	ldr	r3, [pc, #148]	@ (8007744 <xTaskIncrementTick+0x160>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d903      	bls.n	80076be <xTaskIncrementTick+0xda>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ba:	4a22      	ldr	r2, [pc, #136]	@ (8007744 <xTaskIncrementTick+0x160>)
 80076bc:	6013      	str	r3, [r2, #0]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c2:	4613      	mov	r3, r2
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	009b      	lsls	r3, r3, #2
 80076ca:	4a1f      	ldr	r2, [pc, #124]	@ (8007748 <xTaskIncrementTick+0x164>)
 80076cc:	441a      	add	r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	3304      	adds	r3, #4
 80076d2:	4619      	mov	r1, r3
 80076d4:	4610      	mov	r0, r2
 80076d6:	f7fe ff04 	bl	80064e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076de:	4b1b      	ldr	r3, [pc, #108]	@ (800774c <xTaskIncrementTick+0x168>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d3b8      	bcc.n	800765a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80076e8:	2301      	movs	r3, #1
 80076ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ec:	e7b5      	b.n	800765a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076ee:	4b17      	ldr	r3, [pc, #92]	@ (800774c <xTaskIncrementTick+0x168>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076f4:	4914      	ldr	r1, [pc, #80]	@ (8007748 <xTaskIncrementTick+0x164>)
 80076f6:	4613      	mov	r3, r2
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	440b      	add	r3, r1
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d901      	bls.n	800770a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007706:	2301      	movs	r3, #1
 8007708:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800770a:	4b11      	ldr	r3, [pc, #68]	@ (8007750 <xTaskIncrementTick+0x16c>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007712:	2301      	movs	r3, #1
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	e004      	b.n	8007722 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007718:	4b0e      	ldr	r3, [pc, #56]	@ (8007754 <xTaskIncrementTick+0x170>)
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3301      	adds	r3, #1
 800771e:	4a0d      	ldr	r2, [pc, #52]	@ (8007754 <xTaskIncrementTick+0x170>)
 8007720:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007722:	697b      	ldr	r3, [r7, #20]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3718      	adds	r7, #24
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}
 800772c:	20000eec 	.word	0x20000eec
 8007730:	20000ec8 	.word	0x20000ec8
 8007734:	20000e7c 	.word	0x20000e7c
 8007738:	20000e80 	.word	0x20000e80
 800773c:	20000edc 	.word	0x20000edc
 8007740:	20000ee4 	.word	0x20000ee4
 8007744:	20000ecc 	.word	0x20000ecc
 8007748:	200009f4 	.word	0x200009f4
 800774c:	200009f0 	.word	0x200009f0
 8007750:	20000ed8 	.word	0x20000ed8
 8007754:	20000ed4 	.word	0x20000ed4

08007758 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007758:	b480      	push	{r7}
 800775a:	b085      	sub	sp, #20
 800775c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800775e:	4b28      	ldr	r3, [pc, #160]	@ (8007800 <vTaskSwitchContext+0xa8>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007766:	4b27      	ldr	r3, [pc, #156]	@ (8007804 <vTaskSwitchContext+0xac>)
 8007768:	2201      	movs	r2, #1
 800776a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800776c:	e042      	b.n	80077f4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800776e:	4b25      	ldr	r3, [pc, #148]	@ (8007804 <vTaskSwitchContext+0xac>)
 8007770:	2200      	movs	r2, #0
 8007772:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007774:	4b24      	ldr	r3, [pc, #144]	@ (8007808 <vTaskSwitchContext+0xb0>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	60fb      	str	r3, [r7, #12]
 800777a:	e011      	b.n	80077a0 <vTaskSwitchContext+0x48>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d10b      	bne.n	800779a <vTaskSwitchContext+0x42>
	__asm volatile
 8007782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007786:	f383 8811 	msr	BASEPRI, r3
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	f3bf 8f4f 	dsb	sy
 8007792:	607b      	str	r3, [r7, #4]
}
 8007794:	bf00      	nop
 8007796:	bf00      	nop
 8007798:	e7fd      	b.n	8007796 <vTaskSwitchContext+0x3e>
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	3b01      	subs	r3, #1
 800779e:	60fb      	str	r3, [r7, #12]
 80077a0:	491a      	ldr	r1, [pc, #104]	@ (800780c <vTaskSwitchContext+0xb4>)
 80077a2:	68fa      	ldr	r2, [r7, #12]
 80077a4:	4613      	mov	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	4413      	add	r3, r2
 80077aa:	009b      	lsls	r3, r3, #2
 80077ac:	440b      	add	r3, r1
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d0e3      	beq.n	800777c <vTaskSwitchContext+0x24>
 80077b4:	68fa      	ldr	r2, [r7, #12]
 80077b6:	4613      	mov	r3, r2
 80077b8:	009b      	lsls	r3, r3, #2
 80077ba:	4413      	add	r3, r2
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4a13      	ldr	r2, [pc, #76]	@ (800780c <vTaskSwitchContext+0xb4>)
 80077c0:	4413      	add	r3, r2
 80077c2:	60bb      	str	r3, [r7, #8]
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	605a      	str	r2, [r3, #4]
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	685a      	ldr	r2, [r3, #4]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	3308      	adds	r3, #8
 80077d6:	429a      	cmp	r2, r3
 80077d8:	d104      	bne.n	80077e4 <vTaskSwitchContext+0x8c>
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	685a      	ldr	r2, [r3, #4]
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	605a      	str	r2, [r3, #4]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	4a09      	ldr	r2, [pc, #36]	@ (8007810 <vTaskSwitchContext+0xb8>)
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	4a06      	ldr	r2, [pc, #24]	@ (8007808 <vTaskSwitchContext+0xb0>)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6013      	str	r3, [r2, #0]
}
 80077f4:	bf00      	nop
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr
 8007800:	20000eec 	.word	0x20000eec
 8007804:	20000ed8 	.word	0x20000ed8
 8007808:	20000ecc 	.word	0x20000ecc
 800780c:	200009f4 	.word	0x200009f4
 8007810:	200009f0 	.word	0x200009f0

08007814 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d10b      	bne.n	800783c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007828:	f383 8811 	msr	BASEPRI, r3
 800782c:	f3bf 8f6f 	isb	sy
 8007830:	f3bf 8f4f 	dsb	sy
 8007834:	60fb      	str	r3, [r7, #12]
}
 8007836:	bf00      	nop
 8007838:	bf00      	nop
 800783a:	e7fd      	b.n	8007838 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800783c:	4b07      	ldr	r3, [pc, #28]	@ (800785c <vTaskPlaceOnEventList+0x48>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3318      	adds	r3, #24
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f7fe fe70 	bl	800652a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800784a:	2101      	movs	r1, #1
 800784c:	6838      	ldr	r0, [r7, #0]
 800784e:	f000 fa81 	bl	8007d54 <prvAddCurrentTaskToDelayedList>
}
 8007852:	bf00      	nop
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	200009f0 	.word	0x200009f0

08007860 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007860:	b580      	push	{r7, lr}
 8007862:	b086      	sub	sp, #24
 8007864:	af00      	add	r7, sp, #0
 8007866:	60f8      	str	r0, [r7, #12]
 8007868:	60b9      	str	r1, [r7, #8]
 800786a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10b      	bne.n	800788a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007876:	f383 8811 	msr	BASEPRI, r3
 800787a:	f3bf 8f6f 	isb	sy
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	617b      	str	r3, [r7, #20]
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	e7fd      	b.n	8007886 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800788a:	4b0a      	ldr	r3, [pc, #40]	@ (80078b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	3318      	adds	r3, #24
 8007890:	4619      	mov	r1, r3
 8007892:	68f8      	ldr	r0, [r7, #12]
 8007894:	f7fe fe25 	bl	80064e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800789e:	f04f 33ff 	mov.w	r3, #4294967295
 80078a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80078a4:	6879      	ldr	r1, [r7, #4]
 80078a6:	68b8      	ldr	r0, [r7, #8]
 80078a8:	f000 fa54 	bl	8007d54 <prvAddCurrentTaskToDelayedList>
	}
 80078ac:	bf00      	nop
 80078ae:	3718      	adds	r7, #24
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	200009f0 	.word	0x200009f0

080078b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b086      	sub	sp, #24
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10b      	bne.n	80078e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	60fb      	str	r3, [r7, #12]
}
 80078e0:	bf00      	nop
 80078e2:	bf00      	nop
 80078e4:	e7fd      	b.n	80078e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	3318      	adds	r3, #24
 80078ea:	4618      	mov	r0, r3
 80078ec:	f7fe fe56 	bl	800659c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80078f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007968 <xTaskRemoveFromEventList+0xb0>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d11d      	bne.n	8007934 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078f8:	693b      	ldr	r3, [r7, #16]
 80078fa:	3304      	adds	r3, #4
 80078fc:	4618      	mov	r0, r3
 80078fe:	f7fe fe4d 	bl	800659c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007906:	4b19      	ldr	r3, [pc, #100]	@ (800796c <xTaskRemoveFromEventList+0xb4>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d903      	bls.n	8007916 <xTaskRemoveFromEventList+0x5e>
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007912:	4a16      	ldr	r2, [pc, #88]	@ (800796c <xTaskRemoveFromEventList+0xb4>)
 8007914:	6013      	str	r3, [r2, #0]
 8007916:	693b      	ldr	r3, [r7, #16]
 8007918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800791a:	4613      	mov	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	4413      	add	r3, r2
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4a13      	ldr	r2, [pc, #76]	@ (8007970 <xTaskRemoveFromEventList+0xb8>)
 8007924:	441a      	add	r2, r3
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	3304      	adds	r3, #4
 800792a:	4619      	mov	r1, r3
 800792c:	4610      	mov	r0, r2
 800792e:	f7fe fdd8 	bl	80064e2 <vListInsertEnd>
 8007932:	e005      	b.n	8007940 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	3318      	adds	r3, #24
 8007938:	4619      	mov	r1, r3
 800793a:	480e      	ldr	r0, [pc, #56]	@ (8007974 <xTaskRemoveFromEventList+0xbc>)
 800793c:	f7fe fdd1 	bl	80064e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007944:	4b0c      	ldr	r3, [pc, #48]	@ (8007978 <xTaskRemoveFromEventList+0xc0>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800794a:	429a      	cmp	r2, r3
 800794c:	d905      	bls.n	800795a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800794e:	2301      	movs	r3, #1
 8007950:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007952:	4b0a      	ldr	r3, [pc, #40]	@ (800797c <xTaskRemoveFromEventList+0xc4>)
 8007954:	2201      	movs	r2, #1
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	e001      	b.n	800795e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800795a:	2300      	movs	r3, #0
 800795c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800795e:	697b      	ldr	r3, [r7, #20]
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000eec 	.word	0x20000eec
 800796c:	20000ecc 	.word	0x20000ecc
 8007970:	200009f4 	.word	0x200009f4
 8007974:	20000e84 	.word	0x20000e84
 8007978:	200009f0 	.word	0x200009f0
 800797c:	20000ed8 	.word	0x20000ed8

08007980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007988:	4b06      	ldr	r3, [pc, #24]	@ (80079a4 <vTaskInternalSetTimeOutState+0x24>)
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007990:	4b05      	ldr	r3, [pc, #20]	@ (80079a8 <vTaskInternalSetTimeOutState+0x28>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	605a      	str	r2, [r3, #4]
}
 8007998:	bf00      	nop
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr
 80079a4:	20000edc 	.word	0x20000edc
 80079a8:	20000ec8 	.word	0x20000ec8

080079ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b088      	sub	sp, #32
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10b      	bne.n	80079d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80079bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c0:	f383 8811 	msr	BASEPRI, r3
 80079c4:	f3bf 8f6f 	isb	sy
 80079c8:	f3bf 8f4f 	dsb	sy
 80079cc:	613b      	str	r3, [r7, #16]
}
 80079ce:	bf00      	nop
 80079d0:	bf00      	nop
 80079d2:	e7fd      	b.n	80079d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10b      	bne.n	80079f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	60fb      	str	r3, [r7, #12]
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	e7fd      	b.n	80079ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80079f2:	f000 ff51 	bl	8008898 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079f6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a6c <xTaskCheckForTimeOut+0xc0>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	69ba      	ldr	r2, [r7, #24]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a0e:	d102      	bne.n	8007a16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	61fb      	str	r3, [r7, #28]
 8007a14:	e023      	b.n	8007a5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	4b15      	ldr	r3, [pc, #84]	@ (8007a70 <xTaskCheckForTimeOut+0xc4>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d007      	beq.n	8007a32 <xTaskCheckForTimeOut+0x86>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	685b      	ldr	r3, [r3, #4]
 8007a26:	69ba      	ldr	r2, [r7, #24]
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d302      	bcc.n	8007a32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	61fb      	str	r3, [r7, #28]
 8007a30:	e015      	b.n	8007a5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	697a      	ldr	r2, [r7, #20]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d20b      	bcs.n	8007a54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	681a      	ldr	r2, [r3, #0]
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	1ad2      	subs	r2, r2, r3
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a48:	6878      	ldr	r0, [r7, #4]
 8007a4a:	f7ff ff99 	bl	8007980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a4e:	2300      	movs	r3, #0
 8007a50:	61fb      	str	r3, [r7, #28]
 8007a52:	e004      	b.n	8007a5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a54:	683b      	ldr	r3, [r7, #0]
 8007a56:	2200      	movs	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a5e:	f000 ff4d 	bl	80088fc <vPortExitCritical>

	return xReturn;
 8007a62:	69fb      	ldr	r3, [r7, #28]
}
 8007a64:	4618      	mov	r0, r3
 8007a66:	3720      	adds	r7, #32
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	20000ec8 	.word	0x20000ec8
 8007a70:	20000edc 	.word	0x20000edc

08007a74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a78:	4b03      	ldr	r3, [pc, #12]	@ (8007a88 <vTaskMissedYield+0x14>)
 8007a7a:	2201      	movs	r2, #1
 8007a7c:	601a      	str	r2, [r3, #0]
}
 8007a7e:	bf00      	nop
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	20000ed8 	.word	0x20000ed8

08007a8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a94:	f000 f852 	bl	8007b3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a98:	4b06      	ldr	r3, [pc, #24]	@ (8007ab4 <prvIdleTask+0x28>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d9f9      	bls.n	8007a94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007aa0:	4b05      	ldr	r3, [pc, #20]	@ (8007ab8 <prvIdleTask+0x2c>)
 8007aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aa6:	601a      	str	r2, [r3, #0]
 8007aa8:	f3bf 8f4f 	dsb	sy
 8007aac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007ab0:	e7f0      	b.n	8007a94 <prvIdleTask+0x8>
 8007ab2:	bf00      	nop
 8007ab4:	200009f4 	.word	0x200009f4
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	607b      	str	r3, [r7, #4]
 8007ac6:	e00c      	b.n	8007ae2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	4613      	mov	r3, r2
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4a12      	ldr	r2, [pc, #72]	@ (8007b1c <prvInitialiseTaskLists+0x60>)
 8007ad4:	4413      	add	r3, r2
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f7fe fcd6 	bl	8006488 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3301      	adds	r3, #1
 8007ae0:	607b      	str	r3, [r7, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2b37      	cmp	r3, #55	@ 0x37
 8007ae6:	d9ef      	bls.n	8007ac8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ae8:	480d      	ldr	r0, [pc, #52]	@ (8007b20 <prvInitialiseTaskLists+0x64>)
 8007aea:	f7fe fccd 	bl	8006488 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007aee:	480d      	ldr	r0, [pc, #52]	@ (8007b24 <prvInitialiseTaskLists+0x68>)
 8007af0:	f7fe fcca 	bl	8006488 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007af4:	480c      	ldr	r0, [pc, #48]	@ (8007b28 <prvInitialiseTaskLists+0x6c>)
 8007af6:	f7fe fcc7 	bl	8006488 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007afa:	480c      	ldr	r0, [pc, #48]	@ (8007b2c <prvInitialiseTaskLists+0x70>)
 8007afc:	f7fe fcc4 	bl	8006488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007b00:	480b      	ldr	r0, [pc, #44]	@ (8007b30 <prvInitialiseTaskLists+0x74>)
 8007b02:	f7fe fcc1 	bl	8006488 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007b06:	4b0b      	ldr	r3, [pc, #44]	@ (8007b34 <prvInitialiseTaskLists+0x78>)
 8007b08:	4a05      	ldr	r2, [pc, #20]	@ (8007b20 <prvInitialiseTaskLists+0x64>)
 8007b0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b38 <prvInitialiseTaskLists+0x7c>)
 8007b0e:	4a05      	ldr	r2, [pc, #20]	@ (8007b24 <prvInitialiseTaskLists+0x68>)
 8007b10:	601a      	str	r2, [r3, #0]
}
 8007b12:	bf00      	nop
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	200009f4 	.word	0x200009f4
 8007b20:	20000e54 	.word	0x20000e54
 8007b24:	20000e68 	.word	0x20000e68
 8007b28:	20000e84 	.word	0x20000e84
 8007b2c:	20000e98 	.word	0x20000e98
 8007b30:	20000eb0 	.word	0x20000eb0
 8007b34:	20000e7c 	.word	0x20000e7c
 8007b38:	20000e80 	.word	0x20000e80

08007b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b082      	sub	sp, #8
 8007b40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b42:	e019      	b.n	8007b78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b44:	f000 fea8 	bl	8008898 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b48:	4b10      	ldr	r3, [pc, #64]	@ (8007b8c <prvCheckTasksWaitingTermination+0x50>)
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	3304      	adds	r3, #4
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe fd21 	bl	800659c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b90 <prvCheckTasksWaitingTermination+0x54>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	4a0b      	ldr	r2, [pc, #44]	@ (8007b90 <prvCheckTasksWaitingTermination+0x54>)
 8007b62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b64:	4b0b      	ldr	r3, [pc, #44]	@ (8007b94 <prvCheckTasksWaitingTermination+0x58>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	3b01      	subs	r3, #1
 8007b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8007b94 <prvCheckTasksWaitingTermination+0x58>)
 8007b6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b6e:	f000 fec5 	bl	80088fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 f810 	bl	8007b98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b78:	4b06      	ldr	r3, [pc, #24]	@ (8007b94 <prvCheckTasksWaitingTermination+0x58>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1e1      	bne.n	8007b44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b80:	bf00      	nop
 8007b82:	bf00      	nop
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	20000e98 	.word	0x20000e98
 8007b90:	20000ec4 	.word	0x20000ec4
 8007b94:	20000eac 	.word	0x20000eac

08007b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d108      	bne.n	8007bbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f001 f862 	bl	8008c78 <vPortFree>
				vPortFree( pxTCB );
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f001 f85f 	bl	8008c78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007bba:	e019      	b.n	8007bf0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d103      	bne.n	8007bce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f001 f856 	bl	8008c78 <vPortFree>
	}
 8007bcc:	e010      	b.n	8007bf0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d00b      	beq.n	8007bf0 <prvDeleteTCB+0x58>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	60fb      	str	r3, [r7, #12]
}
 8007bea:	bf00      	nop
 8007bec:	bf00      	nop
 8007bee:	e7fd      	b.n	8007bec <prvDeleteTCB+0x54>
	}
 8007bf0:	bf00      	nop
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8007c30 <prvResetNextTaskUnblockTime+0x38>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d104      	bne.n	8007c12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007c08:	4b0a      	ldr	r3, [pc, #40]	@ (8007c34 <prvResetNextTaskUnblockTime+0x3c>)
 8007c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007c10:	e008      	b.n	8007c24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c12:	4b07      	ldr	r3, [pc, #28]	@ (8007c30 <prvResetNextTaskUnblockTime+0x38>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68db      	ldr	r3, [r3, #12]
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	4a04      	ldr	r2, [pc, #16]	@ (8007c34 <prvResetNextTaskUnblockTime+0x3c>)
 8007c22:	6013      	str	r3, [r2, #0]
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr
 8007c30:	20000e7c 	.word	0x20000e7c
 8007c34:	20000ee4 	.word	0x20000ee4

08007c38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c6c <xTaskGetSchedulerState+0x34>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c46:	2301      	movs	r3, #1
 8007c48:	607b      	str	r3, [r7, #4]
 8007c4a:	e008      	b.n	8007c5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c4c:	4b08      	ldr	r3, [pc, #32]	@ (8007c70 <xTaskGetSchedulerState+0x38>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d102      	bne.n	8007c5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c54:	2302      	movs	r3, #2
 8007c56:	607b      	str	r3, [r7, #4]
 8007c58:	e001      	b.n	8007c5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c5e:	687b      	ldr	r3, [r7, #4]
	}
 8007c60:	4618      	mov	r0, r3
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr
 8007c6c:	20000ed0 	.word	0x20000ed0
 8007c70:	20000eec 	.word	0x20000eec

08007c74 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007c80:	2300      	movs	r3, #0
 8007c82:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d058      	beq.n	8007d3c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007c8a:	4b2f      	ldr	r3, [pc, #188]	@ (8007d48 <xTaskPriorityDisinherit+0xd4>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	429a      	cmp	r2, r3
 8007c92:	d00b      	beq.n	8007cac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007c94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c98:	f383 8811 	msr	BASEPRI, r3
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f3bf 8f4f 	dsb	sy
 8007ca4:	60fb      	str	r3, [r7, #12]
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	e7fd      	b.n	8007ca8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10b      	bne.n	8007ccc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	60bb      	str	r3, [r7, #8]
}
 8007cc6:	bf00      	nop
 8007cc8:	bf00      	nop
 8007cca:	e7fd      	b.n	8007cc8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cd0:	1e5a      	subs	r2, r3, #1
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cda:	693b      	ldr	r3, [r7, #16]
 8007cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d02c      	beq.n	8007d3c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d128      	bne.n	8007d3c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	3304      	adds	r3, #4
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fc54 	bl	800659c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cfc:	693b      	ldr	r3, [r7, #16]
 8007cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007d04:	693b      	ldr	r3, [r7, #16]
 8007d06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d0c:	4b0f      	ldr	r3, [pc, #60]	@ (8007d4c <xTaskPriorityDisinherit+0xd8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	429a      	cmp	r2, r3
 8007d12:	d903      	bls.n	8007d1c <xTaskPriorityDisinherit+0xa8>
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d18:	4a0c      	ldr	r2, [pc, #48]	@ (8007d4c <xTaskPriorityDisinherit+0xd8>)
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d20:	4613      	mov	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4a09      	ldr	r2, [pc, #36]	@ (8007d50 <xTaskPriorityDisinherit+0xdc>)
 8007d2a:	441a      	add	r2, r3
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	3304      	adds	r3, #4
 8007d30:	4619      	mov	r1, r3
 8007d32:	4610      	mov	r0, r2
 8007d34:	f7fe fbd5 	bl	80064e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d3c:	697b      	ldr	r3, [r7, #20]
	}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3718      	adds	r7, #24
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	200009f0 	.word	0x200009f0
 8007d4c:	20000ecc 	.word	0x20000ecc
 8007d50:	200009f4 	.word	0x200009f4

08007d54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007d5e:	4b21      	ldr	r3, [pc, #132]	@ (8007de4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d64:	4b20      	ldr	r3, [pc, #128]	@ (8007de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f7fe fc16 	bl	800659c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d76:	d10a      	bne.n	8007d8e <prvAddCurrentTaskToDelayedList+0x3a>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007d7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3304      	adds	r3, #4
 8007d84:	4619      	mov	r1, r3
 8007d86:	4819      	ldr	r0, [pc, #100]	@ (8007dec <prvAddCurrentTaskToDelayedList+0x98>)
 8007d88:	f7fe fbab 	bl	80064e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007d8c:	e026      	b.n	8007ddc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	4413      	add	r3, r2
 8007d94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007d96:	4b14      	ldr	r3, [pc, #80]	@ (8007de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007d9e:	68ba      	ldr	r2, [r7, #8]
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d209      	bcs.n	8007dba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007da6:	4b12      	ldr	r3, [pc, #72]	@ (8007df0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	4b0f      	ldr	r3, [pc, #60]	@ (8007de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	3304      	adds	r3, #4
 8007db0:	4619      	mov	r1, r3
 8007db2:	4610      	mov	r0, r2
 8007db4:	f7fe fbb9 	bl	800652a <vListInsert>
}
 8007db8:	e010      	b.n	8007ddc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007dba:	4b0e      	ldr	r3, [pc, #56]	@ (8007df4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8007de8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	f7fe fbaf 	bl	800652a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8007df8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	429a      	cmp	r2, r3
 8007dd4:	d202      	bcs.n	8007ddc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007dd6:	4a08      	ldr	r2, [pc, #32]	@ (8007df8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	6013      	str	r3, [r2, #0]
}
 8007ddc:	bf00      	nop
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	20000ec8 	.word	0x20000ec8
 8007de8:	200009f0 	.word	0x200009f0
 8007dec:	20000eb0 	.word	0x20000eb0
 8007df0:	20000e80 	.word	0x20000e80
 8007df4:	20000e7c 	.word	0x20000e7c
 8007df8:	20000ee4 	.word	0x20000ee4

08007dfc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b08a      	sub	sp, #40	@ 0x28
 8007e00:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007e06:	f000 fbb1 	bl	800856c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007e0a:	4b1d      	ldr	r3, [pc, #116]	@ (8007e80 <xTimerCreateTimerTask+0x84>)
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d021      	beq.n	8007e56 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007e16:	2300      	movs	r3, #0
 8007e18:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007e1a:	1d3a      	adds	r2, r7, #4
 8007e1c:	f107 0108 	add.w	r1, r7, #8
 8007e20:	f107 030c 	add.w	r3, r7, #12
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7fe fb15 	bl	8006454 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007e2a:	6879      	ldr	r1, [r7, #4]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	68fa      	ldr	r2, [r7, #12]
 8007e30:	9202      	str	r2, [sp, #8]
 8007e32:	9301      	str	r3, [sp, #4]
 8007e34:	2302      	movs	r3, #2
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	2300      	movs	r3, #0
 8007e3a:	460a      	mov	r2, r1
 8007e3c:	4911      	ldr	r1, [pc, #68]	@ (8007e84 <xTimerCreateTimerTask+0x88>)
 8007e3e:	4812      	ldr	r0, [pc, #72]	@ (8007e88 <xTimerCreateTimerTask+0x8c>)
 8007e40:	f7ff f8d0 	bl	8006fe4 <xTaskCreateStatic>
 8007e44:	4603      	mov	r3, r0
 8007e46:	4a11      	ldr	r2, [pc, #68]	@ (8007e8c <xTimerCreateTimerTask+0x90>)
 8007e48:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007e4a:	4b10      	ldr	r3, [pc, #64]	@ (8007e8c <xTimerCreateTimerTask+0x90>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d001      	beq.n	8007e56 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007e52:	2301      	movs	r3, #1
 8007e54:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d10b      	bne.n	8007e74 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e60:	f383 8811 	msr	BASEPRI, r3
 8007e64:	f3bf 8f6f 	isb	sy
 8007e68:	f3bf 8f4f 	dsb	sy
 8007e6c:	613b      	str	r3, [r7, #16]
}
 8007e6e:	bf00      	nop
 8007e70:	bf00      	nop
 8007e72:	e7fd      	b.n	8007e70 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007e74:	697b      	ldr	r3, [r7, #20]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3718      	adds	r7, #24
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	20000f20 	.word	0x20000f20
 8007e84:	08009014 	.word	0x08009014
 8007e88:	08008105 	.word	0x08008105
 8007e8c:	20000f24 	.word	0x20000f24

08007e90 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af02      	add	r7, sp, #8
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
 8007e9c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007e9e:	202c      	movs	r0, #44	@ 0x2c
 8007ea0:	f000 fe1c 	bl	8008adc <pvPortMalloc>
 8007ea4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d00d      	beq.n	8007ec8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007eb4:	697b      	ldr	r3, [r7, #20]
 8007eb6:	9301      	str	r3, [sp, #4]
 8007eb8:	6a3b      	ldr	r3, [r7, #32]
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	68b9      	ldr	r1, [r7, #8]
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f000 f845 	bl	8007f52 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007ec8:	697b      	ldr	r3, [r7, #20]
	}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3718      	adds	r7, #24
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}

08007ed2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007ed2:	b580      	push	{r7, lr}
 8007ed4:	b08a      	sub	sp, #40	@ 0x28
 8007ed6:	af02      	add	r7, sp, #8
 8007ed8:	60f8      	str	r0, [r7, #12]
 8007eda:	60b9      	str	r1, [r7, #8]
 8007edc:	607a      	str	r2, [r7, #4]
 8007ede:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007ee0:	232c      	movs	r3, #44	@ 0x2c
 8007ee2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	2b2c      	cmp	r3, #44	@ 0x2c
 8007ee8:	d00b      	beq.n	8007f02 <xTimerCreateStatic+0x30>
	__asm volatile
 8007eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eee:	f383 8811 	msr	BASEPRI, r3
 8007ef2:	f3bf 8f6f 	isb	sy
 8007ef6:	f3bf 8f4f 	dsb	sy
 8007efa:	61bb      	str	r3, [r7, #24]
}
 8007efc:	bf00      	nop
 8007efe:	bf00      	nop
 8007f00:	e7fd      	b.n	8007efe <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007f02:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10b      	bne.n	8007f22 <xTimerCreateStatic+0x50>
	__asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	617b      	str	r3, [r7, #20]
}
 8007f1c:	bf00      	nop
 8007f1e:	bf00      	nop
 8007f20:	e7fd      	b.n	8007f1e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f24:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00d      	beq.n	8007f48 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007f2c:	69fb      	ldr	r3, [r7, #28]
 8007f2e:	2202      	movs	r2, #2
 8007f30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	9301      	str	r3, [sp, #4]
 8007f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3a:	9300      	str	r3, [sp, #0]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	68b9      	ldr	r1, [r7, #8]
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 f805 	bl	8007f52 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007f48:	69fb      	ldr	r3, [r7, #28]
	}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3720      	adds	r7, #32
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b086      	sub	sp, #24
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	607a      	str	r2, [r7, #4]
 8007f5e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10b      	bne.n	8007f7e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f6a:	f383 8811 	msr	BASEPRI, r3
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f3bf 8f4f 	dsb	sy
 8007f76:	617b      	str	r3, [r7, #20]
}
 8007f78:	bf00      	nop
 8007f7a:	bf00      	nop
 8007f7c:	e7fd      	b.n	8007f7a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d01e      	beq.n	8007fc2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007f84:	f000 faf2 	bl	800856c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	68fa      	ldr	r2, [r7, #12]
 8007f8c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f96:	683a      	ldr	r2, [r7, #0]
 8007f98:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9c:	6a3a      	ldr	r2, [r7, #32]
 8007f9e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa2:	3304      	adds	r3, #4
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fe fa8f 	bl	80064c8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d008      	beq.n	8007fc2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fb6:	f043 0304 	orr.w	r3, r3, #4
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007fc2:	bf00      	nop
 8007fc4:	3718      	adds	r7, #24
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
	...

08007fcc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b08a      	sub	sp, #40	@ 0x28
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	60f8      	str	r0, [r7, #12]
 8007fd4:	60b9      	str	r1, [r7, #8]
 8007fd6:	607a      	str	r2, [r7, #4]
 8007fd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d10b      	bne.n	8007ffc <xTimerGenericCommand+0x30>
	__asm volatile
 8007fe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe8:	f383 8811 	msr	BASEPRI, r3
 8007fec:	f3bf 8f6f 	isb	sy
 8007ff0:	f3bf 8f4f 	dsb	sy
 8007ff4:	623b      	str	r3, [r7, #32]
}
 8007ff6:	bf00      	nop
 8007ff8:	bf00      	nop
 8007ffa:	e7fd      	b.n	8007ff8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ffc:	4b19      	ldr	r3, [pc, #100]	@ (8008064 <xTimerGenericCommand+0x98>)
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d02a      	beq.n	800805a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2b05      	cmp	r3, #5
 8008014:	dc18      	bgt.n	8008048 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008016:	f7ff fe0f 	bl	8007c38 <xTaskGetSchedulerState>
 800801a:	4603      	mov	r3, r0
 800801c:	2b02      	cmp	r3, #2
 800801e:	d109      	bne.n	8008034 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008020:	4b10      	ldr	r3, [pc, #64]	@ (8008064 <xTimerGenericCommand+0x98>)
 8008022:	6818      	ldr	r0, [r3, #0]
 8008024:	f107 0110 	add.w	r1, r7, #16
 8008028:	2300      	movs	r3, #0
 800802a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800802c:	f7fe fbea 	bl	8006804 <xQueueGenericSend>
 8008030:	6278      	str	r0, [r7, #36]	@ 0x24
 8008032:	e012      	b.n	800805a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008034:	4b0b      	ldr	r3, [pc, #44]	@ (8008064 <xTimerGenericCommand+0x98>)
 8008036:	6818      	ldr	r0, [r3, #0]
 8008038:	f107 0110 	add.w	r1, r7, #16
 800803c:	2300      	movs	r3, #0
 800803e:	2200      	movs	r2, #0
 8008040:	f7fe fbe0 	bl	8006804 <xQueueGenericSend>
 8008044:	6278      	str	r0, [r7, #36]	@ 0x24
 8008046:	e008      	b.n	800805a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008048:	4b06      	ldr	r3, [pc, #24]	@ (8008064 <xTimerGenericCommand+0x98>)
 800804a:	6818      	ldr	r0, [r3, #0]
 800804c:	f107 0110 	add.w	r1, r7, #16
 8008050:	2300      	movs	r3, #0
 8008052:	683a      	ldr	r2, [r7, #0]
 8008054:	f7fe fcd8 	bl	8006a08 <xQueueGenericSendFromISR>
 8008058:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800805c:	4618      	mov	r0, r3
 800805e:	3728      	adds	r7, #40	@ 0x28
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	20000f20 	.word	0x20000f20

08008068 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b088      	sub	sp, #32
 800806c:	af02      	add	r7, sp, #8
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008072:	4b23      	ldr	r3, [pc, #140]	@ (8008100 <prvProcessExpiredTimer+0x98>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	3304      	adds	r3, #4
 8008080:	4618      	mov	r0, r3
 8008082:	f7fe fa8b 	bl	800659c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800808c:	f003 0304 	and.w	r3, r3, #4
 8008090:	2b00      	cmp	r3, #0
 8008092:	d023      	beq.n	80080dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	699a      	ldr	r2, [r3, #24]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	18d1      	adds	r1, r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	683a      	ldr	r2, [r7, #0]
 80080a0:	6978      	ldr	r0, [r7, #20]
 80080a2:	f000 f8d5 	bl	8008250 <prvInsertTimerInActiveList>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d020      	beq.n	80080ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080ac:	2300      	movs	r3, #0
 80080ae:	9300      	str	r3, [sp, #0]
 80080b0:	2300      	movs	r3, #0
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	2100      	movs	r1, #0
 80080b6:	6978      	ldr	r0, [r7, #20]
 80080b8:	f7ff ff88 	bl	8007fcc <xTimerGenericCommand>
 80080bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d114      	bne.n	80080ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	60fb      	str	r3, [r7, #12]
}
 80080d6:	bf00      	nop
 80080d8:	bf00      	nop
 80080da:	e7fd      	b.n	80080d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080e2:	f023 0301 	bic.w	r3, r3, #1
 80080e6:	b2da      	uxtb	r2, r3
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	6978      	ldr	r0, [r7, #20]
 80080f4:	4798      	blx	r3
}
 80080f6:	bf00      	nop
 80080f8:	3718      	adds	r7, #24
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20000f18 	.word	0x20000f18

08008104 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800810c:	f107 0308 	add.w	r3, r7, #8
 8008110:	4618      	mov	r0, r3
 8008112:	f000 f859 	bl	80081c8 <prvGetNextExpireTime>
 8008116:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	4619      	mov	r1, r3
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 f805 	bl	800812c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008122:	f000 f8d7 	bl	80082d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008126:	bf00      	nop
 8008128:	e7f0      	b.n	800810c <prvTimerTask+0x8>
	...

0800812c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b084      	sub	sp, #16
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
 8008134:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008136:	f7ff f999 	bl	800746c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800813a:	f107 0308 	add.w	r3, r7, #8
 800813e:	4618      	mov	r0, r3
 8008140:	f000 f866 	bl	8008210 <prvSampleTimeNow>
 8008144:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d130      	bne.n	80081ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <prvProcessTimerOrBlockTask+0x3c>
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	429a      	cmp	r2, r3
 8008158:	d806      	bhi.n	8008168 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800815a:	f7ff f995 	bl	8007488 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800815e:	68f9      	ldr	r1, [r7, #12]
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7ff ff81 	bl	8008068 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008166:	e024      	b.n	80081b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d008      	beq.n	8008180 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800816e:	4b13      	ldr	r3, [pc, #76]	@ (80081bc <prvProcessTimerOrBlockTask+0x90>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d101      	bne.n	800817c <prvProcessTimerOrBlockTask+0x50>
 8008178:	2301      	movs	r3, #1
 800817a:	e000      	b.n	800817e <prvProcessTimerOrBlockTask+0x52>
 800817c:	2300      	movs	r3, #0
 800817e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008180:	4b0f      	ldr	r3, [pc, #60]	@ (80081c0 <prvProcessTimerOrBlockTask+0x94>)
 8008182:	6818      	ldr	r0, [r3, #0]
 8008184:	687a      	ldr	r2, [r7, #4]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	683a      	ldr	r2, [r7, #0]
 800818c:	4619      	mov	r1, r3
 800818e:	f7fe fef5 	bl	8006f7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008192:	f7ff f979 	bl	8007488 <xTaskResumeAll>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800819c:	4b09      	ldr	r3, [pc, #36]	@ (80081c4 <prvProcessTimerOrBlockTask+0x98>)
 800819e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	f3bf 8f4f 	dsb	sy
 80081a8:	f3bf 8f6f 	isb	sy
}
 80081ac:	e001      	b.n	80081b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80081ae:	f7ff f96b 	bl	8007488 <xTaskResumeAll>
}
 80081b2:	bf00      	nop
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	20000f1c 	.word	0x20000f1c
 80081c0:	20000f20 	.word	0x20000f20
 80081c4:	e000ed04 	.word	0xe000ed04

080081c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80081c8:	b480      	push	{r7}
 80081ca:	b085      	sub	sp, #20
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081d0:	4b0e      	ldr	r3, [pc, #56]	@ (800820c <prvGetNextExpireTime+0x44>)
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d101      	bne.n	80081de <prvGetNextExpireTime+0x16>
 80081da:	2201      	movs	r2, #1
 80081dc:	e000      	b.n	80081e0 <prvGetNextExpireTime+0x18>
 80081de:	2200      	movs	r2, #0
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d105      	bne.n	80081f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081ec:	4b07      	ldr	r3, [pc, #28]	@ (800820c <prvGetNextExpireTime+0x44>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	e001      	b.n	80081fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081f8:	2300      	movs	r3, #0
 80081fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081fc:	68fb      	ldr	r3, [r7, #12]
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3714      	adds	r7, #20
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	20000f18 	.word	0x20000f18

08008210 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008218:	f7ff f9d4 	bl	80075c4 <xTaskGetTickCount>
 800821c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800821e:	4b0b      	ldr	r3, [pc, #44]	@ (800824c <prvSampleTimeNow+0x3c>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68fa      	ldr	r2, [r7, #12]
 8008224:	429a      	cmp	r2, r3
 8008226:	d205      	bcs.n	8008234 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008228:	f000 f93a 	bl	80084a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	601a      	str	r2, [r3, #0]
 8008232:	e002      	b.n	800823a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800823a:	4a04      	ldr	r2, [pc, #16]	@ (800824c <prvSampleTimeNow+0x3c>)
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008240:	68fb      	ldr	r3, [r7, #12]
}
 8008242:	4618      	mov	r0, r3
 8008244:	3710      	adds	r7, #16
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000f28 	.word	0x20000f28

08008250 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800825e:	2300      	movs	r3, #0
 8008260:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	68ba      	ldr	r2, [r7, #8]
 8008266:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800826e:	68ba      	ldr	r2, [r7, #8]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	429a      	cmp	r2, r3
 8008274:	d812      	bhi.n	800829c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	1ad2      	subs	r2, r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	429a      	cmp	r2, r3
 8008282:	d302      	bcc.n	800828a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008284:	2301      	movs	r3, #1
 8008286:	617b      	str	r3, [r7, #20]
 8008288:	e01b      	b.n	80082c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800828a:	4b10      	ldr	r3, [pc, #64]	@ (80082cc <prvInsertTimerInActiveList+0x7c>)
 800828c:	681a      	ldr	r2, [r3, #0]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	3304      	adds	r3, #4
 8008292:	4619      	mov	r1, r3
 8008294:	4610      	mov	r0, r2
 8008296:	f7fe f948 	bl	800652a <vListInsert>
 800829a:	e012      	b.n	80082c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	429a      	cmp	r2, r3
 80082a2:	d206      	bcs.n	80082b2 <prvInsertTimerInActiveList+0x62>
 80082a4:	68ba      	ldr	r2, [r7, #8]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d302      	bcc.n	80082b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80082ac:	2301      	movs	r3, #1
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	e007      	b.n	80082c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80082b2:	4b07      	ldr	r3, [pc, #28]	@ (80082d0 <prvInsertTimerInActiveList+0x80>)
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	3304      	adds	r3, #4
 80082ba:	4619      	mov	r1, r3
 80082bc:	4610      	mov	r0, r2
 80082be:	f7fe f934 	bl	800652a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80082c2:	697b      	ldr	r3, [r7, #20]
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3718      	adds	r7, #24
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}
 80082cc:	20000f1c 	.word	0x20000f1c
 80082d0:	20000f18 	.word	0x20000f18

080082d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b08e      	sub	sp, #56	@ 0x38
 80082d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082da:	e0ce      	b.n	800847a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da19      	bge.n	8008316 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80082e2:	1d3b      	adds	r3, r7, #4
 80082e4:	3304      	adds	r3, #4
 80082e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80082e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d10b      	bne.n	8008306 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	61fb      	str	r3, [r7, #28]
}
 8008300:	bf00      	nop
 8008302:	bf00      	nop
 8008304:	e7fd      	b.n	8008302 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800830c:	6850      	ldr	r0, [r2, #4]
 800830e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008310:	6892      	ldr	r2, [r2, #8]
 8008312:	4611      	mov	r1, r2
 8008314:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	f2c0 80ae 	blt.w	800847a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008324:	695b      	ldr	r3, [r3, #20]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d004      	beq.n	8008334 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832c:	3304      	adds	r3, #4
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe f934 	bl	800659c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008334:	463b      	mov	r3, r7
 8008336:	4618      	mov	r0, r3
 8008338:	f7ff ff6a 	bl	8008210 <prvSampleTimeNow>
 800833c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2b09      	cmp	r3, #9
 8008342:	f200 8097 	bhi.w	8008474 <prvProcessReceivedCommands+0x1a0>
 8008346:	a201      	add	r2, pc, #4	@ (adr r2, 800834c <prvProcessReceivedCommands+0x78>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	08008375 	.word	0x08008375
 8008350:	08008375 	.word	0x08008375
 8008354:	08008375 	.word	0x08008375
 8008358:	080083eb 	.word	0x080083eb
 800835c:	080083ff 	.word	0x080083ff
 8008360:	0800844b 	.word	0x0800844b
 8008364:	08008375 	.word	0x08008375
 8008368:	08008375 	.word	0x08008375
 800836c:	080083eb 	.word	0x080083eb
 8008370:	080083ff 	.word	0x080083ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008376:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800837a:	f043 0301 	orr.w	r3, r3, #1
 800837e:	b2da      	uxtb	r2, r3
 8008380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008382:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008386:	68ba      	ldr	r2, [r7, #8]
 8008388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838a:	699b      	ldr	r3, [r3, #24]
 800838c:	18d1      	adds	r1, r2, r3
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008392:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008394:	f7ff ff5c 	bl	8008250 <prvInsertTimerInActiveList>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d06c      	beq.n	8008478 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800839e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a0:	6a1b      	ldr	r3, [r3, #32]
 80083a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083ac:	f003 0304 	and.w	r3, r3, #4
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d061      	beq.n	8008478 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b8:	699b      	ldr	r3, [r3, #24]
 80083ba:	441a      	add	r2, r3
 80083bc:	2300      	movs	r3, #0
 80083be:	9300      	str	r3, [sp, #0]
 80083c0:	2300      	movs	r3, #0
 80083c2:	2100      	movs	r1, #0
 80083c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083c6:	f7ff fe01 	bl	8007fcc <xTimerGenericCommand>
 80083ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d152      	bne.n	8008478 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80083d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d6:	f383 8811 	msr	BASEPRI, r3
 80083da:	f3bf 8f6f 	isb	sy
 80083de:	f3bf 8f4f 	dsb	sy
 80083e2:	61bb      	str	r3, [r7, #24]
}
 80083e4:	bf00      	nop
 80083e6:	bf00      	nop
 80083e8:	e7fd      	b.n	80083e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083f0:	f023 0301 	bic.w	r3, r3, #1
 80083f4:	b2da      	uxtb	r2, r3
 80083f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083fc:	e03d      	b.n	800847a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008400:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008404:	f043 0301 	orr.w	r3, r3, #1
 8008408:	b2da      	uxtb	r2, r3
 800840a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800840c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008416:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008418:	699b      	ldr	r3, [r3, #24]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d10b      	bne.n	8008436 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800841e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008422:	f383 8811 	msr	BASEPRI, r3
 8008426:	f3bf 8f6f 	isb	sy
 800842a:	f3bf 8f4f 	dsb	sy
 800842e:	617b      	str	r3, [r7, #20]
}
 8008430:	bf00      	nop
 8008432:	bf00      	nop
 8008434:	e7fd      	b.n	8008432 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008438:	699a      	ldr	r2, [r3, #24]
 800843a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843c:	18d1      	adds	r1, r2, r3
 800843e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008442:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008444:	f7ff ff04 	bl	8008250 <prvInsertTimerInActiveList>
					break;
 8008448:	e017      	b.n	800847a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800844a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	2b00      	cmp	r3, #0
 8008456:	d103      	bne.n	8008460 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008458:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800845a:	f000 fc0d 	bl	8008c78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800845e:	e00c      	b.n	800847a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008462:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008466:	f023 0301 	bic.w	r3, r3, #1
 800846a:	b2da      	uxtb	r2, r3
 800846c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800846e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008472:	e002      	b.n	800847a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008474:	bf00      	nop
 8008476:	e000      	b.n	800847a <prvProcessReceivedCommands+0x1a6>
					break;
 8008478:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800847a:	4b08      	ldr	r3, [pc, #32]	@ (800849c <prvProcessReceivedCommands+0x1c8>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	1d39      	adds	r1, r7, #4
 8008480:	2200      	movs	r2, #0
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe fb5e 	bl	8006b44 <xQueueReceive>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	f47f af26 	bne.w	80082dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008490:	bf00      	nop
 8008492:	bf00      	nop
 8008494:	3730      	adds	r7, #48	@ 0x30
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	20000f20 	.word	0x20000f20

080084a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b088      	sub	sp, #32
 80084a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80084a6:	e049      	b.n	800853c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80084a8:	4b2e      	ldr	r3, [pc, #184]	@ (8008564 <prvSwitchTimerLists+0xc4>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80084b2:	4b2c      	ldr	r3, [pc, #176]	@ (8008564 <prvSwitchTimerLists+0xc4>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	68db      	ldr	r3, [r3, #12]
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	3304      	adds	r3, #4
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fe f86b 	bl	800659c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	6a1b      	ldr	r3, [r3, #32]
 80084ca:	68f8      	ldr	r0, [r7, #12]
 80084cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084d4:	f003 0304 	and.w	r3, r3, #4
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d02f      	beq.n	800853c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	693a      	ldr	r2, [r7, #16]
 80084e2:	4413      	add	r3, r2
 80084e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80084e6:	68ba      	ldr	r2, [r7, #8]
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d90e      	bls.n	800850c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	68ba      	ldr	r2, [r7, #8]
 80084f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008564 <prvSwitchTimerLists+0xc4>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	3304      	adds	r3, #4
 8008502:	4619      	mov	r1, r3
 8008504:	4610      	mov	r0, r2
 8008506:	f7fe f810 	bl	800652a <vListInsert>
 800850a:	e017      	b.n	800853c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800850c:	2300      	movs	r3, #0
 800850e:	9300      	str	r3, [sp, #0]
 8008510:	2300      	movs	r3, #0
 8008512:	693a      	ldr	r2, [r7, #16]
 8008514:	2100      	movs	r1, #0
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f7ff fd58 	bl	8007fcc <xTimerGenericCommand>
 800851c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d10b      	bne.n	800853c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008528:	f383 8811 	msr	BASEPRI, r3
 800852c:	f3bf 8f6f 	isb	sy
 8008530:	f3bf 8f4f 	dsb	sy
 8008534:	603b      	str	r3, [r7, #0]
}
 8008536:	bf00      	nop
 8008538:	bf00      	nop
 800853a:	e7fd      	b.n	8008538 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800853c:	4b09      	ldr	r3, [pc, #36]	@ (8008564 <prvSwitchTimerLists+0xc4>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d1b0      	bne.n	80084a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008546:	4b07      	ldr	r3, [pc, #28]	@ (8008564 <prvSwitchTimerLists+0xc4>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800854c:	4b06      	ldr	r3, [pc, #24]	@ (8008568 <prvSwitchTimerLists+0xc8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a04      	ldr	r2, [pc, #16]	@ (8008564 <prvSwitchTimerLists+0xc4>)
 8008552:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008554:	4a04      	ldr	r2, [pc, #16]	@ (8008568 <prvSwitchTimerLists+0xc8>)
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	6013      	str	r3, [r2, #0]
}
 800855a:	bf00      	nop
 800855c:	3718      	adds	r7, #24
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20000f18 	.word	0x20000f18
 8008568:	20000f1c 	.word	0x20000f1c

0800856c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b082      	sub	sp, #8
 8008570:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008572:	f000 f991 	bl	8008898 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008576:	4b15      	ldr	r3, [pc, #84]	@ (80085cc <prvCheckForValidListAndQueue+0x60>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d120      	bne.n	80085c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800857e:	4814      	ldr	r0, [pc, #80]	@ (80085d0 <prvCheckForValidListAndQueue+0x64>)
 8008580:	f7fd ff82 	bl	8006488 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008584:	4813      	ldr	r0, [pc, #76]	@ (80085d4 <prvCheckForValidListAndQueue+0x68>)
 8008586:	f7fd ff7f 	bl	8006488 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800858a:	4b13      	ldr	r3, [pc, #76]	@ (80085d8 <prvCheckForValidListAndQueue+0x6c>)
 800858c:	4a10      	ldr	r2, [pc, #64]	@ (80085d0 <prvCheckForValidListAndQueue+0x64>)
 800858e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008590:	4b12      	ldr	r3, [pc, #72]	@ (80085dc <prvCheckForValidListAndQueue+0x70>)
 8008592:	4a10      	ldr	r2, [pc, #64]	@ (80085d4 <prvCheckForValidListAndQueue+0x68>)
 8008594:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008596:	2300      	movs	r3, #0
 8008598:	9300      	str	r3, [sp, #0]
 800859a:	4b11      	ldr	r3, [pc, #68]	@ (80085e0 <prvCheckForValidListAndQueue+0x74>)
 800859c:	4a11      	ldr	r2, [pc, #68]	@ (80085e4 <prvCheckForValidListAndQueue+0x78>)
 800859e:	2110      	movs	r1, #16
 80085a0:	200a      	movs	r0, #10
 80085a2:	f7fe f88f 	bl	80066c4 <xQueueGenericCreateStatic>
 80085a6:	4603      	mov	r3, r0
 80085a8:	4a08      	ldr	r2, [pc, #32]	@ (80085cc <prvCheckForValidListAndQueue+0x60>)
 80085aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80085ac:	4b07      	ldr	r3, [pc, #28]	@ (80085cc <prvCheckForValidListAndQueue+0x60>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d005      	beq.n	80085c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80085b4:	4b05      	ldr	r3, [pc, #20]	@ (80085cc <prvCheckForValidListAndQueue+0x60>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	490b      	ldr	r1, [pc, #44]	@ (80085e8 <prvCheckForValidListAndQueue+0x7c>)
 80085ba:	4618      	mov	r0, r3
 80085bc:	f7fe fcb4 	bl	8006f28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80085c0:	f000 f99c 	bl	80088fc <vPortExitCritical>
}
 80085c4:	bf00      	nop
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop
 80085cc:	20000f20 	.word	0x20000f20
 80085d0:	20000ef0 	.word	0x20000ef0
 80085d4:	20000f04 	.word	0x20000f04
 80085d8:	20000f18 	.word	0x20000f18
 80085dc:	20000f1c 	.word	0x20000f1c
 80085e0:	20000fcc 	.word	0x20000fcc
 80085e4:	20000f2c 	.word	0x20000f2c
 80085e8:	0800901c 	.word	0x0800901c

080085ec <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b086      	sub	sp, #24
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d10b      	bne.n	8008616 <pvTimerGetTimerID+0x2a>
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008602:	f383 8811 	msr	BASEPRI, r3
 8008606:	f3bf 8f6f 	isb	sy
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	60fb      	str	r3, [r7, #12]
}
 8008610:	bf00      	nop
 8008612:	bf00      	nop
 8008614:	e7fd      	b.n	8008612 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008616:	f000 f93f 	bl	8008898 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008620:	f000 f96c 	bl	80088fc <vPortExitCritical>

	return pvReturn;
 8008624:	693b      	ldr	r3, [r7, #16]
}
 8008626:	4618      	mov	r0, r3
 8008628:	3718      	adds	r7, #24
 800862a:	46bd      	mov	sp, r7
 800862c:	bd80      	pop	{r7, pc}
	...

08008630 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3b04      	subs	r3, #4
 8008640:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008648:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3b04      	subs	r3, #4
 800864e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f023 0201 	bic.w	r2, r3, #1
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3b04      	subs	r3, #4
 800865e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008660:	4a0c      	ldr	r2, [pc, #48]	@ (8008694 <pxPortInitialiseStack+0x64>)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	3b14      	subs	r3, #20
 800866a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3b04      	subs	r3, #4
 8008676:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f06f 0202 	mvn.w	r2, #2
 800867e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	3b20      	subs	r3, #32
 8008684:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008686:	68fb      	ldr	r3, [r7, #12]
}
 8008688:	4618      	mov	r0, r3
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	08008699 	.word	0x08008699

08008698 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008698:	b480      	push	{r7}
 800869a:	b085      	sub	sp, #20
 800869c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800869e:	2300      	movs	r3, #0
 80086a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80086a2:	4b13      	ldr	r3, [pc, #76]	@ (80086f0 <prvTaskExitError+0x58>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086aa:	d00b      	beq.n	80086c4 <prvTaskExitError+0x2c>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	60fb      	str	r3, [r7, #12]
}
 80086be:	bf00      	nop
 80086c0:	bf00      	nop
 80086c2:	e7fd      	b.n	80086c0 <prvTaskExitError+0x28>
	__asm volatile
 80086c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	60bb      	str	r3, [r7, #8]
}
 80086d6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80086d8:	bf00      	nop
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d0fc      	beq.n	80086da <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	3714      	adds	r7, #20
 80086e6:	46bd      	mov	sp, r7
 80086e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ec:	4770      	bx	lr
 80086ee:	bf00      	nop
 80086f0:	20000048 	.word	0x20000048
	...

08008700 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008700:	4b07      	ldr	r3, [pc, #28]	@ (8008720 <pxCurrentTCBConst2>)
 8008702:	6819      	ldr	r1, [r3, #0]
 8008704:	6808      	ldr	r0, [r1, #0]
 8008706:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800870a:	f380 8809 	msr	PSP, r0
 800870e:	f3bf 8f6f 	isb	sy
 8008712:	f04f 0000 	mov.w	r0, #0
 8008716:	f380 8811 	msr	BASEPRI, r0
 800871a:	4770      	bx	lr
 800871c:	f3af 8000 	nop.w

08008720 <pxCurrentTCBConst2>:
 8008720:	200009f0 	.word	0x200009f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008724:	bf00      	nop
 8008726:	bf00      	nop

08008728 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008728:	4808      	ldr	r0, [pc, #32]	@ (800874c <prvPortStartFirstTask+0x24>)
 800872a:	6800      	ldr	r0, [r0, #0]
 800872c:	6800      	ldr	r0, [r0, #0]
 800872e:	f380 8808 	msr	MSP, r0
 8008732:	f04f 0000 	mov.w	r0, #0
 8008736:	f380 8814 	msr	CONTROL, r0
 800873a:	b662      	cpsie	i
 800873c:	b661      	cpsie	f
 800873e:	f3bf 8f4f 	dsb	sy
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	df00      	svc	0
 8008748:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800874a:	bf00      	nop
 800874c:	e000ed08 	.word	0xe000ed08

08008750 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008756:	4b47      	ldr	r3, [pc, #284]	@ (8008874 <xPortStartScheduler+0x124>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a47      	ldr	r2, [pc, #284]	@ (8008878 <xPortStartScheduler+0x128>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d10b      	bne.n	8008778 <xPortStartScheduler+0x28>
	__asm volatile
 8008760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008764:	f383 8811 	msr	BASEPRI, r3
 8008768:	f3bf 8f6f 	isb	sy
 800876c:	f3bf 8f4f 	dsb	sy
 8008770:	60fb      	str	r3, [r7, #12]
}
 8008772:	bf00      	nop
 8008774:	bf00      	nop
 8008776:	e7fd      	b.n	8008774 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008778:	4b3e      	ldr	r3, [pc, #248]	@ (8008874 <xPortStartScheduler+0x124>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a3f      	ldr	r2, [pc, #252]	@ (800887c <xPortStartScheduler+0x12c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d10b      	bne.n	800879a <xPortStartScheduler+0x4a>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	613b      	str	r3, [r7, #16]
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop
 8008798:	e7fd      	b.n	8008796 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800879a:	4b39      	ldr	r3, [pc, #228]	@ (8008880 <xPortStartScheduler+0x130>)
 800879c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	b2db      	uxtb	r3, r3
 80087a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	22ff      	movs	r2, #255	@ 0xff
 80087aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	781b      	ldrb	r3, [r3, #0]
 80087b0:	b2db      	uxtb	r3, r3
 80087b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	b2db      	uxtb	r3, r3
 80087b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80087bc:	b2da      	uxtb	r2, r3
 80087be:	4b31      	ldr	r3, [pc, #196]	@ (8008884 <xPortStartScheduler+0x134>)
 80087c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80087c2:	4b31      	ldr	r3, [pc, #196]	@ (8008888 <xPortStartScheduler+0x138>)
 80087c4:	2207      	movs	r2, #7
 80087c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087c8:	e009      	b.n	80087de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80087ca:	4b2f      	ldr	r3, [pc, #188]	@ (8008888 <xPortStartScheduler+0x138>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3b01      	subs	r3, #1
 80087d0:	4a2d      	ldr	r2, [pc, #180]	@ (8008888 <xPortStartScheduler+0x138>)
 80087d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80087d4:	78fb      	ldrb	r3, [r7, #3]
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	005b      	lsls	r3, r3, #1
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80087de:	78fb      	ldrb	r3, [r7, #3]
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80087e6:	2b80      	cmp	r3, #128	@ 0x80
 80087e8:	d0ef      	beq.n	80087ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80087ea:	4b27      	ldr	r3, [pc, #156]	@ (8008888 <xPortStartScheduler+0x138>)
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f1c3 0307 	rsb	r3, r3, #7
 80087f2:	2b04      	cmp	r3, #4
 80087f4:	d00b      	beq.n	800880e <xPortStartScheduler+0xbe>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fa:	f383 8811 	msr	BASEPRI, r3
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f3bf 8f4f 	dsb	sy
 8008806:	60bb      	str	r3, [r7, #8]
}
 8008808:	bf00      	nop
 800880a:	bf00      	nop
 800880c:	e7fd      	b.n	800880a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800880e:	4b1e      	ldr	r3, [pc, #120]	@ (8008888 <xPortStartScheduler+0x138>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	021b      	lsls	r3, r3, #8
 8008814:	4a1c      	ldr	r2, [pc, #112]	@ (8008888 <xPortStartScheduler+0x138>)
 8008816:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008818:	4b1b      	ldr	r3, [pc, #108]	@ (8008888 <xPortStartScheduler+0x138>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008820:	4a19      	ldr	r2, [pc, #100]	@ (8008888 <xPortStartScheduler+0x138>)
 8008822:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	b2da      	uxtb	r2, r3
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800882c:	4b17      	ldr	r3, [pc, #92]	@ (800888c <xPortStartScheduler+0x13c>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a16      	ldr	r2, [pc, #88]	@ (800888c <xPortStartScheduler+0x13c>)
 8008832:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008836:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008838:	4b14      	ldr	r3, [pc, #80]	@ (800888c <xPortStartScheduler+0x13c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a13      	ldr	r2, [pc, #76]	@ (800888c <xPortStartScheduler+0x13c>)
 800883e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008842:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008844:	f000 f8da 	bl	80089fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008848:	4b11      	ldr	r3, [pc, #68]	@ (8008890 <xPortStartScheduler+0x140>)
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800884e:	f000 f8f9 	bl	8008a44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008852:	4b10      	ldr	r3, [pc, #64]	@ (8008894 <xPortStartScheduler+0x144>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a0f      	ldr	r2, [pc, #60]	@ (8008894 <xPortStartScheduler+0x144>)
 8008858:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800885c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800885e:	f7ff ff63 	bl	8008728 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008862:	f7fe ff79 	bl	8007758 <vTaskSwitchContext>
	prvTaskExitError();
 8008866:	f7ff ff17 	bl	8008698 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3718      	adds	r7, #24
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}
 8008874:	e000ed00 	.word	0xe000ed00
 8008878:	410fc271 	.word	0x410fc271
 800887c:	410fc270 	.word	0x410fc270
 8008880:	e000e400 	.word	0xe000e400
 8008884:	2000101c 	.word	0x2000101c
 8008888:	20001020 	.word	0x20001020
 800888c:	e000ed20 	.word	0xe000ed20
 8008890:	20000048 	.word	0x20000048
 8008894:	e000ef34 	.word	0xe000ef34

08008898 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
	__asm volatile
 800889e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088a2:	f383 8811 	msr	BASEPRI, r3
 80088a6:	f3bf 8f6f 	isb	sy
 80088aa:	f3bf 8f4f 	dsb	sy
 80088ae:	607b      	str	r3, [r7, #4]
}
 80088b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80088b2:	4b10      	ldr	r3, [pc, #64]	@ (80088f4 <vPortEnterCritical+0x5c>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3301      	adds	r3, #1
 80088b8:	4a0e      	ldr	r2, [pc, #56]	@ (80088f4 <vPortEnterCritical+0x5c>)
 80088ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80088bc:	4b0d      	ldr	r3, [pc, #52]	@ (80088f4 <vPortEnterCritical+0x5c>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b01      	cmp	r3, #1
 80088c2:	d110      	bne.n	80088e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80088c4:	4b0c      	ldr	r3, [pc, #48]	@ (80088f8 <vPortEnterCritical+0x60>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d00b      	beq.n	80088e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	603b      	str	r3, [r7, #0]
}
 80088e0:	bf00      	nop
 80088e2:	bf00      	nop
 80088e4:	e7fd      	b.n	80088e2 <vPortEnterCritical+0x4a>
	}
}
 80088e6:	bf00      	nop
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr
 80088f2:	bf00      	nop
 80088f4:	20000048 	.word	0x20000048
 80088f8:	e000ed04 	.word	0xe000ed04

080088fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80088fc:	b480      	push	{r7}
 80088fe:	b083      	sub	sp, #12
 8008900:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008902:	4b12      	ldr	r3, [pc, #72]	@ (800894c <vPortExitCritical+0x50>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d10b      	bne.n	8008922 <vPortExitCritical+0x26>
	__asm volatile
 800890a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800890e:	f383 8811 	msr	BASEPRI, r3
 8008912:	f3bf 8f6f 	isb	sy
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	607b      	str	r3, [r7, #4]
}
 800891c:	bf00      	nop
 800891e:	bf00      	nop
 8008920:	e7fd      	b.n	800891e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008922:	4b0a      	ldr	r3, [pc, #40]	@ (800894c <vPortExitCritical+0x50>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	3b01      	subs	r3, #1
 8008928:	4a08      	ldr	r2, [pc, #32]	@ (800894c <vPortExitCritical+0x50>)
 800892a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800892c:	4b07      	ldr	r3, [pc, #28]	@ (800894c <vPortExitCritical+0x50>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d105      	bne.n	8008940 <vPortExitCritical+0x44>
 8008934:	2300      	movs	r3, #0
 8008936:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	f383 8811 	msr	BASEPRI, r3
}
 800893e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr
 800894c:	20000048 	.word	0x20000048

08008950 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008950:	f3ef 8009 	mrs	r0, PSP
 8008954:	f3bf 8f6f 	isb	sy
 8008958:	4b15      	ldr	r3, [pc, #84]	@ (80089b0 <pxCurrentTCBConst>)
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	f01e 0f10 	tst.w	lr, #16
 8008960:	bf08      	it	eq
 8008962:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008966:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800896a:	6010      	str	r0, [r2, #0]
 800896c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008970:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008974:	f380 8811 	msr	BASEPRI, r0
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	f3bf 8f6f 	isb	sy
 8008980:	f7fe feea 	bl	8007758 <vTaskSwitchContext>
 8008984:	f04f 0000 	mov.w	r0, #0
 8008988:	f380 8811 	msr	BASEPRI, r0
 800898c:	bc09      	pop	{r0, r3}
 800898e:	6819      	ldr	r1, [r3, #0]
 8008990:	6808      	ldr	r0, [r1, #0]
 8008992:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008996:	f01e 0f10 	tst.w	lr, #16
 800899a:	bf08      	it	eq
 800899c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80089a0:	f380 8809 	msr	PSP, r0
 80089a4:	f3bf 8f6f 	isb	sy
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop
 80089ac:	f3af 8000 	nop.w

080089b0 <pxCurrentTCBConst>:
 80089b0:	200009f0 	.word	0x200009f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80089b4:	bf00      	nop
 80089b6:	bf00      	nop

080089b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	607b      	str	r3, [r7, #4]
}
 80089d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80089d2:	f7fe fe07 	bl	80075e4 <xTaskIncrementTick>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80089dc:	4b06      	ldr	r3, [pc, #24]	@ (80089f8 <xPortSysTickHandler+0x40>)
 80089de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089e2:	601a      	str	r2, [r3, #0]
 80089e4:	2300      	movs	r3, #0
 80089e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	f383 8811 	msr	BASEPRI, r3
}
 80089ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80089f0:	bf00      	nop
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}
 80089f8:	e000ed04 	.word	0xe000ed04

080089fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008a00:	4b0b      	ldr	r3, [pc, #44]	@ (8008a30 <vPortSetupTimerInterrupt+0x34>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008a06:	4b0b      	ldr	r3, [pc, #44]	@ (8008a34 <vPortSetupTimerInterrupt+0x38>)
 8008a08:	2200      	movs	r2, #0
 8008a0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008a38 <vPortSetupTimerInterrupt+0x3c>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a0a      	ldr	r2, [pc, #40]	@ (8008a3c <vPortSetupTimerInterrupt+0x40>)
 8008a12:	fba2 2303 	umull	r2, r3, r2, r3
 8008a16:	099b      	lsrs	r3, r3, #6
 8008a18:	4a09      	ldr	r2, [pc, #36]	@ (8008a40 <vPortSetupTimerInterrupt+0x44>)
 8008a1a:	3b01      	subs	r3, #1
 8008a1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008a1e:	4b04      	ldr	r3, [pc, #16]	@ (8008a30 <vPortSetupTimerInterrupt+0x34>)
 8008a20:	2207      	movs	r2, #7
 8008a22:	601a      	str	r2, [r3, #0]
}
 8008a24:	bf00      	nop
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr
 8008a2e:	bf00      	nop
 8008a30:	e000e010 	.word	0xe000e010
 8008a34:	e000e018 	.word	0xe000e018
 8008a38:	2000003c 	.word	0x2000003c
 8008a3c:	10624dd3 	.word	0x10624dd3
 8008a40:	e000e014 	.word	0xe000e014

08008a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008a44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008a54 <vPortEnableVFP+0x10>
 8008a48:	6801      	ldr	r1, [r0, #0]
 8008a4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008a4e:	6001      	str	r1, [r0, #0]
 8008a50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008a52:	bf00      	nop
 8008a54:	e000ed88 	.word	0xe000ed88

08008a58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008a58:	b480      	push	{r7}
 8008a5a:	b085      	sub	sp, #20
 8008a5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008a5e:	f3ef 8305 	mrs	r3, IPSR
 8008a62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2b0f      	cmp	r3, #15
 8008a68:	d915      	bls.n	8008a96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008a6a:	4a18      	ldr	r2, [pc, #96]	@ (8008acc <vPortValidateInterruptPriority+0x74>)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a74:	4b16      	ldr	r3, [pc, #88]	@ (8008ad0 <vPortValidateInterruptPriority+0x78>)
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	7afa      	ldrb	r2, [r7, #11]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d20b      	bcs.n	8008a96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a82:	f383 8811 	msr	BASEPRI, r3
 8008a86:	f3bf 8f6f 	isb	sy
 8008a8a:	f3bf 8f4f 	dsb	sy
 8008a8e:	607b      	str	r3, [r7, #4]
}
 8008a90:	bf00      	nop
 8008a92:	bf00      	nop
 8008a94:	e7fd      	b.n	8008a92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a96:	4b0f      	ldr	r3, [pc, #60]	@ (8008ad4 <vPortValidateInterruptPriority+0x7c>)
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ad8 <vPortValidateInterruptPriority+0x80>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d90b      	bls.n	8008abe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aaa:	f383 8811 	msr	BASEPRI, r3
 8008aae:	f3bf 8f6f 	isb	sy
 8008ab2:	f3bf 8f4f 	dsb	sy
 8008ab6:	603b      	str	r3, [r7, #0]
}
 8008ab8:	bf00      	nop
 8008aba:	bf00      	nop
 8008abc:	e7fd      	b.n	8008aba <vPortValidateInterruptPriority+0x62>
	}
 8008abe:	bf00      	nop
 8008ac0:	3714      	adds	r7, #20
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac8:	4770      	bx	lr
 8008aca:	bf00      	nop
 8008acc:	e000e3f0 	.word	0xe000e3f0
 8008ad0:	2000101c 	.word	0x2000101c
 8008ad4:	e000ed0c 	.word	0xe000ed0c
 8008ad8:	20001020 	.word	0x20001020

08008adc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08a      	sub	sp, #40	@ 0x28
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008ae8:	f7fe fcc0 	bl	800746c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008aec:	4b5c      	ldr	r3, [pc, #368]	@ (8008c60 <pvPortMalloc+0x184>)
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008af4:	f000 f924 	bl	8008d40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008af8:	4b5a      	ldr	r3, [pc, #360]	@ (8008c64 <pvPortMalloc+0x188>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	4013      	ands	r3, r2
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	f040 8095 	bne.w	8008c30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d01e      	beq.n	8008b4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008b0c:	2208      	movs	r2, #8
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4413      	add	r3, r2
 8008b12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f003 0307 	and.w	r3, r3, #7
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d015      	beq.n	8008b4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f023 0307 	bic.w	r3, r3, #7
 8008b24:	3308      	adds	r3, #8
 8008b26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00b      	beq.n	8008b4a <pvPortMalloc+0x6e>
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	617b      	str	r3, [r7, #20]
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop
 8008b48:	e7fd      	b.n	8008b46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d06f      	beq.n	8008c30 <pvPortMalloc+0x154>
 8008b50:	4b45      	ldr	r3, [pc, #276]	@ (8008c68 <pvPortMalloc+0x18c>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	429a      	cmp	r2, r3
 8008b58:	d86a      	bhi.n	8008c30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008b5a:	4b44      	ldr	r3, [pc, #272]	@ (8008c6c <pvPortMalloc+0x190>)
 8008b5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008b5e:	4b43      	ldr	r3, [pc, #268]	@ (8008c6c <pvPortMalloc+0x190>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b64:	e004      	b.n	8008b70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	429a      	cmp	r2, r3
 8008b78:	d903      	bls.n	8008b82 <pvPortMalloc+0xa6>
 8008b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1f1      	bne.n	8008b66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b82:	4b37      	ldr	r3, [pc, #220]	@ (8008c60 <pvPortMalloc+0x184>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b88:	429a      	cmp	r2, r3
 8008b8a:	d051      	beq.n	8008c30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2208      	movs	r2, #8
 8008b92:	4413      	add	r3, r2
 8008b94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	6a3b      	ldr	r3, [r7, #32]
 8008b9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	1ad2      	subs	r2, r2, r3
 8008ba6:	2308      	movs	r3, #8
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d920      	bls.n	8008bf0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	f003 0307 	and.w	r3, r3, #7
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00b      	beq.n	8008bd8 <pvPortMalloc+0xfc>
	__asm volatile
 8008bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc4:	f383 8811 	msr	BASEPRI, r3
 8008bc8:	f3bf 8f6f 	isb	sy
 8008bcc:	f3bf 8f4f 	dsb	sy
 8008bd0:	613b      	str	r3, [r7, #16]
}
 8008bd2:	bf00      	nop
 8008bd4:	bf00      	nop
 8008bd6:	e7fd      	b.n	8008bd4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bda:	685a      	ldr	r2, [r3, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	69bb      	ldr	r3, [r7, #24]
 8008be2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008bea:	69b8      	ldr	r0, [r7, #24]
 8008bec:	f000 f90a 	bl	8008e04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008bf0:	4b1d      	ldr	r3, [pc, #116]	@ (8008c68 <pvPortMalloc+0x18c>)
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	1ad3      	subs	r3, r2, r3
 8008bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8008c68 <pvPortMalloc+0x18c>)
 8008bfc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8008c68 <pvPortMalloc+0x18c>)
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	4b1b      	ldr	r3, [pc, #108]	@ (8008c70 <pvPortMalloc+0x194>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d203      	bcs.n	8008c12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008c0a:	4b17      	ldr	r3, [pc, #92]	@ (8008c68 <pvPortMalloc+0x18c>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a18      	ldr	r2, [pc, #96]	@ (8008c70 <pvPortMalloc+0x194>)
 8008c10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	4b13      	ldr	r3, [pc, #76]	@ (8008c64 <pvPortMalloc+0x188>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	431a      	orrs	r2, r3
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c22:	2200      	movs	r2, #0
 8008c24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008c26:	4b13      	ldr	r3, [pc, #76]	@ (8008c74 <pvPortMalloc+0x198>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	4a11      	ldr	r2, [pc, #68]	@ (8008c74 <pvPortMalloc+0x198>)
 8008c2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008c30:	f7fe fc2a 	bl	8007488 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c34:	69fb      	ldr	r3, [r7, #28]
 8008c36:	f003 0307 	and.w	r3, r3, #7
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <pvPortMalloc+0x17a>
	__asm volatile
 8008c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c42:	f383 8811 	msr	BASEPRI, r3
 8008c46:	f3bf 8f6f 	isb	sy
 8008c4a:	f3bf 8f4f 	dsb	sy
 8008c4e:	60fb      	str	r3, [r7, #12]
}
 8008c50:	bf00      	nop
 8008c52:	bf00      	nop
 8008c54:	e7fd      	b.n	8008c52 <pvPortMalloc+0x176>
	return pvReturn;
 8008c56:	69fb      	ldr	r3, [r7, #28]
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3728      	adds	r7, #40	@ 0x28
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	20001be4 	.word	0x20001be4
 8008c64:	20001bf8 	.word	0x20001bf8
 8008c68:	20001be8 	.word	0x20001be8
 8008c6c:	20001bdc 	.word	0x20001bdc
 8008c70:	20001bec 	.word	0x20001bec
 8008c74:	20001bf0 	.word	0x20001bf0

08008c78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b086      	sub	sp, #24
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d04f      	beq.n	8008d2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c8a:	2308      	movs	r3, #8
 8008c8c:	425b      	negs	r3, r3
 8008c8e:	697a      	ldr	r2, [r7, #20]
 8008c90:	4413      	add	r3, r2
 8008c92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	4b25      	ldr	r3, [pc, #148]	@ (8008d34 <vPortFree+0xbc>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4013      	ands	r3, r2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10b      	bne.n	8008cbe <vPortFree+0x46>
	__asm volatile
 8008ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008caa:	f383 8811 	msr	BASEPRI, r3
 8008cae:	f3bf 8f6f 	isb	sy
 8008cb2:	f3bf 8f4f 	dsb	sy
 8008cb6:	60fb      	str	r3, [r7, #12]
}
 8008cb8:	bf00      	nop
 8008cba:	bf00      	nop
 8008cbc:	e7fd      	b.n	8008cba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008cbe:	693b      	ldr	r3, [r7, #16]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00b      	beq.n	8008cde <vPortFree+0x66>
	__asm volatile
 8008cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cca:	f383 8811 	msr	BASEPRI, r3
 8008cce:	f3bf 8f6f 	isb	sy
 8008cd2:	f3bf 8f4f 	dsb	sy
 8008cd6:	60bb      	str	r3, [r7, #8]
}
 8008cd8:	bf00      	nop
 8008cda:	bf00      	nop
 8008cdc:	e7fd      	b.n	8008cda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	685a      	ldr	r2, [r3, #4]
 8008ce2:	4b14      	ldr	r3, [pc, #80]	@ (8008d34 <vPortFree+0xbc>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01e      	beq.n	8008d2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d11a      	bne.n	8008d2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008cf4:	693b      	ldr	r3, [r7, #16]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8008d34 <vPortFree+0xbc>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	43db      	mvns	r3, r3
 8008cfe:	401a      	ands	r2, r3
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d04:	f7fe fbb2 	bl	800746c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d38 <vPortFree+0xc0>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	4413      	add	r3, r2
 8008d12:	4a09      	ldr	r2, [pc, #36]	@ (8008d38 <vPortFree+0xc0>)
 8008d14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d16:	6938      	ldr	r0, [r7, #16]
 8008d18:	f000 f874 	bl	8008e04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008d1c:	4b07      	ldr	r3, [pc, #28]	@ (8008d3c <vPortFree+0xc4>)
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	3301      	adds	r3, #1
 8008d22:	4a06      	ldr	r2, [pc, #24]	@ (8008d3c <vPortFree+0xc4>)
 8008d24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008d26:	f7fe fbaf 	bl	8007488 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008d2a:	bf00      	nop
 8008d2c:	3718      	adds	r7, #24
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}
 8008d32:	bf00      	nop
 8008d34:	20001bf8 	.word	0x20001bf8
 8008d38:	20001be8 	.word	0x20001be8
 8008d3c:	20001bf4 	.word	0x20001bf4

08008d40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008d46:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8008d4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008d4c:	4b27      	ldr	r3, [pc, #156]	@ (8008dec <prvHeapInit+0xac>)
 8008d4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f003 0307 	and.w	r3, r3, #7
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00c      	beq.n	8008d74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	3307      	adds	r3, #7
 8008d5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	f023 0307 	bic.w	r3, r3, #7
 8008d66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008d68:	68ba      	ldr	r2, [r7, #8]
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	4a1f      	ldr	r2, [pc, #124]	@ (8008dec <prvHeapInit+0xac>)
 8008d70:	4413      	add	r3, r2
 8008d72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d78:	4a1d      	ldr	r2, [pc, #116]	@ (8008df0 <prvHeapInit+0xb0>)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8008df0 <prvHeapInit+0xb0>)
 8008d80:	2200      	movs	r2, #0
 8008d82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	4413      	add	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d8c:	2208      	movs	r2, #8
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	1a9b      	subs	r3, r3, r2
 8008d92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f023 0307 	bic.w	r3, r3, #7
 8008d9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	4a15      	ldr	r2, [pc, #84]	@ (8008df4 <prvHeapInit+0xb4>)
 8008da0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008da2:	4b14      	ldr	r3, [pc, #80]	@ (8008df4 <prvHeapInit+0xb4>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2200      	movs	r2, #0
 8008da8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008daa:	4b12      	ldr	r3, [pc, #72]	@ (8008df4 <prvHeapInit+0xb4>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	2200      	movs	r2, #0
 8008db0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008db6:	683b      	ldr	r3, [r7, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	1ad2      	subs	r2, r2, r3
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8008df4 <prvHeapInit+0xb4>)
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	4a0a      	ldr	r2, [pc, #40]	@ (8008df8 <prvHeapInit+0xb8>)
 8008dce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	685b      	ldr	r3, [r3, #4]
 8008dd4:	4a09      	ldr	r2, [pc, #36]	@ (8008dfc <prvHeapInit+0xbc>)
 8008dd6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008dd8:	4b09      	ldr	r3, [pc, #36]	@ (8008e00 <prvHeapInit+0xc0>)
 8008dda:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008dde:	601a      	str	r2, [r3, #0]
}
 8008de0:	bf00      	nop
 8008de2:	3714      	adds	r7, #20
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr
 8008dec:	20001024 	.word	0x20001024
 8008df0:	20001bdc 	.word	0x20001bdc
 8008df4:	20001be4 	.word	0x20001be4
 8008df8:	20001bec 	.word	0x20001bec
 8008dfc:	20001be8 	.word	0x20001be8
 8008e00:	20001bf8 	.word	0x20001bf8

08008e04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e04:	b480      	push	{r7}
 8008e06:	b085      	sub	sp, #20
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e0c:	4b28      	ldr	r3, [pc, #160]	@ (8008eb0 <prvInsertBlockIntoFreeList+0xac>)
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	e002      	b.n	8008e18 <prvInsertBlockIntoFreeList+0x14>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d8f7      	bhi.n	8008e12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	68ba      	ldr	r2, [r7, #8]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d108      	bne.n	8008e46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	685a      	ldr	r2, [r3, #4]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	685b      	ldr	r3, [r3, #4]
 8008e3c:	441a      	add	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	68ba      	ldr	r2, [r7, #8]
 8008e50:	441a      	add	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d118      	bne.n	8008e8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681a      	ldr	r2, [r3, #0]
 8008e5e:	4b15      	ldr	r3, [pc, #84]	@ (8008eb4 <prvInsertBlockIntoFreeList+0xb0>)
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d00d      	beq.n	8008e82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	685a      	ldr	r2, [r3, #4]
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	441a      	add	r2, r3
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	e008      	b.n	8008e94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e82:	4b0c      	ldr	r3, [pc, #48]	@ (8008eb4 <prvInsertBlockIntoFreeList+0xb0>)
 8008e84:	681a      	ldr	r2, [r3, #0]
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	e003      	b.n	8008e94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e94:	68fa      	ldr	r2, [r7, #12]
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d002      	beq.n	8008ea2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ea2:	bf00      	nop
 8008ea4:	3714      	adds	r7, #20
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eac:	4770      	bx	lr
 8008eae:	bf00      	nop
 8008eb0:	20001bdc 	.word	0x20001bdc
 8008eb4:	20001be4 	.word	0x20001be4

08008eb8 <memset>:
 8008eb8:	4402      	add	r2, r0
 8008eba:	4603      	mov	r3, r0
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d100      	bne.n	8008ec2 <memset+0xa>
 8008ec0:	4770      	bx	lr
 8008ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ec6:	e7f9      	b.n	8008ebc <memset+0x4>

08008ec8 <__libc_init_array>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	4d0d      	ldr	r5, [pc, #52]	@ (8008f00 <__libc_init_array+0x38>)
 8008ecc:	4c0d      	ldr	r4, [pc, #52]	@ (8008f04 <__libc_init_array+0x3c>)
 8008ece:	1b64      	subs	r4, r4, r5
 8008ed0:	10a4      	asrs	r4, r4, #2
 8008ed2:	2600      	movs	r6, #0
 8008ed4:	42a6      	cmp	r6, r4
 8008ed6:	d109      	bne.n	8008eec <__libc_init_array+0x24>
 8008ed8:	4d0b      	ldr	r5, [pc, #44]	@ (8008f08 <__libc_init_array+0x40>)
 8008eda:	4c0c      	ldr	r4, [pc, #48]	@ (8008f0c <__libc_init_array+0x44>)
 8008edc:	f000 f826 	bl	8008f2c <_init>
 8008ee0:	1b64      	subs	r4, r4, r5
 8008ee2:	10a4      	asrs	r4, r4, #2
 8008ee4:	2600      	movs	r6, #0
 8008ee6:	42a6      	cmp	r6, r4
 8008ee8:	d105      	bne.n	8008ef6 <__libc_init_array+0x2e>
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef0:	4798      	blx	r3
 8008ef2:	3601      	adds	r6, #1
 8008ef4:	e7ee      	b.n	8008ed4 <__libc_init_array+0xc>
 8008ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008efa:	4798      	blx	r3
 8008efc:	3601      	adds	r6, #1
 8008efe:	e7f2      	b.n	8008ee6 <__libc_init_array+0x1e>
 8008f00:	080090e8 	.word	0x080090e8
 8008f04:	080090e8 	.word	0x080090e8
 8008f08:	080090e8 	.word	0x080090e8
 8008f0c:	080090ec 	.word	0x080090ec

08008f10 <memcpy>:
 8008f10:	440a      	add	r2, r1
 8008f12:	4291      	cmp	r1, r2
 8008f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f18:	d100      	bne.n	8008f1c <memcpy+0xc>
 8008f1a:	4770      	bx	lr
 8008f1c:	b510      	push	{r4, lr}
 8008f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f26:	4291      	cmp	r1, r2
 8008f28:	d1f9      	bne.n	8008f1e <memcpy+0xe>
 8008f2a:	bd10      	pop	{r4, pc}

08008f2c <_init>:
 8008f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f2e:	bf00      	nop
 8008f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f32:	bc08      	pop	{r3}
 8008f34:	469e      	mov	lr, r3
 8008f36:	4770      	bx	lr

08008f38 <_fini>:
 8008f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f3a:	bf00      	nop
 8008f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f3e:	bc08      	pop	{r3}
 8008f40:	469e      	mov	lr, r3
 8008f42:	4770      	bx	lr

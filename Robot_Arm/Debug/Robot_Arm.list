
Robot_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  08009744  08009744  0000a744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009914  08009914  0000b04c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009914  08009914  0000a914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800991c  0800991c  0000b04c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800991c  0800991c  0000a91c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009920  08009920  0000a920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08009924  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bdc  2000004c  08009970  0000b04c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c28  08009970  0000bc28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b04c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aafa  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035df  00000000  00000000  00025b76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  00029158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001206  00000000  00000000  0002a870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c76  00000000  00000000  0002ba76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019506  00000000  00000000  0002f6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd0b7  00000000  00000000  00048bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145ca9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062dc  00000000  00000000  00145cec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0014bfc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000004c 	.word	0x2000004c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800972c 	.word	0x0800972c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000050 	.word	0x20000050
 80001cc:	0800972c 	.word	0x0800972c

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	@ 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2iz>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007a4:	d215      	bcs.n	80007d2 <__aeabi_d2iz+0x36>
 80007a6:	d511      	bpl.n	80007cc <__aeabi_d2iz+0x30>
 80007a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b0:	d912      	bls.n	80007d8 <__aeabi_d2iz+0x3c>
 80007b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	bf18      	it	ne
 80007c8:	4240      	negne	r0, r0
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d105      	bne.n	80007e4 <__aeabi_d2iz+0x48>
 80007d8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007dc:	bf08      	it	eq
 80007de:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000800:	f000 b988 	b.w	8000b14 <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9d08      	ldr	r5, [sp, #32]
 8000822:	468e      	mov	lr, r1
 8000824:	4604      	mov	r4, r0
 8000826:	4688      	mov	r8, r1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d14a      	bne.n	80008c2 <__udivmoddi4+0xa6>
 800082c:	428a      	cmp	r2, r1
 800082e:	4617      	mov	r7, r2
 8000830:	d962      	bls.n	80008f8 <__udivmoddi4+0xdc>
 8000832:	fab2 f682 	clz	r6, r2
 8000836:	b14e      	cbz	r6, 800084c <__udivmoddi4+0x30>
 8000838:	f1c6 0320 	rsb	r3, r6, #32
 800083c:	fa01 f806 	lsl.w	r8, r1, r6
 8000840:	fa20 f303 	lsr.w	r3, r0, r3
 8000844:	40b7      	lsls	r7, r6
 8000846:	ea43 0808 	orr.w	r8, r3, r8
 800084a:	40b4      	lsls	r4, r6
 800084c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000850:	fa1f fc87 	uxth.w	ip, r7
 8000854:	fbb8 f1fe 	udiv	r1, r8, lr
 8000858:	0c23      	lsrs	r3, r4, #16
 800085a:	fb0e 8811 	mls	r8, lr, r1, r8
 800085e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000862:	fb01 f20c 	mul.w	r2, r1, ip
 8000866:	429a      	cmp	r2, r3
 8000868:	d909      	bls.n	800087e <__udivmoddi4+0x62>
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000870:	f080 80ea 	bcs.w	8000a48 <__udivmoddi4+0x22c>
 8000874:	429a      	cmp	r2, r3
 8000876:	f240 80e7 	bls.w	8000a48 <__udivmoddi4+0x22c>
 800087a:	3902      	subs	r1, #2
 800087c:	443b      	add	r3, r7
 800087e:	1a9a      	subs	r2, r3, r2
 8000880:	b2a3      	uxth	r3, r4
 8000882:	fbb2 f0fe 	udiv	r0, r2, lr
 8000886:	fb0e 2210 	mls	r2, lr, r0, r2
 800088a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800088e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000892:	459c      	cmp	ip, r3
 8000894:	d909      	bls.n	80008aa <__udivmoddi4+0x8e>
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	f100 32ff 	add.w	r2, r0, #4294967295
 800089c:	f080 80d6 	bcs.w	8000a4c <__udivmoddi4+0x230>
 80008a0:	459c      	cmp	ip, r3
 80008a2:	f240 80d3 	bls.w	8000a4c <__udivmoddi4+0x230>
 80008a6:	443b      	add	r3, r7
 80008a8:	3802      	subs	r0, #2
 80008aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008ae:	eba3 030c 	sub.w	r3, r3, ip
 80008b2:	2100      	movs	r1, #0
 80008b4:	b11d      	cbz	r5, 80008be <__udivmoddi4+0xa2>
 80008b6:	40f3      	lsrs	r3, r6
 80008b8:	2200      	movs	r2, #0
 80008ba:	e9c5 3200 	strd	r3, r2, [r5]
 80008be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d905      	bls.n	80008d2 <__udivmoddi4+0xb6>
 80008c6:	b10d      	cbz	r5, 80008cc <__udivmoddi4+0xb0>
 80008c8:	e9c5 0100 	strd	r0, r1, [r5]
 80008cc:	2100      	movs	r1, #0
 80008ce:	4608      	mov	r0, r1
 80008d0:	e7f5      	b.n	80008be <__udivmoddi4+0xa2>
 80008d2:	fab3 f183 	clz	r1, r3
 80008d6:	2900      	cmp	r1, #0
 80008d8:	d146      	bne.n	8000968 <__udivmoddi4+0x14c>
 80008da:	4573      	cmp	r3, lr
 80008dc:	d302      	bcc.n	80008e4 <__udivmoddi4+0xc8>
 80008de:	4282      	cmp	r2, r0
 80008e0:	f200 8105 	bhi.w	8000aee <__udivmoddi4+0x2d2>
 80008e4:	1a84      	subs	r4, r0, r2
 80008e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80008ea:	2001      	movs	r0, #1
 80008ec:	4690      	mov	r8, r2
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d0e5      	beq.n	80008be <__udivmoddi4+0xa2>
 80008f2:	e9c5 4800 	strd	r4, r8, [r5]
 80008f6:	e7e2      	b.n	80008be <__udivmoddi4+0xa2>
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	f000 8090 	beq.w	8000a1e <__udivmoddi4+0x202>
 80008fe:	fab2 f682 	clz	r6, r2
 8000902:	2e00      	cmp	r6, #0
 8000904:	f040 80a4 	bne.w	8000a50 <__udivmoddi4+0x234>
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	0c03      	lsrs	r3, r0, #16
 800090c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000910:	b280      	uxth	r0, r0
 8000912:	b2bc      	uxth	r4, r7
 8000914:	2101      	movs	r1, #1
 8000916:	fbb2 fcfe 	udiv	ip, r2, lr
 800091a:	fb0e 221c 	mls	r2, lr, ip, r2
 800091e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000922:	fb04 f20c 	mul.w	r2, r4, ip
 8000926:	429a      	cmp	r2, r3
 8000928:	d907      	bls.n	800093a <__udivmoddi4+0x11e>
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000930:	d202      	bcs.n	8000938 <__udivmoddi4+0x11c>
 8000932:	429a      	cmp	r2, r3
 8000934:	f200 80e0 	bhi.w	8000af8 <__udivmoddi4+0x2dc>
 8000938:	46c4      	mov	ip, r8
 800093a:	1a9b      	subs	r3, r3, r2
 800093c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000940:	fb0e 3312 	mls	r3, lr, r2, r3
 8000944:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000948:	fb02 f404 	mul.w	r4, r2, r4
 800094c:	429c      	cmp	r4, r3
 800094e:	d907      	bls.n	8000960 <__udivmoddi4+0x144>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f102 30ff 	add.w	r0, r2, #4294967295
 8000956:	d202      	bcs.n	800095e <__udivmoddi4+0x142>
 8000958:	429c      	cmp	r4, r3
 800095a:	f200 80ca 	bhi.w	8000af2 <__udivmoddi4+0x2d6>
 800095e:	4602      	mov	r2, r0
 8000960:	1b1b      	subs	r3, r3, r4
 8000962:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000966:	e7a5      	b.n	80008b4 <__udivmoddi4+0x98>
 8000968:	f1c1 0620 	rsb	r6, r1, #32
 800096c:	408b      	lsls	r3, r1
 800096e:	fa22 f706 	lsr.w	r7, r2, r6
 8000972:	431f      	orrs	r7, r3
 8000974:	fa0e f401 	lsl.w	r4, lr, r1
 8000978:	fa20 f306 	lsr.w	r3, r0, r6
 800097c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000980:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000984:	4323      	orrs	r3, r4
 8000986:	fa00 f801 	lsl.w	r8, r0, r1
 800098a:	fa1f fc87 	uxth.w	ip, r7
 800098e:	fbbe f0f9 	udiv	r0, lr, r9
 8000992:	0c1c      	lsrs	r4, r3, #16
 8000994:	fb09 ee10 	mls	lr, r9, r0, lr
 8000998:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800099c:	fb00 fe0c 	mul.w	lr, r0, ip
 80009a0:	45a6      	cmp	lr, r4
 80009a2:	fa02 f201 	lsl.w	r2, r2, r1
 80009a6:	d909      	bls.n	80009bc <__udivmoddi4+0x1a0>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80009ae:	f080 809c 	bcs.w	8000aea <__udivmoddi4+0x2ce>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f240 8099 	bls.w	8000aea <__udivmoddi4+0x2ce>
 80009b8:	3802      	subs	r0, #2
 80009ba:	443c      	add	r4, r7
 80009bc:	eba4 040e 	sub.w	r4, r4, lr
 80009c0:	fa1f fe83 	uxth.w	lr, r3
 80009c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80009c8:	fb09 4413 	mls	r4, r9, r3, r4
 80009cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80009d4:	45a4      	cmp	ip, r4
 80009d6:	d908      	bls.n	80009ea <__udivmoddi4+0x1ce>
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	f103 3eff 	add.w	lr, r3, #4294967295
 80009de:	f080 8082 	bcs.w	8000ae6 <__udivmoddi4+0x2ca>
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d97f      	bls.n	8000ae6 <__udivmoddi4+0x2ca>
 80009e6:	3b02      	subs	r3, #2
 80009e8:	443c      	add	r4, r7
 80009ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009ee:	eba4 040c 	sub.w	r4, r4, ip
 80009f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80009f6:	4564      	cmp	r4, ip
 80009f8:	4673      	mov	r3, lr
 80009fa:	46e1      	mov	r9, ip
 80009fc:	d362      	bcc.n	8000ac4 <__udivmoddi4+0x2a8>
 80009fe:	d05f      	beq.n	8000ac0 <__udivmoddi4+0x2a4>
 8000a00:	b15d      	cbz	r5, 8000a1a <__udivmoddi4+0x1fe>
 8000a02:	ebb8 0203 	subs.w	r2, r8, r3
 8000a06:	eb64 0409 	sbc.w	r4, r4, r9
 8000a0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000a12:	431e      	orrs	r6, r3
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	e9c5 6400 	strd	r6, r4, [r5]
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	e74f      	b.n	80008be <__udivmoddi4+0xa2>
 8000a1e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a22:	0c01      	lsrs	r1, r0, #16
 8000a24:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a28:	b280      	uxth	r0, r0
 8000a2a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4638      	mov	r0, r7
 8000a32:	463c      	mov	r4, r7
 8000a34:	46b8      	mov	r8, r7
 8000a36:	46be      	mov	lr, r7
 8000a38:	2620      	movs	r6, #32
 8000a3a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a3e:	eba2 0208 	sub.w	r2, r2, r8
 8000a42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a46:	e766      	b.n	8000916 <__udivmoddi4+0xfa>
 8000a48:	4601      	mov	r1, r0
 8000a4a:	e718      	b.n	800087e <__udivmoddi4+0x62>
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	e72c      	b.n	80008aa <__udivmoddi4+0x8e>
 8000a50:	f1c6 0220 	rsb	r2, r6, #32
 8000a54:	fa2e f302 	lsr.w	r3, lr, r2
 8000a58:	40b7      	lsls	r7, r6
 8000a5a:	40b1      	lsls	r1, r6
 8000a5c:	fa20 f202 	lsr.w	r2, r0, r2
 8000a60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a64:	430a      	orrs	r2, r1
 8000a66:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a6a:	b2bc      	uxth	r4, r7
 8000a6c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a70:	0c11      	lsrs	r1, r2, #16
 8000a72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a76:	fb08 f904 	mul.w	r9, r8, r4
 8000a7a:	40b0      	lsls	r0, r6
 8000a7c:	4589      	cmp	r9, r1
 8000a7e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a82:	b280      	uxth	r0, r0
 8000a84:	d93e      	bls.n	8000b04 <__udivmoddi4+0x2e8>
 8000a86:	1879      	adds	r1, r7, r1
 8000a88:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a8c:	d201      	bcs.n	8000a92 <__udivmoddi4+0x276>
 8000a8e:	4589      	cmp	r9, r1
 8000a90:	d81f      	bhi.n	8000ad2 <__udivmoddi4+0x2b6>
 8000a92:	eba1 0109 	sub.w	r1, r1, r9
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa2:	b292      	uxth	r2, r2
 8000aa4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000aa8:	4542      	cmp	r2, r8
 8000aaa:	d229      	bcs.n	8000b00 <__udivmoddi4+0x2e4>
 8000aac:	18ba      	adds	r2, r7, r2
 8000aae:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ab2:	d2c4      	bcs.n	8000a3e <__udivmoddi4+0x222>
 8000ab4:	4542      	cmp	r2, r8
 8000ab6:	d2c2      	bcs.n	8000a3e <__udivmoddi4+0x222>
 8000ab8:	f1a9 0102 	sub.w	r1, r9, #2
 8000abc:	443a      	add	r2, r7
 8000abe:	e7be      	b.n	8000a3e <__udivmoddi4+0x222>
 8000ac0:	45f0      	cmp	r8, lr
 8000ac2:	d29d      	bcs.n	8000a00 <__udivmoddi4+0x1e4>
 8000ac4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ac8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000acc:	3801      	subs	r0, #1
 8000ace:	46e1      	mov	r9, ip
 8000ad0:	e796      	b.n	8000a00 <__udivmoddi4+0x1e4>
 8000ad2:	eba7 0909 	sub.w	r9, r7, r9
 8000ad6:	4449      	add	r1, r9
 8000ad8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000adc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ae0:	fb09 f804 	mul.w	r8, r9, r4
 8000ae4:	e7db      	b.n	8000a9e <__udivmoddi4+0x282>
 8000ae6:	4673      	mov	r3, lr
 8000ae8:	e77f      	b.n	80009ea <__udivmoddi4+0x1ce>
 8000aea:	4650      	mov	r0, sl
 8000aec:	e766      	b.n	80009bc <__udivmoddi4+0x1a0>
 8000aee:	4608      	mov	r0, r1
 8000af0:	e6fd      	b.n	80008ee <__udivmoddi4+0xd2>
 8000af2:	443b      	add	r3, r7
 8000af4:	3a02      	subs	r2, #2
 8000af6:	e733      	b.n	8000960 <__udivmoddi4+0x144>
 8000af8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	e71c      	b.n	800093a <__udivmoddi4+0x11e>
 8000b00:	4649      	mov	r1, r9
 8000b02:	e79c      	b.n	8000a3e <__udivmoddi4+0x222>
 8000b04:	eba1 0109 	sub.w	r1, r1, r9
 8000b08:	46c4      	mov	ip, r8
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fb09 f804 	mul.w	r8, r9, r4
 8000b12:	e7c4      	b.n	8000a9e <__udivmoddi4+0x282>

08000b14 <__aeabi_idiv0>:
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f002 f94a 	bl	8002db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f87e 	bl	8000c20 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f000 fb2c 	bl	8001180 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b28:	f000 fafa 	bl	8001120 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b2c:	f000 f95a 	bl	8000de4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b30:	f000 f9b2 	bl	8000e98 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b34:	f000 f8c6 	bl	8000cc4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000b38:	f000 fa08 	bl	8000f4c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000b3c:	f000 fa60 	bl	8001000 <MX_TIM8_Init>
//	index_desired_position = 0;
//	middle_desired_position = 0;
//	ring_desired_position = 0;
//	pinky_desired_position = 900;

  SignLetter('A');
 8000b40:	2041      	movs	r0, #65	@ 0x41
 8000b42:	f000 fc69 	bl	8001418 <SignLetter>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b46:	f005 fdd9 	bl	80066fc <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Index_Finger */
  Index_FingerHandle = osTimerNew(Index, osTimerOnce, NULL, &Index_Finger_attributes);
 8000b4a:	4b20      	ldr	r3, [pc, #128]	@ (8000bcc <main+0xb4>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	481f      	ldr	r0, [pc, #124]	@ (8000bd0 <main+0xb8>)
 8000b52:	f005 fedf 	bl	8006914 <osTimerNew>
 8000b56:	4603      	mov	r3, r0
 8000b58:	4a1e      	ldr	r2, [pc, #120]	@ (8000bd4 <main+0xbc>)
 8000b5a:	6013      	str	r3, [r2, #0]

  /* creation of Thumb_Finger */
  Thumb_FingerHandle = osTimerNew(Thumb, osTimerOnce, NULL, &Thumb_Finger_attributes);
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <main+0xc0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2100      	movs	r1, #0
 8000b62:	481e      	ldr	r0, [pc, #120]	@ (8000bdc <main+0xc4>)
 8000b64:	f005 fed6 	bl	8006914 <osTimerNew>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	4a1d      	ldr	r2, [pc, #116]	@ (8000be0 <main+0xc8>)
 8000b6c:	6013      	str	r3, [r2, #0]

  /* creation of Middle_Finger */
  Middle_FingerHandle = osTimerNew(Middle, osTimerOnce, NULL, &Middle_Finger_attributes);
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000be4 <main+0xcc>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	2100      	movs	r1, #0
 8000b74:	481c      	ldr	r0, [pc, #112]	@ (8000be8 <main+0xd0>)
 8000b76:	f005 fecd 	bl	8006914 <osTimerNew>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000bec <main+0xd4>)
 8000b7e:	6013      	str	r3, [r2, #0]

  /* creation of Ring_Finger */
  Ring_FingerHandle = osTimerNew(Ring, osTimerOnce, NULL, &Ring_Finger_attributes);
 8000b80:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf0 <main+0xd8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	2100      	movs	r1, #0
 8000b86:	481b      	ldr	r0, [pc, #108]	@ (8000bf4 <main+0xdc>)
 8000b88:	f005 fec4 	bl	8006914 <osTimerNew>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf8 <main+0xe0>)
 8000b90:	6013      	str	r3, [r2, #0]

  /* creation of Pinky_Finger */
  Pinky_FingerHandle = osTimerNew(Pinky, osTimerOnce, NULL, &Pinky_Finger_attributes);
 8000b92:	4b1a      	ldr	r3, [pc, #104]	@ (8000bfc <main+0xe4>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	2100      	movs	r1, #0
 8000b98:	4819      	ldr	r0, [pc, #100]	@ (8000c00 <main+0xe8>)
 8000b9a:	f005 febb 	bl	8006914 <osTimerNew>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	4a18      	ldr	r2, [pc, #96]	@ (8000c04 <main+0xec>)
 8000ba2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000ba4:	4a18      	ldr	r2, [pc, #96]	@ (8000c08 <main+0xf0>)
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4818      	ldr	r0, [pc, #96]	@ (8000c0c <main+0xf4>)
 8000baa:	f005 fdf1 	bl	8006790 <osThreadNew>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	4a17      	ldr	r2, [pc, #92]	@ (8000c10 <main+0xf8>)
 8000bb2:	6013      	str	r3, [r2, #0]

  /* creation of SupervisorTask */
  SupervisorTaskHandle = osThreadNew(StartSupervisorTask, NULL, &SupervisorTask_attributes);
 8000bb4:	4a17      	ldr	r2, [pc, #92]	@ (8000c14 <main+0xfc>)
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4817      	ldr	r0, [pc, #92]	@ (8000c18 <main+0x100>)
 8000bba:	f005 fde9 	bl	8006790 <osThreadNew>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	4a16      	ldr	r2, [pc, #88]	@ (8000c1c <main+0x104>)
 8000bc2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bc4:	f005 fdbe 	bl	8006744 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <main+0xb0>
 8000bcc:	0800987c 	.word	0x0800987c
 8000bd0:	0800270d 	.word	0x0800270d
 8000bd4:	20000274 	.word	0x20000274
 8000bd8:	0800988c 	.word	0x0800988c
 8000bdc:	08002745 	.word	0x08002745
 8000be0:	20000278 	.word	0x20000278
 8000be4:	0800989c 	.word	0x0800989c
 8000be8:	08002789 	.word	0x08002789
 8000bec:	2000027c 	.word	0x2000027c
 8000bf0:	080098ac 	.word	0x080098ac
 8000bf4:	080027c1 	.word	0x080027c1
 8000bf8:	20000280 	.word	0x20000280
 8000bfc:	080098bc 	.word	0x080098bc
 8000c00:	080027f9 	.word	0x080027f9
 8000c04:	20000284 	.word	0x20000284
 8000c08:	08009834 	.word	0x08009834
 8000c0c:	08002439 	.word	0x08002439
 8000c10:	2000026c 	.word	0x2000026c
 8000c14:	08009858 	.word	0x08009858
 8000c18:	08002679 	.word	0x08002679
 8000c1c:	20000270 	.word	0x20000270

08000c20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b096      	sub	sp, #88	@ 0x58
 8000c24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	2244      	movs	r2, #68	@ 0x44
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f008 fd42 	bl	80096b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	601a      	str	r2, [r3, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
 8000c3c:	609a      	str	r2, [r3, #8]
 8000c3e:	60da      	str	r2, [r3, #12]
 8000c40:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c42:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c46:	f002 fbe5 	bl	8003414 <HAL_PWREx_ControlVoltageScaling>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c50:	f001 fe00 	bl	8002854 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c54:	2302      	movs	r3, #2
 8000c56:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c5c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c5e:	2310      	movs	r3, #16
 8000c60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c62:	2302      	movs	r3, #2
 8000c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c66:	2302      	movs	r3, #2
 8000c68:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c6e:	230a      	movs	r3, #10
 8000c70:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c72:	2307      	movs	r3, #7
 8000c74:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c76:	2302      	movs	r3, #2
 8000c78:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4618      	mov	r0, r3
 8000c84:	f002 fc1c 	bl	80034c0 <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c8e:	f001 fde1 	bl	8002854 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c92:	230f      	movs	r3, #15
 8000c94:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c96:	2303      	movs	r3, #3
 8000c98:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ca6:	463b      	mov	r3, r7
 8000ca8:	2104      	movs	r1, #4
 8000caa:	4618      	mov	r0, r3
 8000cac:	f002 ffe4 	bl	8003c78 <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cb6:	f001 fdcd 	bl	8002854 <Error_Handler>
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3758      	adds	r7, #88	@ 0x58
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
	...

08000cc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b096      	sub	sp, #88	@ 0x58
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cce:	2200      	movs	r2, #0
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	605a      	str	r2, [r3, #4]
 8000cd4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cd6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
 8000ce6:	615a      	str	r2, [r3, #20]
 8000ce8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cea:	1d3b      	adds	r3, r7, #4
 8000cec:	222c      	movs	r2, #44	@ 0x2c
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f008 fce1 	bl	80096b8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cf6:	4b39      	ldr	r3, [pc, #228]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000cf8:	4a39      	ldr	r2, [pc, #228]	@ (8000de0 <MX_TIM1_Init+0x11c>)
 8000cfa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000cfc:	4b37      	ldr	r3, [pc, #220]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000cfe:	224f      	movs	r2, #79	@ 0x4f
 8000d00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d02:	4b36      	ldr	r3, [pc, #216]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000d08:	4b34      	ldr	r3, [pc, #208]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000d0a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000d0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d10:	4b32      	ldr	r3, [pc, #200]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d16:	4b31      	ldr	r3, [pc, #196]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d22:	482e      	ldr	r0, [pc, #184]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000d24:	f003 ff8c 	bl	8004c40 <HAL_TIM_PWM_Init>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d2e:	f001 fd91 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d32:	2300      	movs	r3, #0
 8000d34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d36:	2300      	movs	r3, #0
 8000d38:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d42:	4619      	mov	r1, r3
 8000d44:	4825      	ldr	r0, [pc, #148]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000d46:	f004 fe4f 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d50:	f001 fd80 	bl	8002854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d54:	2360      	movs	r3, #96	@ 0x60
 8000d56:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d60:	2300      	movs	r3, #0
 8000d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d74:	2200      	movs	r2, #0
 8000d76:	4619      	mov	r1, r3
 8000d78:	4818      	ldr	r0, [pc, #96]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000d7a:	f004 f957 	bl	800502c <HAL_TIM_PWM_ConfigChannel>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d84:	f001 fd66 	bl	8002854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d90:	2300      	movs	r3, #0
 8000d92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000da0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000daa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4807      	ldr	r0, [pc, #28]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000dbe:	f004 fe9b 	bl	8005af8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000dc8:	f001 fd44 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000dcc:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <MX_TIM1_Init+0x118>)
 8000dce:	f001 fddd 	bl	800298c <HAL_TIM_MspPostInit>

}
 8000dd2:	bf00      	nop
 8000dd4:	3758      	adds	r7, #88	@ 0x58
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000068 	.word	0x20000068
 8000de0:	40012c00 	.word	0x40012c00

08000de4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	@ 0x28
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	463b      	mov	r3, r7
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]
 8000e06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e08:	4b22      	ldr	r3, [pc, #136]	@ (8000e94 <MX_TIM2_Init+0xb0>)
 8000e0a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e0e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000e10:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <MX_TIM2_Init+0xb0>)
 8000e12:	224f      	movs	r2, #79	@ 0x4f
 8000e14:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	@ (8000e94 <MX_TIM2_Init+0xb0>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000e1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <MX_TIM2_Init+0xb0>)
 8000e1e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000e22:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <MX_TIM2_Init+0xb0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <MX_TIM2_Init+0xb0>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e30:	4818      	ldr	r0, [pc, #96]	@ (8000e94 <MX_TIM2_Init+0xb0>)
 8000e32:	f003 ff05 	bl	8004c40 <HAL_TIM_PWM_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e3c:	f001 fd0a 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e48:	f107 031c 	add.w	r3, r7, #28
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4811      	ldr	r0, [pc, #68]	@ (8000e94 <MX_TIM2_Init+0xb0>)
 8000e50:	f004 fdca 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e5a:	f001 fcfb 	bl	8002854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5e:	2360      	movs	r3, #96	@ 0x60
 8000e60:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e6e:	463b      	mov	r3, r7
 8000e70:	2200      	movs	r2, #0
 8000e72:	4619      	mov	r1, r3
 8000e74:	4807      	ldr	r0, [pc, #28]	@ (8000e94 <MX_TIM2_Init+0xb0>)
 8000e76:	f004 f8d9 	bl	800502c <HAL_TIM_PWM_ConfigChannel>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e80:	f001 fce8 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e84:	4803      	ldr	r0, [pc, #12]	@ (8000e94 <MX_TIM2_Init+0xb0>)
 8000e86:	f001 fd81 	bl	800298c <HAL_TIM_MspPostInit>

}
 8000e8a:	bf00      	nop
 8000e8c:	3728      	adds	r7, #40	@ 0x28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	200000b4 	.word	0x200000b4

08000e98 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	@ 0x28
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]
 8000eba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <MX_TIM3_Init+0xac>)
 8000ebe:	4a22      	ldr	r2, [pc, #136]	@ (8000f48 <MX_TIM3_Init+0xb0>)
 8000ec0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000ec2:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <MX_TIM3_Init+0xac>)
 8000ec4:	224f      	movs	r2, #79	@ 0x4f
 8000ec6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <MX_TIM3_Init+0xac>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000ece:	4b1d      	ldr	r3, [pc, #116]	@ (8000f44 <MX_TIM3_Init+0xac>)
 8000ed0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000ed4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <MX_TIM3_Init+0xac>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000edc:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <MX_TIM3_Init+0xac>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ee2:	4818      	ldr	r0, [pc, #96]	@ (8000f44 <MX_TIM3_Init+0xac>)
 8000ee4:	f003 feac 	bl	8004c40 <HAL_TIM_PWM_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000eee:	f001 fcb1 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4810      	ldr	r0, [pc, #64]	@ (8000f44 <MX_TIM3_Init+0xac>)
 8000f02:	f004 fd71 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f0c:	f001 fca2 	bl	8002854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f10:	2360      	movs	r3, #96	@ 0x60
 8000f12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	4619      	mov	r1, r3
 8000f26:	4807      	ldr	r0, [pc, #28]	@ (8000f44 <MX_TIM3_Init+0xac>)
 8000f28:	f004 f880 	bl	800502c <HAL_TIM_PWM_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f32:	f001 fc8f 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f36:	4803      	ldr	r0, [pc, #12]	@ (8000f44 <MX_TIM3_Init+0xac>)
 8000f38:	f001 fd28 	bl	800298c <HAL_TIM_MspPostInit>

}
 8000f3c:	bf00      	nop
 8000f3e:	3728      	adds	r7, #40	@ 0x28
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000100 	.word	0x20000100
 8000f48:	40000400 	.word	0x40000400

08000f4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08a      	sub	sp, #40	@ 0x28
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f70:	4b21      	ldr	r3, [pc, #132]	@ (8000ff8 <MX_TIM4_Init+0xac>)
 8000f72:	4a22      	ldr	r2, [pc, #136]	@ (8000ffc <MX_TIM4_Init+0xb0>)
 8000f74:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8000f76:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <MX_TIM4_Init+0xac>)
 8000f78:	224f      	movs	r2, #79	@ 0x4f
 8000f7a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff8 <MX_TIM4_Init+0xac>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <MX_TIM4_Init+0xac>)
 8000f84:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f88:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff8 <MX_TIM4_Init+0xac>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f90:	4b19      	ldr	r3, [pc, #100]	@ (8000ff8 <MX_TIM4_Init+0xac>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f96:	4818      	ldr	r0, [pc, #96]	@ (8000ff8 <MX_TIM4_Init+0xac>)
 8000f98:	f003 fe52 	bl	8004c40 <HAL_TIM_PWM_Init>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000fa2:	f001 fc57 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4810      	ldr	r0, [pc, #64]	@ (8000ff8 <MX_TIM4_Init+0xac>)
 8000fb6:	f004 fd17 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000fc0:	f001 fc48 	bl	8002854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fc4:	2360      	movs	r3, #96	@ 0x60
 8000fc6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fd4:	463b      	mov	r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4807      	ldr	r0, [pc, #28]	@ (8000ff8 <MX_TIM4_Init+0xac>)
 8000fdc:	f004 f826 	bl	800502c <HAL_TIM_PWM_ConfigChannel>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000fe6:	f001 fc35 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000fea:	4803      	ldr	r0, [pc, #12]	@ (8000ff8 <MX_TIM4_Init+0xac>)
 8000fec:	f001 fcce 	bl	800298c <HAL_TIM_MspPostInit>

}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	@ 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	2000014c 	.word	0x2000014c
 8000ffc:	40000800 	.word	0x40000800

08001000 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b096      	sub	sp, #88	@ 0x58
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001006:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001012:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]
 8001022:	615a      	str	r2, [r3, #20]
 8001024:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001026:	1d3b      	adds	r3, r7, #4
 8001028:	222c      	movs	r2, #44	@ 0x2c
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f008 fb43 	bl	80096b8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001032:	4b39      	ldr	r3, [pc, #228]	@ (8001118 <MX_TIM8_Init+0x118>)
 8001034:	4a39      	ldr	r2, [pc, #228]	@ (800111c <MX_TIM8_Init+0x11c>)
 8001036:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8001038:	4b37      	ldr	r3, [pc, #220]	@ (8001118 <MX_TIM8_Init+0x118>)
 800103a:	224f      	movs	r2, #79	@ 0x4f
 800103c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103e:	4b36      	ldr	r3, [pc, #216]	@ (8001118 <MX_TIM8_Init+0x118>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001044:	4b34      	ldr	r3, [pc, #208]	@ (8001118 <MX_TIM8_Init+0x118>)
 8001046:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800104a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104c:	4b32      	ldr	r3, [pc, #200]	@ (8001118 <MX_TIM8_Init+0x118>)
 800104e:	2200      	movs	r2, #0
 8001050:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001052:	4b31      	ldr	r3, [pc, #196]	@ (8001118 <MX_TIM8_Init+0x118>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001058:	4b2f      	ldr	r3, [pc, #188]	@ (8001118 <MX_TIM8_Init+0x118>)
 800105a:	2200      	movs	r2, #0
 800105c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800105e:	482e      	ldr	r0, [pc, #184]	@ (8001118 <MX_TIM8_Init+0x118>)
 8001060:	f003 fdee 	bl	8004c40 <HAL_TIM_PWM_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800106a:	f001 fbf3 	bl	8002854 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001072:	2300      	movs	r3, #0
 8001074:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800107a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800107e:	4619      	mov	r1, r3
 8001080:	4825      	ldr	r0, [pc, #148]	@ (8001118 <MX_TIM8_Init+0x118>)
 8001082:	f004 fcb1 	bl	80059e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800108c:	f001 fbe2 	bl	8002854 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001090:	2360      	movs	r3, #96	@ 0x60
 8001092:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001098:	2300      	movs	r3, #0
 800109a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800109c:	2300      	movs	r3, #0
 800109e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a0:	2300      	movs	r3, #0
 80010a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ac:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010b0:	2200      	movs	r2, #0
 80010b2:	4619      	mov	r1, r3
 80010b4:	4818      	ldr	r0, [pc, #96]	@ (8001118 <MX_TIM8_Init+0x118>)
 80010b6:	f003 ffb9 	bl	800502c <HAL_TIM_PWM_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80010c0:	f001 fbc8 	bl	8002854 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010cc:	2300      	movs	r3, #0
 80010ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	4619      	mov	r1, r3
 80010f8:	4807      	ldr	r0, [pc, #28]	@ (8001118 <MX_TIM8_Init+0x118>)
 80010fa:	f004 fcfd 	bl	8005af8 <HAL_TIMEx_ConfigBreakDeadTime>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001104:	f001 fba6 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001108:	4803      	ldr	r0, [pc, #12]	@ (8001118 <MX_TIM8_Init+0x118>)
 800110a:	f001 fc3f 	bl	800298c <HAL_TIM_MspPostInit>

}
 800110e:	bf00      	nop
 8001110:	3758      	adds	r7, #88	@ 0x58
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	20000198 	.word	0x20000198
 800111c:	40013400 	.word	0x40013400

08001120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001126:	4a15      	ldr	r2, [pc, #84]	@ (800117c <MX_USART2_UART_Init+0x5c>)
 8001128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_USART2_UART_Init+0x58>)
 8001164:	f004 fd64 	bl	8005c30 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800116e:	f001 fb71 	bl	8002854 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	200001e4 	.word	0x200001e4
 800117c:	40004400 	.word	0x40004400

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001196:	4b2f      	ldr	r3, [pc, #188]	@ (8001254 <MX_GPIO_Init+0xd4>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	4a2e      	ldr	r2, [pc, #184]	@ (8001254 <MX_GPIO_Init+0xd4>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001254 <MX_GPIO_Init+0xd4>)
 80011a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ae:	4b29      	ldr	r3, [pc, #164]	@ (8001254 <MX_GPIO_Init+0xd4>)
 80011b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b2:	4a28      	ldr	r2, [pc, #160]	@ (8001254 <MX_GPIO_Init+0xd4>)
 80011b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ba:	4b26      	ldr	r3, [pc, #152]	@ (8001254 <MX_GPIO_Init+0xd4>)
 80011bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <MX_GPIO_Init+0xd4>)
 80011c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ca:	4a22      	ldr	r2, [pc, #136]	@ (8001254 <MX_GPIO_Init+0xd4>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011d2:	4b20      	ldr	r3, [pc, #128]	@ (8001254 <MX_GPIO_Init+0xd4>)
 80011d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	4b1d      	ldr	r3, [pc, #116]	@ (8001254 <MX_GPIO_Init+0xd4>)
 80011e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e2:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <MX_GPIO_Init+0xd4>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001254 <MX_GPIO_Init+0xd4>)
 80011ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2120      	movs	r1, #32
 80011fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011fe:	f002 f8a5 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001202:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001208:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800120c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001212:	f107 0314 	add.w	r3, r7, #20
 8001216:	4619      	mov	r1, r3
 8001218:	480f      	ldr	r0, [pc, #60]	@ (8001258 <MX_GPIO_Init+0xd8>)
 800121a:	f001 feed 	bl	8002ff8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800121e:	2320      	movs	r3, #32
 8001220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001222:	2301      	movs	r3, #1
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800122a:	2300      	movs	r3, #0
 800122c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001238:	f001 fede 	bl	8002ff8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800123c:	2200      	movs	r2, #0
 800123e:	2105      	movs	r1, #5
 8001240:	2028      	movs	r0, #40	@ 0x28
 8001242:	f001 feaf 	bl	8002fa4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001246:	2028      	movs	r0, #40	@ 0x28
 8001248:	f001 fec8 	bl	8002fdc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	@ 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40021000 	.word	0x40021000
 8001258:	48000800 	.word	0x48000800

0800125c <Servo_SetMotion>:
 * @param finger: Which finger (THUMB, INDEX, MIDDLE, RING, PINKY)
 * @param direction: STOP, CLOCKWISE, or COUNTERCLOCKWISE
 * @param speed: Speed percentage (0-100)
 * @retval None
 */
void Servo_SetMotion(Finger finger, Direction direction, int speed) {
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	603a      	str	r2, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
 8001268:	460b      	mov	r3, r1
 800126a:	71bb      	strb	r3, [r7, #6]
    uint32_t pulse;

    // Clamp speed to 0-100%
    if (speed < 0) speed = 0;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	da01      	bge.n	8001276 <Servo_SetMotion+0x1a>
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
    if (speed > 100) speed = 100;
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	2b64      	cmp	r3, #100	@ 0x64
 800127a:	dd01      	ble.n	8001280 <Servo_SetMotion+0x24>
 800127c:	2364      	movs	r3, #100	@ 0x64
 800127e:	603b      	str	r3, [r7, #0]

    // Calculate pulse width based on direction and speed
    if (direction == STOP) {
 8001280:	79bb      	ldrb	r3, [r7, #6]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d103      	bne.n	800128e <Servo_SetMotion+0x32>
        pulse = SERVO_STOP;
 8001286:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	e013      	b.n	80012b6 <Servo_SetMotion+0x5a>
    } else if (direction == CLOCKWISE) {
 800128e:	79bb      	ldrb	r3, [r7, #6]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d109      	bne.n	80012a8 <Servo_SetMotion+0x4c>
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CW
        pulse = SERVO_STOP - ((SERVO_STOP - SERVO_MAX_CW) * speed / 100);
 8001294:	683a      	ldr	r2, [r7, #0]
 8001296:	4613      	mov	r3, r2
 8001298:	079b      	lsls	r3, r3, #30
 800129a:	1a9b      	subs	r3, r3, r2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	1a9b      	subs	r3, r3, r2
 80012a0:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e006      	b.n	80012b6 <Servo_SetMotion+0x5a>
    } else { // COUNTERCLOCKWISE
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CCW
        pulse = SERVO_STOP + ((SERVO_MAX_CCW - SERVO_STOP) * speed / 100);
 80012a8:	683a      	ldr	r2, [r7, #0]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80012b4:	60fb      	str	r3, [r7, #12]
    }

    // Update servo state
    servoStates[finger].speed = speed;
 80012b6:	79fa      	ldrb	r2, [r7, #7]
 80012b8:	4925      	ldr	r1, [pc, #148]	@ (8001350 <Servo_SetMotion+0xf4>)
 80012ba:	4613      	mov	r3, r2
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	4413      	add	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	440b      	add	r3, r1
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	601a      	str	r2, [r3, #0]
    servoStates[finger].dir = direction;
 80012c8:	79fa      	ldrb	r2, [r7, #7]
 80012ca:	4921      	ldr	r1, [pc, #132]	@ (8001350 <Servo_SetMotion+0xf4>)
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	009b      	lsls	r3, r3, #2
 80012d4:	440b      	add	r3, r1
 80012d6:	3304      	adds	r3, #4
 80012d8:	79ba      	ldrb	r2, [r7, #6]
 80012da:	701a      	strb	r2, [r3, #0]
    servoStates[finger].pulse = pulse;
 80012dc:	79fa      	ldrb	r2, [r7, #7]
 80012de:	491c      	ldr	r1, [pc, #112]	@ (8001350 <Servo_SetMotion+0xf4>)
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	3308      	adds	r3, #8
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	601a      	str	r2, [r3, #0]

    // Apply pulse width to the appropriate timer
    switch (finger) {
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	d825      	bhi.n	8001342 <Servo_SetMotion+0xe6>
 80012f6:	a201      	add	r2, pc, #4	@ (adr r2, 80012fc <Servo_SetMotion+0xa0>)
 80012f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fc:	08001311 	.word	0x08001311
 8001300:	0800131b 	.word	0x0800131b
 8001304:	08001325 	.word	0x08001325
 8001308:	0800132f 	.word	0x0800132f
 800130c:	08001339 	.word	0x08001339
        case THUMB:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8001310:	4b10      	ldr	r3, [pc, #64]	@ (8001354 <Servo_SetMotion+0xf8>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68fa      	ldr	r2, [r7, #12]
 8001316:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8001318:	e013      	b.n	8001342 <Servo_SetMotion+0xe6>
        case INDEX:
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 800131a:	4b0f      	ldr	r3, [pc, #60]	@ (8001358 <Servo_SetMotion+0xfc>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8001322:	e00e      	b.n	8001342 <Servo_SetMotion+0xe6>
        case MIDDLE:
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <Servo_SetMotion+0x100>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	68fa      	ldr	r2, [r7, #12]
 800132a:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 800132c:	e009      	b.n	8001342 <Servo_SetMotion+0xe6>
        case RING:
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 800132e:	4b0c      	ldr	r3, [pc, #48]	@ (8001360 <Servo_SetMotion+0x104>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8001336:	e004      	b.n	8001342 <Servo_SetMotion+0xe6>
        case PINKY:
            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pulse);
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <Servo_SetMotion+0x108>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8001340:	bf00      	nop
    	}
	}
 8001342:	bf00      	nop
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000000 	.word	0x20000000
 8001354:	20000068 	.word	0x20000068
 8001358:	200000b4 	.word	0x200000b4
 800135c:	20000100 	.word	0x20000100
 8001360:	2000014c 	.word	0x2000014c
 8001364:	20000198 	.word	0x20000198

08001368 <Servo_StopAll>:
	/**
	 * @brief Stops all servos
	 * @param None
	 * @retval None
	 */
	void Servo_StopAll(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
		Servo_SetMotion(THUMB, STOP, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ff73 	bl	800125c <Servo_SetMotion>
		Servo_SetMotion(INDEX, STOP, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2001      	movs	r0, #1
 800137c:	f7ff ff6e 	bl	800125c <Servo_SetMotion>
		Servo_SetMotion(MIDDLE, STOP, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2002      	movs	r0, #2
 8001386:	f7ff ff69 	bl	800125c <Servo_SetMotion>
		Servo_SetMotion(RING, STOP, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2003      	movs	r0, #3
 8001390:	f7ff ff64 	bl	800125c <Servo_SetMotion>
		Servo_SetMotion(PINKY, STOP, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	2004      	movs	r0, #4
 800139a:	f7ff ff5f 	bl	800125c <Servo_SetMotion>

	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800139e:	2100      	movs	r1, #0
 80013a0:	480a      	ldr	r0, [pc, #40]	@ (80013cc <Servo_StopAll+0x64>)
 80013a2:	f003 fca5 	bl	8004cf0 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80013a6:	2100      	movs	r1, #0
 80013a8:	4809      	ldr	r0, [pc, #36]	@ (80013d0 <Servo_StopAll+0x68>)
 80013aa:	f003 fca1 	bl	8004cf0 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80013ae:	2100      	movs	r1, #0
 80013b0:	4808      	ldr	r0, [pc, #32]	@ (80013d4 <Servo_StopAll+0x6c>)
 80013b2:	f003 fc9d 	bl	8004cf0 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80013b6:	2100      	movs	r1, #0
 80013b8:	4807      	ldr	r0, [pc, #28]	@ (80013d8 <Servo_StopAll+0x70>)
 80013ba:	f003 fc99 	bl	8004cf0 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 80013be:	2100      	movs	r1, #0
 80013c0:	4806      	ldr	r0, [pc, #24]	@ (80013dc <Servo_StopAll+0x74>)
 80013c2:	f003 fc95 	bl	8004cf0 <HAL_TIM_PWM_Stop>
	}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	20000068 	.word	0x20000068
 80013d0:	200000b4 	.word	0x200000b4
 80013d4:	20000100 	.word	0x20000100
 80013d8:	2000014c 	.word	0x2000014c
 80013dc:	20000198 	.word	0x20000198

080013e0 <Direction_Decider>:
	    }
//	    // Initialize all servos to stop position
//	    Servo_StopAll();
	}

	int Direction_Decider(int* Desired_Position){
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
		if(*Desired_Position < 0){
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da06      	bge.n	80013fe <Direction_Decider+0x1e>
			*Desired_Position = *Desired_Position * -1;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	425a      	negs	r2, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	601a      	str	r2, [r3, #0]
			return CLOCKWISE;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e006      	b.n	800140c <Direction_Decider+0x2c>
		}
		else if(*Desired_Position > 0){
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b00      	cmp	r3, #0
 8001404:	dd01      	ble.n	800140a <Direction_Decider+0x2a>
			return COUNTERCLOCKWISE;
 8001406:	2302      	movs	r3, #2
 8001408:	e000      	b.n	800140c <Direction_Decider+0x2c>
		}
		else{
			return STOP;
 800140a:	2300      	movs	r3, #0
		}
	}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <SignLetter>:
	 * @brief Example function to demonstrate a sign language letter
	 * @param letter: ASCII character (A-Z)
	 * @param duration: How long to hold the position (in ms)
	 * @retval None
	 */
	void SignLetter(char letter) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
//	    Servo_Init



	    // Set finger positions based on the letter
	    switch(letter) {
 8001422:	79fb      	ldrb	r3, [r7, #7]
 8001424:	3b30      	subs	r3, #48	@ 0x30
 8001426:	2b2a      	cmp	r3, #42	@ 0x2a
 8001428:	f200 86af 	bhi.w	800218a <SignLetter+0xd72>
 800142c:	a201      	add	r2, pc, #4	@ (adr r2, 8001434 <SignLetter+0x1c>)
 800142e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001432:	bf00      	nop
 8001434:	0800214d 	.word	0x0800214d
 8001438:	0800218b 	.word	0x0800218b
 800143c:	0800218b 	.word	0x0800218b
 8001440:	0800218b 	.word	0x0800218b
 8001444:	0800218b 	.word	0x0800218b
 8001448:	0800218b 	.word	0x0800218b
 800144c:	0800218b 	.word	0x0800218b
 8001450:	0800218b 	.word	0x0800218b
 8001454:	0800218b 	.word	0x0800218b
 8001458:	0800218b 	.word	0x0800218b
 800145c:	0800218b 	.word	0x0800218b
 8001460:	0800218b 	.word	0x0800218b
 8001464:	0800218b 	.word	0x0800218b
 8001468:	0800218b 	.word	0x0800218b
 800146c:	0800218b 	.word	0x0800218b
 8001470:	0800218b 	.word	0x0800218b
 8001474:	0800218b 	.word	0x0800218b
 8001478:	080014e1 	.word	0x080014e1
 800147c:	08001545 	.word	0x08001545
 8001480:	08001587 	.word	0x08001587
 8001484:	08001653 	.word	0x08001653
 8001488:	080016ff 	.word	0x080016ff
 800148c:	080017fd 	.word	0x080017fd
 8001490:	08001875 	.word	0x08001875
 8001494:	080018d7 	.word	0x080018d7
 8001498:	08001937 	.word	0x08001937
 800149c:	0800197f 	.word	0x0800197f
 80014a0:	080019c5 	.word	0x080019c5
 80014a4:	08001a23 	.word	0x08001a23
 80014a8:	08001aad 	.word	0x08001aad
 80014ac:	08001b43 	.word	0x08001b43
 80014b0:	08001bbf 	.word	0x08001bbf
 80014b4:	08001c89 	.word	0x08001c89
 80014b8:	08001d1f 	.word	0x08001d1f
 80014bc:	08001df1 	.word	0x08001df1
 80014c0:	08001e39 	.word	0x08001e39
 80014c4:	08001e9b 	.word	0x08001e9b
 80014c8:	08001ee3 	.word	0x08001ee3
 80014cc:	08001f27 	.word	0x08001f27
 80014d0:	08001f6b 	.word	0x08001f6b
 80014d4:	08001fad 	.word	0x08001fad
 80014d8:	08002077 	.word	0x08002077
 80014dc:	08002105 	.word	0x08002105
		 case 'A':
			thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 80014e0:	4bb9      	ldr	r3, [pc, #740]	@ (80017c8 <SignLetter+0x3b0>)
 80014e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f8ee 	bl	80006c8 <__aeabi_i2d>
 80014ec:	a3b0      	add	r3, pc, #704	@ (adr r3, 80017b0 <SignLetter+0x398>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7fe ff9b 	bl	800042c <__aeabi_dsub>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4610      	mov	r0, r2
 80014fc:	4619      	mov	r1, r3
 80014fe:	f7ff f94d 	bl	800079c <__aeabi_d2iz>
 8001502:	4603      	mov	r3, r0
 8001504:	4ab1      	ldr	r2, [pc, #708]	@ (80017cc <SignLetter+0x3b4>)
 8001506:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001508:	4bb1      	ldr	r3, [pc, #708]	@ (80017d0 <SignLetter+0x3b8>)
 800150a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001512:	4ab0      	ldr	r2, [pc, #704]	@ (80017d4 <SignLetter+0x3bc>)
 8001514:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001516:	4bb0      	ldr	r3, [pc, #704]	@ (80017d8 <SignLetter+0x3c0>)
 8001518:	f9b3 3000 	ldrsh.w	r3, [r3]
 800151c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001520:	4aae      	ldr	r2, [pc, #696]	@ (80017dc <SignLetter+0x3c4>)
 8001522:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001524:	4bae      	ldr	r3, [pc, #696]	@ (80017e0 <SignLetter+0x3c8>)
 8001526:	f9b3 3000 	ldrsh.w	r3, [r3]
 800152a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800152e:	4aad      	ldr	r2, [pc, #692]	@ (80017e4 <SignLetter+0x3cc>)
 8001530:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001532:	4bad      	ldr	r3, [pc, #692]	@ (80017e8 <SignLetter+0x3d0>)
 8001534:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001538:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 800153c:	4aab      	ldr	r2, [pc, #684]	@ (80017ec <SignLetter+0x3d4>)
 800153e:	6013      	str	r3, [r2, #0]
			break;
 8001540:	f000 be26 	b.w	8002190 <SignLetter+0xd78>

		 case 'B':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001544:	4ba0      	ldr	r3, [pc, #640]	@ (80017c8 <SignLetter+0x3b0>)
 8001546:	f9b3 3000 	ldrsh.w	r3, [r3]
 800154a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800154e:	4a9f      	ldr	r2, [pc, #636]	@ (80017cc <SignLetter+0x3b4>)
 8001550:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001552:	4b9f      	ldr	r3, [pc, #636]	@ (80017d0 <SignLetter+0x3b8>)
 8001554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001558:	461a      	mov	r2, r3
 800155a:	4b9e      	ldr	r3, [pc, #632]	@ (80017d4 <SignLetter+0x3bc>)
 800155c:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 800155e:	4b9e      	ldr	r3, [pc, #632]	@ (80017d8 <SignLetter+0x3c0>)
 8001560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001564:	461a      	mov	r2, r3
 8001566:	4b9d      	ldr	r3, [pc, #628]	@ (80017dc <SignLetter+0x3c4>)
 8001568:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 0 * RING_CLOSED;
 800156a:	4b9d      	ldr	r3, [pc, #628]	@ (80017e0 <SignLetter+0x3c8>)
 800156c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001570:	461a      	mov	r2, r3
 8001572:	4b9c      	ldr	r3, [pc, #624]	@ (80017e4 <SignLetter+0x3cc>)
 8001574:	601a      	str	r2, [r3, #0]
			pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8001576:	4b9c      	ldr	r3, [pc, #624]	@ (80017e8 <SignLetter+0x3d0>)
 8001578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157c:	461a      	mov	r2, r3
 800157e:	4b9b      	ldr	r3, [pc, #620]	@ (80017ec <SignLetter+0x3d4>)
 8001580:	601a      	str	r2, [r3, #0]
			break;
 8001582:	f000 be05 	b.w	8002190 <SignLetter+0xd78>

		case 'C':
			thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001586:	4b90      	ldr	r3, [pc, #576]	@ (80017c8 <SignLetter+0x3b0>)
 8001588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f89b 	bl	80006c8 <__aeabi_i2d>
 8001592:	a387      	add	r3, pc, #540	@ (adr r3, 80017b0 <SignLetter+0x398>)
 8001594:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001598:	f7fe ff48 	bl	800042c <__aeabi_dsub>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4610      	mov	r0, r2
 80015a2:	4619      	mov	r1, r3
 80015a4:	f7ff f8fa 	bl	800079c <__aeabi_d2iz>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4a88      	ldr	r2, [pc, #544]	@ (80017cc <SignLetter+0x3b4>)
 80015ac:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.5 * INDEX_CLOSED;
 80015ae:	4b88      	ldr	r3, [pc, #544]	@ (80017d0 <SignLetter+0x3b8>)
 80015b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff f887 	bl	80006c8 <__aeabi_i2d>
 80015ba:	f04f 0200 	mov.w	r2, #0
 80015be:	4b8c      	ldr	r3, [pc, #560]	@ (80017f0 <SignLetter+0x3d8>)
 80015c0:	f7fe ff34 	bl	800042c <__aeabi_dsub>
 80015c4:	4602      	mov	r2, r0
 80015c6:	460b      	mov	r3, r1
 80015c8:	4610      	mov	r0, r2
 80015ca:	4619      	mov	r1, r3
 80015cc:	f7ff f8e6 	bl	800079c <__aeabi_d2iz>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a80      	ldr	r2, [pc, #512]	@ (80017d4 <SignLetter+0x3bc>)
 80015d4:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.5 * MIDDLE_CLOSED;
 80015d6:	4b80      	ldr	r3, [pc, #512]	@ (80017d8 <SignLetter+0x3c0>)
 80015d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff f873 	bl	80006c8 <__aeabi_i2d>
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	4b82      	ldr	r3, [pc, #520]	@ (80017f0 <SignLetter+0x3d8>)
 80015e8:	f7fe ff20 	bl	800042c <__aeabi_dsub>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f7ff f8d2 	bl	800079c <__aeabi_d2iz>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4a78      	ldr	r2, [pc, #480]	@ (80017dc <SignLetter+0x3c4>)
 80015fc:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 0.5 * RING_CLOSED;
 80015fe:	4b78      	ldr	r3, [pc, #480]	@ (80017e0 <SignLetter+0x3c8>)
 8001600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff f85f 	bl	80006c8 <__aeabi_i2d>
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	4b78      	ldr	r3, [pc, #480]	@ (80017f0 <SignLetter+0x3d8>)
 8001610:	f7fe ff0c 	bl	800042c <__aeabi_dsub>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4610      	mov	r0, r2
 800161a:	4619      	mov	r1, r3
 800161c:	f7ff f8be 	bl	800079c <__aeabi_d2iz>
 8001620:	4603      	mov	r3, r0
 8001622:	4a70      	ldr	r2, [pc, #448]	@ (80017e4 <SignLetter+0x3cc>)
 8001624:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0.5 * PINKY_CLOSED;
 8001626:	4b70      	ldr	r3, [pc, #448]	@ (80017e8 <SignLetter+0x3d0>)
 8001628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff f84b 	bl	80006c8 <__aeabi_i2d>
 8001632:	a361      	add	r3, pc, #388	@ (adr r3, 80017b8 <SignLetter+0x3a0>)
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f7fe fef8 	bl	800042c <__aeabi_dsub>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f7ff f8aa 	bl	800079c <__aeabi_d2iz>
 8001648:	4603      	mov	r3, r0
 800164a:	4a68      	ldr	r2, [pc, #416]	@ (80017ec <SignLetter+0x3d4>)
 800164c:	6013      	str	r3, [r2, #0]
			break;
 800164e:	f000 bd9f 	b.w	8002190 <SignLetter+0xd78>

		case 'D':
			thumb_desired_position = thumb_current - 0.5 * THUMB_CLOSED;
 8001652:	4b5d      	ldr	r3, [pc, #372]	@ (80017c8 <SignLetter+0x3b0>)
 8001654:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff f835 	bl	80006c8 <__aeabi_i2d>
 800165e:	a358      	add	r3, pc, #352	@ (adr r3, 80017c0 <SignLetter+0x3a8>)
 8001660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001664:	f7fe fee2 	bl	800042c <__aeabi_dsub>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4610      	mov	r0, r2
 800166e:	4619      	mov	r1, r3
 8001670:	f7ff f894 	bl	800079c <__aeabi_d2iz>
 8001674:	4603      	mov	r3, r0
 8001676:	4a55      	ldr	r2, [pc, #340]	@ (80017cc <SignLetter+0x3b4>)
 8001678:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 800167a:	4b55      	ldr	r3, [pc, #340]	@ (80017d0 <SignLetter+0x3b8>)
 800167c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001680:	461a      	mov	r2, r3
 8001682:	4b54      	ldr	r3, [pc, #336]	@ (80017d4 <SignLetter+0x3bc>)
 8001684:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0.75 * MIDDLE_CLOSED;
 8001686:	4b54      	ldr	r3, [pc, #336]	@ (80017d8 <SignLetter+0x3c0>)
 8001688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff f81b 	bl	80006c8 <__aeabi_i2d>
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b57      	ldr	r3, [pc, #348]	@ (80017f4 <SignLetter+0x3dc>)
 8001698:	f7fe fec8 	bl	800042c <__aeabi_dsub>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	f7ff f87a 	bl	800079c <__aeabi_d2iz>
 80016a8:	4603      	mov	r3, r0
 80016aa:	4a4c      	ldr	r2, [pc, #304]	@ (80017dc <SignLetter+0x3c4>)
 80016ac:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 0.75 * RING_CLOSED;
 80016ae:	4b4c      	ldr	r3, [pc, #304]	@ (80017e0 <SignLetter+0x3c8>)
 80016b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff f807 	bl	80006c8 <__aeabi_i2d>
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	4b4d      	ldr	r3, [pc, #308]	@ (80017f4 <SignLetter+0x3dc>)
 80016c0:	f7fe feb4 	bl	800042c <__aeabi_dsub>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4610      	mov	r0, r2
 80016ca:	4619      	mov	r1, r3
 80016cc:	f7ff f866 	bl	800079c <__aeabi_d2iz>
 80016d0:	4603      	mov	r3, r0
 80016d2:	4a44      	ldr	r2, [pc, #272]	@ (80017e4 <SignLetter+0x3cc>)
 80016d4:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0.75 * PINKY_CLOSED;
 80016d6:	4b44      	ldr	r3, [pc, #272]	@ (80017e8 <SignLetter+0x3d0>)
 80016d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe fff3 	bl	80006c8 <__aeabi_i2d>
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	4b44      	ldr	r3, [pc, #272]	@ (80017f8 <SignLetter+0x3e0>)
 80016e8:	f7fe fea0 	bl	800042c <__aeabi_dsub>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff f852 	bl	800079c <__aeabi_d2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	4a3c      	ldr	r2, [pc, #240]	@ (80017ec <SignLetter+0x3d4>)
 80016fc:	6013      	str	r3, [r2, #0]

		case 'E':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80016fe:	4b32      	ldr	r3, [pc, #200]	@ (80017c8 <SignLetter+0x3b0>)
 8001700:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001704:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001708:	4a30      	ldr	r2, [pc, #192]	@ (80017cc <SignLetter+0x3b4>)
 800170a:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.75 * INDEX_CLOSED;
 800170c:	4b30      	ldr	r3, [pc, #192]	@ (80017d0 <SignLetter+0x3b8>)
 800170e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ffd8 	bl	80006c8 <__aeabi_i2d>
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	4b35      	ldr	r3, [pc, #212]	@ (80017f4 <SignLetter+0x3dc>)
 800171e:	f7fe fe85 	bl	800042c <__aeabi_dsub>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4610      	mov	r0, r2
 8001728:	4619      	mov	r1, r3
 800172a:	f7ff f837 	bl	800079c <__aeabi_d2iz>
 800172e:	4603      	mov	r3, r0
 8001730:	4a28      	ldr	r2, [pc, #160]	@ (80017d4 <SignLetter+0x3bc>)
 8001732:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.75 * MIDDLE_CLOSED;
 8001734:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <SignLetter+0x3c0>)
 8001736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173a:	4618      	mov	r0, r3
 800173c:	f7fe ffc4 	bl	80006c8 <__aeabi_i2d>
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	4b2b      	ldr	r3, [pc, #172]	@ (80017f4 <SignLetter+0x3dc>)
 8001746:	f7fe fe71 	bl	800042c <__aeabi_dsub>
 800174a:	4602      	mov	r2, r0
 800174c:	460b      	mov	r3, r1
 800174e:	4610      	mov	r0, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f7ff f823 	bl	800079c <__aeabi_d2iz>
 8001756:	4603      	mov	r3, r0
 8001758:	4a20      	ldr	r2, [pc, #128]	@ (80017dc <SignLetter+0x3c4>)
 800175a:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 0.75 * RING_CLOSED;
 800175c:	4b20      	ldr	r3, [pc, #128]	@ (80017e0 <SignLetter+0x3c8>)
 800175e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe ffb0 	bl	80006c8 <__aeabi_i2d>
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <SignLetter+0x3dc>)
 800176e:	f7fe fe5d 	bl	800042c <__aeabi_dsub>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f7ff f80f 	bl	800079c <__aeabi_d2iz>
 800177e:	4603      	mov	r3, r0
 8001780:	4a18      	ldr	r2, [pc, #96]	@ (80017e4 <SignLetter+0x3cc>)
 8001782:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0.75 * PINKY_CLOSED;
 8001784:	4b18      	ldr	r3, [pc, #96]	@ (80017e8 <SignLetter+0x3d0>)
 8001786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe ff9c 	bl	80006c8 <__aeabi_i2d>
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <SignLetter+0x3e0>)
 8001796:	f7fe fe49 	bl	800042c <__aeabi_dsub>
 800179a:	4602      	mov	r2, r0
 800179c:	460b      	mov	r3, r1
 800179e:	4610      	mov	r0, r2
 80017a0:	4619      	mov	r1, r3
 80017a2:	f7fe fffb 	bl	800079c <__aeabi_d2iz>
 80017a6:	4603      	mov	r3, r0
 80017a8:	4a10      	ldr	r2, [pc, #64]	@ (80017ec <SignLetter+0x3d4>)
 80017aa:	6013      	str	r3, [r2, #0]
			break;
 80017ac:	f000 bcf0 	b.w	8002190 <SignLetter+0xd78>
 80017b0:	00000000 	.word	0x00000000
 80017b4:	4062c000 	.word	0x4062c000
 80017b8:	00000000 	.word	0x00000000
 80017bc:	407c2000 	.word	0x407c2000
 80017c0:	00000000 	.word	0x00000000
 80017c4:	4072c000 	.word	0x4072c000
 80017c8:	2000029c 	.word	0x2000029c
 80017cc:	200002bc 	.word	0x200002bc
 80017d0:	2000029e 	.word	0x2000029e
 80017d4:	200002c0 	.word	0x200002c0
 80017d8:	200002a0 	.word	0x200002a0
 80017dc:	200002c4 	.word	0x200002c4
 80017e0:	200002a2 	.word	0x200002a2
 80017e4:	200002c8 	.word	0x200002c8
 80017e8:	200002a4 	.word	0x200002a4
 80017ec:	200002cc 	.word	0x200002cc
 80017f0:	407f4000 	.word	0x407f4000
 80017f4:	40877000 	.word	0x40877000
 80017f8:	40851800 	.word	0x40851800

		case 'F':
			thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 80017fc:	4ba0      	ldr	r3, [pc, #640]	@ (8001a80 <SignLetter+0x668>)
 80017fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe ff60 	bl	80006c8 <__aeabi_i2d>
 8001808:	a397      	add	r3, pc, #604	@ (adr r3, 8001a68 <SignLetter+0x650>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe fe0d 	bl	800042c <__aeabi_dsub>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	f7fe ffbf 	bl	800079c <__aeabi_d2iz>
 800181e:	4603      	mov	r3, r0
 8001820:	4a98      	ldr	r2, [pc, #608]	@ (8001a84 <SignLetter+0x66c>)
 8001822:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.75 * INDEX_CLOSED;
 8001824:	4b98      	ldr	r3, [pc, #608]	@ (8001a88 <SignLetter+0x670>)
 8001826:	f9b3 3000 	ldrsh.w	r3, [r3]
 800182a:	4618      	mov	r0, r3
 800182c:	f7fe ff4c 	bl	80006c8 <__aeabi_i2d>
 8001830:	f04f 0200 	mov.w	r2, #0
 8001834:	4b95      	ldr	r3, [pc, #596]	@ (8001a8c <SignLetter+0x674>)
 8001836:	f7fe fdf9 	bl	800042c <__aeabi_dsub>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7fe ffab 	bl	800079c <__aeabi_d2iz>
 8001846:	4603      	mov	r3, r0
 8001848:	4a91      	ldr	r2, [pc, #580]	@ (8001a90 <SignLetter+0x678>)
 800184a:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 800184c:	4b91      	ldr	r3, [pc, #580]	@ (8001a94 <SignLetter+0x67c>)
 800184e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001852:	461a      	mov	r2, r3
 8001854:	4b90      	ldr	r3, [pc, #576]	@ (8001a98 <SignLetter+0x680>)
 8001856:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 0 * RING_CLOSED;
 8001858:	4b90      	ldr	r3, [pc, #576]	@ (8001a9c <SignLetter+0x684>)
 800185a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185e:	461a      	mov	r2, r3
 8001860:	4b8f      	ldr	r3, [pc, #572]	@ (8001aa0 <SignLetter+0x688>)
 8001862:	601a      	str	r2, [r3, #0]
			pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8001864:	4b8f      	ldr	r3, [pc, #572]	@ (8001aa4 <SignLetter+0x68c>)
 8001866:	f9b3 3000 	ldrsh.w	r3, [r3]
 800186a:	461a      	mov	r2, r3
 800186c:	4b8e      	ldr	r3, [pc, #568]	@ (8001aa8 <SignLetter+0x690>)
 800186e:	601a      	str	r2, [r3, #0]
			break;
 8001870:	f000 bc8e 	b.w	8002190 <SignLetter+0xd78>

		case 'G':
			thumb_desired_position = thumb_current - 0.5 * THUMB_CLOSED;
 8001874:	4b82      	ldr	r3, [pc, #520]	@ (8001a80 <SignLetter+0x668>)
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe ff24 	bl	80006c8 <__aeabi_i2d>
 8001880:	a37b      	add	r3, pc, #492	@ (adr r3, 8001a70 <SignLetter+0x658>)
 8001882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001886:	f7fe fdd1 	bl	800042c <__aeabi_dsub>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4610      	mov	r0, r2
 8001890:	4619      	mov	r1, r3
 8001892:	f7fe ff83 	bl	800079c <__aeabi_d2iz>
 8001896:	4603      	mov	r3, r0
 8001898:	4a7a      	ldr	r2, [pc, #488]	@ (8001a84 <SignLetter+0x66c>)
 800189a:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 800189c:	4b7a      	ldr	r3, [pc, #488]	@ (8001a88 <SignLetter+0x670>)
 800189e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018a2:	461a      	mov	r2, r3
 80018a4:	4b7a      	ldr	r3, [pc, #488]	@ (8001a90 <SignLetter+0x678>)
 80018a6:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80018a8:	4b7a      	ldr	r3, [pc, #488]	@ (8001a94 <SignLetter+0x67c>)
 80018aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ae:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80018b2:	4a79      	ldr	r2, [pc, #484]	@ (8001a98 <SignLetter+0x680>)
 80018b4:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 80018b6:	4b79      	ldr	r3, [pc, #484]	@ (8001a9c <SignLetter+0x684>)
 80018b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018bc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80018c0:	4a77      	ldr	r2, [pc, #476]	@ (8001aa0 <SignLetter+0x688>)
 80018c2:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80018c4:	4b77      	ldr	r3, [pc, #476]	@ (8001aa4 <SignLetter+0x68c>)
 80018c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ca:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 80018ce:	4a76      	ldr	r2, [pc, #472]	@ (8001aa8 <SignLetter+0x690>)
 80018d0:	6013      	str	r3, [r2, #0]
			break;
 80018d2:	f000 bc5d 	b.w	8002190 <SignLetter+0xd78>

		case 'H':
			thumb_desired_position = thumb_current - 0.75 * THUMB_CLOSED;
 80018d6:	4b6a      	ldr	r3, [pc, #424]	@ (8001a80 <SignLetter+0x668>)
 80018d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fef3 	bl	80006c8 <__aeabi_i2d>
 80018e2:	a365      	add	r3, pc, #404	@ (adr r3, 8001a78 <SignLetter+0x660>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7fe fda0 	bl	800042c <__aeabi_dsub>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7fe ff52 	bl	800079c <__aeabi_d2iz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a62      	ldr	r2, [pc, #392]	@ (8001a84 <SignLetter+0x66c>)
 80018fc:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 80018fe:	4b62      	ldr	r3, [pc, #392]	@ (8001a88 <SignLetter+0x670>)
 8001900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001904:	461a      	mov	r2, r3
 8001906:	4b62      	ldr	r3, [pc, #392]	@ (8001a90 <SignLetter+0x678>)
 8001908:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 800190a:	4b62      	ldr	r3, [pc, #392]	@ (8001a94 <SignLetter+0x67c>)
 800190c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001910:	461a      	mov	r2, r3
 8001912:	4b61      	ldr	r3, [pc, #388]	@ (8001a98 <SignLetter+0x680>)
 8001914:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001916:	4b61      	ldr	r3, [pc, #388]	@ (8001a9c <SignLetter+0x684>)
 8001918:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001920:	4a5f      	ldr	r2, [pc, #380]	@ (8001aa0 <SignLetter+0x688>)
 8001922:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001924:	4b5f      	ldr	r3, [pc, #380]	@ (8001aa4 <SignLetter+0x68c>)
 8001926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192a:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 800192e:	4a5e      	ldr	r2, [pc, #376]	@ (8001aa8 <SignLetter+0x690>)
 8001930:	6013      	str	r3, [r2, #0]
			break;
 8001932:	f000 bc2d 	b.w	8002190 <SignLetter+0xd78>

		case 'I':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001936:	4b52      	ldr	r3, [pc, #328]	@ (8001a80 <SignLetter+0x668>)
 8001938:	f9b3 3000 	ldrsh.w	r3, [r3]
 800193c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001940:	4a50      	ldr	r2, [pc, #320]	@ (8001a84 <SignLetter+0x66c>)
 8001942:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001944:	4b50      	ldr	r3, [pc, #320]	@ (8001a88 <SignLetter+0x670>)
 8001946:	f9b3 3000 	ldrsh.w	r3, [r3]
 800194a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800194e:	4a50      	ldr	r2, [pc, #320]	@ (8001a90 <SignLetter+0x678>)
 8001950:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001952:	4b50      	ldr	r3, [pc, #320]	@ (8001a94 <SignLetter+0x67c>)
 8001954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001958:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800195c:	4a4e      	ldr	r2, [pc, #312]	@ (8001a98 <SignLetter+0x680>)
 800195e:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001960:	4b4e      	ldr	r3, [pc, #312]	@ (8001a9c <SignLetter+0x684>)
 8001962:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001966:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800196a:	4a4d      	ldr	r2, [pc, #308]	@ (8001aa0 <SignLetter+0x688>)
 800196c:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 800196e:	4b4d      	ldr	r3, [pc, #308]	@ (8001aa4 <SignLetter+0x68c>)
 8001970:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001974:	461a      	mov	r2, r3
 8001976:	4b4c      	ldr	r3, [pc, #304]	@ (8001aa8 <SignLetter+0x690>)
 8001978:	601a      	str	r2, [r3, #0]
			break;
 800197a:	f000 bc09 	b.w	8002190 <SignLetter+0xd78>

		case 'J':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800197e:	4b40      	ldr	r3, [pc, #256]	@ (8001a80 <SignLetter+0x668>)
 8001980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001984:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001988:	4a3e      	ldr	r2, [pc, #248]	@ (8001a84 <SignLetter+0x66c>)
 800198a:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 800198c:	4b3e      	ldr	r3, [pc, #248]	@ (8001a88 <SignLetter+0x670>)
 800198e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001992:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001996:	4a3e      	ldr	r2, [pc, #248]	@ (8001a90 <SignLetter+0x678>)
 8001998:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800199a:	4b3e      	ldr	r3, [pc, #248]	@ (8001a94 <SignLetter+0x67c>)
 800199c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80019a4:	4a3c      	ldr	r2, [pc, #240]	@ (8001a98 <SignLetter+0x680>)
 80019a6:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 80019a8:	4b3c      	ldr	r3, [pc, #240]	@ (8001a9c <SignLetter+0x684>)
 80019aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ae:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80019b2:	4a3b      	ldr	r2, [pc, #236]	@ (8001aa0 <SignLetter+0x688>)
 80019b4:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 80019b6:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa4 <SignLetter+0x68c>)
 80019b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b3a      	ldr	r3, [pc, #232]	@ (8001aa8 <SignLetter+0x690>)
 80019c0:	601a      	str	r2, [r3, #0]
			break;
 80019c2:	e3e5      	b.n	8002190 <SignLetter+0xd78>

		case 'K':
			thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 80019c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001a80 <SignLetter+0x668>)
 80019c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fe7c 	bl	80006c8 <__aeabi_i2d>
 80019d0:	a325      	add	r3, pc, #148	@ (adr r3, 8001a68 <SignLetter+0x650>)
 80019d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d6:	f7fe fd29 	bl	800042c <__aeabi_dsub>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7fe fedb 	bl	800079c <__aeabi_d2iz>
 80019e6:	4603      	mov	r3, r0
 80019e8:	4a26      	ldr	r2, [pc, #152]	@ (8001a84 <SignLetter+0x66c>)
 80019ea:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 80019ec:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <SignLetter+0x670>)
 80019ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b26      	ldr	r3, [pc, #152]	@ (8001a90 <SignLetter+0x678>)
 80019f6:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 80019f8:	4b26      	ldr	r3, [pc, #152]	@ (8001a94 <SignLetter+0x67c>)
 80019fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fe:	461a      	mov	r2, r3
 8001a00:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <SignLetter+0x680>)
 8001a02:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001a04:	4b25      	ldr	r3, [pc, #148]	@ (8001a9c <SignLetter+0x684>)
 8001a06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a0a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001a0e:	4a24      	ldr	r2, [pc, #144]	@ (8001aa0 <SignLetter+0x688>)
 8001a10:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001a12:	4b24      	ldr	r3, [pc, #144]	@ (8001aa4 <SignLetter+0x68c>)
 8001a14:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a18:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001a1c:	4a22      	ldr	r2, [pc, #136]	@ (8001aa8 <SignLetter+0x690>)
 8001a1e:	6013      	str	r3, [r2, #0]
			break;
 8001a20:	e3b6      	b.n	8002190 <SignLetter+0xd78>

		case 'L':
			thumb_desired_position = thumb_current - 0 * THUMB_CLOSED;
 8001a22:	4b17      	ldr	r3, [pc, #92]	@ (8001a80 <SignLetter+0x668>)
 8001a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <SignLetter+0x66c>)
 8001a2c:	601a      	str	r2, [r3, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001a2e:	4b16      	ldr	r3, [pc, #88]	@ (8001a88 <SignLetter+0x670>)
 8001a30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b16      	ldr	r3, [pc, #88]	@ (8001a90 <SignLetter+0x678>)
 8001a38:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001a3a:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <SignLetter+0x67c>)
 8001a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a40:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001a44:	4a14      	ldr	r2, [pc, #80]	@ (8001a98 <SignLetter+0x680>)
 8001a46:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001a48:	4b14      	ldr	r3, [pc, #80]	@ (8001a9c <SignLetter+0x684>)
 8001a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001a52:	4a13      	ldr	r2, [pc, #76]	@ (8001aa0 <SignLetter+0x688>)
 8001a54:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001a56:	4b13      	ldr	r3, [pc, #76]	@ (8001aa4 <SignLetter+0x68c>)
 8001a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5c:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001a60:	4a11      	ldr	r2, [pc, #68]	@ (8001aa8 <SignLetter+0x690>)
 8001a62:	6013      	str	r3, [r2, #0]
			break;
 8001a64:	e394      	b.n	8002190 <SignLetter+0xd78>
 8001a66:	bf00      	nop
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	4062c000 	.word	0x4062c000
 8001a70:	00000000 	.word	0x00000000
 8001a74:	4072c000 	.word	0x4072c000
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	407c2000 	.word	0x407c2000
 8001a80:	2000029c 	.word	0x2000029c
 8001a84:	200002bc 	.word	0x200002bc
 8001a88:	2000029e 	.word	0x2000029e
 8001a8c:	40877000 	.word	0x40877000
 8001a90:	200002c0 	.word	0x200002c0
 8001a94:	200002a0 	.word	0x200002a0
 8001a98:	200002c4 	.word	0x200002c4
 8001a9c:	200002a2 	.word	0x200002a2
 8001aa0:	200002c8 	.word	0x200002c8
 8001aa4:	200002a4 	.word	0x200002a4
 8001aa8:	200002cc 	.word	0x200002cc

		case 'M':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //Make speed faster so thumb closes first or the speed of the other 4 fingers slower.
 8001aac:	4bc2      	ldr	r3, [pc, #776]	@ (8001db8 <SignLetter+0x9a0>)
 8001aae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab2:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001ab6:	4ac1      	ldr	r2, [pc, #772]	@ (8001dbc <SignLetter+0x9a4>)
 8001ab8:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.9 * INDEX_CLOSED;
 8001aba:	4bc1      	ldr	r3, [pc, #772]	@ (8001dc0 <SignLetter+0x9a8>)
 8001abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7fe fe01 	bl	80006c8 <__aeabi_i2d>
 8001ac6:	f04f 0200 	mov.w	r2, #0
 8001aca:	4bbe      	ldr	r3, [pc, #760]	@ (8001dc4 <SignLetter+0x9ac>)
 8001acc:	f7fe fcae 	bl	800042c <__aeabi_dsub>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	4610      	mov	r0, r2
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	f7fe fe60 	bl	800079c <__aeabi_d2iz>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4aba      	ldr	r2, [pc, #744]	@ (8001dc8 <SignLetter+0x9b0>)
 8001ae0:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.9 * MIDDLE_CLOSED;
 8001ae2:	4bba      	ldr	r3, [pc, #744]	@ (8001dcc <SignLetter+0x9b4>)
 8001ae4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fded 	bl	80006c8 <__aeabi_i2d>
 8001aee:	f04f 0200 	mov.w	r2, #0
 8001af2:	4bb4      	ldr	r3, [pc, #720]	@ (8001dc4 <SignLetter+0x9ac>)
 8001af4:	f7fe fc9a 	bl	800042c <__aeabi_dsub>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7fe fe4c 	bl	800079c <__aeabi_d2iz>
 8001b04:	4603      	mov	r3, r0
 8001b06:	4ab2      	ldr	r2, [pc, #712]	@ (8001dd0 <SignLetter+0x9b8>)
 8001b08:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 0.9 * RING_CLOSED;
 8001b0a:	4bb2      	ldr	r3, [pc, #712]	@ (8001dd4 <SignLetter+0x9bc>)
 8001b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fdd9 	bl	80006c8 <__aeabi_i2d>
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	4baa      	ldr	r3, [pc, #680]	@ (8001dc4 <SignLetter+0x9ac>)
 8001b1c:	f7fe fc86 	bl	800042c <__aeabi_dsub>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7fe fe38 	bl	800079c <__aeabi_d2iz>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	4aaa      	ldr	r2, [pc, #680]	@ (8001dd8 <SignLetter+0x9c0>)
 8001b30:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001b32:	4baa      	ldr	r3, [pc, #680]	@ (8001ddc <SignLetter+0x9c4>)
 8001b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b38:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001b3c:	4aa8      	ldr	r2, [pc, #672]	@ (8001de0 <SignLetter+0x9c8>)
 8001b3e:	6013      	str	r3, [r2, #0]
			break;
 8001b40:	e326      	b.n	8002190 <SignLetter+0xd78>

		case 'N':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //Also change the speeds on this one
 8001b42:	4b9d      	ldr	r3, [pc, #628]	@ (8001db8 <SignLetter+0x9a0>)
 8001b44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b48:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001b4c:	4a9b      	ldr	r2, [pc, #620]	@ (8001dbc <SignLetter+0x9a4>)
 8001b4e:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.9 * INDEX_CLOSED;
 8001b50:	4b9b      	ldr	r3, [pc, #620]	@ (8001dc0 <SignLetter+0x9a8>)
 8001b52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fdb6 	bl	80006c8 <__aeabi_i2d>
 8001b5c:	f04f 0200 	mov.w	r2, #0
 8001b60:	4b98      	ldr	r3, [pc, #608]	@ (8001dc4 <SignLetter+0x9ac>)
 8001b62:	f7fe fc63 	bl	800042c <__aeabi_dsub>
 8001b66:	4602      	mov	r2, r0
 8001b68:	460b      	mov	r3, r1
 8001b6a:	4610      	mov	r0, r2
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7fe fe15 	bl	800079c <__aeabi_d2iz>
 8001b72:	4603      	mov	r3, r0
 8001b74:	4a94      	ldr	r2, [pc, #592]	@ (8001dc8 <SignLetter+0x9b0>)
 8001b76:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.9 * MIDDLE_CLOSED;
 8001b78:	4b94      	ldr	r3, [pc, #592]	@ (8001dcc <SignLetter+0x9b4>)
 8001b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fda2 	bl	80006c8 <__aeabi_i2d>
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	4b8e      	ldr	r3, [pc, #568]	@ (8001dc4 <SignLetter+0x9ac>)
 8001b8a:	f7fe fc4f 	bl	800042c <__aeabi_dsub>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7fe fe01 	bl	800079c <__aeabi_d2iz>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	4a8c      	ldr	r2, [pc, #560]	@ (8001dd0 <SignLetter+0x9b8>)
 8001b9e:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8001dd4 <SignLetter+0x9bc>)
 8001ba2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001baa:	4a8b      	ldr	r2, [pc, #556]	@ (8001dd8 <SignLetter+0x9c0>)
 8001bac:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001bae:	4b8b      	ldr	r3, [pc, #556]	@ (8001ddc <SignLetter+0x9c4>)
 8001bb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb4:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001bb8:	4a89      	ldr	r2, [pc, #548]	@ (8001de0 <SignLetter+0x9c8>)
 8001bba:	6013      	str	r3, [r2, #0]
			break;
 8001bbc:	e2e8      	b.n	8002190 <SignLetter+0xd78>

		case 'O':
			thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001bbe:	4b7e      	ldr	r3, [pc, #504]	@ (8001db8 <SignLetter+0x9a0>)
 8001bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fd7f 	bl	80006c8 <__aeabi_i2d>
 8001bca:	a375      	add	r3, pc, #468	@ (adr r3, 8001da0 <SignLetter+0x988>)
 8001bcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd0:	f7fe fc2c 	bl	800042c <__aeabi_dsub>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	460b      	mov	r3, r1
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7fe fdde 	bl	800079c <__aeabi_d2iz>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4a76      	ldr	r2, [pc, #472]	@ (8001dbc <SignLetter+0x9a4>)
 8001be4:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.5 * INDEX_CLOSED;
 8001be6:	4b76      	ldr	r3, [pc, #472]	@ (8001dc0 <SignLetter+0x9a8>)
 8001be8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fd6b 	bl	80006c8 <__aeabi_i2d>
 8001bf2:	f04f 0200 	mov.w	r2, #0
 8001bf6:	4b7b      	ldr	r3, [pc, #492]	@ (8001de4 <SignLetter+0x9cc>)
 8001bf8:	f7fe fc18 	bl	800042c <__aeabi_dsub>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7fe fdca 	bl	800079c <__aeabi_d2iz>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4a6f      	ldr	r2, [pc, #444]	@ (8001dc8 <SignLetter+0x9b0>)
 8001c0c:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.5 * MIDDLE_CLOSED;
 8001c0e:	4b6f      	ldr	r3, [pc, #444]	@ (8001dcc <SignLetter+0x9b4>)
 8001c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c14:	4618      	mov	r0, r3
 8001c16:	f7fe fd57 	bl	80006c8 <__aeabi_i2d>
 8001c1a:	f04f 0200 	mov.w	r2, #0
 8001c1e:	4b71      	ldr	r3, [pc, #452]	@ (8001de4 <SignLetter+0x9cc>)
 8001c20:	f7fe fc04 	bl	800042c <__aeabi_dsub>
 8001c24:	4602      	mov	r2, r0
 8001c26:	460b      	mov	r3, r1
 8001c28:	4610      	mov	r0, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	f7fe fdb6 	bl	800079c <__aeabi_d2iz>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4a67      	ldr	r2, [pc, #412]	@ (8001dd0 <SignLetter+0x9b8>)
 8001c34:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 0.5 * RING_CLOSED;
 8001c36:	4b67      	ldr	r3, [pc, #412]	@ (8001dd4 <SignLetter+0x9bc>)
 8001c38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fd43 	bl	80006c8 <__aeabi_i2d>
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	4b67      	ldr	r3, [pc, #412]	@ (8001de4 <SignLetter+0x9cc>)
 8001c48:	f7fe fbf0 	bl	800042c <__aeabi_dsub>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe fda2 	bl	800079c <__aeabi_d2iz>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4a5f      	ldr	r2, [pc, #380]	@ (8001dd8 <SignLetter+0x9c0>)
 8001c5c:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0.5 * PINKY_CLOSED;
 8001c5e:	4b5f      	ldr	r3, [pc, #380]	@ (8001ddc <SignLetter+0x9c4>)
 8001c60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c64:	4618      	mov	r0, r3
 8001c66:	f7fe fd2f 	bl	80006c8 <__aeabi_i2d>
 8001c6a:	a34f      	add	r3, pc, #316	@ (adr r3, 8001da8 <SignLetter+0x990>)
 8001c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c70:	f7fe fbdc 	bl	800042c <__aeabi_dsub>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4610      	mov	r0, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f7fe fd8e 	bl	800079c <__aeabi_d2iz>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4a57      	ldr	r2, [pc, #348]	@ (8001de0 <SignLetter+0x9c8>)
 8001c84:	6013      	str	r3, [r2, #0]
			break;
 8001c86:	e283      	b.n	8002190 <SignLetter+0xd78>

		case 'P':
			thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001c88:	4b4b      	ldr	r3, [pc, #300]	@ (8001db8 <SignLetter+0x9a0>)
 8001c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fd1a 	bl	80006c8 <__aeabi_i2d>
 8001c94:	a342      	add	r3, pc, #264	@ (adr r3, 8001da0 <SignLetter+0x988>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe fbc7 	bl	800042c <__aeabi_dsub>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7fe fd79 	bl	800079c <__aeabi_d2iz>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4a43      	ldr	r2, [pc, #268]	@ (8001dbc <SignLetter+0x9a4>)
 8001cae:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.25 * INDEX_CLOSED;
 8001cb0:	4b43      	ldr	r3, [pc, #268]	@ (8001dc0 <SignLetter+0x9a8>)
 8001cb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fd06 	bl	80006c8 <__aeabi_i2d>
 8001cbc:	f04f 0200 	mov.w	r2, #0
 8001cc0:	4b49      	ldr	r3, [pc, #292]	@ (8001de8 <SignLetter+0x9d0>)
 8001cc2:	f7fe fbb3 	bl	800042c <__aeabi_dsub>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	460b      	mov	r3, r1
 8001cca:	4610      	mov	r0, r2
 8001ccc:	4619      	mov	r1, r3
 8001cce:	f7fe fd65 	bl	800079c <__aeabi_d2iz>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	4a3c      	ldr	r2, [pc, #240]	@ (8001dc8 <SignLetter+0x9b0>)
 8001cd6:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.5 * MIDDLE_CLOSED;
 8001cd8:	4b3c      	ldr	r3, [pc, #240]	@ (8001dcc <SignLetter+0x9b4>)
 8001cda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fcf2 	bl	80006c8 <__aeabi_i2d>
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	@ (8001de4 <SignLetter+0x9cc>)
 8001cea:	f7fe fb9f 	bl	800042c <__aeabi_dsub>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f7fe fd51 	bl	800079c <__aeabi_d2iz>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a34      	ldr	r2, [pc, #208]	@ (8001dd0 <SignLetter+0x9b8>)
 8001cfe:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001d00:	4b34      	ldr	r3, [pc, #208]	@ (8001dd4 <SignLetter+0x9bc>)
 8001d02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d06:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001d0a:	4a33      	ldr	r2, [pc, #204]	@ (8001dd8 <SignLetter+0x9c0>)
 8001d0c:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001d0e:	4b33      	ldr	r3, [pc, #204]	@ (8001ddc <SignLetter+0x9c4>)
 8001d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d14:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001d18:	4a31      	ldr	r2, [pc, #196]	@ (8001de0 <SignLetter+0x9c8>)
 8001d1a:	6013      	str	r3, [r2, #0]
			break;
 8001d1c:	e238      	b.n	8002190 <SignLetter+0xd78>

		case 'Q':
			thumb_desired_position = thumb_current - 0.1 * THUMB_CLOSED;
 8001d1e:	4b26      	ldr	r3, [pc, #152]	@ (8001db8 <SignLetter+0x9a0>)
 8001d20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fccf 	bl	80006c8 <__aeabi_i2d>
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001dec <SignLetter+0x9d4>)
 8001d30:	f7fe fb7c 	bl	800042c <__aeabi_dsub>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	4610      	mov	r0, r2
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	f7fe fd2e 	bl	800079c <__aeabi_d2iz>
 8001d40:	4603      	mov	r3, r0
 8001d42:	4a1e      	ldr	r2, [pc, #120]	@ (8001dbc <SignLetter+0x9a4>)
 8001d44:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.3 * INDEX_CLOSED;
 8001d46:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc0 <SignLetter+0x9a8>)
 8001d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fcbb 	bl	80006c8 <__aeabi_i2d>
 8001d52:	a317      	add	r3, pc, #92	@ (adr r3, 8001db0 <SignLetter+0x998>)
 8001d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d58:	f7fe fb68 	bl	800042c <__aeabi_dsub>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4610      	mov	r0, r2
 8001d62:	4619      	mov	r1, r3
 8001d64:	f7fe fd1a 	bl	800079c <__aeabi_d2iz>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a17      	ldr	r2, [pc, #92]	@ (8001dc8 <SignLetter+0x9b0>)
 8001d6c:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001d6e:	4b17      	ldr	r3, [pc, #92]	@ (8001dcc <SignLetter+0x9b4>)
 8001d70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d74:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001d78:	4a15      	ldr	r2, [pc, #84]	@ (8001dd0 <SignLetter+0x9b8>)
 8001d7a:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001d7c:	4b15      	ldr	r3, [pc, #84]	@ (8001dd4 <SignLetter+0x9bc>)
 8001d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d82:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001d86:	4a14      	ldr	r2, [pc, #80]	@ (8001dd8 <SignLetter+0x9c0>)
 8001d88:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001d8a:	4b14      	ldr	r3, [pc, #80]	@ (8001ddc <SignLetter+0x9c4>)
 8001d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d90:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001d94:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <SignLetter+0x9c8>)
 8001d96:	6013      	str	r3, [r2, #0]
			break;
 8001d98:	e1fa      	b.n	8002190 <SignLetter+0xd78>
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	00000000 	.word	0x00000000
 8001da4:	4062c000 	.word	0x4062c000
 8001da8:	00000000 	.word	0x00000000
 8001dac:	407c2000 	.word	0x407c2000
 8001db0:	00000000 	.word	0x00000000
 8001db4:	4072c000 	.word	0x4072c000
 8001db8:	2000029c 	.word	0x2000029c
 8001dbc:	200002bc 	.word	0x200002bc
 8001dc0:	2000029e 	.word	0x2000029e
 8001dc4:	408c2000 	.word	0x408c2000
 8001dc8:	200002c0 	.word	0x200002c0
 8001dcc:	200002a0 	.word	0x200002a0
 8001dd0:	200002c4 	.word	0x200002c4
 8001dd4:	200002a2 	.word	0x200002a2
 8001dd8:	200002c8 	.word	0x200002c8
 8001ddc:	200002a4 	.word	0x200002a4
 8001de0:	200002cc 	.word	0x200002cc
 8001de4:	407f4000 	.word	0x407f4000
 8001de8:	406f4000 	.word	0x406f4000
 8001dec:	404e0000 	.word	0x404e0000

		case 'R':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //TBD
 8001df0:	4bb5      	ldr	r3, [pc, #724]	@ (80020c8 <SignLetter+0xcb0>)
 8001df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df6:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001dfa:	4ab4      	ldr	r2, [pc, #720]	@ (80020cc <SignLetter+0xcb4>)
 8001dfc:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001dfe:	4bb4      	ldr	r3, [pc, #720]	@ (80020d0 <SignLetter+0xcb8>)
 8001e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e04:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001e08:	4ab2      	ldr	r2, [pc, #712]	@ (80020d4 <SignLetter+0xcbc>)
 8001e0a:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001e0c:	4bb2      	ldr	r3, [pc, #712]	@ (80020d8 <SignLetter+0xcc0>)
 8001e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e12:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001e16:	4ab1      	ldr	r2, [pc, #708]	@ (80020dc <SignLetter+0xcc4>)
 8001e18:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001e1a:	4bb1      	ldr	r3, [pc, #708]	@ (80020e0 <SignLetter+0xcc8>)
 8001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e20:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001e24:	4aaf      	ldr	r2, [pc, #700]	@ (80020e4 <SignLetter+0xccc>)
 8001e26:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001e28:	4baf      	ldr	r3, [pc, #700]	@ (80020e8 <SignLetter+0xcd0>)
 8001e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2e:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001e32:	4aae      	ldr	r2, [pc, #696]	@ (80020ec <SignLetter+0xcd4>)
 8001e34:	6013      	str	r3, [r2, #0]
			break;
 8001e36:	e1ab      	b.n	8002190 <SignLetter+0xd78>

		case 'S':
			thumb_desired_position = thumb_current - 0.8 * THUMB_CLOSED;//Make thumb slower so it ends on top of the other fingers
 8001e38:	4ba3      	ldr	r3, [pc, #652]	@ (80020c8 <SignLetter+0xcb0>)
 8001e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fc42 	bl	80006c8 <__aeabi_i2d>
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	4ba9      	ldr	r3, [pc, #676]	@ (80020f0 <SignLetter+0xcd8>)
 8001e4a:	f7fe faef 	bl	800042c <__aeabi_dsub>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fca1 	bl	800079c <__aeabi_d2iz>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	4a9b      	ldr	r2, [pc, #620]	@ (80020cc <SignLetter+0xcb4>)
 8001e5e:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001e60:	4b9b      	ldr	r3, [pc, #620]	@ (80020d0 <SignLetter+0xcb8>)
 8001e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e66:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001e6a:	4a9a      	ldr	r2, [pc, #616]	@ (80020d4 <SignLetter+0xcbc>)
 8001e6c:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001e6e:	4b9a      	ldr	r3, [pc, #616]	@ (80020d8 <SignLetter+0xcc0>)
 8001e70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e74:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001e78:	4a98      	ldr	r2, [pc, #608]	@ (80020dc <SignLetter+0xcc4>)
 8001e7a:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001e7c:	4b98      	ldr	r3, [pc, #608]	@ (80020e0 <SignLetter+0xcc8>)
 8001e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e82:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001e86:	4a97      	ldr	r2, [pc, #604]	@ (80020e4 <SignLetter+0xccc>)
 8001e88:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001e8a:	4b97      	ldr	r3, [pc, #604]	@ (80020e8 <SignLetter+0xcd0>)
 8001e8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e90:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001e94:	4a95      	ldr	r2, [pc, #596]	@ (80020ec <SignLetter+0xcd4>)
 8001e96:	6013      	str	r3, [r2, #0]
			break;
 8001e98:	e17a      	b.n	8002190 <SignLetter+0xd78>

		case 'T':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //TBD
 8001e9a:	4b8b      	ldr	r3, [pc, #556]	@ (80020c8 <SignLetter+0xcb0>)
 8001e9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea0:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001ea4:	4a89      	ldr	r2, [pc, #548]	@ (80020cc <SignLetter+0xcb4>)
 8001ea6:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001ea8:	4b89      	ldr	r3, [pc, #548]	@ (80020d0 <SignLetter+0xcb8>)
 8001eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eae:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001eb2:	4a88      	ldr	r2, [pc, #544]	@ (80020d4 <SignLetter+0xcbc>)
 8001eb4:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001eb6:	4b88      	ldr	r3, [pc, #544]	@ (80020d8 <SignLetter+0xcc0>)
 8001eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001ec0:	4a86      	ldr	r2, [pc, #536]	@ (80020dc <SignLetter+0xcc4>)
 8001ec2:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001ec4:	4b86      	ldr	r3, [pc, #536]	@ (80020e0 <SignLetter+0xcc8>)
 8001ec6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eca:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001ece:	4a85      	ldr	r2, [pc, #532]	@ (80020e4 <SignLetter+0xccc>)
 8001ed0:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001ed2:	4b85      	ldr	r3, [pc, #532]	@ (80020e8 <SignLetter+0xcd0>)
 8001ed4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed8:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001edc:	4a83      	ldr	r2, [pc, #524]	@ (80020ec <SignLetter+0xcd4>)
 8001ede:	6013      	str	r3, [r2, #0]
			break;
 8001ee0:	e156      	b.n	8002190 <SignLetter+0xd78>

		case 'U':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001ee2:	4b79      	ldr	r3, [pc, #484]	@ (80020c8 <SignLetter+0xcb0>)
 8001ee4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee8:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001eec:	4a77      	ldr	r2, [pc, #476]	@ (80020cc <SignLetter+0xcb4>)
 8001eee:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001ef0:	4b77      	ldr	r3, [pc, #476]	@ (80020d0 <SignLetter+0xcb8>)
 8001ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	4b76      	ldr	r3, [pc, #472]	@ (80020d4 <SignLetter+0xcbc>)
 8001efa:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001efc:	4b76      	ldr	r3, [pc, #472]	@ (80020d8 <SignLetter+0xcc0>)
 8001efe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f02:	461a      	mov	r2, r3
 8001f04:	4b75      	ldr	r3, [pc, #468]	@ (80020dc <SignLetter+0xcc4>)
 8001f06:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001f08:	4b75      	ldr	r3, [pc, #468]	@ (80020e0 <SignLetter+0xcc8>)
 8001f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001f12:	4a74      	ldr	r2, [pc, #464]	@ (80020e4 <SignLetter+0xccc>)
 8001f14:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001f16:	4b74      	ldr	r3, [pc, #464]	@ (80020e8 <SignLetter+0xcd0>)
 8001f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1c:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001f20:	4a72      	ldr	r2, [pc, #456]	@ (80020ec <SignLetter+0xcd4>)
 8001f22:	6013      	str	r3, [r2, #0]
			break;
 8001f24:	e134      	b.n	8002190 <SignLetter+0xd78>

		case 'V':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001f26:	4b68      	ldr	r3, [pc, #416]	@ (80020c8 <SignLetter+0xcb0>)
 8001f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001f30:	4a66      	ldr	r2, [pc, #408]	@ (80020cc <SignLetter+0xcb4>)
 8001f32:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001f34:	4b66      	ldr	r3, [pc, #408]	@ (80020d0 <SignLetter+0xcb8>)
 8001f36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	4b65      	ldr	r3, [pc, #404]	@ (80020d4 <SignLetter+0xcbc>)
 8001f3e:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001f40:	4b65      	ldr	r3, [pc, #404]	@ (80020d8 <SignLetter+0xcc0>)
 8001f42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f46:	461a      	mov	r2, r3
 8001f48:	4b64      	ldr	r3, [pc, #400]	@ (80020dc <SignLetter+0xcc4>)
 8001f4a:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001f4c:	4b64      	ldr	r3, [pc, #400]	@ (80020e0 <SignLetter+0xcc8>)
 8001f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f52:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001f56:	4a63      	ldr	r2, [pc, #396]	@ (80020e4 <SignLetter+0xccc>)
 8001f58:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001f5a:	4b63      	ldr	r3, [pc, #396]	@ (80020e8 <SignLetter+0xcd0>)
 8001f5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f60:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001f64:	4a61      	ldr	r2, [pc, #388]	@ (80020ec <SignLetter+0xcd4>)
 8001f66:	6013      	str	r3, [r2, #0]
			break;
 8001f68:	e112      	b.n	8002190 <SignLetter+0xd78>

		case 'W':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001f6a:	4b57      	ldr	r3, [pc, #348]	@ (80020c8 <SignLetter+0xcb0>)
 8001f6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f70:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001f74:	4a55      	ldr	r2, [pc, #340]	@ (80020cc <SignLetter+0xcb4>)
 8001f76:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001f78:	4b55      	ldr	r3, [pc, #340]	@ (80020d0 <SignLetter+0xcb8>)
 8001f7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4b54      	ldr	r3, [pc, #336]	@ (80020d4 <SignLetter+0xcbc>)
 8001f82:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001f84:	4b54      	ldr	r3, [pc, #336]	@ (80020d8 <SignLetter+0xcc0>)
 8001f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b53      	ldr	r3, [pc, #332]	@ (80020dc <SignLetter+0xcc4>)
 8001f8e:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 0 * RING_CLOSED;
 8001f90:	4b53      	ldr	r3, [pc, #332]	@ (80020e0 <SignLetter+0xcc8>)
 8001f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f96:	461a      	mov	r2, r3
 8001f98:	4b52      	ldr	r3, [pc, #328]	@ (80020e4 <SignLetter+0xccc>)
 8001f9a:	601a      	str	r2, [r3, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001f9c:	4b52      	ldr	r3, [pc, #328]	@ (80020e8 <SignLetter+0xcd0>)
 8001f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa2:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001fa6:	4a51      	ldr	r2, [pc, #324]	@ (80020ec <SignLetter+0xcd4>)
 8001fa8:	6013      	str	r3, [r2, #0]
			break;
 8001faa:	e0f1      	b.n	8002190 <SignLetter+0xd78>

		case 'X':
			thumb_desired_position = thumb_current - 0.5 * THUMB_CLOSED;
 8001fac:	4b46      	ldr	r3, [pc, #280]	@ (80020c8 <SignLetter+0xcb0>)
 8001fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe fb88 	bl	80006c8 <__aeabi_i2d>
 8001fb8:	a341      	add	r3, pc, #260	@ (adr r3, 80020c0 <SignLetter+0xca8>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	f7fe fa35 	bl	800042c <__aeabi_dsub>
 8001fc2:	4602      	mov	r2, r0
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	4610      	mov	r0, r2
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f7fe fbe7 	bl	800079c <__aeabi_d2iz>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4a3e      	ldr	r2, [pc, #248]	@ (80020cc <SignLetter+0xcb4>)
 8001fd2:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.25 * INDEX_CLOSED;
 8001fd4:	4b3e      	ldr	r3, [pc, #248]	@ (80020d0 <SignLetter+0xcb8>)
 8001fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fb74 	bl	80006c8 <__aeabi_i2d>
 8001fe0:	f04f 0200 	mov.w	r2, #0
 8001fe4:	4b43      	ldr	r3, [pc, #268]	@ (80020f4 <SignLetter+0xcdc>)
 8001fe6:	f7fe fa21 	bl	800042c <__aeabi_dsub>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4610      	mov	r0, r2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	f7fe fbd3 	bl	800079c <__aeabi_d2iz>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	4a36      	ldr	r2, [pc, #216]	@ (80020d4 <SignLetter+0xcbc>)
 8001ffa:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.75 * MIDDLE_CLOSED;
 8001ffc:	4b36      	ldr	r3, [pc, #216]	@ (80020d8 <SignLetter+0xcc0>)
 8001ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002002:	4618      	mov	r0, r3
 8002004:	f7fe fb60 	bl	80006c8 <__aeabi_i2d>
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	4b3a      	ldr	r3, [pc, #232]	@ (80020f8 <SignLetter+0xce0>)
 800200e:	f7fe fa0d 	bl	800042c <__aeabi_dsub>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4610      	mov	r0, r2
 8002018:	4619      	mov	r1, r3
 800201a:	f7fe fbbf 	bl	800079c <__aeabi_d2iz>
 800201e:	4603      	mov	r3, r0
 8002020:	4a2e      	ldr	r2, [pc, #184]	@ (80020dc <SignLetter+0xcc4>)
 8002022:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 0.9 * RING_CLOSED;
 8002024:	4b2e      	ldr	r3, [pc, #184]	@ (80020e0 <SignLetter+0xcc8>)
 8002026:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202a:	4618      	mov	r0, r3
 800202c:	f7fe fb4c 	bl	80006c8 <__aeabi_i2d>
 8002030:	f04f 0200 	mov.w	r2, #0
 8002034:	4b31      	ldr	r3, [pc, #196]	@ (80020fc <SignLetter+0xce4>)
 8002036:	f7fe f9f9 	bl	800042c <__aeabi_dsub>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4610      	mov	r0, r2
 8002040:	4619      	mov	r1, r3
 8002042:	f7fe fbab 	bl	800079c <__aeabi_d2iz>
 8002046:	4603      	mov	r3, r0
 8002048:	4a26      	ldr	r2, [pc, #152]	@ (80020e4 <SignLetter+0xccc>)
 800204a:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0.9 * PINKY_CLOSED;
 800204c:	4b26      	ldr	r3, [pc, #152]	@ (80020e8 <SignLetter+0xcd0>)
 800204e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fb38 	bl	80006c8 <__aeabi_i2d>
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	4b28      	ldr	r3, [pc, #160]	@ (8002100 <SignLetter+0xce8>)
 800205e:	f7fe f9e5 	bl	800042c <__aeabi_dsub>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f7fe fb97 	bl	800079c <__aeabi_d2iz>
 800206e:	4603      	mov	r3, r0
 8002070:	4a1e      	ldr	r2, [pc, #120]	@ (80020ec <SignLetter+0xcd4>)
 8002072:	6013      	str	r3, [r2, #0]
			break;
 8002074:	e08c      	b.n	8002190 <SignLetter+0xd78>

		case 'Y':
			thumb_desired_position = thumb_current - 0 * THUMB_CLOSED;
 8002076:	4b14      	ldr	r3, [pc, #80]	@ (80020c8 <SignLetter+0xcb0>)
 8002078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207c:	461a      	mov	r2, r3
 800207e:	4b13      	ldr	r3, [pc, #76]	@ (80020cc <SignLetter+0xcb4>)
 8002080:	601a      	str	r2, [r3, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 8002082:	4b13      	ldr	r3, [pc, #76]	@ (80020d0 <SignLetter+0xcb8>)
 8002084:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002088:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800208c:	4a11      	ldr	r2, [pc, #68]	@ (80020d4 <SignLetter+0xcbc>)
 800208e:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8002090:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <SignLetter+0xcc0>)
 8002092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002096:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800209a:	4a10      	ldr	r2, [pc, #64]	@ (80020dc <SignLetter+0xcc4>)
 800209c:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 800209e:	4b10      	ldr	r3, [pc, #64]	@ (80020e0 <SignLetter+0xcc8>)
 80020a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80020a8:	4a0e      	ldr	r2, [pc, #56]	@ (80020e4 <SignLetter+0xccc>)
 80020aa:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 80020ac:	4b0e      	ldr	r3, [pc, #56]	@ (80020e8 <SignLetter+0xcd0>)
 80020ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b0d      	ldr	r3, [pc, #52]	@ (80020ec <SignLetter+0xcd4>)
 80020b6:	601a      	str	r2, [r3, #0]
			break;
 80020b8:	e06a      	b.n	8002190 <SignLetter+0xd78>
 80020ba:	bf00      	nop
 80020bc:	f3af 8000 	nop.w
 80020c0:	00000000 	.word	0x00000000
 80020c4:	4072c000 	.word	0x4072c000
 80020c8:	2000029c 	.word	0x2000029c
 80020cc:	200002bc 	.word	0x200002bc
 80020d0:	2000029e 	.word	0x2000029e
 80020d4:	200002c0 	.word	0x200002c0
 80020d8:	200002a0 	.word	0x200002a0
 80020dc:	200002c4 	.word	0x200002c4
 80020e0:	200002a2 	.word	0x200002a2
 80020e4:	200002c8 	.word	0x200002c8
 80020e8:	200002a4 	.word	0x200002a4
 80020ec:	200002cc 	.word	0x200002cc
 80020f0:	407e0000 	.word	0x407e0000
 80020f4:	406f4000 	.word	0x406f4000
 80020f8:	40877000 	.word	0x40877000
 80020fc:	408c2000 	.word	0x408c2000
 8002100:	40895000 	.word	0x40895000

		case 'Z':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //TDB
 8002104:	4b24      	ldr	r3, [pc, #144]	@ (8002198 <SignLetter+0xd80>)
 8002106:	f9b3 3000 	ldrsh.w	r3, [r3]
 800210a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800210e:	4a23      	ldr	r2, [pc, #140]	@ (800219c <SignLetter+0xd84>)
 8002110:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 8002112:	4b23      	ldr	r3, [pc, #140]	@ (80021a0 <SignLetter+0xd88>)
 8002114:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002118:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800211c:	4a21      	ldr	r2, [pc, #132]	@ (80021a4 <SignLetter+0xd8c>)
 800211e:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8002120:	4b21      	ldr	r3, [pc, #132]	@ (80021a8 <SignLetter+0xd90>)
 8002122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002126:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800212a:	4a20      	ldr	r2, [pc, #128]	@ (80021ac <SignLetter+0xd94>)
 800212c:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 800212e:	4b20      	ldr	r3, [pc, #128]	@ (80021b0 <SignLetter+0xd98>)
 8002130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002134:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002138:	4a1e      	ldr	r2, [pc, #120]	@ (80021b4 <SignLetter+0xd9c>)
 800213a:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800213c:	4b1e      	ldr	r3, [pc, #120]	@ (80021b8 <SignLetter+0xda0>)
 800213e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002142:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8002146:	4a1d      	ldr	r2, [pc, #116]	@ (80021bc <SignLetter+0xda4>)
 8002148:	6013      	str	r3, [r2, #0]
			break;
 800214a:	e021      	b.n	8002190 <SignLetter+0xd78>

		case '0':
			thumb_desired_position = thumb_current - 0 * THUMB_CLOSED;
 800214c:	4b12      	ldr	r3, [pc, #72]	@ (8002198 <SignLetter+0xd80>)
 800214e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002152:	461a      	mov	r2, r3
 8002154:	4b11      	ldr	r3, [pc, #68]	@ (800219c <SignLetter+0xd84>)
 8002156:	601a      	str	r2, [r3, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8002158:	4b11      	ldr	r3, [pc, #68]	@ (80021a0 <SignLetter+0xd88>)
 800215a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800215e:	461a      	mov	r2, r3
 8002160:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <SignLetter+0xd8c>)
 8002162:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8002164:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <SignLetter+0xd90>)
 8002166:	f9b3 3000 	ldrsh.w	r3, [r3]
 800216a:	461a      	mov	r2, r3
 800216c:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <SignLetter+0xd94>)
 800216e:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 0 * RING_CLOSED;
 8002170:	4b0f      	ldr	r3, [pc, #60]	@ (80021b0 <SignLetter+0xd98>)
 8002172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002176:	461a      	mov	r2, r3
 8002178:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <SignLetter+0xd9c>)
 800217a:	601a      	str	r2, [r3, #0]
			pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 800217c:	4b0e      	ldr	r3, [pc, #56]	@ (80021b8 <SignLetter+0xda0>)
 800217e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002182:	461a      	mov	r2, r3
 8002184:	4b0d      	ldr	r3, [pc, #52]	@ (80021bc <SignLetter+0xda4>)
 8002186:	601a      	str	r2, [r3, #0]
			break;
 8002188:	e002      	b.n	8002190 <SignLetter+0xd78>

	        default:
	            // Default position (rest)
	            Servo_StopAll();
 800218a:	f7ff f8ed 	bl	8001368 <Servo_StopAll>
	            break;
 800218e:	bf00      	nop

	    }
	}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	2000029c 	.word	0x2000029c
 800219c:	200002bc 	.word	0x200002bc
 80021a0:	2000029e 	.word	0x2000029e
 80021a4:	200002c0 	.word	0x200002c0
 80021a8:	200002a0 	.word	0x200002a0
 80021ac:	200002c4 	.word	0x200002c4
 80021b0:	200002a2 	.word	0x200002a2
 80021b4:	200002c8 	.word	0x200002c8
 80021b8:	200002a4 	.word	0x200002a4
 80021bc:	200002cc 	.word	0x200002cc

080021c0 <TimeVariation>:
	}

	/*Parameters: Which finger is being moved, and the desired position
	 * Returns: integer of calculated time to move finger that far
	 * This program calculated how long the finger must move to reach the desired position based off of observations. */
	int TimeVariation(Finger finger, int desired_position){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	6039      	str	r1, [r7, #0]
 80021ca:	71fb      	strb	r3, [r7, #7]
		// Checks if the finger is moving down, if it is no variation required
		if(desired_position < 0){
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	da04      	bge.n	80021dc <TimeVariation+0x1c>
			desired_position *= -1;
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	425b      	negs	r3, r3
 80021d6:	603b      	str	r3, [r7, #0]
			return desired_position;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	e114      	b.n	8002406 <TimeVariation+0x246>
		}
		else if(desired_position == 0)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d101      	bne.n	80021e6 <TimeVariation+0x26>
			return 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	e10f      	b.n	8002406 <TimeVariation+0x246>
		// Actual time variation calculations based on testing
		switch(finger){
 80021e6:	79fb      	ldrb	r3, [r7, #7]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	f200 810c 	bhi.w	8002406 <TimeVariation+0x246>
 80021ee:	a201      	add	r2, pc, #4	@ (adr r2, 80021f4 <TimeVariation+0x34>)
 80021f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f4:	08002209 	.word	0x08002209
 80021f8:	08002297 	.word	0x08002297
 80021fc:	080022f3 	.word	0x080022f3
 8002200:	0800234f 	.word	0x0800234f
 8002204:	080023ab 	.word	0x080023ab
			case(THUMB):
				switch(desired_position){
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800220e:	d00c      	beq.n	800222a <TimeVariation+0x6a>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002216:	dc3c      	bgt.n	8002292 <TimeVariation+0xd2>
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800221e:	d016      	beq.n	800224e <TimeVariation+0x8e>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8002226:	d024      	beq.n	8002272 <TimeVariation+0xb2>
 8002228:	e033      	b.n	8002292 <TimeVariation+0xd2>
					case THUMB_CLOSED:
						desired_position *= 0.5;
 800222a:	6838      	ldr	r0, [r7, #0]
 800222c:	f7fe fa4c 	bl	80006c8 <__aeabi_i2d>
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	4b7e      	ldr	r3, [pc, #504]	@ (8002430 <TimeVariation+0x270>)
 8002236:	f7fd ffcb 	bl	80001d0 <__aeabi_dmul>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4610      	mov	r0, r2
 8002240:	4619      	mov	r1, r3
 8002242:	f7fe faab 	bl	800079c <__aeabi_d2iz>
 8002246:	4603      	mov	r3, r0
 8002248:	603b      	str	r3, [r7, #0]
						return desired_position;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	e0db      	b.n	8002406 <TimeVariation+0x246>

					case THUMB_CLOSED/2:
						desired_position *= 0.25;
 800224e:	6838      	ldr	r0, [r7, #0]
 8002250:	f7fe fa3a 	bl	80006c8 <__aeabi_i2d>
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	4b76      	ldr	r3, [pc, #472]	@ (8002434 <TimeVariation+0x274>)
 800225a:	f7fd ffb9 	bl	80001d0 <__aeabi_dmul>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4610      	mov	r0, r2
 8002264:	4619      	mov	r1, r3
 8002266:	f7fe fa99 	bl	800079c <__aeabi_d2iz>
 800226a:	4603      	mov	r3, r0
 800226c:	603b      	str	r3, [r7, #0]
						return desired_position;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	e0c9      	b.n	8002406 <TimeVariation+0x246>

					case (THUMB_CLOSED * 3 + 2) / 4:
						desired_position *= 0.38;
 8002272:	6838      	ldr	r0, [r7, #0]
 8002274:	f7fe fa28 	bl	80006c8 <__aeabi_i2d>
 8002278:	a365      	add	r3, pc, #404	@ (adr r3, 8002410 <TimeVariation+0x250>)
 800227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227e:	f7fd ffa7 	bl	80001d0 <__aeabi_dmul>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f7fe fa87 	bl	800079c <__aeabi_d2iz>
 800228e:	4603      	mov	r3, r0
 8002290:	603b      	str	r3, [r7, #0]

					default:
						return desired_position;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	e0b7      	b.n	8002406 <TimeVariation+0x246>
				}
			case(INDEX):
				switch(desired_position){
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800229c:	d015      	beq.n	80022ca <TimeVariation+0x10a>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80022a4:	d123      	bne.n	80022ee <TimeVariation+0x12e>
					case INDEX_CLOSED:
						desired_position *= 0.5;
 80022a6:	6838      	ldr	r0, [r7, #0]
 80022a8:	f7fe fa0e 	bl	80006c8 <__aeabi_i2d>
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	4b5f      	ldr	r3, [pc, #380]	@ (8002430 <TimeVariation+0x270>)
 80022b2:	f7fd ff8d 	bl	80001d0 <__aeabi_dmul>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	f7fe fa6d 	bl	800079c <__aeabi_d2iz>
 80022c2:	4603      	mov	r3, r0
 80022c4:	603b      	str	r3, [r7, #0]
						return desired_position;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	e09d      	b.n	8002406 <TimeVariation+0x246>

					case (INDEX_CLOSED/2):
						desired_position *= 0.25;
 80022ca:	6838      	ldr	r0, [r7, #0]
 80022cc:	f7fe f9fc 	bl	80006c8 <__aeabi_i2d>
 80022d0:	f04f 0200 	mov.w	r2, #0
 80022d4:	4b57      	ldr	r3, [pc, #348]	@ (8002434 <TimeVariation+0x274>)
 80022d6:	f7fd ff7b 	bl	80001d0 <__aeabi_dmul>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	4610      	mov	r0, r2
 80022e0:	4619      	mov	r1, r3
 80022e2:	f7fe fa5b 	bl	800079c <__aeabi_d2iz>
 80022e6:	4603      	mov	r3, r0
 80022e8:	603b      	str	r3, [r7, #0]
						return desired_position;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	e08b      	b.n	8002406 <TimeVariation+0x246>

					default:
						return desired_position;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	e089      	b.n	8002406 <TimeVariation+0x246>
				}
			case(MIDDLE):
				switch(desired_position){
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80022f8:	d015      	beq.n	8002326 <TimeVariation+0x166>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002300:	d123      	bne.n	800234a <TimeVariation+0x18a>
					case MIDDLE_CLOSED:
						desired_position *= 0.5;
 8002302:	6838      	ldr	r0, [r7, #0]
 8002304:	f7fe f9e0 	bl	80006c8 <__aeabi_i2d>
 8002308:	f04f 0200 	mov.w	r2, #0
 800230c:	4b48      	ldr	r3, [pc, #288]	@ (8002430 <TimeVariation+0x270>)
 800230e:	f7fd ff5f 	bl	80001d0 <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4610      	mov	r0, r2
 8002318:	4619      	mov	r1, r3
 800231a:	f7fe fa3f 	bl	800079c <__aeabi_d2iz>
 800231e:	4603      	mov	r3, r0
 8002320:	603b      	str	r3, [r7, #0]
						return desired_position;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	e06f      	b.n	8002406 <TimeVariation+0x246>

					case MIDDLE_CLOSED/2:
						desired_position *= 0.25;
 8002326:	6838      	ldr	r0, [r7, #0]
 8002328:	f7fe f9ce 	bl	80006c8 <__aeabi_i2d>
 800232c:	f04f 0200 	mov.w	r2, #0
 8002330:	4b40      	ldr	r3, [pc, #256]	@ (8002434 <TimeVariation+0x274>)
 8002332:	f7fd ff4d 	bl	80001d0 <__aeabi_dmul>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4610      	mov	r0, r2
 800233c:	4619      	mov	r1, r3
 800233e:	f7fe fa2d 	bl	800079c <__aeabi_d2iz>
 8002342:	4603      	mov	r3, r0
 8002344:	603b      	str	r3, [r7, #0]
						return desired_position;
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	e05d      	b.n	8002406 <TimeVariation+0x246>

					default:
						return desired_position;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	e05b      	b.n	8002406 <TimeVariation+0x246>
				}
			case(RING):
				switch(desired_position){
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002354:	d015      	beq.n	8002382 <TimeVariation+0x1c2>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800235c:	d123      	bne.n	80023a6 <TimeVariation+0x1e6>
					case RING_CLOSED:
						desired_position *= 0.6;
 800235e:	6838      	ldr	r0, [r7, #0]
 8002360:	f7fe f9b2 	bl	80006c8 <__aeabi_i2d>
 8002364:	a32c      	add	r3, pc, #176	@ (adr r3, 8002418 <TimeVariation+0x258>)
 8002366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236a:	f7fd ff31 	bl	80001d0 <__aeabi_dmul>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	f7fe fa11 	bl	800079c <__aeabi_d2iz>
 800237a:	4603      	mov	r3, r0
 800237c:	603b      	str	r3, [r7, #0]
						return desired_position;
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	e041      	b.n	8002406 <TimeVariation+0x246>

					case RING_CLOSED/2:
						desired_position *= 0.25;
 8002382:	6838      	ldr	r0, [r7, #0]
 8002384:	f7fe f9a0 	bl	80006c8 <__aeabi_i2d>
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	4b29      	ldr	r3, [pc, #164]	@ (8002434 <TimeVariation+0x274>)
 800238e:	f7fd ff1f 	bl	80001d0 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4610      	mov	r0, r2
 8002398:	4619      	mov	r1, r3
 800239a:	f7fe f9ff 	bl	800079c <__aeabi_d2iz>
 800239e:	4603      	mov	r3, r0
 80023a0:	603b      	str	r3, [r7, #0]
						return desired_position;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	e02f      	b.n	8002406 <TimeVariation+0x246>

					default:
						return desired_position;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	e02d      	b.n	8002406 <TimeVariation+0x246>
				}
				case(PINKY):
					switch(desired_position){
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 80023b0:	d015      	beq.n	80023de <TimeVariation+0x21e>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80023b8:	d123      	bne.n	8002402 <TimeVariation+0x242>
						case PINKY_CLOSED:
							desired_position *= 0.3;
 80023ba:	6838      	ldr	r0, [r7, #0]
 80023bc:	f7fe f984 	bl	80006c8 <__aeabi_i2d>
 80023c0:	a317      	add	r3, pc, #92	@ (adr r3, 8002420 <TimeVariation+0x260>)
 80023c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c6:	f7fd ff03 	bl	80001d0 <__aeabi_dmul>
 80023ca:	4602      	mov	r2, r0
 80023cc:	460b      	mov	r3, r1
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe f9e3 	bl	800079c <__aeabi_d2iz>
 80023d6:	4603      	mov	r3, r0
 80023d8:	603b      	str	r3, [r7, #0]
							return desired_position;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	e013      	b.n	8002406 <TimeVariation+0x246>

						case PINKY_CLOSED/2:
							desired_position *= 0.15;
 80023de:	6838      	ldr	r0, [r7, #0]
 80023e0:	f7fe f972 	bl	80006c8 <__aeabi_i2d>
 80023e4:	a310      	add	r3, pc, #64	@ (adr r3, 8002428 <TimeVariation+0x268>)
 80023e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ea:	f7fd fef1 	bl	80001d0 <__aeabi_dmul>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4610      	mov	r0, r2
 80023f4:	4619      	mov	r1, r3
 80023f6:	f7fe f9d1 	bl	800079c <__aeabi_d2iz>
 80023fa:	4603      	mov	r3, r0
 80023fc:	603b      	str	r3, [r7, #0]
							return desired_position;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	e001      	b.n	8002406 <TimeVariation+0x246>

						default:
							return desired_position;
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	e7ff      	b.n	8002406 <TimeVariation+0x246>
					}
		}
	}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	851eb852 	.word	0x851eb852
 8002414:	3fd851eb 	.word	0x3fd851eb
 8002418:	33333333 	.word	0x33333333
 800241c:	3fe33333 	.word	0x3fe33333
 8002420:	33333333 	.word	0x33333333
 8002424:	3fd33333 	.word	0x3fd33333
 8002428:	33333333 	.word	0x33333333
 800242c:	3fc33333 	.word	0x3fc33333
 8002430:	3fe00000 	.word	0x3fe00000
 8002434:	3fd00000 	.word	0x3fd00000

08002438 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

//	SignLetter('A');

    thumb_TravelTime = TimeVariation(THUMB, thumb_desired_position);
 8002440:	4b79      	ldr	r3, [pc, #484]	@ (8002628 <StartDefaultTask+0x1f0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	2000      	movs	r0, #0
 8002448:	f7ff feba 	bl	80021c0 <TimeVariation>
 800244c:	4603      	mov	r3, r0
 800244e:	4a77      	ldr	r2, [pc, #476]	@ (800262c <StartDefaultTask+0x1f4>)
 8002450:	6013      	str	r3, [r2, #0]
    index_TravelTime = TimeVariation(INDEX, index_desired_position);
 8002452:	4b77      	ldr	r3, [pc, #476]	@ (8002630 <StartDefaultTask+0x1f8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4619      	mov	r1, r3
 8002458:	2001      	movs	r0, #1
 800245a:	f7ff feb1 	bl	80021c0 <TimeVariation>
 800245e:	4603      	mov	r3, r0
 8002460:	4a74      	ldr	r2, [pc, #464]	@ (8002634 <StartDefaultTask+0x1fc>)
 8002462:	6013      	str	r3, [r2, #0]
    middle_TravelTime = TimeVariation(MIDDLE, middle_desired_position);
 8002464:	4b74      	ldr	r3, [pc, #464]	@ (8002638 <StartDefaultTask+0x200>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4619      	mov	r1, r3
 800246a:	2002      	movs	r0, #2
 800246c:	f7ff fea8 	bl	80021c0 <TimeVariation>
 8002470:	4603      	mov	r3, r0
 8002472:	4a72      	ldr	r2, [pc, #456]	@ (800263c <StartDefaultTask+0x204>)
 8002474:	6013      	str	r3, [r2, #0]
    ring_TravelTime = TimeVariation(RING, ring_desired_position);
 8002476:	4b72      	ldr	r3, [pc, #456]	@ (8002640 <StartDefaultTask+0x208>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4619      	mov	r1, r3
 800247c:	2003      	movs	r0, #3
 800247e:	f7ff fe9f 	bl	80021c0 <TimeVariation>
 8002482:	4603      	mov	r3, r0
 8002484:	4a6f      	ldr	r2, [pc, #444]	@ (8002644 <StartDefaultTask+0x20c>)
 8002486:	6013      	str	r3, [r2, #0]
    pinky_TravelTime = TimeVariation(PINKY, pinky_desired_position);
 8002488:	4b6f      	ldr	r3, [pc, #444]	@ (8002648 <StartDefaultTask+0x210>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4619      	mov	r1, r3
 800248e:	2004      	movs	r0, #4
 8002490:	f7ff fe96 	bl	80021c0 <TimeVariation>
 8002494:	4603      	mov	r3, r0
 8002496:	4a6d      	ldr	r2, [pc, #436]	@ (800264c <StartDefaultTask+0x214>)
 8002498:	6013      	str	r3, [r2, #0]

//    osDelay(100);
//    Servo_Init();

	if(thumb_TravelTime != 0){
 800249a:	4b64      	ldr	r3, [pc, #400]	@ (800262c <StartDefaultTask+0x1f4>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d012      	beq.n	80024c8 <StartDefaultTask+0x90>
//		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	  Servo_SetMotion(THUMB, Direction_Decider(&thumb_desired_position), 100);
 80024a2:	4861      	ldr	r0, [pc, #388]	@ (8002628 <StartDefaultTask+0x1f0>)
 80024a4:	f7fe ff9c 	bl	80013e0 <Direction_Decider>
 80024a8:	4603      	mov	r3, r0
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2264      	movs	r2, #100	@ 0x64
 80024ae:	4619      	mov	r1, r3
 80024b0:	2000      	movs	r0, #0
 80024b2:	f7fe fed3 	bl	800125c <Servo_SetMotion>
		osTimerStart(Thumb_FingerHandle, thumb_TravelTime);
 80024b6:	4b66      	ldr	r3, [pc, #408]	@ (8002650 <StartDefaultTask+0x218>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a5c      	ldr	r2, [pc, #368]	@ (800262c <StartDefaultTask+0x1f4>)
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	4611      	mov	r1, r2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f004 faa3 	bl	8006a0c <osTimerStart>
 80024c6:	e006      	b.n	80024d6 <StartDefaultTask+0x9e>
	}
    else if(thumb_TravelTime == 0){
 80024c8:	4b58      	ldr	r3, [pc, #352]	@ (800262c <StartDefaultTask+0x1f4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d102      	bne.n	80024d6 <StartDefaultTask+0x9e>
    	thumbDone = pdTRUE;
 80024d0:	4b60      	ldr	r3, [pc, #384]	@ (8002654 <StartDefaultTask+0x21c>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
    }

	osDelay(50);
 80024d6:	2032      	movs	r0, #50	@ 0x32
 80024d8:	f004 f9ec 	bl	80068b4 <osDelay>

	if(index_TravelTime != 0){
 80024dc:	4b55      	ldr	r3, [pc, #340]	@ (8002634 <StartDefaultTask+0x1fc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d012      	beq.n	800250a <StartDefaultTask+0xd2>
//		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	  Servo_SetMotion(INDEX, Direction_Decider(&index_desired_position), 100);
 80024e4:	4852      	ldr	r0, [pc, #328]	@ (8002630 <StartDefaultTask+0x1f8>)
 80024e6:	f7fe ff7b 	bl	80013e0 <Direction_Decider>
 80024ea:	4603      	mov	r3, r0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	2264      	movs	r2, #100	@ 0x64
 80024f0:	4619      	mov	r1, r3
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7fe feb2 	bl	800125c <Servo_SetMotion>
		osTimerStart(Index_FingerHandle, index_TravelTime);
 80024f8:	4b57      	ldr	r3, [pc, #348]	@ (8002658 <StartDefaultTask+0x220>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002634 <StartDefaultTask+0x1fc>)
 80024fe:	6812      	ldr	r2, [r2, #0]
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f004 fa82 	bl	8006a0c <osTimerStart>
 8002508:	e006      	b.n	8002518 <StartDefaultTask+0xe0>
	}
    else if(index_TravelTime == 0){
 800250a:	4b4a      	ldr	r3, [pc, #296]	@ (8002634 <StartDefaultTask+0x1fc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d102      	bne.n	8002518 <StartDefaultTask+0xe0>
    	indexDone = pdTRUE;
 8002512:	4b52      	ldr	r3, [pc, #328]	@ (800265c <StartDefaultTask+0x224>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]
    }

	osDelay(50);
 8002518:	2032      	movs	r0, #50	@ 0x32
 800251a:	f004 f9cb 	bl	80068b4 <osDelay>

    if(middle_TravelTime != 0){
 800251e:	4b47      	ldr	r3, [pc, #284]	@ (800263c <StartDefaultTask+0x204>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d012      	beq.n	800254c <StartDefaultTask+0x114>
//    	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
		Servo_SetMotion(MIDDLE, Direction_Decider(&middle_desired_position), 100);
 8002526:	4844      	ldr	r0, [pc, #272]	@ (8002638 <StartDefaultTask+0x200>)
 8002528:	f7fe ff5a 	bl	80013e0 <Direction_Decider>
 800252c:	4603      	mov	r3, r0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2264      	movs	r2, #100	@ 0x64
 8002532:	4619      	mov	r1, r3
 8002534:	2002      	movs	r0, #2
 8002536:	f7fe fe91 	bl	800125c <Servo_SetMotion>
		osTimerStart(Middle_FingerHandle, middle_TravelTime);
 800253a:	4b49      	ldr	r3, [pc, #292]	@ (8002660 <StartDefaultTask+0x228>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a3f      	ldr	r2, [pc, #252]	@ (800263c <StartDefaultTask+0x204>)
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f004 fa61 	bl	8006a0c <osTimerStart>
 800254a:	e006      	b.n	800255a <StartDefaultTask+0x122>
	}
    else if(middle_TravelTime == 0){
 800254c:	4b3b      	ldr	r3, [pc, #236]	@ (800263c <StartDefaultTask+0x204>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d102      	bne.n	800255a <StartDefaultTask+0x122>
    	middleDone = pdTRUE;
 8002554:	4b43      	ldr	r3, [pc, #268]	@ (8002664 <StartDefaultTask+0x22c>)
 8002556:	2201      	movs	r2, #1
 8002558:	601a      	str	r2, [r3, #0]
    }

	osDelay(50);
 800255a:	2032      	movs	r0, #50	@ 0x32
 800255c:	f004 f9aa 	bl	80068b4 <osDelay>

	if(ring_TravelTime != 0){
 8002560:	4b38      	ldr	r3, [pc, #224]	@ (8002644 <StartDefaultTask+0x20c>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d012      	beq.n	800258e <StartDefaultTask+0x156>
//		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
	  Servo_SetMotion(RING, Direction_Decider(&ring_desired_position), 100);
 8002568:	4835      	ldr	r0, [pc, #212]	@ (8002640 <StartDefaultTask+0x208>)
 800256a:	f7fe ff39 	bl	80013e0 <Direction_Decider>
 800256e:	4603      	mov	r3, r0
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2264      	movs	r2, #100	@ 0x64
 8002574:	4619      	mov	r1, r3
 8002576:	2003      	movs	r0, #3
 8002578:	f7fe fe70 	bl	800125c <Servo_SetMotion>
		osTimerStart(Ring_FingerHandle, ring_TravelTime);
 800257c:	4b3a      	ldr	r3, [pc, #232]	@ (8002668 <StartDefaultTask+0x230>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a30      	ldr	r2, [pc, #192]	@ (8002644 <StartDefaultTask+0x20c>)
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	4611      	mov	r1, r2
 8002586:	4618      	mov	r0, r3
 8002588:	f004 fa40 	bl	8006a0c <osTimerStart>
 800258c:	e006      	b.n	800259c <StartDefaultTask+0x164>
	}
    else if(ring_TravelTime == 0){
 800258e:	4b2d      	ldr	r3, [pc, #180]	@ (8002644 <StartDefaultTask+0x20c>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <StartDefaultTask+0x164>
    	ringDone = pdTRUE;
 8002596:	4b35      	ldr	r3, [pc, #212]	@ (800266c <StartDefaultTask+0x234>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]
    }

	osDelay(50);
 800259c:	2032      	movs	r0, #50	@ 0x32
 800259e:	f004 f989 	bl	80068b4 <osDelay>

	if(pinky_TravelTime != 0){
 80025a2:	4b2a      	ldr	r3, [pc, #168]	@ (800264c <StartDefaultTask+0x214>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d012      	beq.n	80025d0 <StartDefaultTask+0x198>
//		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
	    Servo_SetMotion(PINKY, Direction_Decider(&pinky_desired_position), 100);
 80025aa:	4827      	ldr	r0, [pc, #156]	@ (8002648 <StartDefaultTask+0x210>)
 80025ac:	f7fe ff18 	bl	80013e0 <Direction_Decider>
 80025b0:	4603      	mov	r3, r0
 80025b2:	b2db      	uxtb	r3, r3
 80025b4:	2264      	movs	r2, #100	@ 0x64
 80025b6:	4619      	mov	r1, r3
 80025b8:	2004      	movs	r0, #4
 80025ba:	f7fe fe4f 	bl	800125c <Servo_SetMotion>
		osTimerStart(Pinky_FingerHandle, pinky_TravelTime);
 80025be:	4b2c      	ldr	r3, [pc, #176]	@ (8002670 <StartDefaultTask+0x238>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a22      	ldr	r2, [pc, #136]	@ (800264c <StartDefaultTask+0x214>)
 80025c4:	6812      	ldr	r2, [r2, #0]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f004 fa1f 	bl	8006a0c <osTimerStart>
 80025ce:	e006      	b.n	80025de <StartDefaultTask+0x1a6>
	}
    else if(pinky_TravelTime == 0){
 80025d0:	4b1e      	ldr	r3, [pc, #120]	@ (800264c <StartDefaultTask+0x214>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d102      	bne.n	80025de <StartDefaultTask+0x1a6>
    	pinkyDone = pdTRUE;
 80025d8:	4b26      	ldr	r3, [pc, #152]	@ (8002674 <StartDefaultTask+0x23c>)
 80025da:	2201      	movs	r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
    }

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80025de:	2120      	movs	r1, #32
 80025e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e4:	f000 feca 	bl	800337c <HAL_GPIO_TogglePin>
  for(;;)
  {

	  // Checks if all timers have completed, and then deletes main task if it has
	  if(indexDone && thumbDone && middleDone && ringDone && pinkyDone){
 80025e8:	4b1c      	ldr	r3, [pc, #112]	@ (800265c <StartDefaultTask+0x224>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d016      	beq.n	800261e <StartDefaultTask+0x1e6>
 80025f0:	4b18      	ldr	r3, [pc, #96]	@ (8002654 <StartDefaultTask+0x21c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d012      	beq.n	800261e <StartDefaultTask+0x1e6>
 80025f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002664 <StartDefaultTask+0x22c>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00e      	beq.n	800261e <StartDefaultTask+0x1e6>
 8002600:	4b1a      	ldr	r3, [pc, #104]	@ (800266c <StartDefaultTask+0x234>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00a      	beq.n	800261e <StartDefaultTask+0x1e6>
 8002608:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <StartDefaultTask+0x23c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <StartDefaultTask+0x1e6>
		  osDelay(1000);
 8002610:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002614:	f004 f94e 	bl	80068b4 <osDelay>
		  vTaskDelete(NULL);
 8002618:	2000      	movs	r0, #0
 800261a:	f005 f9ad 	bl	8007978 <vTaskDelete>
	  }

	  osDelay(1);
 800261e:	2001      	movs	r0, #1
 8002620:	f004 f948 	bl	80068b4 <osDelay>
	  if(indexDone && thumbDone && middleDone && ringDone && pinkyDone){
 8002624:	e7e0      	b.n	80025e8 <StartDefaultTask+0x1b0>
 8002626:	bf00      	nop
 8002628:	200002bc 	.word	0x200002bc
 800262c:	200002a8 	.word	0x200002a8
 8002630:	200002c0 	.word	0x200002c0
 8002634:	200002ac 	.word	0x200002ac
 8002638:	200002c4 	.word	0x200002c4
 800263c:	200002b0 	.word	0x200002b0
 8002640:	200002c8 	.word	0x200002c8
 8002644:	200002b4 	.word	0x200002b4
 8002648:	200002cc 	.word	0x200002cc
 800264c:	200002b8 	.word	0x200002b8
 8002650:	20000278 	.word	0x20000278
 8002654:	2000028c 	.word	0x2000028c
 8002658:	20000274 	.word	0x20000274
 800265c:	20000288 	.word	0x20000288
 8002660:	2000027c 	.word	0x2000027c
 8002664:	20000290 	.word	0x20000290
 8002668:	20000280 	.word	0x20000280
 800266c:	20000294 	.word	0x20000294
 8002670:	20000284 	.word	0x20000284
 8002674:	20000298 	.word	0x20000298

08002678 <StartSupervisorTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSupervisorTask */
void StartSupervisorTask(void *argument)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */


  for(;;)
  {
	if (defaultTaskHandle != NULL && eTaskGetState(defaultTaskHandle) == eDeleted){
 8002680:	4b1a      	ldr	r3, [pc, #104]	@ (80026ec <StartSupervisorTask+0x74>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d02c      	beq.n	80026e2 <StartSupervisorTask+0x6a>
 8002688:	4b18      	ldr	r3, [pc, #96]	@ (80026ec <StartSupervisorTask+0x74>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f005 fa1d 	bl	8007acc <eTaskGetState>
 8002692:	4603      	mov	r3, r0
 8002694:	2b04      	cmp	r3, #4
 8002696:	d124      	bne.n	80026e2 <StartSupervisorTask+0x6a>
		defaultTaskHandle = NULL; //Clear Handle
 8002698:	4b14      	ldr	r3, [pc, #80]	@ (80026ec <StartSupervisorTask+0x74>)
 800269a:	2200      	movs	r2, #0
 800269c:	601a      	str	r2, [r3, #0]

		// Stops all servos
//		Servo_StopAll();

		// Recreate the default task
		defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800269e:	4a14      	ldr	r2, [pc, #80]	@ (80026f0 <StartSupervisorTask+0x78>)
 80026a0:	2100      	movs	r1, #0
 80026a2:	4814      	ldr	r0, [pc, #80]	@ (80026f4 <StartSupervisorTask+0x7c>)
 80026a4:	f004 f874 	bl	8006790 <osThreadNew>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4a10      	ldr	r2, [pc, #64]	@ (80026ec <StartSupervisorTask+0x74>)
 80026ac:	6013      	str	r3, [r2, #0]

		// Reset timer flags
		indexDone = pdFALSE;
 80026ae:	4b12      	ldr	r3, [pc, #72]	@ (80026f8 <StartSupervisorTask+0x80>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
		thumbDone = pdFALSE;
 80026b4:	4b11      	ldr	r3, [pc, #68]	@ (80026fc <StartSupervisorTask+0x84>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
		middleDone = pdFALSE;
 80026ba:	4b11      	ldr	r3, [pc, #68]	@ (8002700 <StartSupervisorTask+0x88>)
 80026bc:	2200      	movs	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
		ringDone = pdFALSE;
 80026c0:	4b10      	ldr	r3, [pc, #64]	@ (8002704 <StartSupervisorTask+0x8c>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
		pinkyDone = pdFALSE;
 80026c6:	4b10      	ldr	r3, [pc, #64]	@ (8002708 <StartSupervisorTask+0x90>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

		// Test portion. Resets all fingers to open position
//		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		osDelay(1000);
 80026cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026d0:	f004 f8f0 	bl	80068b4 <osDelay>
		SignLetter('0');
 80026d4:	2030      	movs	r0, #48	@ 0x30
 80026d6:	f7fe fe9f 	bl	8001418 <SignLetter>
		osDelay(1000);
 80026da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026de:	f004 f8e9 	bl	80068b4 <osDelay>
	}
    vTaskDelay(10);
 80026e2:	200a      	movs	r0, #10
 80026e4:	f005 f9bc 	bl	8007a60 <vTaskDelay>
	if (defaultTaskHandle != NULL && eTaskGetState(defaultTaskHandle) == eDeleted){
 80026e8:	e7ca      	b.n	8002680 <StartSupervisorTask+0x8>
 80026ea:	bf00      	nop
 80026ec:	2000026c 	.word	0x2000026c
 80026f0:	08009834 	.word	0x08009834
 80026f4:	08002439 	.word	0x08002439
 80026f8:	20000288 	.word	0x20000288
 80026fc:	2000028c 	.word	0x2000028c
 8002700:	20000290 	.word	0x20000290
 8002704:	20000294 	.word	0x20000294
 8002708:	20000298 	.word	0x20000298

0800270c <Index>:
  /* USER CODE END StartSupervisorTask */
}

/* Index function */
void Index(void *argument)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Index */
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002714:	2100      	movs	r1, #0
 8002716:	4807      	ldr	r0, [pc, #28]	@ (8002734 <Index+0x28>)
 8002718:	f002 faea 	bl	8004cf0 <HAL_TIM_PWM_Stop>
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
	indexDone = pdTRUE;
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <Index+0x2c>)
 800271e:	2201      	movs	r2, #1
 8002720:	601a      	str	r2, [r3, #0]
	index_current = index_desired_position;
 8002722:	4b06      	ldr	r3, [pc, #24]	@ (800273c <Index+0x30>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	b21a      	sxth	r2, r3
 8002728:	4b05      	ldr	r3, [pc, #20]	@ (8002740 <Index+0x34>)
 800272a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Index */
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200000b4 	.word	0x200000b4
 8002738:	20000288 	.word	0x20000288
 800273c:	200002c0 	.word	0x200002c0
 8002740:	2000029e 	.word	0x2000029e

08002744 <Thumb>:

/* Thumb function */
void Thumb(void *argument)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thumb */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800274c:	2120      	movs	r1, #32
 800274e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002752:	f000 fe13 	bl	800337c <HAL_GPIO_TogglePin>
//	Servo_SetMotion(THUMB, STOP, 0);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002756:	2100      	movs	r1, #0
 8002758:	4807      	ldr	r0, [pc, #28]	@ (8002778 <Thumb+0x34>)
 800275a:	f002 fac9 	bl	8004cf0 <HAL_TIM_PWM_Stop>
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
	thumbDone = pdTRUE;
 800275e:	4b07      	ldr	r3, [pc, #28]	@ (800277c <Thumb+0x38>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]
	thumb_current = thumb_desired_position;
 8002764:	4b06      	ldr	r3, [pc, #24]	@ (8002780 <Thumb+0x3c>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	b21a      	sxth	r2, r3
 800276a:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <Thumb+0x40>)
 800276c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Thumb */
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	20000068 	.word	0x20000068
 800277c:	2000028c 	.word	0x2000028c
 8002780:	200002bc 	.word	0x200002bc
 8002784:	2000029c 	.word	0x2000029c

08002788 <Middle>:

/* Middle function */
void Middle(void *argument)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Middle */
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002790:	2100      	movs	r1, #0
 8002792:	4807      	ldr	r0, [pc, #28]	@ (80027b0 <Middle+0x28>)
 8002794:	f002 faac 	bl	8004cf0 <HAL_TIM_PWM_Stop>
//	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
	middleDone = pdTRUE;
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <Middle+0x2c>)
 800279a:	2201      	movs	r2, #1
 800279c:	601a      	str	r2, [r3, #0]
	middle_current = middle_desired_position;
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <Middle+0x30>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	b21a      	sxth	r2, r3
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <Middle+0x34>)
 80027a6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Middle */
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000100 	.word	0x20000100
 80027b4:	20000290 	.word	0x20000290
 80027b8:	200002c4 	.word	0x200002c4
 80027bc:	200002a0 	.word	0x200002a0

080027c0 <Ring>:

/* Ring function */
void Ring(void *argument)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b082      	sub	sp, #8
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ring */
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 80027c8:	2100      	movs	r1, #0
 80027ca:	4807      	ldr	r0, [pc, #28]	@ (80027e8 <Ring+0x28>)
 80027cc:	f002 fa90 	bl	8004cf0 <HAL_TIM_PWM_Stop>
//	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
	ringDone = pdTRUE;
 80027d0:	4b06      	ldr	r3, [pc, #24]	@ (80027ec <Ring+0x2c>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
	ring_current = ring_desired_position;
 80027d6:	4b06      	ldr	r3, [pc, #24]	@ (80027f0 <Ring+0x30>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	b21a      	sxth	r2, r3
 80027dc:	4b05      	ldr	r3, [pc, #20]	@ (80027f4 <Ring+0x34>)
 80027de:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Ring */
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	2000014c 	.word	0x2000014c
 80027ec:	20000294 	.word	0x20000294
 80027f0:	200002c8 	.word	0x200002c8
 80027f4:	200002a2 	.word	0x200002a2

080027f8 <Pinky>:

/* Pinky function */
void Pinky(void *argument)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Pinky */
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8002800:	2100      	movs	r1, #0
 8002802:	4807      	ldr	r0, [pc, #28]	@ (8002820 <Pinky+0x28>)
 8002804:	f002 fa74 	bl	8004cf0 <HAL_TIM_PWM_Stop>
//	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 1500);
	pinkyDone = pdTRUE;
 8002808:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <Pinky+0x2c>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]
	pinky_current = pinky_desired_position;
 800280e:	4b06      	ldr	r3, [pc, #24]	@ (8002828 <Pinky+0x30>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	b21a      	sxth	r2, r3
 8002814:	4b05      	ldr	r3, [pc, #20]	@ (800282c <Pinky+0x34>)
 8002816:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Pinky */
}
 8002818:	bf00      	nop
 800281a:	3708      	adds	r7, #8
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	20000198 	.word	0x20000198
 8002824:	20000298 	.word	0x20000298
 8002828:	200002cc 	.word	0x200002cc
 800282c:	200002a4 	.word	0x200002a4

08002830 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b082      	sub	sp, #8
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a04      	ldr	r2, [pc, #16]	@ (8002850 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002842:	f000 fad7 	bl	8002df4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	40000c00 	.word	0x40000c00

08002854 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002858:	b672      	cpsid	i
}
 800285a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <Error_Handler+0x8>

08002860 <HAL_MspInit>:
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	4b11      	ldr	r3, [pc, #68]	@ (80028ac <HAL_MspInit+0x4c>)
 8002868:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800286a:	4a10      	ldr	r2, [pc, #64]	@ (80028ac <HAL_MspInit+0x4c>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6613      	str	r3, [r2, #96]	@ 0x60
 8002872:	4b0e      	ldr	r3, [pc, #56]	@ (80028ac <HAL_MspInit+0x4c>)
 8002874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4b0b      	ldr	r3, [pc, #44]	@ (80028ac <HAL_MspInit+0x4c>)
 8002880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002882:	4a0a      	ldr	r2, [pc, #40]	@ (80028ac <HAL_MspInit+0x4c>)
 8002884:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002888:	6593      	str	r3, [r2, #88]	@ 0x58
 800288a:	4b08      	ldr	r3, [pc, #32]	@ (80028ac <HAL_MspInit+0x4c>)
 800288c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800288e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002892:	603b      	str	r3, [r7, #0]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	2200      	movs	r2, #0
 8002898:	210f      	movs	r1, #15
 800289a:	f06f 0001 	mvn.w	r0, #1
 800289e:	f000 fb81 	bl	8002fa4 <HAL_NVIC_SetPriority>
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40021000 	.word	0x40021000

080028b0 <HAL_TIM_PWM_MspInit>:
 80028b0:	b480      	push	{r7}
 80028b2:	b089      	sub	sp, #36	@ 0x24
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002978 <HAL_TIM_PWM_MspInit+0xc8>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d10c      	bne.n	80028dc <HAL_TIM_PWM_MspInit+0x2c>
 80028c2:	4b2e      	ldr	r3, [pc, #184]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 80028c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c6:	4a2d      	ldr	r2, [pc, #180]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 80028c8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80028cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80028ce:	4b2b      	ldr	r3, [pc, #172]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 80028d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	e046      	b.n	800296a <HAL_TIM_PWM_MspInit+0xba>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80028e4:	d10c      	bne.n	8002900 <HAL_TIM_PWM_MspInit+0x50>
 80028e6:	4b25      	ldr	r3, [pc, #148]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 80028e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028ea:	4a24      	ldr	r2, [pc, #144]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 80028ec:	f043 0301 	orr.w	r3, r3, #1
 80028f0:	6593      	str	r3, [r2, #88]	@ 0x58
 80028f2:	4b22      	ldr	r3, [pc, #136]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 80028f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	61bb      	str	r3, [r7, #24]
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	e034      	b.n	800296a <HAL_TIM_PWM_MspInit+0xba>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1e      	ldr	r2, [pc, #120]	@ (8002980 <HAL_TIM_PWM_MspInit+0xd0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10c      	bne.n	8002924 <HAL_TIM_PWM_MspInit+0x74>
 800290a:	4b1c      	ldr	r3, [pc, #112]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 800290c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800290e:	4a1b      	ldr	r2, [pc, #108]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 8002910:	f043 0302 	orr.w	r3, r3, #2
 8002914:	6593      	str	r3, [r2, #88]	@ 0x58
 8002916:	4b19      	ldr	r3, [pc, #100]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 8002918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	617b      	str	r3, [r7, #20]
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	e022      	b.n	800296a <HAL_TIM_PWM_MspInit+0xba>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a16      	ldr	r2, [pc, #88]	@ (8002984 <HAL_TIM_PWM_MspInit+0xd4>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d10c      	bne.n	8002948 <HAL_TIM_PWM_MspInit+0x98>
 800292e:	4b13      	ldr	r3, [pc, #76]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 8002930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002932:	4a12      	ldr	r2, [pc, #72]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6593      	str	r3, [r2, #88]	@ 0x58
 800293a:	4b10      	ldr	r3, [pc, #64]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 800293c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	e010      	b.n	800296a <HAL_TIM_PWM_MspInit+0xba>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a0e      	ldr	r2, [pc, #56]	@ (8002988 <HAL_TIM_PWM_MspInit+0xd8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10b      	bne.n	800296a <HAL_TIM_PWM_MspInit+0xba>
 8002952:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 8002954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002956:	4a09      	ldr	r2, [pc, #36]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 8002958:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800295c:	6613      	str	r3, [r2, #96]	@ 0x60
 800295e:	4b07      	ldr	r3, [pc, #28]	@ (800297c <HAL_TIM_PWM_MspInit+0xcc>)
 8002960:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	bf00      	nop
 800296c:	3724      	adds	r7, #36	@ 0x24
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40021000 	.word	0x40021000
 8002980:	40000400 	.word	0x40000400
 8002984:	40000800 	.word	0x40000800
 8002988:	40013400 	.word	0x40013400

0800298c <HAL_TIM_MspPostInit>:
 800298c:	b580      	push	{r7, lr}
 800298e:	b08c      	sub	sp, #48	@ 0x30
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	f107 031c 	add.w	r3, r7, #28
 8002998:	2200      	movs	r2, #0
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	605a      	str	r2, [r3, #4]
 800299e:	609a      	str	r2, [r3, #8]
 80029a0:	60da      	str	r2, [r3, #12]
 80029a2:	611a      	str	r2, [r3, #16]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a57      	ldr	r2, [pc, #348]	@ (8002b08 <HAL_TIM_MspPostInit+0x17c>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d11e      	bne.n	80029ec <HAL_TIM_MspPostInit+0x60>
 80029ae:	4b57      	ldr	r3, [pc, #348]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 80029b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029b2:	4a56      	ldr	r2, [pc, #344]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80029ba:	4b54      	ldr	r3, [pc, #336]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029be:	f003 0301 	and.w	r3, r3, #1
 80029c2:	61bb      	str	r3, [r7, #24]
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80029ca:	61fb      	str	r3, [r7, #28]
 80029cc:	2302      	movs	r3, #2
 80029ce:	623b      	str	r3, [r7, #32]
 80029d0:	2300      	movs	r3, #0
 80029d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029d4:	2300      	movs	r3, #0
 80029d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029d8:	2301      	movs	r3, #1
 80029da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029dc:	f107 031c 	add.w	r3, r7, #28
 80029e0:	4619      	mov	r1, r3
 80029e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80029e6:	f000 fb07 	bl	8002ff8 <HAL_GPIO_Init>
 80029ea:	e088      	b.n	8002afe <HAL_TIM_MspPostInit+0x172>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029f4:	d11d      	bne.n	8002a32 <HAL_TIM_MspPostInit+0xa6>
 80029f6:	4b45      	ldr	r3, [pc, #276]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 80029f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029fa:	4a44      	ldr	r2, [pc, #272]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a02:	4b42      	ldr	r3, [pc, #264]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 8002a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61fb      	str	r3, [r7, #28]
 8002a12:	2302      	movs	r3, #2
 8002a14:	623b      	str	r3, [r7, #32]
 8002a16:	2300      	movs	r3, #0
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a1e:	2301      	movs	r3, #1
 8002a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a22:	f107 031c 	add.w	r3, r7, #28
 8002a26:	4619      	mov	r1, r3
 8002a28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a2c:	f000 fae4 	bl	8002ff8 <HAL_GPIO_Init>
 8002a30:	e065      	b.n	8002afe <HAL_TIM_MspPostInit+0x172>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4a36      	ldr	r2, [pc, #216]	@ (8002b10 <HAL_TIM_MspPostInit+0x184>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d11d      	bne.n	8002a78 <HAL_TIM_MspPostInit+0xec>
 8002a3c:	4b33      	ldr	r3, [pc, #204]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 8002a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a40:	4a32      	ldr	r2, [pc, #200]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a48:	4b30      	ldr	r3, [pc, #192]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	613b      	str	r3, [r7, #16]
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	2340      	movs	r3, #64	@ 0x40
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	2302      	movs	r3, #2
 8002a5a:	623b      	str	r3, [r7, #32]
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a60:	2300      	movs	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a64:	2302      	movs	r3, #2
 8002a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002a72:	f000 fac1 	bl	8002ff8 <HAL_GPIO_Init>
 8002a76:	e042      	b.n	8002afe <HAL_TIM_MspPostInit+0x172>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a25      	ldr	r2, [pc, #148]	@ (8002b14 <HAL_TIM_MspPostInit+0x188>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d11c      	bne.n	8002abc <HAL_TIM_MspPostInit+0x130>
 8002a82:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 8002a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a86:	4a21      	ldr	r2, [pc, #132]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a8e:	4b1f      	ldr	r3, [pc, #124]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 8002a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2340      	movs	r3, #64	@ 0x40
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	623b      	str	r3, [r7, #32]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aaa:	2302      	movs	r3, #2
 8002aac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002aae:	f107 031c 	add.w	r3, r7, #28
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4818      	ldr	r0, [pc, #96]	@ (8002b18 <HAL_TIM_MspPostInit+0x18c>)
 8002ab6:	f000 fa9f 	bl	8002ff8 <HAL_GPIO_Init>
 8002aba:	e020      	b.n	8002afe <HAL_TIM_MspPostInit+0x172>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a16      	ldr	r2, [pc, #88]	@ (8002b1c <HAL_TIM_MspPostInit+0x190>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d11b      	bne.n	8002afe <HAL_TIM_MspPostInit+0x172>
 8002ac6:	4b11      	ldr	r3, [pc, #68]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aca:	4a10      	ldr	r2, [pc, #64]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 8002acc:	f043 0304 	orr.w	r3, r3, #4
 8002ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8002b0c <HAL_TIM_MspPostInit+0x180>)
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2340      	movs	r3, #64	@ 0x40
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	623b      	str	r3, [r7, #32]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aea:	2300      	movs	r3, #0
 8002aec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002aee:	2303      	movs	r3, #3
 8002af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af2:	f107 031c 	add.w	r3, r7, #28
 8002af6:	4619      	mov	r1, r3
 8002af8:	4809      	ldr	r0, [pc, #36]	@ (8002b20 <HAL_TIM_MspPostInit+0x194>)
 8002afa:	f000 fa7d 	bl	8002ff8 <HAL_GPIO_Init>
 8002afe:	bf00      	nop
 8002b00:	3730      	adds	r7, #48	@ 0x30
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	40000400 	.word	0x40000400
 8002b14:	40000800 	.word	0x40000800
 8002b18:	48000400 	.word	0x48000400
 8002b1c:	40013400 	.word	0x40013400
 8002b20:	48000800 	.word	0x48000800

08002b24 <HAL_UART_MspInit>:
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b0ac      	sub	sp, #176	@ 0xb0
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	2288      	movs	r2, #136	@ 0x88
 8002b42:	2100      	movs	r1, #0
 8002b44:	4618      	mov	r0, r3
 8002b46:	f006 fdb7 	bl	80096b8 <memset>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a25      	ldr	r2, [pc, #148]	@ (8002be4 <HAL_UART_MspInit+0xc0>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d143      	bne.n	8002bdc <HAL_UART_MspInit+0xb8>
 8002b54:	2302      	movs	r3, #2
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	4618      	mov	r0, r3
 8002b62:	f001 fadf 	bl	8004124 <HAL_RCCEx_PeriphCLKConfig>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_UART_MspInit+0x4c>
 8002b6c:	f7ff fe72 	bl	8002854 <Error_Handler>
 8002b70:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <HAL_UART_MspInit+0xc4>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b74:	4a1c      	ldr	r2, [pc, #112]	@ (8002be8 <HAL_UART_MspInit+0xc4>)
 8002b76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b7a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <HAL_UART_MspInit+0xc4>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	4b17      	ldr	r3, [pc, #92]	@ (8002be8 <HAL_UART_MspInit+0xc4>)
 8002b8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b8c:	4a16      	ldr	r2, [pc, #88]	@ (8002be8 <HAL_UART_MspInit+0xc4>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b94:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <HAL_UART_MspInit+0xc4>)
 8002b96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	230c      	movs	r3, #12
 8002ba2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ba6:	2302      	movs	r3, #2
 8002ba8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bac:	2300      	movs	r3, #0
 8002bae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002bb8:	2307      	movs	r3, #7
 8002bba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bbe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bc8:	f000 fa16 	bl	8002ff8 <HAL_GPIO_Init>
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	2026      	movs	r0, #38	@ 0x26
 8002bd2:	f000 f9e7 	bl	8002fa4 <HAL_NVIC_SetPriority>
 8002bd6:	2026      	movs	r0, #38	@ 0x26
 8002bd8:	f000 fa00 	bl	8002fdc <HAL_NVIC_EnableIRQ>
 8002bdc:	bf00      	nop
 8002bde:	37b0      	adds	r7, #176	@ 0xb0
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40004400 	.word	0x40004400
 8002be8:	40021000 	.word	0x40021000

08002bec <HAL_InitTick>:
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08e      	sub	sp, #56	@ 0x38
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002bfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ccc <HAL_InitTick+0xe0>)
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bfe:	4a33      	ldr	r2, [pc, #204]	@ (8002ccc <HAL_InitTick+0xe0>)
 8002c00:	f043 0308 	orr.w	r3, r3, #8
 8002c04:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c06:	4b31      	ldr	r3, [pc, #196]	@ (8002ccc <HAL_InitTick+0xe0>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f107 0210 	add.w	r2, r7, #16
 8002c16:	f107 0314 	add.w	r3, r7, #20
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f001 f9ef 	bl	8004000 <HAL_RCC_GetClockConfig>
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d103      	bne.n	8002c34 <HAL_InitTick+0x48>
 8002c2c:	f001 f9bc 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 8002c30:	6378      	str	r0, [r7, #52]	@ 0x34
 8002c32:	e004      	b.n	8002c3e <HAL_InitTick+0x52>
 8002c34:	f001 f9b8 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c40:	4a23      	ldr	r2, [pc, #140]	@ (8002cd0 <HAL_InitTick+0xe4>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	0c9b      	lsrs	r3, r3, #18
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c4c:	4b21      	ldr	r3, [pc, #132]	@ (8002cd4 <HAL_InitTick+0xe8>)
 8002c4e:	4a22      	ldr	r2, [pc, #136]	@ (8002cd8 <HAL_InitTick+0xec>)
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	4b20      	ldr	r3, [pc, #128]	@ (8002cd4 <HAL_InitTick+0xe8>)
 8002c54:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cd4 <HAL_InitTick+0xe8>)
 8002c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5e:	6053      	str	r3, [r2, #4]
 8002c60:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd4 <HAL_InitTick+0xe8>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	611a      	str	r2, [r3, #16]
 8002c66:	4b1b      	ldr	r3, [pc, #108]	@ (8002cd4 <HAL_InitTick+0xe8>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	4b19      	ldr	r3, [pc, #100]	@ (8002cd4 <HAL_InitTick+0xe8>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	619a      	str	r2, [r3, #24]
 8002c72:	4818      	ldr	r0, [pc, #96]	@ (8002cd4 <HAL_InitTick+0xe8>)
 8002c74:	f001 ff12 	bl	8004a9c <HAL_TIM_Base_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002c7e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d11b      	bne.n	8002cbe <HAL_InitTick+0xd2>
 8002c86:	4813      	ldr	r0, [pc, #76]	@ (8002cd4 <HAL_InitTick+0xe8>)
 8002c88:	f001 ff6a 	bl	8004b60 <HAL_TIM_Base_Start_IT>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002c92:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d111      	bne.n	8002cbe <HAL_InitTick+0xd2>
 8002c9a:	2032      	movs	r0, #50	@ 0x32
 8002c9c:	f000 f99e 	bl	8002fdc <HAL_NVIC_EnableIRQ>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	d808      	bhi.n	8002cb8 <HAL_InitTick+0xcc>
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	2032      	movs	r0, #50	@ 0x32
 8002cac:	f000 f97a 	bl	8002fa4 <HAL_NVIC_SetPriority>
 8002cb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002cdc <HAL_InitTick+0xf0>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6013      	str	r3, [r2, #0]
 8002cb6:	e002      	b.n	8002cbe <HAL_InitTick+0xd2>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8002cbe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3738      	adds	r7, #56	@ 0x38
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	431bde83 	.word	0x431bde83
 8002cd4:	200002d0 	.word	0x200002d0
 8002cd8:	40000c00 	.word	0x40000c00
 8002cdc:	20000040 	.word	0x20000040

08002ce0 <NMI_Handler>:
 8002ce0:	b480      	push	{r7}
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	bf00      	nop
 8002ce6:	e7fd      	b.n	8002ce4 <NMI_Handler+0x4>

08002ce8 <HardFault_Handler>:
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	bf00      	nop
 8002cee:	e7fd      	b.n	8002cec <HardFault_Handler+0x4>

08002cf0 <MemManage_Handler>:
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	bf00      	nop
 8002cf6:	e7fd      	b.n	8002cf4 <MemManage_Handler+0x4>

08002cf8 <BusFault_Handler>:
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	bf00      	nop
 8002cfe:	e7fd      	b.n	8002cfc <BusFault_Handler+0x4>

08002d00 <UsageFault_Handler>:
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <UsageFault_Handler+0x4>

08002d08 <DebugMon_Handler>:
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr

08002d16 <EXTI15_10_IRQHandler>:
 8002d16:	b580      	push	{r7, lr}
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002d1e:	f000 fb47 	bl	80033b0 <HAL_GPIO_EXTI_IRQHandler>
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <TIM5_IRQHandler>:
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	4802      	ldr	r0, [pc, #8]	@ (8002d38 <TIM5_IRQHandler+0x10>)
 8002d2e:	f002 f875 	bl	8004e1c <HAL_TIM_IRQHandler>
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	200002d0 	.word	0x200002d0

08002d3c <SystemInit>:
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <SystemInit+0x20>)
 8002d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d46:	4a05      	ldr	r2, [pc, #20]	@ (8002d5c <SystemInit+0x20>)
 8002d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8002d50:	bf00      	nop
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <Reset_Handler>:
 8002d60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d98 <LoopForever+0x2>
 8002d64:	f7ff ffea 	bl	8002d3c <SystemInit>
 8002d68:	480c      	ldr	r0, [pc, #48]	@ (8002d9c <LoopForever+0x6>)
 8002d6a:	490d      	ldr	r1, [pc, #52]	@ (8002da0 <LoopForever+0xa>)
 8002d6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002da4 <LoopForever+0xe>)
 8002d6e:	2300      	movs	r3, #0
 8002d70:	e002      	b.n	8002d78 <LoopCopyDataInit>

08002d72 <CopyDataInit>:
 8002d72:	58d4      	ldr	r4, [r2, r3]
 8002d74:	50c4      	str	r4, [r0, r3]
 8002d76:	3304      	adds	r3, #4

08002d78 <LoopCopyDataInit>:
 8002d78:	18c4      	adds	r4, r0, r3
 8002d7a:	428c      	cmp	r4, r1
 8002d7c:	d3f9      	bcc.n	8002d72 <CopyDataInit>
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002da8 <LoopForever+0x12>)
 8002d80:	4c0a      	ldr	r4, [pc, #40]	@ (8002dac <LoopForever+0x16>)
 8002d82:	2300      	movs	r3, #0
 8002d84:	e001      	b.n	8002d8a <LoopFillZerobss>

08002d86 <FillZerobss>:
 8002d86:	6013      	str	r3, [r2, #0]
 8002d88:	3204      	adds	r2, #4

08002d8a <LoopFillZerobss>:
 8002d8a:	42a2      	cmp	r2, r4
 8002d8c:	d3fb      	bcc.n	8002d86 <FillZerobss>
 8002d8e:	f006 fc9b 	bl	80096c8 <__libc_init_array>
 8002d92:	f7fd fec1 	bl	8000b18 <main>

08002d96 <LoopForever>:
 8002d96:	e7fe      	b.n	8002d96 <LoopForever>
 8002d98:	20018000 	.word	0x20018000
 8002d9c:	20000000 	.word	0x20000000
 8002da0:	2000004c 	.word	0x2000004c
 8002da4:	08009924 	.word	0x08009924
 8002da8:	2000004c 	.word	0x2000004c
 8002dac:	20001c28 	.word	0x20001c28

08002db0 <ADC1_2_IRQHandler>:
 8002db0:	e7fe      	b.n	8002db0 <ADC1_2_IRQHandler>
	...

08002db4 <HAL_Init>:
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	2300      	movs	r3, #0
 8002dbc:	71fb      	strb	r3, [r7, #7]
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <HAL_Init+0x3c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a0b      	ldr	r2, [pc, #44]	@ (8002df0 <HAL_Init+0x3c>)
 8002dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	2003      	movs	r0, #3
 8002dcc:	f000 f8df 	bl	8002f8e <HAL_NVIC_SetPriorityGrouping>
 8002dd0:	200f      	movs	r0, #15
 8002dd2:	f7ff ff0b 	bl	8002bec <HAL_InitTick>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d002      	beq.n	8002de2 <HAL_Init+0x2e>
 8002ddc:	2301      	movs	r3, #1
 8002dde:	71fb      	strb	r3, [r7, #7]
 8002de0:	e001      	b.n	8002de6 <HAL_Init+0x32>
 8002de2:	f7ff fd3d 	bl	8002860 <HAL_MspInit>
 8002de6:	79fb      	ldrb	r3, [r7, #7]
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40022000 	.word	0x40022000

08002df4 <HAL_IncTick>:
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4b06      	ldr	r3, [pc, #24]	@ (8002e14 <HAL_IncTick+0x20>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	4b06      	ldr	r3, [pc, #24]	@ (8002e18 <HAL_IncTick+0x24>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4413      	add	r3, r2
 8002e04:	4a04      	ldr	r2, [pc, #16]	@ (8002e18 <HAL_IncTick+0x24>)
 8002e06:	6013      	str	r3, [r2, #0]
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000044 	.word	0x20000044
 8002e18:	2000031c 	.word	0x2000031c

08002e1c <HAL_GetTick>:
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
 8002e20:	4b03      	ldr	r3, [pc, #12]	@ (8002e30 <HAL_GetTick+0x14>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	2000031c 	.word	0x2000031c

08002e34 <__NVIC_SetPriorityGrouping>:
 8002e34:	b480      	push	{r7}
 8002e36:	b085      	sub	sp, #20
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f003 0307 	and.w	r3, r3, #7
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	4b0c      	ldr	r3, [pc, #48]	@ (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e50:	4013      	ands	r3, r2
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	021a      	lsls	r2, r3, #8
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	4a04      	ldr	r2, [pc, #16]	@ (8002e78 <__NVIC_SetPriorityGrouping+0x44>)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	60d3      	str	r3, [r2, #12]
 8002e6c:	bf00      	nop
 8002e6e:	3714      	adds	r7, #20
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr
 8002e78:	e000ed00 	.word	0xe000ed00

08002e7c <__NVIC_GetPriorityGrouping>:
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4b04      	ldr	r3, [pc, #16]	@ (8002e94 <__NVIC_GetPriorityGrouping+0x18>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <__NVIC_EnableIRQ>:
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	71fb      	strb	r3, [r7, #7]
 8002ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	db0b      	blt.n	8002ec2 <__NVIC_EnableIRQ+0x2a>
 8002eaa:	79fb      	ldrb	r3, [r7, #7]
 8002eac:	f003 021f 	and.w	r2, r3, #31
 8002eb0:	4907      	ldr	r1, [pc, #28]	@ (8002ed0 <__NVIC_EnableIRQ+0x38>)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	095b      	lsrs	r3, r3, #5
 8002eb8:	2001      	movs	r0, #1
 8002eba:	fa00 f202 	lsl.w	r2, r0, r2
 8002ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	e000e100 	.word	0xe000e100

08002ed4 <__NVIC_SetPriority>:
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	4603      	mov	r3, r0
 8002edc:	6039      	str	r1, [r7, #0]
 8002ede:	71fb      	strb	r3, [r7, #7]
 8002ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	db0a      	blt.n	8002efe <__NVIC_SetPriority+0x2a>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	490c      	ldr	r1, [pc, #48]	@ (8002f20 <__NVIC_SetPriority+0x4c>)
 8002eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef2:	0112      	lsls	r2, r2, #4
 8002ef4:	b2d2      	uxtb	r2, r2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002efc:	e00a      	b.n	8002f14 <__NVIC_SetPriority+0x40>
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4908      	ldr	r1, [pc, #32]	@ (8002f24 <__NVIC_SetPriority+0x50>)
 8002f04:	79fb      	ldrb	r3, [r7, #7]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	3b04      	subs	r3, #4
 8002f0c:	0112      	lsls	r2, r2, #4
 8002f0e:	b2d2      	uxtb	r2, r2
 8002f10:	440b      	add	r3, r1
 8002f12:	761a      	strb	r2, [r3, #24]
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	e000e100 	.word	0xe000e100
 8002f24:	e000ed00 	.word	0xe000ed00

08002f28 <NVIC_EncodePriority>:
 8002f28:	b480      	push	{r7}
 8002f2a:	b089      	sub	sp, #36	@ 0x24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	61fb      	str	r3, [r7, #28]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f1c3 0307 	rsb	r3, r3, #7
 8002f42:	2b04      	cmp	r3, #4
 8002f44:	bf28      	it	cs
 8002f46:	2304      	movcs	r3, #4
 8002f48:	61bb      	str	r3, [r7, #24]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	2b06      	cmp	r3, #6
 8002f50:	d902      	bls.n	8002f58 <NVIC_EncodePriority+0x30>
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	3b03      	subs	r3, #3
 8002f56:	e000      	b.n	8002f5a <NVIC_EncodePriority+0x32>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	617b      	str	r3, [r7, #20]
 8002f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	fa02 f303 	lsl.w	r3, r2, r3
 8002f66:	43da      	mvns	r2, r3
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	401a      	ands	r2, r3
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	f04f 31ff 	mov.w	r1, #4294967295
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7a:	43d9      	mvns	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	400b      	ands	r3, r1
 8002f80:	4313      	orrs	r3, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	3724      	adds	r7, #36	@ 0x24
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_NVIC_SetPriorityGrouping>:
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ff4c 	bl	8002e34 <__NVIC_SetPriorityGrouping>
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_NVIC_SetPriority>:
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b086      	sub	sp, #24
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	4603      	mov	r3, r0
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	73fb      	strb	r3, [r7, #15]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	f7ff ff61 	bl	8002e7c <__NVIC_GetPriorityGrouping>
 8002fba:	6178      	str	r0, [r7, #20]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	68b9      	ldr	r1, [r7, #8]
 8002fc0:	6978      	ldr	r0, [r7, #20]
 8002fc2:	f7ff ffb1 	bl	8002f28 <NVIC_EncodePriority>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff ff80 	bl	8002ed4 <__NVIC_SetPriority>
 8002fd4:	bf00      	nop
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_NVIC_EnableIRQ>:
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b082      	sub	sp, #8
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	71fb      	strb	r3, [r7, #7]
 8002fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7ff ff54 	bl	8002e98 <__NVIC_EnableIRQ>
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_GPIO_Init>:
 8002ff8:	b480      	push	{r7}
 8002ffa:	b087      	sub	sp, #28
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
 8003002:	2300      	movs	r3, #0
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	e17f      	b.n	8003308 <HAL_GPIO_Init+0x310>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2101      	movs	r1, #1
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	4013      	ands	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8171 	beq.w	8003302 <HAL_GPIO_Init+0x30a>
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	2b01      	cmp	r3, #1
 800302a:	d005      	beq.n	8003038 <HAL_GPIO_Init+0x40>
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b02      	cmp	r3, #2
 8003036:	d130      	bne.n	800309a <HAL_GPIO_Init+0xa2>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	613b      	str	r3, [r7, #16]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	2203      	movs	r2, #3
 8003044:	fa02 f303 	lsl.w	r3, r2, r3
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	697b      	ldr	r3, [r7, #20]
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	4313      	orrs	r3, r2
 8003060:	613b      	str	r3, [r7, #16]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	693a      	ldr	r2, [r7, #16]
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	2201      	movs	r2, #1
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	4013      	ands	r3, r2
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	091b      	lsrs	r3, r3, #4
 8003084:	f003 0201 	and.w	r2, r3, #1
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4313      	orrs	r3, r2
 8003092:	613b      	str	r3, [r7, #16]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d118      	bne.n	80030d8 <HAL_GPIO_Init+0xe0>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030aa:	613b      	str	r3, [r7, #16]
 80030ac:	2201      	movs	r2, #1
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	08db      	lsrs	r3, r3, #3
 80030c2:	f003 0201 	and.w	r2, r3, #1
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d017      	beq.n	8003114 <HAL_GPIO_Init+0x11c>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	613b      	str	r3, [r7, #16]
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	2203      	movs	r2, #3
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4013      	ands	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	60da      	str	r2, [r3, #12]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f003 0303 	and.w	r3, r3, #3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d123      	bne.n	8003168 <HAL_GPIO_Init+0x170>
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	08da      	lsrs	r2, r3, #3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3208      	adds	r2, #8
 8003128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 0307 	and.w	r3, r3, #7
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	220f      	movs	r2, #15
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	4013      	ands	r3, r2
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	691a      	ldr	r2, [r3, #16]
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	4313      	orrs	r3, r2
 8003158:	613b      	str	r3, [r7, #16]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	08da      	lsrs	r2, r3, #3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	3208      	adds	r2, #8
 8003162:	6939      	ldr	r1, [r7, #16]
 8003164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	2203      	movs	r2, #3
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f003 0203 	and.w	r2, r3, #3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 80ac 	beq.w	8003302 <HAL_GPIO_Init+0x30a>
 80031aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003328 <HAL_GPIO_Init+0x330>)
 80031ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003328 <HAL_GPIO_Init+0x330>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6613      	str	r3, [r2, #96]	@ 0x60
 80031b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003328 <HAL_GPIO_Init+0x330>)
 80031b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	60bb      	str	r3, [r7, #8]
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	4a5a      	ldr	r2, [pc, #360]	@ (800332c <HAL_GPIO_Init+0x334>)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	089b      	lsrs	r3, r3, #2
 80031c8:	3302      	adds	r3, #2
 80031ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ce:	613b      	str	r3, [r7, #16]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	220f      	movs	r2, #15
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	43db      	mvns	r3, r3
 80031e0:	693a      	ldr	r2, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80031ec:	d025      	beq.n	800323a <HAL_GPIO_Init+0x242>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003330 <HAL_GPIO_Init+0x338>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d01f      	beq.n	8003236 <HAL_GPIO_Init+0x23e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a4e      	ldr	r2, [pc, #312]	@ (8003334 <HAL_GPIO_Init+0x33c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d019      	beq.n	8003232 <HAL_GPIO_Init+0x23a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a4d      	ldr	r2, [pc, #308]	@ (8003338 <HAL_GPIO_Init+0x340>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_GPIO_Init+0x236>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a4c      	ldr	r2, [pc, #304]	@ (800333c <HAL_GPIO_Init+0x344>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00d      	beq.n	800322a <HAL_GPIO_Init+0x232>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a4b      	ldr	r2, [pc, #300]	@ (8003340 <HAL_GPIO_Init+0x348>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <HAL_GPIO_Init+0x22e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a4a      	ldr	r2, [pc, #296]	@ (8003344 <HAL_GPIO_Init+0x34c>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_GPIO_Init+0x22a>
 800321e:	2306      	movs	r3, #6
 8003220:	e00c      	b.n	800323c <HAL_GPIO_Init+0x244>
 8003222:	2307      	movs	r3, #7
 8003224:	e00a      	b.n	800323c <HAL_GPIO_Init+0x244>
 8003226:	2305      	movs	r3, #5
 8003228:	e008      	b.n	800323c <HAL_GPIO_Init+0x244>
 800322a:	2304      	movs	r3, #4
 800322c:	e006      	b.n	800323c <HAL_GPIO_Init+0x244>
 800322e:	2303      	movs	r3, #3
 8003230:	e004      	b.n	800323c <HAL_GPIO_Init+0x244>
 8003232:	2302      	movs	r3, #2
 8003234:	e002      	b.n	800323c <HAL_GPIO_Init+0x244>
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <HAL_GPIO_Init+0x244>
 800323a:	2300      	movs	r3, #0
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	f002 0203 	and.w	r2, r2, #3
 8003242:	0092      	lsls	r2, r2, #2
 8003244:	4093      	lsls	r3, r2
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	4313      	orrs	r3, r2
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	4937      	ldr	r1, [pc, #220]	@ (800332c <HAL_GPIO_Init+0x334>)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	3302      	adds	r3, #2
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800325a:	4b3b      	ldr	r3, [pc, #236]	@ (8003348 <HAL_GPIO_Init+0x350>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	43db      	mvns	r3, r3
 8003264:	693a      	ldr	r2, [r7, #16]
 8003266:	4013      	ands	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003272:	2b00      	cmp	r3, #0
 8003274:	d003      	beq.n	800327e <HAL_GPIO_Init+0x286>
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	4a32      	ldr	r2, [pc, #200]	@ (8003348 <HAL_GPIO_Init+0x350>)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	6093      	str	r3, [r2, #8]
 8003284:	4b30      	ldr	r3, [pc, #192]	@ (8003348 <HAL_GPIO_Init+0x350>)
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	613b      	str	r3, [r7, #16]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	43db      	mvns	r3, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4013      	ands	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d003      	beq.n	80032a8 <HAL_GPIO_Init+0x2b0>
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	4a27      	ldr	r2, [pc, #156]	@ (8003348 <HAL_GPIO_Init+0x350>)
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	60d3      	str	r3, [r2, #12]
 80032ae:	4b26      	ldr	r3, [pc, #152]	@ (8003348 <HAL_GPIO_Init+0x350>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	43db      	mvns	r3, r3
 80032b8:	693a      	ldr	r2, [r7, #16]
 80032ba:	4013      	ands	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d003      	beq.n	80032d2 <HAL_GPIO_Init+0x2da>
 80032ca:	693a      	ldr	r2, [r7, #16]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003348 <HAL_GPIO_Init+0x350>)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	6053      	str	r3, [r2, #4]
 80032d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003348 <HAL_GPIO_Init+0x350>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	613b      	str	r3, [r7, #16]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	43db      	mvns	r3, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d003      	beq.n	80032fc <HAL_GPIO_Init+0x304>
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]
 80032fc:	4a12      	ldr	r2, [pc, #72]	@ (8003348 <HAL_GPIO_Init+0x350>)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	6013      	str	r3, [r2, #0]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	3301      	adds	r3, #1
 8003306:	617b      	str	r3, [r7, #20]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa22 f303 	lsr.w	r3, r2, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	f47f ae78 	bne.w	8003008 <HAL_GPIO_Init+0x10>
 8003318:	bf00      	nop
 800331a:	bf00      	nop
 800331c:	371c      	adds	r7, #28
 800331e:	46bd      	mov	sp, r7
 8003320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003324:	4770      	bx	lr
 8003326:	bf00      	nop
 8003328:	40021000 	.word	0x40021000
 800332c:	40010000 	.word	0x40010000
 8003330:	48000400 	.word	0x48000400
 8003334:	48000800 	.word	0x48000800
 8003338:	48000c00 	.word	0x48000c00
 800333c:	48001000 	.word	0x48001000
 8003340:	48001400 	.word	0x48001400
 8003344:	48001800 	.word	0x48001800
 8003348:	40010400 	.word	0x40010400

0800334c <HAL_GPIO_WritePin>:
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
 8003358:	4613      	mov	r3, r2
 800335a:	707b      	strb	r3, [r7, #1]
 800335c:	787b      	ldrb	r3, [r7, #1]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_WritePin+0x1e>
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	619a      	str	r2, [r3, #24]
 8003368:	e002      	b.n	8003370 <HAL_GPIO_WritePin+0x24>
 800336a:	887a      	ldrh	r2, [r7, #2]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_GPIO_TogglePin>:
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	807b      	strh	r3, [r7, #2]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	887a      	ldrh	r2, [r7, #2]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	041a      	lsls	r2, r3, #16
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	43d9      	mvns	r1, r3
 800339a:	887b      	ldrh	r3, [r7, #2]
 800339c:	400b      	ands	r3, r1
 800339e:	431a      	orrs	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	619a      	str	r2, [r3, #24]
 80033a4:	bf00      	nop
 80033a6:	3714      	adds	r7, #20
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_GPIO_EXTI_IRQHandler>:
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	4603      	mov	r3, r0
 80033b8:	80fb      	strh	r3, [r7, #6]
 80033ba:	4b08      	ldr	r3, [pc, #32]	@ (80033dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	88fb      	ldrh	r3, [r7, #6]
 80033c0:	4013      	ands	r3, r2
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d006      	beq.n	80033d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80033c6:	4a05      	ldr	r2, [pc, #20]	@ (80033dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033c8:	88fb      	ldrh	r3, [r7, #6]
 80033ca:	6153      	str	r3, [r2, #20]
 80033cc:	88fb      	ldrh	r3, [r7, #6]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f000 f806 	bl	80033e0 <HAL_GPIO_EXTI_Callback>
 80033d4:	bf00      	nop
 80033d6:	3708      	adds	r7, #8
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	40010400 	.word	0x40010400

080033e0 <HAL_GPIO_EXTI_Callback>:
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	4603      	mov	r3, r0
 80033e8:	80fb      	strh	r3, [r7, #6]
 80033ea:	bf00      	nop
 80033ec:	370c      	adds	r7, #12
 80033ee:	46bd      	mov	sp, r7
 80033f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f4:	4770      	bx	lr
	...

080033f8 <HAL_PWREx_GetVoltageRange>:
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <HAL_PWREx_GetVoltageRange+0x18>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003404:	4618      	mov	r0, r3
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	40007000 	.word	0x40007000

08003414 <HAL_PWREx_ControlVoltageScaling>:
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003422:	d130      	bne.n	8003486 <HAL_PWREx_ControlVoltageScaling+0x72>
 8003424:	4b23      	ldr	r3, [pc, #140]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800342c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003430:	d038      	beq.n	80034a4 <HAL_PWREx_ControlVoltageScaling+0x90>
 8003432:	4b20      	ldr	r3, [pc, #128]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800343a:	4a1e      	ldr	r2, [pc, #120]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800343c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	4b1d      	ldr	r3, [pc, #116]	@ (80034b8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	2232      	movs	r2, #50	@ 0x32
 8003448:	fb02 f303 	mul.w	r3, r2, r3
 800344c:	4a1b      	ldr	r2, [pc, #108]	@ (80034bc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	0c9b      	lsrs	r3, r3, #18
 8003454:	3301      	adds	r3, #1
 8003456:	60fb      	str	r3, [r7, #12]
 8003458:	e002      	b.n	8003460 <HAL_PWREx_ControlVoltageScaling+0x4c>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	3b01      	subs	r3, #1
 800345e:	60fb      	str	r3, [r7, #12]
 8003460:	4b14      	ldr	r3, [pc, #80]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003462:	695b      	ldr	r3, [r3, #20]
 8003464:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003468:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800346c:	d102      	bne.n	8003474 <HAL_PWREx_ControlVoltageScaling+0x60>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1f2      	bne.n	800345a <HAL_PWREx_ControlVoltageScaling+0x46>
 8003474:	4b0f      	ldr	r3, [pc, #60]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800347c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003480:	d110      	bne.n	80034a4 <HAL_PWREx_ControlVoltageScaling+0x90>
 8003482:	2303      	movs	r3, #3
 8003484:	e00f      	b.n	80034a6 <HAL_PWREx_ControlVoltageScaling+0x92>
 8003486:	4b0b      	ldr	r3, [pc, #44]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800348e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003492:	d007      	beq.n	80034a4 <HAL_PWREx_ControlVoltageScaling+0x90>
 8003494:	4b07      	ldr	r3, [pc, #28]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800349c:	4a05      	ldr	r2, [pc, #20]	@ (80034b4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800349e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	2300      	movs	r3, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	3714      	adds	r7, #20
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	40007000 	.word	0x40007000
 80034b8:	2000003c 	.word	0x2000003c
 80034bc:	431bde83 	.word	0x431bde83

080034c0 <HAL_RCC_OscConfig>:
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12>
 80034ce:	2301      	movs	r3, #1
 80034d0:	e3ca      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 80034d2:	4b97      	ldr	r3, [pc, #604]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 80034d4:	689b      	ldr	r3, [r3, #8]
 80034d6:	f003 030c 	and.w	r3, r3, #12
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	4b94      	ldr	r3, [pc, #592]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	617b      	str	r3, [r7, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80e4 	beq.w	80036bc <HAL_RCC_OscConfig+0x1fc>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d007      	beq.n	800350a <HAL_RCC_OscConfig+0x4a>
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b0c      	cmp	r3, #12
 80034fe:	f040 808b 	bne.w	8003618 <HAL_RCC_OscConfig+0x158>
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	2b01      	cmp	r3, #1
 8003506:	f040 8087 	bne.w	8003618 <HAL_RCC_OscConfig+0x158>
 800350a:	4b89      	ldr	r3, [pc, #548]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x62>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_RCC_OscConfig+0x62>
 800351e:	2301      	movs	r3, #1
 8003520:	e3a2      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1a      	ldr	r2, [r3, #32]
 8003526:	4b82      	ldr	r3, [pc, #520]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0308 	and.w	r3, r3, #8
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <HAL_RCC_OscConfig+0x7c>
 8003532:	4b7f      	ldr	r3, [pc, #508]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800353a:	e005      	b.n	8003548 <HAL_RCC_OscConfig+0x88>
 800353c:	4b7c      	ldr	r3, [pc, #496]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 800353e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003542:	091b      	lsrs	r3, r3, #4
 8003544:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003548:	4293      	cmp	r3, r2
 800354a:	d223      	bcs.n	8003594 <HAL_RCC_OscConfig+0xd4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4618      	mov	r0, r3
 8003552:	f000 fd87 	bl	8004064 <RCC_SetFlashLatencyFromMSIRange>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <HAL_RCC_OscConfig+0xa0>
 800355c:	2301      	movs	r3, #1
 800355e:	e383      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003560:	4b73      	ldr	r3, [pc, #460]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a72      	ldr	r2, [pc, #456]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003566:	f043 0308 	orr.w	r3, r3, #8
 800356a:	6013      	str	r3, [r2, #0]
 800356c:	4b70      	ldr	r3, [pc, #448]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	496d      	ldr	r1, [pc, #436]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 800357a:	4313      	orrs	r3, r2
 800357c:	600b      	str	r3, [r1, #0]
 800357e:	4b6c      	ldr	r3, [pc, #432]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	021b      	lsls	r3, r3, #8
 800358c:	4968      	ldr	r1, [pc, #416]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
 8003592:	e025      	b.n	80035e0 <HAL_RCC_OscConfig+0x120>
 8003594:	4b66      	ldr	r3, [pc, #408]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a65      	ldr	r2, [pc, #404]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 800359a:	f043 0308 	orr.w	r3, r3, #8
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b63      	ldr	r3, [pc, #396]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	4960      	ldr	r1, [pc, #384]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
 80035b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	021b      	lsls	r3, r3, #8
 80035c0:	495b      	ldr	r1, [pc, #364]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	604b      	str	r3, [r1, #4]
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d109      	bne.n	80035e0 <HAL_RCC_OscConfig+0x120>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a1b      	ldr	r3, [r3, #32]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fd47 	bl	8004064 <RCC_SetFlashLatencyFromMSIRange>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_OscConfig+0x120>
 80035dc:	2301      	movs	r3, #1
 80035de:	e343      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 80035e0:	f000 fc4a 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 80035e4:	4602      	mov	r2, r0
 80035e6:	4b52      	ldr	r3, [pc, #328]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	091b      	lsrs	r3, r3, #4
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	4950      	ldr	r1, [pc, #320]	@ (8003734 <HAL_RCC_OscConfig+0x274>)
 80035f2:	5ccb      	ldrb	r3, [r1, r3]
 80035f4:	f003 031f 	and.w	r3, r3, #31
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
 80035fc:	4a4e      	ldr	r2, [pc, #312]	@ (8003738 <HAL_RCC_OscConfig+0x278>)
 80035fe:	6013      	str	r3, [r2, #0]
 8003600:	4b4e      	ldr	r3, [pc, #312]	@ (800373c <HAL_RCC_OscConfig+0x27c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f7ff faf1 	bl	8002bec <HAL_InitTick>
 800360a:	4603      	mov	r3, r0
 800360c:	73fb      	strb	r3, [r7, #15]
 800360e:	7bfb      	ldrb	r3, [r7, #15]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d052      	beq.n	80036ba <HAL_RCC_OscConfig+0x1fa>
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	e327      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d032      	beq.n	8003686 <HAL_RCC_OscConfig+0x1c6>
 8003620:	4b43      	ldr	r3, [pc, #268]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a42      	ldr	r2, [pc, #264]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6013      	str	r3, [r2, #0]
 800362c:	f7ff fbf6 	bl	8002e1c <HAL_GetTick>
 8003630:	6138      	str	r0, [r7, #16]
 8003632:	e008      	b.n	8003646 <HAL_RCC_OscConfig+0x186>
 8003634:	f7ff fbf2 	bl	8002e1c <HAL_GetTick>
 8003638:	4602      	mov	r2, r0
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	1ad3      	subs	r3, r2, r3
 800363e:	2b02      	cmp	r3, #2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x186>
 8003642:	2303      	movs	r3, #3
 8003644:	e310      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003646:	4b3a      	ldr	r3, [pc, #232]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0f0      	beq.n	8003634 <HAL_RCC_OscConfig+0x174>
 8003652:	4b37      	ldr	r3, [pc, #220]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a36      	ldr	r2, [pc, #216]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003658:	f043 0308 	orr.w	r3, r3, #8
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b34      	ldr	r3, [pc, #208]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4931      	ldr	r1, [pc, #196]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 800366c:	4313      	orrs	r3, r2
 800366e:	600b      	str	r3, [r1, #0]
 8003670:	4b2f      	ldr	r3, [pc, #188]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	69db      	ldr	r3, [r3, #28]
 800367c:	021b      	lsls	r3, r3, #8
 800367e:	492c      	ldr	r1, [pc, #176]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003680:	4313      	orrs	r3, r2
 8003682:	604b      	str	r3, [r1, #4]
 8003684:	e01a      	b.n	80036bc <HAL_RCC_OscConfig+0x1fc>
 8003686:	4b2a      	ldr	r3, [pc, #168]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a29      	ldr	r2, [pc, #164]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	f7ff fbc3 	bl	8002e1c <HAL_GetTick>
 8003696:	6138      	str	r0, [r7, #16]
 8003698:	e008      	b.n	80036ac <HAL_RCC_OscConfig+0x1ec>
 800369a:	f7ff fbbf 	bl	8002e1c <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x1ec>
 80036a8:	2303      	movs	r3, #3
 80036aa:	e2dd      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 80036ac:	4b20      	ldr	r3, [pc, #128]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1f0      	bne.n	800369a <HAL_RCC_OscConfig+0x1da>
 80036b8:	e000      	b.n	80036bc <HAL_RCC_OscConfig+0x1fc>
 80036ba:	bf00      	nop
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0301 	and.w	r3, r3, #1
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d074      	beq.n	80037b2 <HAL_RCC_OscConfig+0x2f2>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d005      	beq.n	80036da <HAL_RCC_OscConfig+0x21a>
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	2b0c      	cmp	r3, #12
 80036d2:	d10e      	bne.n	80036f2 <HAL_RCC_OscConfig+0x232>
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2b03      	cmp	r3, #3
 80036d8:	d10b      	bne.n	80036f2 <HAL_RCC_OscConfig+0x232>
 80036da:	4b15      	ldr	r3, [pc, #84]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d064      	beq.n	80037b0 <HAL_RCC_OscConfig+0x2f0>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d160      	bne.n	80037b0 <HAL_RCC_OscConfig+0x2f0>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e2ba      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036fa:	d106      	bne.n	800370a <HAL_RCC_OscConfig+0x24a>
 80036fc:	4b0c      	ldr	r3, [pc, #48]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a0b      	ldr	r2, [pc, #44]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003706:	6013      	str	r3, [r2, #0]
 8003708:	e026      	b.n	8003758 <HAL_RCC_OscConfig+0x298>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003712:	d115      	bne.n	8003740 <HAL_RCC_OscConfig+0x280>
 8003714:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a05      	ldr	r2, [pc, #20]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 800371a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b03      	ldr	r3, [pc, #12]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a02      	ldr	r2, [pc, #8]	@ (8003730 <HAL_RCC_OscConfig+0x270>)
 8003726:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e014      	b.n	8003758 <HAL_RCC_OscConfig+0x298>
 800372e:	bf00      	nop
 8003730:	40021000 	.word	0x40021000
 8003734:	080098cc 	.word	0x080098cc
 8003738:	2000003c 	.word	0x2000003c
 800373c:	20000040 	.word	0x20000040
 8003740:	4ba0      	ldr	r3, [pc, #640]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	4a9f      	ldr	r2, [pc, #636]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800374a:	6013      	str	r3, [r2, #0]
 800374c:	4b9d      	ldr	r3, [pc, #628]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a9c      	ldr	r2, [pc, #624]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d013      	beq.n	8003788 <HAL_RCC_OscConfig+0x2c8>
 8003760:	f7ff fb5c 	bl	8002e1c <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x2ba>
 8003768:	f7ff fb58 	bl	8002e1c <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b64      	cmp	r3, #100	@ 0x64
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x2ba>
 8003776:	2303      	movs	r3, #3
 8003778:	e276      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 800377a:	4b92      	ldr	r3, [pc, #584]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x2a8>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x2f2>
 8003788:	f7ff fb48 	bl	8002e1c <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x2e2>
 8003790:	f7ff fb44 	bl	8002e1c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b64      	cmp	r3, #100	@ 0x64
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x2e2>
 800379e:	2303      	movs	r3, #3
 80037a0:	e262      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 80037a2:	4b88      	ldr	r3, [pc, #544]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x2d0>
 80037ae:	e000      	b.n	80037b2 <HAL_RCC_OscConfig+0x2f2>
 80037b0:	bf00      	nop
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d060      	beq.n	8003880 <HAL_RCC_OscConfig+0x3c0>
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	2b04      	cmp	r3, #4
 80037c2:	d005      	beq.n	80037d0 <HAL_RCC_OscConfig+0x310>
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	2b0c      	cmp	r3, #12
 80037c8:	d119      	bne.n	80037fe <HAL_RCC_OscConfig+0x33e>
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d116      	bne.n	80037fe <HAL_RCC_OscConfig+0x33e>
 80037d0:	4b7c      	ldr	r3, [pc, #496]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_OscConfig+0x328>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_OscConfig+0x328>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e23f      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 80037e8:	4b76      	ldr	r3, [pc, #472]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	4973      	ldr	r1, [pc, #460]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	604b      	str	r3, [r1, #4]
 80037fc:	e040      	b.n	8003880 <HAL_RCC_OscConfig+0x3c0>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d023      	beq.n	800384e <HAL_RCC_OscConfig+0x38e>
 8003806:	4b6f      	ldr	r3, [pc, #444]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a6e      	ldr	r2, [pc, #440]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 800380c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	f7ff fb03 	bl	8002e1c <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x36c>
 800381a:	f7ff faff 	bl	8002e1c <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x36c>
 8003828:	2303      	movs	r3, #3
 800382a:	e21d      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 800382c:	4b65      	ldr	r3, [pc, #404]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x35a>
 8003838:	4b62      	ldr	r3, [pc, #392]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	061b      	lsls	r3, r3, #24
 8003846:	495f      	ldr	r1, [pc, #380]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003848:	4313      	orrs	r3, r2
 800384a:	604b      	str	r3, [r1, #4]
 800384c:	e018      	b.n	8003880 <HAL_RCC_OscConfig+0x3c0>
 800384e:	4b5d      	ldr	r3, [pc, #372]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a5c      	ldr	r2, [pc, #368]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003854:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003858:	6013      	str	r3, [r2, #0]
 800385a:	f7ff fadf 	bl	8002e1c <HAL_GetTick>
 800385e:	6138      	str	r0, [r7, #16]
 8003860:	e008      	b.n	8003874 <HAL_RCC_OscConfig+0x3b4>
 8003862:	f7ff fadb 	bl	8002e1c <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d901      	bls.n	8003874 <HAL_RCC_OscConfig+0x3b4>
 8003870:	2303      	movs	r3, #3
 8003872:	e1f9      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003874:	4b53      	ldr	r3, [pc, #332]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1f0      	bne.n	8003862 <HAL_RCC_OscConfig+0x3a2>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b00      	cmp	r3, #0
 800388a:	d03c      	beq.n	8003906 <HAL_RCC_OscConfig+0x446>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d01c      	beq.n	80038ce <HAL_RCC_OscConfig+0x40e>
 8003894:	4b4b      	ldr	r3, [pc, #300]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003896:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800389a:	4a4a      	ldr	r2, [pc, #296]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80038a4:	f7ff faba 	bl	8002e1c <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x3fe>
 80038ac:	f7ff fab6 	bl	8002e1c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x3fe>
 80038ba:	2303      	movs	r3, #3
 80038bc:	e1d4      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 80038be:	4b41      	ldr	r3, [pc, #260]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 80038c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038c4:	f003 0302 	and.w	r3, r3, #2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d0ef      	beq.n	80038ac <HAL_RCC_OscConfig+0x3ec>
 80038cc:	e01b      	b.n	8003906 <HAL_RCC_OscConfig+0x446>
 80038ce:	4b3d      	ldr	r3, [pc, #244]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 80038d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038d4:	4a3b      	ldr	r2, [pc, #236]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 80038d6:	f023 0301 	bic.w	r3, r3, #1
 80038da:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80038de:	f7ff fa9d 	bl	8002e1c <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x438>
 80038e6:	f7ff fa99 	bl	8002e1c <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x438>
 80038f4:	2303      	movs	r3, #3
 80038f6:	e1b7      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 80038f8:	4b32      	ldr	r3, [pc, #200]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 80038fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038fe:	f003 0302 	and.w	r3, r3, #2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d1ef      	bne.n	80038e6 <HAL_RCC_OscConfig+0x426>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 80a6 	beq.w	8003a60 <HAL_RCC_OscConfig+0x5a0>
 8003914:	2300      	movs	r3, #0
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	4b2a      	ldr	r3, [pc, #168]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 800391a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800391c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10d      	bne.n	8003940 <HAL_RCC_OscConfig+0x480>
 8003924:	4b27      	ldr	r3, [pc, #156]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003928:	4a26      	ldr	r2, [pc, #152]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 800392a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800392e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003930:	4b24      	ldr	r3, [pc, #144]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003938:	60bb      	str	r3, [r7, #8]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	2301      	movs	r3, #1
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	4b21      	ldr	r3, [pc, #132]	@ (80039c8 <HAL_RCC_OscConfig+0x508>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d118      	bne.n	800397e <HAL_RCC_OscConfig+0x4be>
 800394c:	4b1e      	ldr	r3, [pc, #120]	@ (80039c8 <HAL_RCC_OscConfig+0x508>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1d      	ldr	r2, [pc, #116]	@ (80039c8 <HAL_RCC_OscConfig+0x508>)
 8003952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003956:	6013      	str	r3, [r2, #0]
 8003958:	f7ff fa60 	bl	8002e1c <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x4b2>
 8003960:	f7ff fa5c 	bl	8002e1c <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x4b2>
 800396e:	2303      	movs	r3, #3
 8003970:	e17a      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003972:	4b15      	ldr	r3, [pc, #84]	@ (80039c8 <HAL_RCC_OscConfig+0x508>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x4a0>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d108      	bne.n	8003998 <HAL_RCC_OscConfig+0x4d8>
 8003986:	4b0f      	ldr	r3, [pc, #60]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398c:	4a0d      	ldr	r2, [pc, #52]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003996:	e029      	b.n	80039ec <HAL_RCC_OscConfig+0x52c>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b05      	cmp	r3, #5
 800399e:	d115      	bne.n	80039cc <HAL_RCC_OscConfig+0x50c>
 80039a0:	4b08      	ldr	r3, [pc, #32]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a6:	4a07      	ldr	r2, [pc, #28]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 80039a8:	f043 0304 	orr.w	r3, r3, #4
 80039ac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039b0:	4b04      	ldr	r3, [pc, #16]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b6:	4a03      	ldr	r2, [pc, #12]	@ (80039c4 <HAL_RCC_OscConfig+0x504>)
 80039b8:	f043 0301 	orr.w	r3, r3, #1
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039c0:	e014      	b.n	80039ec <HAL_RCC_OscConfig+0x52c>
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40007000 	.word	0x40007000
 80039cc:	4b9c      	ldr	r3, [pc, #624]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 80039ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d2:	4a9b      	ldr	r2, [pc, #620]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 80039d4:	f023 0301 	bic.w	r3, r3, #1
 80039d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039dc:	4b98      	ldr	r3, [pc, #608]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 80039de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039e2:	4a97      	ldr	r2, [pc, #604]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 80039e4:	f023 0304 	bic.w	r3, r3, #4
 80039e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d016      	beq.n	8003a22 <HAL_RCC_OscConfig+0x562>
 80039f4:	f7ff fa12 	bl	8002e1c <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]
 80039fa:	e00a      	b.n	8003a12 <HAL_RCC_OscConfig+0x552>
 80039fc:	f7ff fa0e 	bl	8002e1c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x552>
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e12a      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003a12:	4b8b      	ldr	r3, [pc, #556]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ed      	beq.n	80039fc <HAL_RCC_OscConfig+0x53c>
 8003a20:	e015      	b.n	8003a4e <HAL_RCC_OscConfig+0x58e>
 8003a22:	f7ff f9fb 	bl	8002e1c <HAL_GetTick>
 8003a26:	6138      	str	r0, [r7, #16]
 8003a28:	e00a      	b.n	8003a40 <HAL_RCC_OscConfig+0x580>
 8003a2a:	f7ff f9f7 	bl	8002e1c <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x580>
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e113      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003a40:	4b7f      	ldr	r3, [pc, #508]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d1ed      	bne.n	8003a2a <HAL_RCC_OscConfig+0x56a>
 8003a4e:	7ffb      	ldrb	r3, [r7, #31]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d105      	bne.n	8003a60 <HAL_RCC_OscConfig+0x5a0>
 8003a54:	4b7a      	ldr	r3, [pc, #488]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a58:	4a79      	ldr	r2, [pc, #484]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003a5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 80fe 	beq.w	8003c66 <HAL_RCC_OscConfig+0x7a6>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	f040 80d0 	bne.w	8003c14 <HAL_RCC_OscConfig+0x754>
 8003a74:	4b72      	ldr	r3, [pc, #456]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003a76:	68db      	ldr	r3, [r3, #12]
 8003a78:	617b      	str	r3, [r7, #20]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	f003 0203 	and.w	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d130      	bne.n	8003aea <HAL_RCC_OscConfig+0x62a>
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a92:	3b01      	subs	r3, #1
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d127      	bne.n	8003aea <HAL_RCC_OscConfig+0x62a>
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa4:	021b      	lsls	r3, r3, #8
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d11f      	bne.n	8003aea <HAL_RCC_OscConfig+0x62a>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003ab4:	2a07      	cmp	r2, #7
 8003ab6:	bf14      	ite	ne
 8003ab8:	2201      	movne	r2, #1
 8003aba:	2200      	moveq	r2, #0
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d113      	bne.n	8003aea <HAL_RCC_OscConfig+0x62a>
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	055b      	lsls	r3, r3, #21
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d109      	bne.n	8003aea <HAL_RCC_OscConfig+0x62a>
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae0:	085b      	lsrs	r3, r3, #1
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	065b      	lsls	r3, r3, #25
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d06e      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x708>
 8003aea:	69bb      	ldr	r3, [r7, #24]
 8003aec:	2b0c      	cmp	r3, #12
 8003aee:	d069      	beq.n	8003bc4 <HAL_RCC_OscConfig+0x704>
 8003af0:	4b53      	ldr	r3, [pc, #332]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d105      	bne.n	8003b08 <HAL_RCC_OscConfig+0x648>
 8003afc:	4b50      	ldr	r3, [pc, #320]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_OscConfig+0x64c>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0ad      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003b0c:	4b4c      	ldr	r3, [pc, #304]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a4b      	ldr	r2, [pc, #300]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b16:	6013      	str	r3, [r2, #0]
 8003b18:	f7ff f980 	bl	8002e1c <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x672>
 8003b20:	f7ff f97c 	bl	8002e1c <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x672>
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e09a      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003b32:	4b43      	ldr	r3, [pc, #268]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x660>
 8003b3e:	4b40      	ldr	r3, [pc, #256]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	4b40      	ldr	r3, [pc, #256]	@ (8003c44 <HAL_RCC_OscConfig+0x784>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b4e:	3a01      	subs	r2, #1
 8003b50:	0112      	lsls	r2, r2, #4
 8003b52:	4311      	orrs	r1, r2
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b58:	0212      	lsls	r2, r2, #8
 8003b5a:	4311      	orrs	r1, r2
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b60:	0852      	lsrs	r2, r2, #1
 8003b62:	3a01      	subs	r2, #1
 8003b64:	0552      	lsls	r2, r2, #21
 8003b66:	4311      	orrs	r1, r2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003b6c:	0852      	lsrs	r2, r2, #1
 8003b6e:	3a01      	subs	r2, #1
 8003b70:	0652      	lsls	r2, r2, #25
 8003b72:	4311      	orrs	r1, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003b78:	0912      	lsrs	r2, r2, #4
 8003b7a:	0452      	lsls	r2, r2, #17
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	4930      	ldr	r1, [pc, #192]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60cb      	str	r3, [r1, #12]
 8003b84:	4b2e      	ldr	r3, [pc, #184]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a2d      	ldr	r2, [pc, #180]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b8a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b8e:	6013      	str	r3, [r2, #0]
 8003b90:	4b2b      	ldr	r3, [pc, #172]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a2a      	ldr	r2, [pc, #168]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b9a:	60d3      	str	r3, [r2, #12]
 8003b9c:	f7ff f93e 	bl	8002e1c <HAL_GetTick>
 8003ba0:	6138      	str	r0, [r7, #16]
 8003ba2:	e008      	b.n	8003bb6 <HAL_RCC_OscConfig+0x6f6>
 8003ba4:	f7ff f93a 	bl	8002e1c <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	2b02      	cmp	r3, #2
 8003bb0:	d901      	bls.n	8003bb6 <HAL_RCC_OscConfig+0x6f6>
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e058      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003bb6:	4b22      	ldr	r3, [pc, #136]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d0f0      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x6e4>
 8003bc2:	e050      	b.n	8003c66 <HAL_RCC_OscConfig+0x7a6>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e04f      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d148      	bne.n	8003c66 <HAL_RCC_OscConfig+0x7a6>
 8003bd4:	4b1a      	ldr	r3, [pc, #104]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a19      	ldr	r2, [pc, #100]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003bda:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b17      	ldr	r3, [pc, #92]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	4a16      	ldr	r2, [pc, #88]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bea:	60d3      	str	r3, [r2, #12]
 8003bec:	f7ff f916 	bl	8002e1c <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x746>
 8003bf4:	f7ff f912 	bl	8002e1c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x746>
 8003c02:	2303      	movs	r3, #3
 8003c04:	e030      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003c06:	4b0e      	ldr	r3, [pc, #56]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d0f0      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x734>
 8003c12:	e028      	b.n	8003c66 <HAL_RCC_OscConfig+0x7a6>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	2b0c      	cmp	r3, #12
 8003c18:	d023      	beq.n	8003c62 <HAL_RCC_OscConfig+0x7a2>
 8003c1a:	4b09      	ldr	r3, [pc, #36]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a08      	ldr	r2, [pc, #32]	@ (8003c40 <HAL_RCC_OscConfig+0x780>)
 8003c20:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	f7ff f8f9 	bl	8002e1c <HAL_GetTick>
 8003c2a:	6138      	str	r0, [r7, #16]
 8003c2c:	e00c      	b.n	8003c48 <HAL_RCC_OscConfig+0x788>
 8003c2e:	f7ff f8f5 	bl	8002e1c <HAL_GetTick>
 8003c32:	4602      	mov	r2, r0
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d905      	bls.n	8003c48 <HAL_RCC_OscConfig+0x788>
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e013      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003c40:	40021000 	.word	0x40021000
 8003c44:	f99d808c 	.word	0xf99d808c
 8003c48:	4b09      	ldr	r3, [pc, #36]	@ (8003c70 <HAL_RCC_OscConfig+0x7b0>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1ec      	bne.n	8003c2e <HAL_RCC_OscConfig+0x76e>
 8003c54:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <HAL_RCC_OscConfig+0x7b0>)
 8003c56:	68da      	ldr	r2, [r3, #12]
 8003c58:	4905      	ldr	r1, [pc, #20]	@ (8003c70 <HAL_RCC_OscConfig+0x7b0>)
 8003c5a:	4b06      	ldr	r3, [pc, #24]	@ (8003c74 <HAL_RCC_OscConfig+0x7b4>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	60cb      	str	r3, [r1, #12]
 8003c60:	e001      	b.n	8003c66 <HAL_RCC_OscConfig+0x7a6>
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_RCC_OscConfig+0x7a8>
 8003c66:	2300      	movs	r3, #0
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	feeefffc 	.word	0xfeeefffc

08003c78 <HAL_RCC_ClockConfig>:
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <HAL_RCC_ClockConfig+0x14>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e0e7      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
 8003c8c:	4b75      	ldr	r3, [pc, #468]	@ (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d910      	bls.n	8003cbc <HAL_RCC_ClockConfig+0x44>
 8003c9a:	4b72      	ldr	r3, [pc, #456]	@ (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f023 0207 	bic.w	r2, r3, #7
 8003ca2:	4970      	ldr	r1, [pc, #448]	@ (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
 8003caa:	4b6e      	ldr	r3, [pc, #440]	@ (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f003 0307 	and.w	r3, r3, #7
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d001      	beq.n	8003cbc <HAL_RCC_ClockConfig+0x44>
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e0cf      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d010      	beq.n	8003cea <HAL_RCC_ClockConfig+0x72>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	4b66      	ldr	r3, [pc, #408]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d908      	bls.n	8003cea <HAL_RCC_ClockConfig+0x72>
 8003cd8:	4b63      	ldr	r3, [pc, #396]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4960      	ldr	r1, [pc, #384]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	608b      	str	r3, [r1, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d04c      	beq.n	8003d90 <HAL_RCC_ClockConfig+0x118>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d107      	bne.n	8003d0e <HAL_RCC_ClockConfig+0x96>
 8003cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d121      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xd6>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e0a6      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d107      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xae>
 8003d16:	4b54      	ldr	r3, [pc, #336]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d115      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xd6>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e09a      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d107      	bne.n	8003d3e <HAL_RCC_ClockConfig+0xc6>
 8003d2e:	4b4e      	ldr	r3, [pc, #312]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d109      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xd6>
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	e08e      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
 8003d3e:	4b4a      	ldr	r3, [pc, #296]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d101      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xd6>
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e086      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
 8003d4e:	4b46      	ldr	r3, [pc, #280]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f023 0203 	bic.w	r2, r3, #3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	4943      	ldr	r1, [pc, #268]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	608b      	str	r3, [r1, #8]
 8003d60:	f7ff f85c 	bl	8002e1c <HAL_GetTick>
 8003d64:	60f8      	str	r0, [r7, #12]
 8003d66:	e00a      	b.n	8003d7e <HAL_RCC_ClockConfig+0x106>
 8003d68:	f7ff f858 	bl	8002e1c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_ClockConfig+0x106>
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e06e      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
 8003d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 020c 	and.w	r2, r3, #12
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d1eb      	bne.n	8003d68 <HAL_RCC_ClockConfig+0xf0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0302 	and.w	r3, r3, #2
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d010      	beq.n	8003dbe <HAL_RCC_ClockConfig+0x146>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	4b31      	ldr	r3, [pc, #196]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d208      	bcs.n	8003dbe <HAL_RCC_ClockConfig+0x146>
 8003dac:	4b2e      	ldr	r3, [pc, #184]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	492b      	ldr	r1, [pc, #172]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	608b      	str	r3, [r1, #8]
 8003dbe:	4b29      	ldr	r3, [pc, #164]	@ (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0307 	and.w	r3, r3, #7
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d210      	bcs.n	8003dee <HAL_RCC_ClockConfig+0x176>
 8003dcc:	4b25      	ldr	r3, [pc, #148]	@ (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f023 0207 	bic.w	r2, r3, #7
 8003dd4:	4923      	ldr	r1, [pc, #140]	@ (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	600b      	str	r3, [r1, #0]
 8003ddc:	4b21      	ldr	r3, [pc, #132]	@ (8003e64 <HAL_RCC_ClockConfig+0x1ec>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	683a      	ldr	r2, [r7, #0]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d001      	beq.n	8003dee <HAL_RCC_ClockConfig+0x176>
 8003dea:	2301      	movs	r3, #1
 8003dec:	e036      	b.n	8003e5c <HAL_RCC_ClockConfig+0x1e4>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0304 	and.w	r3, r3, #4
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x194>
 8003dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	4918      	ldr	r1, [pc, #96]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	608b      	str	r3, [r1, #8]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0308 	and.w	r3, r3, #8
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d009      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x1b4>
 8003e18:	4b13      	ldr	r3, [pc, #76]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4910      	ldr	r1, [pc, #64]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	608b      	str	r3, [r1, #8]
 8003e2c:	f000 f824 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8003e30:	4602      	mov	r2, r0
 8003e32:	4b0d      	ldr	r3, [pc, #52]	@ (8003e68 <HAL_RCC_ClockConfig+0x1f0>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	490b      	ldr	r1, [pc, #44]	@ (8003e6c <HAL_RCC_ClockConfig+0x1f4>)
 8003e3e:	5ccb      	ldrb	r3, [r1, r3]
 8003e40:	f003 031f 	and.w	r3, r3, #31
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
 8003e48:	4a09      	ldr	r2, [pc, #36]	@ (8003e70 <HAL_RCC_ClockConfig+0x1f8>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	4b09      	ldr	r3, [pc, #36]	@ (8003e74 <HAL_RCC_ClockConfig+0x1fc>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe fecb 	bl	8002bec <HAL_InitTick>
 8003e56:	4603      	mov	r3, r0
 8003e58:	72fb      	strb	r3, [r7, #11]
 8003e5a:	7afb      	ldrb	r3, [r7, #11]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	40022000 	.word	0x40022000
 8003e68:	40021000 	.word	0x40021000
 8003e6c:	080098cc 	.word	0x080098cc
 8003e70:	2000003c 	.word	0x2000003c
 8003e74:	20000040 	.word	0x20000040

08003e78 <HAL_RCC_GetSysClockFreq>:
 8003e78:	b480      	push	{r7}
 8003e7a:	b089      	sub	sp, #36	@ 0x24
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
 8003e82:	2300      	movs	r3, #0
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	4b3e      	ldr	r3, [pc, #248]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 030c 	and.w	r3, r3, #12
 8003e8e:	613b      	str	r3, [r7, #16]
 8003e90:	4b3b      	ldr	r3, [pc, #236]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0303 	and.w	r3, r3, #3
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d005      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x34>
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b0c      	cmp	r3, #12
 8003ea4:	d121      	bne.n	8003eea <HAL_RCC_GetSysClockFreq+0x72>
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	d11e      	bne.n	8003eea <HAL_RCC_GetSysClockFreq+0x72>
 8003eac:	4b34      	ldr	r3, [pc, #208]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0308 	and.w	r3, r3, #8
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d107      	bne.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x50>
 8003eb8:	4b31      	ldr	r3, [pc, #196]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	61fb      	str	r3, [r7, #28]
 8003ec6:	e005      	b.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x5c>
 8003ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	091b      	lsrs	r3, r3, #4
 8003ece:	f003 030f 	and.w	r3, r3, #15
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	4a2b      	ldr	r2, [pc, #172]	@ (8003f84 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10d      	bne.n	8003f00 <HAL_RCC_GetSysClockFreq+0x88>
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	61bb      	str	r3, [r7, #24]
 8003ee8:	e00a      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x88>
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d102      	bne.n	8003ef6 <HAL_RCC_GetSysClockFreq+0x7e>
 8003ef0:	4b25      	ldr	r3, [pc, #148]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003ef2:	61bb      	str	r3, [r7, #24]
 8003ef4:	e004      	b.n	8003f00 <HAL_RCC_GetSysClockFreq+0x88>
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d101      	bne.n	8003f00 <HAL_RCC_GetSysClockFreq+0x88>
 8003efc:	4b23      	ldr	r3, [pc, #140]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x114>)
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b0c      	cmp	r3, #12
 8003f04:	d134      	bne.n	8003f70 <HAL_RCC_GetSysClockFreq+0xf8>
 8003f06:	4b1e      	ldr	r3, [pc, #120]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	f003 0303 	and.w	r3, r3, #3
 8003f0e:	60bb      	str	r3, [r7, #8]
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d003      	beq.n	8003f1e <HAL_RCC_GetSysClockFreq+0xa6>
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	2b03      	cmp	r3, #3
 8003f1a:	d003      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0xac>
 8003f1c:	e005      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0xb2>
 8003f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8003f88 <HAL_RCC_GetSysClockFreq+0x110>)
 8003f20:	617b      	str	r3, [r7, #20]
 8003f22:	e005      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xb8>
 8003f24:	4b19      	ldr	r3, [pc, #100]	@ (8003f8c <HAL_RCC_GetSysClockFreq+0x114>)
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	e002      	b.n	8003f30 <HAL_RCC_GetSysClockFreq+0xb8>
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	bf00      	nop
 8003f30:	4b13      	ldr	r3, [pc, #76]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f32:	68db      	ldr	r3, [r3, #12]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	607b      	str	r3, [r7, #4]
 8003f3e:	4b10      	ldr	r3, [pc, #64]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	0a1b      	lsrs	r3, r3, #8
 8003f44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f48:	697a      	ldr	r2, [r7, #20]
 8003f4a:	fb03 f202 	mul.w	r2, r3, r2
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	4b0a      	ldr	r3, [pc, #40]	@ (8003f80 <HAL_RCC_GetSysClockFreq+0x108>)
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	0e5b      	lsrs	r3, r3, #25
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	3301      	adds	r3, #1
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	61bb      	str	r3, [r7, #24]
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	4618      	mov	r0, r3
 8003f74:	3724      	adds	r7, #36	@ 0x24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40021000 	.word	0x40021000
 8003f84:	080098e4 	.word	0x080098e4
 8003f88:	00f42400 	.word	0x00f42400
 8003f8c:	007a1200 	.word	0x007a1200

08003f90 <HAL_RCC_GetHCLKFreq>:
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4b03      	ldr	r3, [pc, #12]	@ (8003fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	2000003c 	.word	0x2000003c

08003fa8 <HAL_RCC_GetPCLK1Freq>:
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	f7ff fff0 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	4b06      	ldr	r3, [pc, #24]	@ (8003fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	0a1b      	lsrs	r3, r3, #8
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	4904      	ldr	r1, [pc, #16]	@ (8003fd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fbe:	5ccb      	ldrb	r3, [r1, r3]
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	080098dc 	.word	0x080098dc

08003fd4 <HAL_RCC_GetPCLK2Freq>:
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	f7ff ffda 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fdc:	4602      	mov	r2, r0
 8003fde:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	0adb      	lsrs	r3, r3, #11
 8003fe4:	f003 0307 	and.w	r3, r3, #7
 8003fe8:	4904      	ldr	r1, [pc, #16]	@ (8003ffc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fea:	5ccb      	ldrb	r3, [r1, r3]
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	080098dc 	.word	0x080098dc

08004000 <HAL_RCC_GetClockConfig>:
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	220f      	movs	r2, #15
 800400e:	601a      	str	r2, [r3, #0]
 8004010:	4b12      	ldr	r3, [pc, #72]	@ (800405c <HAL_RCC_GetClockConfig+0x5c>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 0203 	and.w	r2, r3, #3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	605a      	str	r2, [r3, #4]
 800401c:	4b0f      	ldr	r3, [pc, #60]	@ (800405c <HAL_RCC_GetClockConfig+0x5c>)
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	4b0c      	ldr	r3, [pc, #48]	@ (800405c <HAL_RCC_GetClockConfig+0x5c>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	60da      	str	r2, [r3, #12]
 8004034:	4b09      	ldr	r3, [pc, #36]	@ (800405c <HAL_RCC_GetClockConfig+0x5c>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	08db      	lsrs	r3, r3, #3
 800403a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	611a      	str	r2, [r3, #16]
 8004042:	4b07      	ldr	r3, [pc, #28]	@ (8004060 <HAL_RCC_GetClockConfig+0x60>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f003 0207 	and.w	r2, r3, #7
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	40021000 	.word	0x40021000
 8004060:	40022000 	.word	0x40022000

08004064 <RCC_SetFlashLatencyFromMSIRange>:
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	4b2a      	ldr	r3, [pc, #168]	@ (800411c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004078:	2b00      	cmp	r3, #0
 800407a:	d003      	beq.n	8004084 <RCC_SetFlashLatencyFromMSIRange+0x20>
 800407c:	f7ff f9bc 	bl	80033f8 <HAL_PWREx_GetVoltageRange>
 8004080:	6178      	str	r0, [r7, #20]
 8004082:	e014      	b.n	80040ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8004084:	4b25      	ldr	r3, [pc, #148]	@ (800411c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004088:	4a24      	ldr	r2, [pc, #144]	@ (800411c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800408a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800408e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004090:	4b22      	ldr	r3, [pc, #136]	@ (800411c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004098:	60fb      	str	r3, [r7, #12]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f7ff f9ac 	bl	80033f8 <HAL_PWREx_GetVoltageRange>
 80040a0:	6178      	str	r0, [r7, #20]
 80040a2:	4b1e      	ldr	r3, [pc, #120]	@ (800411c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a6:	4a1d      	ldr	r2, [pc, #116]	@ (800411c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80040a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040b4:	d10b      	bne.n	80040ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b80      	cmp	r3, #128	@ 0x80
 80040ba:	d919      	bls.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2ba0      	cmp	r3, #160	@ 0xa0
 80040c0:	d902      	bls.n	80040c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
 80040c2:	2302      	movs	r3, #2
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	e013      	b.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80040c8:	2301      	movs	r3, #1
 80040ca:	613b      	str	r3, [r7, #16]
 80040cc:	e010      	b.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2b80      	cmp	r3, #128	@ 0x80
 80040d2:	d902      	bls.n	80040da <RCC_SetFlashLatencyFromMSIRange+0x76>
 80040d4:	2303      	movs	r3, #3
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	e00a      	b.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b80      	cmp	r3, #128	@ 0x80
 80040de:	d102      	bne.n	80040e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
 80040e0:	2302      	movs	r3, #2
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	e004      	b.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2b70      	cmp	r3, #112	@ 0x70
 80040ea:	d101      	bne.n	80040f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80040ec:	2301      	movs	r3, #1
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 0207 	bic.w	r2, r3, #7
 80040f8:	4909      	ldr	r1, [pc, #36]	@ (8004120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	600b      	str	r3, [r1, #0]
 8004100:	4b07      	ldr	r3, [pc, #28]	@ (8004120 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0307 	and.w	r3, r3, #7
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	429a      	cmp	r2, r3
 800410c:	d001      	beq.n	8004112 <RCC_SetFlashLatencyFromMSIRange+0xae>
 800410e:	2301      	movs	r3, #1
 8004110:	e000      	b.n	8004114 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8004112:	2300      	movs	r3, #0
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40021000 	.word	0x40021000
 8004120:	40022000 	.word	0x40022000

08004124 <HAL_RCCEx_PeriphCLKConfig>:
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	2300      	movs	r3, #0
 800412e:	74fb      	strb	r3, [r7, #19]
 8004130:	2300      	movs	r3, #0
 8004132:	74bb      	strb	r3, [r7, #18]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800413c:	2b00      	cmp	r3, #0
 800413e:	d041      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004144:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004148:	d02a      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800414a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800414e:	d824      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004150:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004154:	d008      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004156:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800415a:	d81e      	bhi.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00a      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004160:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004164:	d010      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004166:	e018      	b.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004168:	4b86      	ldr	r3, [pc, #536]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a85      	ldr	r2, [pc, #532]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800416e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004172:	60d3      	str	r3, [r2, #12]
 8004174:	e015      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	3304      	adds	r3, #4
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fabb 	bl	80046f8 <RCCEx_PLLSAI1_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	74fb      	strb	r3, [r7, #19]
 8004186:	e00c      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	3320      	adds	r3, #32
 800418c:	2100      	movs	r1, #0
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fba6 	bl	80048e0 <RCCEx_PLLSAI2_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	74fb      	strb	r3, [r7, #19]
 8004198:	e003      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800419a:	2301      	movs	r3, #1
 800419c:	74fb      	strb	r3, [r7, #19]
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80041a0:	bf00      	nop
 80041a2:	7cfb      	ldrb	r3, [r7, #19]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10b      	bne.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 80041a8:	4b76      	ldr	r3, [pc, #472]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80041b6:	4973      	ldr	r1, [pc, #460]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80041be:	e001      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80041c0:	7cfb      	ldrb	r3, [r7, #19]
 80041c2:	74bb      	strb	r3, [r7, #18]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d041      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80041d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041d8:	d02a      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80041da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80041de:	d824      	bhi.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041e4:	d008      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80041ea:	d81e      	bhi.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d00a      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80041f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80041f4:	d010      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80041f6:	e018      	b.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80041f8:	4b62      	ldr	r3, [pc, #392]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	4a61      	ldr	r2, [pc, #388]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004202:	60d3      	str	r3, [r2, #12]
 8004204:	e015      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	3304      	adds	r3, #4
 800420a:	2100      	movs	r1, #0
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fa73 	bl	80046f8 <RCCEx_PLLSAI1_Config>
 8004212:	4603      	mov	r3, r0
 8004214:	74fb      	strb	r3, [r7, #19]
 8004216:	e00c      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3320      	adds	r3, #32
 800421c:	2100      	movs	r1, #0
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fb5e 	bl	80048e0 <RCCEx_PLLSAI2_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	74fb      	strb	r3, [r7, #19]
 8004228:	e003      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800422a:	2301      	movs	r3, #1
 800422c:	74fb      	strb	r3, [r7, #19]
 800422e:	e000      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8004230:	bf00      	nop
 8004232:	7cfb      	ldrb	r3, [r7, #19]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10b      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 8004238:	4b52      	ldr	r3, [pc, #328]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800423a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800423e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004246:	494f      	ldr	r1, [pc, #316]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004248:	4313      	orrs	r3, r2
 800424a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800424e:	e001      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8004250:	7cfb      	ldrb	r3, [r7, #19]
 8004252:	74bb      	strb	r3, [r7, #18]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80a0 	beq.w	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004262:	2300      	movs	r3, #0
 8004264:	747b      	strb	r3, [r7, #17]
 8004266:	4b47      	ldr	r3, [pc, #284]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004268:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004272:	2301      	movs	r3, #1
 8004274:	e000      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004276:	2300      	movs	r3, #0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00d      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800427c:	4b41      	ldr	r3, [pc, #260]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800427e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004280:	4a40      	ldr	r2, [pc, #256]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004282:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004286:	6593      	str	r3, [r2, #88]	@ 0x58
 8004288:	4b3e      	ldr	r3, [pc, #248]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800428a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800428c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004290:	60bb      	str	r3, [r7, #8]
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2301      	movs	r3, #1
 8004296:	747b      	strb	r3, [r7, #17]
 8004298:	4b3b      	ldr	r3, [pc, #236]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a3a      	ldr	r2, [pc, #232]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800429e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042a2:	6013      	str	r3, [r2, #0]
 80042a4:	f7fe fdba 	bl	8002e1c <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]
 80042aa:	e009      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80042ac:	f7fe fdb6 	bl	8002e1c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d902      	bls.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80042ba:	2303      	movs	r3, #3
 80042bc:	74fb      	strb	r3, [r7, #19]
 80042be:	e005      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80042c0:	4b31      	ldr	r3, [pc, #196]	@ (8004388 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d0ef      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x188>
 80042cc:	7cfb      	ldrb	r3, [r7, #19]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d15c      	bne.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x268>
 80042d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d01f      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d019      	beq.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80042f0:	4b24      	ldr	r3, [pc, #144]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042fa:	617b      	str	r3, [r7, #20]
 80042fc:	4b21      	ldr	r3, [pc, #132]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80042fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004302:	4a20      	ldr	r2, [pc, #128]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004308:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800430c:	4b1d      	ldr	r3, [pc, #116]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004312:	4a1c      	ldr	r2, [pc, #112]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004314:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004318:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800431c:	4a19      	ldr	r2, [pc, #100]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800432e:	f7fe fd75 	bl	8002e1c <HAL_GetTick>
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	e00b      	b.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004336:	f7fe fd71 	bl	8002e1c <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004344:	4293      	cmp	r3, r2
 8004346:	d902      	bls.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8004348:	2303      	movs	r3, #3
 800434a:	74fb      	strb	r3, [r7, #19]
 800434c:	e006      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x238>
 800434e:	4b0d      	ldr	r3, [pc, #52]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d0ec      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800435c:	7cfb      	ldrb	r3, [r7, #19]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d10c      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x258>
 8004362:	4b08      	ldr	r3, [pc, #32]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004364:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004368:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004372:	4904      	ldr	r1, [pc, #16]	@ (8004384 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800437a:	e009      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800437c:	7cfb      	ldrb	r3, [r7, #19]
 800437e:	74bb      	strb	r3, [r7, #18]
 8004380:	e006      	b.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004382:	bf00      	nop
 8004384:	40021000 	.word	0x40021000
 8004388:	40007000 	.word	0x40007000
 800438c:	7cfb      	ldrb	r3, [r7, #19]
 800438e:	74bb      	strb	r3, [r7, #18]
 8004390:	7c7b      	ldrb	r3, [r7, #17]
 8004392:	2b01      	cmp	r3, #1
 8004394:	d105      	bne.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004396:	4b9e      	ldr	r3, [pc, #632]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439a:	4a9d      	ldr	r2, [pc, #628]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800439c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00a      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 80043ae:	4b98      	ldr	r3, [pc, #608]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b4:	f023 0203 	bic.w	r2, r3, #3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043bc:	4994      	ldr	r1, [pc, #592]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d00a      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80043d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043d6:	f023 020c 	bic.w	r2, r3, #12
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043de:	498c      	ldr	r1, [pc, #560]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00a      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80043f2:	4b87      	ldr	r3, [pc, #540]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80043f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004400:	4983      	ldr	r1, [pc, #524]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004402:	4313      	orrs	r3, r2
 8004404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00a      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x306>
 8004414:	4b7e      	ldr	r3, [pc, #504]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004422:	497b      	ldr	r1, [pc, #492]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0310 	and.w	r3, r3, #16
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8004436:	4b76      	ldr	r3, [pc, #472]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800443c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004444:	4972      	ldr	r1, [pc, #456]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004446:	4313      	orrs	r3, r2
 8004448:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0320 	and.w	r3, r3, #32
 8004454:	2b00      	cmp	r3, #0
 8004456:	d00a      	beq.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004458:	4b6d      	ldr	r3, [pc, #436]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004466:	496a      	ldr	r1, [pc, #424]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00a      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800447a:	4b65      	ldr	r3, [pc, #404]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800447c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004480:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004488:	4961      	ldr	r1, [pc, #388]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800448a:	4313      	orrs	r3, r2
 800448c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00a      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800449c:	4b5c      	ldr	r3, [pc, #368]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044aa:	4959      	ldr	r1, [pc, #356]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d00a      	beq.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80044be:	4b54      	ldr	r3, [pc, #336]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044cc:	4950      	ldr	r1, [pc, #320]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d00a      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80044e0:	4b4b      	ldr	r3, [pc, #300]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ee:	4948      	ldr	r1, [pc, #288]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00a      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 8004502:	4b43      	ldr	r3, [pc, #268]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004504:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004508:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004510:	493f      	ldr	r1, [pc, #252]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004512:	4313      	orrs	r3, r2
 8004514:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004520:	2b00      	cmp	r3, #0
 8004522:	d028      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004524:	4b3a      	ldr	r3, [pc, #232]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004532:	4937      	ldr	r1, [pc, #220]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800453e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004542:	d106      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004544:	4b32      	ldr	r3, [pc, #200]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	4a31      	ldr	r2, [pc, #196]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800454a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800454e:	60d3      	str	r3, [r2, #12]
 8004550:	e011      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004556:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800455a:	d10c      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3304      	adds	r3, #4
 8004560:	2101      	movs	r1, #1
 8004562:	4618      	mov	r0, r3
 8004564:	f000 f8c8 	bl	80046f8 <RCCEx_PLLSAI1_Config>
 8004568:	4603      	mov	r3, r0
 800456a:	74fb      	strb	r3, [r7, #19]
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x452>
 8004572:	7cfb      	ldrb	r3, [r7, #19]
 8004574:	74bb      	strb	r3, [r7, #18]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d028      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004582:	4b23      	ldr	r3, [pc, #140]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004584:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004588:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004590:	491f      	ldr	r1, [pc, #124]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004592:	4313      	orrs	r3, r2
 8004594:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800459c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045a0:	d106      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80045a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	68db      	ldr	r3, [r3, #12]
 80045a6:	4a1a      	ldr	r2, [pc, #104]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045ac:	60d3      	str	r3, [r2, #12]
 80045ae:	e011      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80045b8:	d10c      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3304      	adds	r3, #4
 80045be:	2101      	movs	r1, #1
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 f899 	bl	80046f8 <RCCEx_PLLSAI1_Config>
 80045c6:	4603      	mov	r3, r0
 80045c8:	74fb      	strb	r3, [r7, #19]
 80045ca:	7cfb      	ldrb	r3, [r7, #19]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80045d0:	7cfb      	ldrb	r3, [r7, #19]
 80045d2:	74bb      	strb	r3, [r7, #18]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d02b      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80045e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045ee:	4908      	ldr	r1, [pc, #32]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80045fe:	d109      	bne.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004600:	4b03      	ldr	r3, [pc, #12]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004602:	68db      	ldr	r3, [r3, #12]
 8004604:	4a02      	ldr	r2, [pc, #8]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004606:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800460a:	60d3      	str	r3, [r2, #12]
 800460c:	e014      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800460e:	bf00      	nop
 8004610:	40021000 	.word	0x40021000
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004618:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800461c:	d10c      	bne.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3304      	adds	r3, #4
 8004622:	2101      	movs	r1, #1
 8004624:	4618      	mov	r0, r3
 8004626:	f000 f867 	bl	80046f8 <RCCEx_PLLSAI1_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	74fb      	strb	r3, [r7, #19]
 800462e:	7cfb      	ldrb	r3, [r7, #19]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d001      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004634:	7cfb      	ldrb	r3, [r7, #19]
 8004636:	74bb      	strb	r3, [r7, #18]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004640:	2b00      	cmp	r3, #0
 8004642:	d02f      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8004644:	4b2b      	ldr	r3, [pc, #172]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800464a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004652:	4928      	ldr	r1, [pc, #160]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800465e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004662:	d10d      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3304      	adds	r3, #4
 8004668:	2102      	movs	r1, #2
 800466a:	4618      	mov	r0, r3
 800466c:	f000 f844 	bl	80046f8 <RCCEx_PLLSAI1_Config>
 8004670:	4603      	mov	r3, r0
 8004672:	74fb      	strb	r3, [r7, #19]
 8004674:	7cfb      	ldrb	r3, [r7, #19]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d014      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	74bb      	strb	r3, [r7, #18]
 800467e:	e011      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004684:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004688:	d10c      	bne.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3320      	adds	r3, #32
 800468e:	2102      	movs	r1, #2
 8004690:	4618      	mov	r0, r3
 8004692:	f000 f925 	bl	80048e0 <RCCEx_PLLSAI2_Config>
 8004696:	4603      	mov	r3, r0
 8004698:	74fb      	strb	r3, [r7, #19]
 800469a:	7cfb      	ldrb	r3, [r7, #19]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d001      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x580>
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	74bb      	strb	r3, [r7, #18]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00a      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80046b0:	4b10      	ldr	r3, [pc, #64]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80046be:	490d      	ldr	r1, [pc, #52]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
 80046d2:	4b08      	ldr	r3, [pc, #32]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046d8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80046e2:	4904      	ldr	r1, [pc, #16]	@ (80046f4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80046ea:	7cbb      	ldrb	r3, [r7, #18]
 80046ec:	4618      	mov	r0, r3
 80046ee:	3718      	adds	r7, #24
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	40021000 	.word	0x40021000

080046f8 <RCCEx_PLLSAI1_Config>:
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
 8004702:	2300      	movs	r3, #0
 8004704:	73fb      	strb	r3, [r7, #15]
 8004706:	4b75      	ldr	r3, [pc, #468]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d018      	beq.n	8004744 <RCCEx_PLLSAI1_Config+0x4c>
 8004712:	4b72      	ldr	r3, [pc, #456]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	f003 0203 	and.w	r2, r3, #3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	429a      	cmp	r2, r3
 8004720:	d10d      	bne.n	800473e <RCCEx_PLLSAI1_Config+0x46>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d009      	beq.n	800473e <RCCEx_PLLSAI1_Config+0x46>
 800472a:	4b6c      	ldr	r3, [pc, #432]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	091b      	lsrs	r3, r3, #4
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d047      	beq.n	80047ce <RCCEx_PLLSAI1_Config+0xd6>
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
 8004742:	e044      	b.n	80047ce <RCCEx_PLLSAI1_Config+0xd6>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d018      	beq.n	800477e <RCCEx_PLLSAI1_Config+0x86>
 800474c:	2b03      	cmp	r3, #3
 800474e:	d825      	bhi.n	800479c <RCCEx_PLLSAI1_Config+0xa4>
 8004750:	2b01      	cmp	r3, #1
 8004752:	d002      	beq.n	800475a <RCCEx_PLLSAI1_Config+0x62>
 8004754:	2b02      	cmp	r3, #2
 8004756:	d009      	beq.n	800476c <RCCEx_PLLSAI1_Config+0x74>
 8004758:	e020      	b.n	800479c <RCCEx_PLLSAI1_Config+0xa4>
 800475a:	4b60      	ldr	r3, [pc, #384]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d11d      	bne.n	80047a2 <RCCEx_PLLSAI1_Config+0xaa>
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
 800476a:	e01a      	b.n	80047a2 <RCCEx_PLLSAI1_Config+0xaa>
 800476c:	4b5b      	ldr	r3, [pc, #364]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d116      	bne.n	80047a6 <RCCEx_PLLSAI1_Config+0xae>
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	e013      	b.n	80047a6 <RCCEx_PLLSAI1_Config+0xae>
 800477e:	4b57      	ldr	r3, [pc, #348]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0xb2>
 800478a:	4b54      	ldr	r3, [pc, #336]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <RCCEx_PLLSAI1_Config+0xb2>
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
 800479a:	e006      	b.n	80047aa <RCCEx_PLLSAI1_Config+0xb2>
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
 80047a0:	e004      	b.n	80047ac <RCCEx_PLLSAI1_Config+0xb4>
 80047a2:	bf00      	nop
 80047a4:	e002      	b.n	80047ac <RCCEx_PLLSAI1_Config+0xb4>
 80047a6:	bf00      	nop
 80047a8:	e000      	b.n	80047ac <RCCEx_PLLSAI1_Config+0xb4>
 80047aa:	bf00      	nop
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10d      	bne.n	80047ce <RCCEx_PLLSAI1_Config+0xd6>
 80047b2:	4b4a      	ldr	r3, [pc, #296]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6819      	ldr	r1, [r3, #0]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	011b      	lsls	r3, r3, #4
 80047c6:	430b      	orrs	r3, r1
 80047c8:	4944      	ldr	r1, [pc, #272]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60cb      	str	r3, [r1, #12]
 80047ce:	7bfb      	ldrb	r3, [r7, #15]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d17d      	bne.n	80048d0 <RCCEx_PLLSAI1_Config+0x1d8>
 80047d4:	4b41      	ldr	r3, [pc, #260]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a40      	ldr	r2, [pc, #256]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80047da:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80047de:	6013      	str	r3, [r2, #0]
 80047e0:	f7fe fb1c 	bl	8002e1c <HAL_GetTick>
 80047e4:	60b8      	str	r0, [r7, #8]
 80047e6:	e009      	b.n	80047fc <RCCEx_PLLSAI1_Config+0x104>
 80047e8:	f7fe fb18 	bl	8002e1c <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b02      	cmp	r3, #2
 80047f4:	d902      	bls.n	80047fc <RCCEx_PLLSAI1_Config+0x104>
 80047f6:	2303      	movs	r3, #3
 80047f8:	73fb      	strb	r3, [r7, #15]
 80047fa:	e005      	b.n	8004808 <RCCEx_PLLSAI1_Config+0x110>
 80047fc:	4b37      	ldr	r3, [pc, #220]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1ef      	bne.n	80047e8 <RCCEx_PLLSAI1_Config+0xf0>
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d160      	bne.n	80048d0 <RCCEx_PLLSAI1_Config+0x1d8>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d111      	bne.n	8004838 <RCCEx_PLLSAI1_Config+0x140>
 8004814:	4b31      	ldr	r3, [pc, #196]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800481c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6892      	ldr	r2, [r2, #8]
 8004824:	0211      	lsls	r1, r2, #8
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	68d2      	ldr	r2, [r2, #12]
 800482a:	0912      	lsrs	r2, r2, #4
 800482c:	0452      	lsls	r2, r2, #17
 800482e:	430a      	orrs	r2, r1
 8004830:	492a      	ldr	r1, [pc, #168]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004832:	4313      	orrs	r3, r2
 8004834:	610b      	str	r3, [r1, #16]
 8004836:	e027      	b.n	8004888 <RCCEx_PLLSAI1_Config+0x190>
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d112      	bne.n	8004864 <RCCEx_PLLSAI1_Config+0x16c>
 800483e:	4b27      	ldr	r3, [pc, #156]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004846:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6892      	ldr	r2, [r2, #8]
 800484e:	0211      	lsls	r1, r2, #8
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6912      	ldr	r2, [r2, #16]
 8004854:	0852      	lsrs	r2, r2, #1
 8004856:	3a01      	subs	r2, #1
 8004858:	0552      	lsls	r2, r2, #21
 800485a:	430a      	orrs	r2, r1
 800485c:	491f      	ldr	r1, [pc, #124]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800485e:	4313      	orrs	r3, r2
 8004860:	610b      	str	r3, [r1, #16]
 8004862:	e011      	b.n	8004888 <RCCEx_PLLSAI1_Config+0x190>
 8004864:	4b1d      	ldr	r3, [pc, #116]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800486c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	6892      	ldr	r2, [r2, #8]
 8004874:	0211      	lsls	r1, r2, #8
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6952      	ldr	r2, [r2, #20]
 800487a:	0852      	lsrs	r2, r2, #1
 800487c:	3a01      	subs	r2, #1
 800487e:	0652      	lsls	r2, r2, #25
 8004880:	430a      	orrs	r2, r1
 8004882:	4916      	ldr	r1, [pc, #88]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004884:	4313      	orrs	r3, r2
 8004886:	610b      	str	r3, [r1, #16]
 8004888:	4b14      	ldr	r3, [pc, #80]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a13      	ldr	r2, [pc, #76]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 800488e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	f7fe fac2 	bl	8002e1c <HAL_GetTick>
 8004898:	60b8      	str	r0, [r7, #8]
 800489a:	e009      	b.n	80048b0 <RCCEx_PLLSAI1_Config+0x1b8>
 800489c:	f7fe fabe 	bl	8002e1c <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d902      	bls.n	80048b0 <RCCEx_PLLSAI1_Config+0x1b8>
 80048aa:	2303      	movs	r3, #3
 80048ac:	73fb      	strb	r3, [r7, #15]
 80048ae:	e005      	b.n	80048bc <RCCEx_PLLSAI1_Config+0x1c4>
 80048b0:	4b0a      	ldr	r3, [pc, #40]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d0ef      	beq.n	800489c <RCCEx_PLLSAI1_Config+0x1a4>
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <RCCEx_PLLSAI1_Config+0x1d8>
 80048c2:	4b06      	ldr	r3, [pc, #24]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048c4:	691a      	ldr	r2, [r3, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	4904      	ldr	r1, [pc, #16]	@ (80048dc <RCCEx_PLLSAI1_Config+0x1e4>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	610b      	str	r3, [r1, #16]
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	4618      	mov	r0, r3
 80048d4:	3710      	adds	r7, #16
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000

080048e0 <RCCEx_PLLSAI2_Config>:
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
 80048ea:	2300      	movs	r3, #0
 80048ec:	73fb      	strb	r3, [r7, #15]
 80048ee:	4b6a      	ldr	r3, [pc, #424]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d018      	beq.n	800492c <RCCEx_PLLSAI2_Config+0x4c>
 80048fa:	4b67      	ldr	r3, [pc, #412]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0203 	and.w	r2, r3, #3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d10d      	bne.n	8004926 <RCCEx_PLLSAI2_Config+0x46>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <RCCEx_PLLSAI2_Config+0x46>
 8004912:	4b61      	ldr	r3, [pc, #388]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	091b      	lsrs	r3, r3, #4
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d047      	beq.n	80049b6 <RCCEx_PLLSAI2_Config+0xd6>
 8004926:	2301      	movs	r3, #1
 8004928:	73fb      	strb	r3, [r7, #15]
 800492a:	e044      	b.n	80049b6 <RCCEx_PLLSAI2_Config+0xd6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d018      	beq.n	8004966 <RCCEx_PLLSAI2_Config+0x86>
 8004934:	2b03      	cmp	r3, #3
 8004936:	d825      	bhi.n	8004984 <RCCEx_PLLSAI2_Config+0xa4>
 8004938:	2b01      	cmp	r3, #1
 800493a:	d002      	beq.n	8004942 <RCCEx_PLLSAI2_Config+0x62>
 800493c:	2b02      	cmp	r3, #2
 800493e:	d009      	beq.n	8004954 <RCCEx_PLLSAI2_Config+0x74>
 8004940:	e020      	b.n	8004984 <RCCEx_PLLSAI2_Config+0xa4>
 8004942:	4b55      	ldr	r3, [pc, #340]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d11d      	bne.n	800498a <RCCEx_PLLSAI2_Config+0xaa>
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
 8004952:	e01a      	b.n	800498a <RCCEx_PLLSAI2_Config+0xaa>
 8004954:	4b50      	ldr	r3, [pc, #320]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495c:	2b00      	cmp	r3, #0
 800495e:	d116      	bne.n	800498e <RCCEx_PLLSAI2_Config+0xae>
 8004960:	2301      	movs	r3, #1
 8004962:	73fb      	strb	r3, [r7, #15]
 8004964:	e013      	b.n	800498e <RCCEx_PLLSAI2_Config+0xae>
 8004966:	4b4c      	ldr	r3, [pc, #304]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d10f      	bne.n	8004992 <RCCEx_PLLSAI2_Config+0xb2>
 8004972:	4b49      	ldr	r3, [pc, #292]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <RCCEx_PLLSAI2_Config+0xb2>
 800497e:	2301      	movs	r3, #1
 8004980:	73fb      	strb	r3, [r7, #15]
 8004982:	e006      	b.n	8004992 <RCCEx_PLLSAI2_Config+0xb2>
 8004984:	2301      	movs	r3, #1
 8004986:	73fb      	strb	r3, [r7, #15]
 8004988:	e004      	b.n	8004994 <RCCEx_PLLSAI2_Config+0xb4>
 800498a:	bf00      	nop
 800498c:	e002      	b.n	8004994 <RCCEx_PLLSAI2_Config+0xb4>
 800498e:	bf00      	nop
 8004990:	e000      	b.n	8004994 <RCCEx_PLLSAI2_Config+0xb4>
 8004992:	bf00      	nop
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10d      	bne.n	80049b6 <RCCEx_PLLSAI2_Config+0xd6>
 800499a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 800499c:	68db      	ldr	r3, [r3, #12]
 800499e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6819      	ldr	r1, [r3, #0]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	011b      	lsls	r3, r3, #4
 80049ae:	430b      	orrs	r3, r1
 80049b0:	4939      	ldr	r1, [pc, #228]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60cb      	str	r3, [r1, #12]
 80049b6:	7bfb      	ldrb	r3, [r7, #15]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d167      	bne.n	8004a8c <RCCEx_PLLSAI2_Config+0x1ac>
 80049bc:	4b36      	ldr	r3, [pc, #216]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a35      	ldr	r2, [pc, #212]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80049c6:	6013      	str	r3, [r2, #0]
 80049c8:	f7fe fa28 	bl	8002e1c <HAL_GetTick>
 80049cc:	60b8      	str	r0, [r7, #8]
 80049ce:	e009      	b.n	80049e4 <RCCEx_PLLSAI2_Config+0x104>
 80049d0:	f7fe fa24 	bl	8002e1c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d902      	bls.n	80049e4 <RCCEx_PLLSAI2_Config+0x104>
 80049de:	2303      	movs	r3, #3
 80049e0:	73fb      	strb	r3, [r7, #15]
 80049e2:	e005      	b.n	80049f0 <RCCEx_PLLSAI2_Config+0x110>
 80049e4:	4b2c      	ldr	r3, [pc, #176]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d1ef      	bne.n	80049d0 <RCCEx_PLLSAI2_Config+0xf0>
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d14a      	bne.n	8004a8c <RCCEx_PLLSAI2_Config+0x1ac>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d111      	bne.n	8004a20 <RCCEx_PLLSAI2_Config+0x140>
 80049fc:	4b26      	ldr	r3, [pc, #152]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	6892      	ldr	r2, [r2, #8]
 8004a0c:	0211      	lsls	r1, r2, #8
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	68d2      	ldr	r2, [r2, #12]
 8004a12:	0912      	lsrs	r2, r2, #4
 8004a14:	0452      	lsls	r2, r2, #17
 8004a16:	430a      	orrs	r2, r1
 8004a18:	491f      	ldr	r1, [pc, #124]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	614b      	str	r3, [r1, #20]
 8004a1e:	e011      	b.n	8004a44 <RCCEx_PLLSAI2_Config+0x164>
 8004a20:	4b1d      	ldr	r3, [pc, #116]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a28:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a2c:	687a      	ldr	r2, [r7, #4]
 8004a2e:	6892      	ldr	r2, [r2, #8]
 8004a30:	0211      	lsls	r1, r2, #8
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6912      	ldr	r2, [r2, #16]
 8004a36:	0852      	lsrs	r2, r2, #1
 8004a38:	3a01      	subs	r2, #1
 8004a3a:	0652      	lsls	r2, r2, #25
 8004a3c:	430a      	orrs	r2, r1
 8004a3e:	4916      	ldr	r1, [pc, #88]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	614b      	str	r3, [r1, #20]
 8004a44:	4b14      	ldr	r3, [pc, #80]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a13      	ldr	r2, [pc, #76]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	f7fe f9e4 	bl	8002e1c <HAL_GetTick>
 8004a54:	60b8      	str	r0, [r7, #8]
 8004a56:	e009      	b.n	8004a6c <RCCEx_PLLSAI2_Config+0x18c>
 8004a58:	f7fe f9e0 	bl	8002e1c <HAL_GetTick>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	1ad3      	subs	r3, r2, r3
 8004a62:	2b02      	cmp	r3, #2
 8004a64:	d902      	bls.n	8004a6c <RCCEx_PLLSAI2_Config+0x18c>
 8004a66:	2303      	movs	r3, #3
 8004a68:	73fb      	strb	r3, [r7, #15]
 8004a6a:	e005      	b.n	8004a78 <RCCEx_PLLSAI2_Config+0x198>
 8004a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d0ef      	beq.n	8004a58 <RCCEx_PLLSAI2_Config+0x178>
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d106      	bne.n	8004a8c <RCCEx_PLLSAI2_Config+0x1ac>
 8004a7e:	4b06      	ldr	r3, [pc, #24]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a80:	695a      	ldr	r2, [r3, #20]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	4904      	ldr	r1, [pc, #16]	@ (8004a98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	614b      	str	r3, [r1, #20]
 8004a8c:	7bfb      	ldrb	r3, [r7, #15]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	40021000 	.word	0x40021000

08004a9c <HAL_TIM_Base_Init>:
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_TIM_Base_Init+0x12>
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e049      	b.n	8004b42 <HAL_TIM_Base_Init+0xa6>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_TIM_Base_Init+0x2c>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f841 	bl	8004b4a <HAL_TIM_Base_MspInit>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2202      	movs	r2, #2
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4619      	mov	r1, r3
 8004ada:	4610      	mov	r0, r2
 8004adc:	f000 fbe2 	bl	80052a4 <TIM_Base_SetConfig>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2201      	movs	r2, #1
 8004af4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b40:	2300      	movs	r3, #0
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}

08004b4a <HAL_TIM_Base_MspInit>:
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_TIM_Base_Start_IT>:
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d001      	beq.n	8004b78 <HAL_TIM_Base_Start_IT+0x18>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e04f      	b.n	8004c18 <HAL_TIM_Base_Start_IT+0xb8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f042 0201 	orr.w	r2, r2, #1
 8004b8e:	60da      	str	r2, [r3, #12]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a23      	ldr	r2, [pc, #140]	@ (8004c24 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01d      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0x76>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ba2:	d018      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0x76>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c28 <HAL_TIM_Base_Start_IT+0xc8>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d013      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0x76>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c2c <HAL_TIM_Base_Start_IT+0xcc>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00e      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0x76>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a1c      	ldr	r2, [pc, #112]	@ (8004c30 <HAL_TIM_Base_Start_IT+0xd0>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d009      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0x76>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c34 <HAL_TIM_Base_Start_IT+0xd4>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d004      	beq.n	8004bd6 <HAL_TIM_Base_Start_IT+0x76>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a19      	ldr	r2, [pc, #100]	@ (8004c38 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d115      	bne.n	8004c02 <HAL_TIM_Base_Start_IT+0xa2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	4b17      	ldr	r3, [pc, #92]	@ (8004c3c <HAL_TIM_Base_Start_IT+0xdc>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b06      	cmp	r3, #6
 8004be6:	d015      	beq.n	8004c14 <HAL_TIM_Base_Start_IT+0xb4>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bee:	d011      	beq.n	8004c14 <HAL_TIM_Base_Start_IT+0xb4>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0201 	orr.w	r2, r2, #1
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e008      	b.n	8004c14 <HAL_TIM_Base_Start_IT+0xb4>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f042 0201 	orr.w	r2, r2, #1
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	e000      	b.n	8004c16 <HAL_TIM_Base_Start_IT+0xb6>
 8004c14:	bf00      	nop
 8004c16:	2300      	movs	r3, #0
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3714      	adds	r7, #20
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr
 8004c24:	40012c00 	.word	0x40012c00
 8004c28:	40000400 	.word	0x40000400
 8004c2c:	40000800 	.word	0x40000800
 8004c30:	40000c00 	.word	0x40000c00
 8004c34:	40013400 	.word	0x40013400
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	00010007 	.word	0x00010007

08004c40 <HAL_TIM_PWM_Init>:
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_TIM_PWM_Init+0x12>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e049      	b.n	8004ce6 <HAL_TIM_PWM_Init+0xa6>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_TIM_PWM_Init+0x2c>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fd fe22 	bl	80028b0 <HAL_TIM_PWM_MspInit>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3304      	adds	r3, #4
 8004c7c:	4619      	mov	r1, r3
 8004c7e:	4610      	mov	r0, r2
 8004c80:	f000 fb10 	bl	80052a4 <TIM_Base_SetConfig>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3708      	adds	r7, #8
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <HAL_TIM_PWM_Stop>:
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	6839      	ldr	r1, [r7, #0]
 8004d02:	4618      	mov	r0, r3
 8004d04:	f000 fe4a 	bl	800599c <TIM_CCxChannelCmd>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a3e      	ldr	r2, [pc, #248]	@ (8004e08 <HAL_TIM_PWM_Stop+0x118>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d013      	beq.n	8004d3a <HAL_TIM_PWM_Stop+0x4a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a3d      	ldr	r2, [pc, #244]	@ (8004e0c <HAL_TIM_PWM_Stop+0x11c>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d00e      	beq.n	8004d3a <HAL_TIM_PWM_Stop+0x4a>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a3b      	ldr	r2, [pc, #236]	@ (8004e10 <HAL_TIM_PWM_Stop+0x120>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d009      	beq.n	8004d3a <HAL_TIM_PWM_Stop+0x4a>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a3a      	ldr	r2, [pc, #232]	@ (8004e14 <HAL_TIM_PWM_Stop+0x124>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d004      	beq.n	8004d3a <HAL_TIM_PWM_Stop+0x4a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a38      	ldr	r2, [pc, #224]	@ (8004e18 <HAL_TIM_PWM_Stop+0x128>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d101      	bne.n	8004d3e <HAL_TIM_PWM_Stop+0x4e>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e000      	b.n	8004d40 <HAL_TIM_PWM_Stop+0x50>
 8004d3e:	2300      	movs	r3, #0
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d017      	beq.n	8004d74 <HAL_TIM_PWM_Stop+0x84>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6a1a      	ldr	r2, [r3, #32]
 8004d4a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d4e:	4013      	ands	r3, r2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10f      	bne.n	8004d74 <HAL_TIM_PWM_Stop+0x84>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6a1a      	ldr	r2, [r3, #32]
 8004d5a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d5e:	4013      	ands	r3, r2
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d107      	bne.n	8004d74 <HAL_TIM_PWM_Stop+0x84>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d72:	645a      	str	r2, [r3, #68]	@ 0x44
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	6a1a      	ldr	r2, [r3, #32]
 8004d7a:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10f      	bne.n	8004da4 <HAL_TIM_PWM_Stop+0xb4>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6a1a      	ldr	r2, [r3, #32]
 8004d8a:	f240 4344 	movw	r3, #1092	@ 0x444
 8004d8e:	4013      	ands	r3, r2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d107      	bne.n	8004da4 <HAL_TIM_PWM_Stop+0xb4>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d104      	bne.n	8004db4 <HAL_TIM_PWM_Stop+0xc4>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004db2:	e023      	b.n	8004dfc <HAL_TIM_PWM_Stop+0x10c>
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	2b04      	cmp	r3, #4
 8004db8:	d104      	bne.n	8004dc4 <HAL_TIM_PWM_Stop+0xd4>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dc2:	e01b      	b.n	8004dfc <HAL_TIM_PWM_Stop+0x10c>
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d104      	bne.n	8004dd4 <HAL_TIM_PWM_Stop+0xe4>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dd2:	e013      	b.n	8004dfc <HAL_TIM_PWM_Stop+0x10c>
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	2b0c      	cmp	r3, #12
 8004dd8:	d104      	bne.n	8004de4 <HAL_TIM_PWM_Stop+0xf4>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2201      	movs	r2, #1
 8004dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004de2:	e00b      	b.n	8004dfc <HAL_TIM_PWM_Stop+0x10c>
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	2b10      	cmp	r3, #16
 8004de8:	d104      	bne.n	8004df4 <HAL_TIM_PWM_Stop+0x104>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	2201      	movs	r2, #1
 8004dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004df2:	e003      	b.n	8004dfc <HAL_TIM_PWM_Stop+0x10c>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3708      	adds	r7, #8
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40013400 	.word	0x40013400
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800

08004e1c <HAL_TIM_IRQHandler>:
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b084      	sub	sp, #16
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	60fb      	str	r3, [r7, #12]
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	60bb      	str	r3, [r7, #8]
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d020      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x64>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d01b      	beq.n	8004e80 <HAL_TIM_IRQHandler+0x64>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f06f 0202 	mvn.w	r2, #2
 8004e50:	611a      	str	r2, [r3, #16]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	771a      	strb	r2, [r3, #28]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	f003 0303 	and.w	r3, r3, #3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <HAL_TIM_IRQHandler+0x52>
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 f9fe 	bl	8005268 <HAL_TIM_IC_CaptureCallback>
 8004e6c:	e005      	b.n	8004e7a <HAL_TIM_IRQHandler+0x5e>
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f9f0 	bl	8005254 <HAL_TIM_OC_DelayElapsedCallback>
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fa01 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	771a      	strb	r2, [r3, #28]
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	f003 0304 	and.w	r3, r3, #4
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d020      	beq.n	8004ecc <HAL_TIM_IRQHandler+0xb0>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f003 0304 	and.w	r3, r3, #4
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d01b      	beq.n	8004ecc <HAL_TIM_IRQHandler+0xb0>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f06f 0204 	mvn.w	r2, #4
 8004e9c:	611a      	str	r2, [r3, #16]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	771a      	strb	r2, [r3, #28]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_TIM_IRQHandler+0x9e>
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f9d8 	bl	8005268 <HAL_TIM_IC_CaptureCallback>
 8004eb8:	e005      	b.n	8004ec6 <HAL_TIM_IRQHandler+0xaa>
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f9ca 	bl	8005254 <HAL_TIM_OC_DelayElapsedCallback>
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f000 f9db 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2200      	movs	r2, #0
 8004eca:	771a      	strb	r2, [r3, #28]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d020      	beq.n	8004f18 <HAL_TIM_IRQHandler+0xfc>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f003 0308 	and.w	r3, r3, #8
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01b      	beq.n	8004f18 <HAL_TIM_IRQHandler+0xfc>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f06f 0208 	mvn.w	r2, #8
 8004ee8:	611a      	str	r2, [r3, #16]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2204      	movs	r2, #4
 8004eee:	771a      	strb	r2, [r3, #28]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	69db      	ldr	r3, [r3, #28]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d003      	beq.n	8004f06 <HAL_TIM_IRQHandler+0xea>
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 f9b2 	bl	8005268 <HAL_TIM_IC_CaptureCallback>
 8004f04:	e005      	b.n	8004f12 <HAL_TIM_IRQHandler+0xf6>
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f9a4 	bl	8005254 <HAL_TIM_OC_DelayElapsedCallback>
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 f9b5 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	771a      	strb	r2, [r3, #28]
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	f003 0310 	and.w	r3, r3, #16
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d020      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x148>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d01b      	beq.n	8004f64 <HAL_TIM_IRQHandler+0x148>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f06f 0210 	mvn.w	r2, #16
 8004f34:	611a      	str	r2, [r3, #16]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2208      	movs	r2, #8
 8004f3a:	771a      	strb	r2, [r3, #28]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_TIM_IRQHandler+0x136>
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f98c 	bl	8005268 <HAL_TIM_IC_CaptureCallback>
 8004f50:	e005      	b.n	8004f5e <HAL_TIM_IRQHandler+0x142>
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f97e 	bl	8005254 <HAL_TIM_OC_DelayElapsedCallback>
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 f98f 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	771a      	strb	r2, [r3, #28]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00c      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x16c>
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 0301 	and.w	r3, r3, #1
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d007      	beq.n	8004f88 <HAL_TIM_IRQHandler+0x16c>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f06f 0201 	mvn.w	r2, #1
 8004f80:	611a      	str	r2, [r3, #16]
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fd fc54 	bl	8002830 <HAL_TIM_PeriodElapsedCallback>
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d104      	bne.n	8004f9c <HAL_TIM_IRQHandler+0x180>
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d00c      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0x19a>
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d007      	beq.n	8004fb6 <HAL_TIM_IRQHandler+0x19a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004fae:	611a      	str	r2, [r3, #16]
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fe29 	bl	8005c08 <HAL_TIMEx_BreakCallback>
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d00c      	beq.n	8004fda <HAL_TIM_IRQHandler+0x1be>
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <HAL_TIM_IRQHandler+0x1be>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004fd2:	611a      	str	r2, [r3, #16]
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 fe21 	bl	8005c1c <HAL_TIMEx_Break2Callback>
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00c      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x1e2>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d007      	beq.n	8004ffe <HAL_TIM_IRQHandler+0x1e2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ff6:	611a      	str	r2, [r3, #16]
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f949 	bl	8005290 <HAL_TIM_TriggerCallback>
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	f003 0320 	and.w	r3, r3, #32
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00c      	beq.n	8005022 <HAL_TIM_IRQHandler+0x206>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <HAL_TIM_IRQHandler+0x206>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f06f 0220 	mvn.w	r2, #32
 800501a:	611a      	str	r2, [r3, #16]
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 fde9 	bl	8005bf4 <HAL_TIMEx_CommutCallback>
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
	...

0800502c <HAL_TIM_PWM_ConfigChannel>:
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	2300      	movs	r3, #0
 800503a:	75fb      	strb	r3, [r7, #23]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005046:	2302      	movs	r3, #2
 8005048:	e0ff      	b.n	800524a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b14      	cmp	r3, #20
 8005056:	f200 80f0 	bhi.w	800523a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800505a:	a201      	add	r2, pc, #4	@ (adr r2, 8005060 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800505c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005060:	080050b5 	.word	0x080050b5
 8005064:	0800523b 	.word	0x0800523b
 8005068:	0800523b 	.word	0x0800523b
 800506c:	0800523b 	.word	0x0800523b
 8005070:	080050f5 	.word	0x080050f5
 8005074:	0800523b 	.word	0x0800523b
 8005078:	0800523b 	.word	0x0800523b
 800507c:	0800523b 	.word	0x0800523b
 8005080:	08005137 	.word	0x08005137
 8005084:	0800523b 	.word	0x0800523b
 8005088:	0800523b 	.word	0x0800523b
 800508c:	0800523b 	.word	0x0800523b
 8005090:	08005177 	.word	0x08005177
 8005094:	0800523b 	.word	0x0800523b
 8005098:	0800523b 	.word	0x0800523b
 800509c:	0800523b 	.word	0x0800523b
 80050a0:	080051b9 	.word	0x080051b9
 80050a4:	0800523b 	.word	0x0800523b
 80050a8:	0800523b 	.word	0x0800523b
 80050ac:	0800523b 	.word	0x0800523b
 80050b0:	080051f9 	.word	0x080051f9
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f000 f998 	bl	80053f0 <TIM_OC1_SetConfig>
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0208 	orr.w	r2, r2, #8
 80050ce:	619a      	str	r2, [r3, #24]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	699a      	ldr	r2, [r3, #24]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0204 	bic.w	r2, r2, #4
 80050de:	619a      	str	r2, [r3, #24]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	6999      	ldr	r1, [r3, #24]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	691a      	ldr	r2, [r3, #16]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	430a      	orrs	r2, r1
 80050f0:	619a      	str	r2, [r3, #24]
 80050f2:	e0a5      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x214>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fa08 	bl	8005510 <TIM_OC2_SetConfig>
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800510e:	619a      	str	r2, [r3, #24]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699a      	ldr	r2, [r3, #24]
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800511e:	619a      	str	r2, [r3, #24]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	6999      	ldr	r1, [r3, #24]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	021a      	lsls	r2, r3, #8
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	430a      	orrs	r2, r1
 8005132:	619a      	str	r2, [r3, #24]
 8005134:	e084      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x214>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68b9      	ldr	r1, [r7, #8]
 800513c:	4618      	mov	r0, r3
 800513e:	f000 fa71 	bl	8005624 <TIM_OC3_SetConfig>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0208 	orr.w	r2, r2, #8
 8005150:	61da      	str	r2, [r3, #28]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69da      	ldr	r2, [r3, #28]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0204 	bic.w	r2, r2, #4
 8005160:	61da      	str	r2, [r3, #28]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69d9      	ldr	r1, [r3, #28]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	430a      	orrs	r2, r1
 8005172:	61da      	str	r2, [r3, #28]
 8005174:	e064      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x214>
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	4618      	mov	r0, r3
 800517e:	f000 fad9 	bl	8005734 <TIM_OC4_SetConfig>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005190:	61da      	str	r2, [r3, #28]
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69da      	ldr	r2, [r3, #28]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a0:	61da      	str	r2, [r3, #28]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69d9      	ldr	r1, [r3, #28]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	021a      	lsls	r2, r3, #8
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	61da      	str	r2, [r3, #28]
 80051b6:	e043      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x214>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fb22 	bl	8005808 <TIM_OC5_SetConfig>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0208 	orr.w	r2, r2, #8
 80051d2:	655a      	str	r2, [r3, #84]	@ 0x54
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0204 	bic.w	r2, r2, #4
 80051e2:	655a      	str	r2, [r3, #84]	@ 0x54
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	655a      	str	r2, [r3, #84]	@ 0x54
 80051f6:	e023      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x214>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 fb66 	bl	80058d0 <TIM_OC6_SetConfig>
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005212:	655a      	str	r2, [r3, #84]	@ 0x54
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005222:	655a      	str	r2, [r3, #84]	@ 0x54
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	021a      	lsls	r2, r3, #8
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	655a      	str	r2, [r3, #84]	@ 0x54
 8005238:	e002      	b.n	8005240 <HAL_TIM_PWM_ConfigChannel+0x214>
 800523a:	2301      	movs	r3, #1
 800523c:	75fb      	strb	r3, [r7, #23]
 800523e:	bf00      	nop
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005248:	7dfb      	ldrb	r3, [r7, #23]
 800524a:	4618      	mov	r0, r3
 800524c:	3718      	adds	r7, #24
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop

08005254 <HAL_TIM_OC_DelayElapsedCallback>:
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_TIM_IC_CaptureCallback>:
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIM_PWM_PulseFinishedCallback>:
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_TriggerCallback>:
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <TIM_Base_SetConfig>:
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a46      	ldr	r2, [pc, #280]	@ (80053d0 <TIM_Base_SetConfig+0x12c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d013      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c2:	d00f      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a43      	ldr	r2, [pc, #268]	@ (80053d4 <TIM_Base_SetConfig+0x130>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00b      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a42      	ldr	r2, [pc, #264]	@ (80053d8 <TIM_Base_SetConfig+0x134>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d007      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a41      	ldr	r2, [pc, #260]	@ (80053dc <TIM_Base_SetConfig+0x138>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a40      	ldr	r2, [pc, #256]	@ (80053e0 <TIM_Base_SetConfig+0x13c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d108      	bne.n	80052f6 <TIM_Base_SetConfig+0x52>
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a35      	ldr	r2, [pc, #212]	@ (80053d0 <TIM_Base_SetConfig+0x12c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d01f      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005304:	d01b      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a32      	ldr	r2, [pc, #200]	@ (80053d4 <TIM_Base_SetConfig+0x130>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d017      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a31      	ldr	r2, [pc, #196]	@ (80053d8 <TIM_Base_SetConfig+0x134>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d013      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a30      	ldr	r2, [pc, #192]	@ (80053dc <TIM_Base_SetConfig+0x138>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00f      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2f      	ldr	r2, [pc, #188]	@ (80053e0 <TIM_Base_SetConfig+0x13c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00b      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2e      	ldr	r2, [pc, #184]	@ (80053e4 <TIM_Base_SetConfig+0x140>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d007      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a2d      	ldr	r2, [pc, #180]	@ (80053e8 <TIM_Base_SetConfig+0x144>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d003      	beq.n	800533e <TIM_Base_SetConfig+0x9a>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2c      	ldr	r2, [pc, #176]	@ (80053ec <TIM_Base_SetConfig+0x148>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d108      	bne.n	8005350 <TIM_Base_SetConfig+0xac>
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	695b      	ldr	r3, [r3, #20]
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	601a      	str	r2, [r3, #0]
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	629a      	str	r2, [r3, #40]	@ 0x28
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a16      	ldr	r2, [pc, #88]	@ (80053d0 <TIM_Base_SetConfig+0x12c>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d00f      	beq.n	800539c <TIM_Base_SetConfig+0xf8>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a18      	ldr	r2, [pc, #96]	@ (80053e0 <TIM_Base_SetConfig+0x13c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00b      	beq.n	800539c <TIM_Base_SetConfig+0xf8>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a17      	ldr	r2, [pc, #92]	@ (80053e4 <TIM_Base_SetConfig+0x140>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d007      	beq.n	800539c <TIM_Base_SetConfig+0xf8>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a16      	ldr	r2, [pc, #88]	@ (80053e8 <TIM_Base_SetConfig+0x144>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_Base_SetConfig+0xf8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a15      	ldr	r2, [pc, #84]	@ (80053ec <TIM_Base_SetConfig+0x148>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d103      	bne.n	80053a4 <TIM_Base_SetConfig+0x100>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	631a      	str	r2, [r3, #48]	@ 0x30
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	615a      	str	r2, [r3, #20]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d105      	bne.n	80053c2 <TIM_Base_SetConfig+0x11e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f023 0201 	bic.w	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	611a      	str	r2, [r3, #16]
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40012c00 	.word	0x40012c00
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40000c00 	.word	0x40000c00
 80053e0:	40013400 	.word	0x40013400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800

080053f0 <TIM_OC1_SetConfig>:
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	617b      	str	r3, [r7, #20]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	f023 0201 	bic.w	r2, r3, #1
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	621a      	str	r2, [r3, #32]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	60fb      	str	r3, [r7, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800541e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0303 	bic.w	r3, r3, #3
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f023 0302 	bic.w	r3, r3, #2
 800543c:	617b      	str	r3, [r7, #20]
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	697a      	ldr	r2, [r7, #20]
 8005444:	4313      	orrs	r3, r2
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a2c      	ldr	r2, [pc, #176]	@ (80054fc <TIM_OC1_SetConfig+0x10c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00f      	beq.n	8005470 <TIM_OC1_SetConfig+0x80>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a2b      	ldr	r2, [pc, #172]	@ (8005500 <TIM_OC1_SetConfig+0x110>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d00b      	beq.n	8005470 <TIM_OC1_SetConfig+0x80>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a2a      	ldr	r2, [pc, #168]	@ (8005504 <TIM_OC1_SetConfig+0x114>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d007      	beq.n	8005470 <TIM_OC1_SetConfig+0x80>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a29      	ldr	r2, [pc, #164]	@ (8005508 <TIM_OC1_SetConfig+0x118>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <TIM_OC1_SetConfig+0x80>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a28      	ldr	r2, [pc, #160]	@ (800550c <TIM_OC1_SetConfig+0x11c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d10c      	bne.n	800548a <TIM_OC1_SetConfig+0x9a>
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f023 0308 	bic.w	r3, r3, #8
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	697a      	ldr	r2, [r7, #20]
 800547e:	4313      	orrs	r3, r2
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	f023 0304 	bic.w	r3, r3, #4
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a1b      	ldr	r2, [pc, #108]	@ (80054fc <TIM_OC1_SetConfig+0x10c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00f      	beq.n	80054b2 <TIM_OC1_SetConfig+0xc2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a1a      	ldr	r2, [pc, #104]	@ (8005500 <TIM_OC1_SetConfig+0x110>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00b      	beq.n	80054b2 <TIM_OC1_SetConfig+0xc2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a19      	ldr	r2, [pc, #100]	@ (8005504 <TIM_OC1_SetConfig+0x114>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d007      	beq.n	80054b2 <TIM_OC1_SetConfig+0xc2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a18      	ldr	r2, [pc, #96]	@ (8005508 <TIM_OC1_SetConfig+0x118>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d003      	beq.n	80054b2 <TIM_OC1_SetConfig+0xc2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a17      	ldr	r2, [pc, #92]	@ (800550c <TIM_OC1_SetConfig+0x11c>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d111      	bne.n	80054d6 <TIM_OC1_SetConfig+0xe6>
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054c0:	613b      	str	r3, [r7, #16]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	605a      	str	r2, [r3, #4]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	68fa      	ldr	r2, [r7, #12]
 80054e0:	619a      	str	r2, [r3, #24]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	621a      	str	r2, [r3, #32]
 80054f0:	bf00      	nop
 80054f2:	371c      	adds	r7, #28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr
 80054fc:	40012c00 	.word	0x40012c00
 8005500:	40013400 	.word	0x40013400
 8005504:	40014000 	.word	0x40014000
 8005508:	40014400 	.word	0x40014400
 800550c:	40014800 	.word	0x40014800

08005510 <TIM_OC2_SetConfig>:
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1b      	ldr	r3, [r3, #32]
 800551e:	617b      	str	r3, [r7, #20]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	6a1b      	ldr	r3, [r3, #32]
 8005524:	f023 0210 	bic.w	r2, r3, #16
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	621a      	str	r2, [r3, #32]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	613b      	str	r3, [r7, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0320 	bic.w	r3, r3, #32
 800555e:	617b      	str	r3, [r7, #20]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a28      	ldr	r2, [pc, #160]	@ (8005610 <TIM_OC2_SetConfig+0x100>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_OC2_SetConfig+0x6c>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a27      	ldr	r2, [pc, #156]	@ (8005614 <TIM_OC2_SetConfig+0x104>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d10d      	bne.n	8005598 <TIM_OC2_SetConfig+0x88>
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	011b      	lsls	r3, r3, #4
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	4313      	orrs	r3, r2
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a1d      	ldr	r2, [pc, #116]	@ (8005610 <TIM_OC2_SetConfig+0x100>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00f      	beq.n	80055c0 <TIM_OC2_SetConfig+0xb0>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005614 <TIM_OC2_SetConfig+0x104>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00b      	beq.n	80055c0 <TIM_OC2_SetConfig+0xb0>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005618 <TIM_OC2_SetConfig+0x108>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d007      	beq.n	80055c0 <TIM_OC2_SetConfig+0xb0>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a1a      	ldr	r2, [pc, #104]	@ (800561c <TIM_OC2_SetConfig+0x10c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_OC2_SetConfig+0xb0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a19      	ldr	r2, [pc, #100]	@ (8005620 <TIM_OC2_SetConfig+0x110>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d113      	bne.n	80055e8 <TIM_OC2_SetConfig+0xd8>
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055c6:	613b      	str	r3, [r7, #16]
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	605a      	str	r2, [r3, #4]
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	619a      	str	r2, [r3, #24]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	@ 0x38
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	621a      	str	r2, [r3, #32]
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40014000 	.word	0x40014000
 800561c:	40014400 	.word	0x40014400
 8005620:	40014800 	.word	0x40014800

08005624 <TIM_OC3_SetConfig>:
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	617b      	str	r3, [r7, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	621a      	str	r2, [r3, #32]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	60fb      	str	r3, [r7, #12]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005652:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	4313      	orrs	r3, r2
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005670:	617b      	str	r3, [r7, #20]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	617b      	str	r3, [r7, #20]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a27      	ldr	r2, [pc, #156]	@ (8005720 <TIM_OC3_SetConfig+0xfc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d003      	beq.n	800568e <TIM_OC3_SetConfig+0x6a>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a26      	ldr	r2, [pc, #152]	@ (8005724 <TIM_OC3_SetConfig+0x100>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d10d      	bne.n	80056aa <TIM_OC3_SetConfig+0x86>
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	021b      	lsls	r3, r3, #8
 800569c:	697a      	ldr	r2, [r7, #20]
 800569e:	4313      	orrs	r3, r2
 80056a0:	617b      	str	r3, [r7, #20]
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056a8:	617b      	str	r3, [r7, #20]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a1c      	ldr	r2, [pc, #112]	@ (8005720 <TIM_OC3_SetConfig+0xfc>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d00f      	beq.n	80056d2 <TIM_OC3_SetConfig+0xae>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005724 <TIM_OC3_SetConfig+0x100>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00b      	beq.n	80056d2 <TIM_OC3_SetConfig+0xae>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a1a      	ldr	r2, [pc, #104]	@ (8005728 <TIM_OC3_SetConfig+0x104>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d007      	beq.n	80056d2 <TIM_OC3_SetConfig+0xae>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a19      	ldr	r2, [pc, #100]	@ (800572c <TIM_OC3_SetConfig+0x108>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d003      	beq.n	80056d2 <TIM_OC3_SetConfig+0xae>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a18      	ldr	r2, [pc, #96]	@ (8005730 <TIM_OC3_SetConfig+0x10c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d113      	bne.n	80056fa <TIM_OC3_SetConfig+0xd6>
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80056d8:	613b      	str	r3, [r7, #16]
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056e0:	613b      	str	r3, [r7, #16]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	699b      	ldr	r3, [r3, #24]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	605a      	str	r2, [r3, #4]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	61da      	str	r2, [r3, #28]
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	685a      	ldr	r2, [r3, #4]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	621a      	str	r2, [r3, #32]
 8005714:	bf00      	nop
 8005716:	371c      	adds	r7, #28
 8005718:	46bd      	mov	sp, r7
 800571a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571e:	4770      	bx	lr
 8005720:	40012c00 	.word	0x40012c00
 8005724:	40013400 	.word	0x40013400
 8005728:	40014000 	.word	0x40014000
 800572c:	40014400 	.word	0x40014400
 8005730:	40014800 	.word	0x40014800

08005734 <TIM_OC4_SetConfig>:
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	613b      	str	r3, [r7, #16]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	621a      	str	r2, [r3, #32]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	69db      	ldr	r3, [r3, #28]
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005762:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800576e:	60fb      	str	r3, [r7, #12]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	021b      	lsls	r3, r3, #8
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	031b      	lsls	r3, r3, #12
 800578a:	693a      	ldr	r2, [r7, #16]
 800578c:	4313      	orrs	r3, r2
 800578e:	613b      	str	r3, [r7, #16]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a18      	ldr	r2, [pc, #96]	@ (80057f4 <TIM_OC4_SetConfig+0xc0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d00f      	beq.n	80057b8 <TIM_OC4_SetConfig+0x84>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a17      	ldr	r2, [pc, #92]	@ (80057f8 <TIM_OC4_SetConfig+0xc4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d00b      	beq.n	80057b8 <TIM_OC4_SetConfig+0x84>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a16      	ldr	r2, [pc, #88]	@ (80057fc <TIM_OC4_SetConfig+0xc8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d007      	beq.n	80057b8 <TIM_OC4_SetConfig+0x84>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a15      	ldr	r2, [pc, #84]	@ (8005800 <TIM_OC4_SetConfig+0xcc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d003      	beq.n	80057b8 <TIM_OC4_SetConfig+0x84>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a14      	ldr	r2, [pc, #80]	@ (8005804 <TIM_OC4_SetConfig+0xd0>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d109      	bne.n	80057cc <TIM_OC4_SetConfig+0x98>
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	695b      	ldr	r3, [r3, #20]
 80057c4:	019b      	lsls	r3, r3, #6
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	4313      	orrs	r3, r2
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	605a      	str	r2, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	61da      	str	r2, [r3, #28]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	641a      	str	r2, [r3, #64]	@ 0x40
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	621a      	str	r2, [r3, #32]
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40012c00 	.word	0x40012c00
 80057f8:	40013400 	.word	0x40013400
 80057fc:	40014000 	.word	0x40014000
 8005800:	40014400 	.word	0x40014400
 8005804:	40014800 	.word	0x40014800

08005808 <TIM_OC5_SetConfig>:
 8005808:	b480      	push	{r7}
 800580a:	b087      	sub	sp, #28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a1b      	ldr	r3, [r3, #32]
 800581c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	621a      	str	r2, [r3, #32]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800582e:	60fb      	str	r3, [r7, #12]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005836:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800583a:	60fb      	str	r3, [r7, #12]
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	4313      	orrs	r3, r2
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800584c:	613b      	str	r3, [r7, #16]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	041b      	lsls	r3, r3, #16
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	4313      	orrs	r3, r2
 8005858:	613b      	str	r3, [r7, #16]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a17      	ldr	r2, [pc, #92]	@ (80058bc <TIM_OC5_SetConfig+0xb4>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d00f      	beq.n	8005882 <TIM_OC5_SetConfig+0x7a>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	4a16      	ldr	r2, [pc, #88]	@ (80058c0 <TIM_OC5_SetConfig+0xb8>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d00b      	beq.n	8005882 <TIM_OC5_SetConfig+0x7a>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a15      	ldr	r2, [pc, #84]	@ (80058c4 <TIM_OC5_SetConfig+0xbc>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <TIM_OC5_SetConfig+0x7a>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a14      	ldr	r2, [pc, #80]	@ (80058c8 <TIM_OC5_SetConfig+0xc0>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <TIM_OC5_SetConfig+0x7a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a13      	ldr	r2, [pc, #76]	@ (80058cc <TIM_OC5_SetConfig+0xc4>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d109      	bne.n	8005896 <TIM_OC5_SetConfig+0x8e>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005888:	617b      	str	r3, [r7, #20]
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	4313      	orrs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	605a      	str	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	655a      	str	r2, [r3, #84]	@ 0x54
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	659a      	str	r2, [r3, #88]	@ 0x58
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	621a      	str	r2, [r3, #32]
 80058b0:	bf00      	nop
 80058b2:	371c      	adds	r7, #28
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	40012c00 	.word	0x40012c00
 80058c0:	40013400 	.word	0x40013400
 80058c4:	40014000 	.word	0x40014000
 80058c8:	40014400 	.word	0x40014400
 80058cc:	40014800 	.word	0x40014800

080058d0 <TIM_OC6_SetConfig>:
 80058d0:	b480      	push	{r7}
 80058d2:	b087      	sub	sp, #28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
 80058d8:	6039      	str	r1, [r7, #0]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a1b      	ldr	r3, [r3, #32]
 80058e4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	621a      	str	r2, [r3, #32]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	617b      	str	r3, [r7, #20]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005902:	60fb      	str	r3, [r7, #12]
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005916:	613b      	str	r3, [r7, #16]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	051b      	lsls	r3, r3, #20
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a18      	ldr	r2, [pc, #96]	@ (8005988 <TIM_OC6_SetConfig+0xb8>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d00f      	beq.n	800594c <TIM_OC6_SetConfig+0x7c>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a17      	ldr	r2, [pc, #92]	@ (800598c <TIM_OC6_SetConfig+0xbc>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d00b      	beq.n	800594c <TIM_OC6_SetConfig+0x7c>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a16      	ldr	r2, [pc, #88]	@ (8005990 <TIM_OC6_SetConfig+0xc0>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d007      	beq.n	800594c <TIM_OC6_SetConfig+0x7c>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a15      	ldr	r2, [pc, #84]	@ (8005994 <TIM_OC6_SetConfig+0xc4>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d003      	beq.n	800594c <TIM_OC6_SetConfig+0x7c>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a14      	ldr	r2, [pc, #80]	@ (8005998 <TIM_OC6_SetConfig+0xc8>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d109      	bne.n	8005960 <TIM_OC6_SetConfig+0x90>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	029b      	lsls	r3, r3, #10
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	605a      	str	r2, [r3, #4]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	655a      	str	r2, [r3, #84]	@ 0x54
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685a      	ldr	r2, [r3, #4]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	621a      	str	r2, [r3, #32]
 800597a:	bf00      	nop
 800597c:	371c      	adds	r7, #28
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr
 8005986:	bf00      	nop
 8005988:	40012c00 	.word	0x40012c00
 800598c:	40013400 	.word	0x40013400
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400
 8005998:	40014800 	.word	0x40014800

0800599c <TIM_CCxChannelCmd>:
 800599c:	b480      	push	{r7}
 800599e:	b087      	sub	sp, #28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f003 031f 	and.w	r3, r3, #31
 80059ae:	2201      	movs	r2, #1
 80059b0:	fa02 f303 	lsl.w	r3, r2, r3
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	6a1a      	ldr	r2, [r3, #32]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	43db      	mvns	r3, r3
 80059be:	401a      	ands	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	621a      	str	r2, [r3, #32]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a1a      	ldr	r2, [r3, #32]
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	f003 031f 	and.w	r3, r3, #31
 80059ce:	6879      	ldr	r1, [r7, #4]
 80059d0:	fa01 f303 	lsl.w	r3, r1, r3
 80059d4:	431a      	orrs	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	621a      	str	r2, [r3, #32]
 80059da:	bf00      	nop
 80059dc:	371c      	adds	r7, #28
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
	...

080059e8 <HAL_TIMEx_MasterConfigSynchronization>:
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e068      	b.n	8005ad2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	60fb      	str	r3, [r7, #12]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	60bb      	str	r3, [r7, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a2e      	ldr	r2, [pc, #184]	@ (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d108      	bne.n	8005a46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	68fa      	ldr	r2, [r7, #12]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a4c:	60fb      	str	r3, [r7, #12]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	605a      	str	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a1e      	ldr	r2, [pc, #120]	@ (8005ae0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01d      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a72:	d018      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a1b      	ldr	r2, [pc, #108]	@ (8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d013      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a1a      	ldr	r2, [pc, #104]	@ (8005aec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00e      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a18      	ldr	r2, [pc, #96]	@ (8005af0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d009      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a13      	ldr	r2, [pc, #76]	@ (8005ae4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d004      	beq.n	8005aa6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a14      	ldr	r2, [pc, #80]	@ (8005af4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aac:	60bb      	str	r3, [r7, #8]
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60bb      	str	r3, [r7, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	609a      	str	r2, [r3, #8]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	40012c00 	.word	0x40012c00
 8005ae4:	40013400 	.word	0x40013400
 8005ae8:	40000400 	.word	0x40000400
 8005aec:	40000800 	.word	0x40000800
 8005af0:	40000c00 	.word	0x40000c00
 8005af4:	40014000 	.word	0x40014000

08005af8 <HAL_TIMEx_ConfigBreakDeadTime>:
 8005af8:	b480      	push	{r7}
 8005afa:	b085      	sub	sp, #20
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
 8005b02:	2300      	movs	r3, #0
 8005b04:	60fb      	str	r3, [r7, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d101      	bne.n	8005b14 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b10:	2302      	movs	r3, #2
 8005b12:	e065      	b.n	8005be0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	4313      	orrs	r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60fb      	str	r3, [r7, #12]
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	60fb      	str	r3, [r7, #12]
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	041b      	lsls	r3, r3, #16
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a16      	ldr	r2, [pc, #88]	@ (8005bec <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d004      	beq.n	8005ba2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a14      	ldr	r2, [pc, #80]	@ (8005bf0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d115      	bne.n	8005bce <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bac:	051b      	lsls	r3, r3, #20
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	645a      	str	r2, [r3, #68]	@ 0x44
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005bde:	2300      	movs	r3, #0
 8005be0:	4618      	mov	r0, r3
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	40012c00 	.word	0x40012c00
 8005bf0:	40013400 	.word	0x40013400

08005bf4 <HAL_TIMEx_CommutCallback>:
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_TIMEx_BreakCallback>:
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_TIMEx_Break2Callback>:
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <HAL_UART_Init>:
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_UART_Init+0x12>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e040      	b.n	8005cc4 <HAL_UART_Init+0x94>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_UART_Init+0x28>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fc ff66 	bl	8002b24 <HAL_UART_MspInit>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2224      	movs	r2, #36	@ 0x24
 8005c5c:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f022 0201 	bic.w	r2, r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_UART_Init+0x4c>
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 fae0 	bl	800623c <UART_AdvFeatureConfig>
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f000 f825 	bl	8005ccc <UART_SetConfig>
 8005c82:	4603      	mov	r3, r0
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_UART_Init+0x5c>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e01b      	b.n	8005cc4 <HAL_UART_Init+0x94>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005c9a:	605a      	str	r2, [r3, #4]
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689a      	ldr	r2, [r3, #8]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005caa:	609a      	str	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f042 0201 	orr.w	r2, r2, #1
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 fb5f 	bl	8006380 <UART_CheckIdleState>
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <UART_SetConfig>:
 8005ccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cd0:	b08a      	sub	sp, #40	@ 0x28
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	691b      	ldr	r3, [r3, #16]
 8005ce4:	431a      	orrs	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	431a      	orrs	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	4ba4      	ldr	r3, [pc, #656]	@ (8005f8c <UART_SetConfig+0x2c0>)
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	6812      	ldr	r2, [r2, #0]
 8005d02:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d04:	430b      	orrs	r3, r1
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	430a      	orrs	r2, r1
 8005d1c:	605a      	str	r2, [r3, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	699b      	ldr	r3, [r3, #24]
 8005d22:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a99      	ldr	r2, [pc, #612]	@ (8005f90 <UART_SetConfig+0x2c4>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d004      	beq.n	8005d38 <UART_SetConfig+0x6c>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6a1b      	ldr	r3, [r3, #32]
 8005d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d34:	4313      	orrs	r3, r2
 8005d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d48:	430a      	orrs	r2, r1
 8005d4a:	609a      	str	r2, [r3, #8]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a90      	ldr	r2, [pc, #576]	@ (8005f94 <UART_SetConfig+0x2c8>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d126      	bne.n	8005da4 <UART_SetConfig+0xd8>
 8005d56:	4b90      	ldr	r3, [pc, #576]	@ (8005f98 <UART_SetConfig+0x2cc>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	2b03      	cmp	r3, #3
 8005d62:	d81b      	bhi.n	8005d9c <UART_SetConfig+0xd0>
 8005d64:	a201      	add	r2, pc, #4	@ (adr r2, 8005d6c <UART_SetConfig+0xa0>)
 8005d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d6a:	bf00      	nop
 8005d6c:	08005d7d 	.word	0x08005d7d
 8005d70:	08005d8d 	.word	0x08005d8d
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	2301      	movs	r3, #1
 8005d7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d82:	e116      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005d84:	2302      	movs	r3, #2
 8005d86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d8a:	e112      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005d8c:	2304      	movs	r3, #4
 8005d8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d92:	e10e      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005d94:	2308      	movs	r3, #8
 8005d96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005d9a:	e10a      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005d9c:	2310      	movs	r3, #16
 8005d9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005da2:	e106      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a7c      	ldr	r2, [pc, #496]	@ (8005f9c <UART_SetConfig+0x2d0>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d138      	bne.n	8005e20 <UART_SetConfig+0x154>
 8005dae:	4b7a      	ldr	r3, [pc, #488]	@ (8005f98 <UART_SetConfig+0x2cc>)
 8005db0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005db4:	f003 030c 	and.w	r3, r3, #12
 8005db8:	2b0c      	cmp	r3, #12
 8005dba:	d82d      	bhi.n	8005e18 <UART_SetConfig+0x14c>
 8005dbc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc4 <UART_SetConfig+0xf8>)
 8005dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc2:	bf00      	nop
 8005dc4:	08005df9 	.word	0x08005df9
 8005dc8:	08005e19 	.word	0x08005e19
 8005dcc:	08005e19 	.word	0x08005e19
 8005dd0:	08005e19 	.word	0x08005e19
 8005dd4:	08005e09 	.word	0x08005e09
 8005dd8:	08005e19 	.word	0x08005e19
 8005ddc:	08005e19 	.word	0x08005e19
 8005de0:	08005e19 	.word	0x08005e19
 8005de4:	08005e01 	.word	0x08005e01
 8005de8:	08005e19 	.word	0x08005e19
 8005dec:	08005e19 	.word	0x08005e19
 8005df0:	08005e19 	.word	0x08005e19
 8005df4:	08005e11 	.word	0x08005e11
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005dfe:	e0d8      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e00:	2302      	movs	r3, #2
 8005e02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e06:	e0d4      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e0e:	e0d0      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e10:	2308      	movs	r3, #8
 8005e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e16:	e0cc      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e18:	2310      	movs	r3, #16
 8005e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e1e:	e0c8      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a5e      	ldr	r2, [pc, #376]	@ (8005fa0 <UART_SetConfig+0x2d4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d125      	bne.n	8005e76 <UART_SetConfig+0x1aa>
 8005e2a:	4b5b      	ldr	r3, [pc, #364]	@ (8005f98 <UART_SetConfig+0x2cc>)
 8005e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e30:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005e34:	2b30      	cmp	r3, #48	@ 0x30
 8005e36:	d016      	beq.n	8005e66 <UART_SetConfig+0x19a>
 8005e38:	2b30      	cmp	r3, #48	@ 0x30
 8005e3a:	d818      	bhi.n	8005e6e <UART_SetConfig+0x1a2>
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d00a      	beq.n	8005e56 <UART_SetConfig+0x18a>
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d814      	bhi.n	8005e6e <UART_SetConfig+0x1a2>
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <UART_SetConfig+0x182>
 8005e48:	2b10      	cmp	r3, #16
 8005e4a:	d008      	beq.n	8005e5e <UART_SetConfig+0x192>
 8005e4c:	e00f      	b.n	8005e6e <UART_SetConfig+0x1a2>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e54:	e0ad      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e56:	2302      	movs	r3, #2
 8005e58:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e5c:	e0a9      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e5e:	2304      	movs	r3, #4
 8005e60:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e64:	e0a5      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e66:	2308      	movs	r3, #8
 8005e68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e6c:	e0a1      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e6e:	2310      	movs	r3, #16
 8005e70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005e74:	e09d      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a4a      	ldr	r2, [pc, #296]	@ (8005fa4 <UART_SetConfig+0x2d8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d125      	bne.n	8005ecc <UART_SetConfig+0x200>
 8005e80:	4b45      	ldr	r3, [pc, #276]	@ (8005f98 <UART_SetConfig+0x2cc>)
 8005e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e86:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005e8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e8c:	d016      	beq.n	8005ebc <UART_SetConfig+0x1f0>
 8005e8e:	2bc0      	cmp	r3, #192	@ 0xc0
 8005e90:	d818      	bhi.n	8005ec4 <UART_SetConfig+0x1f8>
 8005e92:	2b80      	cmp	r3, #128	@ 0x80
 8005e94:	d00a      	beq.n	8005eac <UART_SetConfig+0x1e0>
 8005e96:	2b80      	cmp	r3, #128	@ 0x80
 8005e98:	d814      	bhi.n	8005ec4 <UART_SetConfig+0x1f8>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <UART_SetConfig+0x1d8>
 8005e9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ea0:	d008      	beq.n	8005eb4 <UART_SetConfig+0x1e8>
 8005ea2:	e00f      	b.n	8005ec4 <UART_SetConfig+0x1f8>
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eaa:	e082      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005eac:	2302      	movs	r3, #2
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eb2:	e07e      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005eb4:	2304      	movs	r3, #4
 8005eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eba:	e07a      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005ebc:	2308      	movs	r3, #8
 8005ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ec2:	e076      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005ec4:	2310      	movs	r3, #16
 8005ec6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005eca:	e072      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a35      	ldr	r2, [pc, #212]	@ (8005fa8 <UART_SetConfig+0x2dc>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d12a      	bne.n	8005f2c <UART_SetConfig+0x260>
 8005ed6:	4b30      	ldr	r3, [pc, #192]	@ (8005f98 <UART_SetConfig+0x2cc>)
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005edc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ee0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ee4:	d01a      	beq.n	8005f1c <UART_SetConfig+0x250>
 8005ee6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005eea:	d81b      	bhi.n	8005f24 <UART_SetConfig+0x258>
 8005eec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef0:	d00c      	beq.n	8005f0c <UART_SetConfig+0x240>
 8005ef2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ef6:	d815      	bhi.n	8005f24 <UART_SetConfig+0x258>
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <UART_SetConfig+0x238>
 8005efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f00:	d008      	beq.n	8005f14 <UART_SetConfig+0x248>
 8005f02:	e00f      	b.n	8005f24 <UART_SetConfig+0x258>
 8005f04:	2300      	movs	r3, #0
 8005f06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f0a:	e052      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f12:	e04e      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f14:	2304      	movs	r3, #4
 8005f16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f1a:	e04a      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f1c:	2308      	movs	r3, #8
 8005f1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f22:	e046      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f24:	2310      	movs	r3, #16
 8005f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f2a:	e042      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a17      	ldr	r2, [pc, #92]	@ (8005f90 <UART_SetConfig+0x2c4>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d13a      	bne.n	8005fac <UART_SetConfig+0x2e0>
 8005f36:	4b18      	ldr	r3, [pc, #96]	@ (8005f98 <UART_SetConfig+0x2cc>)
 8005f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f3c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005f40:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f44:	d01a      	beq.n	8005f7c <UART_SetConfig+0x2b0>
 8005f46:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005f4a:	d81b      	bhi.n	8005f84 <UART_SetConfig+0x2b8>
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f50:	d00c      	beq.n	8005f6c <UART_SetConfig+0x2a0>
 8005f52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f56:	d815      	bhi.n	8005f84 <UART_SetConfig+0x2b8>
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d003      	beq.n	8005f64 <UART_SetConfig+0x298>
 8005f5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005f60:	d008      	beq.n	8005f74 <UART_SetConfig+0x2a8>
 8005f62:	e00f      	b.n	8005f84 <UART_SetConfig+0x2b8>
 8005f64:	2300      	movs	r3, #0
 8005f66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f6a:	e022      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f6c:	2302      	movs	r3, #2
 8005f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f72:	e01e      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f74:	2304      	movs	r3, #4
 8005f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f7a:	e01a      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f7c:	2308      	movs	r3, #8
 8005f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f82:	e016      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f84:	2310      	movs	r3, #16
 8005f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005f8a:	e012      	b.n	8005fb2 <UART_SetConfig+0x2e6>
 8005f8c:	efff69f3 	.word	0xefff69f3
 8005f90:	40008000 	.word	0x40008000
 8005f94:	40013800 	.word	0x40013800
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	40004400 	.word	0x40004400
 8005fa0:	40004800 	.word	0x40004800
 8005fa4:	40004c00 	.word	0x40004c00
 8005fa8:	40005000 	.word	0x40005000
 8005fac:	2310      	movs	r3, #16
 8005fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a9f      	ldr	r2, [pc, #636]	@ (8006234 <UART_SetConfig+0x568>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d17a      	bne.n	80060b2 <UART_SetConfig+0x3e6>
 8005fbc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d824      	bhi.n	800600e <UART_SetConfig+0x342>
 8005fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fcc <UART_SetConfig+0x300>)
 8005fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fca:	bf00      	nop
 8005fcc:	08005ff1 	.word	0x08005ff1
 8005fd0:	0800600f 	.word	0x0800600f
 8005fd4:	08005ff9 	.word	0x08005ff9
 8005fd8:	0800600f 	.word	0x0800600f
 8005fdc:	08005fff 	.word	0x08005fff
 8005fe0:	0800600f 	.word	0x0800600f
 8005fe4:	0800600f 	.word	0x0800600f
 8005fe8:	0800600f 	.word	0x0800600f
 8005fec:	08006007 	.word	0x08006007
 8005ff0:	f7fd ffda 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 8005ff4:	61f8      	str	r0, [r7, #28]
 8005ff6:	e010      	b.n	800601a <UART_SetConfig+0x34e>
 8005ff8:	4b8f      	ldr	r3, [pc, #572]	@ (8006238 <UART_SetConfig+0x56c>)
 8005ffa:	61fb      	str	r3, [r7, #28]
 8005ffc:	e00d      	b.n	800601a <UART_SetConfig+0x34e>
 8005ffe:	f7fd ff3b 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 8006002:	61f8      	str	r0, [r7, #28]
 8006004:	e009      	b.n	800601a <UART_SetConfig+0x34e>
 8006006:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800600a:	61fb      	str	r3, [r7, #28]
 800600c:	e005      	b.n	800601a <UART_SetConfig+0x34e>
 800600e:	2300      	movs	r3, #0
 8006010:	61fb      	str	r3, [r7, #28]
 8006012:	2301      	movs	r3, #1
 8006014:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006018:	bf00      	nop
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 80fb 	beq.w	8006218 <UART_SetConfig+0x54c>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	4613      	mov	r3, r2
 8006028:	005b      	lsls	r3, r3, #1
 800602a:	4413      	add	r3, r2
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	429a      	cmp	r2, r3
 8006030:	d305      	bcc.n	800603e <UART_SetConfig+0x372>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	031b      	lsls	r3, r3, #12
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	429a      	cmp	r2, r3
 800603c:	d903      	bls.n	8006046 <UART_SetConfig+0x37a>
 800603e:	2301      	movs	r3, #1
 8006040:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006044:	e0e8      	b.n	8006218 <UART_SetConfig+0x54c>
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	2200      	movs	r2, #0
 800604a:	461c      	mov	r4, r3
 800604c:	4615      	mov	r5, r2
 800604e:	f04f 0200 	mov.w	r2, #0
 8006052:	f04f 0300 	mov.w	r3, #0
 8006056:	022b      	lsls	r3, r5, #8
 8006058:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800605c:	0222      	lsls	r2, r4, #8
 800605e:	68f9      	ldr	r1, [r7, #12]
 8006060:	6849      	ldr	r1, [r1, #4]
 8006062:	0849      	lsrs	r1, r1, #1
 8006064:	2000      	movs	r0, #0
 8006066:	4688      	mov	r8, r1
 8006068:	4681      	mov	r9, r0
 800606a:	eb12 0a08 	adds.w	sl, r2, r8
 800606e:	eb43 0b09 	adc.w	fp, r3, r9
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006080:	4650      	mov	r0, sl
 8006082:	4659      	mov	r1, fp
 8006084:	f7fa fbb2 	bl	80007ec <__aeabi_uldivmod>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4613      	mov	r3, r2
 800608e:	61bb      	str	r3, [r7, #24]
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006096:	d308      	bcc.n	80060aa <UART_SetConfig+0x3de>
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800609e:	d204      	bcs.n	80060aa <UART_SetConfig+0x3de>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	69ba      	ldr	r2, [r7, #24]
 80060a6:	60da      	str	r2, [r3, #12]
 80060a8:	e0b6      	b.n	8006218 <UART_SetConfig+0x54c>
 80060aa:	2301      	movs	r3, #1
 80060ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80060b0:	e0b2      	b.n	8006218 <UART_SetConfig+0x54c>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	69db      	ldr	r3, [r3, #28]
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060ba:	d15e      	bne.n	800617a <UART_SetConfig+0x4ae>
 80060bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80060c0:	2b08      	cmp	r3, #8
 80060c2:	d828      	bhi.n	8006116 <UART_SetConfig+0x44a>
 80060c4:	a201      	add	r2, pc, #4	@ (adr r2, 80060cc <UART_SetConfig+0x400>)
 80060c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ca:	bf00      	nop
 80060cc:	080060f1 	.word	0x080060f1
 80060d0:	080060f9 	.word	0x080060f9
 80060d4:	08006101 	.word	0x08006101
 80060d8:	08006117 	.word	0x08006117
 80060dc:	08006107 	.word	0x08006107
 80060e0:	08006117 	.word	0x08006117
 80060e4:	08006117 	.word	0x08006117
 80060e8:	08006117 	.word	0x08006117
 80060ec:	0800610f 	.word	0x0800610f
 80060f0:	f7fd ff5a 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 80060f4:	61f8      	str	r0, [r7, #28]
 80060f6:	e014      	b.n	8006122 <UART_SetConfig+0x456>
 80060f8:	f7fd ff6c 	bl	8003fd4 <HAL_RCC_GetPCLK2Freq>
 80060fc:	61f8      	str	r0, [r7, #28]
 80060fe:	e010      	b.n	8006122 <UART_SetConfig+0x456>
 8006100:	4b4d      	ldr	r3, [pc, #308]	@ (8006238 <UART_SetConfig+0x56c>)
 8006102:	61fb      	str	r3, [r7, #28]
 8006104:	e00d      	b.n	8006122 <UART_SetConfig+0x456>
 8006106:	f7fd feb7 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 800610a:	61f8      	str	r0, [r7, #28]
 800610c:	e009      	b.n	8006122 <UART_SetConfig+0x456>
 800610e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006112:	61fb      	str	r3, [r7, #28]
 8006114:	e005      	b.n	8006122 <UART_SetConfig+0x456>
 8006116:	2300      	movs	r3, #0
 8006118:	61fb      	str	r3, [r7, #28]
 800611a:	2301      	movs	r3, #1
 800611c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006120:	bf00      	nop
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d077      	beq.n	8006218 <UART_SetConfig+0x54c>
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	005a      	lsls	r2, r3, #1
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	441a      	add	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	fbb2 f3f3 	udiv	r3, r2, r3
 800613c:	61bb      	str	r3, [r7, #24]
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b0f      	cmp	r3, #15
 8006142:	d916      	bls.n	8006172 <UART_SetConfig+0x4a6>
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800614a:	d212      	bcs.n	8006172 <UART_SetConfig+0x4a6>
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	b29b      	uxth	r3, r3
 8006150:	f023 030f 	bic.w	r3, r3, #15
 8006154:	82fb      	strh	r3, [r7, #22]
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	b29b      	uxth	r3, r3
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	b29a      	uxth	r2, r3
 8006162:	8afb      	ldrh	r3, [r7, #22]
 8006164:	4313      	orrs	r3, r2
 8006166:	82fb      	strh	r3, [r7, #22]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	8afa      	ldrh	r2, [r7, #22]
 800616e:	60da      	str	r2, [r3, #12]
 8006170:	e052      	b.n	8006218 <UART_SetConfig+0x54c>
 8006172:	2301      	movs	r3, #1
 8006174:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006178:	e04e      	b.n	8006218 <UART_SetConfig+0x54c>
 800617a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800617e:	2b08      	cmp	r3, #8
 8006180:	d827      	bhi.n	80061d2 <UART_SetConfig+0x506>
 8006182:	a201      	add	r2, pc, #4	@ (adr r2, 8006188 <UART_SetConfig+0x4bc>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	080061ad 	.word	0x080061ad
 800618c:	080061b5 	.word	0x080061b5
 8006190:	080061bd 	.word	0x080061bd
 8006194:	080061d3 	.word	0x080061d3
 8006198:	080061c3 	.word	0x080061c3
 800619c:	080061d3 	.word	0x080061d3
 80061a0:	080061d3 	.word	0x080061d3
 80061a4:	080061d3 	.word	0x080061d3
 80061a8:	080061cb 	.word	0x080061cb
 80061ac:	f7fd fefc 	bl	8003fa8 <HAL_RCC_GetPCLK1Freq>
 80061b0:	61f8      	str	r0, [r7, #28]
 80061b2:	e014      	b.n	80061de <UART_SetConfig+0x512>
 80061b4:	f7fd ff0e 	bl	8003fd4 <HAL_RCC_GetPCLK2Freq>
 80061b8:	61f8      	str	r0, [r7, #28]
 80061ba:	e010      	b.n	80061de <UART_SetConfig+0x512>
 80061bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006238 <UART_SetConfig+0x56c>)
 80061be:	61fb      	str	r3, [r7, #28]
 80061c0:	e00d      	b.n	80061de <UART_SetConfig+0x512>
 80061c2:	f7fd fe59 	bl	8003e78 <HAL_RCC_GetSysClockFreq>
 80061c6:	61f8      	str	r0, [r7, #28]
 80061c8:	e009      	b.n	80061de <UART_SetConfig+0x512>
 80061ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ce:	61fb      	str	r3, [r7, #28]
 80061d0:	e005      	b.n	80061de <UART_SetConfig+0x512>
 80061d2:	2300      	movs	r3, #0
 80061d4:	61fb      	str	r3, [r7, #28]
 80061d6:	2301      	movs	r3, #1
 80061d8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80061dc:	bf00      	nop
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d019      	beq.n	8006218 <UART_SetConfig+0x54c>
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	085a      	lsrs	r2, r3, #1
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	441a      	add	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f6:	61bb      	str	r3, [r7, #24]
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	2b0f      	cmp	r3, #15
 80061fc:	d909      	bls.n	8006212 <UART_SetConfig+0x546>
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006204:	d205      	bcs.n	8006212 <UART_SetConfig+0x546>
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	b29a      	uxth	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	60da      	str	r2, [r3, #12]
 8006210:	e002      	b.n	8006218 <UART_SetConfig+0x54c>
 8006212:	2301      	movs	r3, #1
 8006214:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	669a      	str	r2, [r3, #104]	@ 0x68
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2200      	movs	r2, #0
 8006222:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006224:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8006228:	4618      	mov	r0, r3
 800622a:	3728      	adds	r7, #40	@ 0x28
 800622c:	46bd      	mov	sp, r7
 800622e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006232:	bf00      	nop
 8006234:	40008000 	.word	0x40008000
 8006238:	00f42400 	.word	0x00f42400

0800623c <UART_AdvFeatureConfig>:
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006248:	f003 0308 	and.w	r3, r3, #8
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00a      	beq.n	8006266 <UART_AdvFeatureConfig+0x2a>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626a:	f003 0301 	and.w	r3, r3, #1
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0x4c>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	f003 0302 	and.w	r3, r3, #2
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00a      	beq.n	80062aa <UART_AdvFeatureConfig+0x6e>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <UART_AdvFeatureConfig+0x90>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	605a      	str	r2, [r3, #4]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d0:	f003 0310 	and.w	r3, r3, #16
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00a      	beq.n	80062ee <UART_AdvFeatureConfig+0xb2>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	430a      	orrs	r2, r1
 80062ec:	609a      	str	r2, [r3, #8]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00a      	beq.n	8006310 <UART_AdvFeatureConfig+0xd4>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689b      	ldr	r3, [r3, #8]
 8006300:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	430a      	orrs	r2, r1
 800630e:	609a      	str	r2, [r3, #8]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d01a      	beq.n	8006352 <UART_AdvFeatureConfig+0x116>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	430a      	orrs	r2, r1
 8006330:	605a      	str	r2, [r3, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006336:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800633a:	d10a      	bne.n	8006352 <UART_AdvFeatureConfig+0x116>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	430a      	orrs	r2, r1
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00a      	beq.n	8006374 <UART_AdvFeatureConfig+0x138>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	605a      	str	r2, [r3, #4]
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr

08006380 <UART_CheckIdleState>:
 8006380:	b580      	push	{r7, lr}
 8006382:	b098      	sub	sp, #96	@ 0x60
 8006384:	af02      	add	r7, sp, #8
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8006390:	f7fc fd44 	bl	8002e1c <HAL_GetTick>
 8006394:	6578      	str	r0, [r7, #84]	@ 0x54
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d12e      	bne.n	8006402 <UART_CheckIdleState+0x82>
 80063a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ac:	2200      	movs	r2, #0
 80063ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f88c 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d021      	beq.n	8006402 <UART_CheckIdleState+0x82>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c6:	e853 3f00 	ldrex	r3, [r3]
 80063ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80063cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	461a      	mov	r2, r3
 80063da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80063de:	643a      	str	r2, [r7, #64]	@ 0x40
 80063e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063e4:	e841 2300 	strex	r3, r2, [r1]
 80063e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1e6      	bne.n	80063be <UART_CheckIdleState+0x3e>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2220      	movs	r2, #32
 80063f4:	67da      	str	r2, [r3, #124]	@ 0x7c
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80063fe:	2303      	movs	r3, #3
 8006400:	e062      	b.n	80064c8 <UART_CheckIdleState+0x148>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	2b04      	cmp	r3, #4
 800640e:	d149      	bne.n	80064a4 <UART_CheckIdleState+0x124>
 8006410:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006418:	2200      	movs	r2, #0
 800641a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f856 	bl	80064d0 <UART_WaitOnFlagUntilTimeout>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d03c      	beq.n	80064a4 <UART_CheckIdleState+0x124>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006432:	e853 3f00 	ldrex	r3, [r3]
 8006436:	623b      	str	r3, [r7, #32]
 8006438:	6a3b      	ldr	r3, [r7, #32]
 800643a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800643e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006448:	633b      	str	r3, [r7, #48]	@ 0x30
 800644a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800644c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800644e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006450:	e841 2300 	strex	r3, r2, [r1]
 8006454:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1e6      	bne.n	800642a <UART_CheckIdleState+0xaa>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	3308      	adds	r3, #8
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	e853 3f00 	ldrex	r3, [r3]
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f023 0301 	bic.w	r3, r3, #1
 8006472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	3308      	adds	r3, #8
 800647a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800647c:	61fa      	str	r2, [r7, #28]
 800647e:	61bb      	str	r3, [r7, #24]
 8006480:	69b9      	ldr	r1, [r7, #24]
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	e841 2300 	strex	r3, r2, [r1]
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d1e5      	bne.n	800645c <UART_CheckIdleState+0xdc>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2220      	movs	r2, #32
 8006494:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80064a0:	2303      	movs	r3, #3
 80064a2:	e011      	b.n	80064c8 <UART_CheckIdleState+0x148>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2220      	movs	r2, #32
 80064a8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	661a      	str	r2, [r3, #96]	@ 0x60
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2200      	movs	r2, #0
 80064bc:	665a      	str	r2, [r3, #100]	@ 0x64
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80064c6:	2300      	movs	r3, #0
 80064c8:	4618      	mov	r0, r3
 80064ca:	3758      	adds	r7, #88	@ 0x58
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <UART_WaitOnFlagUntilTimeout>:
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	4613      	mov	r3, r2
 80064de:	71fb      	strb	r3, [r7, #7]
 80064e0:	e04f      	b.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e8:	d04b      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064ea:	f7fc fc97 	bl	8002e1c <HAL_GetTick>
 80064ee:	4602      	mov	r2, r0
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	1ad3      	subs	r3, r2, r3
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d302      	bcc.n	8006500 <UART_WaitOnFlagUntilTimeout+0x30>
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d101      	bne.n	8006504 <UART_WaitOnFlagUntilTimeout+0x34>
 8006500:	2303      	movs	r3, #3
 8006502:	e04e      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd2>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0304 	and.w	r3, r3, #4
 800650e:	2b00      	cmp	r3, #0
 8006510:	d037      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	2b80      	cmp	r3, #128	@ 0x80
 8006516:	d034      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b40      	cmp	r3, #64	@ 0x40
 800651c:	d031      	beq.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	69db      	ldr	r3, [r3, #28]
 8006524:	f003 0308 	and.w	r3, r3, #8
 8006528:	2b08      	cmp	r3, #8
 800652a:	d110      	bne.n	800654e <UART_WaitOnFlagUntilTimeout+0x7e>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2208      	movs	r2, #8
 8006532:	621a      	str	r2, [r3, #32]
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 f838 	bl	80065aa <UART_EndRxTransfer>
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2208      	movs	r2, #8
 800653e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800654a:	2301      	movs	r3, #1
 800654c:	e029      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd2>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	69db      	ldr	r3, [r3, #28]
 8006554:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006558:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800655c:	d111      	bne.n	8006582 <UART_WaitOnFlagUntilTimeout+0xb2>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006566:	621a      	str	r2, [r3, #32]
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 f81e 	bl	80065aa <UART_EndRxTransfer>
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2220      	movs	r2, #32
 8006572:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 800657e:	2303      	movs	r3, #3
 8006580:	e00f      	b.n	80065a2 <UART_WaitOnFlagUntilTimeout+0xd2>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	69da      	ldr	r2, [r3, #28]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	4013      	ands	r3, r2
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	429a      	cmp	r2, r3
 8006590:	bf0c      	ite	eq
 8006592:	2301      	moveq	r3, #1
 8006594:	2300      	movne	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	461a      	mov	r2, r3
 800659a:	79fb      	ldrb	r3, [r7, #7]
 800659c:	429a      	cmp	r2, r3
 800659e:	d0a0      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x12>
 80065a0:	2300      	movs	r3, #0
 80065a2:	4618      	mov	r0, r3
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <UART_EndRxTransfer>:
 80065aa:	b480      	push	{r7}
 80065ac:	b095      	sub	sp, #84	@ 0x54
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80065b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	633b      	str	r3, [r7, #48]	@ 0x30
 80065c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80065c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	461a      	mov	r2, r3
 80065ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80065d2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80065d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065d8:	e841 2300 	strex	r3, r2, [r1]
 80065dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80065de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e6      	bne.n	80065b2 <UART_EndRxTransfer+0x8>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3308      	adds	r3, #8
 80065ea:	623b      	str	r3, [r7, #32]
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	e853 3f00 	ldrex	r3, [r3]
 80065f2:	61fb      	str	r3, [r7, #28]
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f023 0301 	bic.w	r3, r3, #1
 80065fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	3308      	adds	r3, #8
 8006602:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006604:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006606:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800660a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800660c:	e841 2300 	strex	r3, r2, [r1]
 8006610:	627b      	str	r3, [r7, #36]	@ 0x24
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1e5      	bne.n	80065e4 <UART_EndRxTransfer+0x3a>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800661c:	2b01      	cmp	r3, #1
 800661e:	d118      	bne.n	8006652 <UART_EndRxTransfer+0xa8>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	f023 0310 	bic.w	r3, r3, #16
 8006634:	647b      	str	r3, [r7, #68]	@ 0x44
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	461a      	mov	r2, r3
 800663c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800663e:	61bb      	str	r3, [r7, #24]
 8006640:	617a      	str	r2, [r7, #20]
 8006642:	6979      	ldr	r1, [r7, #20]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	e841 2300 	strex	r3, r2, [r1]
 800664a:	613b      	str	r3, [r7, #16]
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1e6      	bne.n	8006620 <UART_EndRxTransfer+0x76>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2220      	movs	r2, #32
 8006656:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	661a      	str	r2, [r3, #96]	@ 0x60
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	669a      	str	r2, [r3, #104]	@ 0x68
 8006666:	bf00      	nop
 8006668:	3754      	adds	r7, #84	@ 0x54
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
	...

08006674 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	4603      	mov	r3, r0
 800667c:	6039      	str	r1, [r7, #0]
 800667e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006684:	2b00      	cmp	r3, #0
 8006686:	db0a      	blt.n	800669e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	b2da      	uxtb	r2, r3
 800668c:	490c      	ldr	r1, [pc, #48]	@ (80066c0 <__NVIC_SetPriority+0x4c>)
 800668e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006692:	0112      	lsls	r2, r2, #4
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	440b      	add	r3, r1
 8006698:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800669c:	e00a      	b.n	80066b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	4908      	ldr	r1, [pc, #32]	@ (80066c4 <__NVIC_SetPriority+0x50>)
 80066a4:	79fb      	ldrb	r3, [r7, #7]
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	3b04      	subs	r3, #4
 80066ac:	0112      	lsls	r2, r2, #4
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	440b      	add	r3, r1
 80066b2:	761a      	strb	r2, [r3, #24]
}
 80066b4:	bf00      	nop
 80066b6:	370c      	adds	r7, #12
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr
 80066c0:	e000e100 	.word	0xe000e100
 80066c4:	e000ed00 	.word	0xe000ed00

080066c8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80066cc:	4b05      	ldr	r3, [pc, #20]	@ (80066e4 <SysTick_Handler+0x1c>)
 80066ce:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80066d0:	f001 feb2 	bl	8008438 <xTaskGetSchedulerState>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d001      	beq.n	80066de <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80066da:	f002 fd6d 	bl	80091b8 <xPortSysTickHandler>
  }
}
 80066de:	bf00      	nop
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	e000e010 	.word	0xe000e010

080066e8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80066e8:	b580      	push	{r7, lr}
 80066ea:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80066ec:	2100      	movs	r1, #0
 80066ee:	f06f 0004 	mvn.w	r0, #4
 80066f2:	f7ff ffbf 	bl	8006674 <__NVIC_SetPriority>
#endif
}
 80066f6:	bf00      	nop
 80066f8:	bd80      	pop	{r7, pc}
	...

080066fc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006702:	f3ef 8305 	mrs	r3, IPSR
 8006706:	603b      	str	r3, [r7, #0]
  return(result);
 8006708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800670e:	f06f 0305 	mvn.w	r3, #5
 8006712:	607b      	str	r3, [r7, #4]
 8006714:	e00c      	b.n	8006730 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006716:	4b0a      	ldr	r3, [pc, #40]	@ (8006740 <osKernelInitialize+0x44>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d105      	bne.n	800672a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800671e:	4b08      	ldr	r3, [pc, #32]	@ (8006740 <osKernelInitialize+0x44>)
 8006720:	2201      	movs	r2, #1
 8006722:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006724:	2300      	movs	r3, #0
 8006726:	607b      	str	r3, [r7, #4]
 8006728:	e002      	b.n	8006730 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800672a:	f04f 33ff 	mov.w	r3, #4294967295
 800672e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006730:	687b      	ldr	r3, [r7, #4]
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop
 8006740:	20000320 	.word	0x20000320

08006744 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006744:	b580      	push	{r7, lr}
 8006746:	b082      	sub	sp, #8
 8006748:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800674a:	f3ef 8305 	mrs	r3, IPSR
 800674e:	603b      	str	r3, [r7, #0]
  return(result);
 8006750:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006756:	f06f 0305 	mvn.w	r3, #5
 800675a:	607b      	str	r3, [r7, #4]
 800675c:	e010      	b.n	8006780 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800675e:	4b0b      	ldr	r3, [pc, #44]	@ (800678c <osKernelStart+0x48>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d109      	bne.n	800677a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006766:	f7ff ffbf 	bl	80066e8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800676a:	4b08      	ldr	r3, [pc, #32]	@ (800678c <osKernelStart+0x48>)
 800676c:	2202      	movs	r2, #2
 800676e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006770:	f001 fa14 	bl	8007b9c <vTaskStartScheduler>
      stat = osOK;
 8006774:	2300      	movs	r3, #0
 8006776:	607b      	str	r3, [r7, #4]
 8006778:	e002      	b.n	8006780 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800677a:	f04f 33ff 	mov.w	r3, #4294967295
 800677e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006780:	687b      	ldr	r3, [r7, #4]
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20000320 	.word	0x20000320

08006790 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006790:	b580      	push	{r7, lr}
 8006792:	b08e      	sub	sp, #56	@ 0x38
 8006794:	af04      	add	r7, sp, #16
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800679c:	2300      	movs	r3, #0
 800679e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067a0:	f3ef 8305 	mrs	r3, IPSR
 80067a4:	617b      	str	r3, [r7, #20]
  return(result);
 80067a6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d17e      	bne.n	80068aa <osThreadNew+0x11a>
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d07b      	beq.n	80068aa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80067b2:	2380      	movs	r3, #128	@ 0x80
 80067b4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80067b6:	2318      	movs	r3, #24
 80067b8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80067ba:	2300      	movs	r3, #0
 80067bc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80067be:	f04f 33ff 	mov.w	r3, #4294967295
 80067c2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d045      	beq.n	8006856 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <osThreadNew+0x48>
        name = attr->name;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d002      	beq.n	80067e6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d008      	beq.n	80067fe <osThreadNew+0x6e>
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	2b38      	cmp	r3, #56	@ 0x38
 80067f0:	d805      	bhi.n	80067fe <osThreadNew+0x6e>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <osThreadNew+0x72>
        return (NULL);
 80067fe:	2300      	movs	r3, #0
 8006800:	e054      	b.n	80068ac <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d003      	beq.n	8006812 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	089b      	lsrs	r3, r3, #2
 8006810:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d00e      	beq.n	8006838 <osThreadNew+0xa8>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	2b5b      	cmp	r3, #91	@ 0x5b
 8006820:	d90a      	bls.n	8006838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006826:	2b00      	cmp	r3, #0
 8006828:	d006      	beq.n	8006838 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d002      	beq.n	8006838 <osThreadNew+0xa8>
        mem = 1;
 8006832:	2301      	movs	r3, #1
 8006834:	61bb      	str	r3, [r7, #24]
 8006836:	e010      	b.n	800685a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d10c      	bne.n	800685a <osThreadNew+0xca>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d108      	bne.n	800685a <osThreadNew+0xca>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d104      	bne.n	800685a <osThreadNew+0xca>
          mem = 0;
 8006850:	2300      	movs	r3, #0
 8006852:	61bb      	str	r3, [r7, #24]
 8006854:	e001      	b.n	800685a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006856:	2300      	movs	r3, #0
 8006858:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d110      	bne.n	8006882 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006868:	9202      	str	r2, [sp, #8]
 800686a:	9301      	str	r3, [sp, #4]
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	9300      	str	r3, [sp, #0]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	6a3a      	ldr	r2, [r7, #32]
 8006874:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 fed8 	bl	800762c <xTaskCreateStatic>
 800687c:	4603      	mov	r3, r0
 800687e:	613b      	str	r3, [r7, #16]
 8006880:	e013      	b.n	80068aa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d110      	bne.n	80068aa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	b29a      	uxth	r2, r3
 800688c:	f107 0310 	add.w	r3, r7, #16
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 ff26 	bl	80076ec <xTaskCreate>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d001      	beq.n	80068aa <osThreadNew+0x11a>
            hTask = NULL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80068aa:	693b      	ldr	r3, [r7, #16]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3728      	adds	r7, #40	@ 0x28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068bc:	f3ef 8305 	mrs	r3, IPSR
 80068c0:	60bb      	str	r3, [r7, #8]
  return(result);
 80068c2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <osDelay+0x1c>
    stat = osErrorISR;
 80068c8:	f06f 0305 	mvn.w	r3, #5
 80068cc:	60fb      	str	r3, [r7, #12]
 80068ce:	e007      	b.n	80068e0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80068d0:	2300      	movs	r3, #0
 80068d2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f001 f8c0 	bl	8007a60 <vTaskDelay>
    }
  }

  return (stat);
 80068e0:	68fb      	ldr	r3, [r7, #12]
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3710      	adds	r7, #16
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b084      	sub	sp, #16
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	f002 fa7a 	bl	8008dec <pvTimerGetTimerID>
 80068f8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d005      	beq.n	800690c <TimerCallback+0x22>
    callb->func (callb->arg);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	6852      	ldr	r2, [r2, #4]
 8006908:	4610      	mov	r0, r2
 800690a:	4798      	blx	r3
  }
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b08c      	sub	sp, #48	@ 0x30
 8006918:	af02      	add	r7, sp, #8
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	607a      	str	r2, [r7, #4]
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	460b      	mov	r3, r1
 8006922:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8006924:	2300      	movs	r3, #0
 8006926:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006928:	f3ef 8305 	mrs	r3, IPSR
 800692c:	613b      	str	r3, [r7, #16]
  return(result);
 800692e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8006930:	2b00      	cmp	r3, #0
 8006932:	d163      	bne.n	80069fc <osTimerNew+0xe8>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d060      	beq.n	80069fc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800693a:	2008      	movs	r0, #8
 800693c:	f002 fcce 	bl	80092dc <pvPortMalloc>
 8006940:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d059      	beq.n	80069fc <osTimerNew+0xe8>
      callb->func = func;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8006954:	7afb      	ldrb	r3, [r7, #11]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d102      	bne.n	8006960 <osTimerNew+0x4c>
        reload = pdFALSE;
 800695a:	2300      	movs	r3, #0
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	e001      	b.n	8006964 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8006960:	2301      	movs	r3, #1
 8006962:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8006964:	f04f 33ff 	mov.w	r3, #4294967295
 8006968:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800696a:	2300      	movs	r3, #0
 800696c:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d01c      	beq.n	80069ae <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <osTimerNew+0x6e>
          name = attr->name;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d006      	beq.n	8006998 <osTimerNew+0x84>
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	68db      	ldr	r3, [r3, #12]
 800698e:	2b2b      	cmp	r3, #43	@ 0x2b
 8006990:	d902      	bls.n	8006998 <osTimerNew+0x84>
          mem = 1;
 8006992:	2301      	movs	r3, #1
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	e00c      	b.n	80069b2 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d108      	bne.n	80069b2 <osTimerNew+0x9e>
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	68db      	ldr	r3, [r3, #12]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d104      	bne.n	80069b2 <osTimerNew+0x9e>
            mem = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	e001      	b.n	80069b2 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80069ae:	2300      	movs	r3, #0
 80069b0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d10c      	bne.n	80069d2 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	4b12      	ldr	r3, [pc, #72]	@ (8006a08 <osTimerNew+0xf4>)
 80069c0:	9300      	str	r3, [sp, #0]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	2101      	movs	r1, #1
 80069c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80069ca:	f001 fe82 	bl	80086d2 <xTimerCreateStatic>
 80069ce:	6238      	str	r0, [r7, #32]
 80069d0:	e00b      	b.n	80069ea <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d108      	bne.n	80069ea <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80069d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006a08 <osTimerNew+0xf4>)
 80069da:	9300      	str	r3, [sp, #0]
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	2101      	movs	r1, #1
 80069e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80069e4:	f001 fe54 	bl	8008690 <xTimerCreate>
 80069e8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80069ea:	6a3b      	ldr	r3, [r7, #32]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d105      	bne.n	80069fc <osTimerNew+0xe8>
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d002      	beq.n	80069fc <osTimerNew+0xe8>
        vPortFree (callb);
 80069f6:	6978      	ldr	r0, [r7, #20]
 80069f8:	f002 fd3e 	bl	8009478 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80069fc:	6a3b      	ldr	r3, [r7, #32]
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3728      	adds	r7, #40	@ 0x28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	080068eb 	.word	0x080068eb

08006a0c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b088      	sub	sp, #32
 8006a10:	af02      	add	r7, sp, #8
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a1a:	f3ef 8305 	mrs	r3, IPSR
 8006a1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a20:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <osTimerStart+0x22>
    stat = osErrorISR;
 8006a26:	f06f 0305 	mvn.w	r3, #5
 8006a2a:	617b      	str	r3, [r7, #20]
 8006a2c:	e017      	b.n	8006a5e <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d103      	bne.n	8006a3c <osTimerStart+0x30>
    stat = osErrorParameter;
 8006a34:	f06f 0303 	mvn.w	r3, #3
 8006a38:	617b      	str	r3, [r7, #20]
 8006a3a:	e010      	b.n	8006a5e <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	2300      	movs	r3, #0
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	2104      	movs	r1, #4
 8006a46:	6938      	ldr	r0, [r7, #16]
 8006a48:	f001 fec0 	bl	80087cc <xTimerGenericCommand>
 8006a4c:	4603      	mov	r3, r0
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d102      	bne.n	8006a58 <osTimerStart+0x4c>
      stat = osOK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	617b      	str	r3, [r7, #20]
 8006a56:	e002      	b.n	8006a5e <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8006a58:	f06f 0302 	mvn.w	r3, #2
 8006a5c:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8006a5e:	697b      	ldr	r3, [r7, #20]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3718      	adds	r7, #24
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4a07      	ldr	r2, [pc, #28]	@ (8006a94 <vApplicationGetIdleTaskMemory+0x2c>)
 8006a78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	4a06      	ldr	r2, [pc, #24]	@ (8006a98 <vApplicationGetIdleTaskMemory+0x30>)
 8006a7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2280      	movs	r2, #128	@ 0x80
 8006a84:	601a      	str	r2, [r3, #0]
}
 8006a86:	bf00      	nop
 8006a88:	3714      	adds	r7, #20
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	20000324 	.word	0x20000324
 8006a98:	20000380 	.word	0x20000380

08006a9c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006a9c:	b480      	push	{r7}
 8006a9e:	b085      	sub	sp, #20
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	60f8      	str	r0, [r7, #12]
 8006aa4:	60b9      	str	r1, [r7, #8]
 8006aa6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4a07      	ldr	r2, [pc, #28]	@ (8006ac8 <vApplicationGetTimerTaskMemory+0x2c>)
 8006aac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4a06      	ldr	r2, [pc, #24]	@ (8006acc <vApplicationGetTimerTaskMemory+0x30>)
 8006ab2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006aba:	601a      	str	r2, [r3, #0]
}
 8006abc:	bf00      	nop
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	20000580 	.word	0x20000580
 8006acc:	200005dc 	.word	0x200005dc

08006ad0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f103 0208 	add.w	r2, r3, #8
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ae8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f103 0208 	add.w	r2, r3, #8
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f103 0208 	add.w	r2, r3, #8
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006b1e:	bf00      	nop
 8006b20:	370c      	adds	r7, #12
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr

08006b2a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b085      	sub	sp, #20
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
 8006b32:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	689b      	ldr	r3, [r3, #8]
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	687a      	ldr	r2, [r7, #4]
 8006b5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	1c5a      	adds	r2, r3, #1
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	601a      	str	r2, [r3, #0]
}
 8006b66:	bf00      	nop
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b88:	d103      	bne.n	8006b92 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	691b      	ldr	r3, [r3, #16]
 8006b8e:	60fb      	str	r3, [r7, #12]
 8006b90:	e00c      	b.n	8006bac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	3308      	adds	r3, #8
 8006b96:	60fb      	str	r3, [r7, #12]
 8006b98:	e002      	b.n	8006ba0 <vListInsert+0x2e>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	60fb      	str	r3, [r7, #12]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d2f6      	bcs.n	8006b9a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685a      	ldr	r2, [r3, #4]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	683a      	ldr	r2, [r7, #0]
 8006bba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	68fa      	ldr	r2, [r7, #12]
 8006bc0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	683a      	ldr	r2, [r7, #0]
 8006bc6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	687a      	ldr	r2, [r7, #4]
 8006bcc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	601a      	str	r2, [r3, #0]
}
 8006bd8:	bf00      	nop
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	6892      	ldr	r2, [r2, #8]
 8006bfa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	687a      	ldr	r2, [r7, #4]
 8006c02:	6852      	ldr	r2, [r2, #4]
 8006c04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	429a      	cmp	r2, r3
 8006c0e:	d103      	bne.n	8006c18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689a      	ldr	r2, [r3, #8]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	1e5a      	subs	r2, r3, #1
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d10b      	bne.n	8006c64 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c50:	f383 8811 	msr	BASEPRI, r3
 8006c54:	f3bf 8f6f 	isb	sy
 8006c58:	f3bf 8f4f 	dsb	sy
 8006c5c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006c5e:	bf00      	nop
 8006c60:	bf00      	nop
 8006c62:	e7fd      	b.n	8006c60 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006c64:	f002 fa18 	bl	8009098 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c70:	68f9      	ldr	r1, [r7, #12]
 8006c72:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c74:	fb01 f303 	mul.w	r3, r1, r3
 8006c78:	441a      	add	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2200      	movs	r2, #0
 8006c82:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681a      	ldr	r2, [r3, #0]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c94:	3b01      	subs	r3, #1
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006c9a:	fb01 f303 	mul.w	r3, r1, r3
 8006c9e:	441a      	add	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	22ff      	movs	r2, #255	@ 0xff
 8006ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	22ff      	movs	r2, #255	@ 0xff
 8006cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d114      	bne.n	8006ce4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d01a      	beq.n	8006cf8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	3310      	adds	r3, #16
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	f001 f9f6 	bl	80080b8 <xTaskRemoveFromEventList>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d012      	beq.n	8006cf8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006d08 <xQueueGenericReset+0xd0>)
 8006cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd8:	601a      	str	r2, [r3, #0]
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	f3bf 8f6f 	isb	sy
 8006ce2:	e009      	b.n	8006cf8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	3310      	adds	r3, #16
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7ff fef1 	bl	8006ad0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	3324      	adds	r3, #36	@ 0x24
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f7ff feec 	bl	8006ad0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006cf8:	f002 fa00 	bl	80090fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006cfc:	2301      	movs	r3, #1
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	e000ed04 	.word	0xe000ed04

08006d0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b08e      	sub	sp, #56	@ 0x38
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
 8006d18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d10b      	bne.n	8006d38 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d24:	f383 8811 	msr	BASEPRI, r3
 8006d28:	f3bf 8f6f 	isb	sy
 8006d2c:	f3bf 8f4f 	dsb	sy
 8006d30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006d32:	bf00      	nop
 8006d34:	bf00      	nop
 8006d36:	e7fd      	b.n	8006d34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d10b      	bne.n	8006d56 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	e7fd      	b.n	8006d52 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d002      	beq.n	8006d62 <xQueueGenericCreateStatic+0x56>
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d001      	beq.n	8006d66 <xQueueGenericCreateStatic+0x5a>
 8006d62:	2301      	movs	r3, #1
 8006d64:	e000      	b.n	8006d68 <xQueueGenericCreateStatic+0x5c>
 8006d66:	2300      	movs	r3, #0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10b      	bne.n	8006d84 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d70:	f383 8811 	msr	BASEPRI, r3
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	f3bf 8f4f 	dsb	sy
 8006d7c:	623b      	str	r3, [r7, #32]
}
 8006d7e:	bf00      	nop
 8006d80:	bf00      	nop
 8006d82:	e7fd      	b.n	8006d80 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d102      	bne.n	8006d90 <xQueueGenericCreateStatic+0x84>
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d101      	bne.n	8006d94 <xQueueGenericCreateStatic+0x88>
 8006d90:	2301      	movs	r3, #1
 8006d92:	e000      	b.n	8006d96 <xQueueGenericCreateStatic+0x8a>
 8006d94:	2300      	movs	r3, #0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d10b      	bne.n	8006db2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	61fb      	str	r3, [r7, #28]
}
 8006dac:	bf00      	nop
 8006dae:	bf00      	nop
 8006db0:	e7fd      	b.n	8006dae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006db2:	2350      	movs	r3, #80	@ 0x50
 8006db4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	2b50      	cmp	r3, #80	@ 0x50
 8006dba:	d00b      	beq.n	8006dd4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	61bb      	str	r3, [r7, #24]
}
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	e7fd      	b.n	8006dd0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006dd4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00d      	beq.n	8006dfc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006de8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006dec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	4613      	mov	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f000 f805 	bl	8006e06 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	3730      	adds	r7, #48	@ 0x30
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	60f8      	str	r0, [r7, #12]
 8006e0e:	60b9      	str	r1, [r7, #8]
 8006e10:	607a      	str	r2, [r7, #4]
 8006e12:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d103      	bne.n	8006e22 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	69ba      	ldr	r2, [r7, #24]
 8006e1e:	601a      	str	r2, [r3, #0]
 8006e20:	e002      	b.n	8006e28 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	687a      	ldr	r2, [r7, #4]
 8006e26:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006e34:	2101      	movs	r1, #1
 8006e36:	69b8      	ldr	r0, [r7, #24]
 8006e38:	f7ff fefe 	bl	8006c38 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	78fa      	ldrb	r2, [r7, #3]
 8006e40:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006e44:	bf00      	nop
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b08e      	sub	sp, #56	@ 0x38
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d10b      	bne.n	8006e80 <xQueueGenericSend+0x34>
	__asm volatile
 8006e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6c:	f383 8811 	msr	BASEPRI, r3
 8006e70:	f3bf 8f6f 	isb	sy
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e7a:	bf00      	nop
 8006e7c:	bf00      	nop
 8006e7e:	e7fd      	b.n	8006e7c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d103      	bne.n	8006e8e <xQueueGenericSend+0x42>
 8006e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d101      	bne.n	8006e92 <xQueueGenericSend+0x46>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e000      	b.n	8006e94 <xQueueGenericSend+0x48>
 8006e92:	2300      	movs	r3, #0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d10b      	bne.n	8006eb0 <xQueueGenericSend+0x64>
	__asm volatile
 8006e98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e9c:	f383 8811 	msr	BASEPRI, r3
 8006ea0:	f3bf 8f6f 	isb	sy
 8006ea4:	f3bf 8f4f 	dsb	sy
 8006ea8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006eaa:	bf00      	nop
 8006eac:	bf00      	nop
 8006eae:	e7fd      	b.n	8006eac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d103      	bne.n	8006ebe <xQueueGenericSend+0x72>
 8006eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d101      	bne.n	8006ec2 <xQueueGenericSend+0x76>
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e000      	b.n	8006ec4 <xQueueGenericSend+0x78>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d10b      	bne.n	8006ee0 <xQueueGenericSend+0x94>
	__asm volatile
 8006ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ecc:	f383 8811 	msr	BASEPRI, r3
 8006ed0:	f3bf 8f6f 	isb	sy
 8006ed4:	f3bf 8f4f 	dsb	sy
 8006ed8:	623b      	str	r3, [r7, #32]
}
 8006eda:	bf00      	nop
 8006edc:	bf00      	nop
 8006ede:	e7fd      	b.n	8006edc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006ee0:	f001 faaa 	bl	8008438 <xTaskGetSchedulerState>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d102      	bne.n	8006ef0 <xQueueGenericSend+0xa4>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d101      	bne.n	8006ef4 <xQueueGenericSend+0xa8>
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	e000      	b.n	8006ef6 <xQueueGenericSend+0xaa>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d10b      	bne.n	8006f12 <xQueueGenericSend+0xc6>
	__asm volatile
 8006efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	61fb      	str	r3, [r7, #28]
}
 8006f0c:	bf00      	nop
 8006f0e:	bf00      	nop
 8006f10:	e7fd      	b.n	8006f0e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f12:	f002 f8c1 	bl	8009098 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f18:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d302      	bcc.n	8006f28 <xQueueGenericSend+0xdc>
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	2b02      	cmp	r3, #2
 8006f26:	d129      	bne.n	8006f7c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f28:	683a      	ldr	r2, [r7, #0]
 8006f2a:	68b9      	ldr	r1, [r7, #8]
 8006f2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006f2e:	f000 fa0f 	bl	8007350 <prvCopyDataToQueue>
 8006f32:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d010      	beq.n	8006f5e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3e:	3324      	adds	r3, #36	@ 0x24
 8006f40:	4618      	mov	r0, r3
 8006f42:	f001 f8b9 	bl	80080b8 <xTaskRemoveFromEventList>
 8006f46:	4603      	mov	r3, r0
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d013      	beq.n	8006f74 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006f4c:	4b3f      	ldr	r3, [pc, #252]	@ (800704c <xQueueGenericSend+0x200>)
 8006f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	e00a      	b.n	8006f74 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d007      	beq.n	8006f74 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006f64:	4b39      	ldr	r3, [pc, #228]	@ (800704c <xQueueGenericSend+0x200>)
 8006f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f6a:	601a      	str	r2, [r3, #0]
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006f74:	f002 f8c2 	bl	80090fc <vPortExitCritical>
				return pdPASS;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e063      	b.n	8007044 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d103      	bne.n	8006f8a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006f82:	f002 f8bb 	bl	80090fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	e05c      	b.n	8007044 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d106      	bne.n	8006f9e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006f90:	f107 0314 	add.w	r3, r7, #20
 8006f94:	4618      	mov	r0, r3
 8006f96:	f001 f8f3 	bl	8008180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f9e:	f002 f8ad 	bl	80090fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006fa2:	f000 fe63 	bl	8007c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006fa6:	f002 f877 	bl	8009098 <vPortEnterCritical>
 8006faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fb0:	b25b      	sxtb	r3, r3
 8006fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fb6:	d103      	bne.n	8006fc0 <xQueueGenericSend+0x174>
 8006fb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fc6:	b25b      	sxtb	r3, r3
 8006fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fcc:	d103      	bne.n	8006fd6 <xQueueGenericSend+0x18a>
 8006fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fd6:	f002 f891 	bl	80090fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fda:	1d3a      	adds	r2, r7, #4
 8006fdc:	f107 0314 	add.w	r3, r7, #20
 8006fe0:	4611      	mov	r1, r2
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f001 f8e2 	bl	80081ac <xTaskCheckForTimeOut>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d124      	bne.n	8007038 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006fee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ff0:	f000 faa6 	bl	8007540 <prvIsQueueFull>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d018      	beq.n	800702c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	3310      	adds	r3, #16
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	4611      	mov	r1, r2
 8007002:	4618      	mov	r0, r3
 8007004:	f001 f806 	bl	8008014 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007008:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800700a:	f000 fa31 	bl	8007470 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800700e:	f000 fe3b 	bl	8007c88 <xTaskResumeAll>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	f47f af7c 	bne.w	8006f12 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800701a:	4b0c      	ldr	r3, [pc, #48]	@ (800704c <xQueueGenericSend+0x200>)
 800701c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007020:	601a      	str	r2, [r3, #0]
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	e772      	b.n	8006f12 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800702c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800702e:	f000 fa1f 	bl	8007470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007032:	f000 fe29 	bl	8007c88 <xTaskResumeAll>
 8007036:	e76c      	b.n	8006f12 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007038:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800703a:	f000 fa19 	bl	8007470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800703e:	f000 fe23 	bl	8007c88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007042:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007044:	4618      	mov	r0, r3
 8007046:	3738      	adds	r7, #56	@ 0x38
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	e000ed04 	.word	0xe000ed04

08007050 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b090      	sub	sp, #64	@ 0x40
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	2b00      	cmp	r3, #0
 8007066:	d10b      	bne.n	8007080 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800706c:	f383 8811 	msr	BASEPRI, r3
 8007070:	f3bf 8f6f 	isb	sy
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800707a:	bf00      	nop
 800707c:	bf00      	nop
 800707e:	e7fd      	b.n	800707c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d103      	bne.n	800708e <xQueueGenericSendFromISR+0x3e>
 8007086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <xQueueGenericSendFromISR+0x42>
 800708e:	2301      	movs	r3, #1
 8007090:	e000      	b.n	8007094 <xQueueGenericSendFromISR+0x44>
 8007092:	2300      	movs	r3, #0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10b      	bne.n	80070b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709c:	f383 8811 	msr	BASEPRI, r3
 80070a0:	f3bf 8f6f 	isb	sy
 80070a4:	f3bf 8f4f 	dsb	sy
 80070a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80070aa:	bf00      	nop
 80070ac:	bf00      	nop
 80070ae:	e7fd      	b.n	80070ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d103      	bne.n	80070be <xQueueGenericSendFromISR+0x6e>
 80070b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d101      	bne.n	80070c2 <xQueueGenericSendFromISR+0x72>
 80070be:	2301      	movs	r3, #1
 80070c0:	e000      	b.n	80070c4 <xQueueGenericSendFromISR+0x74>
 80070c2:	2300      	movs	r3, #0
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d10b      	bne.n	80070e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80070c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070cc:	f383 8811 	msr	BASEPRI, r3
 80070d0:	f3bf 8f6f 	isb	sy
 80070d4:	f3bf 8f4f 	dsb	sy
 80070d8:	623b      	str	r3, [r7, #32]
}
 80070da:	bf00      	nop
 80070dc:	bf00      	nop
 80070de:	e7fd      	b.n	80070dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070e0:	f002 f8ba 	bl	8009258 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80070e4:	f3ef 8211 	mrs	r2, BASEPRI
 80070e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ec:	f383 8811 	msr	BASEPRI, r3
 80070f0:	f3bf 8f6f 	isb	sy
 80070f4:	f3bf 8f4f 	dsb	sy
 80070f8:	61fa      	str	r2, [r7, #28]
 80070fa:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80070fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007102:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007108:	429a      	cmp	r2, r3
 800710a:	d302      	bcc.n	8007112 <xQueueGenericSendFromISR+0xc2>
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	2b02      	cmp	r3, #2
 8007110:	d12f      	bne.n	8007172 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007118:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800711c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007120:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	68b9      	ldr	r1, [r7, #8]
 8007126:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007128:	f000 f912 	bl	8007350 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800712c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007134:	d112      	bne.n	800715c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800713a:	2b00      	cmp	r3, #0
 800713c:	d016      	beq.n	800716c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800713e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007140:	3324      	adds	r3, #36	@ 0x24
 8007142:	4618      	mov	r0, r3
 8007144:	f000 ffb8 	bl	80080b8 <xTaskRemoveFromEventList>
 8007148:	4603      	mov	r3, r0
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00e      	beq.n	800716c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00b      	beq.n	800716c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	601a      	str	r2, [r3, #0]
 800715a:	e007      	b.n	800716c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800715c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007160:	3301      	adds	r3, #1
 8007162:	b2db      	uxtb	r3, r3
 8007164:	b25a      	sxtb	r2, r3
 8007166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800716c:	2301      	movs	r3, #1
 800716e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007170:	e001      	b.n	8007176 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007172:	2300      	movs	r3, #0
 8007174:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007176:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007178:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007180:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007182:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007184:	4618      	mov	r0, r3
 8007186:	3740      	adds	r7, #64	@ 0x40
 8007188:	46bd      	mov	sp, r7
 800718a:	bd80      	pop	{r7, pc}

0800718c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b08c      	sub	sp, #48	@ 0x30
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007198:	2300      	movs	r3, #0
 800719a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80071a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d10b      	bne.n	80071be <xQueueReceive+0x32>
	__asm volatile
 80071a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071aa:	f383 8811 	msr	BASEPRI, r3
 80071ae:	f3bf 8f6f 	isb	sy
 80071b2:	f3bf 8f4f 	dsb	sy
 80071b6:	623b      	str	r3, [r7, #32]
}
 80071b8:	bf00      	nop
 80071ba:	bf00      	nop
 80071bc:	e7fd      	b.n	80071ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d103      	bne.n	80071cc <xQueueReceive+0x40>
 80071c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <xQueueReceive+0x44>
 80071cc:	2301      	movs	r3, #1
 80071ce:	e000      	b.n	80071d2 <xQueueReceive+0x46>
 80071d0:	2300      	movs	r3, #0
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d10b      	bne.n	80071ee <xQueueReceive+0x62>
	__asm volatile
 80071d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	61fb      	str	r3, [r7, #28]
}
 80071e8:	bf00      	nop
 80071ea:	bf00      	nop
 80071ec:	e7fd      	b.n	80071ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80071ee:	f001 f923 	bl	8008438 <xTaskGetSchedulerState>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d102      	bne.n	80071fe <xQueueReceive+0x72>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <xQueueReceive+0x76>
 80071fe:	2301      	movs	r3, #1
 8007200:	e000      	b.n	8007204 <xQueueReceive+0x78>
 8007202:	2300      	movs	r3, #0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10b      	bne.n	8007220 <xQueueReceive+0x94>
	__asm volatile
 8007208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800720c:	f383 8811 	msr	BASEPRI, r3
 8007210:	f3bf 8f6f 	isb	sy
 8007214:	f3bf 8f4f 	dsb	sy
 8007218:	61bb      	str	r3, [r7, #24]
}
 800721a:	bf00      	nop
 800721c:	bf00      	nop
 800721e:	e7fd      	b.n	800721c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007220:	f001 ff3a 	bl	8009098 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	d01f      	beq.n	8007270 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007230:	68b9      	ldr	r1, [r7, #8]
 8007232:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007234:	f000 f8f6 	bl	8007424 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723a:	1e5a      	subs	r2, r3, #1
 800723c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800723e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d00f      	beq.n	8007268 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800724a:	3310      	adds	r3, #16
 800724c:	4618      	mov	r0, r3
 800724e:	f000 ff33 	bl	80080b8 <xTaskRemoveFromEventList>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d007      	beq.n	8007268 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007258:	4b3c      	ldr	r3, [pc, #240]	@ (800734c <xQueueReceive+0x1c0>)
 800725a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800725e:	601a      	str	r2, [r3, #0]
 8007260:	f3bf 8f4f 	dsb	sy
 8007264:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007268:	f001 ff48 	bl	80090fc <vPortExitCritical>
				return pdPASS;
 800726c:	2301      	movs	r3, #1
 800726e:	e069      	b.n	8007344 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d103      	bne.n	800727e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007276:	f001 ff41 	bl	80090fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800727a:	2300      	movs	r3, #0
 800727c:	e062      	b.n	8007344 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800727e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007280:	2b00      	cmp	r3, #0
 8007282:	d106      	bne.n	8007292 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007284:	f107 0310 	add.w	r3, r7, #16
 8007288:	4618      	mov	r0, r3
 800728a:	f000 ff79 	bl	8008180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800728e:	2301      	movs	r3, #1
 8007290:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007292:	f001 ff33 	bl	80090fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007296:	f000 fce9 	bl	8007c6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800729a:	f001 fefd 	bl	8009098 <vPortEnterCritical>
 800729e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072a4:	b25b      	sxtb	r3, r3
 80072a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072aa:	d103      	bne.n	80072b4 <xQueueReceive+0x128>
 80072ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80072b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072ba:	b25b      	sxtb	r3, r3
 80072bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072c0:	d103      	bne.n	80072ca <xQueueReceive+0x13e>
 80072c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c4:	2200      	movs	r2, #0
 80072c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80072ca:	f001 ff17 	bl	80090fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80072ce:	1d3a      	adds	r2, r7, #4
 80072d0:	f107 0310 	add.w	r3, r7, #16
 80072d4:	4611      	mov	r1, r2
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 ff68 	bl	80081ac <xTaskCheckForTimeOut>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d123      	bne.n	800732a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80072e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072e4:	f000 f916 	bl	8007514 <prvIsQueueEmpty>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d017      	beq.n	800731e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80072ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f0:	3324      	adds	r3, #36	@ 0x24
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	4611      	mov	r1, r2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 fe8c 	bl	8008014 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80072fc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80072fe:	f000 f8b7 	bl	8007470 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007302:	f000 fcc1 	bl	8007c88 <xTaskResumeAll>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d189      	bne.n	8007220 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800730c:	4b0f      	ldr	r3, [pc, #60]	@ (800734c <xQueueReceive+0x1c0>)
 800730e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007312:	601a      	str	r2, [r3, #0]
 8007314:	f3bf 8f4f 	dsb	sy
 8007318:	f3bf 8f6f 	isb	sy
 800731c:	e780      	b.n	8007220 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800731e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007320:	f000 f8a6 	bl	8007470 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007324:	f000 fcb0 	bl	8007c88 <xTaskResumeAll>
 8007328:	e77a      	b.n	8007220 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800732a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800732c:	f000 f8a0 	bl	8007470 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007330:	f000 fcaa 	bl	8007c88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007334:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007336:	f000 f8ed 	bl	8007514 <prvIsQueueEmpty>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	f43f af6f 	beq.w	8007220 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007342:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007344:	4618      	mov	r0, r3
 8007346:	3730      	adds	r7, #48	@ 0x30
 8007348:	46bd      	mov	sp, r7
 800734a:	bd80      	pop	{r7, pc}
 800734c:	e000ed04 	.word	0xe000ed04

08007350 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b086      	sub	sp, #24
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800735c:	2300      	movs	r3, #0
 800735e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007364:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736a:	2b00      	cmp	r3, #0
 800736c:	d10d      	bne.n	800738a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d14d      	bne.n	8007412 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	689b      	ldr	r3, [r3, #8]
 800737a:	4618      	mov	r0, r3
 800737c:	f001 f87a 	bl	8008474 <xTaskPriorityDisinherit>
 8007380:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	609a      	str	r2, [r3, #8]
 8007388:	e043      	b.n	8007412 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d119      	bne.n	80073c4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	6858      	ldr	r0, [r3, #4]
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007398:	461a      	mov	r2, r3
 800739a:	68b9      	ldr	r1, [r7, #8]
 800739c:	f002 f9b8 	bl	8009710 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a8:	441a      	add	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	685a      	ldr	r2, [r3, #4]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d32b      	bcc.n	8007412 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681a      	ldr	r2, [r3, #0]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	605a      	str	r2, [r3, #4]
 80073c2:	e026      	b.n	8007412 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68d8      	ldr	r0, [r3, #12]
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073cc:	461a      	mov	r2, r3
 80073ce:	68b9      	ldr	r1, [r7, #8]
 80073d0:	f002 f99e 	bl	8009710 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073dc:	425b      	negs	r3, r3
 80073de:	441a      	add	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	68da      	ldr	r2, [r3, #12]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d207      	bcs.n	8007400 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689a      	ldr	r2, [r3, #8]
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f8:	425b      	negs	r3, r3
 80073fa:	441a      	add	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b02      	cmp	r3, #2
 8007404:	d105      	bne.n	8007412 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800740c:	693b      	ldr	r3, [r7, #16]
 800740e:	3b01      	subs	r3, #1
 8007410:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1c5a      	adds	r2, r3, #1
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800741a:	697b      	ldr	r3, [r7, #20]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3718      	adds	r7, #24
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007424:	b580      	push	{r7, lr}
 8007426:	b082      	sub	sp, #8
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
 800742c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007432:	2b00      	cmp	r3, #0
 8007434:	d018      	beq.n	8007468 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800743e:	441a      	add	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	429a      	cmp	r2, r3
 800744e:	d303      	bcc.n	8007458 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68d9      	ldr	r1, [r3, #12]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007460:	461a      	mov	r2, r3
 8007462:	6838      	ldr	r0, [r7, #0]
 8007464:	f002 f954 	bl	8009710 <memcpy>
	}
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007478:	f001 fe0e 	bl	8009098 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007482:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007484:	e011      	b.n	80074aa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800748a:	2b00      	cmp	r3, #0
 800748c:	d012      	beq.n	80074b4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3324      	adds	r3, #36	@ 0x24
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fe10 	bl	80080b8 <xTaskRemoveFromEventList>
 8007498:	4603      	mov	r3, r0
 800749a:	2b00      	cmp	r3, #0
 800749c:	d001      	beq.n	80074a2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800749e:	f000 fee9 	bl	8008274 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80074a2:	7bfb      	ldrb	r3, [r7, #15]
 80074a4:	3b01      	subs	r3, #1
 80074a6:	b2db      	uxtb	r3, r3
 80074a8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80074aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	dce9      	bgt.n	8007486 <prvUnlockQueue+0x16>
 80074b2:	e000      	b.n	80074b6 <prvUnlockQueue+0x46>
					break;
 80074b4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	22ff      	movs	r2, #255	@ 0xff
 80074ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80074be:	f001 fe1d 	bl	80090fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80074c2:	f001 fde9 	bl	8009098 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074cc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074ce:	e011      	b.n	80074f4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	691b      	ldr	r3, [r3, #16]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d012      	beq.n	80074fe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3310      	adds	r3, #16
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fdeb 	bl	80080b8 <xTaskRemoveFromEventList>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d001      	beq.n	80074ec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80074e8:	f000 fec4 	bl	8008274 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80074ec:	7bbb      	ldrb	r3, [r7, #14]
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80074f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	dce9      	bgt.n	80074d0 <prvUnlockQueue+0x60>
 80074fc:	e000      	b.n	8007500 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074fe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	22ff      	movs	r2, #255	@ 0xff
 8007504:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007508:	f001 fdf8 	bl	80090fc <vPortExitCritical>
}
 800750c:	bf00      	nop
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800751c:	f001 fdbc 	bl	8009098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007524:	2b00      	cmp	r3, #0
 8007526:	d102      	bne.n	800752e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007528:	2301      	movs	r3, #1
 800752a:	60fb      	str	r3, [r7, #12]
 800752c:	e001      	b.n	8007532 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800752e:	2300      	movs	r3, #0
 8007530:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007532:	f001 fde3 	bl	80090fc <vPortExitCritical>

	return xReturn;
 8007536:	68fb      	ldr	r3, [r7, #12]
}
 8007538:	4618      	mov	r0, r3
 800753a:	3710      	adds	r7, #16
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}

08007540 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007548:	f001 fda6 	bl	8009098 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007554:	429a      	cmp	r2, r3
 8007556:	d102      	bne.n	800755e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007558:	2301      	movs	r3, #1
 800755a:	60fb      	str	r3, [r7, #12]
 800755c:	e001      	b.n	8007562 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800755e:	2300      	movs	r3, #0
 8007560:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007562:	f001 fdcb 	bl	80090fc <vPortExitCritical>

	return xReturn;
 8007566:	68fb      	ldr	r3, [r7, #12]
}
 8007568:	4618      	mov	r0, r3
 800756a:	3710      	adds	r7, #16
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
 8007578:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800757a:	2300      	movs	r3, #0
 800757c:	60fb      	str	r3, [r7, #12]
 800757e:	e014      	b.n	80075aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007580:	4a0f      	ldr	r2, [pc, #60]	@ (80075c0 <vQueueAddToRegistry+0x50>)
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10b      	bne.n	80075a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800758c:	490c      	ldr	r1, [pc, #48]	@ (80075c0 <vQueueAddToRegistry+0x50>)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	683a      	ldr	r2, [r7, #0]
 8007592:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007596:	4a0a      	ldr	r2, [pc, #40]	@ (80075c0 <vQueueAddToRegistry+0x50>)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	00db      	lsls	r3, r3, #3
 800759c:	4413      	add	r3, r2
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80075a2:	e006      	b.n	80075b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3301      	adds	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b07      	cmp	r3, #7
 80075ae:	d9e7      	bls.n	8007580 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80075b0:	bf00      	nop
 80075b2:	bf00      	nop
 80075b4:	3714      	adds	r7, #20
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	200009dc 	.word	0x200009dc

080075c4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	60f8      	str	r0, [r7, #12]
 80075cc:	60b9      	str	r1, [r7, #8]
 80075ce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075d4:	f001 fd60 	bl	8009098 <vPortEnterCritical>
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80075de:	b25b      	sxtb	r3, r3
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e4:	d103      	bne.n	80075ee <vQueueWaitForMessageRestricted+0x2a>
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2200      	movs	r2, #0
 80075ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80075f4:	b25b      	sxtb	r3, r3
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fa:	d103      	bne.n	8007604 <vQueueWaitForMessageRestricted+0x40>
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	2200      	movs	r2, #0
 8007600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007604:	f001 fd7a 	bl	80090fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	3324      	adds	r3, #36	@ 0x24
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	68b9      	ldr	r1, [r7, #8]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 fd21 	bl	8008060 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800761e:	6978      	ldr	r0, [r7, #20]
 8007620:	f7ff ff26 	bl	8007470 <prvUnlockQueue>
	}
 8007624:	bf00      	nop
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800762c:	b580      	push	{r7, lr}
 800762e:	b08e      	sub	sp, #56	@ 0x38
 8007630:	af04      	add	r7, sp, #16
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800763a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800763c:	2b00      	cmp	r3, #0
 800763e:	d10b      	bne.n	8007658 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007644:	f383 8811 	msr	BASEPRI, r3
 8007648:	f3bf 8f6f 	isb	sy
 800764c:	f3bf 8f4f 	dsb	sy
 8007650:	623b      	str	r3, [r7, #32]
}
 8007652:	bf00      	nop
 8007654:	bf00      	nop
 8007656:	e7fd      	b.n	8007654 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800765a:	2b00      	cmp	r3, #0
 800765c:	d10b      	bne.n	8007676 <xTaskCreateStatic+0x4a>
	__asm volatile
 800765e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007662:	f383 8811 	msr	BASEPRI, r3
 8007666:	f3bf 8f6f 	isb	sy
 800766a:	f3bf 8f4f 	dsb	sy
 800766e:	61fb      	str	r3, [r7, #28]
}
 8007670:	bf00      	nop
 8007672:	bf00      	nop
 8007674:	e7fd      	b.n	8007672 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007676:	235c      	movs	r3, #92	@ 0x5c
 8007678:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	2b5c      	cmp	r3, #92	@ 0x5c
 800767e:	d00b      	beq.n	8007698 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007684:	f383 8811 	msr	BASEPRI, r3
 8007688:	f3bf 8f6f 	isb	sy
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	61bb      	str	r3, [r7, #24]
}
 8007692:	bf00      	nop
 8007694:	bf00      	nop
 8007696:	e7fd      	b.n	8007694 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007698:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800769a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800769c:	2b00      	cmp	r3, #0
 800769e:	d01e      	beq.n	80076de <xTaskCreateStatic+0xb2>
 80076a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d01b      	beq.n	80076de <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076a8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80076ae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b2:	2202      	movs	r2, #2
 80076b4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076b8:	2300      	movs	r3, #0
 80076ba:	9303      	str	r3, [sp, #12]
 80076bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076be:	9302      	str	r3, [sp, #8]
 80076c0:	f107 0314 	add.w	r3, r7, #20
 80076c4:	9301      	str	r3, [sp, #4]
 80076c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c8:	9300      	str	r3, [sp, #0]
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	68b9      	ldr	r1, [r7, #8]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f000 f850 	bl	8007776 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076d6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076d8:	f000 f8de 	bl	8007898 <prvAddNewTaskToReadyList>
 80076dc:	e001      	b.n	80076e2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076e2:	697b      	ldr	r3, [r7, #20]
	}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3728      	adds	r7, #40	@ 0x28
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b08c      	sub	sp, #48	@ 0x30
 80076f0:	af04      	add	r7, sp, #16
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	603b      	str	r3, [r7, #0]
 80076f8:	4613      	mov	r3, r2
 80076fa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076fc:	88fb      	ldrh	r3, [r7, #6]
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	4618      	mov	r0, r3
 8007702:	f001 fdeb 	bl	80092dc <pvPortMalloc>
 8007706:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00e      	beq.n	800772c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800770e:	205c      	movs	r0, #92	@ 0x5c
 8007710:	f001 fde4 	bl	80092dc <pvPortMalloc>
 8007714:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	631a      	str	r2, [r3, #48]	@ 0x30
 8007722:	e005      	b.n	8007730 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007724:	6978      	ldr	r0, [r7, #20]
 8007726:	f001 fea7 	bl	8009478 <vPortFree>
 800772a:	e001      	b.n	8007730 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800772c:	2300      	movs	r3, #0
 800772e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d017      	beq.n	8007766 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	2200      	movs	r2, #0
 800773a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800773e:	88fa      	ldrh	r2, [r7, #6]
 8007740:	2300      	movs	r3, #0
 8007742:	9303      	str	r3, [sp, #12]
 8007744:	69fb      	ldr	r3, [r7, #28]
 8007746:	9302      	str	r3, [sp, #8]
 8007748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800774a:	9301      	str	r3, [sp, #4]
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	68b9      	ldr	r1, [r7, #8]
 8007754:	68f8      	ldr	r0, [r7, #12]
 8007756:	f000 f80e 	bl	8007776 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800775a:	69f8      	ldr	r0, [r7, #28]
 800775c:	f000 f89c 	bl	8007898 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007760:	2301      	movs	r3, #1
 8007762:	61bb      	str	r3, [r7, #24]
 8007764:	e002      	b.n	800776c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007766:	f04f 33ff 	mov.w	r3, #4294967295
 800776a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800776c:	69bb      	ldr	r3, [r7, #24]
	}
 800776e:	4618      	mov	r0, r3
 8007770:	3720      	adds	r7, #32
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b088      	sub	sp, #32
 800777a:	af00      	add	r7, sp, #0
 800777c:	60f8      	str	r0, [r7, #12]
 800777e:	60b9      	str	r1, [r7, #8]
 8007780:	607a      	str	r2, [r7, #4]
 8007782:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007786:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	461a      	mov	r2, r3
 800778e:	21a5      	movs	r1, #165	@ 0xa5
 8007790:	f001 ff92 	bl	80096b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800779e:	3b01      	subs	r3, #1
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	4413      	add	r3, r2
 80077a4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	f023 0307 	bic.w	r3, r3, #7
 80077ac:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	f003 0307 	and.w	r3, r3, #7
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00b      	beq.n	80077d0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	617b      	str	r3, [r7, #20]
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	e7fd      	b.n	80077cc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d01f      	beq.n	8007816 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077d6:	2300      	movs	r3, #0
 80077d8:	61fb      	str	r3, [r7, #28]
 80077da:	e012      	b.n	8007802 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	4413      	add	r3, r2
 80077e2:	7819      	ldrb	r1, [r3, #0]
 80077e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4413      	add	r3, r2
 80077ea:	3334      	adds	r3, #52	@ 0x34
 80077ec:	460a      	mov	r2, r1
 80077ee:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	69fb      	ldr	r3, [r7, #28]
 80077f4:	4413      	add	r3, r2
 80077f6:	781b      	ldrb	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d006      	beq.n	800780a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077fc:	69fb      	ldr	r3, [r7, #28]
 80077fe:	3301      	adds	r3, #1
 8007800:	61fb      	str	r3, [r7, #28]
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	2b0f      	cmp	r3, #15
 8007806:	d9e9      	bls.n	80077dc <prvInitialiseNewTask+0x66>
 8007808:	e000      	b.n	800780c <prvInitialiseNewTask+0x96>
			{
				break;
 800780a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800780c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780e:	2200      	movs	r2, #0
 8007810:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007814:	e003      	b.n	800781e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	2200      	movs	r2, #0
 800781a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800781e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007820:	2b37      	cmp	r3, #55	@ 0x37
 8007822:	d901      	bls.n	8007828 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007824:	2337      	movs	r3, #55	@ 0x37
 8007826:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800782c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800782e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007830:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007832:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007836:	2200      	movs	r2, #0
 8007838:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	3304      	adds	r3, #4
 800783e:	4618      	mov	r0, r3
 8007840:	f7ff f966 	bl	8006b10 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007846:	3318      	adds	r3, #24
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff f961 	bl	8006b10 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800784e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007850:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007852:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007856:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800785a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800785e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007862:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007864:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007866:	2200      	movs	r2, #0
 8007868:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800786a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786c:	2200      	movs	r2, #0
 800786e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	68f9      	ldr	r1, [r7, #12]
 8007876:	69b8      	ldr	r0, [r7, #24]
 8007878:	f001 fada 	bl	8008e30 <pxPortInitialiseStack>
 800787c:	4602      	mov	r2, r0
 800787e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007880:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007884:	2b00      	cmp	r3, #0
 8007886:	d002      	beq.n	800788e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800788c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800788e:	bf00      	nop
 8007890:	3720      	adds	r7, #32
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078a0:	f001 fbfa 	bl	8009098 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078a4:	4b2d      	ldr	r3, [pc, #180]	@ (800795c <prvAddNewTaskToReadyList+0xc4>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	3301      	adds	r3, #1
 80078aa:	4a2c      	ldr	r2, [pc, #176]	@ (800795c <prvAddNewTaskToReadyList+0xc4>)
 80078ac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078ae:	4b2c      	ldr	r3, [pc, #176]	@ (8007960 <prvAddNewTaskToReadyList+0xc8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078b6:	4a2a      	ldr	r2, [pc, #168]	@ (8007960 <prvAddNewTaskToReadyList+0xc8>)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078bc:	4b27      	ldr	r3, [pc, #156]	@ (800795c <prvAddNewTaskToReadyList+0xc4>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d110      	bne.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078c4:	f000 fcfa 	bl	80082bc <prvInitialiseTaskLists>
 80078c8:	e00d      	b.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ca:	4b26      	ldr	r3, [pc, #152]	@ (8007964 <prvAddNewTaskToReadyList+0xcc>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078d2:	4b23      	ldr	r3, [pc, #140]	@ (8007960 <prvAddNewTaskToReadyList+0xc8>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078dc:	429a      	cmp	r2, r3
 80078de:	d802      	bhi.n	80078e6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80078e0:	4a1f      	ldr	r2, [pc, #124]	@ (8007960 <prvAddNewTaskToReadyList+0xc8>)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80078e6:	4b20      	ldr	r3, [pc, #128]	@ (8007968 <prvAddNewTaskToReadyList+0xd0>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3301      	adds	r3, #1
 80078ec:	4a1e      	ldr	r2, [pc, #120]	@ (8007968 <prvAddNewTaskToReadyList+0xd0>)
 80078ee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80078f0:	4b1d      	ldr	r3, [pc, #116]	@ (8007968 <prvAddNewTaskToReadyList+0xd0>)
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078fc:	4b1b      	ldr	r3, [pc, #108]	@ (800796c <prvAddNewTaskToReadyList+0xd4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	429a      	cmp	r2, r3
 8007902:	d903      	bls.n	800790c <prvAddNewTaskToReadyList+0x74>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007908:	4a18      	ldr	r2, [pc, #96]	@ (800796c <prvAddNewTaskToReadyList+0xd4>)
 800790a:	6013      	str	r3, [r2, #0]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007910:	4613      	mov	r3, r2
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	4a15      	ldr	r2, [pc, #84]	@ (8007970 <prvAddNewTaskToReadyList+0xd8>)
 800791a:	441a      	add	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3304      	adds	r3, #4
 8007920:	4619      	mov	r1, r3
 8007922:	4610      	mov	r0, r2
 8007924:	f7ff f901 	bl	8006b2a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007928:	f001 fbe8 	bl	80090fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800792c:	4b0d      	ldr	r3, [pc, #52]	@ (8007964 <prvAddNewTaskToReadyList+0xcc>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d00e      	beq.n	8007952 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007934:	4b0a      	ldr	r3, [pc, #40]	@ (8007960 <prvAddNewTaskToReadyList+0xc8>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793e:	429a      	cmp	r2, r3
 8007940:	d207      	bcs.n	8007952 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007942:	4b0c      	ldr	r3, [pc, #48]	@ (8007974 <prvAddNewTaskToReadyList+0xdc>)
 8007944:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	f3bf 8f4f 	dsb	sy
 800794e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007952:	bf00      	nop
 8007954:	3708      	adds	r7, #8
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	bf00      	nop
 800795c:	20000ef0 	.word	0x20000ef0
 8007960:	20000a1c 	.word	0x20000a1c
 8007964:	20000efc 	.word	0x20000efc
 8007968:	20000f0c 	.word	0x20000f0c
 800796c:	20000ef8 	.word	0x20000ef8
 8007970:	20000a20 	.word	0x20000a20
 8007974:	e000ed04 	.word	0xe000ed04

08007978 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8007980:	f001 fb8a 	bl	8009098 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d102      	bne.n	8007990 <vTaskDelete+0x18>
 800798a:	4b2d      	ldr	r3, [pc, #180]	@ (8007a40 <vTaskDelete+0xc8>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	e000      	b.n	8007992 <vTaskDelete+0x1a>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	3304      	adds	r3, #4
 8007998:	4618      	mov	r0, r3
 800799a:	f7ff f923 	bl	8006be4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d004      	beq.n	80079b0 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3318      	adds	r3, #24
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7ff f91a 	bl	8006be4 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80079b0:	4b24      	ldr	r3, [pc, #144]	@ (8007a44 <vTaskDelete+0xcc>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3301      	adds	r3, #1
 80079b6:	4a23      	ldr	r2, [pc, #140]	@ (8007a44 <vTaskDelete+0xcc>)
 80079b8:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80079ba:	4b21      	ldr	r3, [pc, #132]	@ (8007a40 <vTaskDelete+0xc8>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d10b      	bne.n	80079dc <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	3304      	adds	r3, #4
 80079c8:	4619      	mov	r1, r3
 80079ca:	481f      	ldr	r0, [pc, #124]	@ (8007a48 <vTaskDelete+0xd0>)
 80079cc:	f7ff f8ad 	bl	8006b2a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80079d0:	4b1e      	ldr	r3, [pc, #120]	@ (8007a4c <vTaskDelete+0xd4>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	3301      	adds	r3, #1
 80079d6:	4a1d      	ldr	r2, [pc, #116]	@ (8007a4c <vTaskDelete+0xd4>)
 80079d8:	6013      	str	r3, [r2, #0]
 80079da:	e009      	b.n	80079f0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80079dc:	4b1c      	ldr	r3, [pc, #112]	@ (8007a50 <vTaskDelete+0xd8>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	4a1b      	ldr	r2, [pc, #108]	@ (8007a50 <vTaskDelete+0xd8>)
 80079e4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80079e6:	68f8      	ldr	r0, [r7, #12]
 80079e8:	f000 fcd6 	bl	8008398 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80079ec:	f000 fd04 	bl	80083f8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80079f0:	f001 fb84 	bl	80090fc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80079f4:	4b17      	ldr	r3, [pc, #92]	@ (8007a54 <vTaskDelete+0xdc>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d01c      	beq.n	8007a36 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 80079fc:	4b10      	ldr	r3, [pc, #64]	@ (8007a40 <vTaskDelete+0xc8>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	68fa      	ldr	r2, [r7, #12]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d117      	bne.n	8007a36 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8007a06:	4b14      	ldr	r3, [pc, #80]	@ (8007a58 <vTaskDelete+0xe0>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00b      	beq.n	8007a26 <vTaskDelete+0xae>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a12:	f383 8811 	msr	BASEPRI, r3
 8007a16:	f3bf 8f6f 	isb	sy
 8007a1a:	f3bf 8f4f 	dsb	sy
 8007a1e:	60bb      	str	r3, [r7, #8]
}
 8007a20:	bf00      	nop
 8007a22:	bf00      	nop
 8007a24:	e7fd      	b.n	8007a22 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8007a26:	4b0d      	ldr	r3, [pc, #52]	@ (8007a5c <vTaskDelete+0xe4>)
 8007a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a2c:	601a      	str	r2, [r3, #0]
 8007a2e:	f3bf 8f4f 	dsb	sy
 8007a32:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007a36:	bf00      	nop
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000a1c 	.word	0x20000a1c
 8007a44:	20000f0c 	.word	0x20000f0c
 8007a48:	20000ec4 	.word	0x20000ec4
 8007a4c:	20000ed8 	.word	0x20000ed8
 8007a50:	20000ef0 	.word	0x20000ef0
 8007a54:	20000efc 	.word	0x20000efc
 8007a58:	20000f18 	.word	0x20000f18
 8007a5c:	e000ed04 	.word	0xe000ed04

08007a60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d018      	beq.n	8007aa4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007a72:	4b14      	ldr	r3, [pc, #80]	@ (8007ac4 <vTaskDelay+0x64>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00b      	beq.n	8007a92 <vTaskDelay+0x32>
	__asm volatile
 8007a7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a7e:	f383 8811 	msr	BASEPRI, r3
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	f3bf 8f4f 	dsb	sy
 8007a8a:	60bb      	str	r3, [r7, #8]
}
 8007a8c:	bf00      	nop
 8007a8e:	bf00      	nop
 8007a90:	e7fd      	b.n	8007a8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007a92:	f000 f8eb 	bl	8007c6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007a96:	2100      	movs	r1, #0
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fd5b 	bl	8008554 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007a9e:	f000 f8f3 	bl	8007c88 <xTaskResumeAll>
 8007aa2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d107      	bne.n	8007aba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007aaa:	4b07      	ldr	r3, [pc, #28]	@ (8007ac8 <vTaskDelay+0x68>)
 8007aac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ab0:	601a      	str	r2, [r3, #0]
 8007ab2:	f3bf 8f4f 	dsb	sy
 8007ab6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007aba:	bf00      	nop
 8007abc:	3710      	adds	r7, #16
 8007abe:	46bd      	mov	sp, r7
 8007ac0:	bd80      	pop	{r7, pc}
 8007ac2:	bf00      	nop
 8007ac4:	20000f18 	.word	0x20000f18
 8007ac8:	e000ed04 	.word	0xe000ed04

08007acc <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8007acc:	b580      	push	{r7, lr}
 8007ace:	b088      	sub	sp, #32
 8007ad0:	af00      	add	r7, sp, #0
 8007ad2:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8007ad8:	69bb      	ldr	r3, [r7, #24]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d10b      	bne.n	8007af6 <eTaskGetState+0x2a>
	__asm volatile
 8007ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae2:	f383 8811 	msr	BASEPRI, r3
 8007ae6:	f3bf 8f6f 	isb	sy
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	60bb      	str	r3, [r7, #8]
}
 8007af0:	bf00      	nop
 8007af2:	bf00      	nop
 8007af4:	e7fd      	b.n	8007af2 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8007af6:	4b24      	ldr	r3, [pc, #144]	@ (8007b88 <eTaskGetState+0xbc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	69ba      	ldr	r2, [r7, #24]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d102      	bne.n	8007b06 <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8007b00:	2300      	movs	r3, #0
 8007b02:	77fb      	strb	r3, [r7, #31]
 8007b04:	e03a      	b.n	8007b7c <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 8007b06:	f001 fac7 	bl	8009098 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8007b10:	4b1e      	ldr	r3, [pc, #120]	@ (8007b8c <eTaskGetState+0xc0>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8007b16:	4b1e      	ldr	r3, [pc, #120]	@ (8007b90 <eTaskGetState+0xc4>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8007b1c:	f001 faee 	bl	80090fc <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	693b      	ldr	r3, [r7, #16]
 8007b24:	429a      	cmp	r2, r3
 8007b26:	d003      	beq.n	8007b30 <eTaskGetState+0x64>
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	d102      	bne.n	8007b36 <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8007b30:	2302      	movs	r3, #2
 8007b32:	77fb      	strb	r3, [r7, #31]
 8007b34:	e022      	b.n	8007b7c <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	4a16      	ldr	r2, [pc, #88]	@ (8007b94 <eTaskGetState+0xc8>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d112      	bne.n	8007b64 <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8007b3e:	69bb      	ldr	r3, [r7, #24]
 8007b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10b      	bne.n	8007b5e <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d102      	bne.n	8007b58 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 8007b52:	2302      	movs	r3, #2
 8007b54:	77fb      	strb	r3, [r7, #31]
 8007b56:	e011      	b.n	8007b7c <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	77fb      	strb	r3, [r7, #31]
 8007b5c:	e00e      	b.n	8007b7c <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8007b5e:	2302      	movs	r3, #2
 8007b60:	77fb      	strb	r3, [r7, #31]
 8007b62:	e00b      	b.n	8007b7c <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	4a0c      	ldr	r2, [pc, #48]	@ (8007b98 <eTaskGetState+0xcc>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d002      	beq.n	8007b72 <eTaskGetState+0xa6>
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d102      	bne.n	8007b78 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8007b72:	2304      	movs	r3, #4
 8007b74:	77fb      	strb	r3, [r7, #31]
 8007b76:	e001      	b.n	8007b7c <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8007b7c:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3720      	adds	r7, #32
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20000a1c 	.word	0x20000a1c
 8007b8c:	20000ea8 	.word	0x20000ea8
 8007b90:	20000eac 	.word	0x20000eac
 8007b94:	20000edc 	.word	0x20000edc
 8007b98:	20000ec4 	.word	0x20000ec4

08007b9c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b08a      	sub	sp, #40	@ 0x28
 8007ba0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007baa:	463a      	mov	r2, r7
 8007bac:	1d39      	adds	r1, r7, #4
 8007bae:	f107 0308 	add.w	r3, r7, #8
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fe ff58 	bl	8006a68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	68ba      	ldr	r2, [r7, #8]
 8007bbe:	9202      	str	r2, [sp, #8]
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	9300      	str	r3, [sp, #0]
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	460a      	mov	r2, r1
 8007bca:	4922      	ldr	r1, [pc, #136]	@ (8007c54 <vTaskStartScheduler+0xb8>)
 8007bcc:	4822      	ldr	r0, [pc, #136]	@ (8007c58 <vTaskStartScheduler+0xbc>)
 8007bce:	f7ff fd2d 	bl	800762c <xTaskCreateStatic>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4a21      	ldr	r2, [pc, #132]	@ (8007c5c <vTaskStartScheduler+0xc0>)
 8007bd6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007bd8:	4b20      	ldr	r3, [pc, #128]	@ (8007c5c <vTaskStartScheduler+0xc0>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d002      	beq.n	8007be6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007be0:	2301      	movs	r3, #1
 8007be2:	617b      	str	r3, [r7, #20]
 8007be4:	e001      	b.n	8007bea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007be6:	2300      	movs	r3, #0
 8007be8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007bea:	697b      	ldr	r3, [r7, #20]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d102      	bne.n	8007bf6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007bf0:	f000 fd04 	bl	80085fc <xTimerCreateTimerTask>
 8007bf4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d116      	bne.n	8007c2a <vTaskStartScheduler+0x8e>
	__asm volatile
 8007bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c00:	f383 8811 	msr	BASEPRI, r3
 8007c04:	f3bf 8f6f 	isb	sy
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	613b      	str	r3, [r7, #16]
}
 8007c0e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c10:	4b13      	ldr	r3, [pc, #76]	@ (8007c60 <vTaskStartScheduler+0xc4>)
 8007c12:	f04f 32ff 	mov.w	r2, #4294967295
 8007c16:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c18:	4b12      	ldr	r3, [pc, #72]	@ (8007c64 <vTaskStartScheduler+0xc8>)
 8007c1a:	2201      	movs	r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c1e:	4b12      	ldr	r3, [pc, #72]	@ (8007c68 <vTaskStartScheduler+0xcc>)
 8007c20:	2200      	movs	r2, #0
 8007c22:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c24:	f001 f994 	bl	8008f50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c28:	e00f      	b.n	8007c4a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c30:	d10b      	bne.n	8007c4a <vTaskStartScheduler+0xae>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	60fb      	str	r3, [r7, #12]
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	e7fd      	b.n	8007c46 <vTaskStartScheduler+0xaa>
}
 8007c4a:	bf00      	nop
 8007c4c:	3718      	adds	r7, #24
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	bf00      	nop
 8007c54:	0800981c 	.word	0x0800981c
 8007c58:	0800828d 	.word	0x0800828d
 8007c5c:	20000f14 	.word	0x20000f14
 8007c60:	20000f10 	.word	0x20000f10
 8007c64:	20000efc 	.word	0x20000efc
 8007c68:	20000ef4 	.word	0x20000ef4

08007c6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007c70:	4b04      	ldr	r3, [pc, #16]	@ (8007c84 <vTaskSuspendAll+0x18>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3301      	adds	r3, #1
 8007c76:	4a03      	ldr	r2, [pc, #12]	@ (8007c84 <vTaskSuspendAll+0x18>)
 8007c78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007c7a:	bf00      	nop
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr
 8007c84:	20000f18 	.word	0x20000f18

08007c88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007c92:	2300      	movs	r3, #0
 8007c94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007c96:	4b42      	ldr	r3, [pc, #264]	@ (8007da0 <xTaskResumeAll+0x118>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10b      	bne.n	8007cb6 <xTaskResumeAll+0x2e>
	__asm volatile
 8007c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ca2:	f383 8811 	msr	BASEPRI, r3
 8007ca6:	f3bf 8f6f 	isb	sy
 8007caa:	f3bf 8f4f 	dsb	sy
 8007cae:	603b      	str	r3, [r7, #0]
}
 8007cb0:	bf00      	nop
 8007cb2:	bf00      	nop
 8007cb4:	e7fd      	b.n	8007cb2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007cb6:	f001 f9ef 	bl	8009098 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007cba:	4b39      	ldr	r3, [pc, #228]	@ (8007da0 <xTaskResumeAll+0x118>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	4a37      	ldr	r2, [pc, #220]	@ (8007da0 <xTaskResumeAll+0x118>)
 8007cc2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cc4:	4b36      	ldr	r3, [pc, #216]	@ (8007da0 <xTaskResumeAll+0x118>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d162      	bne.n	8007d92 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007ccc:	4b35      	ldr	r3, [pc, #212]	@ (8007da4 <xTaskResumeAll+0x11c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d05e      	beq.n	8007d92 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007cd4:	e02f      	b.n	8007d36 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd6:	4b34      	ldr	r3, [pc, #208]	@ (8007da8 <xTaskResumeAll+0x120>)
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	3318      	adds	r3, #24
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe ff7e 	bl	8006be4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	3304      	adds	r3, #4
 8007cec:	4618      	mov	r0, r3
 8007cee:	f7fe ff79 	bl	8006be4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf6:	4b2d      	ldr	r3, [pc, #180]	@ (8007dac <xTaskResumeAll+0x124>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	429a      	cmp	r2, r3
 8007cfc:	d903      	bls.n	8007d06 <xTaskResumeAll+0x7e>
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d02:	4a2a      	ldr	r2, [pc, #168]	@ (8007dac <xTaskResumeAll+0x124>)
 8007d04:	6013      	str	r3, [r2, #0]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d0a:	4613      	mov	r3, r2
 8007d0c:	009b      	lsls	r3, r3, #2
 8007d0e:	4413      	add	r3, r2
 8007d10:	009b      	lsls	r3, r3, #2
 8007d12:	4a27      	ldr	r2, [pc, #156]	@ (8007db0 <xTaskResumeAll+0x128>)
 8007d14:	441a      	add	r2, r3
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	3304      	adds	r3, #4
 8007d1a:	4619      	mov	r1, r3
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	f7fe ff04 	bl	8006b2a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d26:	4b23      	ldr	r3, [pc, #140]	@ (8007db4 <xTaskResumeAll+0x12c>)
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d302      	bcc.n	8007d36 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8007d30:	4b21      	ldr	r3, [pc, #132]	@ (8007db8 <xTaskResumeAll+0x130>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d36:	4b1c      	ldr	r3, [pc, #112]	@ (8007da8 <xTaskResumeAll+0x120>)
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1cb      	bne.n	8007cd6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d44:	f000 fb58 	bl	80083f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d48:	4b1c      	ldr	r3, [pc, #112]	@ (8007dbc <xTaskResumeAll+0x134>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d010      	beq.n	8007d76 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007d54:	f000 f846 	bl	8007de4 <xTaskIncrementTick>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007d5e:	4b16      	ldr	r3, [pc, #88]	@ (8007db8 <xTaskResumeAll+0x130>)
 8007d60:	2201      	movs	r2, #1
 8007d62:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	3b01      	subs	r3, #1
 8007d68:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d1f1      	bne.n	8007d54 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007d70:	4b12      	ldr	r3, [pc, #72]	@ (8007dbc <xTaskResumeAll+0x134>)
 8007d72:	2200      	movs	r2, #0
 8007d74:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007d76:	4b10      	ldr	r3, [pc, #64]	@ (8007db8 <xTaskResumeAll+0x130>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d009      	beq.n	8007d92 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007d82:	4b0f      	ldr	r3, [pc, #60]	@ (8007dc0 <xTaskResumeAll+0x138>)
 8007d84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d88:	601a      	str	r2, [r3, #0]
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007d92:	f001 f9b3 	bl	80090fc <vPortExitCritical>

	return xAlreadyYielded;
 8007d96:	68bb      	ldr	r3, [r7, #8]
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3710      	adds	r7, #16
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}
 8007da0:	20000f18 	.word	0x20000f18
 8007da4:	20000ef0 	.word	0x20000ef0
 8007da8:	20000eb0 	.word	0x20000eb0
 8007dac:	20000ef8 	.word	0x20000ef8
 8007db0:	20000a20 	.word	0x20000a20
 8007db4:	20000a1c 	.word	0x20000a1c
 8007db8:	20000f04 	.word	0x20000f04
 8007dbc:	20000f00 	.word	0x20000f00
 8007dc0:	e000ed04 	.word	0xe000ed04

08007dc4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007dca:	4b05      	ldr	r3, [pc, #20]	@ (8007de0 <xTaskGetTickCount+0x1c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007dd0:	687b      	ldr	r3, [r7, #4]
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	370c      	adds	r7, #12
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	20000ef4 	.word	0x20000ef4

08007de4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b086      	sub	sp, #24
 8007de8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007dee:	4b4f      	ldr	r3, [pc, #316]	@ (8007f2c <xTaskIncrementTick+0x148>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f040 8090 	bne.w	8007f18 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007df8:	4b4d      	ldr	r3, [pc, #308]	@ (8007f30 <xTaskIncrementTick+0x14c>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	3301      	adds	r3, #1
 8007dfe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e00:	4a4b      	ldr	r2, [pc, #300]	@ (8007f30 <xTaskIncrementTick+0x14c>)
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d121      	bne.n	8007e50 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e0c:	4b49      	ldr	r3, [pc, #292]	@ (8007f34 <xTaskIncrementTick+0x150>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00b      	beq.n	8007e2e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1a:	f383 8811 	msr	BASEPRI, r3
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	f3bf 8f4f 	dsb	sy
 8007e26:	603b      	str	r3, [r7, #0]
}
 8007e28:	bf00      	nop
 8007e2a:	bf00      	nop
 8007e2c:	e7fd      	b.n	8007e2a <xTaskIncrementTick+0x46>
 8007e2e:	4b41      	ldr	r3, [pc, #260]	@ (8007f34 <xTaskIncrementTick+0x150>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	60fb      	str	r3, [r7, #12]
 8007e34:	4b40      	ldr	r3, [pc, #256]	@ (8007f38 <xTaskIncrementTick+0x154>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a3e      	ldr	r2, [pc, #248]	@ (8007f34 <xTaskIncrementTick+0x150>)
 8007e3a:	6013      	str	r3, [r2, #0]
 8007e3c:	4a3e      	ldr	r2, [pc, #248]	@ (8007f38 <xTaskIncrementTick+0x154>)
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	6013      	str	r3, [r2, #0]
 8007e42:	4b3e      	ldr	r3, [pc, #248]	@ (8007f3c <xTaskIncrementTick+0x158>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	3301      	adds	r3, #1
 8007e48:	4a3c      	ldr	r2, [pc, #240]	@ (8007f3c <xTaskIncrementTick+0x158>)
 8007e4a:	6013      	str	r3, [r2, #0]
 8007e4c:	f000 fad4 	bl	80083f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e50:	4b3b      	ldr	r3, [pc, #236]	@ (8007f40 <xTaskIncrementTick+0x15c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	693a      	ldr	r2, [r7, #16]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d349      	bcc.n	8007eee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e5a:	4b36      	ldr	r3, [pc, #216]	@ (8007f34 <xTaskIncrementTick+0x150>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d104      	bne.n	8007e6e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e64:	4b36      	ldr	r3, [pc, #216]	@ (8007f40 <xTaskIncrementTick+0x15c>)
 8007e66:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6a:	601a      	str	r2, [r3, #0]
					break;
 8007e6c:	e03f      	b.n	8007eee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e6e:	4b31      	ldr	r3, [pc, #196]	@ (8007f34 <xTaskIncrementTick+0x150>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d203      	bcs.n	8007e8e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007e86:	4a2e      	ldr	r2, [pc, #184]	@ (8007f40 <xTaskIncrementTick+0x15c>)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007e8c:	e02f      	b.n	8007eee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	3304      	adds	r3, #4
 8007e92:	4618      	mov	r0, r3
 8007e94:	f7fe fea6 	bl	8006be4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d004      	beq.n	8007eaa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	3318      	adds	r3, #24
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f7fe fe9d 	bl	8006be4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007eae:	4b25      	ldr	r3, [pc, #148]	@ (8007f44 <xTaskIncrementTick+0x160>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d903      	bls.n	8007ebe <xTaskIncrementTick+0xda>
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eba:	4a22      	ldr	r2, [pc, #136]	@ (8007f44 <xTaskIncrementTick+0x160>)
 8007ebc:	6013      	str	r3, [r2, #0]
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ec2:	4613      	mov	r3, r2
 8007ec4:	009b      	lsls	r3, r3, #2
 8007ec6:	4413      	add	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4a1f      	ldr	r2, [pc, #124]	@ (8007f48 <xTaskIncrementTick+0x164>)
 8007ecc:	441a      	add	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	4610      	mov	r0, r2
 8007ed6:	f7fe fe28 	bl	8006b2a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ede:	4b1b      	ldr	r3, [pc, #108]	@ (8007f4c <xTaskIncrementTick+0x168>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d3b8      	bcc.n	8007e5a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007eec:	e7b5      	b.n	8007e5a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007eee:	4b17      	ldr	r3, [pc, #92]	@ (8007f4c <xTaskIncrementTick+0x168>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef4:	4914      	ldr	r1, [pc, #80]	@ (8007f48 <xTaskIncrementTick+0x164>)
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	440b      	add	r3, r1
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d901      	bls.n	8007f0a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007f06:	2301      	movs	r3, #1
 8007f08:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f0a:	4b11      	ldr	r3, [pc, #68]	@ (8007f50 <xTaskIncrementTick+0x16c>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d007      	beq.n	8007f22 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007f12:	2301      	movs	r3, #1
 8007f14:	617b      	str	r3, [r7, #20]
 8007f16:	e004      	b.n	8007f22 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f18:	4b0e      	ldr	r3, [pc, #56]	@ (8007f54 <xTaskIncrementTick+0x170>)
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	4a0d      	ldr	r2, [pc, #52]	@ (8007f54 <xTaskIncrementTick+0x170>)
 8007f20:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f22:	697b      	ldr	r3, [r7, #20]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000f18 	.word	0x20000f18
 8007f30:	20000ef4 	.word	0x20000ef4
 8007f34:	20000ea8 	.word	0x20000ea8
 8007f38:	20000eac 	.word	0x20000eac
 8007f3c:	20000f08 	.word	0x20000f08
 8007f40:	20000f10 	.word	0x20000f10
 8007f44:	20000ef8 	.word	0x20000ef8
 8007f48:	20000a20 	.word	0x20000a20
 8007f4c:	20000a1c 	.word	0x20000a1c
 8007f50:	20000f04 	.word	0x20000f04
 8007f54:	20000f00 	.word	0x20000f00

08007f58 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f5e:	4b28      	ldr	r3, [pc, #160]	@ (8008000 <vTaskSwitchContext+0xa8>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d003      	beq.n	8007f6e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f66:	4b27      	ldr	r3, [pc, #156]	@ (8008004 <vTaskSwitchContext+0xac>)
 8007f68:	2201      	movs	r2, #1
 8007f6a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f6c:	e042      	b.n	8007ff4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007f6e:	4b25      	ldr	r3, [pc, #148]	@ (8008004 <vTaskSwitchContext+0xac>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f74:	4b24      	ldr	r3, [pc, #144]	@ (8008008 <vTaskSwitchContext+0xb0>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	60fb      	str	r3, [r7, #12]
 8007f7a:	e011      	b.n	8007fa0 <vTaskSwitchContext+0x48>
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10b      	bne.n	8007f9a <vTaskSwitchContext+0x42>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	607b      	str	r3, [r7, #4]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <vTaskSwitchContext+0x3e>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	3b01      	subs	r3, #1
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	491a      	ldr	r1, [pc, #104]	@ (800800c <vTaskSwitchContext+0xb4>)
 8007fa2:	68fa      	ldr	r2, [r7, #12]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	009b      	lsls	r3, r3, #2
 8007fa8:	4413      	add	r3, r2
 8007faa:	009b      	lsls	r3, r3, #2
 8007fac:	440b      	add	r3, r1
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d0e3      	beq.n	8007f7c <vTaskSwitchContext+0x24>
 8007fb4:	68fa      	ldr	r2, [r7, #12]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4a13      	ldr	r2, [pc, #76]	@ (800800c <vTaskSwitchContext+0xb4>)
 8007fc0:	4413      	add	r3, r2
 8007fc2:	60bb      	str	r3, [r7, #8]
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	605a      	str	r2, [r3, #4]
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	685a      	ldr	r2, [r3, #4]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	429a      	cmp	r2, r3
 8007fd8:	d104      	bne.n	8007fe4 <vTaskSwitchContext+0x8c>
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	685a      	ldr	r2, [r3, #4]
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	605a      	str	r2, [r3, #4]
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	685b      	ldr	r3, [r3, #4]
 8007fe8:	68db      	ldr	r3, [r3, #12]
 8007fea:	4a09      	ldr	r2, [pc, #36]	@ (8008010 <vTaskSwitchContext+0xb8>)
 8007fec:	6013      	str	r3, [r2, #0]
 8007fee:	4a06      	ldr	r2, [pc, #24]	@ (8008008 <vTaskSwitchContext+0xb0>)
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6013      	str	r3, [r2, #0]
}
 8007ff4:	bf00      	nop
 8007ff6:	3714      	adds	r7, #20
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr
 8008000:	20000f18 	.word	0x20000f18
 8008004:	20000f04 	.word	0x20000f04
 8008008:	20000ef8 	.word	0x20000ef8
 800800c:	20000a20 	.word	0x20000a20
 8008010:	20000a1c 	.word	0x20000a1c

08008014 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10b      	bne.n	800803c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	60fb      	str	r3, [r7, #12]
}
 8008036:	bf00      	nop
 8008038:	bf00      	nop
 800803a:	e7fd      	b.n	8008038 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800803c:	4b07      	ldr	r3, [pc, #28]	@ (800805c <vTaskPlaceOnEventList+0x48>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3318      	adds	r3, #24
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7fe fd94 	bl	8006b72 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800804a:	2101      	movs	r1, #1
 800804c:	6838      	ldr	r0, [r7, #0]
 800804e:	f000 fa81 	bl	8008554 <prvAddCurrentTaskToDelayedList>
}
 8008052:	bf00      	nop
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	20000a1c 	.word	0x20000a1c

08008060 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008060:	b580      	push	{r7, lr}
 8008062:	b086      	sub	sp, #24
 8008064:	af00      	add	r7, sp, #0
 8008066:	60f8      	str	r0, [r7, #12]
 8008068:	60b9      	str	r1, [r7, #8]
 800806a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d10b      	bne.n	800808a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008076:	f383 8811 	msr	BASEPRI, r3
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	f3bf 8f4f 	dsb	sy
 8008082:	617b      	str	r3, [r7, #20]
}
 8008084:	bf00      	nop
 8008086:	bf00      	nop
 8008088:	e7fd      	b.n	8008086 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800808a:	4b0a      	ldr	r3, [pc, #40]	@ (80080b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3318      	adds	r3, #24
 8008090:	4619      	mov	r1, r3
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f7fe fd49 	bl	8006b2a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	d002      	beq.n	80080a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800809e:	f04f 33ff 	mov.w	r3, #4294967295
 80080a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80080a4:	6879      	ldr	r1, [r7, #4]
 80080a6:	68b8      	ldr	r0, [r7, #8]
 80080a8:	f000 fa54 	bl	8008554 <prvAddCurrentTaskToDelayedList>
	}
 80080ac:	bf00      	nop
 80080ae:	3718      	adds	r7, #24
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}
 80080b4:	20000a1c 	.word	0x20000a1c

080080b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b086      	sub	sp, #24
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d10b      	bne.n	80080e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80080ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	60fb      	str	r3, [r7, #12]
}
 80080e0:	bf00      	nop
 80080e2:	bf00      	nop
 80080e4:	e7fd      	b.n	80080e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80080e6:	693b      	ldr	r3, [r7, #16]
 80080e8:	3318      	adds	r3, #24
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fe fd7a 	bl	8006be4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008168 <xTaskRemoveFromEventList+0xb0>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d11d      	bne.n	8008134 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	3304      	adds	r3, #4
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fe fd71 	bl	8006be4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008106:	4b19      	ldr	r3, [pc, #100]	@ (800816c <xTaskRemoveFromEventList+0xb4>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	429a      	cmp	r2, r3
 800810c:	d903      	bls.n	8008116 <xTaskRemoveFromEventList+0x5e>
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008112:	4a16      	ldr	r2, [pc, #88]	@ (800816c <xTaskRemoveFromEventList+0xb4>)
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800811a:	4613      	mov	r3, r2
 800811c:	009b      	lsls	r3, r3, #2
 800811e:	4413      	add	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4a13      	ldr	r2, [pc, #76]	@ (8008170 <xTaskRemoveFromEventList+0xb8>)
 8008124:	441a      	add	r2, r3
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	3304      	adds	r3, #4
 800812a:	4619      	mov	r1, r3
 800812c:	4610      	mov	r0, r2
 800812e:	f7fe fcfc 	bl	8006b2a <vListInsertEnd>
 8008132:	e005      	b.n	8008140 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	3318      	adds	r3, #24
 8008138:	4619      	mov	r1, r3
 800813a:	480e      	ldr	r0, [pc, #56]	@ (8008174 <xTaskRemoveFromEventList+0xbc>)
 800813c:	f7fe fcf5 	bl	8006b2a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008144:	4b0c      	ldr	r3, [pc, #48]	@ (8008178 <xTaskRemoveFromEventList+0xc0>)
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814a:	429a      	cmp	r2, r3
 800814c:	d905      	bls.n	800815a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800814e:	2301      	movs	r3, #1
 8008150:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008152:	4b0a      	ldr	r3, [pc, #40]	@ (800817c <xTaskRemoveFromEventList+0xc4>)
 8008154:	2201      	movs	r2, #1
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	e001      	b.n	800815e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800815a:	2300      	movs	r3, #0
 800815c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800815e:	697b      	ldr	r3, [r7, #20]
}
 8008160:	4618      	mov	r0, r3
 8008162:	3718      	adds	r7, #24
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	20000f18 	.word	0x20000f18
 800816c:	20000ef8 	.word	0x20000ef8
 8008170:	20000a20 	.word	0x20000a20
 8008174:	20000eb0 	.word	0x20000eb0
 8008178:	20000a1c 	.word	0x20000a1c
 800817c:	20000f04 	.word	0x20000f04

08008180 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008188:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <vTaskInternalSetTimeOutState+0x24>)
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008190:	4b05      	ldr	r3, [pc, #20]	@ (80081a8 <vTaskInternalSetTimeOutState+0x28>)
 8008192:	681a      	ldr	r2, [r3, #0]
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	605a      	str	r2, [r3, #4]
}
 8008198:	bf00      	nop
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	20000f08 	.word	0x20000f08
 80081a8:	20000ef4 	.word	0x20000ef4

080081ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d10b      	bne.n	80081d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80081bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c0:	f383 8811 	msr	BASEPRI, r3
 80081c4:	f3bf 8f6f 	isb	sy
 80081c8:	f3bf 8f4f 	dsb	sy
 80081cc:	613b      	str	r3, [r7, #16]
}
 80081ce:	bf00      	nop
 80081d0:	bf00      	nop
 80081d2:	e7fd      	b.n	80081d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d10b      	bne.n	80081f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80081da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081de:	f383 8811 	msr	BASEPRI, r3
 80081e2:	f3bf 8f6f 	isb	sy
 80081e6:	f3bf 8f4f 	dsb	sy
 80081ea:	60fb      	str	r3, [r7, #12]
}
 80081ec:	bf00      	nop
 80081ee:	bf00      	nop
 80081f0:	e7fd      	b.n	80081ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80081f2:	f000 ff51 	bl	8009098 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80081f6:	4b1d      	ldr	r3, [pc, #116]	@ (800826c <xTaskCheckForTimeOut+0xc0>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	69ba      	ldr	r2, [r7, #24]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800820e:	d102      	bne.n	8008216 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008210:	2300      	movs	r3, #0
 8008212:	61fb      	str	r3, [r7, #28]
 8008214:	e023      	b.n	800825e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	4b15      	ldr	r3, [pc, #84]	@ (8008270 <xTaskCheckForTimeOut+0xc4>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d007      	beq.n	8008232 <xTaskCheckForTimeOut+0x86>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	429a      	cmp	r2, r3
 800822a:	d302      	bcc.n	8008232 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800822c:	2301      	movs	r3, #1
 800822e:	61fb      	str	r3, [r7, #28]
 8008230:	e015      	b.n	800825e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	429a      	cmp	r2, r3
 800823a:	d20b      	bcs.n	8008254 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	697b      	ldr	r3, [r7, #20]
 8008242:	1ad2      	subs	r2, r2, r3
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f7ff ff99 	bl	8008180 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800824e:	2300      	movs	r3, #0
 8008250:	61fb      	str	r3, [r7, #28]
 8008252:	e004      	b.n	800825e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	2200      	movs	r2, #0
 8008258:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800825a:	2301      	movs	r3, #1
 800825c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800825e:	f000 ff4d 	bl	80090fc <vPortExitCritical>

	return xReturn;
 8008262:	69fb      	ldr	r3, [r7, #28]
}
 8008264:	4618      	mov	r0, r3
 8008266:	3720      	adds	r7, #32
 8008268:	46bd      	mov	sp, r7
 800826a:	bd80      	pop	{r7, pc}
 800826c:	20000ef4 	.word	0x20000ef4
 8008270:	20000f08 	.word	0x20000f08

08008274 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008274:	b480      	push	{r7}
 8008276:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008278:	4b03      	ldr	r3, [pc, #12]	@ (8008288 <vTaskMissedYield+0x14>)
 800827a:	2201      	movs	r2, #1
 800827c:	601a      	str	r2, [r3, #0]
}
 800827e:	bf00      	nop
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr
 8008288:	20000f04 	.word	0x20000f04

0800828c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008294:	f000 f852 	bl	800833c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008298:	4b06      	ldr	r3, [pc, #24]	@ (80082b4 <prvIdleTask+0x28>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d9f9      	bls.n	8008294 <prvIdleTask+0x8>
			{
				taskYIELD();
 80082a0:	4b05      	ldr	r3, [pc, #20]	@ (80082b8 <prvIdleTask+0x2c>)
 80082a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082a6:	601a      	str	r2, [r3, #0]
 80082a8:	f3bf 8f4f 	dsb	sy
 80082ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80082b0:	e7f0      	b.n	8008294 <prvIdleTask+0x8>
 80082b2:	bf00      	nop
 80082b4:	20000a20 	.word	0x20000a20
 80082b8:	e000ed04 	.word	0xe000ed04

080082bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082c2:	2300      	movs	r3, #0
 80082c4:	607b      	str	r3, [r7, #4]
 80082c6:	e00c      	b.n	80082e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	4613      	mov	r3, r2
 80082cc:	009b      	lsls	r3, r3, #2
 80082ce:	4413      	add	r3, r2
 80082d0:	009b      	lsls	r3, r3, #2
 80082d2:	4a12      	ldr	r2, [pc, #72]	@ (800831c <prvInitialiseTaskLists+0x60>)
 80082d4:	4413      	add	r3, r2
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fe fbfa 	bl	8006ad0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3301      	adds	r3, #1
 80082e0:	607b      	str	r3, [r7, #4]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2b37      	cmp	r3, #55	@ 0x37
 80082e6:	d9ef      	bls.n	80082c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80082e8:	480d      	ldr	r0, [pc, #52]	@ (8008320 <prvInitialiseTaskLists+0x64>)
 80082ea:	f7fe fbf1 	bl	8006ad0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80082ee:	480d      	ldr	r0, [pc, #52]	@ (8008324 <prvInitialiseTaskLists+0x68>)
 80082f0:	f7fe fbee 	bl	8006ad0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80082f4:	480c      	ldr	r0, [pc, #48]	@ (8008328 <prvInitialiseTaskLists+0x6c>)
 80082f6:	f7fe fbeb 	bl	8006ad0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80082fa:	480c      	ldr	r0, [pc, #48]	@ (800832c <prvInitialiseTaskLists+0x70>)
 80082fc:	f7fe fbe8 	bl	8006ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008300:	480b      	ldr	r0, [pc, #44]	@ (8008330 <prvInitialiseTaskLists+0x74>)
 8008302:	f7fe fbe5 	bl	8006ad0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008306:	4b0b      	ldr	r3, [pc, #44]	@ (8008334 <prvInitialiseTaskLists+0x78>)
 8008308:	4a05      	ldr	r2, [pc, #20]	@ (8008320 <prvInitialiseTaskLists+0x64>)
 800830a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800830c:	4b0a      	ldr	r3, [pc, #40]	@ (8008338 <prvInitialiseTaskLists+0x7c>)
 800830e:	4a05      	ldr	r2, [pc, #20]	@ (8008324 <prvInitialiseTaskLists+0x68>)
 8008310:	601a      	str	r2, [r3, #0]
}
 8008312:	bf00      	nop
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20000a20 	.word	0x20000a20
 8008320:	20000e80 	.word	0x20000e80
 8008324:	20000e94 	.word	0x20000e94
 8008328:	20000eb0 	.word	0x20000eb0
 800832c:	20000ec4 	.word	0x20000ec4
 8008330:	20000edc 	.word	0x20000edc
 8008334:	20000ea8 	.word	0x20000ea8
 8008338:	20000eac 	.word	0x20000eac

0800833c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008342:	e019      	b.n	8008378 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008344:	f000 fea8 	bl	8009098 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008348:	4b10      	ldr	r3, [pc, #64]	@ (800838c <prvCheckTasksWaitingTermination+0x50>)
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	68db      	ldr	r3, [r3, #12]
 800834e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3304      	adds	r3, #4
 8008354:	4618      	mov	r0, r3
 8008356:	f7fe fc45 	bl	8006be4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800835a:	4b0d      	ldr	r3, [pc, #52]	@ (8008390 <prvCheckTasksWaitingTermination+0x54>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	3b01      	subs	r3, #1
 8008360:	4a0b      	ldr	r2, [pc, #44]	@ (8008390 <prvCheckTasksWaitingTermination+0x54>)
 8008362:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008364:	4b0b      	ldr	r3, [pc, #44]	@ (8008394 <prvCheckTasksWaitingTermination+0x58>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	3b01      	subs	r3, #1
 800836a:	4a0a      	ldr	r2, [pc, #40]	@ (8008394 <prvCheckTasksWaitingTermination+0x58>)
 800836c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800836e:	f000 fec5 	bl	80090fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f810 	bl	8008398 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008378:	4b06      	ldr	r3, [pc, #24]	@ (8008394 <prvCheckTasksWaitingTermination+0x58>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d1e1      	bne.n	8008344 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008380:	bf00      	nop
 8008382:	bf00      	nop
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
 800838a:	bf00      	nop
 800838c:	20000ec4 	.word	0x20000ec4
 8008390:	20000ef0 	.word	0x20000ef0
 8008394:	20000ed8 	.word	0x20000ed8

08008398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008398:	b580      	push	{r7, lr}
 800839a:	b084      	sub	sp, #16
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d108      	bne.n	80083bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ae:	4618      	mov	r0, r3
 80083b0:	f001 f862 	bl	8009478 <vPortFree>
				vPortFree( pxTCB );
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f001 f85f 	bl	8009478 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80083ba:	e019      	b.n	80083f0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	d103      	bne.n	80083ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 f856 	bl	8009478 <vPortFree>
	}
 80083cc:	e010      	b.n	80083f0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d00b      	beq.n	80083f0 <prvDeleteTCB+0x58>
	__asm volatile
 80083d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083dc:	f383 8811 	msr	BASEPRI, r3
 80083e0:	f3bf 8f6f 	isb	sy
 80083e4:	f3bf 8f4f 	dsb	sy
 80083e8:	60fb      	str	r3, [r7, #12]
}
 80083ea:	bf00      	nop
 80083ec:	bf00      	nop
 80083ee:	e7fd      	b.n	80083ec <prvDeleteTCB+0x54>
	}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80083f8:	b480      	push	{r7}
 80083fa:	b083      	sub	sp, #12
 80083fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008430 <prvResetNextTaskUnblockTime+0x38>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d104      	bne.n	8008412 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008408:	4b0a      	ldr	r3, [pc, #40]	@ (8008434 <prvResetNextTaskUnblockTime+0x3c>)
 800840a:	f04f 32ff 	mov.w	r2, #4294967295
 800840e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008410:	e008      	b.n	8008424 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008412:	4b07      	ldr	r3, [pc, #28]	@ (8008430 <prvResetNextTaskUnblockTime+0x38>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	68db      	ldr	r3, [r3, #12]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	4a04      	ldr	r2, [pc, #16]	@ (8008434 <prvResetNextTaskUnblockTime+0x3c>)
 8008422:	6013      	str	r3, [r2, #0]
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr
 8008430:	20000ea8 	.word	0x20000ea8
 8008434:	20000f10 	.word	0x20000f10

08008438 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800843e:	4b0b      	ldr	r3, [pc, #44]	@ (800846c <xTaskGetSchedulerState+0x34>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d102      	bne.n	800844c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008446:	2301      	movs	r3, #1
 8008448:	607b      	str	r3, [r7, #4]
 800844a:	e008      	b.n	800845e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800844c:	4b08      	ldr	r3, [pc, #32]	@ (8008470 <xTaskGetSchedulerState+0x38>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008454:	2302      	movs	r3, #2
 8008456:	607b      	str	r3, [r7, #4]
 8008458:	e001      	b.n	800845e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800845a:	2300      	movs	r3, #0
 800845c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800845e:	687b      	ldr	r3, [r7, #4]
	}
 8008460:	4618      	mov	r0, r3
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	20000efc 	.word	0x20000efc
 8008470:	20000f18 	.word	0x20000f18

08008474 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008474:	b580      	push	{r7, lr}
 8008476:	b086      	sub	sp, #24
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008480:	2300      	movs	r3, #0
 8008482:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d058      	beq.n	800853c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800848a:	4b2f      	ldr	r3, [pc, #188]	@ (8008548 <xTaskPriorityDisinherit+0xd4>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	429a      	cmp	r2, r3
 8008492:	d00b      	beq.n	80084ac <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008498:	f383 8811 	msr	BASEPRI, r3
 800849c:	f3bf 8f6f 	isb	sy
 80084a0:	f3bf 8f4f 	dsb	sy
 80084a4:	60fb      	str	r3, [r7, #12]
}
 80084a6:	bf00      	nop
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10b      	bne.n	80084cc <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	60bb      	str	r3, [r7, #8]
}
 80084c6:	bf00      	nop
 80084c8:	bf00      	nop
 80084ca:	e7fd      	b.n	80084c8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80084cc:	693b      	ldr	r3, [r7, #16]
 80084ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084d0:	1e5a      	subs	r2, r3, #1
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084d6:	693b      	ldr	r3, [r7, #16]
 80084d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084de:	429a      	cmp	r2, r3
 80084e0:	d02c      	beq.n	800853c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d128      	bne.n	800853c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	3304      	adds	r3, #4
 80084ee:	4618      	mov	r0, r3
 80084f0:	f7fe fb78 	bl	8006be4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008500:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800850c:	4b0f      	ldr	r3, [pc, #60]	@ (800854c <xTaskPriorityDisinherit+0xd8>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d903      	bls.n	800851c <xTaskPriorityDisinherit+0xa8>
 8008514:	693b      	ldr	r3, [r7, #16]
 8008516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008518:	4a0c      	ldr	r2, [pc, #48]	@ (800854c <xTaskPriorityDisinherit+0xd8>)
 800851a:	6013      	str	r3, [r2, #0]
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4a09      	ldr	r2, [pc, #36]	@ (8008550 <xTaskPriorityDisinherit+0xdc>)
 800852a:	441a      	add	r2, r3
 800852c:	693b      	ldr	r3, [r7, #16]
 800852e:	3304      	adds	r3, #4
 8008530:	4619      	mov	r1, r3
 8008532:	4610      	mov	r0, r2
 8008534:	f7fe faf9 	bl	8006b2a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008538:	2301      	movs	r3, #1
 800853a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800853c:	697b      	ldr	r3, [r7, #20]
	}
 800853e:	4618      	mov	r0, r3
 8008540:	3718      	adds	r7, #24
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}
 8008546:	bf00      	nop
 8008548:	20000a1c 	.word	0x20000a1c
 800854c:	20000ef8 	.word	0x20000ef8
 8008550:	20000a20 	.word	0x20000a20

08008554 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b084      	sub	sp, #16
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800855e:	4b21      	ldr	r3, [pc, #132]	@ (80085e4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008564:	4b20      	ldr	r3, [pc, #128]	@ (80085e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3304      	adds	r3, #4
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fb3a 	bl	8006be4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008576:	d10a      	bne.n	800858e <prvAddCurrentTaskToDelayedList+0x3a>
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d007      	beq.n	800858e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800857e:	4b1a      	ldr	r3, [pc, #104]	@ (80085e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3304      	adds	r3, #4
 8008584:	4619      	mov	r1, r3
 8008586:	4819      	ldr	r0, [pc, #100]	@ (80085ec <prvAddCurrentTaskToDelayedList+0x98>)
 8008588:	f7fe facf 	bl	8006b2a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800858c:	e026      	b.n	80085dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4413      	add	r3, r2
 8008594:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008596:	4b14      	ldr	r3, [pc, #80]	@ (80085e8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d209      	bcs.n	80085ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085a6:	4b12      	ldr	r3, [pc, #72]	@ (80085f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	4b0f      	ldr	r3, [pc, #60]	@ (80085e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3304      	adds	r3, #4
 80085b0:	4619      	mov	r1, r3
 80085b2:	4610      	mov	r0, r2
 80085b4:	f7fe fadd 	bl	8006b72 <vListInsert>
}
 80085b8:	e010      	b.n	80085dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085ba:	4b0e      	ldr	r3, [pc, #56]	@ (80085f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80085bc:	681a      	ldr	r2, [r3, #0]
 80085be:	4b0a      	ldr	r3, [pc, #40]	@ (80085e8 <prvAddCurrentTaskToDelayedList+0x94>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	3304      	adds	r3, #4
 80085c4:	4619      	mov	r1, r3
 80085c6:	4610      	mov	r0, r2
 80085c8:	f7fe fad3 	bl	8006b72 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80085cc:	4b0a      	ldr	r3, [pc, #40]	@ (80085f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d202      	bcs.n	80085dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80085d6:	4a08      	ldr	r2, [pc, #32]	@ (80085f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	6013      	str	r3, [r2, #0]
}
 80085dc:	bf00      	nop
 80085de:	3710      	adds	r7, #16
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bd80      	pop	{r7, pc}
 80085e4:	20000ef4 	.word	0x20000ef4
 80085e8:	20000a1c 	.word	0x20000a1c
 80085ec:	20000edc 	.word	0x20000edc
 80085f0:	20000eac 	.word	0x20000eac
 80085f4:	20000ea8 	.word	0x20000ea8
 80085f8:	20000f10 	.word	0x20000f10

080085fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08a      	sub	sp, #40	@ 0x28
 8008600:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008602:	2300      	movs	r3, #0
 8008604:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008606:	f000 fbb1 	bl	8008d6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800860a:	4b1d      	ldr	r3, [pc, #116]	@ (8008680 <xTimerCreateTimerTask+0x84>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d021      	beq.n	8008656 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008612:	2300      	movs	r3, #0
 8008614:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008616:	2300      	movs	r3, #0
 8008618:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800861a:	1d3a      	adds	r2, r7, #4
 800861c:	f107 0108 	add.w	r1, r7, #8
 8008620:	f107 030c 	add.w	r3, r7, #12
 8008624:	4618      	mov	r0, r3
 8008626:	f7fe fa39 	bl	8006a9c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	9202      	str	r2, [sp, #8]
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	2337      	movs	r3, #55	@ 0x37
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	2300      	movs	r3, #0
 800863a:	460a      	mov	r2, r1
 800863c:	4911      	ldr	r1, [pc, #68]	@ (8008684 <xTimerCreateTimerTask+0x88>)
 800863e:	4812      	ldr	r0, [pc, #72]	@ (8008688 <xTimerCreateTimerTask+0x8c>)
 8008640:	f7fe fff4 	bl	800762c <xTaskCreateStatic>
 8008644:	4603      	mov	r3, r0
 8008646:	4a11      	ldr	r2, [pc, #68]	@ (800868c <xTimerCreateTimerTask+0x90>)
 8008648:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800864a:	4b10      	ldr	r3, [pc, #64]	@ (800868c <xTimerCreateTimerTask+0x90>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d001      	beq.n	8008656 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008652:	2301      	movs	r3, #1
 8008654:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10b      	bne.n	8008674 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	613b      	str	r3, [r7, #16]
}
 800866e:	bf00      	nop
 8008670:	bf00      	nop
 8008672:	e7fd      	b.n	8008670 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008674:	697b      	ldr	r3, [r7, #20]
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20000f4c 	.word	0x20000f4c
 8008684:	08009824 	.word	0x08009824
 8008688:	08008905 	.word	0x08008905
 800868c:	20000f50 	.word	0x20000f50

08008690 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008690:	b580      	push	{r7, lr}
 8008692:	b088      	sub	sp, #32
 8008694:	af02      	add	r7, sp, #8
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800869e:	202c      	movs	r0, #44	@ 0x2c
 80086a0:	f000 fe1c 	bl	80092dc <pvPortMalloc>
 80086a4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00d      	beq.n	80086c8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	9301      	str	r3, [sp, #4]
 80086b8:	6a3b      	ldr	r3, [r7, #32]
 80086ba:	9300      	str	r3, [sp, #0]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	68b9      	ldr	r1, [r7, #8]
 80086c2:	68f8      	ldr	r0, [r7, #12]
 80086c4:	f000 f845 	bl	8008752 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80086c8:	697b      	ldr	r3, [r7, #20]
	}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b08a      	sub	sp, #40	@ 0x28
 80086d6:	af02      	add	r7, sp, #8
 80086d8:	60f8      	str	r0, [r7, #12]
 80086da:	60b9      	str	r1, [r7, #8]
 80086dc:	607a      	str	r2, [r7, #4]
 80086de:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80086e0:	232c      	movs	r3, #44	@ 0x2c
 80086e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	2b2c      	cmp	r3, #44	@ 0x2c
 80086e8:	d00b      	beq.n	8008702 <xTimerCreateStatic+0x30>
	__asm volatile
 80086ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ee:	f383 8811 	msr	BASEPRI, r3
 80086f2:	f3bf 8f6f 	isb	sy
 80086f6:	f3bf 8f4f 	dsb	sy
 80086fa:	61bb      	str	r3, [r7, #24]
}
 80086fc:	bf00      	nop
 80086fe:	bf00      	nop
 8008700:	e7fd      	b.n	80086fe <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008702:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10b      	bne.n	8008722 <xTimerCreateStatic+0x50>
	__asm volatile
 800870a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800870e:	f383 8811 	msr	BASEPRI, r3
 8008712:	f3bf 8f6f 	isb	sy
 8008716:	f3bf 8f4f 	dsb	sy
 800871a:	617b      	str	r3, [r7, #20]
}
 800871c:	bf00      	nop
 800871e:	bf00      	nop
 8008720:	e7fd      	b.n	800871e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008724:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00d      	beq.n	8008748 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800872c:	69fb      	ldr	r3, [r7, #28]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	9301      	str	r3, [sp, #4]
 8008738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800873a:	9300      	str	r3, [sp, #0]
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	68b9      	ldr	r1, [r7, #8]
 8008742:	68f8      	ldr	r0, [r7, #12]
 8008744:	f000 f805 	bl	8008752 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008748:	69fb      	ldr	r3, [r7, #28]
	}
 800874a:	4618      	mov	r0, r3
 800874c:	3720      	adds	r7, #32
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b086      	sub	sp, #24
 8008756:	af00      	add	r7, sp, #0
 8008758:	60f8      	str	r0, [r7, #12]
 800875a:	60b9      	str	r1, [r7, #8]
 800875c:	607a      	str	r2, [r7, #4]
 800875e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10b      	bne.n	800877e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8008766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	617b      	str	r3, [r7, #20]
}
 8008778:	bf00      	nop
 800877a:	bf00      	nop
 800877c:	e7fd      	b.n	800877a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800877e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01e      	beq.n	80087c2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008784:	f000 faf2 	bl	8008d6c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800878a:	68fa      	ldr	r2, [r7, #12]
 800878c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800879a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800879c:	6a3a      	ldr	r2, [r7, #32]
 800879e:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80087a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a2:	3304      	adds	r3, #4
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fe f9b3 	bl	8006b10 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d008      	beq.n	80087c2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80087b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087b6:	f043 0304 	orr.w	r3, r3, #4
 80087ba:	b2da      	uxtb	r2, r3
 80087bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80087c2:	bf00      	nop
 80087c4:	3718      	adds	r7, #24
 80087c6:	46bd      	mov	sp, r7
 80087c8:	bd80      	pop	{r7, pc}
	...

080087cc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b08a      	sub	sp, #40	@ 0x28
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	60f8      	str	r0, [r7, #12]
 80087d4:	60b9      	str	r1, [r7, #8]
 80087d6:	607a      	str	r2, [r7, #4]
 80087d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087da:	2300      	movs	r3, #0
 80087dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d10b      	bne.n	80087fc <xTimerGenericCommand+0x30>
	__asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	623b      	str	r3, [r7, #32]
}
 80087f6:	bf00      	nop
 80087f8:	bf00      	nop
 80087fa:	e7fd      	b.n	80087f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087fc:	4b19      	ldr	r3, [pc, #100]	@ (8008864 <xTimerGenericCommand+0x98>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d02a      	beq.n	800885a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b05      	cmp	r3, #5
 8008814:	dc18      	bgt.n	8008848 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008816:	f7ff fe0f 	bl	8008438 <xTaskGetSchedulerState>
 800881a:	4603      	mov	r3, r0
 800881c:	2b02      	cmp	r3, #2
 800881e:	d109      	bne.n	8008834 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008820:	4b10      	ldr	r3, [pc, #64]	@ (8008864 <xTimerGenericCommand+0x98>)
 8008822:	6818      	ldr	r0, [r3, #0]
 8008824:	f107 0110 	add.w	r1, r7, #16
 8008828:	2300      	movs	r3, #0
 800882a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800882c:	f7fe fb0e 	bl	8006e4c <xQueueGenericSend>
 8008830:	6278      	str	r0, [r7, #36]	@ 0x24
 8008832:	e012      	b.n	800885a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008834:	4b0b      	ldr	r3, [pc, #44]	@ (8008864 <xTimerGenericCommand+0x98>)
 8008836:	6818      	ldr	r0, [r3, #0]
 8008838:	f107 0110 	add.w	r1, r7, #16
 800883c:	2300      	movs	r3, #0
 800883e:	2200      	movs	r2, #0
 8008840:	f7fe fb04 	bl	8006e4c <xQueueGenericSend>
 8008844:	6278      	str	r0, [r7, #36]	@ 0x24
 8008846:	e008      	b.n	800885a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008848:	4b06      	ldr	r3, [pc, #24]	@ (8008864 <xTimerGenericCommand+0x98>)
 800884a:	6818      	ldr	r0, [r3, #0]
 800884c:	f107 0110 	add.w	r1, r7, #16
 8008850:	2300      	movs	r3, #0
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	f7fe fbfc 	bl	8007050 <xQueueGenericSendFromISR>
 8008858:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800885a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800885c:	4618      	mov	r0, r3
 800885e:	3728      	adds	r7, #40	@ 0x28
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}
 8008864:	20000f4c 	.word	0x20000f4c

08008868 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b088      	sub	sp, #32
 800886c:	af02      	add	r7, sp, #8
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008872:	4b23      	ldr	r3, [pc, #140]	@ (8008900 <prvProcessExpiredTimer+0x98>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	68db      	ldr	r3, [r3, #12]
 800887a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	3304      	adds	r3, #4
 8008880:	4618      	mov	r0, r3
 8008882:	f7fe f9af 	bl	8006be4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800888c:	f003 0304 	and.w	r3, r3, #4
 8008890:	2b00      	cmp	r3, #0
 8008892:	d023      	beq.n	80088dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	699a      	ldr	r2, [r3, #24]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	18d1      	adds	r1, r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	6978      	ldr	r0, [r7, #20]
 80088a2:	f000 f8d5 	bl	8008a50 <prvInsertTimerInActiveList>
 80088a6:	4603      	mov	r3, r0
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d020      	beq.n	80088ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80088ac:	2300      	movs	r3, #0
 80088ae:	9300      	str	r3, [sp, #0]
 80088b0:	2300      	movs	r3, #0
 80088b2:	687a      	ldr	r2, [r7, #4]
 80088b4:	2100      	movs	r1, #0
 80088b6:	6978      	ldr	r0, [r7, #20]
 80088b8:	f7ff ff88 	bl	80087cc <xTimerGenericCommand>
 80088bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d114      	bne.n	80088ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80088c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c8:	f383 8811 	msr	BASEPRI, r3
 80088cc:	f3bf 8f6f 	isb	sy
 80088d0:	f3bf 8f4f 	dsb	sy
 80088d4:	60fb      	str	r3, [r7, #12]
}
 80088d6:	bf00      	nop
 80088d8:	bf00      	nop
 80088da:	e7fd      	b.n	80088d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088e2:	f023 0301 	bic.w	r3, r3, #1
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	6a1b      	ldr	r3, [r3, #32]
 80088f2:	6978      	ldr	r0, [r7, #20]
 80088f4:	4798      	blx	r3
}
 80088f6:	bf00      	nop
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	20000f44 	.word	0x20000f44

08008904 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b084      	sub	sp, #16
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800890c:	f107 0308 	add.w	r3, r7, #8
 8008910:	4618      	mov	r0, r3
 8008912:	f000 f859 	bl	80089c8 <prvGetNextExpireTime>
 8008916:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	4619      	mov	r1, r3
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	f000 f805 	bl	800892c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008922:	f000 f8d7 	bl	8008ad4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008926:	bf00      	nop
 8008928:	e7f0      	b.n	800890c <prvTimerTask+0x8>
	...

0800892c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
 8008934:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008936:	f7ff f999 	bl	8007c6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800893a:	f107 0308 	add.w	r3, r7, #8
 800893e:	4618      	mov	r0, r3
 8008940:	f000 f866 	bl	8008a10 <prvSampleTimeNow>
 8008944:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d130      	bne.n	80089ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <prvProcessTimerOrBlockTask+0x3c>
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	429a      	cmp	r2, r3
 8008958:	d806      	bhi.n	8008968 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800895a:	f7ff f995 	bl	8007c88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800895e:	68f9      	ldr	r1, [r7, #12]
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7ff ff81 	bl	8008868 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008966:	e024      	b.n	80089b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d008      	beq.n	8008980 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800896e:	4b13      	ldr	r3, [pc, #76]	@ (80089bc <prvProcessTimerOrBlockTask+0x90>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <prvProcessTimerOrBlockTask+0x50>
 8008978:	2301      	movs	r3, #1
 800897a:	e000      	b.n	800897e <prvProcessTimerOrBlockTask+0x52>
 800897c:	2300      	movs	r3, #0
 800897e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008980:	4b0f      	ldr	r3, [pc, #60]	@ (80089c0 <prvProcessTimerOrBlockTask+0x94>)
 8008982:	6818      	ldr	r0, [r3, #0]
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	1ad3      	subs	r3, r2, r3
 800898a:	683a      	ldr	r2, [r7, #0]
 800898c:	4619      	mov	r1, r3
 800898e:	f7fe fe19 	bl	80075c4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008992:	f7ff f979 	bl	8007c88 <xTaskResumeAll>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10a      	bne.n	80089b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800899c:	4b09      	ldr	r3, [pc, #36]	@ (80089c4 <prvProcessTimerOrBlockTask+0x98>)
 800899e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	f3bf 8f4f 	dsb	sy
 80089a8:	f3bf 8f6f 	isb	sy
}
 80089ac:	e001      	b.n	80089b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80089ae:	f7ff f96b 	bl	8007c88 <xTaskResumeAll>
}
 80089b2:	bf00      	nop
 80089b4:	3710      	adds	r7, #16
 80089b6:	46bd      	mov	sp, r7
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	20000f48 	.word	0x20000f48
 80089c0:	20000f4c 	.word	0x20000f4c
 80089c4:	e000ed04 	.word	0xe000ed04

080089c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80089c8:	b480      	push	{r7}
 80089ca:	b085      	sub	sp, #20
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089d0:	4b0e      	ldr	r3, [pc, #56]	@ (8008a0c <prvGetNextExpireTime+0x44>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d101      	bne.n	80089de <prvGetNextExpireTime+0x16>
 80089da:	2201      	movs	r2, #1
 80089dc:	e000      	b.n	80089e0 <prvGetNextExpireTime+0x18>
 80089de:	2200      	movs	r2, #0
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d105      	bne.n	80089f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089ec:	4b07      	ldr	r3, [pc, #28]	@ (8008a0c <prvGetNextExpireTime+0x44>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	e001      	b.n	80089fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089fc:	68fb      	ldr	r3, [r7, #12]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3714      	adds	r7, #20
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	20000f44 	.word	0x20000f44

08008a10 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008a18:	f7ff f9d4 	bl	8007dc4 <xTaskGetTickCount>
 8008a1c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8008a4c <prvSampleTimeNow+0x3c>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	68fa      	ldr	r2, [r7, #12]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d205      	bcs.n	8008a34 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008a28:	f000 f93a 	bl	8008ca0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e002      	b.n	8008a3a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008a3a:	4a04      	ldr	r2, [pc, #16]	@ (8008a4c <prvSampleTimeNow+0x3c>)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a40:	68fb      	ldr	r3, [r7, #12]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	20000f54 	.word	0x20000f54

08008a50 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
 8008a5c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d812      	bhi.n	8008a9c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	1ad2      	subs	r2, r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	699b      	ldr	r3, [r3, #24]
 8008a80:	429a      	cmp	r2, r3
 8008a82:	d302      	bcc.n	8008a8a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a84:	2301      	movs	r3, #1
 8008a86:	617b      	str	r3, [r7, #20]
 8008a88:	e01b      	b.n	8008ac2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a8a:	4b10      	ldr	r3, [pc, #64]	@ (8008acc <prvInsertTimerInActiveList+0x7c>)
 8008a8c:	681a      	ldr	r2, [r3, #0]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	3304      	adds	r3, #4
 8008a92:	4619      	mov	r1, r3
 8008a94:	4610      	mov	r0, r2
 8008a96:	f7fe f86c 	bl	8006b72 <vListInsert>
 8008a9a:	e012      	b.n	8008ac2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d206      	bcs.n	8008ab2 <prvInsertTimerInActiveList+0x62>
 8008aa4:	68ba      	ldr	r2, [r7, #8]
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d302      	bcc.n	8008ab2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008aac:	2301      	movs	r3, #1
 8008aae:	617b      	str	r3, [r7, #20]
 8008ab0:	e007      	b.n	8008ac2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ab2:	4b07      	ldr	r3, [pc, #28]	@ (8008ad0 <prvInsertTimerInActiveList+0x80>)
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3304      	adds	r3, #4
 8008aba:	4619      	mov	r1, r3
 8008abc:	4610      	mov	r0, r2
 8008abe:	f7fe f858 	bl	8006b72 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008ac2:	697b      	ldr	r3, [r7, #20]
}
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	20000f48 	.word	0x20000f48
 8008ad0:	20000f44 	.word	0x20000f44

08008ad4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b08e      	sub	sp, #56	@ 0x38
 8008ad8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008ada:	e0ce      	b.n	8008c7a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	da19      	bge.n	8008b16 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ae2:	1d3b      	adds	r3, r7, #4
 8008ae4:	3304      	adds	r3, #4
 8008ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10b      	bne.n	8008b06 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	61fb      	str	r3, [r7, #28]
}
 8008b00:	bf00      	nop
 8008b02:	bf00      	nop
 8008b04:	e7fd      	b.n	8008b02 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b0c:	6850      	ldr	r0, [r2, #4]
 8008b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b10:	6892      	ldr	r2, [r2, #8]
 8008b12:	4611      	mov	r1, r2
 8008b14:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f2c0 80ae 	blt.w	8008c7a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d004      	beq.n	8008b34 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008b2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b2c:	3304      	adds	r3, #4
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fe f858 	bl	8006be4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008b34:	463b      	mov	r3, r7
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7ff ff6a 	bl	8008a10 <prvSampleTimeNow>
 8008b3c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2b09      	cmp	r3, #9
 8008b42:	f200 8097 	bhi.w	8008c74 <prvProcessReceivedCommands+0x1a0>
 8008b46:	a201      	add	r2, pc, #4	@ (adr r2, 8008b4c <prvProcessReceivedCommands+0x78>)
 8008b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b4c:	08008b75 	.word	0x08008b75
 8008b50:	08008b75 	.word	0x08008b75
 8008b54:	08008b75 	.word	0x08008b75
 8008b58:	08008beb 	.word	0x08008beb
 8008b5c:	08008bff 	.word	0x08008bff
 8008b60:	08008c4b 	.word	0x08008c4b
 8008b64:	08008b75 	.word	0x08008b75
 8008b68:	08008b75 	.word	0x08008b75
 8008b6c:	08008beb 	.word	0x08008beb
 8008b70:	08008bff 	.word	0x08008bff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b7a:	f043 0301 	orr.w	r3, r3, #1
 8008b7e:	b2da      	uxtb	r2, r3
 8008b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b86:	68ba      	ldr	r2, [r7, #8]
 8008b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	18d1      	adds	r1, r2, r3
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b94:	f7ff ff5c 	bl	8008a50 <prvInsertTimerInActiveList>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d06c      	beq.n	8008c78 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008ba4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ba8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d061      	beq.n	8008c78 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008bb4:	68ba      	ldr	r2, [r7, #8]
 8008bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	441a      	add	r2, r3
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	9300      	str	r3, [sp, #0]
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	2100      	movs	r1, #0
 8008bc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008bc6:	f7ff fe01 	bl	80087cc <xTimerGenericCommand>
 8008bca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008bcc:	6a3b      	ldr	r3, [r7, #32]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d152      	bne.n	8008c78 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008bd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd6:	f383 8811 	msr	BASEPRI, r3
 8008bda:	f3bf 8f6f 	isb	sy
 8008bde:	f3bf 8f4f 	dsb	sy
 8008be2:	61bb      	str	r3, [r7, #24]
}
 8008be4:	bf00      	nop
 8008be6:	bf00      	nop
 8008be8:	e7fd      	b.n	8008be6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bf0:	f023 0301 	bic.w	r3, r3, #1
 8008bf4:	b2da      	uxtb	r2, r3
 8008bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008bfc:	e03d      	b.n	8008c7a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c04:	f043 0301 	orr.w	r3, r3, #1
 8008c08:	b2da      	uxtb	r2, r3
 8008c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c0c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c14:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c18:	699b      	ldr	r3, [r3, #24]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10b      	bne.n	8008c36 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	617b      	str	r3, [r7, #20]
}
 8008c30:	bf00      	nop
 8008c32:	bf00      	nop
 8008c34:	e7fd      	b.n	8008c32 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c38:	699a      	ldr	r2, [r3, #24]
 8008c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c3c:	18d1      	adds	r1, r2, r3
 8008c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c44:	f7ff ff04 	bl	8008a50 <prvInsertTimerInActiveList>
					break;
 8008c48:	e017      	b.n	8008c7a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c50:	f003 0302 	and.w	r3, r3, #2
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d103      	bne.n	8008c60 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008c58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c5a:	f000 fc0d 	bl	8009478 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c5e:	e00c      	b.n	8008c7a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c66:	f023 0301 	bic.w	r3, r3, #1
 8008c6a:	b2da      	uxtb	r2, r3
 8008c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008c72:	e002      	b.n	8008c7a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008c74:	bf00      	nop
 8008c76:	e000      	b.n	8008c7a <prvProcessReceivedCommands+0x1a6>
					break;
 8008c78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c7a:	4b08      	ldr	r3, [pc, #32]	@ (8008c9c <prvProcessReceivedCommands+0x1c8>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	1d39      	adds	r1, r7, #4
 8008c80:	2200      	movs	r2, #0
 8008c82:	4618      	mov	r0, r3
 8008c84:	f7fe fa82 	bl	800718c <xQueueReceive>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	f47f af26 	bne.w	8008adc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c90:	bf00      	nop
 8008c92:	bf00      	nop
 8008c94:	3730      	adds	r7, #48	@ 0x30
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000f4c 	.word	0x20000f4c

08008ca0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008ca6:	e049      	b.n	8008d3c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ca8:	4b2e      	ldr	r3, [pc, #184]	@ (8008d64 <prvSwitchTimerLists+0xc4>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb2:	4b2c      	ldr	r3, [pc, #176]	@ (8008d64 <prvSwitchTimerLists+0xc4>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	3304      	adds	r3, #4
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	f7fd ff8f 	bl	8006be4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cd4:	f003 0304 	and.w	r3, r3, #4
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d02f      	beq.n	8008d3c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008ce6:	68ba      	ldr	r2, [r7, #8]
 8008ce8:	693b      	ldr	r3, [r7, #16]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d90e      	bls.n	8008d0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	68ba      	ldr	r2, [r7, #8]
 8008cf2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	68fa      	ldr	r2, [r7, #12]
 8008cf8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8008d64 <prvSwitchTimerLists+0xc4>)
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	3304      	adds	r3, #4
 8008d02:	4619      	mov	r1, r3
 8008d04:	4610      	mov	r0, r2
 8008d06:	f7fd ff34 	bl	8006b72 <vListInsert>
 8008d0a:	e017      	b.n	8008d3c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	9300      	str	r3, [sp, #0]
 8008d10:	2300      	movs	r3, #0
 8008d12:	693a      	ldr	r2, [r7, #16]
 8008d14:	2100      	movs	r1, #0
 8008d16:	68f8      	ldr	r0, [r7, #12]
 8008d18:	f7ff fd58 	bl	80087cc <xTimerGenericCommand>
 8008d1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d10b      	bne.n	8008d3c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d28:	f383 8811 	msr	BASEPRI, r3
 8008d2c:	f3bf 8f6f 	isb	sy
 8008d30:	f3bf 8f4f 	dsb	sy
 8008d34:	603b      	str	r3, [r7, #0]
}
 8008d36:	bf00      	nop
 8008d38:	bf00      	nop
 8008d3a:	e7fd      	b.n	8008d38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008d3c:	4b09      	ldr	r3, [pc, #36]	@ (8008d64 <prvSwitchTimerLists+0xc4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1b0      	bne.n	8008ca8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008d46:	4b07      	ldr	r3, [pc, #28]	@ (8008d64 <prvSwitchTimerLists+0xc4>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d4c:	4b06      	ldr	r3, [pc, #24]	@ (8008d68 <prvSwitchTimerLists+0xc8>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a04      	ldr	r2, [pc, #16]	@ (8008d64 <prvSwitchTimerLists+0xc4>)
 8008d52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d54:	4a04      	ldr	r2, [pc, #16]	@ (8008d68 <prvSwitchTimerLists+0xc8>)
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	6013      	str	r3, [r2, #0]
}
 8008d5a:	bf00      	nop
 8008d5c:	3718      	adds	r7, #24
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	bd80      	pop	{r7, pc}
 8008d62:	bf00      	nop
 8008d64:	20000f44 	.word	0x20000f44
 8008d68:	20000f48 	.word	0x20000f48

08008d6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d72:	f000 f991 	bl	8009098 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d76:	4b15      	ldr	r3, [pc, #84]	@ (8008dcc <prvCheckForValidListAndQueue+0x60>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d120      	bne.n	8008dc0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d7e:	4814      	ldr	r0, [pc, #80]	@ (8008dd0 <prvCheckForValidListAndQueue+0x64>)
 8008d80:	f7fd fea6 	bl	8006ad0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d84:	4813      	ldr	r0, [pc, #76]	@ (8008dd4 <prvCheckForValidListAndQueue+0x68>)
 8008d86:	f7fd fea3 	bl	8006ad0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d8a:	4b13      	ldr	r3, [pc, #76]	@ (8008dd8 <prvCheckForValidListAndQueue+0x6c>)
 8008d8c:	4a10      	ldr	r2, [pc, #64]	@ (8008dd0 <prvCheckForValidListAndQueue+0x64>)
 8008d8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d90:	4b12      	ldr	r3, [pc, #72]	@ (8008ddc <prvCheckForValidListAndQueue+0x70>)
 8008d92:	4a10      	ldr	r2, [pc, #64]	@ (8008dd4 <prvCheckForValidListAndQueue+0x68>)
 8008d94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d96:	2300      	movs	r3, #0
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	4b11      	ldr	r3, [pc, #68]	@ (8008de0 <prvCheckForValidListAndQueue+0x74>)
 8008d9c:	4a11      	ldr	r2, [pc, #68]	@ (8008de4 <prvCheckForValidListAndQueue+0x78>)
 8008d9e:	2110      	movs	r1, #16
 8008da0:	200a      	movs	r0, #10
 8008da2:	f7fd ffb3 	bl	8006d0c <xQueueGenericCreateStatic>
 8008da6:	4603      	mov	r3, r0
 8008da8:	4a08      	ldr	r2, [pc, #32]	@ (8008dcc <prvCheckForValidListAndQueue+0x60>)
 8008daa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008dac:	4b07      	ldr	r3, [pc, #28]	@ (8008dcc <prvCheckForValidListAndQueue+0x60>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d005      	beq.n	8008dc0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008db4:	4b05      	ldr	r3, [pc, #20]	@ (8008dcc <prvCheckForValidListAndQueue+0x60>)
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	490b      	ldr	r1, [pc, #44]	@ (8008de8 <prvCheckForValidListAndQueue+0x7c>)
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7fe fbd8 	bl	8007570 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008dc0:	f000 f99c 	bl	80090fc <vPortExitCritical>
}
 8008dc4:	bf00      	nop
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	20000f4c 	.word	0x20000f4c
 8008dd0:	20000f1c 	.word	0x20000f1c
 8008dd4:	20000f30 	.word	0x20000f30
 8008dd8:	20000f44 	.word	0x20000f44
 8008ddc:	20000f48 	.word	0x20000f48
 8008de0:	20000ff8 	.word	0x20000ff8
 8008de4:	20000f58 	.word	0x20000f58
 8008de8:	0800982c 	.word	0x0800982c

08008dec <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b086      	sub	sp, #24
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10b      	bne.n	8008e16 <pvTimerGetTimerID+0x2a>
	__asm volatile
 8008dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e02:	f383 8811 	msr	BASEPRI, r3
 8008e06:	f3bf 8f6f 	isb	sy
 8008e0a:	f3bf 8f4f 	dsb	sy
 8008e0e:	60fb      	str	r3, [r7, #12]
}
 8008e10:	bf00      	nop
 8008e12:	bf00      	nop
 8008e14:	e7fd      	b.n	8008e12 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008e16:	f000 f93f 	bl	8009098 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008e20:	f000 f96c 	bl	80090fc <vPortExitCritical>

	return pvReturn;
 8008e24:	693b      	ldr	r3, [r7, #16]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3718      	adds	r7, #24
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
	...

08008e30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	60f8      	str	r0, [r7, #12]
 8008e38:	60b9      	str	r1, [r7, #8]
 8008e3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	3b04      	subs	r3, #4
 8008e40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008e48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3b04      	subs	r3, #4
 8008e4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	f023 0201 	bic.w	r2, r3, #1
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	3b04      	subs	r3, #4
 8008e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008e60:	4a0c      	ldr	r2, [pc, #48]	@ (8008e94 <pxPortInitialiseStack+0x64>)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	3b14      	subs	r3, #20
 8008e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	3b04      	subs	r3, #4
 8008e76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f06f 0202 	mvn.w	r2, #2
 8008e7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	3b20      	subs	r3, #32
 8008e84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008e86:	68fb      	ldr	r3, [r7, #12]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr
 8008e94:	08008e99 	.word	0x08008e99

08008e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e98:	b480      	push	{r7}
 8008e9a:	b085      	sub	sp, #20
 8008e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008ea2:	4b13      	ldr	r3, [pc, #76]	@ (8008ef0 <prvTaskExitError+0x58>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eaa:	d00b      	beq.n	8008ec4 <prvTaskExitError+0x2c>
	__asm volatile
 8008eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eb0:	f383 8811 	msr	BASEPRI, r3
 8008eb4:	f3bf 8f6f 	isb	sy
 8008eb8:	f3bf 8f4f 	dsb	sy
 8008ebc:	60fb      	str	r3, [r7, #12]
}
 8008ebe:	bf00      	nop
 8008ec0:	bf00      	nop
 8008ec2:	e7fd      	b.n	8008ec0 <prvTaskExitError+0x28>
	__asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	60bb      	str	r3, [r7, #8]
}
 8008ed6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008ed8:	bf00      	nop
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d0fc      	beq.n	8008eda <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ee0:	bf00      	nop
 8008ee2:	bf00      	nop
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	20000048 	.word	0x20000048
	...

08008f00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008f00:	4b07      	ldr	r3, [pc, #28]	@ (8008f20 <pxCurrentTCBConst2>)
 8008f02:	6819      	ldr	r1, [r3, #0]
 8008f04:	6808      	ldr	r0, [r1, #0]
 8008f06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f0a:	f380 8809 	msr	PSP, r0
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f04f 0000 	mov.w	r0, #0
 8008f16:	f380 8811 	msr	BASEPRI, r0
 8008f1a:	4770      	bx	lr
 8008f1c:	f3af 8000 	nop.w

08008f20 <pxCurrentTCBConst2>:
 8008f20:	20000a1c 	.word	0x20000a1c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop

08008f28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008f28:	4808      	ldr	r0, [pc, #32]	@ (8008f4c <prvPortStartFirstTask+0x24>)
 8008f2a:	6800      	ldr	r0, [r0, #0]
 8008f2c:	6800      	ldr	r0, [r0, #0]
 8008f2e:	f380 8808 	msr	MSP, r0
 8008f32:	f04f 0000 	mov.w	r0, #0
 8008f36:	f380 8814 	msr	CONTROL, r0
 8008f3a:	b662      	cpsie	i
 8008f3c:	b661      	cpsie	f
 8008f3e:	f3bf 8f4f 	dsb	sy
 8008f42:	f3bf 8f6f 	isb	sy
 8008f46:	df00      	svc	0
 8008f48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008f4a:	bf00      	nop
 8008f4c:	e000ed08 	.word	0xe000ed08

08008f50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b086      	sub	sp, #24
 8008f54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008f56:	4b47      	ldr	r3, [pc, #284]	@ (8009074 <xPortStartScheduler+0x124>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a47      	ldr	r2, [pc, #284]	@ (8009078 <xPortStartScheduler+0x128>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d10b      	bne.n	8008f78 <xPortStartScheduler+0x28>
	__asm volatile
 8008f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f64:	f383 8811 	msr	BASEPRI, r3
 8008f68:	f3bf 8f6f 	isb	sy
 8008f6c:	f3bf 8f4f 	dsb	sy
 8008f70:	60fb      	str	r3, [r7, #12]
}
 8008f72:	bf00      	nop
 8008f74:	bf00      	nop
 8008f76:	e7fd      	b.n	8008f74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008f78:	4b3e      	ldr	r3, [pc, #248]	@ (8009074 <xPortStartScheduler+0x124>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800907c <xPortStartScheduler+0x12c>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d10b      	bne.n	8008f9a <xPortStartScheduler+0x4a>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	613b      	str	r3, [r7, #16]
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop
 8008f98:	e7fd      	b.n	8008f96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f9a:	4b39      	ldr	r3, [pc, #228]	@ (8009080 <xPortStartScheduler+0x130>)
 8008f9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f9e:	697b      	ldr	r3, [r7, #20]
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	b2db      	uxtb	r3, r3
 8008fa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	22ff      	movs	r2, #255	@ 0xff
 8008faa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008fb4:	78fb      	ldrb	r3, [r7, #3]
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008fbc:	b2da      	uxtb	r2, r3
 8008fbe:	4b31      	ldr	r3, [pc, #196]	@ (8009084 <xPortStartScheduler+0x134>)
 8008fc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008fc2:	4b31      	ldr	r3, [pc, #196]	@ (8009088 <xPortStartScheduler+0x138>)
 8008fc4:	2207      	movs	r2, #7
 8008fc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fc8:	e009      	b.n	8008fde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008fca:	4b2f      	ldr	r3, [pc, #188]	@ (8009088 <xPortStartScheduler+0x138>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	4a2d      	ldr	r2, [pc, #180]	@ (8009088 <xPortStartScheduler+0x138>)
 8008fd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008fd4:	78fb      	ldrb	r3, [r7, #3]
 8008fd6:	b2db      	uxtb	r3, r3
 8008fd8:	005b      	lsls	r3, r3, #1
 8008fda:	b2db      	uxtb	r3, r3
 8008fdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008fde:	78fb      	ldrb	r3, [r7, #3]
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fe6:	2b80      	cmp	r3, #128	@ 0x80
 8008fe8:	d0ef      	beq.n	8008fca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008fea:	4b27      	ldr	r3, [pc, #156]	@ (8009088 <xPortStartScheduler+0x138>)
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f1c3 0307 	rsb	r3, r3, #7
 8008ff2:	2b04      	cmp	r3, #4
 8008ff4:	d00b      	beq.n	800900e <xPortStartScheduler+0xbe>
	__asm volatile
 8008ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ffa:	f383 8811 	msr	BASEPRI, r3
 8008ffe:	f3bf 8f6f 	isb	sy
 8009002:	f3bf 8f4f 	dsb	sy
 8009006:	60bb      	str	r3, [r7, #8]
}
 8009008:	bf00      	nop
 800900a:	bf00      	nop
 800900c:	e7fd      	b.n	800900a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800900e:	4b1e      	ldr	r3, [pc, #120]	@ (8009088 <xPortStartScheduler+0x138>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	021b      	lsls	r3, r3, #8
 8009014:	4a1c      	ldr	r2, [pc, #112]	@ (8009088 <xPortStartScheduler+0x138>)
 8009016:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009018:	4b1b      	ldr	r3, [pc, #108]	@ (8009088 <xPortStartScheduler+0x138>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009020:	4a19      	ldr	r2, [pc, #100]	@ (8009088 <xPortStartScheduler+0x138>)
 8009022:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	b2da      	uxtb	r2, r3
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800902c:	4b17      	ldr	r3, [pc, #92]	@ (800908c <xPortStartScheduler+0x13c>)
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a16      	ldr	r2, [pc, #88]	@ (800908c <xPortStartScheduler+0x13c>)
 8009032:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009036:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009038:	4b14      	ldr	r3, [pc, #80]	@ (800908c <xPortStartScheduler+0x13c>)
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a13      	ldr	r2, [pc, #76]	@ (800908c <xPortStartScheduler+0x13c>)
 800903e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009042:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009044:	f000 f8da 	bl	80091fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009048:	4b11      	ldr	r3, [pc, #68]	@ (8009090 <xPortStartScheduler+0x140>)
 800904a:	2200      	movs	r2, #0
 800904c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800904e:	f000 f8f9 	bl	8009244 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009052:	4b10      	ldr	r3, [pc, #64]	@ (8009094 <xPortStartScheduler+0x144>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a0f      	ldr	r2, [pc, #60]	@ (8009094 <xPortStartScheduler+0x144>)
 8009058:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800905c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800905e:	f7ff ff63 	bl	8008f28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009062:	f7fe ff79 	bl	8007f58 <vTaskSwitchContext>
	prvTaskExitError();
 8009066:	f7ff ff17 	bl	8008e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800906a:	2300      	movs	r3, #0
}
 800906c:	4618      	mov	r0, r3
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}
 8009074:	e000ed00 	.word	0xe000ed00
 8009078:	410fc271 	.word	0x410fc271
 800907c:	410fc270 	.word	0x410fc270
 8009080:	e000e400 	.word	0xe000e400
 8009084:	20001048 	.word	0x20001048
 8009088:	2000104c 	.word	0x2000104c
 800908c:	e000ed20 	.word	0xe000ed20
 8009090:	20000048 	.word	0x20000048
 8009094:	e000ef34 	.word	0xe000ef34

08009098 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
	__asm volatile
 800909e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090a2:	f383 8811 	msr	BASEPRI, r3
 80090a6:	f3bf 8f6f 	isb	sy
 80090aa:	f3bf 8f4f 	dsb	sy
 80090ae:	607b      	str	r3, [r7, #4]
}
 80090b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80090b2:	4b10      	ldr	r3, [pc, #64]	@ (80090f4 <vPortEnterCritical+0x5c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	3301      	adds	r3, #1
 80090b8:	4a0e      	ldr	r2, [pc, #56]	@ (80090f4 <vPortEnterCritical+0x5c>)
 80090ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80090bc:	4b0d      	ldr	r3, [pc, #52]	@ (80090f4 <vPortEnterCritical+0x5c>)
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d110      	bne.n	80090e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80090c4:	4b0c      	ldr	r3, [pc, #48]	@ (80090f8 <vPortEnterCritical+0x60>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	b2db      	uxtb	r3, r3
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d00b      	beq.n	80090e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80090ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090d2:	f383 8811 	msr	BASEPRI, r3
 80090d6:	f3bf 8f6f 	isb	sy
 80090da:	f3bf 8f4f 	dsb	sy
 80090de:	603b      	str	r3, [r7, #0]
}
 80090e0:	bf00      	nop
 80090e2:	bf00      	nop
 80090e4:	e7fd      	b.n	80090e2 <vPortEnterCritical+0x4a>
	}
}
 80090e6:	bf00      	nop
 80090e8:	370c      	adds	r7, #12
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr
 80090f2:	bf00      	nop
 80090f4:	20000048 	.word	0x20000048
 80090f8:	e000ed04 	.word	0xe000ed04

080090fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009102:	4b12      	ldr	r3, [pc, #72]	@ (800914c <vPortExitCritical+0x50>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d10b      	bne.n	8009122 <vPortExitCritical+0x26>
	__asm volatile
 800910a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800910e:	f383 8811 	msr	BASEPRI, r3
 8009112:	f3bf 8f6f 	isb	sy
 8009116:	f3bf 8f4f 	dsb	sy
 800911a:	607b      	str	r3, [r7, #4]
}
 800911c:	bf00      	nop
 800911e:	bf00      	nop
 8009120:	e7fd      	b.n	800911e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009122:	4b0a      	ldr	r3, [pc, #40]	@ (800914c <vPortExitCritical+0x50>)
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3b01      	subs	r3, #1
 8009128:	4a08      	ldr	r2, [pc, #32]	@ (800914c <vPortExitCritical+0x50>)
 800912a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800912c:	4b07      	ldr	r3, [pc, #28]	@ (800914c <vPortExitCritical+0x50>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d105      	bne.n	8009140 <vPortExitCritical+0x44>
 8009134:	2300      	movs	r3, #0
 8009136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	f383 8811 	msr	BASEPRI, r3
}
 800913e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	20000048 	.word	0x20000048

08009150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009150:	f3ef 8009 	mrs	r0, PSP
 8009154:	f3bf 8f6f 	isb	sy
 8009158:	4b15      	ldr	r3, [pc, #84]	@ (80091b0 <pxCurrentTCBConst>)
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	f01e 0f10 	tst.w	lr, #16
 8009160:	bf08      	it	eq
 8009162:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009166:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800916a:	6010      	str	r0, [r2, #0]
 800916c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009170:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009174:	f380 8811 	msr	BASEPRI, r0
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f7fe feea 	bl	8007f58 <vTaskSwitchContext>
 8009184:	f04f 0000 	mov.w	r0, #0
 8009188:	f380 8811 	msr	BASEPRI, r0
 800918c:	bc09      	pop	{r0, r3}
 800918e:	6819      	ldr	r1, [r3, #0]
 8009190:	6808      	ldr	r0, [r1, #0]
 8009192:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009196:	f01e 0f10 	tst.w	lr, #16
 800919a:	bf08      	it	eq
 800919c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80091a0:	f380 8809 	msr	PSP, r0
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop
 80091ac:	f3af 8000 	nop.w

080091b0 <pxCurrentTCBConst>:
 80091b0:	20000a1c 	.word	0x20000a1c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80091b4:	bf00      	nop
 80091b6:	bf00      	nop

080091b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b082      	sub	sp, #8
 80091bc:	af00      	add	r7, sp, #0
	__asm volatile
 80091be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	607b      	str	r3, [r7, #4]
}
 80091d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80091d2:	f7fe fe07 	bl	8007de4 <xTaskIncrementTick>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d003      	beq.n	80091e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80091dc:	4b06      	ldr	r3, [pc, #24]	@ (80091f8 <xPortSysTickHandler+0x40>)
 80091de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	2300      	movs	r3, #0
 80091e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	f383 8811 	msr	BASEPRI, r3
}
 80091ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80091f0:	bf00      	nop
 80091f2:	3708      	adds	r7, #8
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}
 80091f8:	e000ed04 	.word	0xe000ed04

080091fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80091fc:	b480      	push	{r7}
 80091fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009200:	4b0b      	ldr	r3, [pc, #44]	@ (8009230 <vPortSetupTimerInterrupt+0x34>)
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009206:	4b0b      	ldr	r3, [pc, #44]	@ (8009234 <vPortSetupTimerInterrupt+0x38>)
 8009208:	2200      	movs	r2, #0
 800920a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800920c:	4b0a      	ldr	r3, [pc, #40]	@ (8009238 <vPortSetupTimerInterrupt+0x3c>)
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4a0a      	ldr	r2, [pc, #40]	@ (800923c <vPortSetupTimerInterrupt+0x40>)
 8009212:	fba2 2303 	umull	r2, r3, r2, r3
 8009216:	099b      	lsrs	r3, r3, #6
 8009218:	4a09      	ldr	r2, [pc, #36]	@ (8009240 <vPortSetupTimerInterrupt+0x44>)
 800921a:	3b01      	subs	r3, #1
 800921c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800921e:	4b04      	ldr	r3, [pc, #16]	@ (8009230 <vPortSetupTimerInterrupt+0x34>)
 8009220:	2207      	movs	r2, #7
 8009222:	601a      	str	r2, [r3, #0]
}
 8009224:	bf00      	nop
 8009226:	46bd      	mov	sp, r7
 8009228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922c:	4770      	bx	lr
 800922e:	bf00      	nop
 8009230:	e000e010 	.word	0xe000e010
 8009234:	e000e018 	.word	0xe000e018
 8009238:	2000003c 	.word	0x2000003c
 800923c:	10624dd3 	.word	0x10624dd3
 8009240:	e000e014 	.word	0xe000e014

08009244 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009244:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009254 <vPortEnableVFP+0x10>
 8009248:	6801      	ldr	r1, [r0, #0]
 800924a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800924e:	6001      	str	r1, [r0, #0]
 8009250:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009252:	bf00      	nop
 8009254:	e000ed88 	.word	0xe000ed88

08009258 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009258:	b480      	push	{r7}
 800925a:	b085      	sub	sp, #20
 800925c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800925e:	f3ef 8305 	mrs	r3, IPSR
 8009262:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2b0f      	cmp	r3, #15
 8009268:	d915      	bls.n	8009296 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800926a:	4a18      	ldr	r2, [pc, #96]	@ (80092cc <vPortValidateInterruptPriority+0x74>)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	4413      	add	r3, r2
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009274:	4b16      	ldr	r3, [pc, #88]	@ (80092d0 <vPortValidateInterruptPriority+0x78>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	7afa      	ldrb	r2, [r7, #11]
 800927a:	429a      	cmp	r2, r3
 800927c:	d20b      	bcs.n	8009296 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800927e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009282:	f383 8811 	msr	BASEPRI, r3
 8009286:	f3bf 8f6f 	isb	sy
 800928a:	f3bf 8f4f 	dsb	sy
 800928e:	607b      	str	r3, [r7, #4]
}
 8009290:	bf00      	nop
 8009292:	bf00      	nop
 8009294:	e7fd      	b.n	8009292 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009296:	4b0f      	ldr	r3, [pc, #60]	@ (80092d4 <vPortValidateInterruptPriority+0x7c>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800929e:	4b0e      	ldr	r3, [pc, #56]	@ (80092d8 <vPortValidateInterruptPriority+0x80>)
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	d90b      	bls.n	80092be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80092a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	603b      	str	r3, [r7, #0]
}
 80092b8:	bf00      	nop
 80092ba:	bf00      	nop
 80092bc:	e7fd      	b.n	80092ba <vPortValidateInterruptPriority+0x62>
	}
 80092be:	bf00      	nop
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop
 80092cc:	e000e3f0 	.word	0xe000e3f0
 80092d0:	20001048 	.word	0x20001048
 80092d4:	e000ed0c 	.word	0xe000ed0c
 80092d8:	2000104c 	.word	0x2000104c

080092dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b08a      	sub	sp, #40	@ 0x28
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80092e4:	2300      	movs	r3, #0
 80092e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80092e8:	f7fe fcc0 	bl	8007c6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80092ec:	4b5c      	ldr	r3, [pc, #368]	@ (8009460 <pvPortMalloc+0x184>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d101      	bne.n	80092f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80092f4:	f000 f924 	bl	8009540 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80092f8:	4b5a      	ldr	r3, [pc, #360]	@ (8009464 <pvPortMalloc+0x188>)
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	4013      	ands	r3, r2
 8009300:	2b00      	cmp	r3, #0
 8009302:	f040 8095 	bne.w	8009430 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d01e      	beq.n	800934a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800930c:	2208      	movs	r2, #8
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	4413      	add	r3, r2
 8009312:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f003 0307 	and.w	r3, r3, #7
 800931a:	2b00      	cmp	r3, #0
 800931c:	d015      	beq.n	800934a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f023 0307 	bic.w	r3, r3, #7
 8009324:	3308      	adds	r3, #8
 8009326:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f003 0307 	and.w	r3, r3, #7
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00b      	beq.n	800934a <pvPortMalloc+0x6e>
	__asm volatile
 8009332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009336:	f383 8811 	msr	BASEPRI, r3
 800933a:	f3bf 8f6f 	isb	sy
 800933e:	f3bf 8f4f 	dsb	sy
 8009342:	617b      	str	r3, [r7, #20]
}
 8009344:	bf00      	nop
 8009346:	bf00      	nop
 8009348:	e7fd      	b.n	8009346 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d06f      	beq.n	8009430 <pvPortMalloc+0x154>
 8009350:	4b45      	ldr	r3, [pc, #276]	@ (8009468 <pvPortMalloc+0x18c>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	429a      	cmp	r2, r3
 8009358:	d86a      	bhi.n	8009430 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800935a:	4b44      	ldr	r3, [pc, #272]	@ (800946c <pvPortMalloc+0x190>)
 800935c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800935e:	4b43      	ldr	r3, [pc, #268]	@ (800946c <pvPortMalloc+0x190>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009364:	e004      	b.n	8009370 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009368:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800936a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009372:	685b      	ldr	r3, [r3, #4]
 8009374:	687a      	ldr	r2, [r7, #4]
 8009376:	429a      	cmp	r2, r3
 8009378:	d903      	bls.n	8009382 <pvPortMalloc+0xa6>
 800937a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1f1      	bne.n	8009366 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009382:	4b37      	ldr	r3, [pc, #220]	@ (8009460 <pvPortMalloc+0x184>)
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009388:	429a      	cmp	r2, r3
 800938a:	d051      	beq.n	8009430 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	2208      	movs	r2, #8
 8009392:	4413      	add	r3, r2
 8009394:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	6a3b      	ldr	r3, [r7, #32]
 800939c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800939e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	1ad2      	subs	r2, r2, r3
 80093a6:	2308      	movs	r3, #8
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d920      	bls.n	80093f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80093ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	4413      	add	r3, r2
 80093b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	f003 0307 	and.w	r3, r3, #7
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00b      	beq.n	80093d8 <pvPortMalloc+0xfc>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	613b      	str	r3, [r7, #16]
}
 80093d2:	bf00      	nop
 80093d4:	bf00      	nop
 80093d6:	e7fd      	b.n	80093d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	1ad2      	subs	r2, r2, r3
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80093e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093ea:	69b8      	ldr	r0, [r7, #24]
 80093ec:	f000 f90a 	bl	8009604 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093f0:	4b1d      	ldr	r3, [pc, #116]	@ (8009468 <pvPortMalloc+0x18c>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	4a1b      	ldr	r2, [pc, #108]	@ (8009468 <pvPortMalloc+0x18c>)
 80093fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093fe:	4b1a      	ldr	r3, [pc, #104]	@ (8009468 <pvPortMalloc+0x18c>)
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	4b1b      	ldr	r3, [pc, #108]	@ (8009470 <pvPortMalloc+0x194>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	429a      	cmp	r2, r3
 8009408:	d203      	bcs.n	8009412 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800940a:	4b17      	ldr	r3, [pc, #92]	@ (8009468 <pvPortMalloc+0x18c>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a18      	ldr	r2, [pc, #96]	@ (8009470 <pvPortMalloc+0x194>)
 8009410:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009414:	685a      	ldr	r2, [r3, #4]
 8009416:	4b13      	ldr	r3, [pc, #76]	@ (8009464 <pvPortMalloc+0x188>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	431a      	orrs	r2, r3
 800941c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009422:	2200      	movs	r2, #0
 8009424:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009426:	4b13      	ldr	r3, [pc, #76]	@ (8009474 <pvPortMalloc+0x198>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3301      	adds	r3, #1
 800942c:	4a11      	ldr	r2, [pc, #68]	@ (8009474 <pvPortMalloc+0x198>)
 800942e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009430:	f7fe fc2a 	bl	8007c88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009434:	69fb      	ldr	r3, [r7, #28]
 8009436:	f003 0307 	and.w	r3, r3, #7
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00b      	beq.n	8009456 <pvPortMalloc+0x17a>
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	60fb      	str	r3, [r7, #12]
}
 8009450:	bf00      	nop
 8009452:	bf00      	nop
 8009454:	e7fd      	b.n	8009452 <pvPortMalloc+0x176>
	return pvReturn;
 8009456:	69fb      	ldr	r3, [r7, #28]
}
 8009458:	4618      	mov	r0, r3
 800945a:	3728      	adds	r7, #40	@ 0x28
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	20001c10 	.word	0x20001c10
 8009464:	20001c24 	.word	0x20001c24
 8009468:	20001c14 	.word	0x20001c14
 800946c:	20001c08 	.word	0x20001c08
 8009470:	20001c18 	.word	0x20001c18
 8009474:	20001c1c 	.word	0x20001c1c

08009478 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d04f      	beq.n	800952a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800948a:	2308      	movs	r3, #8
 800948c:	425b      	negs	r3, r3
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	4413      	add	r3, r2
 8009492:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	4b25      	ldr	r3, [pc, #148]	@ (8009534 <vPortFree+0xbc>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4013      	ands	r3, r2
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d10b      	bne.n	80094be <vPortFree+0x46>
	__asm volatile
 80094a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094aa:	f383 8811 	msr	BASEPRI, r3
 80094ae:	f3bf 8f6f 	isb	sy
 80094b2:	f3bf 8f4f 	dsb	sy
 80094b6:	60fb      	str	r3, [r7, #12]
}
 80094b8:	bf00      	nop
 80094ba:	bf00      	nop
 80094bc:	e7fd      	b.n	80094ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00b      	beq.n	80094de <vPortFree+0x66>
	__asm volatile
 80094c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ca:	f383 8811 	msr	BASEPRI, r3
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	f3bf 8f4f 	dsb	sy
 80094d6:	60bb      	str	r3, [r7, #8]
}
 80094d8:	bf00      	nop
 80094da:	bf00      	nop
 80094dc:	e7fd      	b.n	80094da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	685a      	ldr	r2, [r3, #4]
 80094e2:	4b14      	ldr	r3, [pc, #80]	@ (8009534 <vPortFree+0xbc>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4013      	ands	r3, r2
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d01e      	beq.n	800952a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d11a      	bne.n	800952a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	685a      	ldr	r2, [r3, #4]
 80094f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009534 <vPortFree+0xbc>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	43db      	mvns	r3, r3
 80094fe:	401a      	ands	r2, r3
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009504:	f7fe fbb2 	bl	8007c6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	685a      	ldr	r2, [r3, #4]
 800950c:	4b0a      	ldr	r3, [pc, #40]	@ (8009538 <vPortFree+0xc0>)
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	4413      	add	r3, r2
 8009512:	4a09      	ldr	r2, [pc, #36]	@ (8009538 <vPortFree+0xc0>)
 8009514:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009516:	6938      	ldr	r0, [r7, #16]
 8009518:	f000 f874 	bl	8009604 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800951c:	4b07      	ldr	r3, [pc, #28]	@ (800953c <vPortFree+0xc4>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	3301      	adds	r3, #1
 8009522:	4a06      	ldr	r2, [pc, #24]	@ (800953c <vPortFree+0xc4>)
 8009524:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009526:	f7fe fbaf 	bl	8007c88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800952a:	bf00      	nop
 800952c:	3718      	adds	r7, #24
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	20001c24 	.word	0x20001c24
 8009538:	20001c14 	.word	0x20001c14
 800953c:	20001c20 	.word	0x20001c20

08009540 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009540:	b480      	push	{r7}
 8009542:	b085      	sub	sp, #20
 8009544:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009546:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800954a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800954c:	4b27      	ldr	r3, [pc, #156]	@ (80095ec <prvHeapInit+0xac>)
 800954e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f003 0307 	and.w	r3, r3, #7
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00c      	beq.n	8009574 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3307      	adds	r3, #7
 800955e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f023 0307 	bic.w	r3, r3, #7
 8009566:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009568:	68ba      	ldr	r2, [r7, #8]
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	1ad3      	subs	r3, r2, r3
 800956e:	4a1f      	ldr	r2, [pc, #124]	@ (80095ec <prvHeapInit+0xac>)
 8009570:	4413      	add	r3, r2
 8009572:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009578:	4a1d      	ldr	r2, [pc, #116]	@ (80095f0 <prvHeapInit+0xb0>)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800957e:	4b1c      	ldr	r3, [pc, #112]	@ (80095f0 <prvHeapInit+0xb0>)
 8009580:	2200      	movs	r2, #0
 8009582:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68ba      	ldr	r2, [r7, #8]
 8009588:	4413      	add	r3, r2
 800958a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800958c:	2208      	movs	r2, #8
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	1a9b      	subs	r3, r3, r2
 8009592:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f023 0307 	bic.w	r3, r3, #7
 800959a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	4a15      	ldr	r2, [pc, #84]	@ (80095f4 <prvHeapInit+0xb4>)
 80095a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80095a2:	4b14      	ldr	r3, [pc, #80]	@ (80095f4 <prvHeapInit+0xb4>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2200      	movs	r2, #0
 80095a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80095aa:	4b12      	ldr	r3, [pc, #72]	@ (80095f4 <prvHeapInit+0xb4>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2200      	movs	r2, #0
 80095b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	1ad2      	subs	r2, r2, r3
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80095c0:	4b0c      	ldr	r3, [pc, #48]	@ (80095f4 <prvHeapInit+0xb4>)
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	683b      	ldr	r3, [r7, #0]
 80095c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	4a0a      	ldr	r2, [pc, #40]	@ (80095f8 <prvHeapInit+0xb8>)
 80095ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	4a09      	ldr	r2, [pc, #36]	@ (80095fc <prvHeapInit+0xbc>)
 80095d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80095d8:	4b09      	ldr	r3, [pc, #36]	@ (8009600 <prvHeapInit+0xc0>)
 80095da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80095de:	601a      	str	r2, [r3, #0]
}
 80095e0:	bf00      	nop
 80095e2:	3714      	adds	r7, #20
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	20001050 	.word	0x20001050
 80095f0:	20001c08 	.word	0x20001c08
 80095f4:	20001c10 	.word	0x20001c10
 80095f8:	20001c18 	.word	0x20001c18
 80095fc:	20001c14 	.word	0x20001c14
 8009600:	20001c24 	.word	0x20001c24

08009604 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800960c:	4b28      	ldr	r3, [pc, #160]	@ (80096b0 <prvInsertBlockIntoFreeList+0xac>)
 800960e:	60fb      	str	r3, [r7, #12]
 8009610:	e002      	b.n	8009618 <prvInsertBlockIntoFreeList+0x14>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	687a      	ldr	r2, [r7, #4]
 800961e:	429a      	cmp	r2, r3
 8009620:	d8f7      	bhi.n	8009612 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	68ba      	ldr	r2, [r7, #8]
 800962c:	4413      	add	r3, r2
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	429a      	cmp	r2, r3
 8009632:	d108      	bne.n	8009646 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	685a      	ldr	r2, [r3, #4]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	441a      	add	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	68ba      	ldr	r2, [r7, #8]
 8009650:	441a      	add	r2, r3
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	429a      	cmp	r2, r3
 8009658:	d118      	bne.n	800968c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681a      	ldr	r2, [r3, #0]
 800965e:	4b15      	ldr	r3, [pc, #84]	@ (80096b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	429a      	cmp	r2, r3
 8009664:	d00d      	beq.n	8009682 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	441a      	add	r2, r3
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	601a      	str	r2, [r3, #0]
 8009680:	e008      	b.n	8009694 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009682:	4b0c      	ldr	r3, [pc, #48]	@ (80096b4 <prvInsertBlockIntoFreeList+0xb0>)
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	601a      	str	r2, [r3, #0]
 800968a:	e003      	b.n	8009694 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681a      	ldr	r2, [r3, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009694:	68fa      	ldr	r2, [r7, #12]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	429a      	cmp	r2, r3
 800969a:	d002      	beq.n	80096a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	687a      	ldr	r2, [r7, #4]
 80096a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80096a2:	bf00      	nop
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr
 80096ae:	bf00      	nop
 80096b0:	20001c08 	.word	0x20001c08
 80096b4:	20001c10 	.word	0x20001c10

080096b8 <memset>:
 80096b8:	4402      	add	r2, r0
 80096ba:	4603      	mov	r3, r0
 80096bc:	4293      	cmp	r3, r2
 80096be:	d100      	bne.n	80096c2 <memset+0xa>
 80096c0:	4770      	bx	lr
 80096c2:	f803 1b01 	strb.w	r1, [r3], #1
 80096c6:	e7f9      	b.n	80096bc <memset+0x4>

080096c8 <__libc_init_array>:
 80096c8:	b570      	push	{r4, r5, r6, lr}
 80096ca:	4d0d      	ldr	r5, [pc, #52]	@ (8009700 <__libc_init_array+0x38>)
 80096cc:	4c0d      	ldr	r4, [pc, #52]	@ (8009704 <__libc_init_array+0x3c>)
 80096ce:	1b64      	subs	r4, r4, r5
 80096d0:	10a4      	asrs	r4, r4, #2
 80096d2:	2600      	movs	r6, #0
 80096d4:	42a6      	cmp	r6, r4
 80096d6:	d109      	bne.n	80096ec <__libc_init_array+0x24>
 80096d8:	4d0b      	ldr	r5, [pc, #44]	@ (8009708 <__libc_init_array+0x40>)
 80096da:	4c0c      	ldr	r4, [pc, #48]	@ (800970c <__libc_init_array+0x44>)
 80096dc:	f000 f826 	bl	800972c <_init>
 80096e0:	1b64      	subs	r4, r4, r5
 80096e2:	10a4      	asrs	r4, r4, #2
 80096e4:	2600      	movs	r6, #0
 80096e6:	42a6      	cmp	r6, r4
 80096e8:	d105      	bne.n	80096f6 <__libc_init_array+0x2e>
 80096ea:	bd70      	pop	{r4, r5, r6, pc}
 80096ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f0:	4798      	blx	r3
 80096f2:	3601      	adds	r6, #1
 80096f4:	e7ee      	b.n	80096d4 <__libc_init_array+0xc>
 80096f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80096fa:	4798      	blx	r3
 80096fc:	3601      	adds	r6, #1
 80096fe:	e7f2      	b.n	80096e6 <__libc_init_array+0x1e>
 8009700:	0800991c 	.word	0x0800991c
 8009704:	0800991c 	.word	0x0800991c
 8009708:	0800991c 	.word	0x0800991c
 800970c:	08009920 	.word	0x08009920

08009710 <memcpy>:
 8009710:	440a      	add	r2, r1
 8009712:	4291      	cmp	r1, r2
 8009714:	f100 33ff 	add.w	r3, r0, #4294967295
 8009718:	d100      	bne.n	800971c <memcpy+0xc>
 800971a:	4770      	bx	lr
 800971c:	b510      	push	{r4, lr}
 800971e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009726:	4291      	cmp	r1, r2
 8009728:	d1f9      	bne.n	800971e <memcpy+0xe>
 800972a:	bd10      	pop	{r4, pc}

0800972c <_init>:
 800972c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800972e:	bf00      	nop
 8009730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009732:	bc08      	pop	{r3}
 8009734:	469e      	mov	lr, r3
 8009736:	4770      	bx	lr

08009738 <_fini>:
 8009738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800973a:	bf00      	nop
 800973c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800973e:	bc08      	pop	{r3}
 8009740:	469e      	mov	lr, r3
 8009742:	4770      	bx	lr

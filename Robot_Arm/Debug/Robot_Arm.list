
Robot_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ec4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  0800a054  0800a054  0000b054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a224  0800a224  0000c060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a224  0800a224  0000b224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a22c  0800a22c  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a22c  0800a22c  0000b22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a230  0800a230  0000b230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a234  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb8  20000060  0800a294  0000c060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c18  0800a294  0000cc18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad40  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035bd  00000000  00000000  00026dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  0002a390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011fe  00000000  00000000  0002baa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c89  00000000  00000000  0002cc9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000196e5  00000000  00000000  00030927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcfe9  00000000  00000000  0004a00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00146ff5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062b8  00000000  00000000  00147038  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0014d2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a03c 	.word	0x0800a03c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800a03c 	.word	0x0800a03c

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	@ 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2iz>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007a4:	d215      	bcs.n	80007d2 <__aeabi_d2iz+0x36>
 80007a6:	d511      	bpl.n	80007cc <__aeabi_d2iz+0x30>
 80007a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b0:	d912      	bls.n	80007d8 <__aeabi_d2iz+0x3c>
 80007b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	bf18      	it	ne
 80007c8:	4240      	negne	r0, r0
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d105      	bne.n	80007e4 <__aeabi_d2iz+0x48>
 80007d8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007dc:	bf08      	it	eq
 80007de:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000800:	f000 b988 	b.w	8000b14 <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9d08      	ldr	r5, [sp, #32]
 8000822:	468e      	mov	lr, r1
 8000824:	4604      	mov	r4, r0
 8000826:	4688      	mov	r8, r1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d14a      	bne.n	80008c2 <__udivmoddi4+0xa6>
 800082c:	428a      	cmp	r2, r1
 800082e:	4617      	mov	r7, r2
 8000830:	d962      	bls.n	80008f8 <__udivmoddi4+0xdc>
 8000832:	fab2 f682 	clz	r6, r2
 8000836:	b14e      	cbz	r6, 800084c <__udivmoddi4+0x30>
 8000838:	f1c6 0320 	rsb	r3, r6, #32
 800083c:	fa01 f806 	lsl.w	r8, r1, r6
 8000840:	fa20 f303 	lsr.w	r3, r0, r3
 8000844:	40b7      	lsls	r7, r6
 8000846:	ea43 0808 	orr.w	r8, r3, r8
 800084a:	40b4      	lsls	r4, r6
 800084c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000850:	fa1f fc87 	uxth.w	ip, r7
 8000854:	fbb8 f1fe 	udiv	r1, r8, lr
 8000858:	0c23      	lsrs	r3, r4, #16
 800085a:	fb0e 8811 	mls	r8, lr, r1, r8
 800085e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000862:	fb01 f20c 	mul.w	r2, r1, ip
 8000866:	429a      	cmp	r2, r3
 8000868:	d909      	bls.n	800087e <__udivmoddi4+0x62>
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000870:	f080 80ea 	bcs.w	8000a48 <__udivmoddi4+0x22c>
 8000874:	429a      	cmp	r2, r3
 8000876:	f240 80e7 	bls.w	8000a48 <__udivmoddi4+0x22c>
 800087a:	3902      	subs	r1, #2
 800087c:	443b      	add	r3, r7
 800087e:	1a9a      	subs	r2, r3, r2
 8000880:	b2a3      	uxth	r3, r4
 8000882:	fbb2 f0fe 	udiv	r0, r2, lr
 8000886:	fb0e 2210 	mls	r2, lr, r0, r2
 800088a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800088e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000892:	459c      	cmp	ip, r3
 8000894:	d909      	bls.n	80008aa <__udivmoddi4+0x8e>
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	f100 32ff 	add.w	r2, r0, #4294967295
 800089c:	f080 80d6 	bcs.w	8000a4c <__udivmoddi4+0x230>
 80008a0:	459c      	cmp	ip, r3
 80008a2:	f240 80d3 	bls.w	8000a4c <__udivmoddi4+0x230>
 80008a6:	443b      	add	r3, r7
 80008a8:	3802      	subs	r0, #2
 80008aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008ae:	eba3 030c 	sub.w	r3, r3, ip
 80008b2:	2100      	movs	r1, #0
 80008b4:	b11d      	cbz	r5, 80008be <__udivmoddi4+0xa2>
 80008b6:	40f3      	lsrs	r3, r6
 80008b8:	2200      	movs	r2, #0
 80008ba:	e9c5 3200 	strd	r3, r2, [r5]
 80008be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d905      	bls.n	80008d2 <__udivmoddi4+0xb6>
 80008c6:	b10d      	cbz	r5, 80008cc <__udivmoddi4+0xb0>
 80008c8:	e9c5 0100 	strd	r0, r1, [r5]
 80008cc:	2100      	movs	r1, #0
 80008ce:	4608      	mov	r0, r1
 80008d0:	e7f5      	b.n	80008be <__udivmoddi4+0xa2>
 80008d2:	fab3 f183 	clz	r1, r3
 80008d6:	2900      	cmp	r1, #0
 80008d8:	d146      	bne.n	8000968 <__udivmoddi4+0x14c>
 80008da:	4573      	cmp	r3, lr
 80008dc:	d302      	bcc.n	80008e4 <__udivmoddi4+0xc8>
 80008de:	4282      	cmp	r2, r0
 80008e0:	f200 8105 	bhi.w	8000aee <__udivmoddi4+0x2d2>
 80008e4:	1a84      	subs	r4, r0, r2
 80008e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80008ea:	2001      	movs	r0, #1
 80008ec:	4690      	mov	r8, r2
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d0e5      	beq.n	80008be <__udivmoddi4+0xa2>
 80008f2:	e9c5 4800 	strd	r4, r8, [r5]
 80008f6:	e7e2      	b.n	80008be <__udivmoddi4+0xa2>
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	f000 8090 	beq.w	8000a1e <__udivmoddi4+0x202>
 80008fe:	fab2 f682 	clz	r6, r2
 8000902:	2e00      	cmp	r6, #0
 8000904:	f040 80a4 	bne.w	8000a50 <__udivmoddi4+0x234>
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	0c03      	lsrs	r3, r0, #16
 800090c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000910:	b280      	uxth	r0, r0
 8000912:	b2bc      	uxth	r4, r7
 8000914:	2101      	movs	r1, #1
 8000916:	fbb2 fcfe 	udiv	ip, r2, lr
 800091a:	fb0e 221c 	mls	r2, lr, ip, r2
 800091e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000922:	fb04 f20c 	mul.w	r2, r4, ip
 8000926:	429a      	cmp	r2, r3
 8000928:	d907      	bls.n	800093a <__udivmoddi4+0x11e>
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000930:	d202      	bcs.n	8000938 <__udivmoddi4+0x11c>
 8000932:	429a      	cmp	r2, r3
 8000934:	f200 80e0 	bhi.w	8000af8 <__udivmoddi4+0x2dc>
 8000938:	46c4      	mov	ip, r8
 800093a:	1a9b      	subs	r3, r3, r2
 800093c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000940:	fb0e 3312 	mls	r3, lr, r2, r3
 8000944:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000948:	fb02 f404 	mul.w	r4, r2, r4
 800094c:	429c      	cmp	r4, r3
 800094e:	d907      	bls.n	8000960 <__udivmoddi4+0x144>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f102 30ff 	add.w	r0, r2, #4294967295
 8000956:	d202      	bcs.n	800095e <__udivmoddi4+0x142>
 8000958:	429c      	cmp	r4, r3
 800095a:	f200 80ca 	bhi.w	8000af2 <__udivmoddi4+0x2d6>
 800095e:	4602      	mov	r2, r0
 8000960:	1b1b      	subs	r3, r3, r4
 8000962:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000966:	e7a5      	b.n	80008b4 <__udivmoddi4+0x98>
 8000968:	f1c1 0620 	rsb	r6, r1, #32
 800096c:	408b      	lsls	r3, r1
 800096e:	fa22 f706 	lsr.w	r7, r2, r6
 8000972:	431f      	orrs	r7, r3
 8000974:	fa0e f401 	lsl.w	r4, lr, r1
 8000978:	fa20 f306 	lsr.w	r3, r0, r6
 800097c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000980:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000984:	4323      	orrs	r3, r4
 8000986:	fa00 f801 	lsl.w	r8, r0, r1
 800098a:	fa1f fc87 	uxth.w	ip, r7
 800098e:	fbbe f0f9 	udiv	r0, lr, r9
 8000992:	0c1c      	lsrs	r4, r3, #16
 8000994:	fb09 ee10 	mls	lr, r9, r0, lr
 8000998:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800099c:	fb00 fe0c 	mul.w	lr, r0, ip
 80009a0:	45a6      	cmp	lr, r4
 80009a2:	fa02 f201 	lsl.w	r2, r2, r1
 80009a6:	d909      	bls.n	80009bc <__udivmoddi4+0x1a0>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80009ae:	f080 809c 	bcs.w	8000aea <__udivmoddi4+0x2ce>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f240 8099 	bls.w	8000aea <__udivmoddi4+0x2ce>
 80009b8:	3802      	subs	r0, #2
 80009ba:	443c      	add	r4, r7
 80009bc:	eba4 040e 	sub.w	r4, r4, lr
 80009c0:	fa1f fe83 	uxth.w	lr, r3
 80009c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80009c8:	fb09 4413 	mls	r4, r9, r3, r4
 80009cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80009d4:	45a4      	cmp	ip, r4
 80009d6:	d908      	bls.n	80009ea <__udivmoddi4+0x1ce>
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	f103 3eff 	add.w	lr, r3, #4294967295
 80009de:	f080 8082 	bcs.w	8000ae6 <__udivmoddi4+0x2ca>
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d97f      	bls.n	8000ae6 <__udivmoddi4+0x2ca>
 80009e6:	3b02      	subs	r3, #2
 80009e8:	443c      	add	r4, r7
 80009ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009ee:	eba4 040c 	sub.w	r4, r4, ip
 80009f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80009f6:	4564      	cmp	r4, ip
 80009f8:	4673      	mov	r3, lr
 80009fa:	46e1      	mov	r9, ip
 80009fc:	d362      	bcc.n	8000ac4 <__udivmoddi4+0x2a8>
 80009fe:	d05f      	beq.n	8000ac0 <__udivmoddi4+0x2a4>
 8000a00:	b15d      	cbz	r5, 8000a1a <__udivmoddi4+0x1fe>
 8000a02:	ebb8 0203 	subs.w	r2, r8, r3
 8000a06:	eb64 0409 	sbc.w	r4, r4, r9
 8000a0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000a12:	431e      	orrs	r6, r3
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	e9c5 6400 	strd	r6, r4, [r5]
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	e74f      	b.n	80008be <__udivmoddi4+0xa2>
 8000a1e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a22:	0c01      	lsrs	r1, r0, #16
 8000a24:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a28:	b280      	uxth	r0, r0
 8000a2a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4638      	mov	r0, r7
 8000a32:	463c      	mov	r4, r7
 8000a34:	46b8      	mov	r8, r7
 8000a36:	46be      	mov	lr, r7
 8000a38:	2620      	movs	r6, #32
 8000a3a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a3e:	eba2 0208 	sub.w	r2, r2, r8
 8000a42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a46:	e766      	b.n	8000916 <__udivmoddi4+0xfa>
 8000a48:	4601      	mov	r1, r0
 8000a4a:	e718      	b.n	800087e <__udivmoddi4+0x62>
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	e72c      	b.n	80008aa <__udivmoddi4+0x8e>
 8000a50:	f1c6 0220 	rsb	r2, r6, #32
 8000a54:	fa2e f302 	lsr.w	r3, lr, r2
 8000a58:	40b7      	lsls	r7, r6
 8000a5a:	40b1      	lsls	r1, r6
 8000a5c:	fa20 f202 	lsr.w	r2, r0, r2
 8000a60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a64:	430a      	orrs	r2, r1
 8000a66:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a6a:	b2bc      	uxth	r4, r7
 8000a6c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a70:	0c11      	lsrs	r1, r2, #16
 8000a72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a76:	fb08 f904 	mul.w	r9, r8, r4
 8000a7a:	40b0      	lsls	r0, r6
 8000a7c:	4589      	cmp	r9, r1
 8000a7e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a82:	b280      	uxth	r0, r0
 8000a84:	d93e      	bls.n	8000b04 <__udivmoddi4+0x2e8>
 8000a86:	1879      	adds	r1, r7, r1
 8000a88:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a8c:	d201      	bcs.n	8000a92 <__udivmoddi4+0x276>
 8000a8e:	4589      	cmp	r9, r1
 8000a90:	d81f      	bhi.n	8000ad2 <__udivmoddi4+0x2b6>
 8000a92:	eba1 0109 	sub.w	r1, r1, r9
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa2:	b292      	uxth	r2, r2
 8000aa4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000aa8:	4542      	cmp	r2, r8
 8000aaa:	d229      	bcs.n	8000b00 <__udivmoddi4+0x2e4>
 8000aac:	18ba      	adds	r2, r7, r2
 8000aae:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ab2:	d2c4      	bcs.n	8000a3e <__udivmoddi4+0x222>
 8000ab4:	4542      	cmp	r2, r8
 8000ab6:	d2c2      	bcs.n	8000a3e <__udivmoddi4+0x222>
 8000ab8:	f1a9 0102 	sub.w	r1, r9, #2
 8000abc:	443a      	add	r2, r7
 8000abe:	e7be      	b.n	8000a3e <__udivmoddi4+0x222>
 8000ac0:	45f0      	cmp	r8, lr
 8000ac2:	d29d      	bcs.n	8000a00 <__udivmoddi4+0x1e4>
 8000ac4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ac8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000acc:	3801      	subs	r0, #1
 8000ace:	46e1      	mov	r9, ip
 8000ad0:	e796      	b.n	8000a00 <__udivmoddi4+0x1e4>
 8000ad2:	eba7 0909 	sub.w	r9, r7, r9
 8000ad6:	4449      	add	r1, r9
 8000ad8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000adc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ae0:	fb09 f804 	mul.w	r8, r9, r4
 8000ae4:	e7db      	b.n	8000a9e <__udivmoddi4+0x282>
 8000ae6:	4673      	mov	r3, lr
 8000ae8:	e77f      	b.n	80009ea <__udivmoddi4+0x1ce>
 8000aea:	4650      	mov	r0, sl
 8000aec:	e766      	b.n	80009bc <__udivmoddi4+0x1a0>
 8000aee:	4608      	mov	r0, r1
 8000af0:	e6fd      	b.n	80008ee <__udivmoddi4+0xd2>
 8000af2:	443b      	add	r3, r7
 8000af4:	3a02      	subs	r2, #2
 8000af6:	e733      	b.n	8000960 <__udivmoddi4+0x144>
 8000af8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	e71c      	b.n	800093a <__udivmoddi4+0x11e>
 8000b00:	4649      	mov	r1, r9
 8000b02:	e79c      	b.n	8000a3e <__udivmoddi4+0x222>
 8000b04:	eba1 0109 	sub.w	r1, r1, r9
 8000b08:	46c4      	mov	ip, r8
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fb09 f804 	mul.w	r8, r9, r4
 8000b12:	e7c4      	b.n	8000a9e <__udivmoddi4+0x282>

08000b14 <__aeabi_idiv0>:
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f002 fbae 	bl	800327c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f886 	bl	8000c30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f000 fb34 	bl	8001190 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b28:	f000 fb02 	bl	8001130 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b2c:	f000 f962 	bl	8000df4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b30:	f000 f9ba 	bl	8000ea8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b34:	f000 f8ce 	bl	8000cd4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000b38:	f000 fa10 	bl	8000f5c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000b3c:	f000 fa68 	bl	8001010 <MX_TIM8_Init>
  /* USER CODE END 2 */



  /* Init scheduler */
  osKernelInitialize();
 8000b40:	f006 f952 	bl	8006de8 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Index_Finger */
  Index_FingerHandle = osTimerNew(Index, osTimerOnce, NULL, &Index_Finger_attributes);
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <main+0xc0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4824      	ldr	r0, [pc, #144]	@ (8000bdc <main+0xc4>)
 8000b4c:	f006 fa58 	bl	8007000 <osTimerNew>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4a23      	ldr	r2, [pc, #140]	@ (8000be0 <main+0xc8>)
 8000b54:	6013      	str	r3, [r2, #0]

  /* creation of Thumb_Finger */
  Thumb_FingerHandle = osTimerNew(Thumb, osTimerOnce, NULL, &Thumb_Finger_attributes);
 8000b56:	4b23      	ldr	r3, [pc, #140]	@ (8000be4 <main+0xcc>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4822      	ldr	r0, [pc, #136]	@ (8000be8 <main+0xd0>)
 8000b5e:	f006 fa4f 	bl	8007000 <osTimerNew>
 8000b62:	4603      	mov	r3, r0
 8000b64:	4a21      	ldr	r2, [pc, #132]	@ (8000bec <main+0xd4>)
 8000b66:	6013      	str	r3, [r2, #0]

  /* creation of Middle_Finger */
  Middle_FingerHandle = osTimerNew(Middle, osTimerOnce, NULL, &Middle_Finger_attributes);
 8000b68:	4b21      	ldr	r3, [pc, #132]	@ (8000bf0 <main+0xd8>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4821      	ldr	r0, [pc, #132]	@ (8000bf4 <main+0xdc>)
 8000b70:	f006 fa46 	bl	8007000 <osTimerNew>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a20      	ldr	r2, [pc, #128]	@ (8000bf8 <main+0xe0>)
 8000b78:	6013      	str	r3, [r2, #0]

  /* creation of Ring_Finger */
  Ring_FingerHandle = osTimerNew(Ring, osTimerOnce, NULL, &Ring_Finger_attributes);
 8000b7a:	4b20      	ldr	r3, [pc, #128]	@ (8000bfc <main+0xe4>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	481f      	ldr	r0, [pc, #124]	@ (8000c00 <main+0xe8>)
 8000b82:	f006 fa3d 	bl	8007000 <osTimerNew>
 8000b86:	4603      	mov	r3, r0
 8000b88:	4a1e      	ldr	r2, [pc, #120]	@ (8000c04 <main+0xec>)
 8000b8a:	6013      	str	r3, [r2, #0]

  /* creation of Pinky_Finger */
  Pinky_FingerHandle = osTimerNew(Pinky, osTimerOnce, NULL, &Pinky_Finger_attributes);
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c08 <main+0xf0>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	481e      	ldr	r0, [pc, #120]	@ (8000c0c <main+0xf4>)
 8000b94:	f006 fa34 	bl	8007000 <osTimerNew>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8000c10 <main+0xf8>)
 8000b9c:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  servoQueueHandle = osMessageQueueNew(5,sizeof(ServoState), NULL);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2110      	movs	r1, #16
 8000ba2:	2005      	movs	r0, #5
 8000ba4:	f006 fad6 	bl	8007154 <osMessageQueueNew>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	4a1a      	ldr	r2, [pc, #104]	@ (8000c14 <main+0xfc>)
 8000bac:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bae:	4a1a      	ldr	r2, [pc, #104]	@ (8000c18 <main+0x100>)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	481a      	ldr	r0, [pc, #104]	@ (8000c1c <main+0x104>)
 8000bb4:	f006 f962 	bl	8006e7c <osThreadNew>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4a19      	ldr	r2, [pc, #100]	@ (8000c20 <main+0x108>)
 8000bbc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Servo_SetMotionHandle = osThreadNew(Servo_SetMotion, NULL, &Servo_SetMotion_attributes);
 8000bbe:	4a19      	ldr	r2, [pc, #100]	@ (8000c24 <main+0x10c>)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4819      	ldr	r0, [pc, #100]	@ (8000c28 <main+0x110>)
 8000bc4:	f006 f95a 	bl	8006e7c <osThreadNew>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	4a18      	ldr	r2, [pc, #96]	@ (8000c2c <main+0x114>)
 8000bcc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000bce:	f006 f92f 	bl	8006e30 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bd2:	bf00      	nop
 8000bd4:	e7fd      	b.n	8000bd2 <main+0xba>
 8000bd6:	bf00      	nop
 8000bd8:	0800a168 	.word	0x0800a168
 8000bdc:	08002b51 	.word	0x08002b51
 8000be0:	20000284 	.word	0x20000284
 8000be4:	0800a178 	.word	0x0800a178
 8000be8:	08002bad 	.word	0x08002bad
 8000bec:	20000288 	.word	0x20000288
 8000bf0:	0800a188 	.word	0x0800a188
 8000bf4:	08002bfd 	.word	0x08002bfd
 8000bf8:	2000028c 	.word	0x2000028c
 8000bfc:	0800a198 	.word	0x0800a198
 8000c00:	08002c51 	.word	0x08002c51
 8000c04:	20000290 	.word	0x20000290
 8000c08:	0800a1a8 	.word	0x0800a1a8
 8000c0c:	08002ca5 	.word	0x08002ca5
 8000c10:	20000294 	.word	0x20000294
 8000c14:	20000298 	.word	0x20000298
 8000c18:	0800a144 	.word	0x0800a144
 8000c1c:	080022d1 	.word	0x080022d1
 8000c20:	20000280 	.word	0x20000280
 8000c24:	0800a1b8 	.word	0x0800a1b8
 8000c28:	08001291 	.word	0x08001291
 8000c2c:	2000029c 	.word	0x2000029c

08000c30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b096      	sub	sp, #88	@ 0x58
 8000c34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	2244      	movs	r2, #68	@ 0x44
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f009 f9c2 	bl	8009fc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c44:	463b      	mov	r3, r7
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c52:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c56:	f002 fe4d 	bl	80038f4 <HAL_PWREx_ControlVoltageScaling>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c60:	f002 f85c 	bl	8002d1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c64:	2302      	movs	r3, #2
 8000c66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c6e:	2310      	movs	r3, #16
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c72:	2302      	movs	r3, #2
 8000c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c76:	2302      	movs	r3, #2
 8000c78:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c7e:	230a      	movs	r3, #10
 8000c80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c82:	2307      	movs	r3, #7
 8000c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c86:	2302      	movs	r3, #2
 8000c88:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 fe84 	bl	80039a0 <HAL_RCC_OscConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000c9e:	f002 f83d 	bl	8002d1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca2:	230f      	movs	r3, #15
 8000ca4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	2104      	movs	r1, #4
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 fa4c 	bl	8004158 <HAL_RCC_ClockConfig>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cc6:	f002 f829 	bl	8002d1c <Error_Handler>
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3758      	adds	r7, #88	@ 0x58
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b096      	sub	sp, #88	@ 0x58
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cda:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ce6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]
 8000cf4:	611a      	str	r2, [r3, #16]
 8000cf6:	615a      	str	r2, [r3, #20]
 8000cf8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	222c      	movs	r2, #44	@ 0x2c
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f009 f961 	bl	8009fc8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d06:	4b39      	ldr	r3, [pc, #228]	@ (8000dec <MX_TIM1_Init+0x118>)
 8000d08:	4a39      	ldr	r2, [pc, #228]	@ (8000df0 <MX_TIM1_Init+0x11c>)
 8000d0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000d0c:	4b37      	ldr	r3, [pc, #220]	@ (8000dec <MX_TIM1_Init+0x118>)
 8000d0e:	224f      	movs	r2, #79	@ 0x4f
 8000d10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b36      	ldr	r3, [pc, #216]	@ (8000dec <MX_TIM1_Init+0x118>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000d18:	4b34      	ldr	r3, [pc, #208]	@ (8000dec <MX_TIM1_Init+0x118>)
 8000d1a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000d1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b32      	ldr	r3, [pc, #200]	@ (8000dec <MX_TIM1_Init+0x118>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d26:	4b31      	ldr	r3, [pc, #196]	@ (8000dec <MX_TIM1_Init+0x118>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8000dec <MX_TIM1_Init+0x118>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d32:	482e      	ldr	r0, [pc, #184]	@ (8000dec <MX_TIM1_Init+0x118>)
 8000d34:	f004 f9f4 	bl	8005120 <HAL_TIM_PWM_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d3e:	f001 ffed 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d42:	2300      	movs	r3, #0
 8000d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d46:	2300      	movs	r3, #0
 8000d48:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d4e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d52:	4619      	mov	r1, r3
 8000d54:	4825      	ldr	r0, [pc, #148]	@ (8000dec <MX_TIM1_Init+0x118>)
 8000d56:	f005 f9bd 	bl	80060d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d60:	f001 ffdc 	bl	8002d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d64:	2360      	movs	r3, #96	@ 0x60
 8000d66:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d70:	2300      	movs	r3, #0
 8000d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d74:	2300      	movs	r3, #0
 8000d76:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d80:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d84:	2200      	movs	r2, #0
 8000d86:	4619      	mov	r1, r3
 8000d88:	4818      	ldr	r0, [pc, #96]	@ (8000dec <MX_TIM1_Init+0x118>)
 8000d8a:	f004 fcc5 	bl	8005718 <HAL_TIM_PWM_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000d94:	f001 ffc2 	bl	8002d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000da8:	2300      	movs	r3, #0
 8000daa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000db0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dba:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4807      	ldr	r0, [pc, #28]	@ (8000dec <MX_TIM1_Init+0x118>)
 8000dce:	f005 fa09 	bl	80061e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000dd8:	f001 ffa0 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ddc:	4803      	ldr	r0, [pc, #12]	@ (8000dec <MX_TIM1_Init+0x118>)
 8000dde:	f002 f839 	bl	8002e54 <HAL_TIM_MspPostInit>

}
 8000de2:	bf00      	nop
 8000de4:	3758      	adds	r7, #88	@ 0x58
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000007c 	.word	0x2000007c
 8000df0:	40012c00 	.word	0x40012c00

08000df4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	@ 0x28
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e06:	463b      	mov	r3, r7
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
 8000e14:	615a      	str	r2, [r3, #20]
 8000e16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e18:	4b22      	ldr	r3, [pc, #136]	@ (8000ea4 <MX_TIM2_Init+0xb0>)
 8000e1a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000e20:	4b20      	ldr	r3, [pc, #128]	@ (8000ea4 <MX_TIM2_Init+0xb0>)
 8000e22:	224f      	movs	r2, #79	@ 0x4f
 8000e24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e26:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <MX_TIM2_Init+0xb0>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea4 <MX_TIM2_Init+0xb0>)
 8000e2e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000e32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ea4 <MX_TIM2_Init+0xb0>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea4 <MX_TIM2_Init+0xb0>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e40:	4818      	ldr	r0, [pc, #96]	@ (8000ea4 <MX_TIM2_Init+0xb0>)
 8000e42:	f004 f96d 	bl	8005120 <HAL_TIM_PWM_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e4c:	f001 ff66 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4811      	ldr	r0, [pc, #68]	@ (8000ea4 <MX_TIM2_Init+0xb0>)
 8000e60:	f005 f938 	bl	80060d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e6a:	f001 ff57 	bl	8002d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6e:	2360      	movs	r3, #96	@ 0x60
 8000e70:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7e:	463b      	mov	r3, r7
 8000e80:	2200      	movs	r2, #0
 8000e82:	4619      	mov	r1, r3
 8000e84:	4807      	ldr	r0, [pc, #28]	@ (8000ea4 <MX_TIM2_Init+0xb0>)
 8000e86:	f004 fc47 	bl	8005718 <HAL_TIM_PWM_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000e90:	f001 ff44 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e94:	4803      	ldr	r0, [pc, #12]	@ (8000ea4 <MX_TIM2_Init+0xb0>)
 8000e96:	f001 ffdd 	bl	8002e54 <HAL_TIM_MspPostInit>

}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	@ 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200000c8 	.word	0x200000c8

08000ea8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eae:	f107 031c 	add.w	r3, r7, #28
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eba:	463b      	mov	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
 8000ec8:	615a      	str	r2, [r3, #20]
 8000eca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ecc:	4b21      	ldr	r3, [pc, #132]	@ (8000f54 <MX_TIM3_Init+0xac>)
 8000ece:	4a22      	ldr	r2, [pc, #136]	@ (8000f58 <MX_TIM3_Init+0xb0>)
 8000ed0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000ed2:	4b20      	ldr	r3, [pc, #128]	@ (8000f54 <MX_TIM3_Init+0xac>)
 8000ed4:	224f      	movs	r2, #79	@ 0x4f
 8000ed6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <MX_TIM3_Init+0xac>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000ede:	4b1d      	ldr	r3, [pc, #116]	@ (8000f54 <MX_TIM3_Init+0xac>)
 8000ee0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000ee4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8000f54 <MX_TIM3_Init+0xac>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eec:	4b19      	ldr	r3, [pc, #100]	@ (8000f54 <MX_TIM3_Init+0xac>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000ef2:	4818      	ldr	r0, [pc, #96]	@ (8000f54 <MX_TIM3_Init+0xac>)
 8000ef4:	f004 f914 	bl	8005120 <HAL_TIM_PWM_Init>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000efe:	f001 ff0d 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0a:	f107 031c 	add.w	r3, r7, #28
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4810      	ldr	r0, [pc, #64]	@ (8000f54 <MX_TIM3_Init+0xac>)
 8000f12:	f005 f8df 	bl	80060d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f1c:	f001 fefe 	bl	8002d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f20:	2360      	movs	r3, #96	@ 0x60
 8000f22:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f30:	463b      	mov	r3, r7
 8000f32:	2200      	movs	r2, #0
 8000f34:	4619      	mov	r1, r3
 8000f36:	4807      	ldr	r0, [pc, #28]	@ (8000f54 <MX_TIM3_Init+0xac>)
 8000f38:	f004 fbee 	bl	8005718 <HAL_TIM_PWM_ConfigChannel>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f42:	f001 feeb 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f46:	4803      	ldr	r0, [pc, #12]	@ (8000f54 <MX_TIM3_Init+0xac>)
 8000f48:	f001 ff84 	bl	8002e54 <HAL_TIM_MspPostInit>

}
 8000f4c:	bf00      	nop
 8000f4e:	3728      	adds	r7, #40	@ 0x28
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000114 	.word	0x20000114
 8000f58:	40000400 	.word	0x40000400

08000f5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	@ 0x28
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f62:	f107 031c 	add.w	r3, r7, #28
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6e:	463b      	mov	r3, r7
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
 8000f7c:	615a      	str	r2, [r3, #20]
 8000f7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f80:	4b21      	ldr	r3, [pc, #132]	@ (8001008 <MX_TIM4_Init+0xac>)
 8000f82:	4a22      	ldr	r2, [pc, #136]	@ (800100c <MX_TIM4_Init+0xb0>)
 8000f84:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8000f86:	4b20      	ldr	r3, [pc, #128]	@ (8001008 <MX_TIM4_Init+0xac>)
 8000f88:	224f      	movs	r2, #79	@ 0x4f
 8000f8a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8001008 <MX_TIM4_Init+0xac>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <MX_TIM4_Init+0xac>)
 8000f94:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000f98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001008 <MX_TIM4_Init+0xac>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <MX_TIM4_Init+0xac>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fa6:	4818      	ldr	r0, [pc, #96]	@ (8001008 <MX_TIM4_Init+0xac>)
 8000fa8:	f004 f8ba 	bl	8005120 <HAL_TIM_PWM_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000fb2:	f001 feb3 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fbe:	f107 031c 	add.w	r3, r7, #28
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4810      	ldr	r0, [pc, #64]	@ (8001008 <MX_TIM4_Init+0xac>)
 8000fc6:	f005 f885 	bl	80060d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000fd0:	f001 fea4 	bl	8002d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd4:	2360      	movs	r3, #96	@ 0x60
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fe4:	463b      	mov	r3, r7
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4807      	ldr	r0, [pc, #28]	@ (8001008 <MX_TIM4_Init+0xac>)
 8000fec:	f004 fb94 	bl	8005718 <HAL_TIM_PWM_ConfigChannel>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000ff6:	f001 fe91 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ffa:	4803      	ldr	r0, [pc, #12]	@ (8001008 <MX_TIM4_Init+0xac>)
 8000ffc:	f001 ff2a 	bl	8002e54 <HAL_TIM_MspPostInit>

}
 8001000:	bf00      	nop
 8001002:	3728      	adds	r7, #40	@ 0x28
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000160 	.word	0x20000160
 800100c:	40000800 	.word	0x40000800

08001010 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b096      	sub	sp, #88	@ 0x58
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001016:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001022:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]
 800102c:	609a      	str	r2, [r3, #8]
 800102e:	60da      	str	r2, [r3, #12]
 8001030:	611a      	str	r2, [r3, #16]
 8001032:	615a      	str	r2, [r3, #20]
 8001034:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001036:	1d3b      	adds	r3, r7, #4
 8001038:	222c      	movs	r2, #44	@ 0x2c
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f008 ffc3 	bl	8009fc8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001042:	4b39      	ldr	r3, [pc, #228]	@ (8001128 <MX_TIM8_Init+0x118>)
 8001044:	4a39      	ldr	r2, [pc, #228]	@ (800112c <MX_TIM8_Init+0x11c>)
 8001046:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8001048:	4b37      	ldr	r3, [pc, #220]	@ (8001128 <MX_TIM8_Init+0x118>)
 800104a:	224f      	movs	r2, #79	@ 0x4f
 800104c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800104e:	4b36      	ldr	r3, [pc, #216]	@ (8001128 <MX_TIM8_Init+0x118>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001054:	4b34      	ldr	r3, [pc, #208]	@ (8001128 <MX_TIM8_Init+0x118>)
 8001056:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800105a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800105c:	4b32      	ldr	r3, [pc, #200]	@ (8001128 <MX_TIM8_Init+0x118>)
 800105e:	2200      	movs	r2, #0
 8001060:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001062:	4b31      	ldr	r3, [pc, #196]	@ (8001128 <MX_TIM8_Init+0x118>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001068:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <MX_TIM8_Init+0x118>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800106e:	482e      	ldr	r0, [pc, #184]	@ (8001128 <MX_TIM8_Init+0x118>)
 8001070:	f004 f856 	bl	8005120 <HAL_TIM_PWM_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800107a:	f001 fe4f 	bl	8002d1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800107e:	2300      	movs	r3, #0
 8001080:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800108a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800108e:	4619      	mov	r1, r3
 8001090:	4825      	ldr	r0, [pc, #148]	@ (8001128 <MX_TIM8_Init+0x118>)
 8001092:	f005 f81f 	bl	80060d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800109c:	f001 fe3e 	bl	8002d1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a0:	2360      	movs	r3, #96	@ 0x60
 80010a2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b0:	2300      	movs	r3, #0
 80010b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010b8:	2300      	movs	r3, #0
 80010ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010c0:	2200      	movs	r2, #0
 80010c2:	4619      	mov	r1, r3
 80010c4:	4818      	ldr	r0, [pc, #96]	@ (8001128 <MX_TIM8_Init+0x118>)
 80010c6:	f004 fb27 	bl	8005718 <HAL_TIM_PWM_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80010d0:	f001 fe24 	bl	8002d1c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010d4:	2300      	movs	r3, #0
 80010d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010dc:	2300      	movs	r3, #0
 80010de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80010fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001100:	2300      	movs	r3, #0
 8001102:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001104:	1d3b      	adds	r3, r7, #4
 8001106:	4619      	mov	r1, r3
 8001108:	4807      	ldr	r0, [pc, #28]	@ (8001128 <MX_TIM8_Init+0x118>)
 800110a:	f005 f86b 	bl	80061e4 <HAL_TIMEx_ConfigBreakDeadTime>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8001114:	f001 fe02 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001118:	4803      	ldr	r0, [pc, #12]	@ (8001128 <MX_TIM8_Init+0x118>)
 800111a:	f001 fe9b 	bl	8002e54 <HAL_TIM_MspPostInit>

}
 800111e:	bf00      	nop
 8001120:	3758      	adds	r7, #88	@ 0x58
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200001ac 	.word	0x200001ac
 800112c:	40013400 	.word	0x40013400

08001130 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001136:	4a15      	ldr	r2, [pc, #84]	@ (800118c <MX_USART2_UART_Init+0x5c>)
 8001138:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800113a:	4b13      	ldr	r3, [pc, #76]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 800113c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001140:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b09      	ldr	r3, [pc, #36]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001166:	4b08      	ldr	r3, [pc, #32]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001168:	2200      	movs	r2, #0
 800116a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800116c:	4b06      	ldr	r3, [pc, #24]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 800116e:	2200      	movs	r2, #0
 8001170:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001172:	4805      	ldr	r0, [pc, #20]	@ (8001188 <MX_USART2_UART_Init+0x58>)
 8001174:	f005 f8d2 	bl	800631c <HAL_UART_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800117e:	f001 fdcd 	bl	8002d1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200001f8 	.word	0x200001f8
 800118c:	40004400 	.word	0x40004400

08001190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08a      	sub	sp, #40	@ 0x28
 8001194:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001196:	f107 0314 	add.w	r3, r7, #20
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
 80011a4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001264 <MX_GPIO_Init+0xd4>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001264 <MX_GPIO_Init+0xd4>)
 80011ac:	f043 0304 	orr.w	r3, r3, #4
 80011b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001264 <MX_GPIO_Init+0xd4>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	f003 0304 	and.w	r3, r3, #4
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011be:	4b29      	ldr	r3, [pc, #164]	@ (8001264 <MX_GPIO_Init+0xd4>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	4a28      	ldr	r2, [pc, #160]	@ (8001264 <MX_GPIO_Init+0xd4>)
 80011c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <MX_GPIO_Init+0xd4>)
 80011cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011d6:	4b23      	ldr	r3, [pc, #140]	@ (8001264 <MX_GPIO_Init+0xd4>)
 80011d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011da:	4a22      	ldr	r2, [pc, #136]	@ (8001264 <MX_GPIO_Init+0xd4>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011e2:	4b20      	ldr	r3, [pc, #128]	@ (8001264 <MX_GPIO_Init+0xd4>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	60bb      	str	r3, [r7, #8]
 80011ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001264 <MX_GPIO_Init+0xd4>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001264 <MX_GPIO_Init+0xd4>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011fa:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <MX_GPIO_Init+0xd4>)
 80011fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001206:	2200      	movs	r2, #0
 8001208:	2120      	movs	r1, #32
 800120a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120e:	f002 fb19 	bl	8003844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001212:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001218:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800121c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001222:	f107 0314 	add.w	r3, r7, #20
 8001226:	4619      	mov	r1, r3
 8001228:	480f      	ldr	r0, [pc, #60]	@ (8001268 <MX_GPIO_Init+0xd8>)
 800122a:	f002 f949 	bl	80034c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800122e:	2320      	movs	r3, #32
 8001230:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001232:	2301      	movs	r3, #1
 8001234:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001248:	f002 f93a 	bl	80034c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800124c:	2200      	movs	r2, #0
 800124e:	2105      	movs	r1, #5
 8001250:	2028      	movs	r0, #40	@ 0x28
 8001252:	f002 f90b 	bl	800346c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001256:	2028      	movs	r0, #40	@ 0x28
 8001258:	f002 f924 	bl	80034a4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	@ 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40021000 	.word	0x40021000
 8001268:	48000800 	.word	0x48000800

0800126c <IsButtonPressed>:



/* Button press detection function - modify for your specific board */
uint8_t IsButtonPressed(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* Assuming B2 is connected to PC13 (common on many Nucleo boards) */
  /* Note: B2 is typically active LOW (returns 0 when pressed) */

  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8001270:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001274:	4805      	ldr	r0, [pc, #20]	@ (800128c <IsButtonPressed+0x20>)
 8001276:	f002 facd 	bl	8003814 <HAL_GPIO_ReadPin>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d101      	bne.n	8001284 <IsButtonPressed+0x18>
  {
	return 1; /* Button pressed */
 8001280:	2301      	movs	r3, #1
 8001282:	e000      	b.n	8001286 <IsButtonPressed+0x1a>
  }
  return 0; /* Button not pressed */
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	48000800 	.word	0x48000800

08001290 <Servo_SetMotion>:
 * @param direction: STOP, CLOCKWISE, or COUNTERCLOCKWISE
 * @param speed: Speed percentage (0-100)
 * @retval None
 */

void Servo_SetMotion(void *argument) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b088      	sub	sp, #32
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
    (void)argument;
    ServoState newState;

    for (;;) {
        // Wait for new state from the queue
        if (osMessageQueueGet(servoQueueHandle, &newState, NULL, osWaitForever) == osOK) {
 8001298:	4b3d      	ldr	r3, [pc, #244]	@ (8001390 <Servo_SetMotion+0x100>)
 800129a:	6818      	ldr	r0, [r3, #0]
 800129c:	f107 010c 	add.w	r1, r7, #12
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	2200      	movs	r2, #0
 80012a6:	f006 f829 	bl	80072fc <osMessageQueueGet>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d16a      	bne.n	8001386 <Servo_SetMotion+0xf6>
            uint32_t pulse;

            // Clamp speed to 0-100%
            if (newState.speed < 0) newState.speed = 0;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da01      	bge.n	80012ba <Servo_SetMotion+0x2a>
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
            if (newState.speed > 100) newState.speed = 100;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2b64      	cmp	r3, #100	@ 0x64
 80012be:	dd01      	ble.n	80012c4 <Servo_SetMotion+0x34>
 80012c0:	2364      	movs	r3, #100	@ 0x64
 80012c2:	60fb      	str	r3, [r7, #12]

            // Calculate pulse width based on direction and speed
            if (newState.dir == STOP) {
 80012c4:	7c3b      	ldrb	r3, [r7, #16]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d103      	bne.n	80012d2 <Servo_SetMotion+0x42>
                pulse = SERVO_STOP;
 80012ca:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80012ce:	61fb      	str	r3, [r7, #28]
 80012d0:	e013      	b.n	80012fa <Servo_SetMotion+0x6a>
            } else if (newState.dir == CLOCKWISE) { // CLOCKWISE
 80012d2:	7c3b      	ldrb	r3, [r7, #16]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d109      	bne.n	80012ec <Servo_SetMotion+0x5c>
                pulse = SERVO_STOP - ((SERVO_STOP - SERVO_MAX_CW) * newState.speed / 100);
 80012d8:	68fa      	ldr	r2, [r7, #12]
 80012da:	4613      	mov	r3, r2
 80012dc:	079b      	lsls	r3, r3, #30
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	1a9b      	subs	r3, r3, r2
 80012e4:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80012e8:	61fb      	str	r3, [r7, #28]
 80012ea:	e006      	b.n	80012fa <Servo_SetMotion+0x6a>
            } else { // DIRECTION_DOWN (COUNTERCLOCKWISE)
                pulse = SERVO_STOP + ((SERVO_MAX_CCW - SERVO_STOP) * newState.speed / 100);
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80012f8:	61fb      	str	r3, [r7, #28]
            }

            // Update servo state with calculated pulse
            servoStates[newState.finger].speed = newState.speed;
 80012fa:	7e3b      	ldrb	r3, [r7, #24]
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4925      	ldr	r1, [pc, #148]	@ (8001394 <Servo_SetMotion+0x104>)
 8001300:	011b      	lsls	r3, r3, #4
 8001302:	440b      	add	r3, r1
 8001304:	601a      	str	r2, [r3, #0]
            servoStates[newState.finger].dir = newState.dir;
 8001306:	7e3b      	ldrb	r3, [r7, #24]
 8001308:	7c39      	ldrb	r1, [r7, #16]
 800130a:	4a22      	ldr	r2, [pc, #136]	@ (8001394 <Servo_SetMotion+0x104>)
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4413      	add	r3, r2
 8001310:	3304      	adds	r3, #4
 8001312:	460a      	mov	r2, r1
 8001314:	701a      	strb	r2, [r3, #0]
            servoStates[newState.finger].pulse = pulse;
 8001316:	7e3b      	ldrb	r3, [r7, #24]
 8001318:	4a1e      	ldr	r2, [pc, #120]	@ (8001394 <Servo_SetMotion+0x104>)
 800131a:	011b      	lsls	r3, r3, #4
 800131c:	4413      	add	r3, r2
 800131e:	3308      	adds	r3, #8
 8001320:	69fa      	ldr	r2, [r7, #28]
 8001322:	601a      	str	r2, [r3, #0]
            servoStates[newState.finger].finger = newState.finger; // Redundant but kept for consistency
 8001324:	7e3b      	ldrb	r3, [r7, #24]
 8001326:	7e39      	ldrb	r1, [r7, #24]
 8001328:	4a1a      	ldr	r2, [pc, #104]	@ (8001394 <Servo_SetMotion+0x104>)
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	4413      	add	r3, r2
 800132e:	330c      	adds	r3, #12
 8001330:	460a      	mov	r2, r1
 8001332:	701a      	strb	r2, [r3, #0]

            // Apply pulse width to the appropriate timer
            switch (newState.finger) {
 8001334:	7e3b      	ldrb	r3, [r7, #24]
 8001336:	2b04      	cmp	r3, #4
 8001338:	d825      	bhi.n	8001386 <Servo_SetMotion+0xf6>
 800133a:	a201      	add	r2, pc, #4	@ (adr r2, 8001340 <Servo_SetMotion+0xb0>)
 800133c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001340:	08001355 	.word	0x08001355
 8001344:	0800135f 	.word	0x0800135f
 8001348:	08001369 	.word	0x08001369
 800134c:	08001373 	.word	0x08001373
 8001350:	0800137d 	.word	0x0800137d
                case THUMB:
                    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8001354:	4b10      	ldr	r3, [pc, #64]	@ (8001398 <Servo_SetMotion+0x108>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	69fa      	ldr	r2, [r7, #28]
 800135a:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 800135c:	e013      	b.n	8001386 <Servo_SetMotion+0xf6>
                case INDEX:
                    __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 800135e:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <Servo_SetMotion+0x10c>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	69fa      	ldr	r2, [r7, #28]
 8001364:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 8001366:	e00e      	b.n	8001386 <Servo_SetMotion+0xf6>
                case MIDDLE:
                    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8001368:	4b0d      	ldr	r3, [pc, #52]	@ (80013a0 <Servo_SetMotion+0x110>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	69fa      	ldr	r2, [r7, #28]
 800136e:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 8001370:	e009      	b.n	8001386 <Servo_SetMotion+0xf6>
                case RING:
                    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8001372:	4b0c      	ldr	r3, [pc, #48]	@ (80013a4 <Servo_SetMotion+0x114>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	69fa      	ldr	r2, [r7, #28]
 8001378:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 800137a:	e004      	b.n	8001386 <Servo_SetMotion+0xf6>
                case PINKY:
                    __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pulse);
 800137c:	4b0a      	ldr	r3, [pc, #40]	@ (80013a8 <Servo_SetMotion+0x118>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	69fa      	ldr	r2, [r7, #28]
 8001382:	635a      	str	r2, [r3, #52]	@ 0x34
                    break;
 8001384:	bf00      	nop
            }
        }
        osDelay(10);
 8001386:	200a      	movs	r0, #10
 8001388:	f005 fe0a 	bl	8006fa0 <osDelay>
        if (osMessageQueueGet(servoQueueHandle, &newState, NULL, osWaitForever) == osOK) {
 800138c:	e784      	b.n	8001298 <Servo_SetMotion+0x8>
 800138e:	bf00      	nop
 8001390:	20000298 	.word	0x20000298
 8001394:	20000000 	.word	0x20000000
 8001398:	2000007c 	.word	0x2000007c
 800139c:	200000c8 	.word	0x200000c8
 80013a0:	20000114 	.word	0x20000114
 80013a4:	20000160 	.word	0x20000160
 80013a8:	200001ac 	.word	0x200001ac

080013ac <Servo_StopAll>:
/**
 * @brief Stops all servos
 * @param None
 * @retval None
 */
void Servo_StopAll(void) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b094      	sub	sp, #80	@ 0x50
 80013b0:	af00      	add	r7, sp, #0
	ServoState state1 = {0,STOP,0,INDEX}; // Stops Index Finger
 80013b2:	2300      	movs	r3, #0
 80013b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80013b6:	2300      	movs	r3, #0
 80013b8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80013bc:	2300      	movs	r3, #0
 80013be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80013c0:	2301      	movs	r3, #1
 80013c2:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
	osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 80013c6:	4b30      	ldr	r3, [pc, #192]	@ (8001488 <Servo_StopAll+0xdc>)
 80013c8:	6818      	ldr	r0, [r3, #0]
 80013ca:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80013ce:	2300      	movs	r3, #0
 80013d0:	2200      	movs	r2, #0
 80013d2:	f005 ff33 	bl	800723c <osMessageQueuePut>

	ServoState state2 = {0,STOP,0,THUMB}; // Stops Thumb
 80013d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
	osMessageQueuePut(servoQueueHandle, &state2, 0, 0);
 80013e4:	4b28      	ldr	r3, [pc, #160]	@ (8001488 <Servo_StopAll+0xdc>)
 80013e6:	6818      	ldr	r0, [r3, #0]
 80013e8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80013ec:	2300      	movs	r3, #0
 80013ee:	2200      	movs	r2, #0
 80013f0:	f005 ff24 	bl	800723c <osMessageQueuePut>

	ServoState state3 = {0,STOP,0,MIDDLE}; // Stops Middle Finger
 80013f4:	2300      	movs	r3, #0
 80013f6:	623b      	str	r3, [r7, #32]
 80013f8:	2300      	movs	r3, #0
 80013fa:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 80013fe:	2300      	movs	r3, #0
 8001400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001402:	2302      	movs	r3, #2
 8001404:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
	osMessageQueuePut(servoQueueHandle, &state3, 0, 0);
 8001408:	4b1f      	ldr	r3, [pc, #124]	@ (8001488 <Servo_StopAll+0xdc>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	f107 0120 	add.w	r1, r7, #32
 8001410:	2300      	movs	r3, #0
 8001412:	2200      	movs	r2, #0
 8001414:	f005 ff12 	bl	800723c <osMessageQueuePut>

	ServoState state4 = {0,STOP,0,RING}; // Stops Ring Finger
 8001418:	2300      	movs	r3, #0
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	2300      	movs	r3, #0
 800141e:	753b      	strb	r3, [r7, #20]
 8001420:	2300      	movs	r3, #0
 8001422:	61bb      	str	r3, [r7, #24]
 8001424:	2303      	movs	r3, #3
 8001426:	773b      	strb	r3, [r7, #28]
	osMessageQueuePut(servoQueueHandle, &state4, 0, 0);
 8001428:	4b17      	ldr	r3, [pc, #92]	@ (8001488 <Servo_StopAll+0xdc>)
 800142a:	6818      	ldr	r0, [r3, #0]
 800142c:	f107 0110 	add.w	r1, r7, #16
 8001430:	2300      	movs	r3, #0
 8001432:	2200      	movs	r2, #0
 8001434:	f005 ff02 	bl	800723c <osMessageQueuePut>

	ServoState state5 = {0,STOP,0,PINKY}; // Stops Pinky Finger
 8001438:	2300      	movs	r3, #0
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	2300      	movs	r3, #0
 800143e:	713b      	strb	r3, [r7, #4]
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	2304      	movs	r3, #4
 8001446:	733b      	strb	r3, [r7, #12]
	osMessageQueuePut(servoQueueHandle, &state5, 0, 0);
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <Servo_StopAll+0xdc>)
 800144a:	6818      	ldr	r0, [r3, #0]
 800144c:	4639      	mov	r1, r7
 800144e:	2300      	movs	r3, #0
 8001450:	2200      	movs	r2, #0
 8001452:	f005 fef3 	bl	800723c <osMessageQueuePut>

	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001456:	2100      	movs	r1, #0
 8001458:	480c      	ldr	r0, [pc, #48]	@ (800148c <Servo_StopAll+0xe0>)
 800145a:	f003 ffbf 	bl	80053dc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 800145e:	2100      	movs	r1, #0
 8001460:	480b      	ldr	r0, [pc, #44]	@ (8001490 <Servo_StopAll+0xe4>)
 8001462:	f003 ffbb 	bl	80053dc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001466:	2100      	movs	r1, #0
 8001468:	480a      	ldr	r0, [pc, #40]	@ (8001494 <Servo_StopAll+0xe8>)
 800146a:	f003 ffb7 	bl	80053dc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800146e:	2100      	movs	r1, #0
 8001470:	4809      	ldr	r0, [pc, #36]	@ (8001498 <Servo_StopAll+0xec>)
 8001472:	f003 ffb3 	bl	80053dc <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001476:	2100      	movs	r1, #0
 8001478:	4808      	ldr	r0, [pc, #32]	@ (800149c <Servo_StopAll+0xf0>)
 800147a:	f003 ffaf 	bl	80053dc <HAL_TIM_PWM_Stop>
}
 800147e:	bf00      	nop
 8001480:	3750      	adds	r7, #80	@ 0x50
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000298 	.word	0x20000298
 800148c:	2000007c 	.word	0x2000007c
 8001490:	200000c8 	.word	0x200000c8
 8001494:	20000114 	.word	0x20000114
 8001498:	20000160 	.word	0x20000160
 800149c:	200001ac 	.word	0x200001ac

080014a0 <Servo_Init>:
/**
 * @brief Initialize all servo timers and start PWM
 * @param None
 * @retval None
 */
void Servo_Init(void) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
	// Start all PWM channels
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80014a4:	2100      	movs	r1, #0
 80014a6:	480a      	ldr	r0, [pc, #40]	@ (80014d0 <Servo_Init+0x30>)
 80014a8:	f003 fe92 	bl	80051d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80014ac:	2100      	movs	r1, #0
 80014ae:	4809      	ldr	r0, [pc, #36]	@ (80014d4 <Servo_Init+0x34>)
 80014b0:	f003 fe8e 	bl	80051d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80014b4:	2100      	movs	r1, #0
 80014b6:	4808      	ldr	r0, [pc, #32]	@ (80014d8 <Servo_Init+0x38>)
 80014b8:	f003 fe8a 	bl	80051d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80014bc:	2100      	movs	r1, #0
 80014be:	4807      	ldr	r0, [pc, #28]	@ (80014dc <Servo_Init+0x3c>)
 80014c0:	f003 fe86 	bl	80051d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80014c4:	2100      	movs	r1, #0
 80014c6:	4806      	ldr	r0, [pc, #24]	@ (80014e0 <Servo_Init+0x40>)
 80014c8:	f003 fe82 	bl	80051d0 <HAL_TIM_PWM_Start>
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	2000007c 	.word	0x2000007c
 80014d4:	200000c8 	.word	0x200000c8
 80014d8:	20000114 	.word	0x20000114
 80014dc:	20000160 	.word	0x20000160
 80014e0:	200001ac 	.word	0x200001ac

080014e4 <Direction_Decider>:

int Direction_Decider(int* Desired_Position){
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	if(*Desired_Position < 0){
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	da06      	bge.n	8001502 <Direction_Decider+0x1e>
		*Desired_Position = *Desired_Position * -1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	425a      	negs	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	601a      	str	r2, [r3, #0]
		return CLOCKWISE;
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <Direction_Decider+0x20>
	}
	else{
		return COUNTERCLOCKWISE;
 8001502:	2302      	movs	r3, #2
	}
}
 8001504:	4618      	mov	r0, r3
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr

08001510 <SignLetter>:
 * @brief Example function to demonstrate a sign language letter
 * @param letter: ASCII character (A-Z)
 * @param duration: How long to hold the position (in ms)
 * @retval None
 */
void SignLetter(char letter) {
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	71fb      	strb	r3, [r7, #7]

	Servo_Init();
 800151a:	f7ff ffc1 	bl	80014a0 <Servo_Init>
	// Set finger positions based on the letter
	switch(letter) {
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	3b30      	subs	r3, #48	@ 0x30
 8001522:	2b2a      	cmp	r3, #42	@ 0x2a
 8001524:	f200 869f 	bhi.w	8002266 <SignLetter+0xd56>
 8001528:	a201      	add	r2, pc, #4	@ (adr r2, 8001530 <SignLetter+0x20>)
 800152a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152e:	bf00      	nop
 8001530:	08002229 	.word	0x08002229
 8001534:	08002267 	.word	0x08002267
 8001538:	08002267 	.word	0x08002267
 800153c:	08002267 	.word	0x08002267
 8001540:	08002267 	.word	0x08002267
 8001544:	08002267 	.word	0x08002267
 8001548:	08002267 	.word	0x08002267
 800154c:	08002267 	.word	0x08002267
 8001550:	08002267 	.word	0x08002267
 8001554:	08002267 	.word	0x08002267
 8001558:	08002267 	.word	0x08002267
 800155c:	08002267 	.word	0x08002267
 8001560:	08002267 	.word	0x08002267
 8001564:	08002267 	.word	0x08002267
 8001568:	08002267 	.word	0x08002267
 800156c:	08002267 	.word	0x08002267
 8001570:	08002267 	.word	0x08002267
 8001574:	080015dd 	.word	0x080015dd
 8001578:	08001641 	.word	0x08001641
 800157c:	08001699 	.word	0x08001699
 8001580:	08001765 	.word	0x08001765
 8001584:	08001811 	.word	0x08001811
 8001588:	08001901 	.word	0x08001901
 800158c:	08001979 	.word	0x08001979
 8001590:	080019db 	.word	0x080019db
 8001594:	08001a3b 	.word	0x08001a3b
 8001598:	08001a81 	.word	0x08001a81
 800159c:	08001ac7 	.word	0x08001ac7
 80015a0:	08001b25 	.word	0x08001b25
 80015a4:	08001b9d 	.word	0x08001b9d
 80015a8:	08001c33 	.word	0x08001c33
 80015ac:	08001caf 	.word	0x08001caf
 80015b0:	08001d79 	.word	0x08001d79
 80015b4:	08001e0f 	.word	0x08001e0f
 80015b8:	08001ed9 	.word	0x08001ed9
 80015bc:	08001f21 	.word	0x08001f21
 80015c0:	08001f83 	.word	0x08001f83
 80015c4:	08001fcb 	.word	0x08001fcb
 80015c8:	0800200f 	.word	0x0800200f
 80015cc:	08002053 	.word	0x08002053
 80015d0:	08002095 	.word	0x08002095
 80015d4:	0800215f 	.word	0x0800215f
 80015d8:	080021e1 	.word	0x080021e1
	 case 'A':
		thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 80015dc:	4bb9      	ldr	r3, [pc, #740]	@ (80018c4 <SignLetter+0x3b4>)
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f870 	bl	80006c8 <__aeabi_i2d>
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	4bb6      	ldr	r3, [pc, #728]	@ (80018c8 <SignLetter+0x3b8>)
 80015ee:	f7fe ff1d 	bl	800042c <__aeabi_dsub>
 80015f2:	4602      	mov	r2, r0
 80015f4:	460b      	mov	r3, r1
 80015f6:	4610      	mov	r0, r2
 80015f8:	4619      	mov	r1, r3
 80015fa:	f7ff f8cf 	bl	800079c <__aeabi_d2iz>
 80015fe:	4603      	mov	r3, r0
 8001600:	4ab2      	ldr	r2, [pc, #712]	@ (80018cc <SignLetter+0x3bc>)
 8001602:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001604:	4bb2      	ldr	r3, [pc, #712]	@ (80018d0 <SignLetter+0x3c0>)
 8001606:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800160e:	4ab1      	ldr	r2, [pc, #708]	@ (80018d4 <SignLetter+0x3c4>)
 8001610:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001612:	4bb1      	ldr	r3, [pc, #708]	@ (80018d8 <SignLetter+0x3c8>)
 8001614:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001618:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800161c:	4aaf      	ldr	r2, [pc, #700]	@ (80018dc <SignLetter+0x3cc>)
 800161e:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001620:	4baf      	ldr	r3, [pc, #700]	@ (80018e0 <SignLetter+0x3d0>)
 8001622:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001626:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 800162a:	4aae      	ldr	r2, [pc, #696]	@ (80018e4 <SignLetter+0x3d4>)
 800162c:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800162e:	4bae      	ldr	r3, [pc, #696]	@ (80018e8 <SignLetter+0x3d8>)
 8001630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001634:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001638:	4aac      	ldr	r2, [pc, #688]	@ (80018ec <SignLetter+0x3dc>)
 800163a:	6013      	str	r3, [r2, #0]
		break;
 800163c:	f000 be17 	b.w	800226e <SignLetter+0xd5e>

	 case 'B':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001640:	4ba0      	ldr	r3, [pc, #640]	@ (80018c4 <SignLetter+0x3b4>)
 8001642:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001646:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800164a:	4aa0      	ldr	r2, [pc, #640]	@ (80018cc <SignLetter+0x3bc>)
 800164c:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 800164e:	4ba0      	ldr	r3, [pc, #640]	@ (80018d0 <SignLetter+0x3c0>)
 8001650:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001654:	461a      	mov	r2, r3
 8001656:	4b9f      	ldr	r3, [pc, #636]	@ (80018d4 <SignLetter+0x3c4>)
 8001658:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 800165a:	4b9f      	ldr	r3, [pc, #636]	@ (80018d8 <SignLetter+0x3c8>)
 800165c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001660:	461a      	mov	r2, r3
 8001662:	4b9e      	ldr	r3, [pc, #632]	@ (80018dc <SignLetter+0x3cc>)
 8001664:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 0 * RING_CLOSED;
 8001666:	4b9e      	ldr	r3, [pc, #632]	@ (80018e0 <SignLetter+0x3d0>)
 8001668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166c:	461a      	mov	r2, r3
 800166e:	4b9d      	ldr	r3, [pc, #628]	@ (80018e4 <SignLetter+0x3d4>)
 8001670:	601a      	str	r2, [r3, #0]
		pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8001672:	4b9d      	ldr	r3, [pc, #628]	@ (80018e8 <SignLetter+0x3d8>)
 8001674:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001678:	461a      	mov	r2, r3
 800167a:	4b9c      	ldr	r3, [pc, #624]	@ (80018ec <SignLetter+0x3dc>)
 800167c:	601a      	str	r2, [r3, #0]

		if(middle_desired_position == 1000){
 800167e:	4b97      	ldr	r3, [pc, #604]	@ (80018dc <SignLetter+0x3cc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001686:	f040 85f1 	bne.w	800226c <SignLetter+0xd5c>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800168a:	2120      	movs	r1, #32
 800168c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001690:	f002 f8f0 	bl	8003874 <HAL_GPIO_TogglePin>
		}

		break;
 8001694:	f000 bdea 	b.w	800226c <SignLetter+0xd5c>

	case 'C':
		thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001698:	4b8a      	ldr	r3, [pc, #552]	@ (80018c4 <SignLetter+0x3b4>)
 800169a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff f812 	bl	80006c8 <__aeabi_i2d>
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	4b87      	ldr	r3, [pc, #540]	@ (80018c8 <SignLetter+0x3b8>)
 80016aa:	f7fe febf 	bl	800042c <__aeabi_dsub>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	4610      	mov	r0, r2
 80016b4:	4619      	mov	r1, r3
 80016b6:	f7ff f871 	bl	800079c <__aeabi_d2iz>
 80016ba:	4603      	mov	r3, r0
 80016bc:	4a83      	ldr	r2, [pc, #524]	@ (80018cc <SignLetter+0x3bc>)
 80016be:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.5 * INDEX_CLOSED;
 80016c0:	4b83      	ldr	r3, [pc, #524]	@ (80018d0 <SignLetter+0x3c0>)
 80016c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe fffe 	bl	80006c8 <__aeabi_i2d>
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	4b87      	ldr	r3, [pc, #540]	@ (80018f0 <SignLetter+0x3e0>)
 80016d2:	f7fe feab 	bl	800042c <__aeabi_dsub>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4610      	mov	r0, r2
 80016dc:	4619      	mov	r1, r3
 80016de:	f7ff f85d 	bl	800079c <__aeabi_d2iz>
 80016e2:	4603      	mov	r3, r0
 80016e4:	4a7b      	ldr	r2, [pc, #492]	@ (80018d4 <SignLetter+0x3c4>)
 80016e6:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.5 * MIDDLE_CLOSED;
 80016e8:	4b7b      	ldr	r3, [pc, #492]	@ (80018d8 <SignLetter+0x3c8>)
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe ffea 	bl	80006c8 <__aeabi_i2d>
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	4b7d      	ldr	r3, [pc, #500]	@ (80018f0 <SignLetter+0x3e0>)
 80016fa:	f7fe fe97 	bl	800042c <__aeabi_dsub>
 80016fe:	4602      	mov	r2, r0
 8001700:	460b      	mov	r3, r1
 8001702:	4610      	mov	r0, r2
 8001704:	4619      	mov	r1, r3
 8001706:	f7ff f849 	bl	800079c <__aeabi_d2iz>
 800170a:	4603      	mov	r3, r0
 800170c:	4a73      	ldr	r2, [pc, #460]	@ (80018dc <SignLetter+0x3cc>)
 800170e:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 0.5 * RING_CLOSED;
 8001710:	4b73      	ldr	r3, [pc, #460]	@ (80018e0 <SignLetter+0x3d0>)
 8001712:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001716:	4618      	mov	r0, r3
 8001718:	f7fe ffd6 	bl	80006c8 <__aeabi_i2d>
 800171c:	f04f 0200 	mov.w	r2, #0
 8001720:	4b74      	ldr	r3, [pc, #464]	@ (80018f4 <SignLetter+0x3e4>)
 8001722:	f7fe fe83 	bl	800042c <__aeabi_dsub>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff f835 	bl	800079c <__aeabi_d2iz>
 8001732:	4603      	mov	r3, r0
 8001734:	4a6b      	ldr	r2, [pc, #428]	@ (80018e4 <SignLetter+0x3d4>)
 8001736:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0.5 * PINKY_CLOSED;
 8001738:	4b6b      	ldr	r3, [pc, #428]	@ (80018e8 <SignLetter+0x3d8>)
 800173a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ffc2 	bl	80006c8 <__aeabi_i2d>
 8001744:	f04f 0200 	mov.w	r2, #0
 8001748:	4b6a      	ldr	r3, [pc, #424]	@ (80018f4 <SignLetter+0x3e4>)
 800174a:	f7fe fe6f 	bl	800042c <__aeabi_dsub>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff f821 	bl	800079c <__aeabi_d2iz>
 800175a:	4603      	mov	r3, r0
 800175c:	4a63      	ldr	r2, [pc, #396]	@ (80018ec <SignLetter+0x3dc>)
 800175e:	6013      	str	r3, [r2, #0]
		break;
 8001760:	f000 bd85 	b.w	800226e <SignLetter+0xd5e>

	case 'D':
		thumb_desired_position = thumb_current - 0.5 * THUMB_CLOSED;
 8001764:	4b57      	ldr	r3, [pc, #348]	@ (80018c4 <SignLetter+0x3b4>)
 8001766:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe ffac 	bl	80006c8 <__aeabi_i2d>
 8001770:	f04f 0200 	mov.w	r2, #0
 8001774:	4b5e      	ldr	r3, [pc, #376]	@ (80018f0 <SignLetter+0x3e0>)
 8001776:	f7fe fe59 	bl	800042c <__aeabi_dsub>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4610      	mov	r0, r2
 8001780:	4619      	mov	r1, r3
 8001782:	f7ff f80b 	bl	800079c <__aeabi_d2iz>
 8001786:	4603      	mov	r3, r0
 8001788:	4a50      	ldr	r2, [pc, #320]	@ (80018cc <SignLetter+0x3bc>)
 800178a:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 800178c:	4b50      	ldr	r3, [pc, #320]	@ (80018d0 <SignLetter+0x3c0>)
 800178e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001792:	461a      	mov	r2, r3
 8001794:	4b4f      	ldr	r3, [pc, #316]	@ (80018d4 <SignLetter+0x3c4>)
 8001796:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0.75 * MIDDLE_CLOSED;
 8001798:	4b4f      	ldr	r3, [pc, #316]	@ (80018d8 <SignLetter+0x3c8>)
 800179a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe ff92 	bl	80006c8 <__aeabi_i2d>
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b53      	ldr	r3, [pc, #332]	@ (80018f8 <SignLetter+0x3e8>)
 80017aa:	f7fe fe3f 	bl	800042c <__aeabi_dsub>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4610      	mov	r0, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f7fe fff1 	bl	800079c <__aeabi_d2iz>
 80017ba:	4603      	mov	r3, r0
 80017bc:	4a47      	ldr	r2, [pc, #284]	@ (80018dc <SignLetter+0x3cc>)
 80017be:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 0.75 * RING_CLOSED;
 80017c0:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <SignLetter+0x3d0>)
 80017c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7fe ff7e 	bl	80006c8 <__aeabi_i2d>
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b4a      	ldr	r3, [pc, #296]	@ (80018fc <SignLetter+0x3ec>)
 80017d2:	f7fe fe2b 	bl	800042c <__aeabi_dsub>
 80017d6:	4602      	mov	r2, r0
 80017d8:	460b      	mov	r3, r1
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7fe ffdd 	bl	800079c <__aeabi_d2iz>
 80017e2:	4603      	mov	r3, r0
 80017e4:	4a3f      	ldr	r2, [pc, #252]	@ (80018e4 <SignLetter+0x3d4>)
 80017e6:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0.75 * PINKY_CLOSED;
 80017e8:	4b3f      	ldr	r3, [pc, #252]	@ (80018e8 <SignLetter+0x3d8>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe ff6a 	bl	80006c8 <__aeabi_i2d>
 80017f4:	f04f 0200 	mov.w	r2, #0
 80017f8:	4b40      	ldr	r3, [pc, #256]	@ (80018fc <SignLetter+0x3ec>)
 80017fa:	f7fe fe17 	bl	800042c <__aeabi_dsub>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4610      	mov	r0, r2
 8001804:	4619      	mov	r1, r3
 8001806:	f7fe ffc9 	bl	800079c <__aeabi_d2iz>
 800180a:	4603      	mov	r3, r0
 800180c:	4a37      	ldr	r2, [pc, #220]	@ (80018ec <SignLetter+0x3dc>)
 800180e:	6013      	str	r3, [r2, #0]

	case 'E':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001810:	4b2c      	ldr	r3, [pc, #176]	@ (80018c4 <SignLetter+0x3b4>)
 8001812:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001816:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800181a:	4a2c      	ldr	r2, [pc, #176]	@ (80018cc <SignLetter+0x3bc>)
 800181c:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.75 * INDEX_CLOSED;
 800181e:	4b2c      	ldr	r3, [pc, #176]	@ (80018d0 <SignLetter+0x3c0>)
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe ff4f 	bl	80006c8 <__aeabi_i2d>
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	4b32      	ldr	r3, [pc, #200]	@ (80018f8 <SignLetter+0x3e8>)
 8001830:	f7fe fdfc 	bl	800042c <__aeabi_dsub>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f7fe ffae 	bl	800079c <__aeabi_d2iz>
 8001840:	4603      	mov	r3, r0
 8001842:	4a24      	ldr	r2, [pc, #144]	@ (80018d4 <SignLetter+0x3c4>)
 8001844:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.75 * MIDDLE_CLOSED;
 8001846:	4b24      	ldr	r3, [pc, #144]	@ (80018d8 <SignLetter+0x3c8>)
 8001848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe ff3b 	bl	80006c8 <__aeabi_i2d>
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b28      	ldr	r3, [pc, #160]	@ (80018f8 <SignLetter+0x3e8>)
 8001858:	f7fe fde8 	bl	800042c <__aeabi_dsub>
 800185c:	4602      	mov	r2, r0
 800185e:	460b      	mov	r3, r1
 8001860:	4610      	mov	r0, r2
 8001862:	4619      	mov	r1, r3
 8001864:	f7fe ff9a 	bl	800079c <__aeabi_d2iz>
 8001868:	4603      	mov	r3, r0
 800186a:	4a1c      	ldr	r2, [pc, #112]	@ (80018dc <SignLetter+0x3cc>)
 800186c:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 0.75 * RING_CLOSED;
 800186e:	4b1c      	ldr	r3, [pc, #112]	@ (80018e0 <SignLetter+0x3d0>)
 8001870:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001874:	4618      	mov	r0, r3
 8001876:	f7fe ff27 	bl	80006c8 <__aeabi_i2d>
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b1f      	ldr	r3, [pc, #124]	@ (80018fc <SignLetter+0x3ec>)
 8001880:	f7fe fdd4 	bl	800042c <__aeabi_dsub>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f7fe ff86 	bl	800079c <__aeabi_d2iz>
 8001890:	4603      	mov	r3, r0
 8001892:	4a14      	ldr	r2, [pc, #80]	@ (80018e4 <SignLetter+0x3d4>)
 8001894:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0.75 * PINKY_CLOSED;
 8001896:	4b14      	ldr	r3, [pc, #80]	@ (80018e8 <SignLetter+0x3d8>)
 8001898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800189c:	4618      	mov	r0, r3
 800189e:	f7fe ff13 	bl	80006c8 <__aeabi_i2d>
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	4b15      	ldr	r3, [pc, #84]	@ (80018fc <SignLetter+0x3ec>)
 80018a8:	f7fe fdc0 	bl	800042c <__aeabi_dsub>
 80018ac:	4602      	mov	r2, r0
 80018ae:	460b      	mov	r3, r1
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	f7fe ff72 	bl	800079c <__aeabi_d2iz>
 80018b8:	4603      	mov	r3, r0
 80018ba:	4a0c      	ldr	r2, [pc, #48]	@ (80018ec <SignLetter+0x3dc>)
 80018bc:	6013      	str	r3, [r2, #0]
		break;
 80018be:	f000 bcd6 	b.w	800226e <SignLetter+0xd5e>
 80018c2:	bf00      	nop
 80018c4:	200002a0 	.word	0x200002a0
 80018c8:	406f4000 	.word	0x406f4000
 80018cc:	200002ac 	.word	0x200002ac
 80018d0:	200002a2 	.word	0x200002a2
 80018d4:	200002b0 	.word	0x200002b0
 80018d8:	200002a4 	.word	0x200002a4
 80018dc:	200002b4 	.word	0x200002b4
 80018e0:	200002a6 	.word	0x200002a6
 80018e4:	200002b8 	.word	0x200002b8
 80018e8:	200002a8 	.word	0x200002a8
 80018ec:	200002bc 	.word	0x200002bc
 80018f0:	407f4000 	.word	0x407f4000
 80018f4:	4082c000 	.word	0x4082c000
 80018f8:	40877000 	.word	0x40877000
 80018fc:	408c2000 	.word	0x408c2000

	case 'F':
		thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001900:	4b99      	ldr	r3, [pc, #612]	@ (8001b68 <SignLetter+0x658>)
 8001902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fede 	bl	80006c8 <__aeabi_i2d>
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	4b96      	ldr	r3, [pc, #600]	@ (8001b6c <SignLetter+0x65c>)
 8001912:	f7fe fd8b 	bl	800042c <__aeabi_dsub>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f7fe ff3d 	bl	800079c <__aeabi_d2iz>
 8001922:	4603      	mov	r3, r0
 8001924:	4a92      	ldr	r2, [pc, #584]	@ (8001b70 <SignLetter+0x660>)
 8001926:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.75 * INDEX_CLOSED;
 8001928:	4b92      	ldr	r3, [pc, #584]	@ (8001b74 <SignLetter+0x664>)
 800192a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe feca 	bl	80006c8 <__aeabi_i2d>
 8001934:	f04f 0200 	mov.w	r2, #0
 8001938:	4b8f      	ldr	r3, [pc, #572]	@ (8001b78 <SignLetter+0x668>)
 800193a:	f7fe fd77 	bl	800042c <__aeabi_dsub>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4610      	mov	r0, r2
 8001944:	4619      	mov	r1, r3
 8001946:	f7fe ff29 	bl	800079c <__aeabi_d2iz>
 800194a:	4603      	mov	r3, r0
 800194c:	4a8b      	ldr	r2, [pc, #556]	@ (8001b7c <SignLetter+0x66c>)
 800194e:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001950:	4b8b      	ldr	r3, [pc, #556]	@ (8001b80 <SignLetter+0x670>)
 8001952:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001956:	461a      	mov	r2, r3
 8001958:	4b8a      	ldr	r3, [pc, #552]	@ (8001b84 <SignLetter+0x674>)
 800195a:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 0 * RING_CLOSED;
 800195c:	4b8a      	ldr	r3, [pc, #552]	@ (8001b88 <SignLetter+0x678>)
 800195e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001962:	461a      	mov	r2, r3
 8001964:	4b89      	ldr	r3, [pc, #548]	@ (8001b8c <SignLetter+0x67c>)
 8001966:	601a      	str	r2, [r3, #0]
		pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8001968:	4b89      	ldr	r3, [pc, #548]	@ (8001b90 <SignLetter+0x680>)
 800196a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196e:	461a      	mov	r2, r3
 8001970:	4b88      	ldr	r3, [pc, #544]	@ (8001b94 <SignLetter+0x684>)
 8001972:	601a      	str	r2, [r3, #0]
		break;
 8001974:	f000 bc7b 	b.w	800226e <SignLetter+0xd5e>

	case 'G':
		thumb_desired_position = thumb_current - 0.5 * THUMB_CLOSED;
 8001978:	4b7b      	ldr	r3, [pc, #492]	@ (8001b68 <SignLetter+0x658>)
 800197a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fea2 	bl	80006c8 <__aeabi_i2d>
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	4b83      	ldr	r3, [pc, #524]	@ (8001b98 <SignLetter+0x688>)
 800198a:	f7fe fd4f 	bl	800042c <__aeabi_dsub>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4610      	mov	r0, r2
 8001994:	4619      	mov	r1, r3
 8001996:	f7fe ff01 	bl	800079c <__aeabi_d2iz>
 800199a:	4603      	mov	r3, r0
 800199c:	4a74      	ldr	r2, [pc, #464]	@ (8001b70 <SignLetter+0x660>)
 800199e:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 80019a0:	4b74      	ldr	r3, [pc, #464]	@ (8001b74 <SignLetter+0x664>)
 80019a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b74      	ldr	r3, [pc, #464]	@ (8001b7c <SignLetter+0x66c>)
 80019aa:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80019ac:	4b74      	ldr	r3, [pc, #464]	@ (8001b80 <SignLetter+0x670>)
 80019ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80019b6:	4a73      	ldr	r2, [pc, #460]	@ (8001b84 <SignLetter+0x674>)
 80019b8:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 80019ba:	4b73      	ldr	r3, [pc, #460]	@ (8001b88 <SignLetter+0x678>)
 80019bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c0:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80019c4:	4a71      	ldr	r2, [pc, #452]	@ (8001b8c <SignLetter+0x67c>)
 80019c6:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80019c8:	4b71      	ldr	r3, [pc, #452]	@ (8001b90 <SignLetter+0x680>)
 80019ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ce:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80019d2:	4a70      	ldr	r2, [pc, #448]	@ (8001b94 <SignLetter+0x684>)
 80019d4:	6013      	str	r3, [r2, #0]
		break;
 80019d6:	f000 bc4a 	b.w	800226e <SignLetter+0xd5e>

	case 'H':
		thumb_desired_position = thumb_current - 0.75 * THUMB_CLOSED;
 80019da:	4b63      	ldr	r3, [pc, #396]	@ (8001b68 <SignLetter+0x658>)
 80019dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fe71 	bl	80006c8 <__aeabi_i2d>
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	4b63      	ldr	r3, [pc, #396]	@ (8001b78 <SignLetter+0x668>)
 80019ec:	f7fe fd1e 	bl	800042c <__aeabi_dsub>
 80019f0:	4602      	mov	r2, r0
 80019f2:	460b      	mov	r3, r1
 80019f4:	4610      	mov	r0, r2
 80019f6:	4619      	mov	r1, r3
 80019f8:	f7fe fed0 	bl	800079c <__aeabi_d2iz>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4a5c      	ldr	r2, [pc, #368]	@ (8001b70 <SignLetter+0x660>)
 8001a00:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001a02:	4b5c      	ldr	r3, [pc, #368]	@ (8001b74 <SignLetter+0x664>)
 8001a04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4b5c      	ldr	r3, [pc, #368]	@ (8001b7c <SignLetter+0x66c>)
 8001a0c:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001a0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001b80 <SignLetter+0x670>)
 8001a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a14:	461a      	mov	r2, r3
 8001a16:	4b5b      	ldr	r3, [pc, #364]	@ (8001b84 <SignLetter+0x674>)
 8001a18:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001a1a:	4b5b      	ldr	r3, [pc, #364]	@ (8001b88 <SignLetter+0x678>)
 8001a1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a20:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001a24:	4a59      	ldr	r2, [pc, #356]	@ (8001b8c <SignLetter+0x67c>)
 8001a26:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001a28:	4b59      	ldr	r3, [pc, #356]	@ (8001b90 <SignLetter+0x680>)
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001a32:	4a58      	ldr	r2, [pc, #352]	@ (8001b94 <SignLetter+0x684>)
 8001a34:	6013      	str	r3, [r2, #0]
		break;
 8001a36:	f000 bc1a 	b.w	800226e <SignLetter+0xd5e>

	case 'I':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001a3a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b68 <SignLetter+0x658>)
 8001a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a40:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001a44:	4a4a      	ldr	r2, [pc, #296]	@ (8001b70 <SignLetter+0x660>)
 8001a46:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001a48:	4b4a      	ldr	r3, [pc, #296]	@ (8001b74 <SignLetter+0x664>)
 8001a4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a4e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001a52:	4a4a      	ldr	r2, [pc, #296]	@ (8001b7c <SignLetter+0x66c>)
 8001a54:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001a56:	4b4a      	ldr	r3, [pc, #296]	@ (8001b80 <SignLetter+0x670>)
 8001a58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a5c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001a60:	4a48      	ldr	r2, [pc, #288]	@ (8001b84 <SignLetter+0x674>)
 8001a62:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001a64:	4b48      	ldr	r3, [pc, #288]	@ (8001b88 <SignLetter+0x678>)
 8001a66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6a:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001a6e:	4a47      	ldr	r2, [pc, #284]	@ (8001b8c <SignLetter+0x67c>)
 8001a70:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8001a72:	4b47      	ldr	r3, [pc, #284]	@ (8001b90 <SignLetter+0x680>)
 8001a74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4b46      	ldr	r3, [pc, #280]	@ (8001b94 <SignLetter+0x684>)
 8001a7c:	601a      	str	r2, [r3, #0]
		break;
 8001a7e:	e3f6      	b.n	800226e <SignLetter+0xd5e>

	case 'J':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001a80:	4b39      	ldr	r3, [pc, #228]	@ (8001b68 <SignLetter+0x658>)
 8001a82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a86:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001a8a:	4a39      	ldr	r2, [pc, #228]	@ (8001b70 <SignLetter+0x660>)
 8001a8c:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001a8e:	4b39      	ldr	r3, [pc, #228]	@ (8001b74 <SignLetter+0x664>)
 8001a90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a94:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001a98:	4a38      	ldr	r2, [pc, #224]	@ (8001b7c <SignLetter+0x66c>)
 8001a9a:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001a9c:	4b38      	ldr	r3, [pc, #224]	@ (8001b80 <SignLetter+0x670>)
 8001a9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aa2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001aa6:	4a37      	ldr	r2, [pc, #220]	@ (8001b84 <SignLetter+0x674>)
 8001aa8:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001aaa:	4b37      	ldr	r3, [pc, #220]	@ (8001b88 <SignLetter+0x678>)
 8001aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab0:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001ab4:	4a35      	ldr	r2, [pc, #212]	@ (8001b8c <SignLetter+0x67c>)
 8001ab6:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8001ab8:	4b35      	ldr	r3, [pc, #212]	@ (8001b90 <SignLetter+0x680>)
 8001aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4b34      	ldr	r3, [pc, #208]	@ (8001b94 <SignLetter+0x684>)
 8001ac2:	601a      	str	r2, [r3, #0]
		break;
 8001ac4:	e3d3      	b.n	800226e <SignLetter+0xd5e>

	case 'K':
		thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001ac6:	4b28      	ldr	r3, [pc, #160]	@ (8001b68 <SignLetter+0x658>)
 8001ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fdfb 	bl	80006c8 <__aeabi_i2d>
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	4b25      	ldr	r3, [pc, #148]	@ (8001b6c <SignLetter+0x65c>)
 8001ad8:	f7fe fca8 	bl	800042c <__aeabi_dsub>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7fe fe5a 	bl	800079c <__aeabi_d2iz>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	4a21      	ldr	r2, [pc, #132]	@ (8001b70 <SignLetter+0x660>)
 8001aec:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001aee:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <SignLetter+0x664>)
 8001af0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af4:	461a      	mov	r2, r3
 8001af6:	4b21      	ldr	r3, [pc, #132]	@ (8001b7c <SignLetter+0x66c>)
 8001af8:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001afa:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <SignLetter+0x670>)
 8001afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b20      	ldr	r3, [pc, #128]	@ (8001b84 <SignLetter+0x674>)
 8001b04:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001b06:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <SignLetter+0x678>)
 8001b08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b0c:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001b10:	4a1e      	ldr	r2, [pc, #120]	@ (8001b8c <SignLetter+0x67c>)
 8001b12:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001b14:	4b1e      	ldr	r3, [pc, #120]	@ (8001b90 <SignLetter+0x680>)
 8001b16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1a:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001b1e:	4a1d      	ldr	r2, [pc, #116]	@ (8001b94 <SignLetter+0x684>)
 8001b20:	6013      	str	r3, [r2, #0]
		break;
 8001b22:	e3a4      	b.n	800226e <SignLetter+0xd5e>

	case 'L':
		thumb_desired_position = thumb_current - 0 * THUMB_CLOSED;
 8001b24:	4b10      	ldr	r3, [pc, #64]	@ (8001b68 <SignLetter+0x658>)
 8001b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4b10      	ldr	r3, [pc, #64]	@ (8001b70 <SignLetter+0x660>)
 8001b2e:	601a      	str	r2, [r3, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001b30:	4b10      	ldr	r3, [pc, #64]	@ (8001b74 <SignLetter+0x664>)
 8001b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b10      	ldr	r3, [pc, #64]	@ (8001b7c <SignLetter+0x66c>)
 8001b3a:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001b3c:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <SignLetter+0x670>)
 8001b3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b42:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001b46:	4a0f      	ldr	r2, [pc, #60]	@ (8001b84 <SignLetter+0x674>)
 8001b48:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001b4a:	4b0f      	ldr	r3, [pc, #60]	@ (8001b88 <SignLetter+0x678>)
 8001b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b50:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001b54:	4a0d      	ldr	r2, [pc, #52]	@ (8001b8c <SignLetter+0x67c>)
 8001b56:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001b58:	4b0d      	ldr	r3, [pc, #52]	@ (8001b90 <SignLetter+0x680>)
 8001b5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5e:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001b62:	4a0c      	ldr	r2, [pc, #48]	@ (8001b94 <SignLetter+0x684>)
 8001b64:	6013      	str	r3, [r2, #0]
		break;
 8001b66:	e382      	b.n	800226e <SignLetter+0xd5e>
 8001b68:	200002a0 	.word	0x200002a0
 8001b6c:	406f4000 	.word	0x406f4000
 8001b70:	200002ac 	.word	0x200002ac
 8001b74:	200002a2 	.word	0x200002a2
 8001b78:	40877000 	.word	0x40877000
 8001b7c:	200002b0 	.word	0x200002b0
 8001b80:	200002a4 	.word	0x200002a4
 8001b84:	200002b4 	.word	0x200002b4
 8001b88:	200002a6 	.word	0x200002a6
 8001b8c:	200002b8 	.word	0x200002b8
 8001b90:	200002a8 	.word	0x200002a8
 8001b94:	200002bc 	.word	0x200002bc
 8001b98:	407f4000 	.word	0x407f4000

	case 'M':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //Make speed faster so thumb closes first or the speed of the other 4 fingers slower.
 8001b9c:	4bbe      	ldr	r3, [pc, #760]	@ (8001e98 <SignLetter+0x988>)
 8001b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001ba6:	4abd      	ldr	r2, [pc, #756]	@ (8001e9c <SignLetter+0x98c>)
 8001ba8:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.9 * INDEX_CLOSED;
 8001baa:	4bbd      	ldr	r3, [pc, #756]	@ (8001ea0 <SignLetter+0x990>)
 8001bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7fe fd89 	bl	80006c8 <__aeabi_i2d>
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4bba      	ldr	r3, [pc, #744]	@ (8001ea4 <SignLetter+0x994>)
 8001bbc:	f7fe fc36 	bl	800042c <__aeabi_dsub>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	f7fe fde8 	bl	800079c <__aeabi_d2iz>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4ab6      	ldr	r2, [pc, #728]	@ (8001ea8 <SignLetter+0x998>)
 8001bd0:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.9 * MIDDLE_CLOSED;
 8001bd2:	4bb6      	ldr	r3, [pc, #728]	@ (8001eac <SignLetter+0x99c>)
 8001bd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fd75 	bl	80006c8 <__aeabi_i2d>
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4bb0      	ldr	r3, [pc, #704]	@ (8001ea4 <SignLetter+0x994>)
 8001be4:	f7fe fc22 	bl	800042c <__aeabi_dsub>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f7fe fdd4 	bl	800079c <__aeabi_d2iz>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	4aae      	ldr	r2, [pc, #696]	@ (8001eb0 <SignLetter+0x9a0>)
 8001bf8:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 0.9 * RING_CLOSED;
 8001bfa:	4bae      	ldr	r3, [pc, #696]	@ (8001eb4 <SignLetter+0x9a4>)
 8001bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fd61 	bl	80006c8 <__aeabi_i2d>
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	4bab      	ldr	r3, [pc, #684]	@ (8001eb8 <SignLetter+0x9a8>)
 8001c0c:	f7fe fc0e 	bl	800042c <__aeabi_dsub>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	f7fe fdc0 	bl	800079c <__aeabi_d2iz>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4aa7      	ldr	r2, [pc, #668]	@ (8001ebc <SignLetter+0x9ac>)
 8001c20:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001c22:	4ba7      	ldr	r3, [pc, #668]	@ (8001ec0 <SignLetter+0x9b0>)
 8001c24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c28:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001c2c:	4aa5      	ldr	r2, [pc, #660]	@ (8001ec4 <SignLetter+0x9b4>)
 8001c2e:	6013      	str	r3, [r2, #0]
		break;
 8001c30:	e31d      	b.n	800226e <SignLetter+0xd5e>

	case 'N':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //Also change the speeds on this one
 8001c32:	4b99      	ldr	r3, [pc, #612]	@ (8001e98 <SignLetter+0x988>)
 8001c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c38:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001c3c:	4a97      	ldr	r2, [pc, #604]	@ (8001e9c <SignLetter+0x98c>)
 8001c3e:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.9 * INDEX_CLOSED;
 8001c40:	4b97      	ldr	r3, [pc, #604]	@ (8001ea0 <SignLetter+0x990>)
 8001c42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fd3e 	bl	80006c8 <__aeabi_i2d>
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	4b94      	ldr	r3, [pc, #592]	@ (8001ea4 <SignLetter+0x994>)
 8001c52:	f7fe fbeb 	bl	800042c <__aeabi_dsub>
 8001c56:	4602      	mov	r2, r0
 8001c58:	460b      	mov	r3, r1
 8001c5a:	4610      	mov	r0, r2
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f7fe fd9d 	bl	800079c <__aeabi_d2iz>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a90      	ldr	r2, [pc, #576]	@ (8001ea8 <SignLetter+0x998>)
 8001c66:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.9 * MIDDLE_CLOSED;
 8001c68:	4b90      	ldr	r3, [pc, #576]	@ (8001eac <SignLetter+0x99c>)
 8001c6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fd2a 	bl	80006c8 <__aeabi_i2d>
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	4b8a      	ldr	r3, [pc, #552]	@ (8001ea4 <SignLetter+0x994>)
 8001c7a:	f7fe fbd7 	bl	800042c <__aeabi_dsub>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f7fe fd89 	bl	800079c <__aeabi_d2iz>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	4a88      	ldr	r2, [pc, #544]	@ (8001eb0 <SignLetter+0x9a0>)
 8001c8e:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001c90:	4b88      	ldr	r3, [pc, #544]	@ (8001eb4 <SignLetter+0x9a4>)
 8001c92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c96:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001c9a:	4a88      	ldr	r2, [pc, #544]	@ (8001ebc <SignLetter+0x9ac>)
 8001c9c:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001c9e:	4b88      	ldr	r3, [pc, #544]	@ (8001ec0 <SignLetter+0x9b0>)
 8001ca0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca4:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001ca8:	4a86      	ldr	r2, [pc, #536]	@ (8001ec4 <SignLetter+0x9b4>)
 8001caa:	6013      	str	r3, [r2, #0]
		break;
 8001cac:	e2df      	b.n	800226e <SignLetter+0xd5e>

	case 'O':
		thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001cae:	4b7a      	ldr	r3, [pc, #488]	@ (8001e98 <SignLetter+0x988>)
 8001cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7fe fd07 	bl	80006c8 <__aeabi_i2d>
 8001cba:	f04f 0200 	mov.w	r2, #0
 8001cbe:	4b82      	ldr	r3, [pc, #520]	@ (8001ec8 <SignLetter+0x9b8>)
 8001cc0:	f7fe fbb4 	bl	800042c <__aeabi_dsub>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	4610      	mov	r0, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f7fe fd66 	bl	800079c <__aeabi_d2iz>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4a72      	ldr	r2, [pc, #456]	@ (8001e9c <SignLetter+0x98c>)
 8001cd4:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.5 * INDEX_CLOSED;
 8001cd6:	4b72      	ldr	r3, [pc, #456]	@ (8001ea0 <SignLetter+0x990>)
 8001cd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fcf3 	bl	80006c8 <__aeabi_i2d>
 8001ce2:	f04f 0200 	mov.w	r2, #0
 8001ce6:	4b79      	ldr	r3, [pc, #484]	@ (8001ecc <SignLetter+0x9bc>)
 8001ce8:	f7fe fba0 	bl	800042c <__aeabi_dsub>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe fd52 	bl	800079c <__aeabi_d2iz>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	4a6b      	ldr	r2, [pc, #428]	@ (8001ea8 <SignLetter+0x998>)
 8001cfc:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.5 * MIDDLE_CLOSED;
 8001cfe:	4b6b      	ldr	r3, [pc, #428]	@ (8001eac <SignLetter+0x99c>)
 8001d00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fcdf 	bl	80006c8 <__aeabi_i2d>
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8001ecc <SignLetter+0x9bc>)
 8001d10:	f7fe fb8c 	bl	800042c <__aeabi_dsub>
 8001d14:	4602      	mov	r2, r0
 8001d16:	460b      	mov	r3, r1
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f7fe fd3e 	bl	800079c <__aeabi_d2iz>
 8001d20:	4603      	mov	r3, r0
 8001d22:	4a63      	ldr	r2, [pc, #396]	@ (8001eb0 <SignLetter+0x9a0>)
 8001d24:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 0.5 * RING_CLOSED;
 8001d26:	4b63      	ldr	r3, [pc, #396]	@ (8001eb4 <SignLetter+0x9a4>)
 8001d28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7fe fccb 	bl	80006c8 <__aeabi_i2d>
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	4b66      	ldr	r3, [pc, #408]	@ (8001ed0 <SignLetter+0x9c0>)
 8001d38:	f7fe fb78 	bl	800042c <__aeabi_dsub>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f7fe fd2a 	bl	800079c <__aeabi_d2iz>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a5c      	ldr	r2, [pc, #368]	@ (8001ebc <SignLetter+0x9ac>)
 8001d4c:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0.5 * PINKY_CLOSED;
 8001d4e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ec0 <SignLetter+0x9b0>)
 8001d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fcb7 	bl	80006c8 <__aeabi_i2d>
 8001d5a:	f04f 0200 	mov.w	r2, #0
 8001d5e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ed0 <SignLetter+0x9c0>)
 8001d60:	f7fe fb64 	bl	800042c <__aeabi_dsub>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f7fe fd16 	bl	800079c <__aeabi_d2iz>
 8001d70:	4603      	mov	r3, r0
 8001d72:	4a54      	ldr	r2, [pc, #336]	@ (8001ec4 <SignLetter+0x9b4>)
 8001d74:	6013      	str	r3, [r2, #0]
		break;
 8001d76:	e27a      	b.n	800226e <SignLetter+0xd5e>

	case 'P':
		thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001d78:	4b47      	ldr	r3, [pc, #284]	@ (8001e98 <SignLetter+0x988>)
 8001d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7fe fca2 	bl	80006c8 <__aeabi_i2d>
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	4b4f      	ldr	r3, [pc, #316]	@ (8001ec8 <SignLetter+0x9b8>)
 8001d8a:	f7fe fb4f 	bl	800042c <__aeabi_dsub>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe fd01 	bl	800079c <__aeabi_d2iz>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8001e9c <SignLetter+0x98c>)
 8001d9e:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.25 * INDEX_CLOSED;
 8001da0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ea0 <SignLetter+0x990>)
 8001da2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fc8e 	bl	80006c8 <__aeabi_i2d>
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	4b45      	ldr	r3, [pc, #276]	@ (8001ec8 <SignLetter+0x9b8>)
 8001db2:	f7fe fb3b 	bl	800042c <__aeabi_dsub>
 8001db6:	4602      	mov	r2, r0
 8001db8:	460b      	mov	r3, r1
 8001dba:	4610      	mov	r0, r2
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	f7fe fced 	bl	800079c <__aeabi_d2iz>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a38      	ldr	r2, [pc, #224]	@ (8001ea8 <SignLetter+0x998>)
 8001dc6:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.5 * MIDDLE_CLOSED;
 8001dc8:	4b38      	ldr	r3, [pc, #224]	@ (8001eac <SignLetter+0x99c>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fc7a 	bl	80006c8 <__aeabi_i2d>
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8001ecc <SignLetter+0x9bc>)
 8001dda:	f7fe fb27 	bl	800042c <__aeabi_dsub>
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4610      	mov	r0, r2
 8001de4:	4619      	mov	r1, r3
 8001de6:	f7fe fcd9 	bl	800079c <__aeabi_d2iz>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4a30      	ldr	r2, [pc, #192]	@ (8001eb0 <SignLetter+0x9a0>)
 8001dee:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001df0:	4b30      	ldr	r3, [pc, #192]	@ (8001eb4 <SignLetter+0x9a4>)
 8001df2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df6:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001dfa:	4a30      	ldr	r2, [pc, #192]	@ (8001ebc <SignLetter+0x9ac>)
 8001dfc:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001dfe:	4b30      	ldr	r3, [pc, #192]	@ (8001ec0 <SignLetter+0x9b0>)
 8001e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e04:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001e08:	4a2e      	ldr	r2, [pc, #184]	@ (8001ec4 <SignLetter+0x9b4>)
 8001e0a:	6013      	str	r3, [r2, #0]
		break;
 8001e0c:	e22f      	b.n	800226e <SignLetter+0xd5e>

	case 'Q':
		thumb_desired_position = thumb_current - 0.1 * THUMB_CLOSED;
 8001e0e:	4b22      	ldr	r3, [pc, #136]	@ (8001e98 <SignLetter+0x988>)
 8001e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7fe fc57 	bl	80006c8 <__aeabi_i2d>
 8001e1a:	f04f 0200 	mov.w	r2, #0
 8001e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed4 <SignLetter+0x9c4>)
 8001e20:	f7fe fb04 	bl	800042c <__aeabi_dsub>
 8001e24:	4602      	mov	r2, r0
 8001e26:	460b      	mov	r3, r1
 8001e28:	4610      	mov	r0, r2
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	f7fe fcb6 	bl	800079c <__aeabi_d2iz>
 8001e30:	4603      	mov	r3, r0
 8001e32:	4a1a      	ldr	r2, [pc, #104]	@ (8001e9c <SignLetter+0x98c>)
 8001e34:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.3 * INDEX_CLOSED;
 8001e36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea0 <SignLetter+0x990>)
 8001e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fc43 	bl	80006c8 <__aeabi_i2d>
 8001e42:	a313      	add	r3, pc, #76	@ (adr r3, 8001e90 <SignLetter+0x980>)
 8001e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e48:	f7fe faf0 	bl	800042c <__aeabi_dsub>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	4610      	mov	r0, r2
 8001e52:	4619      	mov	r1, r3
 8001e54:	f7fe fca2 	bl	800079c <__aeabi_d2iz>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ea8 <SignLetter+0x998>)
 8001e5c:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	@ (8001eac <SignLetter+0x99c>)
 8001e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e64:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001e68:	4a11      	ldr	r2, [pc, #68]	@ (8001eb0 <SignLetter+0x9a0>)
 8001e6a:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001e6c:	4b11      	ldr	r3, [pc, #68]	@ (8001eb4 <SignLetter+0x9a4>)
 8001e6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e72:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001e76:	4a11      	ldr	r2, [pc, #68]	@ (8001ebc <SignLetter+0x9ac>)
 8001e78:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001e7a:	4b11      	ldr	r3, [pc, #68]	@ (8001ec0 <SignLetter+0x9b0>)
 8001e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e80:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001e84:	4a0f      	ldr	r2, [pc, #60]	@ (8001ec4 <SignLetter+0x9b4>)
 8001e86:	6013      	str	r3, [r2, #0]
		break;
 8001e88:	e1f1      	b.n	800226e <SignLetter+0xd5e>
 8001e8a:	bf00      	nop
 8001e8c:	f3af 8000 	nop.w
 8001e90:	00000000 	.word	0x00000000
 8001e94:	4072c000 	.word	0x4072c000
 8001e98:	200002a0 	.word	0x200002a0
 8001e9c:	200002ac 	.word	0x200002ac
 8001ea0:	200002a2 	.word	0x200002a2
 8001ea4:	408c2000 	.word	0x408c2000
 8001ea8:	200002b0 	.word	0x200002b0
 8001eac:	200002a4 	.word	0x200002a4
 8001eb0:	200002b4 	.word	0x200002b4
 8001eb4:	200002a6 	.word	0x200002a6
 8001eb8:	4090e000 	.word	0x4090e000
 8001ebc:	200002b8 	.word	0x200002b8
 8001ec0:	200002a8 	.word	0x200002a8
 8001ec4:	200002bc 	.word	0x200002bc
 8001ec8:	406f4000 	.word	0x406f4000
 8001ecc:	407f4000 	.word	0x407f4000
 8001ed0:	4082c000 	.word	0x4082c000
 8001ed4:	40590000 	.word	0x40590000

	case 'R':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //TBD
 8001ed8:	4bb2      	ldr	r3, [pc, #712]	@ (80021a4 <SignLetter+0xc94>)
 8001eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ede:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001ee2:	4ab1      	ldr	r2, [pc, #708]	@ (80021a8 <SignLetter+0xc98>)
 8001ee4:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001ee6:	4bb1      	ldr	r3, [pc, #708]	@ (80021ac <SignLetter+0xc9c>)
 8001ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eec:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001ef0:	4aaf      	ldr	r2, [pc, #700]	@ (80021b0 <SignLetter+0xca0>)
 8001ef2:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001ef4:	4baf      	ldr	r3, [pc, #700]	@ (80021b4 <SignLetter+0xca4>)
 8001ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001efa:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001efe:	4aae      	ldr	r2, [pc, #696]	@ (80021b8 <SignLetter+0xca8>)
 8001f00:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001f02:	4bae      	ldr	r3, [pc, #696]	@ (80021bc <SignLetter+0xcac>)
 8001f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f08:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001f0c:	4aac      	ldr	r2, [pc, #688]	@ (80021c0 <SignLetter+0xcb0>)
 8001f0e:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001f10:	4bac      	ldr	r3, [pc, #688]	@ (80021c4 <SignLetter+0xcb4>)
 8001f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f16:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001f1a:	4aab      	ldr	r2, [pc, #684]	@ (80021c8 <SignLetter+0xcb8>)
 8001f1c:	6013      	str	r3, [r2, #0]
		break;
 8001f1e:	e1a6      	b.n	800226e <SignLetter+0xd5e>

	case 'S':
		thumb_desired_position = thumb_current - 0.8 * THUMB_CLOSED;//Make thumb slower so it ends on top of the other fingers
 8001f20:	4ba0      	ldr	r3, [pc, #640]	@ (80021a4 <SignLetter+0xc94>)
 8001f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fbce 	bl	80006c8 <__aeabi_i2d>
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	4ba6      	ldr	r3, [pc, #664]	@ (80021cc <SignLetter+0xcbc>)
 8001f32:	f7fe fa7b 	bl	800042c <__aeabi_dsub>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4610      	mov	r0, r2
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	f7fe fc2d 	bl	800079c <__aeabi_d2iz>
 8001f42:	4603      	mov	r3, r0
 8001f44:	4a98      	ldr	r2, [pc, #608]	@ (80021a8 <SignLetter+0xc98>)
 8001f46:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001f48:	4b98      	ldr	r3, [pc, #608]	@ (80021ac <SignLetter+0xc9c>)
 8001f4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001f52:	4a97      	ldr	r2, [pc, #604]	@ (80021b0 <SignLetter+0xca0>)
 8001f54:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001f56:	4b97      	ldr	r3, [pc, #604]	@ (80021b4 <SignLetter+0xca4>)
 8001f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001f60:	4a95      	ldr	r2, [pc, #596]	@ (80021b8 <SignLetter+0xca8>)
 8001f62:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001f64:	4b95      	ldr	r3, [pc, #596]	@ (80021bc <SignLetter+0xcac>)
 8001f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f6a:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001f6e:	4a94      	ldr	r2, [pc, #592]	@ (80021c0 <SignLetter+0xcb0>)
 8001f70:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001f72:	4b94      	ldr	r3, [pc, #592]	@ (80021c4 <SignLetter+0xcb4>)
 8001f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f78:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001f7c:	4a92      	ldr	r2, [pc, #584]	@ (80021c8 <SignLetter+0xcb8>)
 8001f7e:	6013      	str	r3, [r2, #0]
		break;
 8001f80:	e175      	b.n	800226e <SignLetter+0xd5e>

	case 'T':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //TBD
 8001f82:	4b88      	ldr	r3, [pc, #544]	@ (80021a4 <SignLetter+0xc94>)
 8001f84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f88:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001f8c:	4a86      	ldr	r2, [pc, #536]	@ (80021a8 <SignLetter+0xc98>)
 8001f8e:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001f90:	4b86      	ldr	r3, [pc, #536]	@ (80021ac <SignLetter+0xc9c>)
 8001f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f96:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001f9a:	4a85      	ldr	r2, [pc, #532]	@ (80021b0 <SignLetter+0xca0>)
 8001f9c:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001f9e:	4b85      	ldr	r3, [pc, #532]	@ (80021b4 <SignLetter+0xca4>)
 8001fa0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fa4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001fa8:	4a83      	ldr	r2, [pc, #524]	@ (80021b8 <SignLetter+0xca8>)
 8001faa:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001fac:	4b83      	ldr	r3, [pc, #524]	@ (80021bc <SignLetter+0xcac>)
 8001fae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fb2:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001fb6:	4a82      	ldr	r2, [pc, #520]	@ (80021c0 <SignLetter+0xcb0>)
 8001fb8:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001fba:	4b82      	ldr	r3, [pc, #520]	@ (80021c4 <SignLetter+0xcb4>)
 8001fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc0:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001fc4:	4a80      	ldr	r2, [pc, #512]	@ (80021c8 <SignLetter+0xcb8>)
 8001fc6:	6013      	str	r3, [r2, #0]
		break;
 8001fc8:	e151      	b.n	800226e <SignLetter+0xd5e>

	case 'U':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001fca:	4b76      	ldr	r3, [pc, #472]	@ (80021a4 <SignLetter+0xc94>)
 8001fcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001fd4:	4a74      	ldr	r2, [pc, #464]	@ (80021a8 <SignLetter+0xc98>)
 8001fd6:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001fd8:	4b74      	ldr	r3, [pc, #464]	@ (80021ac <SignLetter+0xc9c>)
 8001fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	4b73      	ldr	r3, [pc, #460]	@ (80021b0 <SignLetter+0xca0>)
 8001fe2:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001fe4:	4b73      	ldr	r3, [pc, #460]	@ (80021b4 <SignLetter+0xca4>)
 8001fe6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fea:	461a      	mov	r2, r3
 8001fec:	4b72      	ldr	r3, [pc, #456]	@ (80021b8 <SignLetter+0xca8>)
 8001fee:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001ff0:	4b72      	ldr	r3, [pc, #456]	@ (80021bc <SignLetter+0xcac>)
 8001ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff6:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8001ffa:	4a71      	ldr	r2, [pc, #452]	@ (80021c0 <SignLetter+0xcb0>)
 8001ffc:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001ffe:	4b71      	ldr	r3, [pc, #452]	@ (80021c4 <SignLetter+0xcb4>)
 8002000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002004:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8002008:	4a6f      	ldr	r2, [pc, #444]	@ (80021c8 <SignLetter+0xcb8>)
 800200a:	6013      	str	r3, [r2, #0]
		break;
 800200c:	e12f      	b.n	800226e <SignLetter+0xd5e>

	case 'V':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800200e:	4b65      	ldr	r3, [pc, #404]	@ (80021a4 <SignLetter+0xc94>)
 8002010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002014:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002018:	4a63      	ldr	r2, [pc, #396]	@ (80021a8 <SignLetter+0xc98>)
 800201a:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 800201c:	4b63      	ldr	r3, [pc, #396]	@ (80021ac <SignLetter+0xc9c>)
 800201e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002022:	461a      	mov	r2, r3
 8002024:	4b62      	ldr	r3, [pc, #392]	@ (80021b0 <SignLetter+0xca0>)
 8002026:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8002028:	4b62      	ldr	r3, [pc, #392]	@ (80021b4 <SignLetter+0xca4>)
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	461a      	mov	r2, r3
 8002030:	4b61      	ldr	r3, [pc, #388]	@ (80021b8 <SignLetter+0xca8>)
 8002032:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8002034:	4b61      	ldr	r3, [pc, #388]	@ (80021bc <SignLetter+0xcac>)
 8002036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203a:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 800203e:	4a60      	ldr	r2, [pc, #384]	@ (80021c0 <SignLetter+0xcb0>)
 8002040:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8002042:	4b60      	ldr	r3, [pc, #384]	@ (80021c4 <SignLetter+0xcb4>)
 8002044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002048:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 800204c:	4a5e      	ldr	r2, [pc, #376]	@ (80021c8 <SignLetter+0xcb8>)
 800204e:	6013      	str	r3, [r2, #0]
		break;
 8002050:	e10d      	b.n	800226e <SignLetter+0xd5e>

	case 'W':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8002052:	4b54      	ldr	r3, [pc, #336]	@ (80021a4 <SignLetter+0xc94>)
 8002054:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002058:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800205c:	4a52      	ldr	r2, [pc, #328]	@ (80021a8 <SignLetter+0xc98>)
 800205e:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 8002060:	4b52      	ldr	r3, [pc, #328]	@ (80021ac <SignLetter+0xc9c>)
 8002062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002066:	461a      	mov	r2, r3
 8002068:	4b51      	ldr	r3, [pc, #324]	@ (80021b0 <SignLetter+0xca0>)
 800206a:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 800206c:	4b51      	ldr	r3, [pc, #324]	@ (80021b4 <SignLetter+0xca4>)
 800206e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002072:	461a      	mov	r2, r3
 8002074:	4b50      	ldr	r3, [pc, #320]	@ (80021b8 <SignLetter+0xca8>)
 8002076:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 0 * RING_CLOSED;
 8002078:	4b50      	ldr	r3, [pc, #320]	@ (80021bc <SignLetter+0xcac>)
 800207a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207e:	461a      	mov	r2, r3
 8002080:	4b4f      	ldr	r3, [pc, #316]	@ (80021c0 <SignLetter+0xcb0>)
 8002082:	601a      	str	r2, [r3, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8002084:	4b4f      	ldr	r3, [pc, #316]	@ (80021c4 <SignLetter+0xcb4>)
 8002086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800208a:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 800208e:	4a4e      	ldr	r2, [pc, #312]	@ (80021c8 <SignLetter+0xcb8>)
 8002090:	6013      	str	r3, [r2, #0]
		break;
 8002092:	e0ec      	b.n	800226e <SignLetter+0xd5e>

	case 'X':
		thumb_desired_position = thumb_current - 0.5 * THUMB_CLOSED;
 8002094:	4b43      	ldr	r3, [pc, #268]	@ (80021a4 <SignLetter+0xc94>)
 8002096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fb14 	bl	80006c8 <__aeabi_i2d>
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	4b4a      	ldr	r3, [pc, #296]	@ (80021d0 <SignLetter+0xcc0>)
 80020a6:	f7fe f9c1 	bl	800042c <__aeabi_dsub>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f7fe fb73 	bl	800079c <__aeabi_d2iz>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4a3b      	ldr	r2, [pc, #236]	@ (80021a8 <SignLetter+0xc98>)
 80020ba:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 0.25 * INDEX_CLOSED;
 80020bc:	4b3b      	ldr	r3, [pc, #236]	@ (80021ac <SignLetter+0xc9c>)
 80020be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fb00 	bl	80006c8 <__aeabi_i2d>
 80020c8:	f04f 0200 	mov.w	r2, #0
 80020cc:	4b41      	ldr	r3, [pc, #260]	@ (80021d4 <SignLetter+0xcc4>)
 80020ce:	f7fe f9ad 	bl	800042c <__aeabi_dsub>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fb5f 	bl	800079c <__aeabi_d2iz>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a33      	ldr	r2, [pc, #204]	@ (80021b0 <SignLetter+0xca0>)
 80020e2:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 0.75 * MIDDLE_CLOSED;
 80020e4:	4b33      	ldr	r3, [pc, #204]	@ (80021b4 <SignLetter+0xca4>)
 80020e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe faec 	bl	80006c8 <__aeabi_i2d>
 80020f0:	f04f 0200 	mov.w	r2, #0
 80020f4:	4b38      	ldr	r3, [pc, #224]	@ (80021d8 <SignLetter+0xcc8>)
 80020f6:	f7fe f999 	bl	800042c <__aeabi_dsub>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	4610      	mov	r0, r2
 8002100:	4619      	mov	r1, r3
 8002102:	f7fe fb4b 	bl	800079c <__aeabi_d2iz>
 8002106:	4603      	mov	r3, r0
 8002108:	4a2b      	ldr	r2, [pc, #172]	@ (80021b8 <SignLetter+0xca8>)
 800210a:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 0.9 * RING_CLOSED;
 800210c:	4b2b      	ldr	r3, [pc, #172]	@ (80021bc <SignLetter+0xcac>)
 800210e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe fad8 	bl	80006c8 <__aeabi_i2d>
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	4b2f      	ldr	r3, [pc, #188]	@ (80021dc <SignLetter+0xccc>)
 800211e:	f7fe f985 	bl	800042c <__aeabi_dsub>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f7fe fb37 	bl	800079c <__aeabi_d2iz>
 800212e:	4603      	mov	r3, r0
 8002130:	4a23      	ldr	r2, [pc, #140]	@ (80021c0 <SignLetter+0xcb0>)
 8002132:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0.9 * PINKY_CLOSED;
 8002134:	4b23      	ldr	r3, [pc, #140]	@ (80021c4 <SignLetter+0xcb4>)
 8002136:	f9b3 3000 	ldrsh.w	r3, [r3]
 800213a:	4618      	mov	r0, r3
 800213c:	f7fe fac4 	bl	80006c8 <__aeabi_i2d>
 8002140:	f04f 0200 	mov.w	r2, #0
 8002144:	4b25      	ldr	r3, [pc, #148]	@ (80021dc <SignLetter+0xccc>)
 8002146:	f7fe f971 	bl	800042c <__aeabi_dsub>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	4610      	mov	r0, r2
 8002150:	4619      	mov	r1, r3
 8002152:	f7fe fb23 	bl	800079c <__aeabi_d2iz>
 8002156:	4603      	mov	r3, r0
 8002158:	4a1b      	ldr	r2, [pc, #108]	@ (80021c8 <SignLetter+0xcb8>)
 800215a:	6013      	str	r3, [r2, #0]
		break;
 800215c:	e087      	b.n	800226e <SignLetter+0xd5e>

	case 'Y':
		thumb_desired_position = thumb_current - 0 * THUMB_CLOSED;
 800215e:	4b11      	ldr	r3, [pc, #68]	@ (80021a4 <SignLetter+0xc94>)
 8002160:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002164:	461a      	mov	r2, r3
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <SignLetter+0xc98>)
 8002168:	601a      	str	r2, [r3, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 800216a:	4b10      	ldr	r3, [pc, #64]	@ (80021ac <SignLetter+0xc9c>)
 800216c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002170:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002174:	4a0e      	ldr	r2, [pc, #56]	@ (80021b0 <SignLetter+0xca0>)
 8002176:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8002178:	4b0e      	ldr	r3, [pc, #56]	@ (80021b4 <SignLetter+0xca4>)
 800217a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002182:	4a0d      	ldr	r2, [pc, #52]	@ (80021b8 <SignLetter+0xca8>)
 8002184:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 8002186:	4b0d      	ldr	r3, [pc, #52]	@ (80021bc <SignLetter+0xcac>)
 8002188:	f9b3 3000 	ldrsh.w	r3, [r3]
 800218c:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8002190:	4a0b      	ldr	r2, [pc, #44]	@ (80021c0 <SignLetter+0xcb0>)
 8002192:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <SignLetter+0xcb4>)
 8002196:	f9b3 3000 	ldrsh.w	r3, [r3]
 800219a:	461a      	mov	r2, r3
 800219c:	4b0a      	ldr	r3, [pc, #40]	@ (80021c8 <SignLetter+0xcb8>)
 800219e:	601a      	str	r2, [r3, #0]
		break;
 80021a0:	e065      	b.n	800226e <SignLetter+0xd5e>
 80021a2:	bf00      	nop
 80021a4:	200002a0 	.word	0x200002a0
 80021a8:	200002ac 	.word	0x200002ac
 80021ac:	200002a2 	.word	0x200002a2
 80021b0:	200002b0 	.word	0x200002b0
 80021b4:	200002a4 	.word	0x200002a4
 80021b8:	200002b4 	.word	0x200002b4
 80021bc:	200002a6 	.word	0x200002a6
 80021c0:	200002b8 	.word	0x200002b8
 80021c4:	200002a8 	.word	0x200002a8
 80021c8:	200002bc 	.word	0x200002bc
 80021cc:	40890000 	.word	0x40890000
 80021d0:	407f4000 	.word	0x407f4000
 80021d4:	406f4000 	.word	0x406f4000
 80021d8:	40877000 	.word	0x40877000
 80021dc:	4090e000 	.word	0x4090e000

	case 'Z':
		thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //TDB
 80021e0:	4b25      	ldr	r3, [pc, #148]	@ (8002278 <SignLetter+0xd68>)
 80021e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80021ea:	4a24      	ldr	r2, [pc, #144]	@ (800227c <SignLetter+0xd6c>)
 80021ec:	6013      	str	r3, [r2, #0]
		index_desired_position = index_current - 1 * INDEX_CLOSED;
 80021ee:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <SignLetter+0xd70>)
 80021f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80021f8:	4a22      	ldr	r2, [pc, #136]	@ (8002284 <SignLetter+0xd74>)
 80021fa:	6013      	str	r3, [r2, #0]
		middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80021fc:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <SignLetter+0xd78>)
 80021fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002202:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002206:	4a21      	ldr	r2, [pc, #132]	@ (800228c <SignLetter+0xd7c>)
 8002208:	6013      	str	r3, [r2, #0]
		ring_desired_position = ring_current - 1 * RING_CLOSED;
 800220a:	4b21      	ldr	r3, [pc, #132]	@ (8002290 <SignLetter+0xd80>)
 800220c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002210:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8002214:	4a1f      	ldr	r2, [pc, #124]	@ (8002294 <SignLetter+0xd84>)
 8002216:	6013      	str	r3, [r2, #0]
		pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8002218:	4b1f      	ldr	r3, [pc, #124]	@ (8002298 <SignLetter+0xd88>)
 800221a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800221e:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 8002222:	4a1e      	ldr	r2, [pc, #120]	@ (800229c <SignLetter+0xd8c>)
 8002224:	6013      	str	r3, [r2, #0]
		break;
 8002226:	e022      	b.n	800226e <SignLetter+0xd5e>

	case '0':
		thumb_desired_position = thumb_current - 0 * THUMB_CLOSED;
 8002228:	4b13      	ldr	r3, [pc, #76]	@ (8002278 <SignLetter+0xd68>)
 800222a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800222e:	461a      	mov	r2, r3
 8002230:	4b12      	ldr	r3, [pc, #72]	@ (800227c <SignLetter+0xd6c>)
 8002232:	601a      	str	r2, [r3, #0]
		index_desired_position = index_current - 0 * INDEX_CLOSED;
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <SignLetter+0xd70>)
 8002236:	f9b3 3000 	ldrsh.w	r3, [r3]
 800223a:	461a      	mov	r2, r3
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <SignLetter+0xd74>)
 800223e:	601a      	str	r2, [r3, #0]
		middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8002240:	4b11      	ldr	r3, [pc, #68]	@ (8002288 <SignLetter+0xd78>)
 8002242:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002246:	461a      	mov	r2, r3
 8002248:	4b10      	ldr	r3, [pc, #64]	@ (800228c <SignLetter+0xd7c>)
 800224a:	601a      	str	r2, [r3, #0]
		ring_desired_position = ring_current - 0 * RING_CLOSED;
 800224c:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <SignLetter+0xd80>)
 800224e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002252:	461a      	mov	r2, r3
 8002254:	4b0f      	ldr	r3, [pc, #60]	@ (8002294 <SignLetter+0xd84>)
 8002256:	601a      	str	r2, [r3, #0]
		pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8002258:	4b0f      	ldr	r3, [pc, #60]	@ (8002298 <SignLetter+0xd88>)
 800225a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800225e:	461a      	mov	r2, r3
 8002260:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <SignLetter+0xd8c>)
 8002262:	601a      	str	r2, [r3, #0]
		break;
 8002264:	e003      	b.n	800226e <SignLetter+0xd5e>

	default:
	   // Default position (rest)
	   Servo_StopAll();
 8002266:	f7ff f8a1 	bl	80013ac <Servo_StopAll>
	   break;
 800226a:	e000      	b.n	800226e <SignLetter+0xd5e>
		break;
 800226c:	bf00      	nop
	}
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200002a0 	.word	0x200002a0
 800227c:	200002ac 	.word	0x200002ac
 8002280:	200002a2 	.word	0x200002a2
 8002284:	200002b0 	.word	0x200002b0
 8002288:	200002a4 	.word	0x200002a4
 800228c:	200002b4 	.word	0x200002b4
 8002290:	200002a6 	.word	0x200002a6
 8002294:	200002b8 	.word	0x200002b8
 8002298:	200002a8 	.word	0x200002a8
 800229c:	200002bc 	.word	0x200002bc

080022a0 <HAL_GPIO_EXTI_Callback>:
 * @param None
 * @retval None
 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == B1_Pin) // Check it’s B1 triggering the interrupt
 80022aa:	88fb      	ldrh	r3, [r7, #6]
 80022ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022b0:	d107      	bne.n	80022c2 <HAL_GPIO_EXTI_Callback+0x22>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Toggle LED2 as a test
 80022b2:	2120      	movs	r1, #32
 80022b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80022b8:	f001 fadc 	bl	8003874 <HAL_GPIO_TogglePin>
		SignLetter('A');
 80022bc:	2041      	movs	r0, #65	@ 0x41
 80022be:	f7ff f927 	bl	8001510 <SignLetter>

	}
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	0000      	movs	r0, r0
 80022cc:	0000      	movs	r0, r0
	...

080022d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0d2      	sub	sp, #328	@ 0x148
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80022da:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80022de:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	Servo_Init();
 80022e0:	f7ff f8de 	bl	80014a0 <Servo_Init>

//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

	SignLetter('A');
 80022e4:	2041      	movs	r0, #65	@ 0x41
 80022e6:	f7ff f913 	bl	8001510 <SignLetter>

	osDelay(10);
 80022ea:	200a      	movs	r0, #10
 80022ec:	f004 fe58 	bl	8006fa0 <osDelay>
//	index_desired_position= 0;
//	middle_desired_position= 0;
//	ring_desired_position= 0;
//	pinky_desired_position= 0;

	if(thumb_desired_position < 0){
 80022f0:	4bab      	ldr	r3, [pc, #684]	@ (80025a0 <StartDefaultTask+0x2d0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	da18      	bge.n	800232a <StartDefaultTask+0x5a>
		ServoState state1 = {100,Direction_Decider(&thumb_desired_position),0,THUMB}; // Sets motion for Thumb
 80022f8:	2364      	movs	r3, #100	@ 0x64
 80022fa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80022fe:	48a8      	ldr	r0, [pc, #672]	@ (80025a0 <StartDefaultTask+0x2d0>)
 8002300:	f7ff f8f0 	bl	80014e4 <Direction_Decider>
 8002304:	4603      	mov	r3, r0
 8002306:	b2db      	uxtb	r3, r3
 8002308:	f887 313c 	strb.w	r3, [r7, #316]	@ 0x13c
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8002312:	2300      	movs	r3, #0
 8002314:	f887 3144 	strb.w	r3, [r7, #324]	@ 0x144
		osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 8002318:	4ba2      	ldr	r3, [pc, #648]	@ (80025a4 <StartDefaultTask+0x2d4>)
 800231a:	6818      	ldr	r0, [r3, #0]
 800231c:	f507 719c 	add.w	r1, r7, #312	@ 0x138
 8002320:	2300      	movs	r3, #0
 8002322:	2200      	movs	r2, #0
 8002324:	f004 ff8a 	bl	800723c <osMessageQueuePut>
 8002328:	e02e      	b.n	8002388 <StartDefaultTask+0xb8>
	}
	else if(thumb_desired_position > 0){
 800232a:	4b9d      	ldr	r3, [pc, #628]	@ (80025a0 <StartDefaultTask+0x2d0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	dd2a      	ble.n	8002388 <StartDefaultTask+0xb8>
		thumb_desired_position = thumb_desired_position *.15;
 8002332:	4b9b      	ldr	r3, [pc, #620]	@ (80025a0 <StartDefaultTask+0x2d0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f9c6 	bl	80006c8 <__aeabi_i2d>
 800233c:	a394      	add	r3, pc, #592	@ (adr r3, 8002590 <StartDefaultTask+0x2c0>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	f7fd ff45 	bl	80001d0 <__aeabi_dmul>
 8002346:	4602      	mov	r2, r0
 8002348:	460b      	mov	r3, r1
 800234a:	4610      	mov	r0, r2
 800234c:	4619      	mov	r1, r3
 800234e:	f7fe fa25 	bl	800079c <__aeabi_d2iz>
 8002352:	4603      	mov	r3, r0
 8002354:	4a92      	ldr	r2, [pc, #584]	@ (80025a0 <StartDefaultTask+0x2d0>)
 8002356:	6013      	str	r3, [r2, #0]
		ServoState state1 = {100,Direction_Decider(&thumb_desired_position),0,THUMB}; // Sets motion for Thumb
 8002358:	2364      	movs	r3, #100	@ 0x64
 800235a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800235e:	4890      	ldr	r0, [pc, #576]	@ (80025a0 <StartDefaultTask+0x2d0>)
 8002360:	f7ff f8c0 	bl	80014e4 <Direction_Decider>
 8002364:	4603      	mov	r3, r0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002372:	2300      	movs	r3, #0
 8002374:	f887 3134 	strb.w	r3, [r7, #308]	@ 0x134
		osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 8002378:	4b8a      	ldr	r3, [pc, #552]	@ (80025a4 <StartDefaultTask+0x2d4>)
 800237a:	6818      	ldr	r0, [r3, #0]
 800237c:	f507 7194 	add.w	r1, r7, #296	@ 0x128
 8002380:	2300      	movs	r3, #0
 8002382:	2200      	movs	r2, #0
 8002384:	f004 ff5a 	bl	800723c <osMessageQueuePut>
	}


	if(index_desired_position < 0){
 8002388:	4b87      	ldr	r3, [pc, #540]	@ (80025a8 <StartDefaultTask+0x2d8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	da18      	bge.n	80023c2 <StartDefaultTask+0xf2>
		ServoState state2 = {100,Direction_Decider(&index_desired_position),0,INDEX}; // Sets motion for Index Finger
 8002390:	2364      	movs	r3, #100	@ 0x64
 8002392:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002396:	4884      	ldr	r0, [pc, #528]	@ (80025a8 <StartDefaultTask+0x2d8>)
 8002398:	f7ff f8a4 	bl	80014e4 <Direction_Decider>
 800239c:	4603      	mov	r3, r0
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	f887 311c 	strb.w	r3, [r7, #284]	@ 0x11c
 80023a4:	2300      	movs	r3, #0
 80023a6:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80023aa:	2301      	movs	r3, #1
 80023ac:	f887 3124 	strb.w	r3, [r7, #292]	@ 0x124
		osMessageQueuePut(servoQueueHandle, &state2, 0, 0);
 80023b0:	4b7c      	ldr	r3, [pc, #496]	@ (80025a4 <StartDefaultTask+0x2d4>)
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80023b8:	2300      	movs	r3, #0
 80023ba:	2200      	movs	r2, #0
 80023bc:	f004 ff3e 	bl	800723c <osMessageQueuePut>
 80023c0:	e02e      	b.n	8002420 <StartDefaultTask+0x150>
	}
	else if(index_desired_position > 0){
 80023c2:	4b79      	ldr	r3, [pc, #484]	@ (80025a8 <StartDefaultTask+0x2d8>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	dd2a      	ble.n	8002420 <StartDefaultTask+0x150>
		index_desired_position = index_desired_position *0.50;
 80023ca:	4b77      	ldr	r3, [pc, #476]	@ (80025a8 <StartDefaultTask+0x2d8>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7fe f97a 	bl	80006c8 <__aeabi_i2d>
 80023d4:	f04f 0200 	mov.w	r2, #0
 80023d8:	4b74      	ldr	r3, [pc, #464]	@ (80025ac <StartDefaultTask+0x2dc>)
 80023da:	f7fd fef9 	bl	80001d0 <__aeabi_dmul>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f7fe f9d9 	bl	800079c <__aeabi_d2iz>
 80023ea:	4603      	mov	r3, r0
 80023ec:	4a6e      	ldr	r2, [pc, #440]	@ (80025a8 <StartDefaultTask+0x2d8>)
 80023ee:	6013      	str	r3, [r2, #0]
		ServoState state2 = {100,Direction_Decider(&index_desired_position),0,INDEX}; // Sets motion for Index Finger
 80023f0:	2364      	movs	r3, #100	@ 0x64
 80023f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80023f6:	486c      	ldr	r0, [pc, #432]	@ (80025a8 <StartDefaultTask+0x2d8>)
 80023f8:	f7ff f874 	bl	80014e4 <Direction_Decider>
 80023fc:	4603      	mov	r3, r0
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	f887 310c 	strb.w	r3, [r7, #268]	@ 0x10c
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800240a:	2301      	movs	r3, #1
 800240c:	f887 3114 	strb.w	r3, [r7, #276]	@ 0x114
		osMessageQueuePut(servoQueueHandle, &state2, 0, 0);
 8002410:	4b64      	ldr	r3, [pc, #400]	@ (80025a4 <StartDefaultTask+0x2d4>)
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002418:	2300      	movs	r3, #0
 800241a:	2200      	movs	r2, #0
 800241c:	f004 ff0e 	bl	800723c <osMessageQueuePut>
	}


	if(middle_desired_position < 0){
 8002420:	4b63      	ldr	r3, [pc, #396]	@ (80025b0 <StartDefaultTask+0x2e0>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	da18      	bge.n	800245a <StartDefaultTask+0x18a>
		ServoState state3 = {100,Direction_Decider(&middle_desired_position),0,MIDDLE}; // Sets motion for Middle Finger
 8002428:	2364      	movs	r3, #100	@ 0x64
 800242a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800242e:	4860      	ldr	r0, [pc, #384]	@ (80025b0 <StartDefaultTask+0x2e0>)
 8002430:	f7ff f858 	bl	80014e4 <Direction_Decider>
 8002434:	4603      	mov	r3, r0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f887 30fc 	strb.w	r3, [r7, #252]	@ 0xfc
 800243c:	2300      	movs	r3, #0
 800243e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002442:	2302      	movs	r3, #2
 8002444:	f887 3104 	strb.w	r3, [r7, #260]	@ 0x104
		osMessageQueuePut(servoQueueHandle, &state3, 0, 0);
 8002448:	4b56      	ldr	r3, [pc, #344]	@ (80025a4 <StartDefaultTask+0x2d4>)
 800244a:	6818      	ldr	r0, [r3, #0]
 800244c:	f107 01f8 	add.w	r1, r7, #248	@ 0xf8
 8002450:	2300      	movs	r3, #0
 8002452:	2200      	movs	r2, #0
 8002454:	f004 fef2 	bl	800723c <osMessageQueuePut>
 8002458:	e02e      	b.n	80024b8 <StartDefaultTask+0x1e8>
	}
	else if(middle_desired_position > 0){
 800245a:	4b55      	ldr	r3, [pc, #340]	@ (80025b0 <StartDefaultTask+0x2e0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	dd2a      	ble.n	80024b8 <StartDefaultTask+0x1e8>
		middle_desired_position = middle_desired_position *0.45;
 8002462:	4b53      	ldr	r3, [pc, #332]	@ (80025b0 <StartDefaultTask+0x2e0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f7fe f92e 	bl	80006c8 <__aeabi_i2d>
 800246c:	a34a      	add	r3, pc, #296	@ (adr r3, 8002598 <StartDefaultTask+0x2c8>)
 800246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002472:	f7fd fead 	bl	80001d0 <__aeabi_dmul>
 8002476:	4602      	mov	r2, r0
 8002478:	460b      	mov	r3, r1
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	f7fe f98d 	bl	800079c <__aeabi_d2iz>
 8002482:	4603      	mov	r3, r0
 8002484:	4a4a      	ldr	r2, [pc, #296]	@ (80025b0 <StartDefaultTask+0x2e0>)
 8002486:	6013      	str	r3, [r2, #0]
		ServoState state3 = {100,Direction_Decider(&middle_desired_position),0,MIDDLE}; // Sets motion for Index Finger
 8002488:	2364      	movs	r3, #100	@ 0x64
 800248a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800248e:	4848      	ldr	r0, [pc, #288]	@ (80025b0 <StartDefaultTask+0x2e0>)
 8002490:	f7ff f828 	bl	80014e4 <Direction_Decider>
 8002494:	4603      	mov	r3, r0
 8002496:	b2db      	uxtb	r3, r3
 8002498:	f887 30ec 	strb.w	r3, [r7, #236]	@ 0xec
 800249c:	2300      	movs	r3, #0
 800249e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80024a2:	2302      	movs	r3, #2
 80024a4:	f887 30f4 	strb.w	r3, [r7, #244]	@ 0xf4
		osMessageQueuePut(servoQueueHandle, &state3, 0, 0);
 80024a8:	4b3e      	ldr	r3, [pc, #248]	@ (80025a4 <StartDefaultTask+0x2d4>)
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	f107 01e8 	add.w	r1, r7, #232	@ 0xe8
 80024b0:	2300      	movs	r3, #0
 80024b2:	2200      	movs	r2, #0
 80024b4:	f004 fec2 	bl	800723c <osMessageQueuePut>
	}


	if(ring_desired_position < 0){
 80024b8:	4b3e      	ldr	r3, [pc, #248]	@ (80025b4 <StartDefaultTask+0x2e4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	da18      	bge.n	80024f2 <StartDefaultTask+0x222>
		ServoState state4 = {100,Direction_Decider(&ring_desired_position),0,RING}; // Sets motion for Ring Finger
 80024c0:	2364      	movs	r3, #100	@ 0x64
 80024c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80024c6:	483b      	ldr	r0, [pc, #236]	@ (80025b4 <StartDefaultTask+0x2e4>)
 80024c8:	f7ff f80c 	bl	80014e4 <Direction_Decider>
 80024cc:	4603      	mov	r3, r0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	f887 30dc 	strb.w	r3, [r7, #220]	@ 0xdc
 80024d4:	2300      	movs	r3, #0
 80024d6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80024da:	2303      	movs	r3, #3
 80024dc:	f887 30e4 	strb.w	r3, [r7, #228]	@ 0xe4
		osMessageQueuePut(servoQueueHandle, &state4, 0, 0);
 80024e0:	4b30      	ldr	r3, [pc, #192]	@ (80025a4 <StartDefaultTask+0x2d4>)
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 80024e8:	2300      	movs	r3, #0
 80024ea:	2200      	movs	r2, #0
 80024ec:	f004 fea6 	bl	800723c <osMessageQueuePut>
 80024f0:	e02e      	b.n	8002550 <StartDefaultTask+0x280>
	}
	else if(ring_desired_position > 0){
 80024f2:	4b30      	ldr	r3, [pc, #192]	@ (80025b4 <StartDefaultTask+0x2e4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	dd2a      	ble.n	8002550 <StartDefaultTask+0x280>
		ring_desired_position = ring_desired_position *0.5;
 80024fa:	4b2e      	ldr	r3, [pc, #184]	@ (80025b4 <StartDefaultTask+0x2e4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f8e2 	bl	80006c8 <__aeabi_i2d>
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	4b28      	ldr	r3, [pc, #160]	@ (80025ac <StartDefaultTask+0x2dc>)
 800250a:	f7fd fe61 	bl	80001d0 <__aeabi_dmul>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f7fe f941 	bl	800079c <__aeabi_d2iz>
 800251a:	4603      	mov	r3, r0
 800251c:	4a25      	ldr	r2, [pc, #148]	@ (80025b4 <StartDefaultTask+0x2e4>)
 800251e:	6013      	str	r3, [r2, #0]
		ServoState state4 = {100,Direction_Decider(&ring_desired_position),0,RING}; // Sets motion for Index Finger
 8002520:	2364      	movs	r3, #100	@ 0x64
 8002522:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002526:	4823      	ldr	r0, [pc, #140]	@ (80025b4 <StartDefaultTask+0x2e4>)
 8002528:	f7fe ffdc 	bl	80014e4 <Direction_Decider>
 800252c:	4603      	mov	r3, r0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
 8002534:	2300      	movs	r3, #0
 8002536:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800253a:	2303      	movs	r3, #3
 800253c:	f887 30d4 	strb.w	r3, [r7, #212]	@ 0xd4
		osMessageQueuePut(servoQueueHandle, &state4, 0, 0);
 8002540:	4b18      	ldr	r3, [pc, #96]	@ (80025a4 <StartDefaultTask+0x2d4>)
 8002542:	6818      	ldr	r0, [r3, #0]
 8002544:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8002548:	2300      	movs	r3, #0
 800254a:	2200      	movs	r2, #0
 800254c:	f004 fe76 	bl	800723c <osMessageQueuePut>
	}


	if(pinky_desired_position < 0){
 8002550:	4b19      	ldr	r3, [pc, #100]	@ (80025b8 <StartDefaultTask+0x2e8>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	da31      	bge.n	80025bc <StartDefaultTask+0x2ec>
		ServoState state5 = {100,Direction_Decider(&pinky_desired_position),0,PINKY}; // Sets motion for Pinky Finger0
 8002558:	2364      	movs	r3, #100	@ 0x64
 800255a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800255e:	4816      	ldr	r0, [pc, #88]	@ (80025b8 <StartDefaultTask+0x2e8>)
 8002560:	f7fe ffc0 	bl	80014e4 <Direction_Decider>
 8002564:	4603      	mov	r3, r0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	f887 30bc 	strb.w	r3, [r7, #188]	@ 0xbc
 800256c:	2300      	movs	r3, #0
 800256e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002572:	2304      	movs	r3, #4
 8002574:	f887 30c4 	strb.w	r3, [r7, #196]	@ 0xc4
		osMessageQueuePut(servoQueueHandle, &state5, 0, 0);
 8002578:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <StartDefaultTask+0x2d4>)
 800257a:	6818      	ldr	r0, [r3, #0]
 800257c:	f107 01b8 	add.w	r1, r7, #184	@ 0xb8
 8002580:	2300      	movs	r3, #0
 8002582:	2200      	movs	r2, #0
 8002584:	f004 fe5a 	bl	800723c <osMessageQueuePut>
 8002588:	e047      	b.n	800261a <StartDefaultTask+0x34a>
 800258a:	bf00      	nop
 800258c:	f3af 8000 	nop.w
 8002590:	33333333 	.word	0x33333333
 8002594:	3fc33333 	.word	0x3fc33333
 8002598:	cccccccd 	.word	0xcccccccd
 800259c:	3fdccccc 	.word	0x3fdccccc
 80025a0:	200002ac 	.word	0x200002ac
 80025a4:	20000298 	.word	0x20000298
 80025a8:	200002b0 	.word	0x200002b0
 80025ac:	3fe00000 	.word	0x3fe00000
 80025b0:	200002b4 	.word	0x200002b4
 80025b4:	200002b8 	.word	0x200002b8
 80025b8:	200002bc 	.word	0x200002bc
	}
	else if(pinky_desired_position > 0){
 80025bc:	4b9e      	ldr	r3, [pc, #632]	@ (8002838 <StartDefaultTask+0x568>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	dd2a      	ble.n	800261a <StartDefaultTask+0x34a>
		pinky_desired_position = pinky_desired_position *0.40;
 80025c4:	4b9c      	ldr	r3, [pc, #624]	@ (8002838 <StartDefaultTask+0x568>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe f87d 	bl	80006c8 <__aeabi_i2d>
 80025ce:	a396      	add	r3, pc, #600	@ (adr r3, 8002828 <StartDefaultTask+0x558>)
 80025d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d4:	f7fd fdfc 	bl	80001d0 <__aeabi_dmul>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	f7fe f8dc 	bl	800079c <__aeabi_d2iz>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4a94      	ldr	r2, [pc, #592]	@ (8002838 <StartDefaultTask+0x568>)
 80025e8:	6013      	str	r3, [r2, #0]
		ServoState state5 = {100,Direction_Decider(&pinky_desired_position),0,PINKY}; // Sets motion for Index Finger
 80025ea:	2364      	movs	r3, #100	@ 0x64
 80025ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80025f0:	4891      	ldr	r0, [pc, #580]	@ (8002838 <StartDefaultTask+0x568>)
 80025f2:	f7fe ff77 	bl	80014e4 <Direction_Decider>
 80025f6:	4603      	mov	r3, r0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f887 30ac 	strb.w	r3, [r7, #172]	@ 0xac
 80025fe:	2300      	movs	r3, #0
 8002600:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002604:	2304      	movs	r3, #4
 8002606:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
		osMessageQueuePut(servoQueueHandle, &state5, 0, 0);
 800260a:	4b8c      	ldr	r3, [pc, #560]	@ (800283c <StartDefaultTask+0x56c>)
 800260c:	6818      	ldr	r0, [r3, #0]
 800260e:	f107 01a8 	add.w	r1, r7, #168	@ 0xa8
 8002612:	2300      	movs	r3, #0
 8002614:	2200      	movs	r2, #0
 8002616:	f004 fe11 	bl	800723c <osMessageQueuePut>
	}



	if(index_desired_position !=0){
 800261a:	4b89      	ldr	r3, [pc, #548]	@ (8002840 <StartDefaultTask+0x570>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00a      	beq.n	8002638 <StartDefaultTask+0x368>
		osTimerStart(Index_FingerHandle, abs(index_desired_position));
 8002622:	4b88      	ldr	r3, [pc, #544]	@ (8002844 <StartDefaultTask+0x574>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	4b86      	ldr	r3, [pc, #536]	@ (8002840 <StartDefaultTask+0x570>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	bfb8      	it	lt
 800262e:	425b      	neglt	r3, r3
 8002630:	4619      	mov	r1, r3
 8002632:	4610      	mov	r0, r2
 8002634:	f004 fd60 	bl	80070f8 <osTimerStart>
	}
	if(thumb_desired_position !=0){
 8002638:	4b83      	ldr	r3, [pc, #524]	@ (8002848 <StartDefaultTask+0x578>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <StartDefaultTask+0x386>
		osTimerStart(Thumb_FingerHandle, abs(thumb_desired_position));
 8002640:	4b82      	ldr	r3, [pc, #520]	@ (800284c <StartDefaultTask+0x57c>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b80      	ldr	r3, [pc, #512]	@ (8002848 <StartDefaultTask+0x578>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	bfb8      	it	lt
 800264c:	425b      	neglt	r3, r3
 800264e:	4619      	mov	r1, r3
 8002650:	4610      	mov	r0, r2
 8002652:	f004 fd51 	bl	80070f8 <osTimerStart>
	}
	if(middle_desired_position !=0){
 8002656:	4b7e      	ldr	r3, [pc, #504]	@ (8002850 <StartDefaultTask+0x580>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00a      	beq.n	8002674 <StartDefaultTask+0x3a4>
		osTimerStart(Middle_FingerHandle, abs(middle_desired_position));
 800265e:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <StartDefaultTask+0x584>)
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	4b7b      	ldr	r3, [pc, #492]	@ (8002850 <StartDefaultTask+0x580>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2b00      	cmp	r3, #0
 8002668:	bfb8      	it	lt
 800266a:	425b      	neglt	r3, r3
 800266c:	4619      	mov	r1, r3
 800266e:	4610      	mov	r0, r2
 8002670:	f004 fd42 	bl	80070f8 <osTimerStart>
	}
	if(ring_desired_position !=0){
 8002674:	4b78      	ldr	r3, [pc, #480]	@ (8002858 <StartDefaultTask+0x588>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00a      	beq.n	8002692 <StartDefaultTask+0x3c2>
		osTimerStart(Ring_FingerHandle, abs(ring_desired_position));
 800267c:	4b77      	ldr	r3, [pc, #476]	@ (800285c <StartDefaultTask+0x58c>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b75      	ldr	r3, [pc, #468]	@ (8002858 <StartDefaultTask+0x588>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	bfb8      	it	lt
 8002688:	425b      	neglt	r3, r3
 800268a:	4619      	mov	r1, r3
 800268c:	4610      	mov	r0, r2
 800268e:	f004 fd33 	bl	80070f8 <osTimerStart>
	}
	if(pinky_desired_position !=0){
 8002692:	4b69      	ldr	r3, [pc, #420]	@ (8002838 <StartDefaultTask+0x568>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <StartDefaultTask+0x3e0>
		osTimerStart(Pinky_FingerHandle, abs(pinky_desired_position));
 800269a:	4b71      	ldr	r3, [pc, #452]	@ (8002860 <StartDefaultTask+0x590>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	4b66      	ldr	r3, [pc, #408]	@ (8002838 <StartDefaultTask+0x568>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	bfb8      	it	lt
 80026a6:	425b      	neglt	r3, r3
 80026a8:	4619      	mov	r1, r3
 80026aa:	4610      	mov	r0, r2
 80026ac:	f004 fd24 	bl	80070f8 <osTimerStart>
//	}
	/* Infinite loop to keep it in the task */
  for(;;)
  {

	if (IsButtonPressed())
 80026b0:	f7fe fddc 	bl	800126c <IsButtonPressed>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8224 	beq.w	8002b04 <StartDefaultTask+0x834>
	  {
		/* Process the message when button is pressed and message is available */

		SignLetter('0');
 80026bc:	2030      	movs	r0, #48	@ 0x30
 80026be:	f7fe ff27 	bl	8001510 <SignLetter>

		if(thumb_desired_position < 0){
 80026c2:	4b61      	ldr	r3, [pc, #388]	@ (8002848 <StartDefaultTask+0x578>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	da18      	bge.n	80026fc <StartDefaultTask+0x42c>
			ServoState state1 = {100,Direction_Decider(&thumb_desired_position),0,THUMB}; // Sets motion for Thumb
 80026ca:	2364      	movs	r3, #100	@ 0x64
 80026cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80026d0:	485d      	ldr	r0, [pc, #372]	@ (8002848 <StartDefaultTask+0x578>)
 80026d2:	f7fe ff07 	bl	80014e4 <Direction_Decider>
 80026d6:	4603      	mov	r3, r0
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	f887 309c 	strb.w	r3, [r7, #156]	@ 0x9c
 80026de:	2300      	movs	r3, #0
 80026e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80026e4:	2300      	movs	r3, #0
 80026e6:	f887 30a4 	strb.w	r3, [r7, #164]	@ 0xa4
			osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 80026ea:	4b54      	ldr	r3, [pc, #336]	@ (800283c <StartDefaultTask+0x56c>)
 80026ec:	6818      	ldr	r0, [r3, #0]
 80026ee:	f107 0198 	add.w	r1, r7, #152	@ 0x98
 80026f2:	2300      	movs	r3, #0
 80026f4:	2200      	movs	r2, #0
 80026f6:	f004 fda1 	bl	800723c <osMessageQueuePut>
 80026fa:	e02e      	b.n	800275a <StartDefaultTask+0x48a>
		}
		else if(thumb_desired_position > 0){
 80026fc:	4b52      	ldr	r3, [pc, #328]	@ (8002848 <StartDefaultTask+0x578>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b00      	cmp	r3, #0
 8002702:	dd2a      	ble.n	800275a <StartDefaultTask+0x48a>
			thumb_desired_position = thumb_desired_position *.15;
 8002704:	4b50      	ldr	r3, [pc, #320]	@ (8002848 <StartDefaultTask+0x578>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd ffdd 	bl	80006c8 <__aeabi_i2d>
 800270e:	a348      	add	r3, pc, #288	@ (adr r3, 8002830 <StartDefaultTask+0x560>)
 8002710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002714:	f7fd fd5c 	bl	80001d0 <__aeabi_dmul>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f7fe f83c 	bl	800079c <__aeabi_d2iz>
 8002724:	4603      	mov	r3, r0
 8002726:	4a48      	ldr	r2, [pc, #288]	@ (8002848 <StartDefaultTask+0x578>)
 8002728:	6013      	str	r3, [r2, #0]
			ServoState state1 = {100,Direction_Decider(&thumb_desired_position),0,THUMB}; // Sets motion for Thumb
 800272a:	2364      	movs	r3, #100	@ 0x64
 800272c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002730:	4845      	ldr	r0, [pc, #276]	@ (8002848 <StartDefaultTask+0x578>)
 8002732:	f7fe fed7 	bl	80014e4 <Direction_Decider>
 8002736:	4603      	mov	r3, r0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
 800273e:	2300      	movs	r3, #0
 8002740:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002744:	2300      	movs	r3, #0
 8002746:	f887 3094 	strb.w	r3, [r7, #148]	@ 0x94
			osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 800274a:	4b3c      	ldr	r3, [pc, #240]	@ (800283c <StartDefaultTask+0x56c>)
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8002752:	2300      	movs	r3, #0
 8002754:	2200      	movs	r2, #0
 8002756:	f004 fd71 	bl	800723c <osMessageQueuePut>
		}


		if(index_desired_position < 0){
 800275a:	4b39      	ldr	r3, [pc, #228]	@ (8002840 <StartDefaultTask+0x570>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	da17      	bge.n	8002792 <StartDefaultTask+0x4c2>
			ServoState state2 = {100,Direction_Decider(&index_desired_position),0,INDEX}; // Sets motion for Index Finger
 8002762:	2364      	movs	r3, #100	@ 0x64
 8002764:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002766:	4836      	ldr	r0, [pc, #216]	@ (8002840 <StartDefaultTask+0x570>)
 8002768:	f7fe febc 	bl	80014e4 <Direction_Decider>
 800276c:	4603      	mov	r3, r0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
 8002774:	2300      	movs	r3, #0
 8002776:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800277a:	2301      	movs	r3, #1
 800277c:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
			osMessageQueuePut(servoQueueHandle, &state2, 0, 0);
 8002780:	4b2e      	ldr	r3, [pc, #184]	@ (800283c <StartDefaultTask+0x56c>)
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	f107 0178 	add.w	r1, r7, #120	@ 0x78
 8002788:	2300      	movs	r3, #0
 800278a:	2200      	movs	r2, #0
 800278c:	f004 fd56 	bl	800723c <osMessageQueuePut>
 8002790:	e02c      	b.n	80027ec <StartDefaultTask+0x51c>
		}
		else if(index_desired_position > 0){
 8002792:	4b2b      	ldr	r3, [pc, #172]	@ (8002840 <StartDefaultTask+0x570>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	2b00      	cmp	r3, #0
 8002798:	dd28      	ble.n	80027ec <StartDefaultTask+0x51c>
			index_desired_position = index_desired_position *0.50;
 800279a:	4b29      	ldr	r3, [pc, #164]	@ (8002840 <StartDefaultTask+0x570>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd ff92 	bl	80006c8 <__aeabi_i2d>
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002864 <StartDefaultTask+0x594>)
 80027aa:	f7fd fd11 	bl	80001d0 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4610      	mov	r0, r2
 80027b4:	4619      	mov	r1, r3
 80027b6:	f7fd fff1 	bl	800079c <__aeabi_d2iz>
 80027ba:	4603      	mov	r3, r0
 80027bc:	4a20      	ldr	r2, [pc, #128]	@ (8002840 <StartDefaultTask+0x570>)
 80027be:	6013      	str	r3, [r2, #0]
			ServoState state2 = {100,Direction_Decider(&index_desired_position),0,INDEX}; // Sets motion for Index Finger
 80027c0:	2364      	movs	r3, #100	@ 0x64
 80027c2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80027c4:	481e      	ldr	r0, [pc, #120]	@ (8002840 <StartDefaultTask+0x570>)
 80027c6:	f7fe fe8d 	bl	80014e4 <Direction_Decider>
 80027ca:	4603      	mov	r3, r0
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
 80027d2:	2300      	movs	r3, #0
 80027d4:	673b      	str	r3, [r7, #112]	@ 0x70
 80027d6:	2301      	movs	r3, #1
 80027d8:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
			osMessageQueuePut(servoQueueHandle, &state2, 0, 0);
 80027dc:	4b17      	ldr	r3, [pc, #92]	@ (800283c <StartDefaultTask+0x56c>)
 80027de:	6818      	ldr	r0, [r3, #0]
 80027e0:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80027e4:	2300      	movs	r3, #0
 80027e6:	2200      	movs	r2, #0
 80027e8:	f004 fd28 	bl	800723c <osMessageQueuePut>
		}


		if(middle_desired_position < 0){
 80027ec:	4b18      	ldr	r3, [pc, #96]	@ (8002850 <StartDefaultTask+0x580>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	da39      	bge.n	8002868 <StartDefaultTask+0x598>
			ServoState state3 = {100,Direction_Decider(&middle_desired_position),0,MIDDLE}; // Sets motion for Middle Finger
 80027f4:	2364      	movs	r3, #100	@ 0x64
 80027f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80027f8:	4815      	ldr	r0, [pc, #84]	@ (8002850 <StartDefaultTask+0x580>)
 80027fa:	f7fe fe73 	bl	80014e4 <Direction_Decider>
 80027fe:	4603      	mov	r3, r0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
 8002806:	2300      	movs	r3, #0
 8002808:	663b      	str	r3, [r7, #96]	@ 0x60
 800280a:	2302      	movs	r3, #2
 800280c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
			osMessageQueuePut(servoQueueHandle, &state3, 0, 0);
 8002810:	4b0a      	ldr	r3, [pc, #40]	@ (800283c <StartDefaultTask+0x56c>)
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8002818:	2300      	movs	r3, #0
 800281a:	2200      	movs	r2, #0
 800281c:	f004 fd0e 	bl	800723c <osMessageQueuePut>
 8002820:	e05d      	b.n	80028de <StartDefaultTask+0x60e>
 8002822:	bf00      	nop
 8002824:	f3af 8000 	nop.w
 8002828:	9999999a 	.word	0x9999999a
 800282c:	3fd99999 	.word	0x3fd99999
 8002830:	33333333 	.word	0x33333333
 8002834:	3fc33333 	.word	0x3fc33333
 8002838:	200002bc 	.word	0x200002bc
 800283c:	20000298 	.word	0x20000298
 8002840:	200002b0 	.word	0x200002b0
 8002844:	20000284 	.word	0x20000284
 8002848:	200002ac 	.word	0x200002ac
 800284c:	20000288 	.word	0x20000288
 8002850:	200002b4 	.word	0x200002b4
 8002854:	2000028c 	.word	0x2000028c
 8002858:	200002b8 	.word	0x200002b8
 800285c:	20000290 	.word	0x20000290
 8002860:	20000294 	.word	0x20000294
 8002864:	3fe00000 	.word	0x3fe00000
		}
		else if(middle_desired_position > 0){
 8002868:	4bad      	ldr	r3, [pc, #692]	@ (8002b20 <StartDefaultTask+0x850>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	2b00      	cmp	r3, #0
 800286e:	dd36      	ble.n	80028de <StartDefaultTask+0x60e>
			middle_desired_position = middle_desired_position *0.45;
 8002870:	4bab      	ldr	r3, [pc, #684]	@ (8002b20 <StartDefaultTask+0x850>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fd ff27 	bl	80006c8 <__aeabi_i2d>
 800287a:	a3a5      	add	r3, pc, #660	@ (adr r3, 8002b10 <StartDefaultTask+0x840>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	f7fd fca6 	bl	80001d0 <__aeabi_dmul>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4610      	mov	r0, r2
 800288a:	4619      	mov	r1, r3
 800288c:	f7fd ff86 	bl	800079c <__aeabi_d2iz>
 8002890:	4603      	mov	r3, r0
 8002892:	4aa3      	ldr	r2, [pc, #652]	@ (8002b20 <StartDefaultTask+0x850>)
 8002894:	6013      	str	r3, [r2, #0]
			ServoState state3 = {100,Direction_Decider(&middle_desired_position),0,MIDDLE}; // Sets motion for Index Finger
 8002896:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800289a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800289e:	2264      	movs	r2, #100	@ 0x64
 80028a0:	601a      	str	r2, [r3, #0]
 80028a2:	489f      	ldr	r0, [pc, #636]	@ (8002b20 <StartDefaultTask+0x850>)
 80028a4:	f7fe fe1e 	bl	80014e4 <Direction_Decider>
 80028a8:	4603      	mov	r3, r0
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028b4:	711a      	strb	r2, [r3, #4]
 80028b6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028ba:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
 80028c2:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028c6:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80028ca:	2202      	movs	r2, #2
 80028cc:	731a      	strb	r2, [r3, #12]
			osMessageQueuePut(servoQueueHandle, &state3, 0, 0);
 80028ce:	4b95      	ldr	r3, [pc, #596]	@ (8002b24 <StartDefaultTask+0x854>)
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80028d6:	2300      	movs	r3, #0
 80028d8:	2200      	movs	r2, #0
 80028da:	f004 fcaf 	bl	800723c <osMessageQueuePut>
		}


		if(ring_desired_position < 0){
 80028de:	4b92      	ldr	r3, [pc, #584]	@ (8002b28 <StartDefaultTask+0x858>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	da24      	bge.n	8002930 <StartDefaultTask+0x660>
			ServoState state4 = {100,Direction_Decider(&ring_desired_position),0,RING}; // Sets motion for Ring Finger
 80028e6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80028ea:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80028ee:	2264      	movs	r2, #100	@ 0x64
 80028f0:	601a      	str	r2, [r3, #0]
 80028f2:	488d      	ldr	r0, [pc, #564]	@ (8002b28 <StartDefaultTask+0x858>)
 80028f4:	f7fe fdf6 	bl	80014e4 <Direction_Decider>
 80028f8:	4603      	mov	r3, r0
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002900:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002904:	711a      	strb	r2, [r3, #4]
 8002906:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800290a:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
 8002912:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002916:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800291a:	2203      	movs	r2, #3
 800291c:	731a      	strb	r2, [r3, #12]
			osMessageQueuePut(servoQueueHandle, &state4, 0, 0);
 800291e:	4b81      	ldr	r3, [pc, #516]	@ (8002b24 <StartDefaultTask+0x854>)
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8002926:	2300      	movs	r3, #0
 8002928:	2200      	movs	r2, #0
 800292a:	f004 fc87 	bl	800723c <osMessageQueuePut>
 800292e:	e03a      	b.n	80029a6 <StartDefaultTask+0x6d6>
		}
		else if(ring_desired_position > 0){
 8002930:	4b7d      	ldr	r3, [pc, #500]	@ (8002b28 <StartDefaultTask+0x858>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	dd36      	ble.n	80029a6 <StartDefaultTask+0x6d6>
			ring_desired_position = ring_desired_position *0.5;
 8002938:	4b7b      	ldr	r3, [pc, #492]	@ (8002b28 <StartDefaultTask+0x858>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd fec3 	bl	80006c8 <__aeabi_i2d>
 8002942:	f04f 0200 	mov.w	r2, #0
 8002946:	4b79      	ldr	r3, [pc, #484]	@ (8002b2c <StartDefaultTask+0x85c>)
 8002948:	f7fd fc42 	bl	80001d0 <__aeabi_dmul>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f7fd ff22 	bl	800079c <__aeabi_d2iz>
 8002958:	4603      	mov	r3, r0
 800295a:	4a73      	ldr	r2, [pc, #460]	@ (8002b28 <StartDefaultTask+0x858>)
 800295c:	6013      	str	r3, [r2, #0]
			ServoState state4 = {100,Direction_Decider(&ring_desired_position),0,RING}; // Sets motion for Index Finger
 800295e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002962:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002966:	2264      	movs	r2, #100	@ 0x64
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	486f      	ldr	r0, [pc, #444]	@ (8002b28 <StartDefaultTask+0x858>)
 800296c:	f7fe fdba 	bl	80014e4 <Direction_Decider>
 8002970:	4603      	mov	r3, r0
 8002972:	b2da      	uxtb	r2, r3
 8002974:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002978:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800297c:	711a      	strb	r2, [r3, #4]
 800297e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002982:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002986:	2200      	movs	r2, #0
 8002988:	609a      	str	r2, [r3, #8]
 800298a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800298e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002992:	2203      	movs	r2, #3
 8002994:	731a      	strb	r2, [r3, #12]
			osMessageQueuePut(servoQueueHandle, &state4, 0, 0);
 8002996:	4b63      	ldr	r3, [pc, #396]	@ (8002b24 <StartDefaultTask+0x854>)
 8002998:	6818      	ldr	r0, [r3, #0]
 800299a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800299e:	2300      	movs	r3, #0
 80029a0:	2200      	movs	r2, #0
 80029a2:	f004 fc4b 	bl	800723c <osMessageQueuePut>
		}


		if(pinky_desired_position < 0){
 80029a6:	4b62      	ldr	r3, [pc, #392]	@ (8002b30 <StartDefaultTask+0x860>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	da24      	bge.n	80029f8 <StartDefaultTask+0x728>
			ServoState state5 = {100,Direction_Decider(&pinky_desired_position),0,PINKY}; // Sets motion for Pinky Finger0
 80029ae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80029b2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029b6:	2264      	movs	r2, #100	@ 0x64
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	485d      	ldr	r0, [pc, #372]	@ (8002b30 <StartDefaultTask+0x860>)
 80029bc:	f7fe fd92 	bl	80014e4 <Direction_Decider>
 80029c0:	4603      	mov	r3, r0
 80029c2:	b2da      	uxtb	r2, r3
 80029c4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80029c8:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029cc:	711a      	strb	r2, [r3, #4]
 80029ce:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80029d2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029d6:	2200      	movs	r2, #0
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80029de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80029e2:	2204      	movs	r2, #4
 80029e4:	731a      	strb	r2, [r3, #12]
			osMessageQueuePut(servoQueueHandle, &state5, 0, 0);
 80029e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002b24 <StartDefaultTask+0x854>)
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	f107 0118 	add.w	r1, r7, #24
 80029ee:	2300      	movs	r3, #0
 80029f0:	2200      	movs	r2, #0
 80029f2:	f004 fc23 	bl	800723c <osMessageQueuePut>
 80029f6:	e03a      	b.n	8002a6e <StartDefaultTask+0x79e>
		}
		else if(pinky_desired_position > 0){
 80029f8:	4b4d      	ldr	r3, [pc, #308]	@ (8002b30 <StartDefaultTask+0x860>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	dd36      	ble.n	8002a6e <StartDefaultTask+0x79e>
			pinky_desired_position = pinky_desired_position *0.40;
 8002a00:	4b4b      	ldr	r3, [pc, #300]	@ (8002b30 <StartDefaultTask+0x860>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7fd fe5f 	bl	80006c8 <__aeabi_i2d>
 8002a0a:	a343      	add	r3, pc, #268	@ (adr r3, 8002b18 <StartDefaultTask+0x848>)
 8002a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a10:	f7fd fbde 	bl	80001d0 <__aeabi_dmul>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	f7fd febe 	bl	800079c <__aeabi_d2iz>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4a43      	ldr	r2, [pc, #268]	@ (8002b30 <StartDefaultTask+0x860>)
 8002a24:	6013      	str	r3, [r2, #0]
			ServoState state5 = {100,Direction_Decider(&pinky_desired_position),0,PINKY}; // Sets motion for Index Finger
 8002a26:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a2a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a2e:	2264      	movs	r2, #100	@ 0x64
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	483f      	ldr	r0, [pc, #252]	@ (8002b30 <StartDefaultTask+0x860>)
 8002a34:	f7fe fd56 	bl	80014e4 <Direction_Decider>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a40:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a44:	711a      	strb	r2, [r3, #4]
 8002a46:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a4a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a4e:	2200      	movs	r2, #0
 8002a50:	609a      	str	r2, [r3, #8]
 8002a52:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8002a56:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002a5a:	2204      	movs	r2, #4
 8002a5c:	731a      	strb	r2, [r3, #12]
			osMessageQueuePut(servoQueueHandle, &state5, 0, 0);
 8002a5e:	4b31      	ldr	r3, [pc, #196]	@ (8002b24 <StartDefaultTask+0x854>)
 8002a60:	6818      	ldr	r0, [r3, #0]
 8002a62:	f107 0108 	add.w	r1, r7, #8
 8002a66:	2300      	movs	r3, #0
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f004 fbe7 	bl	800723c <osMessageQueuePut>
		}



		if(index_desired_position !=0){
 8002a6e:	4b31      	ldr	r3, [pc, #196]	@ (8002b34 <StartDefaultTask+0x864>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <StartDefaultTask+0x7bc>
			osTimerStart(Index_FingerHandle, abs(index_desired_position));
 8002a76:	4b30      	ldr	r3, [pc, #192]	@ (8002b38 <StartDefaultTask+0x868>)
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	4b2e      	ldr	r3, [pc, #184]	@ (8002b34 <StartDefaultTask+0x864>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	bfb8      	it	lt
 8002a82:	425b      	neglt	r3, r3
 8002a84:	4619      	mov	r1, r3
 8002a86:	4610      	mov	r0, r2
 8002a88:	f004 fb36 	bl	80070f8 <osTimerStart>
		}
		if(thumb_desired_position !=0){
 8002a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8002b3c <StartDefaultTask+0x86c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <StartDefaultTask+0x7da>
			osTimerStart(Thumb_FingerHandle, abs(thumb_desired_position));
 8002a94:	4b2a      	ldr	r3, [pc, #168]	@ (8002b40 <StartDefaultTask+0x870>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4b28      	ldr	r3, [pc, #160]	@ (8002b3c <StartDefaultTask+0x86c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bfb8      	it	lt
 8002aa0:	425b      	neglt	r3, r3
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	4610      	mov	r0, r2
 8002aa6:	f004 fb27 	bl	80070f8 <osTimerStart>
		}
		if(middle_desired_position !=0){
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8002b20 <StartDefaultTask+0x850>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <StartDefaultTask+0x7f8>
			osTimerStart(Middle_FingerHandle, abs(middle_desired_position));
 8002ab2:	4b24      	ldr	r3, [pc, #144]	@ (8002b44 <StartDefaultTask+0x874>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8002b20 <StartDefaultTask+0x850>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	bfb8      	it	lt
 8002abe:	425b      	neglt	r3, r3
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	f004 fb18 	bl	80070f8 <osTimerStart>
		}
		if(ring_desired_position !=0){
 8002ac8:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <StartDefaultTask+0x858>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <StartDefaultTask+0x816>
			osTimerStart(Ring_FingerHandle, abs(ring_desired_position));
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b48 <StartDefaultTask+0x878>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	4b14      	ldr	r3, [pc, #80]	@ (8002b28 <StartDefaultTask+0x858>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	bfb8      	it	lt
 8002adc:	425b      	neglt	r3, r3
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	f004 fb09 	bl	80070f8 <osTimerStart>
		}
		if(pinky_desired_position !=0){
 8002ae6:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <StartDefaultTask+0x860>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d00a      	beq.n	8002b04 <StartDefaultTask+0x834>
			osTimerStart(Pinky_FingerHandle, abs(pinky_desired_position));
 8002aee:	4b17      	ldr	r3, [pc, #92]	@ (8002b4c <StartDefaultTask+0x87c>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <StartDefaultTask+0x860>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bfb8      	it	lt
 8002afa:	425b      	neglt	r3, r3
 8002afc:	4619      	mov	r1, r3
 8002afe:	4610      	mov	r0, r2
 8002b00:	f004 fafa 	bl	80070f8 <osTimerStart>
//		memset(message, 0, sizeof(message));
//
//		/* Debounce */
//		HAL_Delay(200);
	  }
	  osDelay(100);
 8002b04:	2064      	movs	r0, #100	@ 0x64
 8002b06:	f004 fa4b 	bl	8006fa0 <osDelay>
	if (IsButtonPressed())
 8002b0a:	e5d1      	b.n	80026b0 <StartDefaultTask+0x3e0>
 8002b0c:	f3af 8000 	nop.w
 8002b10:	cccccccd 	.word	0xcccccccd
 8002b14:	3fdccccc 	.word	0x3fdccccc
 8002b18:	9999999a 	.word	0x9999999a
 8002b1c:	3fd99999 	.word	0x3fd99999
 8002b20:	200002b4 	.word	0x200002b4
 8002b24:	20000298 	.word	0x20000298
 8002b28:	200002b8 	.word	0x200002b8
 8002b2c:	3fe00000 	.word	0x3fe00000
 8002b30:	200002bc 	.word	0x200002bc
 8002b34:	200002b0 	.word	0x200002b0
 8002b38:	20000284 	.word	0x20000284
 8002b3c:	200002ac 	.word	0x200002ac
 8002b40:	20000288 	.word	0x20000288
 8002b44:	2000028c 	.word	0x2000028c
 8002b48:	20000290 	.word	0x20000290
 8002b4c:	20000294 	.word	0x20000294

08002b50 <Index>:
  /* USER CODE END 5 */
}

/* Index function */
void Index(void *argument)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Index */

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002b58:	2120      	movs	r1, #32
 8002b5a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b5e:	f000 fe89 	bl	8003874 <HAL_GPIO_TogglePin>
	ServoState state1 = {0,STOP,0,INDEX}; // Stops Index Finger
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]
 8002b66:	2300      	movs	r3, #0
 8002b68:	733b      	strb	r3, [r7, #12]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	2301      	movs	r3, #1
 8002b70:	753b      	strb	r3, [r7, #20]
	osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 8002b72:	4b0a      	ldr	r3, [pc, #40]	@ (8002b9c <Index+0x4c>)
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	f107 0108 	add.w	r1, r7, #8
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f004 fb5d 	bl	800723c <osMessageQueuePut>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002b82:	2100      	movs	r1, #0
 8002b84:	4806      	ldr	r0, [pc, #24]	@ (8002ba0 <Index+0x50>)
 8002b86:	f002 fc29 	bl	80053dc <HAL_TIM_PWM_Stop>
	index_current = index_desired_position;
 8002b8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ba4 <Index+0x54>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	b21a      	sxth	r2, r3
 8002b90:	4b05      	ldr	r3, [pc, #20]	@ (8002ba8 <Index+0x58>)
 8002b92:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Index */
}
 8002b94:	bf00      	nop
 8002b96:	3718      	adds	r7, #24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	20000298 	.word	0x20000298
 8002ba0:	200000c8 	.word	0x200000c8
 8002ba4:	200002b0 	.word	0x200002b0
 8002ba8:	200002a2 	.word	0x200002a2

08002bac <Thumb>:

/* Thumb function */
void Thumb(void *argument)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thumb */
	ServoState state1 = {0,STOP,0,THUMB}; // Stops Thumb Finger
 8002bb4:	f107 0308 	add.w	r3, r7, #8
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
	osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 8002bc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002bec <Thumb+0x40>)
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	f107 0108 	add.w	r1, r7, #8
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f004 fb35 	bl	800723c <osMessageQueuePut>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4806      	ldr	r0, [pc, #24]	@ (8002bf0 <Thumb+0x44>)
 8002bd6:	f002 fc01 	bl	80053dc <HAL_TIM_PWM_Stop>
    thumb_current = thumb_desired_position;
 8002bda:	4b06      	ldr	r3, [pc, #24]	@ (8002bf4 <Thumb+0x48>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	b21a      	sxth	r2, r3
 8002be0:	4b05      	ldr	r3, [pc, #20]	@ (8002bf8 <Thumb+0x4c>)
 8002be2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Thumb */
}
 8002be4:	bf00      	nop
 8002be6:	3718      	adds	r7, #24
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	20000298 	.word	0x20000298
 8002bf0:	2000007c 	.word	0x2000007c
 8002bf4:	200002ac 	.word	0x200002ac
 8002bf8:	200002a0 	.word	0x200002a0

08002bfc <Middle>:

/* Middle function */
void Middle(void *argument)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Middle */
	ServoState state1 = {0,STOP,0,MIDDLE}; // Stops Middle Finger
 8002c04:	2300      	movs	r3, #0
 8002c06:	60bb      	str	r3, [r7, #8]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	733b      	strb	r3, [r7, #12]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	2302      	movs	r3, #2
 8002c12:	753b      	strb	r3, [r7, #20]
	osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 8002c14:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <Middle+0x44>)
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	f107 0108 	add.w	r1, r7, #8
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2200      	movs	r2, #0
 8002c20:	f004 fb0c 	bl	800723c <osMessageQueuePut>
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002c24:	2100      	movs	r1, #0
 8002c26:	4807      	ldr	r0, [pc, #28]	@ (8002c44 <Middle+0x48>)
 8002c28:	f002 fbd8 	bl	80053dc <HAL_TIM_PWM_Stop>

	middle_current = middle_desired_position;
 8002c2c:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <Middle+0x4c>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	b21a      	sxth	r2, r3
 8002c32:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <Middle+0x50>)
 8002c34:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Middle */
}
 8002c36:	bf00      	nop
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	20000298 	.word	0x20000298
 8002c44:	20000114 	.word	0x20000114
 8002c48:	200002b4 	.word	0x200002b4
 8002c4c:	200002a4 	.word	0x200002a4

08002c50 <Ring>:

/* Ring function */
void Ring(void *argument)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ring */
	ServoState state1 = {0,STOP,0,RING}; // Stops Ring Finger
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60bb      	str	r3, [r7, #8]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	733b      	strb	r3, [r7, #12]
 8002c60:	2300      	movs	r3, #0
 8002c62:	613b      	str	r3, [r7, #16]
 8002c64:	2303      	movs	r3, #3
 8002c66:	753b      	strb	r3, [r7, #20]
	osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 8002c68:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <Ring+0x44>)
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	f107 0108 	add.w	r1, r7, #8
 8002c70:	2300      	movs	r3, #0
 8002c72:	2200      	movs	r2, #0
 8002c74:	f004 fae2 	bl	800723c <osMessageQueuePut>
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4807      	ldr	r0, [pc, #28]	@ (8002c98 <Ring+0x48>)
 8002c7c:	f002 fbae 	bl	80053dc <HAL_TIM_PWM_Stop>
	ring_current = ring_desired_position;
 8002c80:	4b06      	ldr	r3, [pc, #24]	@ (8002c9c <Ring+0x4c>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	b21a      	sxth	r2, r3
 8002c86:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <Ring+0x50>)
 8002c88:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Ring */
}
 8002c8a:	bf00      	nop
 8002c8c:	3718      	adds	r7, #24
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000298 	.word	0x20000298
 8002c98:	20000160 	.word	0x20000160
 8002c9c:	200002b8 	.word	0x200002b8
 8002ca0:	200002a6 	.word	0x200002a6

08002ca4 <Pinky>:

/* Pinky function */
void Pinky(void *argument)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Pinky */
	ServoState state1 = {0,STOP,0,PINKY}; // Stops Pinky Finger
 8002cac:	2300      	movs	r3, #0
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	733b      	strb	r3, [r7, #12]
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	613b      	str	r3, [r7, #16]
 8002cb8:	2304      	movs	r3, #4
 8002cba:	753b      	strb	r3, [r7, #20]
	osMessageQueuePut(servoQueueHandle, &state1, 0, 0);
 8002cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8002ce8 <Pinky+0x44>)
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	f107 0108 	add.w	r1, r7, #8
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f004 fab8 	bl	800723c <osMessageQueuePut>
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4807      	ldr	r0, [pc, #28]	@ (8002cec <Pinky+0x48>)
 8002cd0:	f002 fb84 	bl	80053dc <HAL_TIM_PWM_Stop>
	pinky_current = pinky_desired_position;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <Pinky+0x4c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	b21a      	sxth	r2, r3
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <Pinky+0x50>)
 8002cdc:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Pinky */
}
 8002cde:	bf00      	nop
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	20000298 	.word	0x20000298
 8002cec:	200001ac 	.word	0x200001ac
 8002cf0:	200002bc 	.word	0x200002bc
 8002cf4:	200002a8 	.word	0x200002a8

08002cf8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a04      	ldr	r2, [pc, #16]	@ (8002d18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d101      	bne.n	8002d0e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002d0a:	f000 fad7 	bl	80032bc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002d0e:	bf00      	nop
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40000c00 	.word	0x40000c00

08002d1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d20:	b672      	cpsid	i
}
 8002d22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <Error_Handler+0x8>

08002d28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2e:	4b11      	ldr	r3, [pc, #68]	@ (8002d74 <HAL_MspInit+0x4c>)
 8002d30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d32:	4a10      	ldr	r2, [pc, #64]	@ (8002d74 <HAL_MspInit+0x4c>)
 8002d34:	f043 0301 	orr.w	r3, r3, #1
 8002d38:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002d74 <HAL_MspInit+0x4c>)
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3e:	f003 0301 	and.w	r3, r3, #1
 8002d42:	607b      	str	r3, [r7, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	4b0b      	ldr	r3, [pc, #44]	@ (8002d74 <HAL_MspInit+0x4c>)
 8002d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d74 <HAL_MspInit+0x4c>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d50:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d52:	4b08      	ldr	r3, [pc, #32]	@ (8002d74 <HAL_MspInit+0x4c>)
 8002d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5a:	603b      	str	r3, [r7, #0]
 8002d5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d5e:	2200      	movs	r2, #0
 8002d60:	210f      	movs	r1, #15
 8002d62:	f06f 0001 	mvn.w	r0, #1
 8002d66:	f000 fb81 	bl	800346c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	bf00      	nop
 8002d74:	40021000 	.word	0x40021000

08002d78 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	@ 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a2e      	ldr	r2, [pc, #184]	@ (8002e40 <HAL_TIM_PWM_MspInit+0xc8>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d10c      	bne.n	8002da4 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d8a:	4b2e      	ldr	r3, [pc, #184]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8e:	4a2d      	ldr	r2, [pc, #180]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002d90:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d94:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d96:	4b2b      	ldr	r3, [pc, #172]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002d98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d9e:	61fb      	str	r3, [r7, #28]
 8002da0:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002da2:	e046      	b.n	8002e32 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dac:	d10c      	bne.n	8002dc8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dae:	4b25      	ldr	r3, [pc, #148]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002db2:	4a24      	ldr	r2, [pc, #144]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002db4:	f043 0301 	orr.w	r3, r3, #1
 8002db8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dba:	4b22      	ldr	r3, [pc, #136]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
}
 8002dc6:	e034      	b.n	8002e32 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8002e48 <HAL_TIM_PWM_MspInit+0xd0>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d10c      	bne.n	8002dec <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002dd8:	f043 0302 	orr.w	r3, r3, #2
 8002ddc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002dde:	4b19      	ldr	r3, [pc, #100]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	617b      	str	r3, [r7, #20]
 8002de8:	697b      	ldr	r3, [r7, #20]
}
 8002dea:	e022      	b.n	8002e32 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM4)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a16      	ldr	r2, [pc, #88]	@ (8002e4c <HAL_TIM_PWM_MspInit+0xd4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d10c      	bne.n	8002e10 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002df6:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002df8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dfa:	4a12      	ldr	r2, [pc, #72]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002dfc:	f043 0304 	orr.w	r3, r3, #4
 8002e00:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e02:	4b10      	ldr	r3, [pc, #64]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002e04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	693b      	ldr	r3, [r7, #16]
}
 8002e0e:	e010      	b.n	8002e32 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM8)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0e      	ldr	r2, [pc, #56]	@ (8002e50 <HAL_TIM_PWM_MspInit+0xd8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d10b      	bne.n	8002e32 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002e1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e1e:	4a09      	ldr	r2, [pc, #36]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002e20:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002e24:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e26:	4b07      	ldr	r3, [pc, #28]	@ (8002e44 <HAL_TIM_PWM_MspInit+0xcc>)
 8002e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e2e:	60fb      	str	r3, [r7, #12]
 8002e30:	68fb      	ldr	r3, [r7, #12]
}
 8002e32:	bf00      	nop
 8002e34:	3724      	adds	r7, #36	@ 0x24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	40012c00 	.word	0x40012c00
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40000400 	.word	0x40000400
 8002e4c:	40000800 	.word	0x40000800
 8002e50:	40013400 	.word	0x40013400

08002e54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b08c      	sub	sp, #48	@ 0x30
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e5c:	f107 031c 	add.w	r3, r7, #28
 8002e60:	2200      	movs	r2, #0
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	609a      	str	r2, [r3, #8]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a57      	ldr	r2, [pc, #348]	@ (8002fd0 <HAL_TIM_MspPostInit+0x17c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d11e      	bne.n	8002eb4 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e76:	4b57      	ldr	r3, [pc, #348]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e7a:	4a56      	ldr	r2, [pc, #344]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002e7c:	f043 0301 	orr.w	r3, r3, #1
 8002e80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e82:	4b54      	ldr	r3, [pc, #336]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002e84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002e8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e94:	2302      	movs	r3, #2
 8002e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ea4:	f107 031c 	add.w	r3, r7, #28
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002eae:	f000 fb07 	bl	80034c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002eb2:	e088      	b.n	8002fc6 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM2)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ebc:	d11d      	bne.n	8002efa <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ebe:	4b45      	ldr	r3, [pc, #276]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ec2:	4a44      	ldr	r2, [pc, #272]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002ec4:	f043 0301 	orr.w	r3, r3, #1
 8002ec8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002eca:	4b42      	ldr	r3, [pc, #264]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	617b      	str	r3, [r7, #20]
 8002ed4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eda:	2302      	movs	r3, #2
 8002edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eea:	f107 031c 	add.w	r3, r7, #28
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ef4:	f000 fae4 	bl	80034c0 <HAL_GPIO_Init>
}
 8002ef8:	e065      	b.n	8002fc6 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a36      	ldr	r2, [pc, #216]	@ (8002fd8 <HAL_TIM_MspPostInit+0x184>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d11d      	bne.n	8002f40 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f04:	4b33      	ldr	r3, [pc, #204]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002f06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f08:	4a32      	ldr	r2, [pc, #200]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002f0a:	f043 0301 	orr.w	r3, r3, #1
 8002f0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f10:	4b30      	ldr	r3, [pc, #192]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002f12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f1c:	2340      	movs	r3, #64	@ 0x40
 8002f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f20:	2302      	movs	r3, #2
 8002f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f24:	2300      	movs	r3, #0
 8002f26:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	f107 031c 	add.w	r3, r7, #28
 8002f34:	4619      	mov	r1, r3
 8002f36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f3a:	f000 fac1 	bl	80034c0 <HAL_GPIO_Init>
}
 8002f3e:	e042      	b.n	8002fc6 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a25      	ldr	r2, [pc, #148]	@ (8002fdc <HAL_TIM_MspPostInit+0x188>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d11c      	bne.n	8002f84 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f4a:	4b22      	ldr	r3, [pc, #136]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f4e:	4a21      	ldr	r2, [pc, #132]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002f50:	f043 0302 	orr.w	r3, r3, #2
 8002f54:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f56:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002f58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f62:	2340      	movs	r3, #64	@ 0x40
 8002f64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f66:	2302      	movs	r3, #2
 8002f68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002f72:	2302      	movs	r3, #2
 8002f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f76:	f107 031c 	add.w	r3, r7, #28
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4818      	ldr	r0, [pc, #96]	@ (8002fe0 <HAL_TIM_MspPostInit+0x18c>)
 8002f7e:	f000 fa9f 	bl	80034c0 <HAL_GPIO_Init>
}
 8002f82:	e020      	b.n	8002fc6 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM8)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a16      	ldr	r2, [pc, #88]	@ (8002fe4 <HAL_TIM_MspPostInit+0x190>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d11b      	bne.n	8002fc6 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f8e:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f92:	4a10      	ldr	r2, [pc, #64]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd4 <HAL_TIM_MspPostInit+0x180>)
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002fa6:	2340      	movs	r3, #64	@ 0x40
 8002fa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002fb6:	2303      	movs	r3, #3
 8002fb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fba:	f107 031c 	add.w	r3, r7, #28
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4809      	ldr	r0, [pc, #36]	@ (8002fe8 <HAL_TIM_MspPostInit+0x194>)
 8002fc2:	f000 fa7d 	bl	80034c0 <HAL_GPIO_Init>
}
 8002fc6:	bf00      	nop
 8002fc8:	3730      	adds	r7, #48	@ 0x30
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40012c00 	.word	0x40012c00
 8002fd4:	40021000 	.word	0x40021000
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40000800 	.word	0x40000800
 8002fe0:	48000400 	.word	0x48000400
 8002fe4:	40013400 	.word	0x40013400
 8002fe8:	48000800 	.word	0x48000800

08002fec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b0ac      	sub	sp, #176	@ 0xb0
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	601a      	str	r2, [r3, #0]
 8002ffc:	605a      	str	r2, [r3, #4]
 8002ffe:	609a      	str	r2, [r3, #8]
 8003000:	60da      	str	r2, [r3, #12]
 8003002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003004:	f107 0314 	add.w	r3, r7, #20
 8003008:	2288      	movs	r2, #136	@ 0x88
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f006 ffdb 	bl	8009fc8 <memset>
  if(huart->Instance==USART2)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a25      	ldr	r2, [pc, #148]	@ (80030ac <HAL_UART_MspInit+0xc0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d143      	bne.n	80030a4 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800301c:	2302      	movs	r3, #2
 800301e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003020:	2300      	movs	r3, #0
 8003022:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4618      	mov	r0, r3
 800302a:	f001 faeb 	bl	8004604 <HAL_RCCEx_PeriphCLKConfig>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003034:	f7ff fe72 	bl	8002d1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003038:	4b1d      	ldr	r3, [pc, #116]	@ (80030b0 <HAL_UART_MspInit+0xc4>)
 800303a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303c:	4a1c      	ldr	r2, [pc, #112]	@ (80030b0 <HAL_UART_MspInit+0xc4>)
 800303e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003042:	6593      	str	r3, [r2, #88]	@ 0x58
 8003044:	4b1a      	ldr	r3, [pc, #104]	@ (80030b0 <HAL_UART_MspInit+0xc4>)
 8003046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304c:	613b      	str	r3, [r7, #16]
 800304e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003050:	4b17      	ldr	r3, [pc, #92]	@ (80030b0 <HAL_UART_MspInit+0xc4>)
 8003052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003054:	4a16      	ldr	r2, [pc, #88]	@ (80030b0 <HAL_UART_MspInit+0xc4>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800305c:	4b14      	ldr	r3, [pc, #80]	@ (80030b0 <HAL_UART_MspInit+0xc4>)
 800305e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003068:	230c      	movs	r3, #12
 800306a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800306e:	2302      	movs	r3, #2
 8003070:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003074:	2300      	movs	r3, #0
 8003076:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800307a:	2303      	movs	r3, #3
 800307c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003080:	2307      	movs	r3, #7
 8003082:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003086:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800308a:	4619      	mov	r1, r3
 800308c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003090:	f000 fa16 	bl	80034c0 <HAL_GPIO_Init>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003094:	2200      	movs	r2, #0
 8003096:	2100      	movs	r1, #0
 8003098:	2026      	movs	r0, #38	@ 0x26
 800309a:	f000 f9e7 	bl	800346c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800309e:	2026      	movs	r0, #38	@ 0x26
 80030a0:	f000 fa00 	bl	80034a4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80030a4:	bf00      	nop
 80030a6:	37b0      	adds	r7, #176	@ 0xb0
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40004400 	.word	0x40004400
 80030b0:	40021000 	.word	0x40021000

080030b4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08e      	sub	sp, #56	@ 0x38
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80030c2:	4b34      	ldr	r3, [pc, #208]	@ (8003194 <HAL_InitTick+0xe0>)
 80030c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c6:	4a33      	ldr	r2, [pc, #204]	@ (8003194 <HAL_InitTick+0xe0>)
 80030c8:	f043 0308 	orr.w	r3, r3, #8
 80030cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80030ce:	4b31      	ldr	r3, [pc, #196]	@ (8003194 <HAL_InitTick+0xe0>)
 80030d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030d2:	f003 0308 	and.w	r3, r3, #8
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80030da:	f107 0210 	add.w	r2, r7, #16
 80030de:	f107 0314 	add.w	r3, r7, #20
 80030e2:	4611      	mov	r1, r2
 80030e4:	4618      	mov	r0, r3
 80030e6:	f001 f9fb 	bl	80044e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80030ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d103      	bne.n	80030fc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80030f4:	f001 f9c8 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 80030f8:	6378      	str	r0, [r7, #52]	@ 0x34
 80030fa:	e004      	b.n	8003106 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80030fc:	f001 f9c4 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 8003100:	4603      	mov	r3, r0
 8003102:	005b      	lsls	r3, r3, #1
 8003104:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003108:	4a23      	ldr	r2, [pc, #140]	@ (8003198 <HAL_InitTick+0xe4>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	0c9b      	lsrs	r3, r3, #18
 8003110:	3b01      	subs	r3, #1
 8003112:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8003114:	4b21      	ldr	r3, [pc, #132]	@ (800319c <HAL_InitTick+0xe8>)
 8003116:	4a22      	ldr	r2, [pc, #136]	@ (80031a0 <HAL_InitTick+0xec>)
 8003118:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800311a:	4b20      	ldr	r3, [pc, #128]	@ (800319c <HAL_InitTick+0xe8>)
 800311c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003120:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8003122:	4a1e      	ldr	r2, [pc, #120]	@ (800319c <HAL_InitTick+0xe8>)
 8003124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003126:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8003128:	4b1c      	ldr	r3, [pc, #112]	@ (800319c <HAL_InitTick+0xe8>)
 800312a:	2200      	movs	r2, #0
 800312c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800312e:	4b1b      	ldr	r3, [pc, #108]	@ (800319c <HAL_InitTick+0xe8>)
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003134:	4b19      	ldr	r3, [pc, #100]	@ (800319c <HAL_InitTick+0xe8>)
 8003136:	2200      	movs	r2, #0
 8003138:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800313a:	4818      	ldr	r0, [pc, #96]	@ (800319c <HAL_InitTick+0xe8>)
 800313c:	f001 ff1e 	bl	8004f7c <HAL_TIM_Base_Init>
 8003140:	4603      	mov	r3, r0
 8003142:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003146:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800314a:	2b00      	cmp	r3, #0
 800314c:	d11b      	bne.n	8003186 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800314e:	4813      	ldr	r0, [pc, #76]	@ (800319c <HAL_InitTick+0xe8>)
 8003150:	f001 ff76 	bl	8005040 <HAL_TIM_Base_Start_IT>
 8003154:	4603      	mov	r3, r0
 8003156:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800315a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800315e:	2b00      	cmp	r3, #0
 8003160:	d111      	bne.n	8003186 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003162:	2032      	movs	r0, #50	@ 0x32
 8003164:	f000 f99e 	bl	80034a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2b0f      	cmp	r3, #15
 800316c:	d808      	bhi.n	8003180 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800316e:	2200      	movs	r2, #0
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	2032      	movs	r0, #50	@ 0x32
 8003174:	f000 f97a 	bl	800346c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003178:	4a0a      	ldr	r2, [pc, #40]	@ (80031a4 <HAL_InitTick+0xf0>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e002      	b.n	8003186 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003186:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800318a:	4618      	mov	r0, r3
 800318c:	3738      	adds	r7, #56	@ 0x38
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	40021000 	.word	0x40021000
 8003198:	431bde83 	.word	0x431bde83
 800319c:	200002c0 	.word	0x200002c0
 80031a0:	40000c00 	.word	0x40000c00
 80031a4:	20000054 	.word	0x20000054

080031a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031ac:	bf00      	nop
 80031ae:	e7fd      	b.n	80031ac <NMI_Handler+0x4>

080031b0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031b0:	b480      	push	{r7}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031b4:	bf00      	nop
 80031b6:	e7fd      	b.n	80031b4 <HardFault_Handler+0x4>

080031b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031bc:	bf00      	nop
 80031be:	e7fd      	b.n	80031bc <MemManage_Handler+0x4>

080031c0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031c4:	bf00      	nop
 80031c6:	e7fd      	b.n	80031c4 <BusFault_Handler+0x4>

080031c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031c8:	b480      	push	{r7}
 80031ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031cc:	bf00      	nop
 80031ce:	e7fd      	b.n	80031cc <UsageFault_Handler+0x4>

080031d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031d4:	bf00      	nop
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80031e2:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80031e6:	f000 fb5f 	bl	80038a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
	...

080031f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80031f4:	4802      	ldr	r0, [pc, #8]	@ (8003200 <TIM5_IRQHandler+0x10>)
 80031f6:	f002 f987 	bl	8005508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80031fa:	bf00      	nop
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200002c0 	.word	0x200002c0

08003204 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003204:	b480      	push	{r7}
 8003206:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003208:	4b06      	ldr	r3, [pc, #24]	@ (8003224 <SystemInit+0x20>)
 800320a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800320e:	4a05      	ldr	r2, [pc, #20]	@ (8003224 <SystemInit+0x20>)
 8003210:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003214:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003218:	bf00      	nop
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003228:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003260 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800322c:	f7ff ffea 	bl	8003204 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003230:	480c      	ldr	r0, [pc, #48]	@ (8003264 <LoopForever+0x6>)
  ldr r1, =_edata
 8003232:	490d      	ldr	r1, [pc, #52]	@ (8003268 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003234:	4a0d      	ldr	r2, [pc, #52]	@ (800326c <LoopForever+0xe>)
  movs r3, #0
 8003236:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003238:	e002      	b.n	8003240 <LoopCopyDataInit>

0800323a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800323a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800323c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800323e:	3304      	adds	r3, #4

08003240 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003240:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003242:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003244:	d3f9      	bcc.n	800323a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003246:	4a0a      	ldr	r2, [pc, #40]	@ (8003270 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003248:	4c0a      	ldr	r4, [pc, #40]	@ (8003274 <LoopForever+0x16>)
  movs r3, #0
 800324a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800324c:	e001      	b.n	8003252 <LoopFillZerobss>

0800324e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800324e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003250:	3204      	adds	r2, #4

08003252 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003252:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003254:	d3fb      	bcc.n	800324e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003256:	f006 febf 	bl	8009fd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800325a:	f7fd fc5d 	bl	8000b18 <main>

0800325e <LoopForever>:

LoopForever:
    b LoopForever
 800325e:	e7fe      	b.n	800325e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003260:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003264:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003268:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800326c:	0800a234 	.word	0x0800a234
  ldr r2, =_sbss
 8003270:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8003274:	20001c18 	.word	0x20001c18

08003278 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003278:	e7fe      	b.n	8003278 <ADC1_2_IRQHandler>
	...

0800327c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003282:	2300      	movs	r3, #0
 8003284:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003286:	4b0c      	ldr	r3, [pc, #48]	@ (80032b8 <HAL_Init+0x3c>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a0b      	ldr	r2, [pc, #44]	@ (80032b8 <HAL_Init+0x3c>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003290:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003292:	2003      	movs	r0, #3
 8003294:	f000 f8df 	bl	8003456 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003298:	200f      	movs	r0, #15
 800329a:	f7ff ff0b 	bl	80030b4 <HAL_InitTick>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	71fb      	strb	r3, [r7, #7]
 80032a8:	e001      	b.n	80032ae <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032aa:	f7ff fd3d 	bl	8002d28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032ae:	79fb      	ldrb	r3, [r7, #7]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3708      	adds	r7, #8
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	40022000 	.word	0x40022000

080032bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80032c0:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <HAL_IncTick+0x20>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	461a      	mov	r2, r3
 80032c6:	4b06      	ldr	r3, [pc, #24]	@ (80032e0 <HAL_IncTick+0x24>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	4a04      	ldr	r2, [pc, #16]	@ (80032e0 <HAL_IncTick+0x24>)
 80032ce:	6013      	str	r3, [r2, #0]
}
 80032d0:	bf00      	nop
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr
 80032da:	bf00      	nop
 80032dc:	20000058 	.word	0x20000058
 80032e0:	2000030c 	.word	0x2000030c

080032e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return uwTick;
 80032e8:	4b03      	ldr	r3, [pc, #12]	@ (80032f8 <HAL_GetTick+0x14>)
 80032ea:	681b      	ldr	r3, [r3, #0]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	2000030c 	.word	0x2000030c

080032fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800330c:	4b0c      	ldr	r3, [pc, #48]	@ (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003324:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003328:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800332c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332e:	4a04      	ldr	r2, [pc, #16]	@ (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003348:	4b04      	ldr	r3, [pc, #16]	@ (800335c <__NVIC_GetPriorityGrouping+0x18>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0307 	and.w	r3, r3, #7
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db0b      	blt.n	800338a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	f003 021f 	and.w	r2, r3, #31
 8003378:	4907      	ldr	r1, [pc, #28]	@ (8003398 <__NVIC_EnableIRQ+0x38>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2001      	movs	r0, #1
 8003382:	fa00 f202 	lsl.w	r2, r0, r2
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000e100 	.word	0xe000e100

0800339c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db0a      	blt.n	80033c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	@ (80033e8 <__NVIC_SetPriority+0x4c>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	440b      	add	r3, r1
 80033c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c4:	e00a      	b.n	80033dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4908      	ldr	r1, [pc, #32]	@ (80033ec <__NVIC_SetPriority+0x50>)
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3b04      	subs	r3, #4
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	440b      	add	r3, r1
 80033da:	761a      	strb	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	@ 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f1c3 0307 	rsb	r3, r3, #7
 800340a:	2b04      	cmp	r3, #4
 800340c:	bf28      	it	cs
 800340e:	2304      	movcs	r3, #4
 8003410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3304      	adds	r3, #4
 8003416:	2b06      	cmp	r3, #6
 8003418:	d902      	bls.n	8003420 <NVIC_EncodePriority+0x30>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3b03      	subs	r3, #3
 800341e:	e000      	b.n	8003422 <NVIC_EncodePriority+0x32>
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	401a      	ands	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003438:	f04f 31ff 	mov.w	r1, #4294967295
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	43d9      	mvns	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	4313      	orrs	r3, r2
         );
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	@ 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b082      	sub	sp, #8
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f7ff ff4c 	bl	80032fc <__NVIC_SetPriorityGrouping>
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800347a:	2300      	movs	r3, #0
 800347c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800347e:	f7ff ff61 	bl	8003344 <__NVIC_GetPriorityGrouping>
 8003482:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	6978      	ldr	r0, [r7, #20]
 800348a:	f7ff ffb1 	bl	80033f0 <NVIC_EncodePriority>
 800348e:	4602      	mov	r2, r0
 8003490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003494:	4611      	mov	r1, r2
 8003496:	4618      	mov	r0, r3
 8003498:	f7ff ff80 	bl	800339c <__NVIC_SetPriority>
}
 800349c:	bf00      	nop
 800349e:	3718      	adds	r7, #24
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	4603      	mov	r3, r0
 80034ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff ff54 	bl	8003360 <__NVIC_EnableIRQ>
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b087      	sub	sp, #28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034ca:	2300      	movs	r3, #0
 80034cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034ce:	e17f      	b.n	80037d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	2101      	movs	r1, #1
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	4013      	ands	r3, r2
 80034de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8171 	beq.w	80037ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f003 0303 	and.w	r3, r3, #3
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d005      	beq.n	8003500 <HAL_GPIO_Init+0x40>
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d130      	bne.n	8003562 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	2203      	movs	r2, #3
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4013      	ands	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68da      	ldr	r2, [r3, #12]
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003536:	2201      	movs	r2, #1
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4013      	ands	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	091b      	lsrs	r3, r3, #4
 800354c:	f003 0201 	and.w	r2, r3, #1
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f003 0303 	and.w	r3, r3, #3
 800356a:	2b03      	cmp	r3, #3
 800356c:	d118      	bne.n	80035a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003572:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003574:	2201      	movs	r2, #1
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	4013      	ands	r3, r2
 8003582:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	08db      	lsrs	r3, r3, #3
 800358a:	f003 0201 	and.w	r2, r3, #1
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	4313      	orrs	r3, r2
 8003598:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	693a      	ldr	r2, [r7, #16]
 800359e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d017      	beq.n	80035dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	005b      	lsls	r3, r3, #1
 80035b6:	2203      	movs	r2, #3
 80035b8:	fa02 f303 	lsl.w	r3, r2, r3
 80035bc:	43db      	mvns	r3, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	005b      	lsls	r3, r3, #1
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	693a      	ldr	r2, [r7, #16]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f003 0303 	and.w	r3, r3, #3
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d123      	bne.n	8003630 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	08da      	lsrs	r2, r3, #3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	3208      	adds	r2, #8
 80035f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f003 0307 	and.w	r3, r3, #7
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	220f      	movs	r2, #15
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4013      	ands	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691a      	ldr	r2, [r3, #16]
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	693a      	ldr	r2, [r7, #16]
 800361e:	4313      	orrs	r3, r2
 8003620:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	08da      	lsrs	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3208      	adds	r2, #8
 800362a:	6939      	ldr	r1, [r7, #16]
 800362c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	005b      	lsls	r3, r3, #1
 800363a:	2203      	movs	r2, #3
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43db      	mvns	r3, r3
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4013      	ands	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0203 	and.w	r2, r3, #3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	4313      	orrs	r3, r2
 800365c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800366c:	2b00      	cmp	r3, #0
 800366e:	f000 80ac 	beq.w	80037ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003672:	4b5f      	ldr	r3, [pc, #380]	@ (80037f0 <HAL_GPIO_Init+0x330>)
 8003674:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003676:	4a5e      	ldr	r2, [pc, #376]	@ (80037f0 <HAL_GPIO_Init+0x330>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6613      	str	r3, [r2, #96]	@ 0x60
 800367e:	4b5c      	ldr	r3, [pc, #368]	@ (80037f0 <HAL_GPIO_Init+0x330>)
 8003680:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003682:	f003 0301 	and.w	r3, r3, #1
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800368a:	4a5a      	ldr	r2, [pc, #360]	@ (80037f4 <HAL_GPIO_Init+0x334>)
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	3302      	adds	r3, #2
 8003692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	f003 0303 	and.w	r3, r3, #3
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	fa02 f303 	lsl.w	r3, r2, r3
 80036a6:	43db      	mvns	r3, r3
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80036b4:	d025      	beq.n	8003702 <HAL_GPIO_Init+0x242>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a4f      	ldr	r2, [pc, #316]	@ (80037f8 <HAL_GPIO_Init+0x338>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01f      	beq.n	80036fe <HAL_GPIO_Init+0x23e>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4e      	ldr	r2, [pc, #312]	@ (80037fc <HAL_GPIO_Init+0x33c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d019      	beq.n	80036fa <HAL_GPIO_Init+0x23a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003800 <HAL_GPIO_Init+0x340>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <HAL_GPIO_Init+0x236>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a4c      	ldr	r2, [pc, #304]	@ (8003804 <HAL_GPIO_Init+0x344>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00d      	beq.n	80036f2 <HAL_GPIO_Init+0x232>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a4b      	ldr	r2, [pc, #300]	@ (8003808 <HAL_GPIO_Init+0x348>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <HAL_GPIO_Init+0x22e>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a4a      	ldr	r2, [pc, #296]	@ (800380c <HAL_GPIO_Init+0x34c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d101      	bne.n	80036ea <HAL_GPIO_Init+0x22a>
 80036e6:	2306      	movs	r3, #6
 80036e8:	e00c      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036ea:	2307      	movs	r3, #7
 80036ec:	e00a      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036ee:	2305      	movs	r3, #5
 80036f0:	e008      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036f2:	2304      	movs	r3, #4
 80036f4:	e006      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036f6:	2303      	movs	r3, #3
 80036f8:	e004      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036fa:	2302      	movs	r3, #2
 80036fc:	e002      	b.n	8003704 <HAL_GPIO_Init+0x244>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <HAL_GPIO_Init+0x244>
 8003702:	2300      	movs	r3, #0
 8003704:	697a      	ldr	r2, [r7, #20]
 8003706:	f002 0203 	and.w	r2, r2, #3
 800370a:	0092      	lsls	r2, r2, #2
 800370c:	4093      	lsls	r3, r2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003714:	4937      	ldr	r1, [pc, #220]	@ (80037f4 <HAL_GPIO_Init+0x334>)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3302      	adds	r3, #2
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003722:	4b3b      	ldr	r3, [pc, #236]	@ (8003810 <HAL_GPIO_Init+0x350>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	43db      	mvns	r3, r3
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	4013      	ands	r3, r2
 8003730:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003746:	4a32      	ldr	r2, [pc, #200]	@ (8003810 <HAL_GPIO_Init+0x350>)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800374c:	4b30      	ldr	r3, [pc, #192]	@ (8003810 <HAL_GPIO_Init+0x350>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003770:	4a27      	ldr	r2, [pc, #156]	@ (8003810 <HAL_GPIO_Init+0x350>)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003776:	4b26      	ldr	r3, [pc, #152]	@ (8003810 <HAL_GPIO_Init+0x350>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800379a:	4a1d      	ldr	r2, [pc, #116]	@ (8003810 <HAL_GPIO_Init+0x350>)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003810 <HAL_GPIO_Init+0x350>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037c4:	4a12      	ldr	r2, [pc, #72]	@ (8003810 <HAL_GPIO_Init+0x350>)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	3301      	adds	r3, #1
 80037ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa22 f303 	lsr.w	r3, r2, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f47f ae78 	bne.w	80034d0 <HAL_GPIO_Init+0x10>
  }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	40021000 	.word	0x40021000
 80037f4:	40010000 	.word	0x40010000
 80037f8:	48000400 	.word	0x48000400
 80037fc:	48000800 	.word	0x48000800
 8003800:	48000c00 	.word	0x48000c00
 8003804:	48001000 	.word	0x48001000
 8003808:	48001400 	.word	0x48001400
 800380c:	48001800 	.word	0x48001800
 8003810:	40010400 	.word	0x40010400

08003814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	460b      	mov	r3, r1
 800381e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d002      	beq.n	8003832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800382c:	2301      	movs	r3, #1
 800382e:	73fb      	strb	r3, [r7, #15]
 8003830:	e001      	b.n	8003836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003836:	7bfb      	ldrb	r3, [r7, #15]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	807b      	strh	r3, [r7, #2]
 8003850:	4613      	mov	r3, r2
 8003852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003854:	787b      	ldrb	r3, [r7, #1]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800385a:	887a      	ldrh	r2, [r7, #2]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003860:	e002      	b.n	8003868 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003862:	887a      	ldrh	r2, [r7, #2]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003868:	bf00      	nop
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	4013      	ands	r3, r2
 800388c:	041a      	lsls	r2, r3, #16
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	43d9      	mvns	r1, r3
 8003892:	887b      	ldrh	r3, [r7, #2]
 8003894:	400b      	ands	r3, r1
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	619a      	str	r2, [r3, #24]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038b2:	4b08      	ldr	r3, [pc, #32]	@ (80038d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038b4:	695a      	ldr	r2, [r3, #20]
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	4013      	ands	r3, r2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d006      	beq.n	80038cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038be:	4a05      	ldr	r2, [pc, #20]	@ (80038d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fcea 	bl	80022a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80038cc:	bf00      	nop
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	40010400 	.word	0x40010400

080038d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80038dc:	4b04      	ldr	r3, [pc, #16]	@ (80038f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	40007000 	.word	0x40007000

080038f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003902:	d130      	bne.n	8003966 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003904:	4b23      	ldr	r3, [pc, #140]	@ (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800390c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003910:	d038      	beq.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003912:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800391a:	4a1e      	ldr	r2, [pc, #120]	@ (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800391c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003920:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003922:	4b1d      	ldr	r3, [pc, #116]	@ (8003998 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2232      	movs	r2, #50	@ 0x32
 8003928:	fb02 f303 	mul.w	r3, r2, r3
 800392c:	4a1b      	ldr	r2, [pc, #108]	@ (800399c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800392e:	fba2 2303 	umull	r2, r3, r2, r3
 8003932:	0c9b      	lsrs	r3, r3, #18
 8003934:	3301      	adds	r3, #1
 8003936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003938:	e002      	b.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	3b01      	subs	r3, #1
 800393e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003940:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003942:	695b      	ldr	r3, [r3, #20]
 8003944:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003948:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800394c:	d102      	bne.n	8003954 <HAL_PWREx_ControlVoltageScaling+0x60>
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1f2      	bne.n	800393a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003954:	4b0f      	ldr	r3, [pc, #60]	@ (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003956:	695b      	ldr	r3, [r3, #20]
 8003958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003960:	d110      	bne.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e00f      	b.n	8003986 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003966:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003972:	d007      	beq.n	8003984 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003974:	4b07      	ldr	r3, [pc, #28]	@ (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800397c:	4a05      	ldr	r2, [pc, #20]	@ (8003994 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800397e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003982:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3714      	adds	r7, #20
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	40007000 	.word	0x40007000
 8003998:	20000050 	.word	0x20000050
 800399c:	431bde83 	.word	0x431bde83

080039a0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e3ca      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039b2:	4b97      	ldr	r3, [pc, #604]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f003 030c 	and.w	r3, r3, #12
 80039ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039bc:	4b94      	ldr	r3, [pc, #592]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0310 	and.w	r3, r3, #16
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	f000 80e4 	beq.w	8003b9c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d007      	beq.n	80039ea <HAL_RCC_OscConfig+0x4a>
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2b0c      	cmp	r3, #12
 80039de:	f040 808b 	bne.w	8003af8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f040 8087 	bne.w	8003af8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80039ea:	4b89      	ldr	r3, [pc, #548]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_RCC_OscConfig+0x62>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e3a2      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a1a      	ldr	r2, [r3, #32]
 8003a06:	4b82      	ldr	r3, [pc, #520]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0308 	and.w	r3, r3, #8
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d004      	beq.n	8003a1c <HAL_RCC_OscConfig+0x7c>
 8003a12:	4b7f      	ldr	r3, [pc, #508]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a1a:	e005      	b.n	8003a28 <HAL_RCC_OscConfig+0x88>
 8003a1c:	4b7c      	ldr	r3, [pc, #496]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d223      	bcs.n	8003a74 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 fd87 	bl	8004544 <RCC_SetFlashLatencyFromMSIRange>
 8003a36:	4603      	mov	r3, r0
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e383      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a40:	4b73      	ldr	r3, [pc, #460]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a72      	ldr	r2, [pc, #456]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a46:	f043 0308 	orr.w	r3, r3, #8
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b70      	ldr	r3, [pc, #448]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	496d      	ldr	r1, [pc, #436]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a5e:	4b6c      	ldr	r3, [pc, #432]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	021b      	lsls	r3, r3, #8
 8003a6c:	4968      	ldr	r1, [pc, #416]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	604b      	str	r3, [r1, #4]
 8003a72:	e025      	b.n	8003ac0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a74:	4b66      	ldr	r3, [pc, #408]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a65      	ldr	r2, [pc, #404]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a7a:	f043 0308 	orr.w	r3, r3, #8
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	4b63      	ldr	r3, [pc, #396]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4960      	ldr	r1, [pc, #384]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003a92:	4b5f      	ldr	r3, [pc, #380]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69db      	ldr	r3, [r3, #28]
 8003a9e:	021b      	lsls	r3, r3, #8
 8003aa0:	495b      	ldr	r1, [pc, #364]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d109      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 fd47 	bl	8004544 <RCC_SetFlashLatencyFromMSIRange>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e343      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ac0:	f000 fc4a 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4b52      	ldr	r3, [pc, #328]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	091b      	lsrs	r3, r3, #4
 8003acc:	f003 030f 	and.w	r3, r3, #15
 8003ad0:	4950      	ldr	r1, [pc, #320]	@ (8003c14 <HAL_RCC_OscConfig+0x274>)
 8003ad2:	5ccb      	ldrb	r3, [r1, r3]
 8003ad4:	f003 031f 	and.w	r3, r3, #31
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	4a4e      	ldr	r2, [pc, #312]	@ (8003c18 <HAL_RCC_OscConfig+0x278>)
 8003ade:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ae0:	4b4e      	ldr	r3, [pc, #312]	@ (8003c1c <HAL_RCC_OscConfig+0x27c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff fae5 	bl	80030b4 <HAL_InitTick>
 8003aea:	4603      	mov	r3, r0
 8003aec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d052      	beq.n	8003b9a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	e327      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d032      	beq.n	8003b66 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b00:	4b43      	ldr	r3, [pc, #268]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a42      	ldr	r2, [pc, #264]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b06:	f043 0301 	orr.w	r3, r3, #1
 8003b0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b0c:	f7ff fbea 	bl	80032e4 <HAL_GetTick>
 8003b10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b12:	e008      	b.n	8003b26 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b14:	f7ff fbe6 	bl	80032e4 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e310      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b26:	4b3a      	ldr	r3, [pc, #232]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0f0      	beq.n	8003b14 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b32:	4b37      	ldr	r3, [pc, #220]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a36      	ldr	r2, [pc, #216]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b38:	f043 0308 	orr.w	r3, r3, #8
 8003b3c:	6013      	str	r3, [r2, #0]
 8003b3e:	4b34      	ldr	r3, [pc, #208]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4931      	ldr	r1, [pc, #196]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b50:	4b2f      	ldr	r3, [pc, #188]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	021b      	lsls	r3, r3, #8
 8003b5e:	492c      	ldr	r1, [pc, #176]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	604b      	str	r3, [r1, #4]
 8003b64:	e01a      	b.n	8003b9c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003b66:	4b2a      	ldr	r3, [pc, #168]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a29      	ldr	r2, [pc, #164]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b6c:	f023 0301 	bic.w	r3, r3, #1
 8003b70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b72:	f7ff fbb7 	bl	80032e4 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b7a:	f7ff fbb3 	bl	80032e4 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e2dd      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003b8c:	4b20      	ldr	r3, [pc, #128]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x1da>
 8003b98:	e000      	b.n	8003b9c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d074      	beq.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ba8:	69bb      	ldr	r3, [r7, #24]
 8003baa:	2b08      	cmp	r3, #8
 8003bac:	d005      	beq.n	8003bba <HAL_RCC_OscConfig+0x21a>
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b0c      	cmp	r3, #12
 8003bb2:	d10e      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d10b      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bba:	4b15      	ldr	r3, [pc, #84]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d064      	beq.n	8003c90 <HAL_RCC_OscConfig+0x2f0>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d160      	bne.n	8003c90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e2ba      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bda:	d106      	bne.n	8003bea <HAL_RCC_OscConfig+0x24a>
 8003bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a0b      	ldr	r2, [pc, #44]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	e026      	b.n	8003c38 <HAL_RCC_OscConfig+0x298>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003bf2:	d115      	bne.n	8003c20 <HAL_RCC_OscConfig+0x280>
 8003bf4:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a05      	ldr	r2, [pc, #20]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003bfa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003bfe:	6013      	str	r3, [r2, #0]
 8003c00:	4b03      	ldr	r3, [pc, #12]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a02      	ldr	r2, [pc, #8]	@ (8003c10 <HAL_RCC_OscConfig+0x270>)
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c0a:	6013      	str	r3, [r2, #0]
 8003c0c:	e014      	b.n	8003c38 <HAL_RCC_OscConfig+0x298>
 8003c0e:	bf00      	nop
 8003c10:	40021000 	.word	0x40021000
 8003c14:	0800a1dc 	.word	0x0800a1dc
 8003c18:	20000050 	.word	0x20000050
 8003c1c:	20000054 	.word	0x20000054
 8003c20:	4ba0      	ldr	r3, [pc, #640]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a9f      	ldr	r2, [pc, #636]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c2a:	6013      	str	r3, [r2, #0]
 8003c2c:	4b9d      	ldr	r3, [pc, #628]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a9c      	ldr	r2, [pc, #624]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d013      	beq.n	8003c68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c40:	f7ff fb50 	bl	80032e4 <HAL_GetTick>
 8003c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c46:	e008      	b.n	8003c5a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c48:	f7ff fb4c 	bl	80032e4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	2b64      	cmp	r3, #100	@ 0x64
 8003c54:	d901      	bls.n	8003c5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e276      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c5a:	4b92      	ldr	r3, [pc, #584]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d0f0      	beq.n	8003c48 <HAL_RCC_OscConfig+0x2a8>
 8003c66:	e014      	b.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c68:	f7ff fb3c 	bl	80032e4 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c70:	f7ff fb38 	bl	80032e4 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b64      	cmp	r3, #100	@ 0x64
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e262      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c82:	4b88      	ldr	r3, [pc, #544]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1f0      	bne.n	8003c70 <HAL_RCC_OscConfig+0x2d0>
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0302 	and.w	r3, r3, #2
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d060      	beq.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d005      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x310>
 8003ca4:	69bb      	ldr	r3, [r7, #24]
 8003ca6:	2b0c      	cmp	r3, #12
 8003ca8:	d119      	bne.n	8003cde <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d116      	bne.n	8003cde <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cb0:	4b7c      	ldr	r3, [pc, #496]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d005      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x328>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d101      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e23f      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4b76      	ldr	r3, [pc, #472]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	061b      	lsls	r3, r3, #24
 8003cd6:	4973      	ldr	r1, [pc, #460]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cdc:	e040      	b.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d023      	beq.n	8003d2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ce6:	4b6f      	ldr	r3, [pc, #444]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a6e      	ldr	r2, [pc, #440]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003cec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf2:	f7ff faf7 	bl	80032e4 <HAL_GetTick>
 8003cf6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf8:	e008      	b.n	8003d0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cfa:	f7ff faf3 	bl	80032e4 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	1ad3      	subs	r3, r2, r3
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d901      	bls.n	8003d0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d08:	2303      	movs	r3, #3
 8003d0a:	e21d      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0c:	4b65      	ldr	r3, [pc, #404]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d0f0      	beq.n	8003cfa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d18:	4b62      	ldr	r3, [pc, #392]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	061b      	lsls	r3, r3, #24
 8003d26:	495f      	ldr	r1, [pc, #380]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	604b      	str	r3, [r1, #4]
 8003d2c:	e018      	b.n	8003d60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d2e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a5c      	ldr	r2, [pc, #368]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d34:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7ff fad3 	bl	80032e4 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d42:	f7ff facf 	bl	80032e4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e1f9      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d54:	4b53      	ldr	r3, [pc, #332]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1f0      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d03c      	beq.n	8003de6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01c      	beq.n	8003dae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d74:	4b4b      	ldr	r3, [pc, #300]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d7a:	4a4a      	ldr	r2, [pc, #296]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d84:	f7ff faae 	bl	80032e4 <HAL_GetTick>
 8003d88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d8a:	e008      	b.n	8003d9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8c:	f7ff faaa 	bl	80032e4 <HAL_GetTick>
 8003d90:	4602      	mov	r2, r0
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	1ad3      	subs	r3, r2, r3
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d901      	bls.n	8003d9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	e1d4      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003d9e:	4b41      	ldr	r3, [pc, #260]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003da0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d0ef      	beq.n	8003d8c <HAL_RCC_OscConfig+0x3ec>
 8003dac:	e01b      	b.n	8003de6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dae:	4b3d      	ldr	r3, [pc, #244]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003db4:	4a3b      	ldr	r2, [pc, #236]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003db6:	f023 0301 	bic.w	r3, r3, #1
 8003dba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dbe:	f7ff fa91 	bl	80032e4 <HAL_GetTick>
 8003dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dc4:	e008      	b.n	8003dd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dc6:	f7ff fa8d 	bl	80032e4 <HAL_GetTick>
 8003dca:	4602      	mov	r2, r0
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d901      	bls.n	8003dd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e1b7      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003dd8:	4b32      	ldr	r3, [pc, #200]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d1ef      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0304 	and.w	r3, r3, #4
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80a6 	beq.w	8003f40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df4:	2300      	movs	r3, #0
 8003df6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003df8:	4b2a      	ldr	r3, [pc, #168]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003dfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dfc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d10d      	bne.n	8003e20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e04:	4b27      	ldr	r3, [pc, #156]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e08:	4a26      	ldr	r2, [pc, #152]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e10:	4b24      	ldr	r3, [pc, #144]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e18:	60bb      	str	r3, [r7, #8]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e20:	4b21      	ldr	r3, [pc, #132]	@ (8003ea8 <HAL_RCC_OscConfig+0x508>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d118      	bne.n	8003e5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e2c:	4b1e      	ldr	r3, [pc, #120]	@ (8003ea8 <HAL_RCC_OscConfig+0x508>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1d      	ldr	r2, [pc, #116]	@ (8003ea8 <HAL_RCC_OscConfig+0x508>)
 8003e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e38:	f7ff fa54 	bl	80032e4 <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e40:	f7ff fa50 	bl	80032e4 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e17a      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e52:	4b15      	ldr	r3, [pc, #84]	@ (8003ea8 <HAL_RCC_OscConfig+0x508>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d108      	bne.n	8003e78 <HAL_RCC_OscConfig+0x4d8>
 8003e66:	4b0f      	ldr	r3, [pc, #60]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e76:	e029      	b.n	8003ecc <HAL_RCC_OscConfig+0x52c>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	2b05      	cmp	r3, #5
 8003e7e:	d115      	bne.n	8003eac <HAL_RCC_OscConfig+0x50c>
 8003e80:	4b08      	ldr	r3, [pc, #32]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e86:	4a07      	ldr	r2, [pc, #28]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003e90:	4b04      	ldr	r3, [pc, #16]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e96:	4a03      	ldr	r2, [pc, #12]	@ (8003ea4 <HAL_RCC_OscConfig+0x504>)
 8003e98:	f043 0301 	orr.w	r3, r3, #1
 8003e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ea0:	e014      	b.n	8003ecc <HAL_RCC_OscConfig+0x52c>
 8003ea2:	bf00      	nop
 8003ea4:	40021000 	.word	0x40021000
 8003ea8:	40007000 	.word	0x40007000
 8003eac:	4b9c      	ldr	r3, [pc, #624]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb2:	4a9b      	ldr	r2, [pc, #620]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003eb4:	f023 0301 	bic.w	r3, r3, #1
 8003eb8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ebc:	4b98      	ldr	r3, [pc, #608]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec2:	4a97      	ldr	r2, [pc, #604]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003ec4:	f023 0304 	bic.w	r3, r3, #4
 8003ec8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d016      	beq.n	8003f02 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed4:	f7ff fa06 	bl	80032e4 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7ff fa02 	bl	80032e4 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e12a      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ef2:	4b8b      	ldr	r3, [pc, #556]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0ed      	beq.n	8003edc <HAL_RCC_OscConfig+0x53c>
 8003f00:	e015      	b.n	8003f2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7ff f9ef 	bl	80032e4 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f08:	e00a      	b.n	8003f20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f0a:	f7ff f9eb 	bl	80032e4 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e113      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f20:	4b7f      	ldr	r3, [pc, #508]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1ed      	bne.n	8003f0a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f2e:	7ffb      	ldrb	r3, [r7, #31]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d105      	bne.n	8003f40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f34:	4b7a      	ldr	r3, [pc, #488]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003f36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f38:	4a79      	ldr	r2, [pc, #484]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003f3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f3e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 80fe 	beq.w	8004146 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	f040 80d0 	bne.w	80040f4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f54:	4b72      	ldr	r3, [pc, #456]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f003 0203 	and.w	r2, r3, #3
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d130      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	3b01      	subs	r3, #1
 8003f74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d127      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d11f      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003f94:	2a07      	cmp	r2, #7
 8003f96:	bf14      	ite	ne
 8003f98:	2201      	movne	r2, #1
 8003f9a:	2200      	moveq	r2, #0
 8003f9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d113      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d109      	bne.n	8003fca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fc0:	085b      	lsrs	r3, r3, #1
 8003fc2:	3b01      	subs	r3, #1
 8003fc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d06e      	beq.n	80040a8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003fca:	69bb      	ldr	r3, [r7, #24]
 8003fcc:	2b0c      	cmp	r3, #12
 8003fce:	d069      	beq.n	80040a4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003fd0:	4b53      	ldr	r3, [pc, #332]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003fdc:	4b50      	ldr	r3, [pc, #320]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0ad      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003fec:	4b4c      	ldr	r3, [pc, #304]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a4b      	ldr	r2, [pc, #300]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8003ff2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ff6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ff8:	f7ff f974 	bl	80032e4 <HAL_GetTick>
 8003ffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ffe:	e008      	b.n	8004012 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004000:	f7ff f970 	bl	80032e4 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	2b02      	cmp	r3, #2
 800400c:	d901      	bls.n	8004012 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e09a      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004012:	4b43      	ldr	r3, [pc, #268]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f0      	bne.n	8004000 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800401e:	4b40      	ldr	r3, [pc, #256]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	4b40      	ldr	r3, [pc, #256]	@ (8004124 <HAL_RCC_OscConfig+0x784>)
 8004024:	4013      	ands	r3, r2
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800402e:	3a01      	subs	r2, #1
 8004030:	0112      	lsls	r2, r2, #4
 8004032:	4311      	orrs	r1, r2
 8004034:	687a      	ldr	r2, [r7, #4]
 8004036:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004038:	0212      	lsls	r2, r2, #8
 800403a:	4311      	orrs	r1, r2
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004040:	0852      	lsrs	r2, r2, #1
 8004042:	3a01      	subs	r2, #1
 8004044:	0552      	lsls	r2, r2, #21
 8004046:	4311      	orrs	r1, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800404c:	0852      	lsrs	r2, r2, #1
 800404e:	3a01      	subs	r2, #1
 8004050:	0652      	lsls	r2, r2, #25
 8004052:	4311      	orrs	r1, r2
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004058:	0912      	lsrs	r2, r2, #4
 800405a:	0452      	lsls	r2, r2, #17
 800405c:	430a      	orrs	r2, r1
 800405e:	4930      	ldr	r1, [pc, #192]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8004060:	4313      	orrs	r3, r2
 8004062:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004064:	4b2e      	ldr	r3, [pc, #184]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a2d      	ldr	r2, [pc, #180]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 800406a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800406e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004070:	4b2b      	ldr	r3, [pc, #172]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	4a2a      	ldr	r2, [pc, #168]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8004076:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800407a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800407c:	f7ff f932 	bl	80032e4 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004084:	f7ff f92e 	bl	80032e4 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e058      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004096:	4b22      	ldr	r3, [pc, #136]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d0f0      	beq.n	8004084 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040a2:	e050      	b.n	8004146 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e04f      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040a8:	4b1d      	ldr	r3, [pc, #116]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d148      	bne.n	8004146 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a19      	ldr	r2, [pc, #100]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 80040ba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040c0:	4b17      	ldr	r3, [pc, #92]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a16      	ldr	r2, [pc, #88]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040cc:	f7ff f90a 	bl	80032e4 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d4:	f7ff f906 	bl	80032e4 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e030      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0x734>
 80040f2:	e028      	b.n	8004146 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040f4:	69bb      	ldr	r3, [r7, #24]
 80040f6:	2b0c      	cmp	r3, #12
 80040f8:	d023      	beq.n	8004142 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b09      	ldr	r3, [pc, #36]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a08      	ldr	r2, [pc, #32]	@ (8004120 <HAL_RCC_OscConfig+0x780>)
 8004100:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004106:	f7ff f8ed 	bl	80032e4 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800410c:	e00c      	b.n	8004128 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410e:	f7ff f8e9 	bl	80032e4 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d905      	bls.n	8004128 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e013      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
 8004120:	40021000 	.word	0x40021000
 8004124:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004128:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <HAL_RCC_OscConfig+0x7b0>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1ec      	bne.n	800410e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004134:	4b06      	ldr	r3, [pc, #24]	@ (8004150 <HAL_RCC_OscConfig+0x7b0>)
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	4905      	ldr	r1, [pc, #20]	@ (8004150 <HAL_RCC_OscConfig+0x7b0>)
 800413a:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <HAL_RCC_OscConfig+0x7b4>)
 800413c:	4013      	ands	r3, r2
 800413e:	60cb      	str	r3, [r1, #12]
 8004140:	e001      	b.n	8004146 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3720      	adds	r7, #32
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	40021000 	.word	0x40021000
 8004154:	feeefffc 	.word	0xfeeefffc

08004158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e0e7      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800416c:	4b75      	ldr	r3, [pc, #468]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0307 	and.w	r3, r3, #7
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	429a      	cmp	r2, r3
 8004178:	d910      	bls.n	800419c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800417a:	4b72      	ldr	r3, [pc, #456]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f023 0207 	bic.w	r2, r3, #7
 8004182:	4970      	ldr	r1, [pc, #448]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	4313      	orrs	r3, r2
 8004188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800418a:	4b6e      	ldr	r3, [pc, #440]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	d001      	beq.n	800419c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0cf      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689a      	ldr	r2, [r3, #8]
 80041ac:	4b66      	ldr	r3, [pc, #408]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d908      	bls.n	80041ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041b8:	4b63      	ldr	r3, [pc, #396]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4960      	ldr	r1, [pc, #384]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d04c      	beq.n	8004270 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d107      	bne.n	80041ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041de:	4b5a      	ldr	r3, [pc, #360]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d121      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e0a6      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	2b02      	cmp	r3, #2
 80041f4:	d107      	bne.n	8004206 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f6:	4b54      	ldr	r3, [pc, #336]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d115      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e09a      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d107      	bne.n	800421e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800420e:	4b4e      	ldr	r3, [pc, #312]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d109      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e08e      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800421e:	4b4a      	ldr	r3, [pc, #296]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004226:	2b00      	cmp	r3, #0
 8004228:	d101      	bne.n	800422e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e086      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800422e:	4b46      	ldr	r3, [pc, #280]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f023 0203 	bic.w	r2, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	4943      	ldr	r1, [pc, #268]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004240:	f7ff f850 	bl	80032e4 <HAL_GetTick>
 8004244:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004246:	e00a      	b.n	800425e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004248:	f7ff f84c 	bl	80032e4 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004256:	4293      	cmp	r3, r2
 8004258:	d901      	bls.n	800425e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e06e      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425e:	4b3a      	ldr	r3, [pc, #232]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 020c 	and.w	r2, r3, #12
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	429a      	cmp	r2, r3
 800426e:	d1eb      	bne.n	8004248 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	2b00      	cmp	r3, #0
 800427a:	d010      	beq.n	800429e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	4b31      	ldr	r3, [pc, #196]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004288:	429a      	cmp	r2, r3
 800428a:	d208      	bcs.n	800429e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800428c:	4b2e      	ldr	r3, [pc, #184]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	492b      	ldr	r1, [pc, #172]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800429e:	4b29      	ldr	r3, [pc, #164]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	683a      	ldr	r2, [r7, #0]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d210      	bcs.n	80042ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042ac:	4b25      	ldr	r3, [pc, #148]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f023 0207 	bic.w	r2, r3, #7
 80042b4:	4923      	ldr	r1, [pc, #140]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042bc:	4b21      	ldr	r3, [pc, #132]	@ (8004344 <HAL_RCC_ClockConfig+0x1ec>)
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d001      	beq.n	80042ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e036      	b.n	800433c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042da:	4b1b      	ldr	r3, [pc, #108]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	4918      	ldr	r1, [pc, #96]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0308 	and.w	r3, r3, #8
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042f8:	4b13      	ldr	r3, [pc, #76]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4910      	ldr	r1, [pc, #64]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004308:	4313      	orrs	r3, r2
 800430a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800430c:	f000 f824 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 8004310:	4602      	mov	r2, r0
 8004312:	4b0d      	ldr	r3, [pc, #52]	@ (8004348 <HAL_RCC_ClockConfig+0x1f0>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	f003 030f 	and.w	r3, r3, #15
 800431c:	490b      	ldr	r1, [pc, #44]	@ (800434c <HAL_RCC_ClockConfig+0x1f4>)
 800431e:	5ccb      	ldrb	r3, [r1, r3]
 8004320:	f003 031f 	and.w	r3, r3, #31
 8004324:	fa22 f303 	lsr.w	r3, r2, r3
 8004328:	4a09      	ldr	r2, [pc, #36]	@ (8004350 <HAL_RCC_ClockConfig+0x1f8>)
 800432a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800432c:	4b09      	ldr	r3, [pc, #36]	@ (8004354 <HAL_RCC_ClockConfig+0x1fc>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7fe febf 	bl	80030b4 <HAL_InitTick>
 8004336:	4603      	mov	r3, r0
 8004338:	72fb      	strb	r3, [r7, #11]

  return status;
 800433a:	7afb      	ldrb	r3, [r7, #11]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}
 8004344:	40022000 	.word	0x40022000
 8004348:	40021000 	.word	0x40021000
 800434c:	0800a1dc 	.word	0x0800a1dc
 8004350:	20000050 	.word	0x20000050
 8004354:	20000054 	.word	0x20000054

08004358 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004358:	b480      	push	{r7}
 800435a:	b089      	sub	sp, #36	@ 0x24
 800435c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800435e:	2300      	movs	r3, #0
 8004360:	61fb      	str	r3, [r7, #28]
 8004362:	2300      	movs	r3, #0
 8004364:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004366:	4b3e      	ldr	r3, [pc, #248]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
 800436e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004370:	4b3b      	ldr	r3, [pc, #236]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0303 	and.w	r3, r3, #3
 8004378:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_GetSysClockFreq+0x34>
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	2b0c      	cmp	r3, #12
 8004384:	d121      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d11e      	bne.n	80043ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800438c:	4b34      	ldr	r3, [pc, #208]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d107      	bne.n	80043a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004398:	4b31      	ldr	r3, [pc, #196]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 800439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	e005      	b.n	80043b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	091b      	lsrs	r3, r3, #4
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004464 <HAL_RCC_GetSysClockFreq+0x10c>)
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10d      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043c8:	e00a      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	d102      	bne.n	80043d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80043d0:	4b25      	ldr	r3, [pc, #148]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x110>)
 80043d2:	61bb      	str	r3, [r7, #24]
 80043d4:	e004      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d101      	bne.n	80043e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80043dc:	4b23      	ldr	r3, [pc, #140]	@ (800446c <HAL_RCC_GetSysClockFreq+0x114>)
 80043de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b0c      	cmp	r3, #12
 80043e4:	d134      	bne.n	8004450 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80043e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f003 0303 	and.w	r3, r3, #3
 80043ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d003      	beq.n	80043fe <HAL_RCC_GetSysClockFreq+0xa6>
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	2b03      	cmp	r3, #3
 80043fa:	d003      	beq.n	8004404 <HAL_RCC_GetSysClockFreq+0xac>
 80043fc:	e005      	b.n	800440a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80043fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004468 <HAL_RCC_GetSysClockFreq+0x110>)
 8004400:	617b      	str	r3, [r7, #20]
      break;
 8004402:	e005      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004404:	4b19      	ldr	r3, [pc, #100]	@ (800446c <HAL_RCC_GetSysClockFreq+0x114>)
 8004406:	617b      	str	r3, [r7, #20]
      break;
 8004408:	e002      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800440a:	69fb      	ldr	r3, [r7, #28]
 800440c:	617b      	str	r3, [r7, #20]
      break;
 800440e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004410:	4b13      	ldr	r3, [pc, #76]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 0307 	and.w	r3, r3, #7
 800441a:	3301      	adds	r3, #1
 800441c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800441e:	4b10      	ldr	r3, [pc, #64]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	0a1b      	lsrs	r3, r3, #8
 8004424:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004428:	697a      	ldr	r2, [r7, #20]
 800442a:	fb03 f202 	mul.w	r2, r3, r2
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004436:	4b0a      	ldr	r3, [pc, #40]	@ (8004460 <HAL_RCC_GetSysClockFreq+0x108>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	0e5b      	lsrs	r3, r3, #25
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	3301      	adds	r3, #1
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	fbb2 f3f3 	udiv	r3, r2, r3
 800444e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004450:	69bb      	ldr	r3, [r7, #24]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3724      	adds	r7, #36	@ 0x24
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000
 8004464:	0800a1f4 	.word	0x0800a1f4
 8004468:	00f42400 	.word	0x00f42400
 800446c:	007a1200 	.word	0x007a1200

08004470 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004470:	b480      	push	{r7}
 8004472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004474:	4b03      	ldr	r3, [pc, #12]	@ (8004484 <HAL_RCC_GetHCLKFreq+0x14>)
 8004476:	681b      	ldr	r3, [r3, #0]
}
 8004478:	4618      	mov	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000050 	.word	0x20000050

08004488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800448c:	f7ff fff0 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b06      	ldr	r3, [pc, #24]	@ (80044ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0a1b      	lsrs	r3, r3, #8
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4904      	ldr	r1, [pc, #16]	@ (80044b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	f003 031f 	and.w	r3, r3, #31
 80044a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	0800a1ec 	.word	0x0800a1ec

080044b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80044b8:	f7ff ffda 	bl	8004470 <HAL_RCC_GetHCLKFreq>
 80044bc:	4602      	mov	r2, r0
 80044be:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	0adb      	lsrs	r3, r3, #11
 80044c4:	f003 0307 	and.w	r3, r3, #7
 80044c8:	4904      	ldr	r1, [pc, #16]	@ (80044dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80044ca:	5ccb      	ldrb	r3, [r1, r3]
 80044cc:	f003 031f 	and.w	r3, r3, #31
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000
 80044dc:	0800a1ec 	.word	0x0800a1ec

080044e0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	220f      	movs	r2, #15
 80044ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80044f0:	4b12      	ldr	r3, [pc, #72]	@ (800453c <HAL_RCC_GetClockConfig+0x5c>)
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f003 0203 	and.w	r2, r3, #3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80044fc:	4b0f      	ldr	r3, [pc, #60]	@ (800453c <HAL_RCC_GetClockConfig+0x5c>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004508:	4b0c      	ldr	r3, [pc, #48]	@ (800453c <HAL_RCC_GetClockConfig+0x5c>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004514:	4b09      	ldr	r3, [pc, #36]	@ (800453c <HAL_RCC_GetClockConfig+0x5c>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	08db      	lsrs	r3, r3, #3
 800451a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004522:	4b07      	ldr	r3, [pc, #28]	@ (8004540 <HAL_RCC_GetClockConfig+0x60>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0207 	and.w	r2, r3, #7
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	601a      	str	r2, [r3, #0]
}
 800452e:	bf00      	nop
 8004530:	370c      	adds	r7, #12
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop
 800453c:	40021000 	.word	0x40021000
 8004540:	40022000 	.word	0x40022000

08004544 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800454c:	2300      	movs	r3, #0
 800454e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004550:	4b2a      	ldr	r3, [pc, #168]	@ (80045fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800455c:	f7ff f9bc 	bl	80038d8 <HAL_PWREx_GetVoltageRange>
 8004560:	6178      	str	r0, [r7, #20]
 8004562:	e014      	b.n	800458e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004564:	4b25      	ldr	r3, [pc, #148]	@ (80045fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004566:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004568:	4a24      	ldr	r2, [pc, #144]	@ (80045fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800456e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004570:	4b22      	ldr	r3, [pc, #136]	@ (80045fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800457c:	f7ff f9ac 	bl	80038d8 <HAL_PWREx_GetVoltageRange>
 8004580:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004582:	4b1e      	ldr	r3, [pc, #120]	@ (80045fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004584:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004586:	4a1d      	ldr	r2, [pc, #116]	@ (80045fc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004588:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800458c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004594:	d10b      	bne.n	80045ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2b80      	cmp	r3, #128	@ 0x80
 800459a:	d919      	bls.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2ba0      	cmp	r3, #160	@ 0xa0
 80045a0:	d902      	bls.n	80045a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045a2:	2302      	movs	r3, #2
 80045a4:	613b      	str	r3, [r7, #16]
 80045a6:	e013      	b.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045a8:	2301      	movs	r3, #1
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	e010      	b.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2b80      	cmp	r3, #128	@ 0x80
 80045b2:	d902      	bls.n	80045ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045b4:	2303      	movs	r3, #3
 80045b6:	613b      	str	r3, [r7, #16]
 80045b8:	e00a      	b.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b80      	cmp	r3, #128	@ 0x80
 80045be:	d102      	bne.n	80045c6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045c0:	2302      	movs	r3, #2
 80045c2:	613b      	str	r3, [r7, #16]
 80045c4:	e004      	b.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2b70      	cmp	r3, #112	@ 0x70
 80045ca:	d101      	bne.n	80045d0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045cc:	2301      	movs	r3, #1
 80045ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f023 0207 	bic.w	r2, r3, #7
 80045d8:	4909      	ldr	r1, [pc, #36]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045e0:	4b07      	ldr	r3, [pc, #28]	@ (8004600 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d001      	beq.n	80045f2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40021000 	.word	0x40021000
 8004600:	40022000 	.word	0x40022000

08004604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800460c:	2300      	movs	r3, #0
 800460e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004610:	2300      	movs	r3, #0
 8004612:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800461c:	2b00      	cmp	r3, #0
 800461e:	d041      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004624:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004628:	d02a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800462a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800462e:	d824      	bhi.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004630:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004634:	d008      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004636:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800463a:	d81e      	bhi.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00a      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004640:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004644:	d010      	beq.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004646:	e018      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004648:	4b86      	ldr	r3, [pc, #536]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	4a85      	ldr	r2, [pc, #532]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800464e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004652:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004654:	e015      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	3304      	adds	r3, #4
 800465a:	2100      	movs	r1, #0
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fabb 	bl	8004bd8 <RCCEx_PLLSAI1_Config>
 8004662:	4603      	mov	r3, r0
 8004664:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004666:	e00c      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	3320      	adds	r3, #32
 800466c:	2100      	movs	r1, #0
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fba6 	bl	8004dc0 <RCCEx_PLLSAI2_Config>
 8004674:	4603      	mov	r3, r0
 8004676:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004678:	e003      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	74fb      	strb	r3, [r7, #19]
      break;
 800467e:	e000      	b.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004680:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004682:	7cfb      	ldrb	r3, [r7, #19]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10b      	bne.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004688:	4b76      	ldr	r3, [pc, #472]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800468a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800468e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004696:	4973      	ldr	r1, [pc, #460]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004698:	4313      	orrs	r3, r2
 800469a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800469e:	e001      	b.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a0:	7cfb      	ldrb	r3, [r7, #19]
 80046a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d041      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80046b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046b8:	d02a      	beq.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80046ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046be:	d824      	bhi.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046c4:	d008      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046ca:	d81e      	bhi.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046d4:	d010      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046d6:	e018      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046d8:	4b62      	ldr	r3, [pc, #392]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a61      	ldr	r2, [pc, #388]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046e4:	e015      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3304      	adds	r3, #4
 80046ea:	2100      	movs	r1, #0
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fa73 	bl	8004bd8 <RCCEx_PLLSAI1_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046f6:	e00c      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	3320      	adds	r3, #32
 80046fc:	2100      	movs	r1, #0
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fb5e 	bl	8004dc0 <RCCEx_PLLSAI2_Config>
 8004704:	4603      	mov	r3, r0
 8004706:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004708:	e003      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	74fb      	strb	r3, [r7, #19]
      break;
 800470e:	e000      	b.n	8004712 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004710:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004712:	7cfb      	ldrb	r3, [r7, #19]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d10b      	bne.n	8004730 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004718:	4b52      	ldr	r3, [pc, #328]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004726:	494f      	ldr	r1, [pc, #316]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800472e:	e001      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004730:	7cfb      	ldrb	r3, [r7, #19]
 8004732:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 80a0 	beq.w	8004882 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004742:	2300      	movs	r3, #0
 8004744:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004746:	4b47      	ldr	r3, [pc, #284]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800474a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004756:	2300      	movs	r3, #0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d00d      	beq.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800475c:	4b41      	ldr	r3, [pc, #260]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004760:	4a40      	ldr	r2, [pc, #256]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004766:	6593      	str	r3, [r2, #88]	@ 0x58
 8004768:	4b3e      	ldr	r3, [pc, #248]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800476a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800476c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004770:	60bb      	str	r3, [r7, #8]
 8004772:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004774:	2301      	movs	r3, #1
 8004776:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004778:	4b3b      	ldr	r3, [pc, #236]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a3a      	ldr	r2, [pc, #232]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800477e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004782:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004784:	f7fe fdae 	bl	80032e4 <HAL_GetTick>
 8004788:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800478a:	e009      	b.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800478c:	f7fe fdaa 	bl	80032e4 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b02      	cmp	r3, #2
 8004798:	d902      	bls.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	74fb      	strb	r3, [r7, #19]
        break;
 800479e:	e005      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80047a0:	4b31      	ldr	r3, [pc, #196]	@ (8004868 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d0ef      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047ac:	7cfb      	ldrb	r3, [r7, #19]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d15c      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01f      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047ca:	697a      	ldr	r2, [r7, #20]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d019      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047d0:	4b24      	ldr	r3, [pc, #144]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047dc:	4b21      	ldr	r3, [pc, #132]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047e2:	4a20      	ldr	r2, [pc, #128]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047ec:	4b1d      	ldr	r3, [pc, #116]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047f2:	4a1c      	ldr	r2, [pc, #112]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047fc:	4a19      	ldr	r2, [pc, #100]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d016      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480e:	f7fe fd69 	bl	80032e4 <HAL_GetTick>
 8004812:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004814:	e00b      	b.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004816:	f7fe fd65 	bl	80032e4 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004824:	4293      	cmp	r3, r2
 8004826:	d902      	bls.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	74fb      	strb	r3, [r7, #19]
            break;
 800482c:	e006      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800482e:	4b0d      	ldr	r3, [pc, #52]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004830:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d0ec      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800483c:	7cfb      	ldrb	r3, [r7, #19]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d10c      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004842:	4b08      	ldr	r3, [pc, #32]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004844:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004848:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004852:	4904      	ldr	r1, [pc, #16]	@ (8004864 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800485a:	e009      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	74bb      	strb	r3, [r7, #18]
 8004860:	e006      	b.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004862:	bf00      	nop
 8004864:	40021000 	.word	0x40021000
 8004868:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486c:	7cfb      	ldrb	r3, [r7, #19]
 800486e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004870:	7c7b      	ldrb	r3, [r7, #17]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d105      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004876:	4b9e      	ldr	r3, [pc, #632]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487a:	4a9d      	ldr	r2, [pc, #628]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004880:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800488e:	4b98      	ldr	r3, [pc, #608]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004890:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004894:	f023 0203 	bic.w	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800489c:	4994      	ldr	r1, [pc, #592]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f003 0302 	and.w	r3, r3, #2
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048b0:	4b8f      	ldr	r3, [pc, #572]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b6:	f023 020c 	bic.w	r2, r3, #12
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048be:	498c      	ldr	r1, [pc, #560]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0304 	and.w	r3, r3, #4
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048d2:	4b87      	ldr	r3, [pc, #540]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048e0:	4983      	ldr	r1, [pc, #524]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0308 	and.w	r3, r3, #8
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00a      	beq.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048f4:	4b7e      	ldr	r3, [pc, #504]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004902:	497b      	ldr	r1, [pc, #492]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004904:	4313      	orrs	r3, r2
 8004906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00a      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004916:	4b76      	ldr	r3, [pc, #472]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004918:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800491c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004924:	4972      	ldr	r1, [pc, #456]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004926:	4313      	orrs	r3, r2
 8004928:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0320 	and.w	r3, r3, #32
 8004934:	2b00      	cmp	r3, #0
 8004936:	d00a      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004938:	4b6d      	ldr	r3, [pc, #436]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800493a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800493e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004946:	496a      	ldr	r1, [pc, #424]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004948:	4313      	orrs	r3, r2
 800494a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004956:	2b00      	cmp	r3, #0
 8004958:	d00a      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800495a:	4b65      	ldr	r3, [pc, #404]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004960:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004968:	4961      	ldr	r1, [pc, #388]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004978:	2b00      	cmp	r3, #0
 800497a:	d00a      	beq.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800497c:	4b5c      	ldr	r3, [pc, #368]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800497e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004982:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800498a:	4959      	ldr	r1, [pc, #356]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498c:	4313      	orrs	r3, r2
 800498e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800499e:	4b54      	ldr	r3, [pc, #336]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049ac:	4950      	ldr	r1, [pc, #320]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d00a      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049c0:	4b4b      	ldr	r3, [pc, #300]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ce:	4948      	ldr	r1, [pc, #288]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049e2:	4b43      	ldr	r3, [pc, #268]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049f0:	493f      	ldr	r1, [pc, #252]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d028      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a04:	4b3a      	ldr	r3, [pc, #232]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a0a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a12:	4937      	ldr	r1, [pc, #220]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a14:	4313      	orrs	r3, r2
 8004a16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a1e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a22:	d106      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a24:	4b32      	ldr	r3, [pc, #200]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a26:	68db      	ldr	r3, [r3, #12]
 8004a28:	4a31      	ldr	r2, [pc, #196]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a2e:	60d3      	str	r3, [r2, #12]
 8004a30:	e011      	b.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a3a:	d10c      	bne.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3304      	adds	r3, #4
 8004a40:	2101      	movs	r1, #1
 8004a42:	4618      	mov	r0, r3
 8004a44:	f000 f8c8 	bl	8004bd8 <RCCEx_PLLSAI1_Config>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a4c:	7cfb      	ldrb	r3, [r7, #19]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a52:	7cfb      	ldrb	r3, [r7, #19]
 8004a54:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d028      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a62:	4b23      	ldr	r3, [pc, #140]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a68:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a70:	491f      	ldr	r1, [pc, #124]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a80:	d106      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a82:	4b1b      	ldr	r3, [pc, #108]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	4a1a      	ldr	r2, [pc, #104]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a8c:	60d3      	str	r3, [r2, #12]
 8004a8e:	e011      	b.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a94:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a98:	d10c      	bne.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3304      	adds	r3, #4
 8004a9e:	2101      	movs	r1, #1
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f000 f899 	bl	8004bd8 <RCCEx_PLLSAI1_Config>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aaa:	7cfb      	ldrb	r3, [r7, #19]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d001      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ab0:	7cfb      	ldrb	r3, [r7, #19]
 8004ab2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02b      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ac6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ace:	4908      	ldr	r1, [pc, #32]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ada:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ade:	d109      	bne.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ae0:	4b03      	ldr	r3, [pc, #12]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	4a02      	ldr	r2, [pc, #8]	@ (8004af0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aea:	60d3      	str	r3, [r2, #12]
 8004aec:	e014      	b.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004aee:	bf00      	nop
 8004af0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004af8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	3304      	adds	r3, #4
 8004b02:	2101      	movs	r1, #1
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 f867 	bl	8004bd8 <RCCEx_PLLSAI1_Config>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b14:	7cfb      	ldrb	r3, [r7, #19]
 8004b16:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02f      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b24:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b2a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b32:	4928      	ldr	r1, [pc, #160]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b3e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b42:	d10d      	bne.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	3304      	adds	r3, #4
 8004b48:	2102      	movs	r1, #2
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 f844 	bl	8004bd8 <RCCEx_PLLSAI1_Config>
 8004b50:	4603      	mov	r3, r0
 8004b52:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b54:	7cfb      	ldrb	r3, [r7, #19]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d014      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b5a:	7cfb      	ldrb	r3, [r7, #19]
 8004b5c:	74bb      	strb	r3, [r7, #18]
 8004b5e:	e011      	b.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b68:	d10c      	bne.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3320      	adds	r3, #32
 8004b6e:	2102      	movs	r1, #2
 8004b70:	4618      	mov	r0, r3
 8004b72:	f000 f925 	bl	8004dc0 <RCCEx_PLLSAI2_Config>
 8004b76:	4603      	mov	r3, r0
 8004b78:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b7a:	7cfb      	ldrb	r3, [r7, #19]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b80:	7cfb      	ldrb	r3, [r7, #19]
 8004b82:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00a      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b90:	4b10      	ldr	r3, [pc, #64]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b96:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b9e:	490d      	ldr	r1, [pc, #52]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00b      	beq.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004bb2:	4b08      	ldr	r3, [pc, #32]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bc2:	4904      	ldr	r1, [pc, #16]	@ (8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bca:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	40021000 	.word	0x40021000

08004bd8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004be2:	2300      	movs	r3, #0
 8004be4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004be6:	4b75      	ldr	r3, [pc, #468]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d018      	beq.n	8004c24 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bf2:	4b72      	ldr	r3, [pc, #456]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	f003 0203 	and.w	r2, r3, #3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d10d      	bne.n	8004c1e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
       ||
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d009      	beq.n	8004c1e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c0a:	4b6c      	ldr	r3, [pc, #432]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	685b      	ldr	r3, [r3, #4]
       ||
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d047      	beq.n	8004cae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	73fb      	strb	r3, [r7, #15]
 8004c22:	e044      	b.n	8004cae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d018      	beq.n	8004c5e <RCCEx_PLLSAI1_Config+0x86>
 8004c2c:	2b03      	cmp	r3, #3
 8004c2e:	d825      	bhi.n	8004c7c <RCCEx_PLLSAI1_Config+0xa4>
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d002      	beq.n	8004c3a <RCCEx_PLLSAI1_Config+0x62>
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d009      	beq.n	8004c4c <RCCEx_PLLSAI1_Config+0x74>
 8004c38:	e020      	b.n	8004c7c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c3a:	4b60      	ldr	r3, [pc, #384]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d11d      	bne.n	8004c82 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c4a:	e01a      	b.n	8004c82 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c4c:	4b5b      	ldr	r3, [pc, #364]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d116      	bne.n	8004c86 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c5c:	e013      	b.n	8004c86 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c5e:	4b57      	ldr	r3, [pc, #348]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d10f      	bne.n	8004c8a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c6a:	4b54      	ldr	r3, [pc, #336]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d109      	bne.n	8004c8a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c7a:	e006      	b.n	8004c8a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004c80:	e004      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c82:	bf00      	nop
 8004c84:	e002      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c86:	bf00      	nop
 8004c88:	e000      	b.n	8004c8c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10d      	bne.n	8004cae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c92:	4b4a      	ldr	r3, [pc, #296]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6819      	ldr	r1, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	430b      	orrs	r3, r1
 8004ca8:	4944      	ldr	r1, [pc, #272]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d17d      	bne.n	8004db0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004cb4:	4b41      	ldr	r3, [pc, #260]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a40      	ldr	r2, [pc, #256]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc0:	f7fe fb10 	bl	80032e4 <HAL_GetTick>
 8004cc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cc6:	e009      	b.n	8004cdc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cc8:	f7fe fb0c 	bl	80032e4 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d902      	bls.n	8004cdc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	73fb      	strb	r3, [r7, #15]
        break;
 8004cda:	e005      	b.n	8004ce8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cdc:	4b37      	ldr	r3, [pc, #220]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1ef      	bne.n	8004cc8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d160      	bne.n	8004db0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d111      	bne.n	8004d18 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cf4:	4b31      	ldr	r3, [pc, #196]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004cfc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6892      	ldr	r2, [r2, #8]
 8004d04:	0211      	lsls	r1, r2, #8
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68d2      	ldr	r2, [r2, #12]
 8004d0a:	0912      	lsrs	r2, r2, #4
 8004d0c:	0452      	lsls	r2, r2, #17
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	492a      	ldr	r1, [pc, #168]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	610b      	str	r3, [r1, #16]
 8004d16:	e027      	b.n	8004d68 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d112      	bne.n	8004d44 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d1e:	4b27      	ldr	r3, [pc, #156]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004d26:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6892      	ldr	r2, [r2, #8]
 8004d2e:	0211      	lsls	r1, r2, #8
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6912      	ldr	r2, [r2, #16]
 8004d34:	0852      	lsrs	r2, r2, #1
 8004d36:	3a01      	subs	r2, #1
 8004d38:	0552      	lsls	r2, r2, #21
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	491f      	ldr	r1, [pc, #124]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	610b      	str	r3, [r1, #16]
 8004d42:	e011      	b.n	8004d68 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d44:	4b1d      	ldr	r3, [pc, #116]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d4c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6892      	ldr	r2, [r2, #8]
 8004d54:	0211      	lsls	r1, r2, #8
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6952      	ldr	r2, [r2, #20]
 8004d5a:	0852      	lsrs	r2, r2, #1
 8004d5c:	3a01      	subs	r2, #1
 8004d5e:	0652      	lsls	r2, r2, #25
 8004d60:	430a      	orrs	r2, r1
 8004d62:	4916      	ldr	r1, [pc, #88]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d68:	4b14      	ldr	r3, [pc, #80]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a13      	ldr	r2, [pc, #76]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d74:	f7fe fab6 	bl	80032e4 <HAL_GetTick>
 8004d78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d7a:	e009      	b.n	8004d90 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d7c:	f7fe fab2 	bl	80032e4 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d902      	bls.n	8004d90 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	73fb      	strb	r3, [r7, #15]
          break;
 8004d8e:	e005      	b.n	8004d9c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d90:	4b0a      	ldr	r3, [pc, #40]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0ef      	beq.n	8004d7c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004da2:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004da4:	691a      	ldr	r2, [r3, #16]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	4904      	ldr	r1, [pc, #16]	@ (8004dbc <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	40021000 	.word	0x40021000

08004dc0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dce:	4b6a      	ldr	r3, [pc, #424]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d018      	beq.n	8004e0c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dda:	4b67      	ldr	r3, [pc, #412]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0203 	and.w	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d10d      	bne.n	8004e06 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
       ||
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004df2:	4b61      	ldr	r3, [pc, #388]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	091b      	lsrs	r3, r3, #4
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	1c5a      	adds	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
       ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d047      	beq.n	8004e96 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
 8004e0a:	e044      	b.n	8004e96 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b03      	cmp	r3, #3
 8004e12:	d018      	beq.n	8004e46 <RCCEx_PLLSAI2_Config+0x86>
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d825      	bhi.n	8004e64 <RCCEx_PLLSAI2_Config+0xa4>
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d002      	beq.n	8004e22 <RCCEx_PLLSAI2_Config+0x62>
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d009      	beq.n	8004e34 <RCCEx_PLLSAI2_Config+0x74>
 8004e20:	e020      	b.n	8004e64 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e22:	4b55      	ldr	r3, [pc, #340]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0302 	and.w	r3, r3, #2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d11d      	bne.n	8004e6a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e32:	e01a      	b.n	8004e6a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e34:	4b50      	ldr	r3, [pc, #320]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d116      	bne.n	8004e6e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e44:	e013      	b.n	8004e6e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e46:	4b4c      	ldr	r3, [pc, #304]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e52:	4b49      	ldr	r3, [pc, #292]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d109      	bne.n	8004e72 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e62:	e006      	b.n	8004e72 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	73fb      	strb	r3, [r7, #15]
      break;
 8004e68:	e004      	b.n	8004e74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e6a:	bf00      	nop
 8004e6c:	e002      	b.n	8004e74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e6e:	bf00      	nop
 8004e70:	e000      	b.n	8004e74 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e72:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10d      	bne.n	8004e96 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e7a:	4b3f      	ldr	r3, [pc, #252]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6819      	ldr	r1, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	3b01      	subs	r3, #1
 8004e8c:	011b      	lsls	r3, r3, #4
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	4939      	ldr	r1, [pc, #228]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d167      	bne.n	8004f6c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e9c:	4b36      	ldr	r3, [pc, #216]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a35      	ldr	r2, [pc, #212]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ea6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea8:	f7fe fa1c 	bl	80032e4 <HAL_GetTick>
 8004eac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004eae:	e009      	b.n	8004ec4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004eb0:	f7fe fa18 	bl	80032e4 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d902      	bls.n	8004ec4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec2:	e005      	b.n	8004ed0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ec4:	4b2c      	ldr	r3, [pc, #176]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1ef      	bne.n	8004eb0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d14a      	bne.n	8004f6c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d111      	bne.n	8004f00 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004edc:	4b26      	ldr	r3, [pc, #152]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ee4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	6892      	ldr	r2, [r2, #8]
 8004eec:	0211      	lsls	r1, r2, #8
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68d2      	ldr	r2, [r2, #12]
 8004ef2:	0912      	lsrs	r2, r2, #4
 8004ef4:	0452      	lsls	r2, r2, #17
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	491f      	ldr	r1, [pc, #124]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	614b      	str	r3, [r1, #20]
 8004efe:	e011      	b.n	8004f24 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f00:	4b1d      	ldr	r3, [pc, #116]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f08:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6892      	ldr	r2, [r2, #8]
 8004f10:	0211      	lsls	r1, r2, #8
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6912      	ldr	r2, [r2, #16]
 8004f16:	0852      	lsrs	r2, r2, #1
 8004f18:	3a01      	subs	r2, #1
 8004f1a:	0652      	lsls	r2, r2, #25
 8004f1c:	430a      	orrs	r2, r1
 8004f1e:	4916      	ldr	r1, [pc, #88]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f24:	4b14      	ldr	r3, [pc, #80]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a13      	ldr	r2, [pc, #76]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f30:	f7fe f9d8 	bl	80032e4 <HAL_GetTick>
 8004f34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f36:	e009      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f38:	f7fe f9d4 	bl	80032e4 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	68bb      	ldr	r3, [r7, #8]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d902      	bls.n	8004f4c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	73fb      	strb	r3, [r7, #15]
          break;
 8004f4a:	e005      	b.n	8004f58 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d0ef      	beq.n	8004f38 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d106      	bne.n	8004f6c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f5e:	4b06      	ldr	r3, [pc, #24]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f60:	695a      	ldr	r2, [r3, #20]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	4904      	ldr	r1, [pc, #16]	@ (8004f78 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	40021000 	.word	0x40021000

08004f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e049      	b.n	8005022 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f841 	bl	800502a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f000 fce8 	bl	8005990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3708      	adds	r7, #8
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800502a:	b480      	push	{r7}
 800502c:	b083      	sub	sp, #12
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005032:	bf00      	nop
 8005034:	370c      	adds	r7, #12
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
	...

08005040 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800504e:	b2db      	uxtb	r3, r3
 8005050:	2b01      	cmp	r3, #1
 8005052:	d001      	beq.n	8005058 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e04f      	b.n	80050f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68da      	ldr	r2, [r3, #12]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f042 0201 	orr.w	r2, r2, #1
 800506e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a23      	ldr	r2, [pc, #140]	@ (8005104 <HAL_TIM_Base_Start_IT+0xc4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01d      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0x76>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005082:	d018      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0x76>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a1f      	ldr	r2, [pc, #124]	@ (8005108 <HAL_TIM_Base_Start_IT+0xc8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d013      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0x76>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a1e      	ldr	r2, [pc, #120]	@ (800510c <HAL_TIM_Base_Start_IT+0xcc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d00e      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0x76>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a1c      	ldr	r2, [pc, #112]	@ (8005110 <HAL_TIM_Base_Start_IT+0xd0>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d009      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0x76>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1b      	ldr	r2, [pc, #108]	@ (8005114 <HAL_TIM_Base_Start_IT+0xd4>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d004      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0x76>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a19      	ldr	r2, [pc, #100]	@ (8005118 <HAL_TIM_Base_Start_IT+0xd8>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d115      	bne.n	80050e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	689a      	ldr	r2, [r3, #8]
 80050bc:	4b17      	ldr	r3, [pc, #92]	@ (800511c <HAL_TIM_Base_Start_IT+0xdc>)
 80050be:	4013      	ands	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2b06      	cmp	r3, #6
 80050c6:	d015      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0xb4>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050ce:	d011      	beq.n	80050f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e0:	e008      	b.n	80050f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f042 0201 	orr.w	r2, r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
 80050f2:	e000      	b.n	80050f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3714      	adds	r7, #20
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr
 8005104:	40012c00 	.word	0x40012c00
 8005108:	40000400 	.word	0x40000400
 800510c:	40000800 	.word	0x40000800
 8005110:	40000c00 	.word	0x40000c00
 8005114:	40013400 	.word	0x40013400
 8005118:	40014000 	.word	0x40014000
 800511c:	00010007 	.word	0x00010007

08005120 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	e049      	b.n	80051c6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005138:	b2db      	uxtb	r3, r3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d106      	bne.n	800514c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7fd fe16 	bl	8002d78 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2202      	movs	r2, #2
 8005150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f000 fc16 	bl	8005990 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051c4:	2300      	movs	r3, #0
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
	...

080051d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b084      	sub	sp, #16
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
 80051d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d109      	bne.n	80051f4 <HAL_TIM_PWM_Start+0x24>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b01      	cmp	r3, #1
 80051ea:	bf14      	ite	ne
 80051ec:	2301      	movne	r3, #1
 80051ee:	2300      	moveq	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	e03c      	b.n	800526e <HAL_TIM_PWM_Start+0x9e>
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	2b04      	cmp	r3, #4
 80051f8:	d109      	bne.n	800520e <HAL_TIM_PWM_Start+0x3e>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b01      	cmp	r3, #1
 8005204:	bf14      	ite	ne
 8005206:	2301      	movne	r3, #1
 8005208:	2300      	moveq	r3, #0
 800520a:	b2db      	uxtb	r3, r3
 800520c:	e02f      	b.n	800526e <HAL_TIM_PWM_Start+0x9e>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d109      	bne.n	8005228 <HAL_TIM_PWM_Start+0x58>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800521a:	b2db      	uxtb	r3, r3
 800521c:	2b01      	cmp	r3, #1
 800521e:	bf14      	ite	ne
 8005220:	2301      	movne	r3, #1
 8005222:	2300      	moveq	r3, #0
 8005224:	b2db      	uxtb	r3, r3
 8005226:	e022      	b.n	800526e <HAL_TIM_PWM_Start+0x9e>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	2b0c      	cmp	r3, #12
 800522c:	d109      	bne.n	8005242 <HAL_TIM_PWM_Start+0x72>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b01      	cmp	r3, #1
 8005238:	bf14      	ite	ne
 800523a:	2301      	movne	r3, #1
 800523c:	2300      	moveq	r3, #0
 800523e:	b2db      	uxtb	r3, r3
 8005240:	e015      	b.n	800526e <HAL_TIM_PWM_Start+0x9e>
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b10      	cmp	r3, #16
 8005246:	d109      	bne.n	800525c <HAL_TIM_PWM_Start+0x8c>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e008      	b.n	800526e <HAL_TIM_PWM_Start+0x9e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b01      	cmp	r3, #1
 8005266:	bf14      	ite	ne
 8005268:	2301      	movne	r3, #1
 800526a:	2300      	moveq	r3, #0
 800526c:	b2db      	uxtb	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	d001      	beq.n	8005276 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e09c      	b.n	80053b0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <HAL_TIM_PWM_Start+0xb6>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2202      	movs	r2, #2
 8005280:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005284:	e023      	b.n	80052ce <HAL_TIM_PWM_Start+0xfe>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	2b04      	cmp	r3, #4
 800528a:	d104      	bne.n	8005296 <HAL_TIM_PWM_Start+0xc6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2202      	movs	r2, #2
 8005290:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005294:	e01b      	b.n	80052ce <HAL_TIM_PWM_Start+0xfe>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	2b08      	cmp	r3, #8
 800529a:	d104      	bne.n	80052a6 <HAL_TIM_PWM_Start+0xd6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052a4:	e013      	b.n	80052ce <HAL_TIM_PWM_Start+0xfe>
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b0c      	cmp	r3, #12
 80052aa:	d104      	bne.n	80052b6 <HAL_TIM_PWM_Start+0xe6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2202      	movs	r2, #2
 80052b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052b4:	e00b      	b.n	80052ce <HAL_TIM_PWM_Start+0xfe>
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d104      	bne.n	80052c6 <HAL_TIM_PWM_Start+0xf6>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80052c4:	e003      	b.n	80052ce <HAL_TIM_PWM_Start+0xfe>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2202      	movs	r2, #2
 80052ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2201      	movs	r2, #1
 80052d4:	6839      	ldr	r1, [r7, #0]
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 fed6 	bl	8006088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a35      	ldr	r2, [pc, #212]	@ (80053b8 <HAL_TIM_PWM_Start+0x1e8>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d013      	beq.n	800530e <HAL_TIM_PWM_Start+0x13e>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a34      	ldr	r2, [pc, #208]	@ (80053bc <HAL_TIM_PWM_Start+0x1ec>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d00e      	beq.n	800530e <HAL_TIM_PWM_Start+0x13e>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a32      	ldr	r2, [pc, #200]	@ (80053c0 <HAL_TIM_PWM_Start+0x1f0>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_TIM_PWM_Start+0x13e>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a31      	ldr	r2, [pc, #196]	@ (80053c4 <HAL_TIM_PWM_Start+0x1f4>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIM_PWM_Start+0x13e>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a2f      	ldr	r2, [pc, #188]	@ (80053c8 <HAL_TIM_PWM_Start+0x1f8>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <HAL_TIM_PWM_Start+0x142>
 800530e:	2301      	movs	r3, #1
 8005310:	e000      	b.n	8005314 <HAL_TIM_PWM_Start+0x144>
 8005312:	2300      	movs	r3, #0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d007      	beq.n	8005328 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005326:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a22      	ldr	r2, [pc, #136]	@ (80053b8 <HAL_TIM_PWM_Start+0x1e8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d01d      	beq.n	800536e <HAL_TIM_PWM_Start+0x19e>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800533a:	d018      	beq.n	800536e <HAL_TIM_PWM_Start+0x19e>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a22      	ldr	r2, [pc, #136]	@ (80053cc <HAL_TIM_PWM_Start+0x1fc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_TIM_PWM_Start+0x19e>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a21      	ldr	r2, [pc, #132]	@ (80053d0 <HAL_TIM_PWM_Start+0x200>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_TIM_PWM_Start+0x19e>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1f      	ldr	r2, [pc, #124]	@ (80053d4 <HAL_TIM_PWM_Start+0x204>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_TIM_PWM_Start+0x19e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a17      	ldr	r2, [pc, #92]	@ (80053bc <HAL_TIM_PWM_Start+0x1ec>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_TIM_PWM_Start+0x19e>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a15      	ldr	r2, [pc, #84]	@ (80053c0 <HAL_TIM_PWM_Start+0x1f0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d115      	bne.n	800539a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	4b18      	ldr	r3, [pc, #96]	@ (80053d8 <HAL_TIM_PWM_Start+0x208>)
 8005376:	4013      	ands	r3, r2
 8005378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b06      	cmp	r3, #6
 800537e:	d015      	beq.n	80053ac <HAL_TIM_PWM_Start+0x1dc>
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005386:	d011      	beq.n	80053ac <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f042 0201 	orr.w	r2, r2, #1
 8005396:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005398:	e008      	b.n	80053ac <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0201 	orr.w	r2, r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	e000      	b.n	80053ae <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80053ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40012c00 	.word	0x40012c00
 80053bc:	40013400 	.word	0x40013400
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800
 80053cc:	40000400 	.word	0x40000400
 80053d0:	40000800 	.word	0x40000800
 80053d4:	40000c00 	.word	0x40000c00
 80053d8:	00010007 	.word	0x00010007

080053dc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2200      	movs	r2, #0
 80053ec:	6839      	ldr	r1, [r7, #0]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 fe4a 	bl	8006088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a3e      	ldr	r2, [pc, #248]	@ (80054f4 <HAL_TIM_PWM_Stop+0x118>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d013      	beq.n	8005426 <HAL_TIM_PWM_Stop+0x4a>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a3d      	ldr	r2, [pc, #244]	@ (80054f8 <HAL_TIM_PWM_Stop+0x11c>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00e      	beq.n	8005426 <HAL_TIM_PWM_Stop+0x4a>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a3b      	ldr	r2, [pc, #236]	@ (80054fc <HAL_TIM_PWM_Stop+0x120>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d009      	beq.n	8005426 <HAL_TIM_PWM_Stop+0x4a>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a3a      	ldr	r2, [pc, #232]	@ (8005500 <HAL_TIM_PWM_Stop+0x124>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d004      	beq.n	8005426 <HAL_TIM_PWM_Stop+0x4a>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a38      	ldr	r2, [pc, #224]	@ (8005504 <HAL_TIM_PWM_Stop+0x128>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d101      	bne.n	800542a <HAL_TIM_PWM_Stop+0x4e>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <HAL_TIM_PWM_Stop+0x50>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d017      	beq.n	8005460 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	6a1a      	ldr	r2, [r3, #32]
 8005436:	f241 1311 	movw	r3, #4369	@ 0x1111
 800543a:	4013      	ands	r3, r2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10f      	bne.n	8005460 <HAL_TIM_PWM_Stop+0x84>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6a1a      	ldr	r2, [r3, #32]
 8005446:	f240 4344 	movw	r3, #1092	@ 0x444
 800544a:	4013      	ands	r3, r2
 800544c:	2b00      	cmp	r3, #0
 800544e:	d107      	bne.n	8005460 <HAL_TIM_PWM_Stop+0x84>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800545e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6a1a      	ldr	r2, [r3, #32]
 8005466:	f241 1311 	movw	r3, #4369	@ 0x1111
 800546a:	4013      	ands	r3, r2
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10f      	bne.n	8005490 <HAL_TIM_PWM_Stop+0xb4>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6a1a      	ldr	r2, [r3, #32]
 8005476:	f240 4344 	movw	r3, #1092	@ 0x444
 800547a:	4013      	ands	r3, r2
 800547c:	2b00      	cmp	r3, #0
 800547e:	d107      	bne.n	8005490 <HAL_TIM_PWM_Stop+0xb4>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0201 	bic.w	r2, r2, #1
 800548e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <HAL_TIM_PWM_Stop+0xc4>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2201      	movs	r2, #1
 800549a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800549e:	e023      	b.n	80054e8 <HAL_TIM_PWM_Stop+0x10c>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d104      	bne.n	80054b0 <HAL_TIM_PWM_Stop+0xd4>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2201      	movs	r2, #1
 80054aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054ae:	e01b      	b.n	80054e8 <HAL_TIM_PWM_Stop+0x10c>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b08      	cmp	r3, #8
 80054b4:	d104      	bne.n	80054c0 <HAL_TIM_PWM_Stop+0xe4>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054be:	e013      	b.n	80054e8 <HAL_TIM_PWM_Stop+0x10c>
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	2b0c      	cmp	r3, #12
 80054c4:	d104      	bne.n	80054d0 <HAL_TIM_PWM_Stop+0xf4>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054ce:	e00b      	b.n	80054e8 <HAL_TIM_PWM_Stop+0x10c>
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	2b10      	cmp	r3, #16
 80054d4:	d104      	bne.n	80054e0 <HAL_TIM_PWM_Stop+0x104>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2201      	movs	r2, #1
 80054da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054de:	e003      	b.n	80054e8 <HAL_TIM_PWM_Stop+0x10c>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3708      	adds	r7, #8
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	40012c00 	.word	0x40012c00
 80054f8:	40013400 	.word	0x40013400
 80054fc:	40014000 	.word	0x40014000
 8005500:	40014400 	.word	0x40014400
 8005504:	40014800 	.word	0x40014800

08005508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b084      	sub	sp, #16
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d020      	beq.n	800556c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f003 0302 	and.w	r3, r3, #2
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01b      	beq.n	800556c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f06f 0202 	mvn.w	r2, #2
 800553c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2201      	movs	r2, #1
 8005542:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	699b      	ldr	r3, [r3, #24]
 800554a:	f003 0303 	and.w	r3, r3, #3
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 f9fe 	bl	8005954 <HAL_TIM_IC_CaptureCallback>
 8005558:	e005      	b.n	8005566 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800555a:	6878      	ldr	r0, [r7, #4]
 800555c:	f000 f9f0 	bl	8005940 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 fa01 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b00      	cmp	r3, #0
 8005574:	d020      	beq.n	80055b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d01b      	beq.n	80055b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f06f 0204 	mvn.w	r2, #4
 8005588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800559a:	2b00      	cmp	r3, #0
 800559c:	d003      	beq.n	80055a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9d8 	bl	8005954 <HAL_TIM_IC_CaptureCallback>
 80055a4:	e005      	b.n	80055b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f9ca 	bl	8005940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f9db 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f003 0308 	and.w	r3, r3, #8
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d020      	beq.n	8005604 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f003 0308 	and.w	r3, r3, #8
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d01b      	beq.n	8005604 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0208 	mvn.w	r2, #8
 80055d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2204      	movs	r2, #4
 80055da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f9b2 	bl	8005954 <HAL_TIM_IC_CaptureCallback>
 80055f0:	e005      	b.n	80055fe <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f9a4 	bl	8005940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f9b5 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	f003 0310 	and.w	r3, r3, #16
 800560a:	2b00      	cmp	r3, #0
 800560c:	d020      	beq.n	8005650 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	f003 0310 	and.w	r3, r3, #16
 8005614:	2b00      	cmp	r3, #0
 8005616:	d01b      	beq.n	8005650 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f06f 0210 	mvn.w	r2, #16
 8005620:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2208      	movs	r2, #8
 8005626:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	69db      	ldr	r3, [r3, #28]
 800562e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f98c 	bl	8005954 <HAL_TIM_IC_CaptureCallback>
 800563c:	e005      	b.n	800564a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f97e 	bl	8005940 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 f98f 	bl	8005968 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005650:	68bb      	ldr	r3, [r7, #8]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d00c      	beq.n	8005674 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f003 0301 	and.w	r3, r3, #1
 8005660:	2b00      	cmp	r3, #0
 8005662:	d007      	beq.n	8005674 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0201 	mvn.w	r2, #1
 800566c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7fd fb42 	bl	8002cf8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800567a:	2b00      	cmp	r3, #0
 800567c:	d104      	bne.n	8005688 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005684:	2b00      	cmp	r3, #0
 8005686:	d00c      	beq.n	80056a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800568e:	2b00      	cmp	r3, #0
 8005690:	d007      	beq.n	80056a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800569a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 fe29 	bl	80062f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00c      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d007      	beq.n	80056c6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80056be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fe21 	bl	8006308 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00c      	beq.n	80056ea <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d007      	beq.n	80056ea <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80056e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f949 	bl	800597c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f003 0320 	and.w	r3, r3, #32
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00c      	beq.n	800570e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d007      	beq.n	800570e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f06f 0220 	mvn.w	r2, #32
 8005706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fde9 	bl	80062e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}
	...

08005718 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b086      	sub	sp, #24
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005724:	2300      	movs	r3, #0
 8005726:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800572e:	2b01      	cmp	r3, #1
 8005730:	d101      	bne.n	8005736 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005732:	2302      	movs	r3, #2
 8005734:	e0ff      	b.n	8005936 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	2201      	movs	r2, #1
 800573a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b14      	cmp	r3, #20
 8005742:	f200 80f0 	bhi.w	8005926 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005746:	a201      	add	r2, pc, #4	@ (adr r2, 800574c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	080057a1 	.word	0x080057a1
 8005750:	08005927 	.word	0x08005927
 8005754:	08005927 	.word	0x08005927
 8005758:	08005927 	.word	0x08005927
 800575c:	080057e1 	.word	0x080057e1
 8005760:	08005927 	.word	0x08005927
 8005764:	08005927 	.word	0x08005927
 8005768:	08005927 	.word	0x08005927
 800576c:	08005823 	.word	0x08005823
 8005770:	08005927 	.word	0x08005927
 8005774:	08005927 	.word	0x08005927
 8005778:	08005927 	.word	0x08005927
 800577c:	08005863 	.word	0x08005863
 8005780:	08005927 	.word	0x08005927
 8005784:	08005927 	.word	0x08005927
 8005788:	08005927 	.word	0x08005927
 800578c:	080058a5 	.word	0x080058a5
 8005790:	08005927 	.word	0x08005927
 8005794:	08005927 	.word	0x08005927
 8005798:	08005927 	.word	0x08005927
 800579c:	080058e5 	.word	0x080058e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68b9      	ldr	r1, [r7, #8]
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 f998 	bl	8005adc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	699a      	ldr	r2, [r3, #24]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f042 0208 	orr.w	r2, r2, #8
 80057ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699a      	ldr	r2, [r3, #24]
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 0204 	bic.w	r2, r2, #4
 80057ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6999      	ldr	r1, [r3, #24]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	691a      	ldr	r2, [r3, #16]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	619a      	str	r2, [r3, #24]
      break;
 80057de:	e0a5      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68b9      	ldr	r1, [r7, #8]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 fa08 	bl	8005bfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	699a      	ldr	r2, [r3, #24]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800580a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6999      	ldr	r1, [r3, #24]
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	021a      	lsls	r2, r3, #8
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	619a      	str	r2, [r3, #24]
      break;
 8005820:	e084      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68b9      	ldr	r1, [r7, #8]
 8005828:	4618      	mov	r0, r3
 800582a:	f000 fa71 	bl	8005d10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	69da      	ldr	r2, [r3, #28]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f042 0208 	orr.w	r2, r2, #8
 800583c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f022 0204 	bic.w	r2, r2, #4
 800584c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	69d9      	ldr	r1, [r3, #28]
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	61da      	str	r2, [r3, #28]
      break;
 8005860:	e064      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	4618      	mov	r0, r3
 800586a:	f000 fad9 	bl	8005e20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	69da      	ldr	r2, [r3, #28]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800587c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	69da      	ldr	r2, [r3, #28]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800588c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	69d9      	ldr	r1, [r3, #28]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	021a      	lsls	r2, r3, #8
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	430a      	orrs	r2, r1
 80058a0:	61da      	str	r2, [r3, #28]
      break;
 80058a2:	e043      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68b9      	ldr	r1, [r7, #8]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f000 fb22 	bl	8005ef4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0208 	orr.w	r2, r2, #8
 80058be:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f022 0204 	bic.w	r2, r2, #4
 80058ce:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	691a      	ldr	r2, [r3, #16]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80058e2:	e023      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68b9      	ldr	r1, [r7, #8]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f000 fb66 	bl	8005fbc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058fe:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800590e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	021a      	lsls	r2, r3, #8
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	430a      	orrs	r2, r1
 8005922:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005924:	e002      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	75fb      	strb	r3, [r7, #23]
      break;
 800592a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005934:	7dfb      	ldrb	r3, [r7, #23]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3718      	adds	r7, #24
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop

08005940 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a46      	ldr	r2, [pc, #280]	@ (8005abc <TIM_Base_SetConfig+0x12c>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d013      	beq.n	80059d0 <TIM_Base_SetConfig+0x40>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ae:	d00f      	beq.n	80059d0 <TIM_Base_SetConfig+0x40>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a43      	ldr	r2, [pc, #268]	@ (8005ac0 <TIM_Base_SetConfig+0x130>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d00b      	beq.n	80059d0 <TIM_Base_SetConfig+0x40>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a42      	ldr	r2, [pc, #264]	@ (8005ac4 <TIM_Base_SetConfig+0x134>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d007      	beq.n	80059d0 <TIM_Base_SetConfig+0x40>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a41      	ldr	r2, [pc, #260]	@ (8005ac8 <TIM_Base_SetConfig+0x138>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d003      	beq.n	80059d0 <TIM_Base_SetConfig+0x40>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	4a40      	ldr	r2, [pc, #256]	@ (8005acc <TIM_Base_SetConfig+0x13c>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d108      	bne.n	80059e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	4313      	orrs	r3, r2
 80059e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	4a35      	ldr	r2, [pc, #212]	@ (8005abc <TIM_Base_SetConfig+0x12c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d01f      	beq.n	8005a2a <TIM_Base_SetConfig+0x9a>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f0:	d01b      	beq.n	8005a2a <TIM_Base_SetConfig+0x9a>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a32      	ldr	r2, [pc, #200]	@ (8005ac0 <TIM_Base_SetConfig+0x130>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d017      	beq.n	8005a2a <TIM_Base_SetConfig+0x9a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a31      	ldr	r2, [pc, #196]	@ (8005ac4 <TIM_Base_SetConfig+0x134>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d013      	beq.n	8005a2a <TIM_Base_SetConfig+0x9a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a30      	ldr	r2, [pc, #192]	@ (8005ac8 <TIM_Base_SetConfig+0x138>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d00f      	beq.n	8005a2a <TIM_Base_SetConfig+0x9a>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a2f      	ldr	r2, [pc, #188]	@ (8005acc <TIM_Base_SetConfig+0x13c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00b      	beq.n	8005a2a <TIM_Base_SetConfig+0x9a>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a2e      	ldr	r2, [pc, #184]	@ (8005ad0 <TIM_Base_SetConfig+0x140>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d007      	beq.n	8005a2a <TIM_Base_SetConfig+0x9a>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a2d      	ldr	r2, [pc, #180]	@ (8005ad4 <TIM_Base_SetConfig+0x144>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d003      	beq.n	8005a2a <TIM_Base_SetConfig+0x9a>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a2c      	ldr	r2, [pc, #176]	@ (8005ad8 <TIM_Base_SetConfig+0x148>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d108      	bne.n	8005a3c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	4313      	orrs	r3, r2
 8005a48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a16      	ldr	r2, [pc, #88]	@ (8005abc <TIM_Base_SetConfig+0x12c>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00f      	beq.n	8005a88 <TIM_Base_SetConfig+0xf8>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a18      	ldr	r2, [pc, #96]	@ (8005acc <TIM_Base_SetConfig+0x13c>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00b      	beq.n	8005a88 <TIM_Base_SetConfig+0xf8>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a17      	ldr	r2, [pc, #92]	@ (8005ad0 <TIM_Base_SetConfig+0x140>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <TIM_Base_SetConfig+0xf8>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a16      	ldr	r2, [pc, #88]	@ (8005ad4 <TIM_Base_SetConfig+0x144>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_Base_SetConfig+0xf8>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a15      	ldr	r2, [pc, #84]	@ (8005ad8 <TIM_Base_SetConfig+0x148>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d103      	bne.n	8005a90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	691a      	ldr	r2, [r3, #16]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d105      	bne.n	8005aae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	f023 0201 	bic.w	r2, r3, #1
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	611a      	str	r2, [r3, #16]
  }
}
 8005aae:	bf00      	nop
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40000400 	.word	0x40000400
 8005ac4:	40000800 	.word	0x40000800
 8005ac8:	40000c00 	.word	0x40000c00
 8005acc:	40013400 	.word	0x40013400
 8005ad0:	40014000 	.word	0x40014000
 8005ad4:	40014400 	.word	0x40014400
 8005ad8:	40014800 	.word	0x40014800

08005adc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b087      	sub	sp, #28
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6a1b      	ldr	r3, [r3, #32]
 8005aea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	f023 0201 	bic.w	r2, r3, #1
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f023 0303 	bic.w	r3, r3, #3
 8005b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	f023 0302 	bic.w	r3, r3, #2
 8005b28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	697a      	ldr	r2, [r7, #20]
 8005b30:	4313      	orrs	r3, r2
 8005b32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a2c      	ldr	r2, [pc, #176]	@ (8005be8 <TIM_OC1_SetConfig+0x10c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00f      	beq.n	8005b5c <TIM_OC1_SetConfig+0x80>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a2b      	ldr	r2, [pc, #172]	@ (8005bec <TIM_OC1_SetConfig+0x110>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d00b      	beq.n	8005b5c <TIM_OC1_SetConfig+0x80>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a2a      	ldr	r2, [pc, #168]	@ (8005bf0 <TIM_OC1_SetConfig+0x114>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d007      	beq.n	8005b5c <TIM_OC1_SetConfig+0x80>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a29      	ldr	r2, [pc, #164]	@ (8005bf4 <TIM_OC1_SetConfig+0x118>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d003      	beq.n	8005b5c <TIM_OC1_SetConfig+0x80>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	4a28      	ldr	r2, [pc, #160]	@ (8005bf8 <TIM_OC1_SetConfig+0x11c>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d10c      	bne.n	8005b76 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0308 	bic.w	r3, r3, #8
 8005b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f023 0304 	bic.w	r3, r3, #4
 8005b74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1b      	ldr	r2, [pc, #108]	@ (8005be8 <TIM_OC1_SetConfig+0x10c>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d00f      	beq.n	8005b9e <TIM_OC1_SetConfig+0xc2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a1a      	ldr	r2, [pc, #104]	@ (8005bec <TIM_OC1_SetConfig+0x110>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d00b      	beq.n	8005b9e <TIM_OC1_SetConfig+0xc2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a19      	ldr	r2, [pc, #100]	@ (8005bf0 <TIM_OC1_SetConfig+0x114>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d007      	beq.n	8005b9e <TIM_OC1_SetConfig+0xc2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a18      	ldr	r2, [pc, #96]	@ (8005bf4 <TIM_OC1_SetConfig+0x118>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d003      	beq.n	8005b9e <TIM_OC1_SetConfig+0xc2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a17      	ldr	r2, [pc, #92]	@ (8005bf8 <TIM_OC1_SetConfig+0x11c>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d111      	bne.n	8005bc2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	693a      	ldr	r2, [r7, #16]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	693a      	ldr	r2, [r7, #16]
 8005bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	621a      	str	r2, [r3, #32]
}
 8005bdc:	bf00      	nop
 8005bde:	371c      	adds	r7, #28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	40012c00 	.word	0x40012c00
 8005bec:	40013400 	.word	0x40013400
 8005bf0:	40014000 	.word	0x40014000
 8005bf4:	40014400 	.word	0x40014400
 8005bf8:	40014800 	.word	0x40014800

08005bfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6a1b      	ldr	r3, [r3, #32]
 8005c10:	f023 0210 	bic.w	r2, r3, #16
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	699b      	ldr	r3, [r3, #24]
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	021b      	lsls	r3, r3, #8
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	f023 0320 	bic.w	r3, r3, #32
 8005c4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	011b      	lsls	r3, r3, #4
 8005c52:	697a      	ldr	r2, [r7, #20]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	4a28      	ldr	r2, [pc, #160]	@ (8005cfc <TIM_OC2_SetConfig+0x100>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d003      	beq.n	8005c68 <TIM_OC2_SetConfig+0x6c>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	4a27      	ldr	r2, [pc, #156]	@ (8005d00 <TIM_OC2_SetConfig+0x104>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d10d      	bne.n	8005c84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c68:	697b      	ldr	r3, [r7, #20]
 8005c6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	011b      	lsls	r3, r3, #4
 8005c76:	697a      	ldr	r2, [r7, #20]
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c82:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a1d      	ldr	r2, [pc, #116]	@ (8005cfc <TIM_OC2_SetConfig+0x100>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d00f      	beq.n	8005cac <TIM_OC2_SetConfig+0xb0>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a1c      	ldr	r2, [pc, #112]	@ (8005d00 <TIM_OC2_SetConfig+0x104>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00b      	beq.n	8005cac <TIM_OC2_SetConfig+0xb0>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a1b      	ldr	r2, [pc, #108]	@ (8005d04 <TIM_OC2_SetConfig+0x108>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d007      	beq.n	8005cac <TIM_OC2_SetConfig+0xb0>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8005d08 <TIM_OC2_SetConfig+0x10c>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d003      	beq.n	8005cac <TIM_OC2_SetConfig+0xb0>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	4a19      	ldr	r2, [pc, #100]	@ (8005d0c <TIM_OC2_SetConfig+0x110>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d113      	bne.n	8005cd4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005cb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005cba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	699b      	ldr	r3, [r3, #24]
 8005ccc:	009b      	lsls	r3, r3, #2
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	621a      	str	r2, [r3, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40014000 	.word	0x40014000
 8005d08:	40014400 	.word	0x40014400
 8005d0c:	40014800 	.word	0x40014800

08005d10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a1b      	ldr	r3, [r3, #32]
 8005d24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	69db      	ldr	r3, [r3, #28]
 8005d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f023 0303 	bic.w	r3, r3, #3
 8005d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68fa      	ldr	r2, [r7, #12]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4a27      	ldr	r2, [pc, #156]	@ (8005e0c <TIM_OC3_SetConfig+0xfc>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d003      	beq.n	8005d7a <TIM_OC3_SetConfig+0x6a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	4a26      	ldr	r2, [pc, #152]	@ (8005e10 <TIM_OC3_SetConfig+0x100>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d10d      	bne.n	8005d96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005d80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	021b      	lsls	r3, r3, #8
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4a1c      	ldr	r2, [pc, #112]	@ (8005e0c <TIM_OC3_SetConfig+0xfc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d00f      	beq.n	8005dbe <TIM_OC3_SetConfig+0xae>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e10 <TIM_OC3_SetConfig+0x100>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d00b      	beq.n	8005dbe <TIM_OC3_SetConfig+0xae>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	4a1a      	ldr	r2, [pc, #104]	@ (8005e14 <TIM_OC3_SetConfig+0x104>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d007      	beq.n	8005dbe <TIM_OC3_SetConfig+0xae>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4a19      	ldr	r2, [pc, #100]	@ (8005e18 <TIM_OC3_SetConfig+0x108>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d003      	beq.n	8005dbe <TIM_OC3_SetConfig+0xae>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	4a18      	ldr	r2, [pc, #96]	@ (8005e1c <TIM_OC3_SetConfig+0x10c>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d113      	bne.n	8005de6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005dc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	695b      	ldr	r3, [r3, #20]
 8005dd2:	011b      	lsls	r3, r3, #4
 8005dd4:	693a      	ldr	r2, [r7, #16]
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	011b      	lsls	r3, r3, #4
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	68fa      	ldr	r2, [r7, #12]
 8005df0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	685a      	ldr	r2, [r3, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	621a      	str	r2, [r3, #32]
}
 8005e00:	bf00      	nop
 8005e02:	371c      	adds	r7, #28
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	40012c00 	.word	0x40012c00
 8005e10:	40013400 	.word	0x40013400
 8005e14:	40014000 	.word	0x40014000
 8005e18:	40014400 	.word	0x40014400
 8005e1c:	40014800 	.word	0x40014800

08005e20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	021b      	lsls	r3, r3, #8
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005e6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	031b      	lsls	r3, r3, #12
 8005e76:	693a      	ldr	r2, [r7, #16]
 8005e78:	4313      	orrs	r3, r2
 8005e7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a18      	ldr	r2, [pc, #96]	@ (8005ee0 <TIM_OC4_SetConfig+0xc0>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d00f      	beq.n	8005ea4 <TIM_OC4_SetConfig+0x84>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a17      	ldr	r2, [pc, #92]	@ (8005ee4 <TIM_OC4_SetConfig+0xc4>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d00b      	beq.n	8005ea4 <TIM_OC4_SetConfig+0x84>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a16      	ldr	r2, [pc, #88]	@ (8005ee8 <TIM_OC4_SetConfig+0xc8>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d007      	beq.n	8005ea4 <TIM_OC4_SetConfig+0x84>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	4a15      	ldr	r2, [pc, #84]	@ (8005eec <TIM_OC4_SetConfig+0xcc>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d003      	beq.n	8005ea4 <TIM_OC4_SetConfig+0x84>
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a14      	ldr	r2, [pc, #80]	@ (8005ef0 <TIM_OC4_SetConfig+0xd0>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d109      	bne.n	8005eb8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eaa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	695b      	ldr	r3, [r3, #20]
 8005eb0:	019b      	lsls	r3, r3, #6
 8005eb2:	697a      	ldr	r2, [r7, #20]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	693a      	ldr	r2, [r7, #16]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	bf00      	nop
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40013400 	.word	0x40013400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40014400 	.word	0x40014400
 8005ef0:	40014800 	.word	0x40014800

08005ef4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a1b      	ldr	r3, [r3, #32]
 8005f08:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f32:	693b      	ldr	r3, [r7, #16]
 8005f34:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005f38:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	041b      	lsls	r3, r3, #16
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	4313      	orrs	r3, r2
 8005f44:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a17      	ldr	r2, [pc, #92]	@ (8005fa8 <TIM_OC5_SetConfig+0xb4>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d00f      	beq.n	8005f6e <TIM_OC5_SetConfig+0x7a>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a16      	ldr	r2, [pc, #88]	@ (8005fac <TIM_OC5_SetConfig+0xb8>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d00b      	beq.n	8005f6e <TIM_OC5_SetConfig+0x7a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a15      	ldr	r2, [pc, #84]	@ (8005fb0 <TIM_OC5_SetConfig+0xbc>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d007      	beq.n	8005f6e <TIM_OC5_SetConfig+0x7a>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a14      	ldr	r2, [pc, #80]	@ (8005fb4 <TIM_OC5_SetConfig+0xc0>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d003      	beq.n	8005f6e <TIM_OC5_SetConfig+0x7a>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a13      	ldr	r2, [pc, #76]	@ (8005fb8 <TIM_OC5_SetConfig+0xc4>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d109      	bne.n	8005f82 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f74:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	021b      	lsls	r3, r3, #8
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	693a      	ldr	r2, [r7, #16]
 8005f9a:	621a      	str	r2, [r3, #32]
}
 8005f9c:	bf00      	nop
 8005f9e:	371c      	adds	r7, #28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	40012c00 	.word	0x40012c00
 8005fac:	40013400 	.word	0x40013400
 8005fb0:	40014000 	.word	0x40014000
 8005fb4:	40014400 	.word	0x40014400
 8005fb8:	40014800 	.word	0x40014800

08005fbc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b087      	sub	sp, #28
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	6a1b      	ldr	r3, [r3, #32]
 8005fd0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	021b      	lsls	r3, r3, #8
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006002:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	051b      	lsls	r3, r3, #20
 800600a:	693a      	ldr	r2, [r7, #16]
 800600c:	4313      	orrs	r3, r2
 800600e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4a18      	ldr	r2, [pc, #96]	@ (8006074 <TIM_OC6_SetConfig+0xb8>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00f      	beq.n	8006038 <TIM_OC6_SetConfig+0x7c>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a17      	ldr	r2, [pc, #92]	@ (8006078 <TIM_OC6_SetConfig+0xbc>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d00b      	beq.n	8006038 <TIM_OC6_SetConfig+0x7c>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a16      	ldr	r2, [pc, #88]	@ (800607c <TIM_OC6_SetConfig+0xc0>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d007      	beq.n	8006038 <TIM_OC6_SetConfig+0x7c>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a15      	ldr	r2, [pc, #84]	@ (8006080 <TIM_OC6_SetConfig+0xc4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d003      	beq.n	8006038 <TIM_OC6_SetConfig+0x7c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	4a14      	ldr	r2, [pc, #80]	@ (8006084 <TIM_OC6_SetConfig+0xc8>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d109      	bne.n	800604c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800603e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	029b      	lsls	r3, r3, #10
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	4313      	orrs	r3, r2
 800604a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	697a      	ldr	r2, [r7, #20]
 8006050:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40012c00 	.word	0x40012c00
 8006078:	40013400 	.word	0x40013400
 800607c:	40014000 	.word	0x40014000
 8006080:	40014400 	.word	0x40014400
 8006084:	40014800 	.word	0x40014800

08006088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f003 031f 	and.w	r3, r3, #31
 800609a:	2201      	movs	r2, #1
 800609c:	fa02 f303 	lsl.w	r3, r2, r3
 80060a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6a1a      	ldr	r2, [r3, #32]
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	43db      	mvns	r3, r3
 80060aa:	401a      	ands	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1a      	ldr	r2, [r3, #32]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f003 031f 	and.w	r3, r3, #31
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	fa01 f303 	lsl.w	r3, r1, r3
 80060c0:	431a      	orrs	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	621a      	str	r2, [r3, #32]
}
 80060c6:	bf00      	nop
 80060c8:	371c      	adds	r7, #28
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
	...

080060d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e068      	b.n	80061be <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2202      	movs	r2, #2
 80060f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	689b      	ldr	r3, [r3, #8]
 800610a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a2e      	ldr	r2, [pc, #184]	@ (80061cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d004      	beq.n	8006120 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a2d      	ldr	r2, [pc, #180]	@ (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d108      	bne.n	8006132 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006126:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006138:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4313      	orrs	r3, r2
 8006142:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a1e      	ldr	r2, [pc, #120]	@ (80061cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d01d      	beq.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800615e:	d018      	beq.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1b      	ldr	r2, [pc, #108]	@ (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d013      	beq.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1a      	ldr	r2, [pc, #104]	@ (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00e      	beq.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a18      	ldr	r2, [pc, #96]	@ (80061dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d009      	beq.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a13      	ldr	r2, [pc, #76]	@ (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d004      	beq.n	8006192 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a14      	ldr	r2, [pc, #80]	@ (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d10c      	bne.n	80061ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006198:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	68ba      	ldr	r2, [r7, #8]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68ba      	ldr	r2, [r7, #8]
 80061aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3714      	adds	r7, #20
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40013400 	.word	0x40013400
 80061d4:	40000400 	.word	0x40000400
 80061d8:	40000800 	.word	0x40000800
 80061dc:	40000c00 	.word	0x40000c00
 80061e0:	40014000 	.word	0x40014000

080061e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e065      	b.n	80062cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	4313      	orrs	r3, r2
 8006214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	689b      	ldr	r3, [r3, #8]
 8006220:	4313      	orrs	r3, r2
 8006222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	4313      	orrs	r3, r2
 8006230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	695b      	ldr	r3, [r3, #20]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006266:	4313      	orrs	r3, r2
 8006268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	699b      	ldr	r3, [r3, #24]
 8006274:	041b      	lsls	r3, r3, #16
 8006276:	4313      	orrs	r3, r2
 8006278:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4a16      	ldr	r2, [pc, #88]	@ (80062d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d004      	beq.n	800628e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a14      	ldr	r2, [pc, #80]	@ (80062dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d115      	bne.n	80062ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006298:	051b      	lsls	r3, r3, #20
 800629a:	4313      	orrs	r3, r2
 800629c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	69db      	ldr	r3, [r3, #28]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80062ca:	2300      	movs	r3, #0
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	40012c00 	.word	0x40012c00
 80062dc:	40013400 	.word	0x40013400

080062e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr

080062f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b083      	sub	sp, #12
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062fc:	bf00      	nop
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e040      	b.n	80063b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d106      	bne.n	8006344 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7fc fe54 	bl	8002fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2224      	movs	r2, #36	@ 0x24
 8006348:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0201 	bic.w	r2, r2, #1
 8006358:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800635e:	2b00      	cmp	r3, #0
 8006360:	d002      	beq.n	8006368 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 fae0 	bl	8006928 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f825 	bl	80063b8 <UART_SetConfig>
 800636e:	4603      	mov	r3, r0
 8006370:	2b01      	cmp	r3, #1
 8006372:	d101      	bne.n	8006378 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e01b      	b.n	80063b0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006386:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	689a      	ldr	r2, [r3, #8]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006396:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 fb5f 	bl	8006a6c <UART_CheckIdleState>
 80063ae:	4603      	mov	r3, r0
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063bc:	b08a      	sub	sp, #40	@ 0x28
 80063be:	af00      	add	r7, sp, #0
 80063c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	431a      	orrs	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	695b      	ldr	r3, [r3, #20]
 80063d6:	431a      	orrs	r2, r3
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	69db      	ldr	r3, [r3, #28]
 80063dc:	4313      	orrs	r3, r2
 80063de:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4ba4      	ldr	r3, [pc, #656]	@ (8006678 <UART_SetConfig+0x2c0>)
 80063e8:	4013      	ands	r3, r2
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	6812      	ldr	r2, [r2, #0]
 80063ee:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80063f0:	430b      	orrs	r3, r1
 80063f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	68da      	ldr	r2, [r3, #12]
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	430a      	orrs	r2, r1
 8006408:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	4a99      	ldr	r2, [pc, #612]	@ (800667c <UART_SetConfig+0x2c4>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d004      	beq.n	8006424 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6a1b      	ldr	r3, [r3, #32]
 800641e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006420:	4313      	orrs	r3, r2
 8006422:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006434:	430a      	orrs	r2, r1
 8006436:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4a90      	ldr	r2, [pc, #576]	@ (8006680 <UART_SetConfig+0x2c8>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d126      	bne.n	8006490 <UART_SetConfig+0xd8>
 8006442:	4b90      	ldr	r3, [pc, #576]	@ (8006684 <UART_SetConfig+0x2cc>)
 8006444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	2b03      	cmp	r3, #3
 800644e:	d81b      	bhi.n	8006488 <UART_SetConfig+0xd0>
 8006450:	a201      	add	r2, pc, #4	@ (adr r2, 8006458 <UART_SetConfig+0xa0>)
 8006452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006456:	bf00      	nop
 8006458:	08006469 	.word	0x08006469
 800645c:	08006479 	.word	0x08006479
 8006460:	08006471 	.word	0x08006471
 8006464:	08006481 	.word	0x08006481
 8006468:	2301      	movs	r3, #1
 800646a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800646e:	e116      	b.n	800669e <UART_SetConfig+0x2e6>
 8006470:	2302      	movs	r3, #2
 8006472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006476:	e112      	b.n	800669e <UART_SetConfig+0x2e6>
 8006478:	2304      	movs	r3, #4
 800647a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800647e:	e10e      	b.n	800669e <UART_SetConfig+0x2e6>
 8006480:	2308      	movs	r3, #8
 8006482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006486:	e10a      	b.n	800669e <UART_SetConfig+0x2e6>
 8006488:	2310      	movs	r3, #16
 800648a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800648e:	e106      	b.n	800669e <UART_SetConfig+0x2e6>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a7c      	ldr	r2, [pc, #496]	@ (8006688 <UART_SetConfig+0x2d0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d138      	bne.n	800650c <UART_SetConfig+0x154>
 800649a:	4b7a      	ldr	r3, [pc, #488]	@ (8006684 <UART_SetConfig+0x2cc>)
 800649c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064a0:	f003 030c 	and.w	r3, r3, #12
 80064a4:	2b0c      	cmp	r3, #12
 80064a6:	d82d      	bhi.n	8006504 <UART_SetConfig+0x14c>
 80064a8:	a201      	add	r2, pc, #4	@ (adr r2, 80064b0 <UART_SetConfig+0xf8>)
 80064aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ae:	bf00      	nop
 80064b0:	080064e5 	.word	0x080064e5
 80064b4:	08006505 	.word	0x08006505
 80064b8:	08006505 	.word	0x08006505
 80064bc:	08006505 	.word	0x08006505
 80064c0:	080064f5 	.word	0x080064f5
 80064c4:	08006505 	.word	0x08006505
 80064c8:	08006505 	.word	0x08006505
 80064cc:	08006505 	.word	0x08006505
 80064d0:	080064ed 	.word	0x080064ed
 80064d4:	08006505 	.word	0x08006505
 80064d8:	08006505 	.word	0x08006505
 80064dc:	08006505 	.word	0x08006505
 80064e0:	080064fd 	.word	0x080064fd
 80064e4:	2300      	movs	r3, #0
 80064e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064ea:	e0d8      	b.n	800669e <UART_SetConfig+0x2e6>
 80064ec:	2302      	movs	r3, #2
 80064ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f2:	e0d4      	b.n	800669e <UART_SetConfig+0x2e6>
 80064f4:	2304      	movs	r3, #4
 80064f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064fa:	e0d0      	b.n	800669e <UART_SetConfig+0x2e6>
 80064fc:	2308      	movs	r3, #8
 80064fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006502:	e0cc      	b.n	800669e <UART_SetConfig+0x2e6>
 8006504:	2310      	movs	r3, #16
 8006506:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800650a:	e0c8      	b.n	800669e <UART_SetConfig+0x2e6>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a5e      	ldr	r2, [pc, #376]	@ (800668c <UART_SetConfig+0x2d4>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d125      	bne.n	8006562 <UART_SetConfig+0x1aa>
 8006516:	4b5b      	ldr	r3, [pc, #364]	@ (8006684 <UART_SetConfig+0x2cc>)
 8006518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800651c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006520:	2b30      	cmp	r3, #48	@ 0x30
 8006522:	d016      	beq.n	8006552 <UART_SetConfig+0x19a>
 8006524:	2b30      	cmp	r3, #48	@ 0x30
 8006526:	d818      	bhi.n	800655a <UART_SetConfig+0x1a2>
 8006528:	2b20      	cmp	r3, #32
 800652a:	d00a      	beq.n	8006542 <UART_SetConfig+0x18a>
 800652c:	2b20      	cmp	r3, #32
 800652e:	d814      	bhi.n	800655a <UART_SetConfig+0x1a2>
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <UART_SetConfig+0x182>
 8006534:	2b10      	cmp	r3, #16
 8006536:	d008      	beq.n	800654a <UART_SetConfig+0x192>
 8006538:	e00f      	b.n	800655a <UART_SetConfig+0x1a2>
 800653a:	2300      	movs	r3, #0
 800653c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006540:	e0ad      	b.n	800669e <UART_SetConfig+0x2e6>
 8006542:	2302      	movs	r3, #2
 8006544:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006548:	e0a9      	b.n	800669e <UART_SetConfig+0x2e6>
 800654a:	2304      	movs	r3, #4
 800654c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006550:	e0a5      	b.n	800669e <UART_SetConfig+0x2e6>
 8006552:	2308      	movs	r3, #8
 8006554:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006558:	e0a1      	b.n	800669e <UART_SetConfig+0x2e6>
 800655a:	2310      	movs	r3, #16
 800655c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006560:	e09d      	b.n	800669e <UART_SetConfig+0x2e6>
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a4a      	ldr	r2, [pc, #296]	@ (8006690 <UART_SetConfig+0x2d8>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d125      	bne.n	80065b8 <UART_SetConfig+0x200>
 800656c:	4b45      	ldr	r3, [pc, #276]	@ (8006684 <UART_SetConfig+0x2cc>)
 800656e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006572:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006576:	2bc0      	cmp	r3, #192	@ 0xc0
 8006578:	d016      	beq.n	80065a8 <UART_SetConfig+0x1f0>
 800657a:	2bc0      	cmp	r3, #192	@ 0xc0
 800657c:	d818      	bhi.n	80065b0 <UART_SetConfig+0x1f8>
 800657e:	2b80      	cmp	r3, #128	@ 0x80
 8006580:	d00a      	beq.n	8006598 <UART_SetConfig+0x1e0>
 8006582:	2b80      	cmp	r3, #128	@ 0x80
 8006584:	d814      	bhi.n	80065b0 <UART_SetConfig+0x1f8>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <UART_SetConfig+0x1d8>
 800658a:	2b40      	cmp	r3, #64	@ 0x40
 800658c:	d008      	beq.n	80065a0 <UART_SetConfig+0x1e8>
 800658e:	e00f      	b.n	80065b0 <UART_SetConfig+0x1f8>
 8006590:	2300      	movs	r3, #0
 8006592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006596:	e082      	b.n	800669e <UART_SetConfig+0x2e6>
 8006598:	2302      	movs	r3, #2
 800659a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800659e:	e07e      	b.n	800669e <UART_SetConfig+0x2e6>
 80065a0:	2304      	movs	r3, #4
 80065a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a6:	e07a      	b.n	800669e <UART_SetConfig+0x2e6>
 80065a8:	2308      	movs	r3, #8
 80065aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ae:	e076      	b.n	800669e <UART_SetConfig+0x2e6>
 80065b0:	2310      	movs	r3, #16
 80065b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065b6:	e072      	b.n	800669e <UART_SetConfig+0x2e6>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a35      	ldr	r2, [pc, #212]	@ (8006694 <UART_SetConfig+0x2dc>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d12a      	bne.n	8006618 <UART_SetConfig+0x260>
 80065c2:	4b30      	ldr	r3, [pc, #192]	@ (8006684 <UART_SetConfig+0x2cc>)
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065d0:	d01a      	beq.n	8006608 <UART_SetConfig+0x250>
 80065d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80065d6:	d81b      	bhi.n	8006610 <UART_SetConfig+0x258>
 80065d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065dc:	d00c      	beq.n	80065f8 <UART_SetConfig+0x240>
 80065de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065e2:	d815      	bhi.n	8006610 <UART_SetConfig+0x258>
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d003      	beq.n	80065f0 <UART_SetConfig+0x238>
 80065e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065ec:	d008      	beq.n	8006600 <UART_SetConfig+0x248>
 80065ee:	e00f      	b.n	8006610 <UART_SetConfig+0x258>
 80065f0:	2300      	movs	r3, #0
 80065f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f6:	e052      	b.n	800669e <UART_SetConfig+0x2e6>
 80065f8:	2302      	movs	r3, #2
 80065fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065fe:	e04e      	b.n	800669e <UART_SetConfig+0x2e6>
 8006600:	2304      	movs	r3, #4
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006606:	e04a      	b.n	800669e <UART_SetConfig+0x2e6>
 8006608:	2308      	movs	r3, #8
 800660a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800660e:	e046      	b.n	800669e <UART_SetConfig+0x2e6>
 8006610:	2310      	movs	r3, #16
 8006612:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006616:	e042      	b.n	800669e <UART_SetConfig+0x2e6>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a17      	ldr	r2, [pc, #92]	@ (800667c <UART_SetConfig+0x2c4>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d13a      	bne.n	8006698 <UART_SetConfig+0x2e0>
 8006622:	4b18      	ldr	r3, [pc, #96]	@ (8006684 <UART_SetConfig+0x2cc>)
 8006624:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006628:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800662c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006630:	d01a      	beq.n	8006668 <UART_SetConfig+0x2b0>
 8006632:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006636:	d81b      	bhi.n	8006670 <UART_SetConfig+0x2b8>
 8006638:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800663c:	d00c      	beq.n	8006658 <UART_SetConfig+0x2a0>
 800663e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006642:	d815      	bhi.n	8006670 <UART_SetConfig+0x2b8>
 8006644:	2b00      	cmp	r3, #0
 8006646:	d003      	beq.n	8006650 <UART_SetConfig+0x298>
 8006648:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800664c:	d008      	beq.n	8006660 <UART_SetConfig+0x2a8>
 800664e:	e00f      	b.n	8006670 <UART_SetConfig+0x2b8>
 8006650:	2300      	movs	r3, #0
 8006652:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006656:	e022      	b.n	800669e <UART_SetConfig+0x2e6>
 8006658:	2302      	movs	r3, #2
 800665a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800665e:	e01e      	b.n	800669e <UART_SetConfig+0x2e6>
 8006660:	2304      	movs	r3, #4
 8006662:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006666:	e01a      	b.n	800669e <UART_SetConfig+0x2e6>
 8006668:	2308      	movs	r3, #8
 800666a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800666e:	e016      	b.n	800669e <UART_SetConfig+0x2e6>
 8006670:	2310      	movs	r3, #16
 8006672:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006676:	e012      	b.n	800669e <UART_SetConfig+0x2e6>
 8006678:	efff69f3 	.word	0xefff69f3
 800667c:	40008000 	.word	0x40008000
 8006680:	40013800 	.word	0x40013800
 8006684:	40021000 	.word	0x40021000
 8006688:	40004400 	.word	0x40004400
 800668c:	40004800 	.word	0x40004800
 8006690:	40004c00 	.word	0x40004c00
 8006694:	40005000 	.word	0x40005000
 8006698:	2310      	movs	r3, #16
 800669a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a9f      	ldr	r2, [pc, #636]	@ (8006920 <UART_SetConfig+0x568>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d17a      	bne.n	800679e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80066a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80066ac:	2b08      	cmp	r3, #8
 80066ae:	d824      	bhi.n	80066fa <UART_SetConfig+0x342>
 80066b0:	a201      	add	r2, pc, #4	@ (adr r2, 80066b8 <UART_SetConfig+0x300>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066dd 	.word	0x080066dd
 80066bc:	080066fb 	.word	0x080066fb
 80066c0:	080066e5 	.word	0x080066e5
 80066c4:	080066fb 	.word	0x080066fb
 80066c8:	080066eb 	.word	0x080066eb
 80066cc:	080066fb 	.word	0x080066fb
 80066d0:	080066fb 	.word	0x080066fb
 80066d4:	080066fb 	.word	0x080066fb
 80066d8:	080066f3 	.word	0x080066f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066dc:	f7fd fed4 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 80066e0:	61f8      	str	r0, [r7, #28]
        break;
 80066e2:	e010      	b.n	8006706 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066e4:	4b8f      	ldr	r3, [pc, #572]	@ (8006924 <UART_SetConfig+0x56c>)
 80066e6:	61fb      	str	r3, [r7, #28]
        break;
 80066e8:	e00d      	b.n	8006706 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ea:	f7fd fe35 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 80066ee:	61f8      	str	r0, [r7, #28]
        break;
 80066f0:	e009      	b.n	8006706 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066f6:	61fb      	str	r3, [r7, #28]
        break;
 80066f8:	e005      	b.n	8006706 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80066fa:	2300      	movs	r3, #0
 80066fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006704:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	2b00      	cmp	r3, #0
 800670a:	f000 80fb 	beq.w	8006904 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	685a      	ldr	r2, [r3, #4]
 8006712:	4613      	mov	r3, r2
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	4413      	add	r3, r2
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	429a      	cmp	r2, r3
 800671c:	d305      	bcc.n	800672a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	429a      	cmp	r2, r3
 8006728:	d903      	bls.n	8006732 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006730:	e0e8      	b.n	8006904 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	2200      	movs	r2, #0
 8006736:	461c      	mov	r4, r3
 8006738:	4615      	mov	r5, r2
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	f04f 0300 	mov.w	r3, #0
 8006742:	022b      	lsls	r3, r5, #8
 8006744:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006748:	0222      	lsls	r2, r4, #8
 800674a:	68f9      	ldr	r1, [r7, #12]
 800674c:	6849      	ldr	r1, [r1, #4]
 800674e:	0849      	lsrs	r1, r1, #1
 8006750:	2000      	movs	r0, #0
 8006752:	4688      	mov	r8, r1
 8006754:	4681      	mov	r9, r0
 8006756:	eb12 0a08 	adds.w	sl, r2, r8
 800675a:	eb43 0b09 	adc.w	fp, r3, r9
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	603b      	str	r3, [r7, #0]
 8006766:	607a      	str	r2, [r7, #4]
 8006768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800676c:	4650      	mov	r0, sl
 800676e:	4659      	mov	r1, fp
 8006770:	f7fa f83c 	bl	80007ec <__aeabi_uldivmod>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4613      	mov	r3, r2
 800677a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800677c:	69bb      	ldr	r3, [r7, #24]
 800677e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006782:	d308      	bcc.n	8006796 <UART_SetConfig+0x3de>
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800678a:	d204      	bcs.n	8006796 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	69ba      	ldr	r2, [r7, #24]
 8006792:	60da      	str	r2, [r3, #12]
 8006794:	e0b6      	b.n	8006904 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800679c:	e0b2      	b.n	8006904 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	69db      	ldr	r3, [r3, #28]
 80067a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067a6:	d15e      	bne.n	8006866 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80067a8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d828      	bhi.n	8006802 <UART_SetConfig+0x44a>
 80067b0:	a201      	add	r2, pc, #4	@ (adr r2, 80067b8 <UART_SetConfig+0x400>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	080067dd 	.word	0x080067dd
 80067bc:	080067e5 	.word	0x080067e5
 80067c0:	080067ed 	.word	0x080067ed
 80067c4:	08006803 	.word	0x08006803
 80067c8:	080067f3 	.word	0x080067f3
 80067cc:	08006803 	.word	0x08006803
 80067d0:	08006803 	.word	0x08006803
 80067d4:	08006803 	.word	0x08006803
 80067d8:	080067fb 	.word	0x080067fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067dc:	f7fd fe54 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 80067e0:	61f8      	str	r0, [r7, #28]
        break;
 80067e2:	e014      	b.n	800680e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067e4:	f7fd fe66 	bl	80044b4 <HAL_RCC_GetPCLK2Freq>
 80067e8:	61f8      	str	r0, [r7, #28]
        break;
 80067ea:	e010      	b.n	800680e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067ec:	4b4d      	ldr	r3, [pc, #308]	@ (8006924 <UART_SetConfig+0x56c>)
 80067ee:	61fb      	str	r3, [r7, #28]
        break;
 80067f0:	e00d      	b.n	800680e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067f2:	f7fd fdb1 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 80067f6:	61f8      	str	r0, [r7, #28]
        break;
 80067f8:	e009      	b.n	800680e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067fe:	61fb      	str	r3, [r7, #28]
        break;
 8006800:	e005      	b.n	800680e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006802:	2300      	movs	r3, #0
 8006804:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800680c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d077      	beq.n	8006904 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	005a      	lsls	r2, r3, #1
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	085b      	lsrs	r3, r3, #1
 800681e:	441a      	add	r2, r3
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	fbb2 f3f3 	udiv	r3, r2, r3
 8006828:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	2b0f      	cmp	r3, #15
 800682e:	d916      	bls.n	800685e <UART_SetConfig+0x4a6>
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006836:	d212      	bcs.n	800685e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	b29b      	uxth	r3, r3
 800683c:	f023 030f 	bic.w	r3, r3, #15
 8006840:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	085b      	lsrs	r3, r3, #1
 8006846:	b29b      	uxth	r3, r3
 8006848:	f003 0307 	and.w	r3, r3, #7
 800684c:	b29a      	uxth	r2, r3
 800684e:	8afb      	ldrh	r3, [r7, #22]
 8006850:	4313      	orrs	r3, r2
 8006852:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	8afa      	ldrh	r2, [r7, #22]
 800685a:	60da      	str	r2, [r3, #12]
 800685c:	e052      	b.n	8006904 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006864:	e04e      	b.n	8006904 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006866:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800686a:	2b08      	cmp	r3, #8
 800686c:	d827      	bhi.n	80068be <UART_SetConfig+0x506>
 800686e:	a201      	add	r2, pc, #4	@ (adr r2, 8006874 <UART_SetConfig+0x4bc>)
 8006870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006874:	08006899 	.word	0x08006899
 8006878:	080068a1 	.word	0x080068a1
 800687c:	080068a9 	.word	0x080068a9
 8006880:	080068bf 	.word	0x080068bf
 8006884:	080068af 	.word	0x080068af
 8006888:	080068bf 	.word	0x080068bf
 800688c:	080068bf 	.word	0x080068bf
 8006890:	080068bf 	.word	0x080068bf
 8006894:	080068b7 	.word	0x080068b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006898:	f7fd fdf6 	bl	8004488 <HAL_RCC_GetPCLK1Freq>
 800689c:	61f8      	str	r0, [r7, #28]
        break;
 800689e:	e014      	b.n	80068ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80068a0:	f7fd fe08 	bl	80044b4 <HAL_RCC_GetPCLK2Freq>
 80068a4:	61f8      	str	r0, [r7, #28]
        break;
 80068a6:	e010      	b.n	80068ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a8:	4b1e      	ldr	r3, [pc, #120]	@ (8006924 <UART_SetConfig+0x56c>)
 80068aa:	61fb      	str	r3, [r7, #28]
        break;
 80068ac:	e00d      	b.n	80068ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ae:	f7fd fd53 	bl	8004358 <HAL_RCC_GetSysClockFreq>
 80068b2:	61f8      	str	r0, [r7, #28]
        break;
 80068b4:	e009      	b.n	80068ca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ba:	61fb      	str	r3, [r7, #28]
        break;
 80068bc:	e005      	b.n	80068ca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80068c8:	bf00      	nop
    }

    if (pclk != 0U)
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d019      	beq.n	8006904 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	685b      	ldr	r3, [r3, #4]
 80068d4:	085a      	lsrs	r2, r3, #1
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	441a      	add	r2, r3
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068e4:	69bb      	ldr	r3, [r7, #24]
 80068e6:	2b0f      	cmp	r3, #15
 80068e8:	d909      	bls.n	80068fe <UART_SetConfig+0x546>
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068f0:	d205      	bcs.n	80068fe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60da      	str	r2, [r3, #12]
 80068fc:	e002      	b.n	8006904 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006910:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006914:	4618      	mov	r0, r3
 8006916:	3728      	adds	r7, #40	@ 0x28
 8006918:	46bd      	mov	sp, r7
 800691a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800691e:	bf00      	nop
 8006920:	40008000 	.word	0x40008000
 8006924:	00f42400 	.word	0x00f42400

08006928 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006934:	f003 0308 	and.w	r3, r3, #8
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00a      	beq.n	8006952 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00a      	beq.n	8006974 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	430a      	orrs	r2, r1
 8006972:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d00a      	beq.n	8006996 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	430a      	orrs	r2, r1
 8006994:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699a:	f003 0304 	and.w	r3, r3, #4
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00a      	beq.n	80069b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069bc:	f003 0310 	and.w	r3, r3, #16
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069de:	f003 0320 	and.w	r3, r3, #32
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00a      	beq.n	80069fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	689b      	ldr	r3, [r3, #8]
 80069ec:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d01a      	beq.n	8006a3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a26:	d10a      	bne.n	8006a3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	430a      	orrs	r2, r1
 8006a3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00a      	beq.n	8006a60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	430a      	orrs	r2, r1
 8006a5e:	605a      	str	r2, [r3, #4]
  }
}
 8006a60:	bf00      	nop
 8006a62:	370c      	adds	r7, #12
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b098      	sub	sp, #96	@ 0x60
 8006a70:	af02      	add	r7, sp, #8
 8006a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a7c:	f7fc fc32 	bl	80032e4 <HAL_GetTick>
 8006a80:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f003 0308 	and.w	r3, r3, #8
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d12e      	bne.n	8006aee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 f88c 	bl	8006bbc <UART_WaitOnFlagUntilTimeout>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d021      	beq.n	8006aee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006abe:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ac8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006aca:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006ace:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e6      	bne.n	8006aaa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e062      	b.n	8006bb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f003 0304 	and.w	r3, r3, #4
 8006af8:	2b04      	cmp	r3, #4
 8006afa:	d149      	bne.n	8006b90 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006afc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b04:	2200      	movs	r2, #0
 8006b06:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f856 	bl	8006bbc <UART_WaitOnFlagUntilTimeout>
 8006b10:	4603      	mov	r3, r0
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d03c      	beq.n	8006b90 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	e853 3f00 	ldrex	r3, [r3]
 8006b22:	623b      	str	r3, [r7, #32]
   return(result);
 8006b24:	6a3b      	ldr	r3, [r7, #32]
 8006b26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b34:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b3c:	e841 2300 	strex	r3, r2, [r1]
 8006b40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d1e6      	bne.n	8006b16 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	3308      	adds	r3, #8
 8006b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f023 0301 	bic.w	r3, r3, #1
 8006b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	3308      	adds	r3, #8
 8006b66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b68:	61fa      	str	r2, [r7, #28]
 8006b6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	69b9      	ldr	r1, [r7, #24]
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	617b      	str	r3, [r7, #20]
   return(result);
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e5      	bne.n	8006b48 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2220      	movs	r2, #32
 8006b80:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e011      	b.n	8006bb4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2220      	movs	r2, #32
 8006b94:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2220      	movs	r2, #32
 8006b9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3758      	adds	r7, #88	@ 0x58
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	603b      	str	r3, [r7, #0]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bcc:	e04f      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd4:	d04b      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bd6:	f7fc fb85 	bl	80032e4 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d302      	bcc.n	8006bec <UART_WaitOnFlagUntilTimeout+0x30>
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d101      	bne.n	8006bf0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bec:	2303      	movs	r3, #3
 8006bee:	e04e      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d037      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	2b80      	cmp	r3, #128	@ 0x80
 8006c02:	d034      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	2b40      	cmp	r3, #64	@ 0x40
 8006c08:	d031      	beq.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	69db      	ldr	r3, [r3, #28]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b08      	cmp	r3, #8
 8006c16:	d110      	bne.n	8006c3a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f000 f838 	bl	8006c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2208      	movs	r2, #8
 8006c2a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e029      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	69db      	ldr	r3, [r3, #28]
 8006c40:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c44:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c48:	d111      	bne.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c54:	68f8      	ldr	r0, [r7, #12]
 8006c56:	f000 f81e 	bl	8006c96 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e00f      	b.n	8006c8e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69da      	ldr	r2, [r3, #28]
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	4013      	ands	r3, r2
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	bf0c      	ite	eq
 8006c7e:	2301      	moveq	r3, #1
 8006c80:	2300      	movne	r3, #0
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	79fb      	ldrb	r3, [r7, #7]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d0a0      	beq.n	8006bce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}

08006c96 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c96:	b480      	push	{r7}
 8006c98:	b095      	sub	sp, #84	@ 0x54
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ca6:	e853 3f00 	ldrex	r3, [r3]
 8006caa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	461a      	mov	r2, r3
 8006cba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cbe:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cc2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cc4:	e841 2300 	strex	r3, r2, [r1]
 8006cc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1e6      	bne.n	8006c9e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3308      	adds	r3, #8
 8006cd6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	e853 3f00 	ldrex	r3, [r3]
 8006cde:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	f023 0301 	bic.w	r3, r3, #1
 8006ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3308      	adds	r3, #8
 8006cee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cf0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cf8:	e841 2300 	strex	r3, r2, [r1]
 8006cfc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1e5      	bne.n	8006cd0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d118      	bne.n	8006d3e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	f023 0310 	bic.w	r3, r3, #16
 8006d20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	461a      	mov	r2, r3
 8006d28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d2a:	61bb      	str	r3, [r7, #24]
 8006d2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	6979      	ldr	r1, [r7, #20]
 8006d30:	69ba      	ldr	r2, [r7, #24]
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	613b      	str	r3, [r7, #16]
   return(result);
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e6      	bne.n	8006d0c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006d52:	bf00      	nop
 8006d54:	3754      	adds	r7, #84	@ 0x54
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
	...

08006d60 <__NVIC_SetPriority>:
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	6039      	str	r1, [r7, #0]
 8006d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	db0a      	blt.n	8006d8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	b2da      	uxtb	r2, r3
 8006d78:	490c      	ldr	r1, [pc, #48]	@ (8006dac <__NVIC_SetPriority+0x4c>)
 8006d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d7e:	0112      	lsls	r2, r2, #4
 8006d80:	b2d2      	uxtb	r2, r2
 8006d82:	440b      	add	r3, r1
 8006d84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006d88:	e00a      	b.n	8006da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	4908      	ldr	r1, [pc, #32]	@ (8006db0 <__NVIC_SetPriority+0x50>)
 8006d90:	79fb      	ldrb	r3, [r7, #7]
 8006d92:	f003 030f 	and.w	r3, r3, #15
 8006d96:	3b04      	subs	r3, #4
 8006d98:	0112      	lsls	r2, r2, #4
 8006d9a:	b2d2      	uxtb	r2, r2
 8006d9c:	440b      	add	r3, r1
 8006d9e:	761a      	strb	r2, [r3, #24]
}
 8006da0:	bf00      	nop
 8006da2:	370c      	adds	r7, #12
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr
 8006dac:	e000e100 	.word	0xe000e100
 8006db0:	e000ed00 	.word	0xe000ed00

08006db4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006db4:	b580      	push	{r7, lr}
 8006db6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006db8:	4b05      	ldr	r3, [pc, #20]	@ (8006dd0 <SysTick_Handler+0x1c>)
 8006dba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006dbc:	f001 ffc6 	bl	8008d4c <xTaskGetSchedulerState>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b01      	cmp	r3, #1
 8006dc4:	d001      	beq.n	8006dca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006dc6:	f002 fe7f 	bl	8009ac8 <xPortSysTickHandler>
  }
}
 8006dca:	bf00      	nop
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	e000e010 	.word	0xe000e010

08006dd4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006dd8:	2100      	movs	r1, #0
 8006dda:	f06f 0004 	mvn.w	r0, #4
 8006dde:	f7ff ffbf 	bl	8006d60 <__NVIC_SetPriority>
#endif
}
 8006de2:	bf00      	nop
 8006de4:	bd80      	pop	{r7, pc}
	...

08006de8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006dee:	f3ef 8305 	mrs	r3, IPSR
 8006df2:	603b      	str	r3, [r7, #0]
  return(result);
 8006df4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d003      	beq.n	8006e02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006dfa:	f06f 0305 	mvn.w	r3, #5
 8006dfe:	607b      	str	r3, [r7, #4]
 8006e00:	e00c      	b.n	8006e1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006e02:	4b0a      	ldr	r3, [pc, #40]	@ (8006e2c <osKernelInitialize+0x44>)
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d105      	bne.n	8006e16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006e0a:	4b08      	ldr	r3, [pc, #32]	@ (8006e2c <osKernelInitialize+0x44>)
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006e10:	2300      	movs	r3, #0
 8006e12:	607b      	str	r3, [r7, #4]
 8006e14:	e002      	b.n	8006e1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006e16:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e1c:	687b      	ldr	r3, [r7, #4]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr
 8006e2a:	bf00      	nop
 8006e2c:	20000310 	.word	0x20000310

08006e30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e36:	f3ef 8305 	mrs	r3, IPSR
 8006e3a:	603b      	str	r3, [r7, #0]
  return(result);
 8006e3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d003      	beq.n	8006e4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8006e42:	f06f 0305 	mvn.w	r3, #5
 8006e46:	607b      	str	r3, [r7, #4]
 8006e48:	e010      	b.n	8006e6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e78 <osKernelStart+0x48>)
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d109      	bne.n	8006e66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006e52:	f7ff ffbf 	bl	8006dd4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006e56:	4b08      	ldr	r3, [pc, #32]	@ (8006e78 <osKernelStart+0x48>)
 8006e58:	2202      	movs	r2, #2
 8006e5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006e5c:	f001 fb28 	bl	80084b0 <vTaskStartScheduler>
      stat = osOK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	607b      	str	r3, [r7, #4]
 8006e64:	e002      	b.n	8006e6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006e66:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006e6c:	687b      	ldr	r3, [r7, #4]
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
 8006e76:	bf00      	nop
 8006e78:	20000310 	.word	0x20000310

08006e7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b08e      	sub	sp, #56	@ 0x38
 8006e80:	af04      	add	r7, sp, #16
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006e8c:	f3ef 8305 	mrs	r3, IPSR
 8006e90:	617b      	str	r3, [r7, #20]
  return(result);
 8006e92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d17e      	bne.n	8006f96 <osThreadNew+0x11a>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d07b      	beq.n	8006f96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006e9e:	2380      	movs	r3, #128	@ 0x80
 8006ea0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006ea2:	2318      	movs	r3, #24
 8006ea4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006eaa:	f04f 33ff 	mov.w	r3, #4294967295
 8006eae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d045      	beq.n	8006f42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <osThreadNew+0x48>
        name = attr->name;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	699b      	ldr	r3, [r3, #24]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d008      	beq.n	8006eea <osThreadNew+0x6e>
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	2b38      	cmp	r3, #56	@ 0x38
 8006edc:	d805      	bhi.n	8006eea <osThreadNew+0x6e>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d001      	beq.n	8006eee <osThreadNew+0x72>
        return (NULL);
 8006eea:	2300      	movs	r3, #0
 8006eec:	e054      	b.n	8006f98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d003      	beq.n	8006efe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	695b      	ldr	r3, [r3, #20]
 8006efa:	089b      	lsrs	r3, r3, #2
 8006efc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	689b      	ldr	r3, [r3, #8]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d00e      	beq.n	8006f24 <osThreadNew+0xa8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	2b5b      	cmp	r3, #91	@ 0x5b
 8006f0c:	d90a      	bls.n	8006f24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d006      	beq.n	8006f24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	695b      	ldr	r3, [r3, #20]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <osThreadNew+0xa8>
        mem = 1;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	61bb      	str	r3, [r7, #24]
 8006f22:	e010      	b.n	8006f46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d10c      	bne.n	8006f46 <osThreadNew+0xca>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d108      	bne.n	8006f46 <osThreadNew+0xca>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <osThreadNew+0xca>
          mem = 0;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	61bb      	str	r3, [r7, #24]
 8006f40:	e001      	b.n	8006f46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006f42:	2300      	movs	r3, #0
 8006f44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	2b01      	cmp	r3, #1
 8006f4a:	d110      	bne.n	8006f6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006f54:	9202      	str	r2, [sp, #8]
 8006f56:	9301      	str	r3, [sp, #4]
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	9300      	str	r3, [sp, #0]
 8006f5c:	68bb      	ldr	r3, [r7, #8]
 8006f5e:	6a3a      	ldr	r2, [r7, #32]
 8006f60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f62:	68f8      	ldr	r0, [r7, #12]
 8006f64:	f001 f8c8 	bl	80080f8 <xTaskCreateStatic>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	613b      	str	r3, [r7, #16]
 8006f6c:	e013      	b.n	8006f96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d110      	bne.n	8006f96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	b29a      	uxth	r2, r3
 8006f78:	f107 0310 	add.w	r3, r7, #16
 8006f7c:	9301      	str	r3, [sp, #4]
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	68bb      	ldr	r3, [r7, #8]
 8006f84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f001 f916 	bl	80081b8 <xTaskCreate>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d001      	beq.n	8006f96 <osThreadNew+0x11a>
            hTask = NULL;
 8006f92:	2300      	movs	r3, #0
 8006f94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006f96:	693b      	ldr	r3, [r7, #16]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3728      	adds	r7, #40	@ 0x28
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fa8:	f3ef 8305 	mrs	r3, IPSR
 8006fac:	60bb      	str	r3, [r7, #8]
  return(result);
 8006fae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <osDelay+0x1c>
    stat = osErrorISR;
 8006fb4:	f06f 0305 	mvn.w	r3, #5
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	e007      	b.n	8006fcc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d002      	beq.n	8006fcc <osDelay+0x2c>
      vTaskDelay(ticks);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f001 fa3c 	bl	8008444 <vTaskDelay>
    }
  }

  return (stat);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f002 fb8e 	bl	8009700 <pvTimerGetTimerID>
 8006fe4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d005      	beq.n	8006ff8 <TimerCallback+0x22>
    callb->func (callb->arg);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	68fa      	ldr	r2, [r7, #12]
 8006ff2:	6852      	ldr	r2, [r2, #4]
 8006ff4:	4610      	mov	r0, r2
 8006ff6:	4798      	blx	r3
  }
}
 8006ff8:	bf00      	nop
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007000:	b580      	push	{r7, lr}
 8007002:	b08c      	sub	sp, #48	@ 0x30
 8007004:	af02      	add	r7, sp, #8
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	607a      	str	r2, [r7, #4]
 800700a:	603b      	str	r3, [r7, #0]
 800700c:	460b      	mov	r3, r1
 800700e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007010:	2300      	movs	r3, #0
 8007012:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007014:	f3ef 8305 	mrs	r3, IPSR
 8007018:	613b      	str	r3, [r7, #16]
  return(result);
 800701a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800701c:	2b00      	cmp	r3, #0
 800701e:	d163      	bne.n	80070e8 <osTimerNew+0xe8>
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d060      	beq.n	80070e8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8007026:	2008      	movs	r0, #8
 8007028:	f002 fde0 	bl	8009bec <pvPortMalloc>
 800702c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d059      	beq.n	80070e8 <osTimerNew+0xe8>
      callb->func = func;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8007040:	7afb      	ldrb	r3, [r7, #11]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <osTimerNew+0x4c>
        reload = pdFALSE;
 8007046:	2300      	movs	r3, #0
 8007048:	61fb      	str	r3, [r7, #28]
 800704a:	e001      	b.n	8007050 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8007050:	f04f 33ff 	mov.w	r3, #4294967295
 8007054:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8007056:	2300      	movs	r3, #0
 8007058:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01c      	beq.n	800709a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <osTimerNew+0x6e>
          name = attr->name;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d006      	beq.n	8007084 <osTimerNew+0x84>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	2b2b      	cmp	r3, #43	@ 0x2b
 800707c:	d902      	bls.n	8007084 <osTimerNew+0x84>
          mem = 1;
 800707e:	2301      	movs	r3, #1
 8007080:	61bb      	str	r3, [r7, #24]
 8007082:	e00c      	b.n	800709e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d108      	bne.n	800709e <osTimerNew+0x9e>
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d104      	bne.n	800709e <osTimerNew+0x9e>
            mem = 0;
 8007094:	2300      	movs	r3, #0
 8007096:	61bb      	str	r3, [r7, #24]
 8007098:	e001      	b.n	800709e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800709a:	2300      	movs	r3, #0
 800709c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800709e:	69bb      	ldr	r3, [r7, #24]
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d10c      	bne.n	80070be <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	9301      	str	r3, [sp, #4]
 80070aa:	4b12      	ldr	r3, [pc, #72]	@ (80070f4 <osTimerNew+0xf4>)
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	69fa      	ldr	r2, [r7, #28]
 80070b2:	2101      	movs	r1, #1
 80070b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070b6:	f001 ff96 	bl	8008fe6 <xTimerCreateStatic>
 80070ba:	6238      	str	r0, [r7, #32]
 80070bc:	e00b      	b.n	80070d6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80070be:	69bb      	ldr	r3, [r7, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d108      	bne.n	80070d6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80070c4:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <osTimerNew+0xf4>)
 80070c6:	9300      	str	r3, [sp, #0]
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	69fa      	ldr	r2, [r7, #28]
 80070cc:	2101      	movs	r1, #1
 80070ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80070d0:	f001 ff68 	bl	8008fa4 <xTimerCreate>
 80070d4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80070d6:	6a3b      	ldr	r3, [r7, #32]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d105      	bne.n	80070e8 <osTimerNew+0xe8>
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <osTimerNew+0xe8>
        vPortFree (callb);
 80070e2:	6978      	ldr	r0, [r7, #20]
 80070e4:	f002 fe50 	bl	8009d88 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80070e8:	6a3b      	ldr	r3, [r7, #32]
}
 80070ea:	4618      	mov	r0, r3
 80070ec:	3728      	adds	r7, #40	@ 0x28
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop
 80070f4:	08006fd7 	.word	0x08006fd7

080070f8 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b088      	sub	sp, #32
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007106:	f3ef 8305 	mrs	r3, IPSR
 800710a:	60fb      	str	r3, [r7, #12]
  return(result);
 800710c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <osTimerStart+0x22>
    stat = osErrorISR;
 8007112:	f06f 0305 	mvn.w	r3, #5
 8007116:	617b      	str	r3, [r7, #20]
 8007118:	e017      	b.n	800714a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d103      	bne.n	8007128 <osTimerStart+0x30>
    stat = osErrorParameter;
 8007120:	f06f 0303 	mvn.w	r3, #3
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	e010      	b.n	800714a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8007128:	2300      	movs	r3, #0
 800712a:	9300      	str	r3, [sp, #0]
 800712c:	2300      	movs	r3, #0
 800712e:	683a      	ldr	r2, [r7, #0]
 8007130:	2104      	movs	r1, #4
 8007132:	6938      	ldr	r0, [r7, #16]
 8007134:	f001 ffd4 	bl	80090e0 <xTimerGenericCommand>
 8007138:	4603      	mov	r3, r0
 800713a:	2b01      	cmp	r3, #1
 800713c:	d102      	bne.n	8007144 <osTimerStart+0x4c>
      stat = osOK;
 800713e:	2300      	movs	r3, #0
 8007140:	617b      	str	r3, [r7, #20]
 8007142:	e002      	b.n	800714a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8007144:	f06f 0302 	mvn.w	r3, #2
 8007148:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800714a:	697b      	ldr	r3, [r7, #20]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3718      	adds	r7, #24
 8007150:	46bd      	mov	sp, r7
 8007152:	bd80      	pop	{r7, pc}

08007154 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8007154:	b580      	push	{r7, lr}
 8007156:	b08a      	sub	sp, #40	@ 0x28
 8007158:	af02      	add	r7, sp, #8
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8007160:	2300      	movs	r3, #0
 8007162:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007164:	f3ef 8305 	mrs	r3, IPSR
 8007168:	613b      	str	r3, [r7, #16]
  return(result);
 800716a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800716c:	2b00      	cmp	r3, #0
 800716e:	d15f      	bne.n	8007230 <osMessageQueueNew+0xdc>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d05c      	beq.n	8007230 <osMessageQueueNew+0xdc>
 8007176:	68bb      	ldr	r3, [r7, #8]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d059      	beq.n	8007230 <osMessageQueueNew+0xdc>
    mem = -1;
 800717c:	f04f 33ff 	mov.w	r3, #4294967295
 8007180:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d029      	beq.n	80071dc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d012      	beq.n	80071b6 <osMessageQueueNew+0x62>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	2b4f      	cmp	r3, #79	@ 0x4f
 8007196:	d90e      	bls.n	80071b6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	695a      	ldr	r2, [r3, #20]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	68b9      	ldr	r1, [r7, #8]
 80071a8:	fb01 f303 	mul.w	r3, r1, r3
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d302      	bcc.n	80071b6 <osMessageQueueNew+0x62>
        mem = 1;
 80071b0:	2301      	movs	r3, #1
 80071b2:	61bb      	str	r3, [r7, #24]
 80071b4:	e014      	b.n	80071e0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d110      	bne.n	80071e0 <osMessageQueueNew+0x8c>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	68db      	ldr	r3, [r3, #12]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10c      	bne.n	80071e0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d108      	bne.n	80071e0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	695b      	ldr	r3, [r3, #20]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d104      	bne.n	80071e0 <osMessageQueueNew+0x8c>
          mem = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	e001      	b.n	80071e0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	2b01      	cmp	r3, #1
 80071e4:	d10b      	bne.n	80071fe <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691a      	ldr	r2, [r3, #16]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	689b      	ldr	r3, [r3, #8]
 80071ee:	2100      	movs	r1, #0
 80071f0:	9100      	str	r1, [sp, #0]
 80071f2:	68b9      	ldr	r1, [r7, #8]
 80071f4:	68f8      	ldr	r0, [r7, #12]
 80071f6:	f000 fa31 	bl	800765c <xQueueGenericCreateStatic>
 80071fa:	61f8      	str	r0, [r7, #28]
 80071fc:	e008      	b.n	8007210 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d105      	bne.n	8007210 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8007204:	2200      	movs	r2, #0
 8007206:	68b9      	ldr	r1, [r7, #8]
 8007208:	68f8      	ldr	r0, [r7, #12]
 800720a:	f000 faa4 	bl	8007756 <xQueueGenericCreate>
 800720e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d00c      	beq.n	8007230 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d003      	beq.n	8007224 <osMessageQueueNew+0xd0>
        name = attr->name;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	617b      	str	r3, [r7, #20]
 8007222:	e001      	b.n	8007228 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8007224:	2300      	movs	r3, #0
 8007226:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8007228:	6979      	ldr	r1, [r7, #20]
 800722a:	69f8      	ldr	r0, [r7, #28]
 800722c:	f000 ff06 	bl	800803c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8007230:	69fb      	ldr	r3, [r7, #28]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3720      	adds	r7, #32
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af00      	add	r7, sp, #0
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	4613      	mov	r3, r2
 800724a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8007250:	2300      	movs	r3, #0
 8007252:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007254:	f3ef 8305 	mrs	r3, IPSR
 8007258:	617b      	str	r3, [r7, #20]
  return(result);
 800725a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800725c:	2b00      	cmp	r3, #0
 800725e:	d028      	beq.n	80072b2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d005      	beq.n	8007272 <osMessageQueuePut+0x36>
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <osMessageQueuePut+0x36>
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8007272:	f06f 0303 	mvn.w	r3, #3
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	e038      	b.n	80072ec <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800727a:	2300      	movs	r3, #0
 800727c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800727e:	f107 0210 	add.w	r2, r7, #16
 8007282:	2300      	movs	r3, #0
 8007284:	68b9      	ldr	r1, [r7, #8]
 8007286:	69b8      	ldr	r0, [r7, #24]
 8007288:	f000 fbc6 	bl	8007a18 <xQueueGenericSendFromISR>
 800728c:	4603      	mov	r3, r0
 800728e:	2b01      	cmp	r3, #1
 8007290:	d003      	beq.n	800729a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8007292:	f06f 0302 	mvn.w	r3, #2
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	e028      	b.n	80072ec <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d025      	beq.n	80072ec <osMessageQueuePut+0xb0>
 80072a0:	4b15      	ldr	r3, [pc, #84]	@ (80072f8 <osMessageQueuePut+0xbc>)
 80072a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	f3bf 8f6f 	isb	sy
 80072b0:	e01c      	b.n	80072ec <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d002      	beq.n	80072be <osMessageQueuePut+0x82>
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80072be:	f06f 0303 	mvn.w	r3, #3
 80072c2:	61fb      	str	r3, [r7, #28]
 80072c4:	e012      	b.n	80072ec <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80072c6:	2300      	movs	r3, #0
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	69b8      	ldr	r0, [r7, #24]
 80072ce:	f000 faa1 	bl	8007814 <xQueueGenericSend>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d009      	beq.n	80072ec <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d003      	beq.n	80072e6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80072de:	f06f 0301 	mvn.w	r3, #1
 80072e2:	61fb      	str	r3, [r7, #28]
 80072e4:	e002      	b.n	80072ec <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80072e6:	f06f 0302 	mvn.w	r3, #2
 80072ea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80072ec:	69fb      	ldr	r3, [r7, #28]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3720      	adds	r7, #32
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
 80072f6:	bf00      	nop
 80072f8:	e000ed04 	.word	0xe000ed04

080072fc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
 8007308:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800730e:	2300      	movs	r3, #0
 8007310:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007312:	f3ef 8305 	mrs	r3, IPSR
 8007316:	617b      	str	r3, [r7, #20]
  return(result);
 8007318:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800731a:	2b00      	cmp	r3, #0
 800731c:	d028      	beq.n	8007370 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d005      	beq.n	8007330 <osMessageQueueGet+0x34>
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <osMessageQueueGet+0x34>
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8007330:	f06f 0303 	mvn.w	r3, #3
 8007334:	61fb      	str	r3, [r7, #28]
 8007336:	e037      	b.n	80073a8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8007338:	2300      	movs	r3, #0
 800733a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800733c:	f107 0310 	add.w	r3, r7, #16
 8007340:	461a      	mov	r2, r3
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	69b8      	ldr	r0, [r7, #24]
 8007346:	f000 fce7 	bl	8007d18 <xQueueReceiveFromISR>
 800734a:	4603      	mov	r3, r0
 800734c:	2b01      	cmp	r3, #1
 800734e:	d003      	beq.n	8007358 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8007350:	f06f 0302 	mvn.w	r3, #2
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	e027      	b.n	80073a8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d024      	beq.n	80073a8 <osMessageQueueGet+0xac>
 800735e:	4b15      	ldr	r3, [pc, #84]	@ (80073b4 <osMessageQueueGet+0xb8>)
 8007360:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007364:	601a      	str	r2, [r3, #0]
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	f3bf 8f6f 	isb	sy
 800736e:	e01b      	b.n	80073a8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <osMessageQueueGet+0x80>
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d103      	bne.n	8007384 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800737c:	f06f 0303 	mvn.w	r3, #3
 8007380:	61fb      	str	r3, [r7, #28]
 8007382:	e011      	b.n	80073a8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8007384:	683a      	ldr	r2, [r7, #0]
 8007386:	68b9      	ldr	r1, [r7, #8]
 8007388:	69b8      	ldr	r0, [r7, #24]
 800738a:	f000 fbe3 	bl	8007b54 <xQueueReceive>
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	d009      	beq.n	80073a8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d003      	beq.n	80073a2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800739a:	f06f 0301 	mvn.w	r3, #1
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	e002      	b.n	80073a8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80073a2:	f06f 0302 	mvn.w	r3, #2
 80073a6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80073a8:	69fb      	ldr	r3, [r7, #28]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3720      	adds	r7, #32
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	e000ed04 	.word	0xe000ed04

080073b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4a07      	ldr	r2, [pc, #28]	@ (80073e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80073c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	4a06      	ldr	r2, [pc, #24]	@ (80073e8 <vApplicationGetIdleTaskMemory+0x30>)
 80073ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2280      	movs	r2, #128	@ 0x80
 80073d4:	601a      	str	r2, [r3, #0]
}
 80073d6:	bf00      	nop
 80073d8:	3714      	adds	r7, #20
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	20000314 	.word	0x20000314
 80073e8:	20000370 	.word	0x20000370

080073ec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	60b9      	str	r1, [r7, #8]
 80073f6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	4a07      	ldr	r2, [pc, #28]	@ (8007418 <vApplicationGetTimerTaskMemory+0x2c>)
 80073fc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	4a06      	ldr	r2, [pc, #24]	@ (800741c <vApplicationGetTimerTaskMemory+0x30>)
 8007402:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800740a:	601a      	str	r2, [r3, #0]
}
 800740c:	bf00      	nop
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	20000570 	.word	0x20000570
 800741c:	200005cc 	.word	0x200005cc

08007420 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007420:	b480      	push	{r7}
 8007422:	b083      	sub	sp, #12
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f103 0208 	add.w	r2, r3, #8
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f04f 32ff 	mov.w	r2, #4294967295
 8007438:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f103 0208 	add.w	r2, r3, #8
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f103 0208 	add.w	r2, r3, #8
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	2200      	movs	r2, #0
 8007452:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007454:	bf00      	nop
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr

08007460 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007460:	b480      	push	{r7}
 8007462:	b083      	sub	sp, #12
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800746e:	bf00      	nop
 8007470:	370c      	adds	r7, #12
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	683a      	ldr	r2, [r7, #0]
 800749e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	683a      	ldr	r2, [r7, #0]
 80074a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	1c5a      	adds	r2, r3, #1
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	601a      	str	r2, [r3, #0]
}
 80074b6:	bf00      	nop
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80074c2:	b480      	push	{r7}
 80074c4:	b085      	sub	sp, #20
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
 80074ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d8:	d103      	bne.n	80074e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	60fb      	str	r3, [r7, #12]
 80074e0:	e00c      	b.n	80074fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3308      	adds	r3, #8
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	e002      	b.n	80074f0 <vListInsert+0x2e>
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68ba      	ldr	r2, [r7, #8]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d2f6      	bcs.n	80074ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	685a      	ldr	r2, [r3, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	683a      	ldr	r2, [r7, #0]
 8007516:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	687a      	ldr	r2, [r7, #4]
 800751c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	601a      	str	r2, [r3, #0]
}
 8007528:	bf00      	nop
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007534:	b480      	push	{r7}
 8007536:	b085      	sub	sp, #20
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	691b      	ldr	r3, [r3, #16]
 8007540:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	6892      	ldr	r2, [r2, #8]
 800754a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	687a      	ldr	r2, [r7, #4]
 8007552:	6852      	ldr	r2, [r2, #4]
 8007554:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	687a      	ldr	r2, [r7, #4]
 800755c:	429a      	cmp	r2, r3
 800755e:	d103      	bne.n	8007568 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	689a      	ldr	r2, [r3, #8]
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	1e5a      	subs	r2, r3, #1
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
}
 800757c:	4618      	mov	r0, r3
 800757e:	3714      	adds	r7, #20
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b084      	sub	sp, #16
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d10b      	bne.n	80075b4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800759c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075a0:	f383 8811 	msr	BASEPRI, r3
 80075a4:	f3bf 8f6f 	isb	sy
 80075a8:	f3bf 8f4f 	dsb	sy
 80075ac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80075ae:	bf00      	nop
 80075b0:	bf00      	nop
 80075b2:	e7fd      	b.n	80075b0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80075b4:	f002 f9f8 	bl	80099a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c0:	68f9      	ldr	r1, [r7, #12]
 80075c2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80075c4:	fb01 f303 	mul.w	r3, r1, r3
 80075c8:	441a      	add	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2200      	movs	r2, #0
 80075d2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681a      	ldr	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e4:	3b01      	subs	r3, #1
 80075e6:	68f9      	ldr	r1, [r7, #12]
 80075e8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80075ea:	fb01 f303 	mul.w	r3, r1, r3
 80075ee:	441a      	add	r2, r3
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	22ff      	movs	r2, #255	@ 0xff
 80075f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	22ff      	movs	r2, #255	@ 0xff
 8007600:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d114      	bne.n	8007634 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d01a      	beq.n	8007648 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3310      	adds	r3, #16
 8007616:	4618      	mov	r0, r3
 8007618:	f001 f9d8 	bl	80089cc <xTaskRemoveFromEventList>
 800761c:	4603      	mov	r3, r0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d012      	beq.n	8007648 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007622:	4b0d      	ldr	r3, [pc, #52]	@ (8007658 <xQueueGenericReset+0xd0>)
 8007624:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007628:	601a      	str	r2, [r3, #0]
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	e009      	b.n	8007648 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	3310      	adds	r3, #16
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff fef1 	bl	8007420 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	3324      	adds	r3, #36	@ 0x24
 8007642:	4618      	mov	r0, r3
 8007644:	f7ff feec 	bl	8007420 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007648:	f002 f9e0 	bl	8009a0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800764c:	2301      	movs	r3, #1
}
 800764e:	4618      	mov	r0, r3
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	e000ed04 	.word	0xe000ed04

0800765c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08e      	sub	sp, #56	@ 0x38
 8007660:	af02      	add	r7, sp, #8
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
 8007668:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d10b      	bne.n	8007688 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007674:	f383 8811 	msr	BASEPRI, r3
 8007678:	f3bf 8f6f 	isb	sy
 800767c:	f3bf 8f4f 	dsb	sy
 8007680:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007682:	bf00      	nop
 8007684:	bf00      	nop
 8007686:	e7fd      	b.n	8007684 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10b      	bne.n	80076a6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007692:	f383 8811 	msr	BASEPRI, r3
 8007696:	f3bf 8f6f 	isb	sy
 800769a:	f3bf 8f4f 	dsb	sy
 800769e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80076a0:	bf00      	nop
 80076a2:	bf00      	nop
 80076a4:	e7fd      	b.n	80076a2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d002      	beq.n	80076b2 <xQueueGenericCreateStatic+0x56>
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <xQueueGenericCreateStatic+0x5a>
 80076b2:	2301      	movs	r3, #1
 80076b4:	e000      	b.n	80076b8 <xQueueGenericCreateStatic+0x5c>
 80076b6:	2300      	movs	r3, #0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10b      	bne.n	80076d4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	623b      	str	r3, [r7, #32]
}
 80076ce:	bf00      	nop
 80076d0:	bf00      	nop
 80076d2:	e7fd      	b.n	80076d0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d102      	bne.n	80076e0 <xQueueGenericCreateStatic+0x84>
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <xQueueGenericCreateStatic+0x88>
 80076e0:	2301      	movs	r3, #1
 80076e2:	e000      	b.n	80076e6 <xQueueGenericCreateStatic+0x8a>
 80076e4:	2300      	movs	r3, #0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d10b      	bne.n	8007702 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	61fb      	str	r3, [r7, #28]
}
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
 8007700:	e7fd      	b.n	80076fe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007702:	2350      	movs	r3, #80	@ 0x50
 8007704:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b50      	cmp	r3, #80	@ 0x50
 800770a:	d00b      	beq.n	8007724 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	61bb      	str	r3, [r7, #24]
}
 800771e:	bf00      	nop
 8007720:	bf00      	nop
 8007722:	e7fd      	b.n	8007720 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007724:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800772a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800772c:	2b00      	cmp	r3, #0
 800772e:	d00d      	beq.n	800774c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007738:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800773c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	4613      	mov	r3, r2
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	68b9      	ldr	r1, [r7, #8]
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f840 	bl	80077cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800774c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800774e:	4618      	mov	r0, r3
 8007750:	3730      	adds	r7, #48	@ 0x30
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}

08007756 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007756:	b580      	push	{r7, lr}
 8007758:	b08a      	sub	sp, #40	@ 0x28
 800775a:	af02      	add	r7, sp, #8
 800775c:	60f8      	str	r0, [r7, #12]
 800775e:	60b9      	str	r1, [r7, #8]
 8007760:	4613      	mov	r3, r2
 8007762:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10b      	bne.n	8007782 <xQueueGenericCreate+0x2c>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	613b      	str	r3, [r7, #16]
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	e7fd      	b.n	800777e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	fb02 f303 	mul.w	r3, r2, r3
 800778a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	3350      	adds	r3, #80	@ 0x50
 8007790:	4618      	mov	r0, r3
 8007792:	f002 fa2b 	bl	8009bec <pvPortMalloc>
 8007796:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d011      	beq.n	80077c2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	3350      	adds	r3, #80	@ 0x50
 80077a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80077a8:	69bb      	ldr	r3, [r7, #24]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80077b0:	79fa      	ldrb	r2, [r7, #7]
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	9300      	str	r3, [sp, #0]
 80077b6:	4613      	mov	r3, r2
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	68b9      	ldr	r1, [r7, #8]
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f000 f805 	bl	80077cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80077c2:	69bb      	ldr	r3, [r7, #24]
	}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}

080077cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b084      	sub	sp, #16
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	60f8      	str	r0, [r7, #12]
 80077d4:	60b9      	str	r1, [r7, #8]
 80077d6:	607a      	str	r2, [r7, #4]
 80077d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d103      	bne.n	80077e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	69ba      	ldr	r2, [r7, #24]
 80077e4:	601a      	str	r2, [r3, #0]
 80077e6:	e002      	b.n	80077ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80077e8:	69bb      	ldr	r3, [r7, #24]
 80077ea:	687a      	ldr	r2, [r7, #4]
 80077ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80077ee:	69bb      	ldr	r3, [r7, #24]
 80077f0:	68fa      	ldr	r2, [r7, #12]
 80077f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80077f4:	69bb      	ldr	r3, [r7, #24]
 80077f6:	68ba      	ldr	r2, [r7, #8]
 80077f8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80077fa:	2101      	movs	r1, #1
 80077fc:	69b8      	ldr	r0, [r7, #24]
 80077fe:	f7ff fec3 	bl	8007588 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007802:	69bb      	ldr	r3, [r7, #24]
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800780a:	bf00      	nop
 800780c:	3710      	adds	r7, #16
 800780e:	46bd      	mov	sp, r7
 8007810:	bd80      	pop	{r7, pc}
	...

08007814 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08e      	sub	sp, #56	@ 0x38
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007822:	2300      	movs	r3, #0
 8007824:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800782a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10b      	bne.n	8007848 <xQueueGenericSend+0x34>
	__asm volatile
 8007830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007834:	f383 8811 	msr	BASEPRI, r3
 8007838:	f3bf 8f6f 	isb	sy
 800783c:	f3bf 8f4f 	dsb	sy
 8007840:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007842:	bf00      	nop
 8007844:	bf00      	nop
 8007846:	e7fd      	b.n	8007844 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d103      	bne.n	8007856 <xQueueGenericSend+0x42>
 800784e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007852:	2b00      	cmp	r3, #0
 8007854:	d101      	bne.n	800785a <xQueueGenericSend+0x46>
 8007856:	2301      	movs	r3, #1
 8007858:	e000      	b.n	800785c <xQueueGenericSend+0x48>
 800785a:	2300      	movs	r3, #0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10b      	bne.n	8007878 <xQueueGenericSend+0x64>
	__asm volatile
 8007860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007864:	f383 8811 	msr	BASEPRI, r3
 8007868:	f3bf 8f6f 	isb	sy
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007872:	bf00      	nop
 8007874:	bf00      	nop
 8007876:	e7fd      	b.n	8007874 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2b02      	cmp	r3, #2
 800787c:	d103      	bne.n	8007886 <xQueueGenericSend+0x72>
 800787e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007880:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007882:	2b01      	cmp	r3, #1
 8007884:	d101      	bne.n	800788a <xQueueGenericSend+0x76>
 8007886:	2301      	movs	r3, #1
 8007888:	e000      	b.n	800788c <xQueueGenericSend+0x78>
 800788a:	2300      	movs	r3, #0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10b      	bne.n	80078a8 <xQueueGenericSend+0x94>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	623b      	str	r3, [r7, #32]
}
 80078a2:	bf00      	nop
 80078a4:	bf00      	nop
 80078a6:	e7fd      	b.n	80078a4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80078a8:	f001 fa50 	bl	8008d4c <xTaskGetSchedulerState>
 80078ac:	4603      	mov	r3, r0
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d102      	bne.n	80078b8 <xQueueGenericSend+0xa4>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <xQueueGenericSend+0xa8>
 80078b8:	2301      	movs	r3, #1
 80078ba:	e000      	b.n	80078be <xQueueGenericSend+0xaa>
 80078bc:	2300      	movs	r3, #0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d10b      	bne.n	80078da <xQueueGenericSend+0xc6>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	61fb      	str	r3, [r7, #28]
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop
 80078d8:	e7fd      	b.n	80078d6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078da:	f002 f865 	bl	80099a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80078de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d302      	bcc.n	80078f0 <xQueueGenericSend+0xdc>
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d129      	bne.n	8007944 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	68b9      	ldr	r1, [r7, #8]
 80078f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078f6:	f000 fa91 	bl	8007e1c <prvCopyDataToQueue>
 80078fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007900:	2b00      	cmp	r3, #0
 8007902:	d010      	beq.n	8007926 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007906:	3324      	adds	r3, #36	@ 0x24
 8007908:	4618      	mov	r0, r3
 800790a:	f001 f85f 	bl	80089cc <xTaskRemoveFromEventList>
 800790e:	4603      	mov	r3, r0
 8007910:	2b00      	cmp	r3, #0
 8007912:	d013      	beq.n	800793c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007914:	4b3f      	ldr	r3, [pc, #252]	@ (8007a14 <xQueueGenericSend+0x200>)
 8007916:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800791a:	601a      	str	r2, [r3, #0]
 800791c:	f3bf 8f4f 	dsb	sy
 8007920:	f3bf 8f6f 	isb	sy
 8007924:	e00a      	b.n	800793c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007928:	2b00      	cmp	r3, #0
 800792a:	d007      	beq.n	800793c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800792c:	4b39      	ldr	r3, [pc, #228]	@ (8007a14 <xQueueGenericSend+0x200>)
 800792e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	f3bf 8f4f 	dsb	sy
 8007938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800793c:	f002 f866 	bl	8009a0c <vPortExitCritical>
				return pdPASS;
 8007940:	2301      	movs	r3, #1
 8007942:	e063      	b.n	8007a0c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d103      	bne.n	8007952 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800794a:	f002 f85f 	bl	8009a0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800794e:	2300      	movs	r3, #0
 8007950:	e05c      	b.n	8007a0c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007954:	2b00      	cmp	r3, #0
 8007956:	d106      	bne.n	8007966 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007958:	f107 0314 	add.w	r3, r7, #20
 800795c:	4618      	mov	r0, r3
 800795e:	f001 f899 	bl	8008a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007962:	2301      	movs	r3, #1
 8007964:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007966:	f002 f851 	bl	8009a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800796a:	f000 fe09 	bl	8008580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800796e:	f002 f81b 	bl	80099a8 <vPortEnterCritical>
 8007972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007974:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007978:	b25b      	sxtb	r3, r3
 800797a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800797e:	d103      	bne.n	8007988 <xQueueGenericSend+0x174>
 8007980:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800798a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800798e:	b25b      	sxtb	r3, r3
 8007990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007994:	d103      	bne.n	800799e <xQueueGenericSend+0x18a>
 8007996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007998:	2200      	movs	r2, #0
 800799a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800799e:	f002 f835 	bl	8009a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80079a2:	1d3a      	adds	r2, r7, #4
 80079a4:	f107 0314 	add.w	r3, r7, #20
 80079a8:	4611      	mov	r1, r2
 80079aa:	4618      	mov	r0, r3
 80079ac:	f001 f888 	bl	8008ac0 <xTaskCheckForTimeOut>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d124      	bne.n	8007a00 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80079b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079b8:	f000 fb28 	bl	800800c <prvIsQueueFull>
 80079bc:	4603      	mov	r3, r0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d018      	beq.n	80079f4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80079c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c4:	3310      	adds	r3, #16
 80079c6:	687a      	ldr	r2, [r7, #4]
 80079c8:	4611      	mov	r1, r2
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 ffac 	bl	8008928 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80079d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079d2:	f000 fab3 	bl	8007f3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80079d6:	f000 fde1 	bl	800859c <xTaskResumeAll>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f47f af7c 	bne.w	80078da <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80079e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a14 <xQueueGenericSend+0x200>)
 80079e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	f3bf 8f6f 	isb	sy
 80079f2:	e772      	b.n	80078da <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80079f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80079f6:	f000 faa1 	bl	8007f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079fa:	f000 fdcf 	bl	800859c <xTaskResumeAll>
 80079fe:	e76c      	b.n	80078da <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007a00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007a02:	f000 fa9b 	bl	8007f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a06:	f000 fdc9 	bl	800859c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007a0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3738      	adds	r7, #56	@ 0x38
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	e000ed04 	.word	0xe000ed04

08007a18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b090      	sub	sp, #64	@ 0x40
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	60f8      	str	r0, [r7, #12]
 8007a20:	60b9      	str	r1, [r7, #8]
 8007a22:	607a      	str	r2, [r7, #4]
 8007a24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8007a2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d10b      	bne.n	8007a48 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007a42:	bf00      	nop
 8007a44:	bf00      	nop
 8007a46:	e7fd      	b.n	8007a44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d103      	bne.n	8007a56 <xQueueGenericSendFromISR+0x3e>
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d101      	bne.n	8007a5a <xQueueGenericSendFromISR+0x42>
 8007a56:	2301      	movs	r3, #1
 8007a58:	e000      	b.n	8007a5c <xQueueGenericSendFromISR+0x44>
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d10b      	bne.n	8007a78 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d103      	bne.n	8007a86 <xQueueGenericSendFromISR+0x6e>
 8007a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	d101      	bne.n	8007a8a <xQueueGenericSendFromISR+0x72>
 8007a86:	2301      	movs	r3, #1
 8007a88:	e000      	b.n	8007a8c <xQueueGenericSendFromISR+0x74>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10b      	bne.n	8007aa8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a94:	f383 8811 	msr	BASEPRI, r3
 8007a98:	f3bf 8f6f 	isb	sy
 8007a9c:	f3bf 8f4f 	dsb	sy
 8007aa0:	623b      	str	r3, [r7, #32]
}
 8007aa2:	bf00      	nop
 8007aa4:	bf00      	nop
 8007aa6:	e7fd      	b.n	8007aa4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007aa8:	f002 f85e 	bl	8009b68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007aac:	f3ef 8211 	mrs	r2, BASEPRI
 8007ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ab4:	f383 8811 	msr	BASEPRI, r3
 8007ab8:	f3bf 8f6f 	isb	sy
 8007abc:	f3bf 8f4f 	dsb	sy
 8007ac0:	61fa      	str	r2, [r7, #28]
 8007ac2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ac6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d302      	bcc.n	8007ada <xQueueGenericSendFromISR+0xc2>
 8007ad4:	683b      	ldr	r3, [r7, #0]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	d12f      	bne.n	8007b3a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007ada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007adc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ae0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	68b9      	ldr	r1, [r7, #8]
 8007aee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007af0:	f000 f994 	bl	8007e1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007af4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007afc:	d112      	bne.n	8007b24 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d016      	beq.n	8007b34 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b08:	3324      	adds	r3, #36	@ 0x24
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 ff5e 	bl	80089cc <xTaskRemoveFromEventList>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d00e      	beq.n	8007b34 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00b      	beq.n	8007b34 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	601a      	str	r2, [r3, #0]
 8007b22:	e007      	b.n	8007b34 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007b24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007b28:	3301      	adds	r3, #1
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	b25a      	sxtb	r2, r3
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007b34:	2301      	movs	r3, #1
 8007b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007b38:	e001      	b.n	8007b3e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b40:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007b48:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007b4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3740      	adds	r7, #64	@ 0x40
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b08c      	sub	sp, #48	@ 0x30
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	60f8      	str	r0, [r7, #12]
 8007b5c:	60b9      	str	r1, [r7, #8]
 8007b5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b60:	2300      	movs	r3, #0
 8007b62:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d10b      	bne.n	8007b86 <xQueueReceive+0x32>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b72:	f383 8811 	msr	BASEPRI, r3
 8007b76:	f3bf 8f6f 	isb	sy
 8007b7a:	f3bf 8f4f 	dsb	sy
 8007b7e:	623b      	str	r3, [r7, #32]
}
 8007b80:	bf00      	nop
 8007b82:	bf00      	nop
 8007b84:	e7fd      	b.n	8007b82 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d103      	bne.n	8007b94 <xQueueReceive+0x40>
 8007b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <xQueueReceive+0x44>
 8007b94:	2301      	movs	r3, #1
 8007b96:	e000      	b.n	8007b9a <xQueueReceive+0x46>
 8007b98:	2300      	movs	r3, #0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10b      	bne.n	8007bb6 <xQueueReceive+0x62>
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	61fb      	str	r3, [r7, #28]
}
 8007bb0:	bf00      	nop
 8007bb2:	bf00      	nop
 8007bb4:	e7fd      	b.n	8007bb2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bb6:	f001 f8c9 	bl	8008d4c <xTaskGetSchedulerState>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d102      	bne.n	8007bc6 <xQueueReceive+0x72>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <xQueueReceive+0x76>
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e000      	b.n	8007bcc <xQueueReceive+0x78>
 8007bca:	2300      	movs	r3, #0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d10b      	bne.n	8007be8 <xQueueReceive+0x94>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	61bb      	str	r3, [r7, #24]
}
 8007be2:	bf00      	nop
 8007be4:	bf00      	nop
 8007be6:	e7fd      	b.n	8007be4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007be8:	f001 fede 	bl	80099a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bf0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d01f      	beq.n	8007c38 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007bf8:	68b9      	ldr	r1, [r7, #8]
 8007bfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bfc:	f000 f978 	bl	8007ef0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	1e5a      	subs	r2, r3, #1
 8007c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c06:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0a:	691b      	ldr	r3, [r3, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00f      	beq.n	8007c30 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c12:	3310      	adds	r3, #16
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 fed9 	bl	80089cc <xTaskRemoveFromEventList>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d007      	beq.n	8007c30 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c20:	4b3c      	ldr	r3, [pc, #240]	@ (8007d14 <xQueueReceive+0x1c0>)
 8007c22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c26:	601a      	str	r2, [r3, #0]
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c30:	f001 feec 	bl	8009a0c <vPortExitCritical>
				return pdPASS;
 8007c34:	2301      	movs	r3, #1
 8007c36:	e069      	b.n	8007d0c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d103      	bne.n	8007c46 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c3e:	f001 fee5 	bl	8009a0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c42:	2300      	movs	r3, #0
 8007c44:	e062      	b.n	8007d0c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d106      	bne.n	8007c5a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c4c:	f107 0310 	add.w	r3, r7, #16
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 ff1f 	bl	8008a94 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c56:	2301      	movs	r3, #1
 8007c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c5a:	f001 fed7 	bl	8009a0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c5e:	f000 fc8f 	bl	8008580 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c62:	f001 fea1 	bl	80099a8 <vPortEnterCritical>
 8007c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c68:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c6c:	b25b      	sxtb	r3, r3
 8007c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c72:	d103      	bne.n	8007c7c <xQueueReceive+0x128>
 8007c74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c76:	2200      	movs	r2, #0
 8007c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c82:	b25b      	sxtb	r3, r3
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c88:	d103      	bne.n	8007c92 <xQueueReceive+0x13e>
 8007c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c92:	f001 febb 	bl	8009a0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c96:	1d3a      	adds	r2, r7, #4
 8007c98:	f107 0310 	add.w	r3, r7, #16
 8007c9c:	4611      	mov	r1, r2
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 ff0e 	bl	8008ac0 <xTaskCheckForTimeOut>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d123      	bne.n	8007cf2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007caa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cac:	f000 f998 	bl	8007fe0 <prvIsQueueEmpty>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d017      	beq.n	8007ce6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb8:	3324      	adds	r3, #36	@ 0x24
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fe32 	bl	8008928 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cc6:	f000 f939 	bl	8007f3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cca:	f000 fc67 	bl	800859c <xTaskResumeAll>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d189      	bne.n	8007be8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8007d14 <xQueueReceive+0x1c0>)
 8007cd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	f3bf 8f4f 	dsb	sy
 8007ce0:	f3bf 8f6f 	isb	sy
 8007ce4:	e780      	b.n	8007be8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ce6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ce8:	f000 f928 	bl	8007f3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007cec:	f000 fc56 	bl	800859c <xTaskResumeAll>
 8007cf0:	e77a      	b.n	8007be8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cf4:	f000 f922 	bl	8007f3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007cf8:	f000 fc50 	bl	800859c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007cfc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cfe:	f000 f96f 	bl	8007fe0 <prvIsQueueEmpty>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f43f af6f 	beq.w	8007be8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d0a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3730      	adds	r7, #48	@ 0x30
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	e000ed04 	.word	0xe000ed04

08007d18 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d18:	b580      	push	{r7, lr}
 8007d1a:	b08e      	sub	sp, #56	@ 0x38
 8007d1c:	af00      	add	r7, sp, #0
 8007d1e:	60f8      	str	r0, [r7, #12]
 8007d20:	60b9      	str	r1, [r7, #8]
 8007d22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8007d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10b      	bne.n	8007d46 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8007d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	623b      	str	r3, [r7, #32]
}
 8007d40:	bf00      	nop
 8007d42:	bf00      	nop
 8007d44:	e7fd      	b.n	8007d42 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d103      	bne.n	8007d54 <xQueueReceiveFromISR+0x3c>
 8007d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <xQueueReceiveFromISR+0x40>
 8007d54:	2301      	movs	r3, #1
 8007d56:	e000      	b.n	8007d5a <xQueueReceiveFromISR+0x42>
 8007d58:	2300      	movs	r3, #0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10b      	bne.n	8007d76 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	61fb      	str	r3, [r7, #28]
}
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	e7fd      	b.n	8007d72 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007d76:	f001 fef7 	bl	8009b68 <vPortValidateInterruptPriority>
	__asm volatile
 8007d7a:	f3ef 8211 	mrs	r2, BASEPRI
 8007d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	61ba      	str	r2, [r7, #24]
 8007d90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007d92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d02f      	beq.n	8007e02 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007da4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007da8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dac:	68b9      	ldr	r1, [r7, #8]
 8007dae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007db0:	f000 f89e 	bl	8007ef0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007db6:	1e5a      	subs	r2, r3, #1
 8007db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dba:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007dbc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8007dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc4:	d112      	bne.n	8007dec <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d016      	beq.n	8007dfc <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dd0:	3310      	adds	r3, #16
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 fdfa 	bl	80089cc <xTaskRemoveFromEventList>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d00e      	beq.n	8007dfc <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00b      	beq.n	8007dfc <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	601a      	str	r2, [r3, #0]
 8007dea:	e007      	b.n	8007dfc <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007dec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007df0:	3301      	adds	r3, #1
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	b25a      	sxtb	r2, r3
 8007df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007df8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e00:	e001      	b.n	8007e06 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8007e02:	2300      	movs	r3, #0
 8007e04:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e08:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	f383 8811 	msr	BASEPRI, r3
}
 8007e10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3738      	adds	r7, #56	@ 0x38
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b086      	sub	sp, #24
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	60f8      	str	r0, [r7, #12]
 8007e24:	60b9      	str	r1, [r7, #8]
 8007e26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10d      	bne.n	8007e56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d14d      	bne.n	8007ede <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	4618      	mov	r0, r3
 8007e48:	f000 ff9e 	bl	8008d88 <xTaskPriorityDisinherit>
 8007e4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2200      	movs	r2, #0
 8007e52:	609a      	str	r2, [r3, #8]
 8007e54:	e043      	b.n	8007ede <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d119      	bne.n	8007e90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	6858      	ldr	r0, [r3, #4]
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e64:	461a      	mov	r2, r3
 8007e66:	68b9      	ldr	r1, [r7, #8]
 8007e68:	f002 f8da 	bl	800a020 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	685a      	ldr	r2, [r3, #4]
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e74:	441a      	add	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	685a      	ldr	r2, [r3, #4]
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	689b      	ldr	r3, [r3, #8]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d32b      	bcc.n	8007ede <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	605a      	str	r2, [r3, #4]
 8007e8e:	e026      	b.n	8007ede <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	68d8      	ldr	r0, [r3, #12]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e98:	461a      	mov	r2, r3
 8007e9a:	68b9      	ldr	r1, [r7, #8]
 8007e9c:	f002 f8c0 	bl	800a020 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	68da      	ldr	r2, [r3, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea8:	425b      	negs	r3, r3
 8007eaa:	441a      	add	r2, r3
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	68da      	ldr	r2, [r3, #12]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	429a      	cmp	r2, r3
 8007eba:	d207      	bcs.n	8007ecc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec4:	425b      	negs	r3, r3
 8007ec6:	441a      	add	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d105      	bne.n	8007ede <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d002      	beq.n	8007ede <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	3b01      	subs	r3, #1
 8007edc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007ee6:	697b      	ldr	r3, [r7, #20]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3718      	adds	r7, #24
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d018      	beq.n	8007f34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68da      	ldr	r2, [r3, #12]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f0a:	441a      	add	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d303      	bcc.n	8007f24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68d9      	ldr	r1, [r3, #12]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2c:	461a      	mov	r2, r3
 8007f2e:	6838      	ldr	r0, [r7, #0]
 8007f30:	f002 f876 	bl	800a020 <memcpy>
	}
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}

08007f3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007f44:	f001 fd30 	bl	80099a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f50:	e011      	b.n	8007f76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d012      	beq.n	8007f80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	3324      	adds	r3, #36	@ 0x24
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fd34 	bl	80089cc <xTaskRemoveFromEventList>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007f6a:	f000 fe0d 	bl	8008b88 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	dce9      	bgt.n	8007f52 <prvUnlockQueue+0x16>
 8007f7e:	e000      	b.n	8007f82 <prvUnlockQueue+0x46>
					break;
 8007f80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	22ff      	movs	r2, #255	@ 0xff
 8007f86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007f8a:	f001 fd3f 	bl	8009a0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007f8e:	f001 fd0b 	bl	80099a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007f9a:	e011      	b.n	8007fc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d012      	beq.n	8007fca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	3310      	adds	r3, #16
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 fd0f 	bl	80089cc <xTaskRemoveFromEventList>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007fb4:	f000 fde8 	bl	8008b88 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007fb8:	7bbb      	ldrb	r3, [r7, #14]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007fc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	dce9      	bgt.n	8007f9c <prvUnlockQueue+0x60>
 8007fc8:	e000      	b.n	8007fcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007fca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	22ff      	movs	r2, #255	@ 0xff
 8007fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007fd4:	f001 fd1a 	bl	8009a0c <vPortExitCritical>
}
 8007fd8:	bf00      	nop
 8007fda:	3710      	adds	r7, #16
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007fe8:	f001 fcde 	bl	80099a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d102      	bne.n	8007ffa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	60fb      	str	r3, [r7, #12]
 8007ff8:	e001      	b.n	8007ffe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ffe:	f001 fd05 	bl	8009a0c <vPortExitCritical>

	return xReturn;
 8008002:	68fb      	ldr	r3, [r7, #12]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008014:	f001 fcc8 	bl	80099a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008020:	429a      	cmp	r2, r3
 8008022:	d102      	bne.n	800802a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008024:	2301      	movs	r3, #1
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	e001      	b.n	800802e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800802a:	2300      	movs	r3, #0
 800802c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800802e:	f001 fced 	bl	8009a0c <vPortExitCritical>

	return xReturn;
 8008032:	68fb      	ldr	r3, [r7, #12]
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800803c:	b480      	push	{r7}
 800803e:	b085      	sub	sp, #20
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
 8008044:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	e014      	b.n	8008076 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800804c:	4a0f      	ldr	r2, [pc, #60]	@ (800808c <vQueueAddToRegistry+0x50>)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d10b      	bne.n	8008070 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008058:	490c      	ldr	r1, [pc, #48]	@ (800808c <vQueueAddToRegistry+0x50>)
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	683a      	ldr	r2, [r7, #0]
 800805e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008062:	4a0a      	ldr	r2, [pc, #40]	@ (800808c <vQueueAddToRegistry+0x50>)
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	00db      	lsls	r3, r3, #3
 8008068:	4413      	add	r3, r2
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800806e:	e006      	b.n	800807e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	3301      	adds	r3, #1
 8008074:	60fb      	str	r3, [r7, #12]
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2b07      	cmp	r3, #7
 800807a:	d9e7      	bls.n	800804c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800807c:	bf00      	nop
 800807e:	bf00      	nop
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	200009cc 	.word	0x200009cc

08008090 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80080a0:	f001 fc82 	bl	80099a8 <vPortEnterCritical>
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080aa:	b25b      	sxtb	r3, r3
 80080ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080b0:	d103      	bne.n	80080ba <vQueueWaitForMessageRestricted+0x2a>
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	2200      	movs	r2, #0
 80080b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80080c0:	b25b      	sxtb	r3, r3
 80080c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080c6:	d103      	bne.n	80080d0 <vQueueWaitForMessageRestricted+0x40>
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2200      	movs	r2, #0
 80080cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80080d0:	f001 fc9c 	bl	8009a0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d106      	bne.n	80080ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	3324      	adds	r3, #36	@ 0x24
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	68b9      	ldr	r1, [r7, #8]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f000 fc45 	bl	8008974 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80080ea:	6978      	ldr	r0, [r7, #20]
 80080ec:	f7ff ff26 	bl	8007f3c <prvUnlockQueue>
	}
 80080f0:	bf00      	nop
 80080f2:	3718      	adds	r7, #24
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b08e      	sub	sp, #56	@ 0x38
 80080fc:	af04      	add	r7, sp, #16
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	607a      	str	r2, [r7, #4]
 8008104:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008106:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008108:	2b00      	cmp	r3, #0
 800810a:	d10b      	bne.n	8008124 <xTaskCreateStatic+0x2c>
	__asm volatile
 800810c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008110:	f383 8811 	msr	BASEPRI, r3
 8008114:	f3bf 8f6f 	isb	sy
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	623b      	str	r3, [r7, #32]
}
 800811e:	bf00      	nop
 8008120:	bf00      	nop
 8008122:	e7fd      	b.n	8008120 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10b      	bne.n	8008142 <xTaskCreateStatic+0x4a>
	__asm volatile
 800812a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800812e:	f383 8811 	msr	BASEPRI, r3
 8008132:	f3bf 8f6f 	isb	sy
 8008136:	f3bf 8f4f 	dsb	sy
 800813a:	61fb      	str	r3, [r7, #28]
}
 800813c:	bf00      	nop
 800813e:	bf00      	nop
 8008140:	e7fd      	b.n	800813e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008142:	235c      	movs	r3, #92	@ 0x5c
 8008144:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2b5c      	cmp	r3, #92	@ 0x5c
 800814a:	d00b      	beq.n	8008164 <xTaskCreateStatic+0x6c>
	__asm volatile
 800814c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008150:	f383 8811 	msr	BASEPRI, r3
 8008154:	f3bf 8f6f 	isb	sy
 8008158:	f3bf 8f4f 	dsb	sy
 800815c:	61bb      	str	r3, [r7, #24]
}
 800815e:	bf00      	nop
 8008160:	bf00      	nop
 8008162:	e7fd      	b.n	8008160 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008164:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008166:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008168:	2b00      	cmp	r3, #0
 800816a:	d01e      	beq.n	80081aa <xTaskCreateStatic+0xb2>
 800816c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800816e:	2b00      	cmp	r3, #0
 8008170:	d01b      	beq.n	80081aa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008174:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008178:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800817a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	2202      	movs	r2, #2
 8008180:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008184:	2300      	movs	r3, #0
 8008186:	9303      	str	r3, [sp, #12]
 8008188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800818a:	9302      	str	r3, [sp, #8]
 800818c:	f107 0314 	add.w	r3, r7, #20
 8008190:	9301      	str	r3, [sp, #4]
 8008192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008194:	9300      	str	r3, [sp, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	68b9      	ldr	r1, [r7, #8]
 800819c:	68f8      	ldr	r0, [r7, #12]
 800819e:	f000 f850 	bl	8008242 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80081a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80081a4:	f000 f8de 	bl	8008364 <prvAddNewTaskToReadyList>
 80081a8:	e001      	b.n	80081ae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80081ae:	697b      	ldr	r3, [r7, #20]
	}
 80081b0:	4618      	mov	r0, r3
 80081b2:	3728      	adds	r7, #40	@ 0x28
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b08c      	sub	sp, #48	@ 0x30
 80081bc:	af04      	add	r7, sp, #16
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	603b      	str	r3, [r7, #0]
 80081c4:	4613      	mov	r3, r2
 80081c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80081c8:	88fb      	ldrh	r3, [r7, #6]
 80081ca:	009b      	lsls	r3, r3, #2
 80081cc:	4618      	mov	r0, r3
 80081ce:	f001 fd0d 	bl	8009bec <pvPortMalloc>
 80081d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80081d4:	697b      	ldr	r3, [r7, #20]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00e      	beq.n	80081f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80081da:	205c      	movs	r0, #92	@ 0x5c
 80081dc:	f001 fd06 	bl	8009bec <pvPortMalloc>
 80081e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80081e2:	69fb      	ldr	r3, [r7, #28]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d003      	beq.n	80081f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	697a      	ldr	r2, [r7, #20]
 80081ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80081ee:	e005      	b.n	80081fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80081f0:	6978      	ldr	r0, [r7, #20]
 80081f2:	f001 fdc9 	bl	8009d88 <vPortFree>
 80081f6:	e001      	b.n	80081fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80081f8:	2300      	movs	r3, #0
 80081fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d017      	beq.n	8008232 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008202:	69fb      	ldr	r3, [r7, #28]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800820a:	88fa      	ldrh	r2, [r7, #6]
 800820c:	2300      	movs	r3, #0
 800820e:	9303      	str	r3, [sp, #12]
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	9302      	str	r3, [sp, #8]
 8008214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	68b9      	ldr	r1, [r7, #8]
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f000 f80e 	bl	8008242 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008226:	69f8      	ldr	r0, [r7, #28]
 8008228:	f000 f89c 	bl	8008364 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800822c:	2301      	movs	r3, #1
 800822e:	61bb      	str	r3, [r7, #24]
 8008230:	e002      	b.n	8008238 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008232:	f04f 33ff 	mov.w	r3, #4294967295
 8008236:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008238:	69bb      	ldr	r3, [r7, #24]
	}
 800823a:	4618      	mov	r0, r3
 800823c:	3720      	adds	r7, #32
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b088      	sub	sp, #32
 8008246:	af00      	add	r7, sp, #0
 8008248:	60f8      	str	r0, [r7, #12]
 800824a:	60b9      	str	r1, [r7, #8]
 800824c:	607a      	str	r2, [r7, #4]
 800824e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	009b      	lsls	r3, r3, #2
 8008258:	461a      	mov	r2, r3
 800825a:	21a5      	movs	r1, #165	@ 0xa5
 800825c:	f001 feb4 	bl	8009fc8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008262:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800826a:	3b01      	subs	r3, #1
 800826c:	009b      	lsls	r3, r3, #2
 800826e:	4413      	add	r3, r2
 8008270:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008272:	69bb      	ldr	r3, [r7, #24]
 8008274:	f023 0307 	bic.w	r3, r3, #7
 8008278:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800827a:	69bb      	ldr	r3, [r7, #24]
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	2b00      	cmp	r3, #0
 8008282:	d00b      	beq.n	800829c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008288:	f383 8811 	msr	BASEPRI, r3
 800828c:	f3bf 8f6f 	isb	sy
 8008290:	f3bf 8f4f 	dsb	sy
 8008294:	617b      	str	r3, [r7, #20]
}
 8008296:	bf00      	nop
 8008298:	bf00      	nop
 800829a:	e7fd      	b.n	8008298 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01f      	beq.n	80082e2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082a2:	2300      	movs	r3, #0
 80082a4:	61fb      	str	r3, [r7, #28]
 80082a6:	e012      	b.n	80082ce <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	4413      	add	r3, r2
 80082ae:	7819      	ldrb	r1, [r3, #0]
 80082b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	4413      	add	r3, r2
 80082b6:	3334      	adds	r3, #52	@ 0x34
 80082b8:	460a      	mov	r2, r1
 80082ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80082bc:	68ba      	ldr	r2, [r7, #8]
 80082be:	69fb      	ldr	r3, [r7, #28]
 80082c0:	4413      	add	r3, r2
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d006      	beq.n	80082d6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	3301      	adds	r3, #1
 80082cc:	61fb      	str	r3, [r7, #28]
 80082ce:	69fb      	ldr	r3, [r7, #28]
 80082d0:	2b0f      	cmp	r3, #15
 80082d2:	d9e9      	bls.n	80082a8 <prvInitialiseNewTask+0x66>
 80082d4:	e000      	b.n	80082d8 <prvInitialiseNewTask+0x96>
			{
				break;
 80082d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80082d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082e0:	e003      	b.n	80082ea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80082e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082e4:	2200      	movs	r2, #0
 80082e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80082ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ec:	2b37      	cmp	r3, #55	@ 0x37
 80082ee:	d901      	bls.n	80082f4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80082f0:	2337      	movs	r3, #55	@ 0x37
 80082f2:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80082f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082f8:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80082fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082fe:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008302:	2200      	movs	r2, #0
 8008304:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008308:	3304      	adds	r3, #4
 800830a:	4618      	mov	r0, r3
 800830c:	f7ff f8a8 	bl	8007460 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008312:	3318      	adds	r3, #24
 8008314:	4618      	mov	r0, r3
 8008316:	f7ff f8a3 	bl	8007460 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800831a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800831c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800831e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008322:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008328:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800832a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800832c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800832e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008332:	2200      	movs	r2, #0
 8008334:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008338:	2200      	movs	r2, #0
 800833a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800833e:	683a      	ldr	r2, [r7, #0]
 8008340:	68f9      	ldr	r1, [r7, #12]
 8008342:	69b8      	ldr	r0, [r7, #24]
 8008344:	f001 f9fe 	bl	8009744 <pxPortInitialiseStack>
 8008348:	4602      	mov	r2, r0
 800834a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800834e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008350:	2b00      	cmp	r3, #0
 8008352:	d002      	beq.n	800835a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008358:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800835a:	bf00      	nop
 800835c:	3720      	adds	r7, #32
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
	...

08008364 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800836c:	f001 fb1c 	bl	80099a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008370:	4b2d      	ldr	r3, [pc, #180]	@ (8008428 <prvAddNewTaskToReadyList+0xc4>)
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	3301      	adds	r3, #1
 8008376:	4a2c      	ldr	r2, [pc, #176]	@ (8008428 <prvAddNewTaskToReadyList+0xc4>)
 8008378:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800837a:	4b2c      	ldr	r3, [pc, #176]	@ (800842c <prvAddNewTaskToReadyList+0xc8>)
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d109      	bne.n	8008396 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008382:	4a2a      	ldr	r2, [pc, #168]	@ (800842c <prvAddNewTaskToReadyList+0xc8>)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008388:	4b27      	ldr	r3, [pc, #156]	@ (8008428 <prvAddNewTaskToReadyList+0xc4>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d110      	bne.n	80083b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008390:	f000 fc1e 	bl	8008bd0 <prvInitialiseTaskLists>
 8008394:	e00d      	b.n	80083b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008396:	4b26      	ldr	r3, [pc, #152]	@ (8008430 <prvAddNewTaskToReadyList+0xcc>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d109      	bne.n	80083b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800839e:	4b23      	ldr	r3, [pc, #140]	@ (800842c <prvAddNewTaskToReadyList+0xc8>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d802      	bhi.n	80083b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80083ac:	4a1f      	ldr	r2, [pc, #124]	@ (800842c <prvAddNewTaskToReadyList+0xc8>)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80083b2:	4b20      	ldr	r3, [pc, #128]	@ (8008434 <prvAddNewTaskToReadyList+0xd0>)
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	3301      	adds	r3, #1
 80083b8:	4a1e      	ldr	r2, [pc, #120]	@ (8008434 <prvAddNewTaskToReadyList+0xd0>)
 80083ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80083bc:	4b1d      	ldr	r3, [pc, #116]	@ (8008434 <prvAddNewTaskToReadyList+0xd0>)
 80083be:	681a      	ldr	r2, [r3, #0]
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083c8:	4b1b      	ldr	r3, [pc, #108]	@ (8008438 <prvAddNewTaskToReadyList+0xd4>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	d903      	bls.n	80083d8 <prvAddNewTaskToReadyList+0x74>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d4:	4a18      	ldr	r2, [pc, #96]	@ (8008438 <prvAddNewTaskToReadyList+0xd4>)
 80083d6:	6013      	str	r3, [r2, #0]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083dc:	4613      	mov	r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	4413      	add	r3, r2
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4a15      	ldr	r2, [pc, #84]	@ (800843c <prvAddNewTaskToReadyList+0xd8>)
 80083e6:	441a      	add	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3304      	adds	r3, #4
 80083ec:	4619      	mov	r1, r3
 80083ee:	4610      	mov	r0, r2
 80083f0:	f7ff f843 	bl	800747a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80083f4:	f001 fb0a 	bl	8009a0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80083f8:	4b0d      	ldr	r3, [pc, #52]	@ (8008430 <prvAddNewTaskToReadyList+0xcc>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00e      	beq.n	800841e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008400:	4b0a      	ldr	r3, [pc, #40]	@ (800842c <prvAddNewTaskToReadyList+0xc8>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800840a:	429a      	cmp	r2, r3
 800840c:	d207      	bcs.n	800841e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800840e:	4b0c      	ldr	r3, [pc, #48]	@ (8008440 <prvAddNewTaskToReadyList+0xdc>)
 8008410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800841e:	bf00      	nop
 8008420:	3708      	adds	r7, #8
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	20000ee0 	.word	0x20000ee0
 800842c:	20000a0c 	.word	0x20000a0c
 8008430:	20000eec 	.word	0x20000eec
 8008434:	20000efc 	.word	0x20000efc
 8008438:	20000ee8 	.word	0x20000ee8
 800843c:	20000a10 	.word	0x20000a10
 8008440:	e000ed04 	.word	0xe000ed04

08008444 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008444:	b580      	push	{r7, lr}
 8008446:	b084      	sub	sp, #16
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800844c:	2300      	movs	r3, #0
 800844e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2b00      	cmp	r3, #0
 8008454:	d018      	beq.n	8008488 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008456:	4b14      	ldr	r3, [pc, #80]	@ (80084a8 <vTaskDelay+0x64>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00b      	beq.n	8008476 <vTaskDelay+0x32>
	__asm volatile
 800845e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008462:	f383 8811 	msr	BASEPRI, r3
 8008466:	f3bf 8f6f 	isb	sy
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	60bb      	str	r3, [r7, #8]
}
 8008470:	bf00      	nop
 8008472:	bf00      	nop
 8008474:	e7fd      	b.n	8008472 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008476:	f000 f883 	bl	8008580 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800847a:	2100      	movs	r1, #0
 800847c:	6878      	ldr	r0, [r7, #4]
 800847e:	f000 fcf3 	bl	8008e68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008482:	f000 f88b 	bl	800859c <xTaskResumeAll>
 8008486:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d107      	bne.n	800849e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800848e:	4b07      	ldr	r3, [pc, #28]	@ (80084ac <vTaskDelay+0x68>)
 8008490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800849e:	bf00      	nop
 80084a0:	3710      	adds	r7, #16
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000f08 	.word	0x20000f08
 80084ac:	e000ed04 	.word	0xe000ed04

080084b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b08a      	sub	sp, #40	@ 0x28
 80084b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80084b6:	2300      	movs	r3, #0
 80084b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80084ba:	2300      	movs	r3, #0
 80084bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80084be:	463a      	mov	r2, r7
 80084c0:	1d39      	adds	r1, r7, #4
 80084c2:	f107 0308 	add.w	r3, r7, #8
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe ff76 	bl	80073b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	68ba      	ldr	r2, [r7, #8]
 80084d2:	9202      	str	r2, [sp, #8]
 80084d4:	9301      	str	r3, [sp, #4]
 80084d6:	2300      	movs	r3, #0
 80084d8:	9300      	str	r3, [sp, #0]
 80084da:	2300      	movs	r3, #0
 80084dc:	460a      	mov	r2, r1
 80084de:	4922      	ldr	r1, [pc, #136]	@ (8008568 <vTaskStartScheduler+0xb8>)
 80084e0:	4822      	ldr	r0, [pc, #136]	@ (800856c <vTaskStartScheduler+0xbc>)
 80084e2:	f7ff fe09 	bl	80080f8 <xTaskCreateStatic>
 80084e6:	4603      	mov	r3, r0
 80084e8:	4a21      	ldr	r2, [pc, #132]	@ (8008570 <vTaskStartScheduler+0xc0>)
 80084ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80084ec:	4b20      	ldr	r3, [pc, #128]	@ (8008570 <vTaskStartScheduler+0xc0>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d002      	beq.n	80084fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80084f4:	2301      	movs	r3, #1
 80084f6:	617b      	str	r3, [r7, #20]
 80084f8:	e001      	b.n	80084fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d102      	bne.n	800850a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008504:	f000 fd04 	bl	8008f10 <xTimerCreateTimerTask>
 8008508:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d116      	bne.n	800853e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008514:	f383 8811 	msr	BASEPRI, r3
 8008518:	f3bf 8f6f 	isb	sy
 800851c:	f3bf 8f4f 	dsb	sy
 8008520:	613b      	str	r3, [r7, #16]
}
 8008522:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008524:	4b13      	ldr	r3, [pc, #76]	@ (8008574 <vTaskStartScheduler+0xc4>)
 8008526:	f04f 32ff 	mov.w	r2, #4294967295
 800852a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800852c:	4b12      	ldr	r3, [pc, #72]	@ (8008578 <vTaskStartScheduler+0xc8>)
 800852e:	2201      	movs	r2, #1
 8008530:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008532:	4b12      	ldr	r3, [pc, #72]	@ (800857c <vTaskStartScheduler+0xcc>)
 8008534:	2200      	movs	r2, #0
 8008536:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008538:	f001 f992 	bl	8009860 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800853c:	e00f      	b.n	800855e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008544:	d10b      	bne.n	800855e <vTaskStartScheduler+0xae>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854a:	f383 8811 	msr	BASEPRI, r3
 800854e:	f3bf 8f6f 	isb	sy
 8008552:	f3bf 8f4f 	dsb	sy
 8008556:	60fb      	str	r3, [r7, #12]
}
 8008558:	bf00      	nop
 800855a:	bf00      	nop
 800855c:	e7fd      	b.n	800855a <vTaskStartScheduler+0xaa>
}
 800855e:	bf00      	nop
 8008560:	3718      	adds	r7, #24
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	0800a12c 	.word	0x0800a12c
 800856c:	08008ba1 	.word	0x08008ba1
 8008570:	20000f04 	.word	0x20000f04
 8008574:	20000f00 	.word	0x20000f00
 8008578:	20000eec 	.word	0x20000eec
 800857c:	20000ee4 	.word	0x20000ee4

08008580 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008580:	b480      	push	{r7}
 8008582:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008584:	4b04      	ldr	r3, [pc, #16]	@ (8008598 <vTaskSuspendAll+0x18>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	3301      	adds	r3, #1
 800858a:	4a03      	ldr	r2, [pc, #12]	@ (8008598 <vTaskSuspendAll+0x18>)
 800858c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800858e:	bf00      	nop
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr
 8008598:	20000f08 	.word	0x20000f08

0800859c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80085a6:	2300      	movs	r3, #0
 80085a8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80085aa:	4b42      	ldr	r3, [pc, #264]	@ (80086b4 <xTaskResumeAll+0x118>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10b      	bne.n	80085ca <xTaskResumeAll+0x2e>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	603b      	str	r3, [r7, #0]
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
 80085c8:	e7fd      	b.n	80085c6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80085ca:	f001 f9ed 	bl	80099a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80085ce:	4b39      	ldr	r3, [pc, #228]	@ (80086b4 <xTaskResumeAll+0x118>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	3b01      	subs	r3, #1
 80085d4:	4a37      	ldr	r2, [pc, #220]	@ (80086b4 <xTaskResumeAll+0x118>)
 80085d6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085d8:	4b36      	ldr	r3, [pc, #216]	@ (80086b4 <xTaskResumeAll+0x118>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d162      	bne.n	80086a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80085e0:	4b35      	ldr	r3, [pc, #212]	@ (80086b8 <xTaskResumeAll+0x11c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d05e      	beq.n	80086a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085e8:	e02f      	b.n	800864a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085ea:	4b34      	ldr	r3, [pc, #208]	@ (80086bc <xTaskResumeAll+0x120>)
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3318      	adds	r3, #24
 80085f6:	4618      	mov	r0, r3
 80085f8:	f7fe ff9c 	bl	8007534 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	3304      	adds	r3, #4
 8008600:	4618      	mov	r0, r3
 8008602:	f7fe ff97 	bl	8007534 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800860a:	4b2d      	ldr	r3, [pc, #180]	@ (80086c0 <xTaskResumeAll+0x124>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	429a      	cmp	r2, r3
 8008610:	d903      	bls.n	800861a <xTaskResumeAll+0x7e>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008616:	4a2a      	ldr	r2, [pc, #168]	@ (80086c0 <xTaskResumeAll+0x124>)
 8008618:	6013      	str	r3, [r2, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800861e:	4613      	mov	r3, r2
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	4a27      	ldr	r2, [pc, #156]	@ (80086c4 <xTaskResumeAll+0x128>)
 8008628:	441a      	add	r2, r3
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	3304      	adds	r3, #4
 800862e:	4619      	mov	r1, r3
 8008630:	4610      	mov	r0, r2
 8008632:	f7fe ff22 	bl	800747a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800863a:	4b23      	ldr	r3, [pc, #140]	@ (80086c8 <xTaskResumeAll+0x12c>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008640:	429a      	cmp	r2, r3
 8008642:	d302      	bcc.n	800864a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008644:	4b21      	ldr	r3, [pc, #132]	@ (80086cc <xTaskResumeAll+0x130>)
 8008646:	2201      	movs	r2, #1
 8008648:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800864a:	4b1c      	ldr	r3, [pc, #112]	@ (80086bc <xTaskResumeAll+0x120>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d1cb      	bne.n	80085ea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d001      	beq.n	800865c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008658:	f000 fb58 	bl	8008d0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800865c:	4b1c      	ldr	r3, [pc, #112]	@ (80086d0 <xTaskResumeAll+0x134>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d010      	beq.n	800868a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008668:	f000 f846 	bl	80086f8 <xTaskIncrementTick>
 800866c:	4603      	mov	r3, r0
 800866e:	2b00      	cmp	r3, #0
 8008670:	d002      	beq.n	8008678 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008672:	4b16      	ldr	r3, [pc, #88]	@ (80086cc <xTaskResumeAll+0x130>)
 8008674:	2201      	movs	r2, #1
 8008676:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	3b01      	subs	r3, #1
 800867c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1f1      	bne.n	8008668 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008684:	4b12      	ldr	r3, [pc, #72]	@ (80086d0 <xTaskResumeAll+0x134>)
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800868a:	4b10      	ldr	r3, [pc, #64]	@ (80086cc <xTaskResumeAll+0x130>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d009      	beq.n	80086a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008692:	2301      	movs	r3, #1
 8008694:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008696:	4b0f      	ldr	r3, [pc, #60]	@ (80086d4 <xTaskResumeAll+0x138>)
 8008698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800869c:	601a      	str	r2, [r3, #0]
 800869e:	f3bf 8f4f 	dsb	sy
 80086a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086a6:	f001 f9b1 	bl	8009a0c <vPortExitCritical>

	return xAlreadyYielded;
 80086aa:	68bb      	ldr	r3, [r7, #8]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3710      	adds	r7, #16
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	20000f08 	.word	0x20000f08
 80086b8:	20000ee0 	.word	0x20000ee0
 80086bc:	20000ea0 	.word	0x20000ea0
 80086c0:	20000ee8 	.word	0x20000ee8
 80086c4:	20000a10 	.word	0x20000a10
 80086c8:	20000a0c 	.word	0x20000a0c
 80086cc:	20000ef4 	.word	0x20000ef4
 80086d0:	20000ef0 	.word	0x20000ef0
 80086d4:	e000ed04 	.word	0xe000ed04

080086d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80086d8:	b480      	push	{r7}
 80086da:	b083      	sub	sp, #12
 80086dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80086de:	4b05      	ldr	r3, [pc, #20]	@ (80086f4 <xTaskGetTickCount+0x1c>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80086e4:	687b      	ldr	r3, [r7, #4]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	370c      	adds	r7, #12
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	20000ee4 	.word	0x20000ee4

080086f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086fe:	2300      	movs	r3, #0
 8008700:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008702:	4b4f      	ldr	r3, [pc, #316]	@ (8008840 <xTaskIncrementTick+0x148>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	f040 8090 	bne.w	800882c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800870c:	4b4d      	ldr	r3, [pc, #308]	@ (8008844 <xTaskIncrementTick+0x14c>)
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	3301      	adds	r3, #1
 8008712:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008714:	4a4b      	ldr	r2, [pc, #300]	@ (8008844 <xTaskIncrementTick+0x14c>)
 8008716:	693b      	ldr	r3, [r7, #16]
 8008718:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d121      	bne.n	8008764 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008720:	4b49      	ldr	r3, [pc, #292]	@ (8008848 <xTaskIncrementTick+0x150>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00b      	beq.n	8008742 <xTaskIncrementTick+0x4a>
	__asm volatile
 800872a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	603b      	str	r3, [r7, #0]
}
 800873c:	bf00      	nop
 800873e:	bf00      	nop
 8008740:	e7fd      	b.n	800873e <xTaskIncrementTick+0x46>
 8008742:	4b41      	ldr	r3, [pc, #260]	@ (8008848 <xTaskIncrementTick+0x150>)
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	60fb      	str	r3, [r7, #12]
 8008748:	4b40      	ldr	r3, [pc, #256]	@ (800884c <xTaskIncrementTick+0x154>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a3e      	ldr	r2, [pc, #248]	@ (8008848 <xTaskIncrementTick+0x150>)
 800874e:	6013      	str	r3, [r2, #0]
 8008750:	4a3e      	ldr	r2, [pc, #248]	@ (800884c <xTaskIncrementTick+0x154>)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	6013      	str	r3, [r2, #0]
 8008756:	4b3e      	ldr	r3, [pc, #248]	@ (8008850 <xTaskIncrementTick+0x158>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	3301      	adds	r3, #1
 800875c:	4a3c      	ldr	r2, [pc, #240]	@ (8008850 <xTaskIncrementTick+0x158>)
 800875e:	6013      	str	r3, [r2, #0]
 8008760:	f000 fad4 	bl	8008d0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008764:	4b3b      	ldr	r3, [pc, #236]	@ (8008854 <xTaskIncrementTick+0x15c>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	429a      	cmp	r2, r3
 800876c:	d349      	bcc.n	8008802 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800876e:	4b36      	ldr	r3, [pc, #216]	@ (8008848 <xTaskIncrementTick+0x150>)
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d104      	bne.n	8008782 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008778:	4b36      	ldr	r3, [pc, #216]	@ (8008854 <xTaskIncrementTick+0x15c>)
 800877a:	f04f 32ff 	mov.w	r2, #4294967295
 800877e:	601a      	str	r2, [r3, #0]
					break;
 8008780:	e03f      	b.n	8008802 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008782:	4b31      	ldr	r3, [pc, #196]	@ (8008848 <xTaskIncrementTick+0x150>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	68db      	ldr	r3, [r3, #12]
 800878a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008792:	693a      	ldr	r2, [r7, #16]
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	429a      	cmp	r2, r3
 8008798:	d203      	bcs.n	80087a2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800879a:	4a2e      	ldr	r2, [pc, #184]	@ (8008854 <xTaskIncrementTick+0x15c>)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087a0:	e02f      	b.n	8008802 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	3304      	adds	r3, #4
 80087a6:	4618      	mov	r0, r3
 80087a8:	f7fe fec4 	bl	8007534 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d004      	beq.n	80087be <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	3318      	adds	r3, #24
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7fe febb 	bl	8007534 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087c2:	4b25      	ldr	r3, [pc, #148]	@ (8008858 <xTaskIncrementTick+0x160>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d903      	bls.n	80087d2 <xTaskIncrementTick+0xda>
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ce:	4a22      	ldr	r2, [pc, #136]	@ (8008858 <xTaskIncrementTick+0x160>)
 80087d0:	6013      	str	r3, [r2, #0]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087d6:	4613      	mov	r3, r2
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	4413      	add	r3, r2
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	4a1f      	ldr	r2, [pc, #124]	@ (800885c <xTaskIncrementTick+0x164>)
 80087e0:	441a      	add	r2, r3
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	3304      	adds	r3, #4
 80087e6:	4619      	mov	r1, r3
 80087e8:	4610      	mov	r0, r2
 80087ea:	f7fe fe46 	bl	800747a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008860 <xTaskIncrementTick+0x168>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f8:	429a      	cmp	r2, r3
 80087fa:	d3b8      	bcc.n	800876e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80087fc:	2301      	movs	r3, #1
 80087fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008800:	e7b5      	b.n	800876e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008802:	4b17      	ldr	r3, [pc, #92]	@ (8008860 <xTaskIncrementTick+0x168>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008808:	4914      	ldr	r1, [pc, #80]	@ (800885c <xTaskIncrementTick+0x164>)
 800880a:	4613      	mov	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	440b      	add	r3, r1
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2b01      	cmp	r3, #1
 8008818:	d901      	bls.n	800881e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800881a:	2301      	movs	r3, #1
 800881c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800881e:	4b11      	ldr	r3, [pc, #68]	@ (8008864 <xTaskIncrementTick+0x16c>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d007      	beq.n	8008836 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008826:	2301      	movs	r3, #1
 8008828:	617b      	str	r3, [r7, #20]
 800882a:	e004      	b.n	8008836 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800882c:	4b0e      	ldr	r3, [pc, #56]	@ (8008868 <xTaskIncrementTick+0x170>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3301      	adds	r3, #1
 8008832:	4a0d      	ldr	r2, [pc, #52]	@ (8008868 <xTaskIncrementTick+0x170>)
 8008834:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008836:	697b      	ldr	r3, [r7, #20]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3718      	adds	r7, #24
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}
 8008840:	20000f08 	.word	0x20000f08
 8008844:	20000ee4 	.word	0x20000ee4
 8008848:	20000e98 	.word	0x20000e98
 800884c:	20000e9c 	.word	0x20000e9c
 8008850:	20000ef8 	.word	0x20000ef8
 8008854:	20000f00 	.word	0x20000f00
 8008858:	20000ee8 	.word	0x20000ee8
 800885c:	20000a10 	.word	0x20000a10
 8008860:	20000a0c 	.word	0x20000a0c
 8008864:	20000ef4 	.word	0x20000ef4
 8008868:	20000ef0 	.word	0x20000ef0

0800886c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800886c:	b480      	push	{r7}
 800886e:	b085      	sub	sp, #20
 8008870:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008872:	4b28      	ldr	r3, [pc, #160]	@ (8008914 <vTaskSwitchContext+0xa8>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d003      	beq.n	8008882 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800887a:	4b27      	ldr	r3, [pc, #156]	@ (8008918 <vTaskSwitchContext+0xac>)
 800887c:	2201      	movs	r2, #1
 800887e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008880:	e042      	b.n	8008908 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8008882:	4b25      	ldr	r3, [pc, #148]	@ (8008918 <vTaskSwitchContext+0xac>)
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008888:	4b24      	ldr	r3, [pc, #144]	@ (800891c <vTaskSwitchContext+0xb0>)
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	60fb      	str	r3, [r7, #12]
 800888e:	e011      	b.n	80088b4 <vTaskSwitchContext+0x48>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d10b      	bne.n	80088ae <vTaskSwitchContext+0x42>
	__asm volatile
 8008896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889a:	f383 8811 	msr	BASEPRI, r3
 800889e:	f3bf 8f6f 	isb	sy
 80088a2:	f3bf 8f4f 	dsb	sy
 80088a6:	607b      	str	r3, [r7, #4]
}
 80088a8:	bf00      	nop
 80088aa:	bf00      	nop
 80088ac:	e7fd      	b.n	80088aa <vTaskSwitchContext+0x3e>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	491a      	ldr	r1, [pc, #104]	@ (8008920 <vTaskSwitchContext+0xb4>)
 80088b6:	68fa      	ldr	r2, [r7, #12]
 80088b8:	4613      	mov	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	4413      	add	r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	440b      	add	r3, r1
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d0e3      	beq.n	8008890 <vTaskSwitchContext+0x24>
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4613      	mov	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	4413      	add	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4a13      	ldr	r2, [pc, #76]	@ (8008920 <vTaskSwitchContext+0xb4>)
 80088d4:	4413      	add	r3, r2
 80088d6:	60bb      	str	r3, [r7, #8]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	605a      	str	r2, [r3, #4]
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	685a      	ldr	r2, [r3, #4]
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	3308      	adds	r3, #8
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d104      	bne.n	80088f8 <vTaskSwitchContext+0x8c>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	685a      	ldr	r2, [r3, #4]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	605a      	str	r2, [r3, #4]
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	68db      	ldr	r3, [r3, #12]
 80088fe:	4a09      	ldr	r2, [pc, #36]	@ (8008924 <vTaskSwitchContext+0xb8>)
 8008900:	6013      	str	r3, [r2, #0]
 8008902:	4a06      	ldr	r2, [pc, #24]	@ (800891c <vTaskSwitchContext+0xb0>)
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	6013      	str	r3, [r2, #0]
}
 8008908:	bf00      	nop
 800890a:	3714      	adds	r7, #20
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr
 8008914:	20000f08 	.word	0x20000f08
 8008918:	20000ef4 	.word	0x20000ef4
 800891c:	20000ee8 	.word	0x20000ee8
 8008920:	20000a10 	.word	0x20000a10
 8008924:	20000a0c 	.word	0x20000a0c

08008928 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10b      	bne.n	8008950 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	60fb      	str	r3, [r7, #12]
}
 800894a:	bf00      	nop
 800894c:	bf00      	nop
 800894e:	e7fd      	b.n	800894c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008950:	4b07      	ldr	r3, [pc, #28]	@ (8008970 <vTaskPlaceOnEventList+0x48>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3318      	adds	r3, #24
 8008956:	4619      	mov	r1, r3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f7fe fdb2 	bl	80074c2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800895e:	2101      	movs	r1, #1
 8008960:	6838      	ldr	r0, [r7, #0]
 8008962:	f000 fa81 	bl	8008e68 <prvAddCurrentTaskToDelayedList>
}
 8008966:	bf00      	nop
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	20000a0c 	.word	0x20000a0c

08008974 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008974:	b580      	push	{r7, lr}
 8008976:	b086      	sub	sp, #24
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10b      	bne.n	800899e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898a:	f383 8811 	msr	BASEPRI, r3
 800898e:	f3bf 8f6f 	isb	sy
 8008992:	f3bf 8f4f 	dsb	sy
 8008996:	617b      	str	r3, [r7, #20]
}
 8008998:	bf00      	nop
 800899a:	bf00      	nop
 800899c:	e7fd      	b.n	800899a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800899e:	4b0a      	ldr	r3, [pc, #40]	@ (80089c8 <vTaskPlaceOnEventListRestricted+0x54>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	3318      	adds	r3, #24
 80089a4:	4619      	mov	r1, r3
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7fe fd67 	bl	800747a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d002      	beq.n	80089b8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80089b2:	f04f 33ff 	mov.w	r3, #4294967295
 80089b6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	68b8      	ldr	r0, [r7, #8]
 80089bc:	f000 fa54 	bl	8008e68 <prvAddCurrentTaskToDelayedList>
	}
 80089c0:	bf00      	nop
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	20000a0c 	.word	0x20000a0c

080089cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d10b      	bne.n	80089fa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80089e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e6:	f383 8811 	msr	BASEPRI, r3
 80089ea:	f3bf 8f6f 	isb	sy
 80089ee:	f3bf 8f4f 	dsb	sy
 80089f2:	60fb      	str	r3, [r7, #12]
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	e7fd      	b.n	80089f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	3318      	adds	r3, #24
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fe fd98 	bl	8007534 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a04:	4b1d      	ldr	r3, [pc, #116]	@ (8008a7c <xTaskRemoveFromEventList+0xb0>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d11d      	bne.n	8008a48 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	3304      	adds	r3, #4
 8008a10:	4618      	mov	r0, r3
 8008a12:	f7fe fd8f 	bl	8007534 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1a:	4b19      	ldr	r3, [pc, #100]	@ (8008a80 <xTaskRemoveFromEventList+0xb4>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	429a      	cmp	r2, r3
 8008a20:	d903      	bls.n	8008a2a <xTaskRemoveFromEventList+0x5e>
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a26:	4a16      	ldr	r2, [pc, #88]	@ (8008a80 <xTaskRemoveFromEventList+0xb4>)
 8008a28:	6013      	str	r3, [r2, #0]
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a2e:	4613      	mov	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4a13      	ldr	r2, [pc, #76]	@ (8008a84 <xTaskRemoveFromEventList+0xb8>)
 8008a38:	441a      	add	r2, r3
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	3304      	adds	r3, #4
 8008a3e:	4619      	mov	r1, r3
 8008a40:	4610      	mov	r0, r2
 8008a42:	f7fe fd1a 	bl	800747a <vListInsertEnd>
 8008a46:	e005      	b.n	8008a54 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	3318      	adds	r3, #24
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	480e      	ldr	r0, [pc, #56]	@ (8008a88 <xTaskRemoveFromEventList+0xbc>)
 8008a50:	f7fe fd13 	bl	800747a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a58:	4b0c      	ldr	r3, [pc, #48]	@ (8008a8c <xTaskRemoveFromEventList+0xc0>)
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a5e:	429a      	cmp	r2, r3
 8008a60:	d905      	bls.n	8008a6e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a62:	2301      	movs	r3, #1
 8008a64:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a66:	4b0a      	ldr	r3, [pc, #40]	@ (8008a90 <xTaskRemoveFromEventList+0xc4>)
 8008a68:	2201      	movs	r2, #1
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	e001      	b.n	8008a72 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a72:	697b      	ldr	r3, [r7, #20]
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	3718      	adds	r7, #24
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}
 8008a7c:	20000f08 	.word	0x20000f08
 8008a80:	20000ee8 	.word	0x20000ee8
 8008a84:	20000a10 	.word	0x20000a10
 8008a88:	20000ea0 	.word	0x20000ea0
 8008a8c:	20000a0c 	.word	0x20000a0c
 8008a90:	20000ef4 	.word	0x20000ef4

08008a94 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a9c:	4b06      	ldr	r3, [pc, #24]	@ (8008ab8 <vTaskInternalSetTimeOutState+0x24>)
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008aa4:	4b05      	ldr	r3, [pc, #20]	@ (8008abc <vTaskInternalSetTimeOutState+0x28>)
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	605a      	str	r2, [r3, #4]
}
 8008aac:	bf00      	nop
 8008aae:	370c      	adds	r7, #12
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr
 8008ab8:	20000ef8 	.word	0x20000ef8
 8008abc:	20000ee4 	.word	0x20000ee4

08008ac0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b088      	sub	sp, #32
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10b      	bne.n	8008ae8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad4:	f383 8811 	msr	BASEPRI, r3
 8008ad8:	f3bf 8f6f 	isb	sy
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	613b      	str	r3, [r7, #16]
}
 8008ae2:	bf00      	nop
 8008ae4:	bf00      	nop
 8008ae6:	e7fd      	b.n	8008ae4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10b      	bne.n	8008b06 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	60fb      	str	r3, [r7, #12]
}
 8008b00:	bf00      	nop
 8008b02:	bf00      	nop
 8008b04:	e7fd      	b.n	8008b02 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008b06:	f000 ff4f 	bl	80099a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8008b80 <xTaskCheckForTimeOut+0xc0>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	685b      	ldr	r3, [r3, #4]
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	1ad3      	subs	r3, r2, r3
 8008b18:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b22:	d102      	bne.n	8008b2a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008b24:	2300      	movs	r3, #0
 8008b26:	61fb      	str	r3, [r7, #28]
 8008b28:	e023      	b.n	8008b72 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681a      	ldr	r2, [r3, #0]
 8008b2e:	4b15      	ldr	r3, [pc, #84]	@ (8008b84 <xTaskCheckForTimeOut+0xc4>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d007      	beq.n	8008b46 <xTaskCheckForTimeOut+0x86>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	69ba      	ldr	r2, [r7, #24]
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	d302      	bcc.n	8008b46 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b40:	2301      	movs	r3, #1
 8008b42:	61fb      	str	r3, [r7, #28]
 8008b44:	e015      	b.n	8008b72 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	697a      	ldr	r2, [r7, #20]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d20b      	bcs.n	8008b68 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	1ad2      	subs	r2, r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f7ff ff99 	bl	8008a94 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b62:	2300      	movs	r3, #0
 8008b64:	61fb      	str	r3, [r7, #28]
 8008b66:	e004      	b.n	8008b72 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b72:	f000 ff4b 	bl	8009a0c <vPortExitCritical>

	return xReturn;
 8008b76:	69fb      	ldr	r3, [r7, #28]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3720      	adds	r7, #32
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	20000ee4 	.word	0x20000ee4
 8008b84:	20000ef8 	.word	0x20000ef8

08008b88 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b8c:	4b03      	ldr	r3, [pc, #12]	@ (8008b9c <vTaskMissedYield+0x14>)
 8008b8e:	2201      	movs	r2, #1
 8008b90:	601a      	str	r2, [r3, #0]
}
 8008b92:	bf00      	nop
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	20000ef4 	.word	0x20000ef4

08008ba0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b082      	sub	sp, #8
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008ba8:	f000 f852 	bl	8008c50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008bac:	4b06      	ldr	r3, [pc, #24]	@ (8008bc8 <prvIdleTask+0x28>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d9f9      	bls.n	8008ba8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008bb4:	4b05      	ldr	r3, [pc, #20]	@ (8008bcc <prvIdleTask+0x2c>)
 8008bb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008bba:	601a      	str	r2, [r3, #0]
 8008bbc:	f3bf 8f4f 	dsb	sy
 8008bc0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008bc4:	e7f0      	b.n	8008ba8 <prvIdleTask+0x8>
 8008bc6:	bf00      	nop
 8008bc8:	20000a10 	.word	0x20000a10
 8008bcc:	e000ed04 	.word	0xe000ed04

08008bd0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b082      	sub	sp, #8
 8008bd4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	607b      	str	r3, [r7, #4]
 8008bda:	e00c      	b.n	8008bf6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	4613      	mov	r3, r2
 8008be0:	009b      	lsls	r3, r3, #2
 8008be2:	4413      	add	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4a12      	ldr	r2, [pc, #72]	@ (8008c30 <prvInitialiseTaskLists+0x60>)
 8008be8:	4413      	add	r3, r2
 8008bea:	4618      	mov	r0, r3
 8008bec:	f7fe fc18 	bl	8007420 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	607b      	str	r3, [r7, #4]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b37      	cmp	r3, #55	@ 0x37
 8008bfa:	d9ef      	bls.n	8008bdc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bfc:	480d      	ldr	r0, [pc, #52]	@ (8008c34 <prvInitialiseTaskLists+0x64>)
 8008bfe:	f7fe fc0f 	bl	8007420 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008c02:	480d      	ldr	r0, [pc, #52]	@ (8008c38 <prvInitialiseTaskLists+0x68>)
 8008c04:	f7fe fc0c 	bl	8007420 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008c08:	480c      	ldr	r0, [pc, #48]	@ (8008c3c <prvInitialiseTaskLists+0x6c>)
 8008c0a:	f7fe fc09 	bl	8007420 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008c0e:	480c      	ldr	r0, [pc, #48]	@ (8008c40 <prvInitialiseTaskLists+0x70>)
 8008c10:	f7fe fc06 	bl	8007420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008c14:	480b      	ldr	r0, [pc, #44]	@ (8008c44 <prvInitialiseTaskLists+0x74>)
 8008c16:	f7fe fc03 	bl	8007420 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8008c48 <prvInitialiseTaskLists+0x78>)
 8008c1c:	4a05      	ldr	r2, [pc, #20]	@ (8008c34 <prvInitialiseTaskLists+0x64>)
 8008c1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008c20:	4b0a      	ldr	r3, [pc, #40]	@ (8008c4c <prvInitialiseTaskLists+0x7c>)
 8008c22:	4a05      	ldr	r2, [pc, #20]	@ (8008c38 <prvInitialiseTaskLists+0x68>)
 8008c24:	601a      	str	r2, [r3, #0]
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
 8008c2e:	bf00      	nop
 8008c30:	20000a10 	.word	0x20000a10
 8008c34:	20000e70 	.word	0x20000e70
 8008c38:	20000e84 	.word	0x20000e84
 8008c3c:	20000ea0 	.word	0x20000ea0
 8008c40:	20000eb4 	.word	0x20000eb4
 8008c44:	20000ecc 	.word	0x20000ecc
 8008c48:	20000e98 	.word	0x20000e98
 8008c4c:	20000e9c 	.word	0x20000e9c

08008c50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b082      	sub	sp, #8
 8008c54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c56:	e019      	b.n	8008c8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c58:	f000 fea6 	bl	80099a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c5c:	4b10      	ldr	r3, [pc, #64]	@ (8008ca0 <prvCheckTasksWaitingTermination+0x50>)
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	68db      	ldr	r3, [r3, #12]
 8008c62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	3304      	adds	r3, #4
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7fe fc63 	bl	8007534 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8008ca4 <prvCheckTasksWaitingTermination+0x54>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	3b01      	subs	r3, #1
 8008c74:	4a0b      	ldr	r2, [pc, #44]	@ (8008ca4 <prvCheckTasksWaitingTermination+0x54>)
 8008c76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c78:	4b0b      	ldr	r3, [pc, #44]	@ (8008ca8 <prvCheckTasksWaitingTermination+0x58>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8008ca8 <prvCheckTasksWaitingTermination+0x58>)
 8008c80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c82:	f000 fec3 	bl	8009a0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 f810 	bl	8008cac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c8c:	4b06      	ldr	r3, [pc, #24]	@ (8008ca8 <prvCheckTasksWaitingTermination+0x58>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d1e1      	bne.n	8008c58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c94:	bf00      	nop
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	20000eb4 	.word	0x20000eb4
 8008ca4:	20000ee0 	.word	0x20000ee0
 8008ca8:	20000ec8 	.word	0x20000ec8

08008cac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d108      	bne.n	8008cd0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f001 f860 	bl	8009d88 <vPortFree>
				vPortFree( pxTCB );
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f001 f85d 	bl	8009d88 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008cce:	e019      	b.n	8008d04 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d103      	bne.n	8008ce2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f001 f854 	bl	8009d88 <vPortFree>
	}
 8008ce0:	e010      	b.n	8008d04 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d00b      	beq.n	8008d04 <prvDeleteTCB+0x58>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	60fb      	str	r3, [r7, #12]
}
 8008cfe:	bf00      	nop
 8008d00:	bf00      	nop
 8008d02:	e7fd      	b.n	8008d00 <prvDeleteTCB+0x54>
	}
 8008d04:	bf00      	nop
 8008d06:	3710      	adds	r7, #16
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	bd80      	pop	{r7, pc}

08008d0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b083      	sub	sp, #12
 8008d10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d12:	4b0c      	ldr	r3, [pc, #48]	@ (8008d44 <prvResetNextTaskUnblockTime+0x38>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d104      	bne.n	8008d26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d48 <prvResetNextTaskUnblockTime+0x3c>)
 8008d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008d22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008d24:	e008      	b.n	8008d38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d26:	4b07      	ldr	r3, [pc, #28]	@ (8008d44 <prvResetNextTaskUnblockTime+0x38>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	4a04      	ldr	r2, [pc, #16]	@ (8008d48 <prvResetNextTaskUnblockTime+0x3c>)
 8008d36:	6013      	str	r3, [r2, #0]
}
 8008d38:	bf00      	nop
 8008d3a:	370c      	adds	r7, #12
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d42:	4770      	bx	lr
 8008d44:	20000e98 	.word	0x20000e98
 8008d48:	20000f00 	.word	0x20000f00

08008d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d52:	4b0b      	ldr	r3, [pc, #44]	@ (8008d80 <xTaskGetSchedulerState+0x34>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d102      	bne.n	8008d60 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	607b      	str	r3, [r7, #4]
 8008d5e:	e008      	b.n	8008d72 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d60:	4b08      	ldr	r3, [pc, #32]	@ (8008d84 <xTaskGetSchedulerState+0x38>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d102      	bne.n	8008d6e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d68:	2302      	movs	r3, #2
 8008d6a:	607b      	str	r3, [r7, #4]
 8008d6c:	e001      	b.n	8008d72 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d6e:	2300      	movs	r3, #0
 8008d70:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d72:	687b      	ldr	r3, [r7, #4]
	}
 8008d74:	4618      	mov	r0, r3
 8008d76:	370c      	adds	r7, #12
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	20000eec 	.word	0x20000eec
 8008d84:	20000f08 	.word	0x20000f08

08008d88 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008d94:	2300      	movs	r3, #0
 8008d96:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d058      	beq.n	8008e50 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8008e5c <xTaskPriorityDisinherit+0xd4>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	693a      	ldr	r2, [r7, #16]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d00b      	beq.n	8008dc0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	60fb      	str	r3, [r7, #12]
}
 8008dba:	bf00      	nop
 8008dbc:	bf00      	nop
 8008dbe:	e7fd      	b.n	8008dbc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d10b      	bne.n	8008de0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dcc:	f383 8811 	msr	BASEPRI, r3
 8008dd0:	f3bf 8f6f 	isb	sy
 8008dd4:	f3bf 8f4f 	dsb	sy
 8008dd8:	60bb      	str	r3, [r7, #8]
}
 8008dda:	bf00      	nop
 8008ddc:	bf00      	nop
 8008dde:	e7fd      	b.n	8008ddc <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008de4:	1e5a      	subs	r2, r3, #1
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d02c      	beq.n	8008e50 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d128      	bne.n	8008e50 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	3304      	adds	r3, #4
 8008e02:	4618      	mov	r0, r3
 8008e04:	f7fe fb96 	bl	8007534 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e14:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e20:	4b0f      	ldr	r3, [pc, #60]	@ (8008e60 <xTaskPriorityDisinherit+0xd8>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d903      	bls.n	8008e30 <xTaskPriorityDisinherit+0xa8>
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8008e60 <xTaskPriorityDisinherit+0xd8>)
 8008e2e:	6013      	str	r3, [r2, #0]
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e34:	4613      	mov	r3, r2
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	4413      	add	r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	4a09      	ldr	r2, [pc, #36]	@ (8008e64 <xTaskPriorityDisinherit+0xdc>)
 8008e3e:	441a      	add	r2, r3
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	3304      	adds	r3, #4
 8008e44:	4619      	mov	r1, r3
 8008e46:	4610      	mov	r0, r2
 8008e48:	f7fe fb17 	bl	800747a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e50:	697b      	ldr	r3, [r7, #20]
	}
 8008e52:	4618      	mov	r0, r3
 8008e54:	3718      	adds	r7, #24
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	20000a0c 	.word	0x20000a0c
 8008e60:	20000ee8 	.word	0x20000ee8
 8008e64:	20000a10 	.word	0x20000a10

08008e68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e68:	b580      	push	{r7, lr}
 8008e6a:	b084      	sub	sp, #16
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e72:	4b21      	ldr	r3, [pc, #132]	@ (8008ef8 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e78:	4b20      	ldr	r3, [pc, #128]	@ (8008efc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	3304      	adds	r3, #4
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7fe fb58 	bl	8007534 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8a:	d10a      	bne.n	8008ea2 <prvAddCurrentTaskToDelayedList+0x3a>
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d007      	beq.n	8008ea2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e92:	4b1a      	ldr	r3, [pc, #104]	@ (8008efc <prvAddCurrentTaskToDelayedList+0x94>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	3304      	adds	r3, #4
 8008e98:	4619      	mov	r1, r3
 8008e9a:	4819      	ldr	r0, [pc, #100]	@ (8008f00 <prvAddCurrentTaskToDelayedList+0x98>)
 8008e9c:	f7fe faed 	bl	800747a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ea0:	e026      	b.n	8008ef0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ea2:	68fa      	ldr	r2, [r7, #12]
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4413      	add	r3, r2
 8008ea8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008eaa:	4b14      	ldr	r3, [pc, #80]	@ (8008efc <prvAddCurrentTaskToDelayedList+0x94>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008eb2:	68ba      	ldr	r2, [r7, #8]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	429a      	cmp	r2, r3
 8008eb8:	d209      	bcs.n	8008ece <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eba:	4b12      	ldr	r3, [pc, #72]	@ (8008f04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ebc:	681a      	ldr	r2, [r3, #0]
 8008ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8008efc <prvAddCurrentTaskToDelayedList+0x94>)
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	3304      	adds	r3, #4
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	f7fe fafb 	bl	80074c2 <vListInsert>
}
 8008ecc:	e010      	b.n	8008ef0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ece:	4b0e      	ldr	r3, [pc, #56]	@ (8008f08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b0a      	ldr	r3, [pc, #40]	@ (8008efc <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	3304      	adds	r3, #4
 8008ed8:	4619      	mov	r1, r3
 8008eda:	4610      	mov	r0, r2
 8008edc:	f7fe faf1 	bl	80074c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8008f0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d202      	bcs.n	8008ef0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008eea:	4a08      	ldr	r2, [pc, #32]	@ (8008f0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	6013      	str	r3, [r2, #0]
}
 8008ef0:	bf00      	nop
 8008ef2:	3710      	adds	r7, #16
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	20000ee4 	.word	0x20000ee4
 8008efc:	20000a0c 	.word	0x20000a0c
 8008f00:	20000ecc 	.word	0x20000ecc
 8008f04:	20000e9c 	.word	0x20000e9c
 8008f08:	20000e98 	.word	0x20000e98
 8008f0c:	20000f00 	.word	0x20000f00

08008f10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08a      	sub	sp, #40	@ 0x28
 8008f14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008f16:	2300      	movs	r3, #0
 8008f18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008f1a:	f000 fbb1 	bl	8009680 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008f1e:	4b1d      	ldr	r3, [pc, #116]	@ (8008f94 <xTimerCreateTimerTask+0x84>)
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d021      	beq.n	8008f6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008f2e:	1d3a      	adds	r2, r7, #4
 8008f30:	f107 0108 	add.w	r1, r7, #8
 8008f34:	f107 030c 	add.w	r3, r7, #12
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fe fa57 	bl	80073ec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008f3e:	6879      	ldr	r1, [r7, #4]
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	9202      	str	r2, [sp, #8]
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	2302      	movs	r3, #2
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	2300      	movs	r3, #0
 8008f4e:	460a      	mov	r2, r1
 8008f50:	4911      	ldr	r1, [pc, #68]	@ (8008f98 <xTimerCreateTimerTask+0x88>)
 8008f52:	4812      	ldr	r0, [pc, #72]	@ (8008f9c <xTimerCreateTimerTask+0x8c>)
 8008f54:	f7ff f8d0 	bl	80080f8 <xTaskCreateStatic>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	4a11      	ldr	r2, [pc, #68]	@ (8008fa0 <xTimerCreateTimerTask+0x90>)
 8008f5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008f5e:	4b10      	ldr	r3, [pc, #64]	@ (8008fa0 <xTimerCreateTimerTask+0x90>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d001      	beq.n	8008f6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008f66:	2301      	movs	r3, #1
 8008f68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10b      	bne.n	8008f88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f74:	f383 8811 	msr	BASEPRI, r3
 8008f78:	f3bf 8f6f 	isb	sy
 8008f7c:	f3bf 8f4f 	dsb	sy
 8008f80:	613b      	str	r3, [r7, #16]
}
 8008f82:	bf00      	nop
 8008f84:	bf00      	nop
 8008f86:	e7fd      	b.n	8008f84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008f88:	697b      	ldr	r3, [r7, #20]
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	20000f3c 	.word	0x20000f3c
 8008f98:	0800a134 	.word	0x0800a134
 8008f9c:	08009219 	.word	0x08009219
 8008fa0:	20000f40 	.word	0x20000f40

08008fa4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b088      	sub	sp, #32
 8008fa8:	af02      	add	r7, sp, #8
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008fb2:	202c      	movs	r0, #44	@ 0x2c
 8008fb4:	f000 fe1a 	bl	8009bec <pvPortMalloc>
 8008fb8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00d      	beq.n	8008fdc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	9301      	str	r3, [sp, #4]
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	9300      	str	r3, [sp, #0]
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	687a      	ldr	r2, [r7, #4]
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 f845 	bl	8009066 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008fdc:	697b      	ldr	r3, [r7, #20]
	}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008fe6:	b580      	push	{r7, lr}
 8008fe8:	b08a      	sub	sp, #40	@ 0x28
 8008fea:	af02      	add	r7, sp, #8
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
 8008ff2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008ff4:	232c      	movs	r3, #44	@ 0x2c
 8008ff6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	2b2c      	cmp	r3, #44	@ 0x2c
 8008ffc:	d00b      	beq.n	8009016 <xTimerCreateStatic+0x30>
	__asm volatile
 8008ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009002:	f383 8811 	msr	BASEPRI, r3
 8009006:	f3bf 8f6f 	isb	sy
 800900a:	f3bf 8f4f 	dsb	sy
 800900e:	61bb      	str	r3, [r7, #24]
}
 8009010:	bf00      	nop
 8009012:	bf00      	nop
 8009014:	e7fd      	b.n	8009012 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009016:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8009018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800901a:	2b00      	cmp	r3, #0
 800901c:	d10b      	bne.n	8009036 <xTimerCreateStatic+0x50>
	__asm volatile
 800901e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009022:	f383 8811 	msr	BASEPRI, r3
 8009026:	f3bf 8f6f 	isb	sy
 800902a:	f3bf 8f4f 	dsb	sy
 800902e:	617b      	str	r3, [r7, #20]
}
 8009030:	bf00      	nop
 8009032:	bf00      	nop
 8009034:	e7fd      	b.n	8009032 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8009036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009038:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00d      	beq.n	800905c <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	2202      	movs	r2, #2
 8009044:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8009048:	69fb      	ldr	r3, [r7, #28]
 800904a:	9301      	str	r3, [sp, #4]
 800904c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800904e:	9300      	str	r3, [sp, #0]
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	68b9      	ldr	r1, [r7, #8]
 8009056:	68f8      	ldr	r0, [r7, #12]
 8009058:	f000 f805 	bl	8009066 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800905c:	69fb      	ldr	r3, [r7, #28]
	}
 800905e:	4618      	mov	r0, r3
 8009060:	3720      	adds	r7, #32
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b086      	sub	sp, #24
 800906a:	af00      	add	r7, sp, #0
 800906c:	60f8      	str	r0, [r7, #12]
 800906e:	60b9      	str	r1, [r7, #8]
 8009070:	607a      	str	r2, [r7, #4]
 8009072:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10b      	bne.n	8009092 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	617b      	str	r3, [r7, #20]
}
 800908c:	bf00      	nop
 800908e:	bf00      	nop
 8009090:	e7fd      	b.n	800908e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8009092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009094:	2b00      	cmp	r3, #0
 8009096:	d01e      	beq.n	80090d6 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8009098:	f000 faf2 	bl	8009680 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800909c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80090a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80090a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80090ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b0:	6a3a      	ldr	r2, [r7, #32]
 80090b2:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80090b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b6:	3304      	adds	r3, #4
 80090b8:	4618      	mov	r0, r3
 80090ba:	f7fe f9d1 	bl	8007460 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d008      	beq.n	80090d6 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090ca:	f043 0304 	orr.w	r3, r3, #4
 80090ce:	b2da      	uxtb	r2, r3
 80090d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80090d6:	bf00      	nop
 80090d8:	3718      	adds	r7, #24
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
	...

080090e0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b08a      	sub	sp, #40	@ 0x28
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	60f8      	str	r0, [r7, #12]
 80090e8:	60b9      	str	r1, [r7, #8]
 80090ea:	607a      	str	r2, [r7, #4]
 80090ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80090ee:	2300      	movs	r3, #0
 80090f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d10b      	bne.n	8009110 <xTimerGenericCommand+0x30>
	__asm volatile
 80090f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fc:	f383 8811 	msr	BASEPRI, r3
 8009100:	f3bf 8f6f 	isb	sy
 8009104:	f3bf 8f4f 	dsb	sy
 8009108:	623b      	str	r3, [r7, #32]
}
 800910a:	bf00      	nop
 800910c:	bf00      	nop
 800910e:	e7fd      	b.n	800910c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009110:	4b19      	ldr	r3, [pc, #100]	@ (8009178 <xTimerGenericCommand+0x98>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d02a      	beq.n	800916e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	2b05      	cmp	r3, #5
 8009128:	dc18      	bgt.n	800915c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800912a:	f7ff fe0f 	bl	8008d4c <xTaskGetSchedulerState>
 800912e:	4603      	mov	r3, r0
 8009130:	2b02      	cmp	r3, #2
 8009132:	d109      	bne.n	8009148 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009134:	4b10      	ldr	r3, [pc, #64]	@ (8009178 <xTimerGenericCommand+0x98>)
 8009136:	6818      	ldr	r0, [r3, #0]
 8009138:	f107 0110 	add.w	r1, r7, #16
 800913c:	2300      	movs	r3, #0
 800913e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009140:	f7fe fb68 	bl	8007814 <xQueueGenericSend>
 8009144:	6278      	str	r0, [r7, #36]	@ 0x24
 8009146:	e012      	b.n	800916e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009148:	4b0b      	ldr	r3, [pc, #44]	@ (8009178 <xTimerGenericCommand+0x98>)
 800914a:	6818      	ldr	r0, [r3, #0]
 800914c:	f107 0110 	add.w	r1, r7, #16
 8009150:	2300      	movs	r3, #0
 8009152:	2200      	movs	r2, #0
 8009154:	f7fe fb5e 	bl	8007814 <xQueueGenericSend>
 8009158:	6278      	str	r0, [r7, #36]	@ 0x24
 800915a:	e008      	b.n	800916e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800915c:	4b06      	ldr	r3, [pc, #24]	@ (8009178 <xTimerGenericCommand+0x98>)
 800915e:	6818      	ldr	r0, [r3, #0]
 8009160:	f107 0110 	add.w	r1, r7, #16
 8009164:	2300      	movs	r3, #0
 8009166:	683a      	ldr	r2, [r7, #0]
 8009168:	f7fe fc56 	bl	8007a18 <xQueueGenericSendFromISR>
 800916c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800916e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009170:	4618      	mov	r0, r3
 8009172:	3728      	adds	r7, #40	@ 0x28
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}
 8009178:	20000f3c 	.word	0x20000f3c

0800917c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af02      	add	r7, sp, #8
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009186:	4b23      	ldr	r3, [pc, #140]	@ (8009214 <prvProcessExpiredTimer+0x98>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	68db      	ldr	r3, [r3, #12]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	3304      	adds	r3, #4
 8009194:	4618      	mov	r0, r3
 8009196:	f7fe f9cd 	bl	8007534 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800919a:	697b      	ldr	r3, [r7, #20]
 800919c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091a0:	f003 0304 	and.w	r3, r3, #4
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d023      	beq.n	80091f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	699a      	ldr	r2, [r3, #24]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	18d1      	adds	r1, r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	6978      	ldr	r0, [r7, #20]
 80091b6:	f000 f8d5 	bl	8009364 <prvInsertTimerInActiveList>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d020      	beq.n	8009202 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091c0:	2300      	movs	r3, #0
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	2300      	movs	r3, #0
 80091c6:	687a      	ldr	r2, [r7, #4]
 80091c8:	2100      	movs	r1, #0
 80091ca:	6978      	ldr	r0, [r7, #20]
 80091cc:	f7ff ff88 	bl	80090e0 <xTimerGenericCommand>
 80091d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d114      	bne.n	8009202 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80091d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091dc:	f383 8811 	msr	BASEPRI, r3
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	60fb      	str	r3, [r7, #12]
}
 80091ea:	bf00      	nop
 80091ec:	bf00      	nop
 80091ee:	e7fd      	b.n	80091ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80091f0:	697b      	ldr	r3, [r7, #20]
 80091f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091f6:	f023 0301 	bic.w	r3, r3, #1
 80091fa:	b2da      	uxtb	r2, r3
 80091fc:	697b      	ldr	r3, [r7, #20]
 80091fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009202:	697b      	ldr	r3, [r7, #20]
 8009204:	6a1b      	ldr	r3, [r3, #32]
 8009206:	6978      	ldr	r0, [r7, #20]
 8009208:	4798      	blx	r3
}
 800920a:	bf00      	nop
 800920c:	3718      	adds	r7, #24
 800920e:	46bd      	mov	sp, r7
 8009210:	bd80      	pop	{r7, pc}
 8009212:	bf00      	nop
 8009214:	20000f34 	.word	0x20000f34

08009218 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009220:	f107 0308 	add.w	r3, r7, #8
 8009224:	4618      	mov	r0, r3
 8009226:	f000 f859 	bl	80092dc <prvGetNextExpireTime>
 800922a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	4619      	mov	r1, r3
 8009230:	68f8      	ldr	r0, [r7, #12]
 8009232:	f000 f805 	bl	8009240 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009236:	f000 f8d7 	bl	80093e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800923a:	bf00      	nop
 800923c:	e7f0      	b.n	8009220 <prvTimerTask+0x8>
	...

08009240 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800924a:	f7ff f999 	bl	8008580 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800924e:	f107 0308 	add.w	r3, r7, #8
 8009252:	4618      	mov	r0, r3
 8009254:	f000 f866 	bl	8009324 <prvSampleTimeNow>
 8009258:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d130      	bne.n	80092c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d10a      	bne.n	800927c <prvProcessTimerOrBlockTask+0x3c>
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	429a      	cmp	r2, r3
 800926c:	d806      	bhi.n	800927c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800926e:	f7ff f995 	bl	800859c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009272:	68f9      	ldr	r1, [r7, #12]
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff ff81 	bl	800917c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800927a:	e024      	b.n	80092c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d008      	beq.n	8009294 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009282:	4b13      	ldr	r3, [pc, #76]	@ (80092d0 <prvProcessTimerOrBlockTask+0x90>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d101      	bne.n	8009290 <prvProcessTimerOrBlockTask+0x50>
 800928c:	2301      	movs	r3, #1
 800928e:	e000      	b.n	8009292 <prvProcessTimerOrBlockTask+0x52>
 8009290:	2300      	movs	r3, #0
 8009292:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009294:	4b0f      	ldr	r3, [pc, #60]	@ (80092d4 <prvProcessTimerOrBlockTask+0x94>)
 8009296:	6818      	ldr	r0, [r3, #0]
 8009298:	687a      	ldr	r2, [r7, #4]
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	1ad3      	subs	r3, r2, r3
 800929e:	683a      	ldr	r2, [r7, #0]
 80092a0:	4619      	mov	r1, r3
 80092a2:	f7fe fef5 	bl	8008090 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80092a6:	f7ff f979 	bl	800859c <xTaskResumeAll>
 80092aa:	4603      	mov	r3, r0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d10a      	bne.n	80092c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80092b0:	4b09      	ldr	r3, [pc, #36]	@ (80092d8 <prvProcessTimerOrBlockTask+0x98>)
 80092b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	f3bf 8f4f 	dsb	sy
 80092bc:	f3bf 8f6f 	isb	sy
}
 80092c0:	e001      	b.n	80092c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80092c2:	f7ff f96b 	bl	800859c <xTaskResumeAll>
}
 80092c6:	bf00      	nop
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20000f38 	.word	0x20000f38
 80092d4:	20000f3c 	.word	0x20000f3c
 80092d8:	e000ed04 	.word	0xe000ed04

080092dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80092e4:	4b0e      	ldr	r3, [pc, #56]	@ (8009320 <prvGetNextExpireTime+0x44>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d101      	bne.n	80092f2 <prvGetNextExpireTime+0x16>
 80092ee:	2201      	movs	r2, #1
 80092f0:	e000      	b.n	80092f4 <prvGetNextExpireTime+0x18>
 80092f2:	2200      	movs	r2, #0
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d105      	bne.n	800930c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009300:	4b07      	ldr	r3, [pc, #28]	@ (8009320 <prvGetNextExpireTime+0x44>)
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	60fb      	str	r3, [r7, #12]
 800930a:	e001      	b.n	8009310 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800930c:	2300      	movs	r3, #0
 800930e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009310:	68fb      	ldr	r3, [r7, #12]
}
 8009312:	4618      	mov	r0, r3
 8009314:	3714      	adds	r7, #20
 8009316:	46bd      	mov	sp, r7
 8009318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931c:	4770      	bx	lr
 800931e:	bf00      	nop
 8009320:	20000f34 	.word	0x20000f34

08009324 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800932c:	f7ff f9d4 	bl	80086d8 <xTaskGetTickCount>
 8009330:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009332:	4b0b      	ldr	r3, [pc, #44]	@ (8009360 <prvSampleTimeNow+0x3c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	429a      	cmp	r2, r3
 800933a:	d205      	bcs.n	8009348 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800933c:	f000 f93a 	bl	80095b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2201      	movs	r2, #1
 8009344:	601a      	str	r2, [r3, #0]
 8009346:	e002      	b.n	800934e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800934e:	4a04      	ldr	r2, [pc, #16]	@ (8009360 <prvSampleTimeNow+0x3c>)
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009354:	68fb      	ldr	r3, [r7, #12]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3710      	adds	r7, #16
 800935a:	46bd      	mov	sp, r7
 800935c:	bd80      	pop	{r7, pc}
 800935e:	bf00      	nop
 8009360:	20000f44 	.word	0x20000f44

08009364 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b086      	sub	sp, #24
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009372:	2300      	movs	r3, #0
 8009374:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	68fa      	ldr	r2, [r7, #12]
 8009380:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009382:	68ba      	ldr	r2, [r7, #8]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	429a      	cmp	r2, r3
 8009388:	d812      	bhi.n	80093b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	1ad2      	subs	r2, r2, r3
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	699b      	ldr	r3, [r3, #24]
 8009394:	429a      	cmp	r2, r3
 8009396:	d302      	bcc.n	800939e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009398:	2301      	movs	r3, #1
 800939a:	617b      	str	r3, [r7, #20]
 800939c:	e01b      	b.n	80093d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800939e:	4b10      	ldr	r3, [pc, #64]	@ (80093e0 <prvInsertTimerInActiveList+0x7c>)
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4619      	mov	r1, r3
 80093a8:	4610      	mov	r0, r2
 80093aa:	f7fe f88a 	bl	80074c2 <vListInsert>
 80093ae:	e012      	b.n	80093d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80093b0:	687a      	ldr	r2, [r7, #4]
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d206      	bcs.n	80093c6 <prvInsertTimerInActiveList+0x62>
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d302      	bcc.n	80093c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80093c0:	2301      	movs	r3, #1
 80093c2:	617b      	str	r3, [r7, #20]
 80093c4:	e007      	b.n	80093d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80093c6:	4b07      	ldr	r3, [pc, #28]	@ (80093e4 <prvInsertTimerInActiveList+0x80>)
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	3304      	adds	r3, #4
 80093ce:	4619      	mov	r1, r3
 80093d0:	4610      	mov	r0, r2
 80093d2:	f7fe f876 	bl	80074c2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80093d6:	697b      	ldr	r3, [r7, #20]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3718      	adds	r7, #24
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	20000f38 	.word	0x20000f38
 80093e4:	20000f34 	.word	0x20000f34

080093e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b08e      	sub	sp, #56	@ 0x38
 80093ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80093ee:	e0ce      	b.n	800958e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	da19      	bge.n	800942a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80093f6:	1d3b      	adds	r3, r7, #4
 80093f8:	3304      	adds	r3, #4
 80093fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80093fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d10b      	bne.n	800941a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009406:	f383 8811 	msr	BASEPRI, r3
 800940a:	f3bf 8f6f 	isb	sy
 800940e:	f3bf 8f4f 	dsb	sy
 8009412:	61fb      	str	r3, [r7, #28]
}
 8009414:	bf00      	nop
 8009416:	bf00      	nop
 8009418:	e7fd      	b.n	8009416 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800941a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009420:	6850      	ldr	r0, [r2, #4]
 8009422:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009424:	6892      	ldr	r2, [r2, #8]
 8009426:	4611      	mov	r1, r2
 8009428:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2b00      	cmp	r3, #0
 800942e:	f2c0 80ae 	blt.w	800958e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009438:	695b      	ldr	r3, [r3, #20]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d004      	beq.n	8009448 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800943e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009440:	3304      	adds	r3, #4
 8009442:	4618      	mov	r0, r3
 8009444:	f7fe f876 	bl	8007534 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009448:	463b      	mov	r3, r7
 800944a:	4618      	mov	r0, r3
 800944c:	f7ff ff6a 	bl	8009324 <prvSampleTimeNow>
 8009450:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2b09      	cmp	r3, #9
 8009456:	f200 8097 	bhi.w	8009588 <prvProcessReceivedCommands+0x1a0>
 800945a:	a201      	add	r2, pc, #4	@ (adr r2, 8009460 <prvProcessReceivedCommands+0x78>)
 800945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009460:	08009489 	.word	0x08009489
 8009464:	08009489 	.word	0x08009489
 8009468:	08009489 	.word	0x08009489
 800946c:	080094ff 	.word	0x080094ff
 8009470:	08009513 	.word	0x08009513
 8009474:	0800955f 	.word	0x0800955f
 8009478:	08009489 	.word	0x08009489
 800947c:	08009489 	.word	0x08009489
 8009480:	080094ff 	.word	0x080094ff
 8009484:	08009513 	.word	0x08009513
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800948a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800948e:	f043 0301 	orr.w	r3, r3, #1
 8009492:	b2da      	uxtb	r2, r3
 8009494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009496:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	18d1      	adds	r1, r2, r3
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80094a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094a8:	f7ff ff5c 	bl	8009364 <prvInsertTimerInActiveList>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d06c      	beq.n	800958c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094b4:	6a1b      	ldr	r3, [r3, #32]
 80094b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80094ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80094c0:	f003 0304 	and.w	r3, r3, #4
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d061      	beq.n	800958c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094cc:	699b      	ldr	r3, [r3, #24]
 80094ce:	441a      	add	r2, r3
 80094d0:	2300      	movs	r3, #0
 80094d2:	9300      	str	r3, [sp, #0]
 80094d4:	2300      	movs	r3, #0
 80094d6:	2100      	movs	r1, #0
 80094d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80094da:	f7ff fe01 	bl	80090e0 <xTimerGenericCommand>
 80094de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d152      	bne.n	800958c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80094e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ea:	f383 8811 	msr	BASEPRI, r3
 80094ee:	f3bf 8f6f 	isb	sy
 80094f2:	f3bf 8f4f 	dsb	sy
 80094f6:	61bb      	str	r3, [r7, #24]
}
 80094f8:	bf00      	nop
 80094fa:	bf00      	nop
 80094fc:	e7fd      	b.n	80094fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80094fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009500:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009504:	f023 0301 	bic.w	r3, r3, #1
 8009508:	b2da      	uxtb	r2, r3
 800950a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009510:	e03d      	b.n	800958e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009514:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009518:	f043 0301 	orr.w	r3, r3, #1
 800951c:	b2da      	uxtb	r2, r3
 800951e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009520:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009528:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800952a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10b      	bne.n	800954a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009536:	f383 8811 	msr	BASEPRI, r3
 800953a:	f3bf 8f6f 	isb	sy
 800953e:	f3bf 8f4f 	dsb	sy
 8009542:	617b      	str	r3, [r7, #20]
}
 8009544:	bf00      	nop
 8009546:	bf00      	nop
 8009548:	e7fd      	b.n	8009546 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800954a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800954c:	699a      	ldr	r2, [r3, #24]
 800954e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009550:	18d1      	adds	r1, r2, r3
 8009552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009554:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009556:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009558:	f7ff ff04 	bl	8009364 <prvInsertTimerInActiveList>
					break;
 800955c:	e017      	b.n	800958e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800955e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009560:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009564:	f003 0302 	and.w	r3, r3, #2
 8009568:	2b00      	cmp	r3, #0
 800956a:	d103      	bne.n	8009574 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800956c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800956e:	f000 fc0b 	bl	8009d88 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009572:	e00c      	b.n	800958e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009576:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800957a:	f023 0301 	bic.w	r3, r3, #1
 800957e:	b2da      	uxtb	r2, r3
 8009580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009582:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009586:	e002      	b.n	800958e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009588:	bf00      	nop
 800958a:	e000      	b.n	800958e <prvProcessReceivedCommands+0x1a6>
					break;
 800958c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800958e:	4b08      	ldr	r3, [pc, #32]	@ (80095b0 <prvProcessReceivedCommands+0x1c8>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	1d39      	adds	r1, r7, #4
 8009594:	2200      	movs	r2, #0
 8009596:	4618      	mov	r0, r3
 8009598:	f7fe fadc 	bl	8007b54 <xQueueReceive>
 800959c:	4603      	mov	r3, r0
 800959e:	2b00      	cmp	r3, #0
 80095a0:	f47f af26 	bne.w	80093f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80095a4:	bf00      	nop
 80095a6:	bf00      	nop
 80095a8:	3730      	adds	r7, #48	@ 0x30
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	20000f3c 	.word	0x20000f3c

080095b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b088      	sub	sp, #32
 80095b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80095ba:	e049      	b.n	8009650 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80095bc:	4b2e      	ldr	r3, [pc, #184]	@ (8009678 <prvSwitchTimerLists+0xc4>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68db      	ldr	r3, [r3, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095c6:	4b2c      	ldr	r3, [pc, #176]	@ (8009678 <prvSwitchTimerLists+0xc4>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	68db      	ldr	r3, [r3, #12]
 80095ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	3304      	adds	r3, #4
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fd ffad 	bl	8007534 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	6a1b      	ldr	r3, [r3, #32]
 80095de:	68f8      	ldr	r0, [r7, #12]
 80095e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80095e8:	f003 0304 	and.w	r3, r3, #4
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d02f      	beq.n	8009650 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	693a      	ldr	r2, [r7, #16]
 80095f6:	4413      	add	r3, r2
 80095f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80095fa:	68ba      	ldr	r2, [r7, #8]
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d90e      	bls.n	8009620 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	68fa      	ldr	r2, [r7, #12]
 800960c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800960e:	4b1a      	ldr	r3, [pc, #104]	@ (8009678 <prvSwitchTimerLists+0xc4>)
 8009610:	681a      	ldr	r2, [r3, #0]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	3304      	adds	r3, #4
 8009616:	4619      	mov	r1, r3
 8009618:	4610      	mov	r0, r2
 800961a:	f7fd ff52 	bl	80074c2 <vListInsert>
 800961e:	e017      	b.n	8009650 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009620:	2300      	movs	r3, #0
 8009622:	9300      	str	r3, [sp, #0]
 8009624:	2300      	movs	r3, #0
 8009626:	693a      	ldr	r2, [r7, #16]
 8009628:	2100      	movs	r1, #0
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f7ff fd58 	bl	80090e0 <xTimerGenericCommand>
 8009630:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10b      	bne.n	8009650 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	603b      	str	r3, [r7, #0]
}
 800964a:	bf00      	nop
 800964c:	bf00      	nop
 800964e:	e7fd      	b.n	800964c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009650:	4b09      	ldr	r3, [pc, #36]	@ (8009678 <prvSwitchTimerLists+0xc4>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d1b0      	bne.n	80095bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800965a:	4b07      	ldr	r3, [pc, #28]	@ (8009678 <prvSwitchTimerLists+0xc4>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009660:	4b06      	ldr	r3, [pc, #24]	@ (800967c <prvSwitchTimerLists+0xc8>)
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a04      	ldr	r2, [pc, #16]	@ (8009678 <prvSwitchTimerLists+0xc4>)
 8009666:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009668:	4a04      	ldr	r2, [pc, #16]	@ (800967c <prvSwitchTimerLists+0xc8>)
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	6013      	str	r3, [r2, #0]
}
 800966e:	bf00      	nop
 8009670:	3718      	adds	r7, #24
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20000f34 	.word	0x20000f34
 800967c:	20000f38 	.word	0x20000f38

08009680 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b082      	sub	sp, #8
 8009684:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009686:	f000 f98f 	bl	80099a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800968a:	4b15      	ldr	r3, [pc, #84]	@ (80096e0 <prvCheckForValidListAndQueue+0x60>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	2b00      	cmp	r3, #0
 8009690:	d120      	bne.n	80096d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009692:	4814      	ldr	r0, [pc, #80]	@ (80096e4 <prvCheckForValidListAndQueue+0x64>)
 8009694:	f7fd fec4 	bl	8007420 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009698:	4813      	ldr	r0, [pc, #76]	@ (80096e8 <prvCheckForValidListAndQueue+0x68>)
 800969a:	f7fd fec1 	bl	8007420 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800969e:	4b13      	ldr	r3, [pc, #76]	@ (80096ec <prvCheckForValidListAndQueue+0x6c>)
 80096a0:	4a10      	ldr	r2, [pc, #64]	@ (80096e4 <prvCheckForValidListAndQueue+0x64>)
 80096a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80096a4:	4b12      	ldr	r3, [pc, #72]	@ (80096f0 <prvCheckForValidListAndQueue+0x70>)
 80096a6:	4a10      	ldr	r2, [pc, #64]	@ (80096e8 <prvCheckForValidListAndQueue+0x68>)
 80096a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80096aa:	2300      	movs	r3, #0
 80096ac:	9300      	str	r3, [sp, #0]
 80096ae:	4b11      	ldr	r3, [pc, #68]	@ (80096f4 <prvCheckForValidListAndQueue+0x74>)
 80096b0:	4a11      	ldr	r2, [pc, #68]	@ (80096f8 <prvCheckForValidListAndQueue+0x78>)
 80096b2:	2110      	movs	r1, #16
 80096b4:	200a      	movs	r0, #10
 80096b6:	f7fd ffd1 	bl	800765c <xQueueGenericCreateStatic>
 80096ba:	4603      	mov	r3, r0
 80096bc:	4a08      	ldr	r2, [pc, #32]	@ (80096e0 <prvCheckForValidListAndQueue+0x60>)
 80096be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80096c0:	4b07      	ldr	r3, [pc, #28]	@ (80096e0 <prvCheckForValidListAndQueue+0x60>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d005      	beq.n	80096d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80096c8:	4b05      	ldr	r3, [pc, #20]	@ (80096e0 <prvCheckForValidListAndQueue+0x60>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	490b      	ldr	r1, [pc, #44]	@ (80096fc <prvCheckForValidListAndQueue+0x7c>)
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7fe fcb4 	bl	800803c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80096d4:	f000 f99a 	bl	8009a0c <vPortExitCritical>
}
 80096d8:	bf00      	nop
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	20000f3c 	.word	0x20000f3c
 80096e4:	20000f0c 	.word	0x20000f0c
 80096e8:	20000f20 	.word	0x20000f20
 80096ec:	20000f34 	.word	0x20000f34
 80096f0:	20000f38 	.word	0x20000f38
 80096f4:	20000fe8 	.word	0x20000fe8
 80096f8:	20000f48 	.word	0x20000f48
 80096fc:	0800a13c 	.word	0x0800a13c

08009700 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d10b      	bne.n	800972a <pvTimerGetTimerID+0x2a>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	60fb      	str	r3, [r7, #12]
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	e7fd      	b.n	8009726 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800972a:	f000 f93d 	bl	80099a8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	69db      	ldr	r3, [r3, #28]
 8009732:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8009734:	f000 f96a 	bl	8009a0c <vPortExitCritical>

	return pvReturn;
 8009738:	693b      	ldr	r3, [r7, #16]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3718      	adds	r7, #24
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
	...

08009744 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009744:	b480      	push	{r7}
 8009746:	b085      	sub	sp, #20
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	3b04      	subs	r3, #4
 8009754:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800975c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3b04      	subs	r3, #4
 8009762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	f023 0201 	bic.w	r2, r3, #1
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	3b04      	subs	r3, #4
 8009772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009774:	4a0c      	ldr	r2, [pc, #48]	@ (80097a8 <pxPortInitialiseStack+0x64>)
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	3b14      	subs	r3, #20
 800977e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	3b04      	subs	r3, #4
 800978a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f06f 0202 	mvn.w	r2, #2
 8009792:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	3b20      	subs	r3, #32
 8009798:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800979a:	68fb      	ldr	r3, [r7, #12]
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	080097ad 	.word	0x080097ad

080097ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80097b2:	2300      	movs	r3, #0
 80097b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097b6:	4b13      	ldr	r3, [pc, #76]	@ (8009804 <prvTaskExitError+0x58>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097be:	d00b      	beq.n	80097d8 <prvTaskExitError+0x2c>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	60fb      	str	r3, [r7, #12]
}
 80097d2:	bf00      	nop
 80097d4:	bf00      	nop
 80097d6:	e7fd      	b.n	80097d4 <prvTaskExitError+0x28>
	__asm volatile
 80097d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097dc:	f383 8811 	msr	BASEPRI, r3
 80097e0:	f3bf 8f6f 	isb	sy
 80097e4:	f3bf 8f4f 	dsb	sy
 80097e8:	60bb      	str	r3, [r7, #8]
}
 80097ea:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80097ec:	bf00      	nop
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0fc      	beq.n	80097ee <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097f4:	bf00      	nop
 80097f6:	bf00      	nop
 80097f8:	3714      	adds	r7, #20
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	2000005c 	.word	0x2000005c
	...

08009810 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009810:	4b07      	ldr	r3, [pc, #28]	@ (8009830 <pxCurrentTCBConst2>)
 8009812:	6819      	ldr	r1, [r3, #0]
 8009814:	6808      	ldr	r0, [r1, #0]
 8009816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800981a:	f380 8809 	msr	PSP, r0
 800981e:	f3bf 8f6f 	isb	sy
 8009822:	f04f 0000 	mov.w	r0, #0
 8009826:	f380 8811 	msr	BASEPRI, r0
 800982a:	4770      	bx	lr
 800982c:	f3af 8000 	nop.w

08009830 <pxCurrentTCBConst2>:
 8009830:	20000a0c 	.word	0x20000a0c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009834:	bf00      	nop
 8009836:	bf00      	nop

08009838 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009838:	4808      	ldr	r0, [pc, #32]	@ (800985c <prvPortStartFirstTask+0x24>)
 800983a:	6800      	ldr	r0, [r0, #0]
 800983c:	6800      	ldr	r0, [r0, #0]
 800983e:	f380 8808 	msr	MSP, r0
 8009842:	f04f 0000 	mov.w	r0, #0
 8009846:	f380 8814 	msr	CONTROL, r0
 800984a:	b662      	cpsie	i
 800984c:	b661      	cpsie	f
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	f3bf 8f6f 	isb	sy
 8009856:	df00      	svc	0
 8009858:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800985a:	bf00      	nop
 800985c:	e000ed08 	.word	0xe000ed08

08009860 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009866:	4b47      	ldr	r3, [pc, #284]	@ (8009984 <xPortStartScheduler+0x124>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4a47      	ldr	r2, [pc, #284]	@ (8009988 <xPortStartScheduler+0x128>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d10b      	bne.n	8009888 <xPortStartScheduler+0x28>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	60fb      	str	r3, [r7, #12]
}
 8009882:	bf00      	nop
 8009884:	bf00      	nop
 8009886:	e7fd      	b.n	8009884 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009888:	4b3e      	ldr	r3, [pc, #248]	@ (8009984 <xPortStartScheduler+0x124>)
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a3f      	ldr	r2, [pc, #252]	@ (800998c <xPortStartScheduler+0x12c>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d10b      	bne.n	80098aa <xPortStartScheduler+0x4a>
	__asm volatile
 8009892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009896:	f383 8811 	msr	BASEPRI, r3
 800989a:	f3bf 8f6f 	isb	sy
 800989e:	f3bf 8f4f 	dsb	sy
 80098a2:	613b      	str	r3, [r7, #16]
}
 80098a4:	bf00      	nop
 80098a6:	bf00      	nop
 80098a8:	e7fd      	b.n	80098a6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098aa:	4b39      	ldr	r3, [pc, #228]	@ (8009990 <xPortStartScheduler+0x130>)
 80098ac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	781b      	ldrb	r3, [r3, #0]
 80098b2:	b2db      	uxtb	r3, r3
 80098b4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	22ff      	movs	r2, #255	@ 0xff
 80098ba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098bc:	697b      	ldr	r3, [r7, #20]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80098cc:	b2da      	uxtb	r2, r3
 80098ce:	4b31      	ldr	r3, [pc, #196]	@ (8009994 <xPortStartScheduler+0x134>)
 80098d0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80098d2:	4b31      	ldr	r3, [pc, #196]	@ (8009998 <xPortStartScheduler+0x138>)
 80098d4:	2207      	movs	r2, #7
 80098d6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098d8:	e009      	b.n	80098ee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80098da:	4b2f      	ldr	r3, [pc, #188]	@ (8009998 <xPortStartScheduler+0x138>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	3b01      	subs	r3, #1
 80098e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009998 <xPortStartScheduler+0x138>)
 80098e2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	005b      	lsls	r3, r3, #1
 80098ea:	b2db      	uxtb	r3, r3
 80098ec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80098ee:	78fb      	ldrb	r3, [r7, #3]
 80098f0:	b2db      	uxtb	r3, r3
 80098f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80098f6:	2b80      	cmp	r3, #128	@ 0x80
 80098f8:	d0ef      	beq.n	80098da <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80098fa:	4b27      	ldr	r3, [pc, #156]	@ (8009998 <xPortStartScheduler+0x138>)
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f1c3 0307 	rsb	r3, r3, #7
 8009902:	2b04      	cmp	r3, #4
 8009904:	d00b      	beq.n	800991e <xPortStartScheduler+0xbe>
	__asm volatile
 8009906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800990a:	f383 8811 	msr	BASEPRI, r3
 800990e:	f3bf 8f6f 	isb	sy
 8009912:	f3bf 8f4f 	dsb	sy
 8009916:	60bb      	str	r3, [r7, #8]
}
 8009918:	bf00      	nop
 800991a:	bf00      	nop
 800991c:	e7fd      	b.n	800991a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800991e:	4b1e      	ldr	r3, [pc, #120]	@ (8009998 <xPortStartScheduler+0x138>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	021b      	lsls	r3, r3, #8
 8009924:	4a1c      	ldr	r2, [pc, #112]	@ (8009998 <xPortStartScheduler+0x138>)
 8009926:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009928:	4b1b      	ldr	r3, [pc, #108]	@ (8009998 <xPortStartScheduler+0x138>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009930:	4a19      	ldr	r2, [pc, #100]	@ (8009998 <xPortStartScheduler+0x138>)
 8009932:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	b2da      	uxtb	r2, r3
 8009938:	697b      	ldr	r3, [r7, #20]
 800993a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800993c:	4b17      	ldr	r3, [pc, #92]	@ (800999c <xPortStartScheduler+0x13c>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	4a16      	ldr	r2, [pc, #88]	@ (800999c <xPortStartScheduler+0x13c>)
 8009942:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009946:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009948:	4b14      	ldr	r3, [pc, #80]	@ (800999c <xPortStartScheduler+0x13c>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a13      	ldr	r2, [pc, #76]	@ (800999c <xPortStartScheduler+0x13c>)
 800994e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009952:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009954:	f000 f8da 	bl	8009b0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009958:	4b11      	ldr	r3, [pc, #68]	@ (80099a0 <xPortStartScheduler+0x140>)
 800995a:	2200      	movs	r2, #0
 800995c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800995e:	f000 f8f9 	bl	8009b54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009962:	4b10      	ldr	r3, [pc, #64]	@ (80099a4 <xPortStartScheduler+0x144>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	4a0f      	ldr	r2, [pc, #60]	@ (80099a4 <xPortStartScheduler+0x144>)
 8009968:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800996c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800996e:	f7ff ff63 	bl	8009838 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009972:	f7fe ff7b 	bl	800886c <vTaskSwitchContext>
	prvTaskExitError();
 8009976:	f7ff ff19 	bl	80097ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	e000ed00 	.word	0xe000ed00
 8009988:	410fc271 	.word	0x410fc271
 800998c:	410fc270 	.word	0x410fc270
 8009990:	e000e400 	.word	0xe000e400
 8009994:	20001038 	.word	0x20001038
 8009998:	2000103c 	.word	0x2000103c
 800999c:	e000ed20 	.word	0xe000ed20
 80099a0:	2000005c 	.word	0x2000005c
 80099a4:	e000ef34 	.word	0xe000ef34

080099a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099a8:	b480      	push	{r7}
 80099aa:	b083      	sub	sp, #12
 80099ac:	af00      	add	r7, sp, #0
	__asm volatile
 80099ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b2:	f383 8811 	msr	BASEPRI, r3
 80099b6:	f3bf 8f6f 	isb	sy
 80099ba:	f3bf 8f4f 	dsb	sy
 80099be:	607b      	str	r3, [r7, #4]
}
 80099c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099c2:	4b10      	ldr	r3, [pc, #64]	@ (8009a04 <vPortEnterCritical+0x5c>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	3301      	adds	r3, #1
 80099c8:	4a0e      	ldr	r2, [pc, #56]	@ (8009a04 <vPortEnterCritical+0x5c>)
 80099ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80099cc:	4b0d      	ldr	r3, [pc, #52]	@ (8009a04 <vPortEnterCritical+0x5c>)
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	2b01      	cmp	r3, #1
 80099d2:	d110      	bne.n	80099f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80099d4:	4b0c      	ldr	r3, [pc, #48]	@ (8009a08 <vPortEnterCritical+0x60>)
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	b2db      	uxtb	r3, r3
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d00b      	beq.n	80099f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80099de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099e2:	f383 8811 	msr	BASEPRI, r3
 80099e6:	f3bf 8f6f 	isb	sy
 80099ea:	f3bf 8f4f 	dsb	sy
 80099ee:	603b      	str	r3, [r7, #0]
}
 80099f0:	bf00      	nop
 80099f2:	bf00      	nop
 80099f4:	e7fd      	b.n	80099f2 <vPortEnterCritical+0x4a>
	}
}
 80099f6:	bf00      	nop
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	2000005c 	.word	0x2000005c
 8009a08:	e000ed04 	.word	0xe000ed04

08009a0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b083      	sub	sp, #12
 8009a10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a12:	4b12      	ldr	r3, [pc, #72]	@ (8009a5c <vPortExitCritical+0x50>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d10b      	bne.n	8009a32 <vPortExitCritical+0x26>
	__asm volatile
 8009a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a1e:	f383 8811 	msr	BASEPRI, r3
 8009a22:	f3bf 8f6f 	isb	sy
 8009a26:	f3bf 8f4f 	dsb	sy
 8009a2a:	607b      	str	r3, [r7, #4]
}
 8009a2c:	bf00      	nop
 8009a2e:	bf00      	nop
 8009a30:	e7fd      	b.n	8009a2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009a32:	4b0a      	ldr	r3, [pc, #40]	@ (8009a5c <vPortExitCritical+0x50>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	4a08      	ldr	r2, [pc, #32]	@ (8009a5c <vPortExitCritical+0x50>)
 8009a3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a3c:	4b07      	ldr	r3, [pc, #28]	@ (8009a5c <vPortExitCritical+0x50>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d105      	bne.n	8009a50 <vPortExitCritical+0x44>
 8009a44:	2300      	movs	r3, #0
 8009a46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	f383 8811 	msr	BASEPRI, r3
}
 8009a4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a50:	bf00      	nop
 8009a52:	370c      	adds	r7, #12
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	2000005c 	.word	0x2000005c

08009a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009a60:	f3ef 8009 	mrs	r0, PSP
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	4b15      	ldr	r3, [pc, #84]	@ (8009ac0 <pxCurrentTCBConst>)
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	f01e 0f10 	tst.w	lr, #16
 8009a70:	bf08      	it	eq
 8009a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7a:	6010      	str	r0, [r2, #0]
 8009a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009a80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009a84:	f380 8811 	msr	BASEPRI, r0
 8009a88:	f3bf 8f4f 	dsb	sy
 8009a8c:	f3bf 8f6f 	isb	sy
 8009a90:	f7fe feec 	bl	800886c <vTaskSwitchContext>
 8009a94:	f04f 0000 	mov.w	r0, #0
 8009a98:	f380 8811 	msr	BASEPRI, r0
 8009a9c:	bc09      	pop	{r0, r3}
 8009a9e:	6819      	ldr	r1, [r3, #0]
 8009aa0:	6808      	ldr	r0, [r1, #0]
 8009aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa6:	f01e 0f10 	tst.w	lr, #16
 8009aaa:	bf08      	it	eq
 8009aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009ab0:	f380 8809 	msr	PSP, r0
 8009ab4:	f3bf 8f6f 	isb	sy
 8009ab8:	4770      	bx	lr
 8009aba:	bf00      	nop
 8009abc:	f3af 8000 	nop.w

08009ac0 <pxCurrentTCBConst>:
 8009ac0:	20000a0c 	.word	0x20000a0c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop

08009ac8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
	__asm volatile
 8009ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	607b      	str	r3, [r7, #4]
}
 8009ae0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ae2:	f7fe fe09 	bl	80086f8 <xTaskIncrementTick>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d003      	beq.n	8009af4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009aec:	4b06      	ldr	r3, [pc, #24]	@ (8009b08 <xPortSysTickHandler+0x40>)
 8009aee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	2300      	movs	r3, #0
 8009af6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	f383 8811 	msr	BASEPRI, r3
}
 8009afe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b00:	bf00      	nop
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	e000ed04 	.word	0xe000ed04

08009b0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b0c:	b480      	push	{r7}
 8009b0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b10:	4b0b      	ldr	r3, [pc, #44]	@ (8009b40 <vPortSetupTimerInterrupt+0x34>)
 8009b12:	2200      	movs	r2, #0
 8009b14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b16:	4b0b      	ldr	r3, [pc, #44]	@ (8009b44 <vPortSetupTimerInterrupt+0x38>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b48 <vPortSetupTimerInterrupt+0x3c>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4a0a      	ldr	r2, [pc, #40]	@ (8009b4c <vPortSetupTimerInterrupt+0x40>)
 8009b22:	fba2 2303 	umull	r2, r3, r2, r3
 8009b26:	099b      	lsrs	r3, r3, #6
 8009b28:	4a09      	ldr	r2, [pc, #36]	@ (8009b50 <vPortSetupTimerInterrupt+0x44>)
 8009b2a:	3b01      	subs	r3, #1
 8009b2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b2e:	4b04      	ldr	r3, [pc, #16]	@ (8009b40 <vPortSetupTimerInterrupt+0x34>)
 8009b30:	2207      	movs	r2, #7
 8009b32:	601a      	str	r2, [r3, #0]
}
 8009b34:	bf00      	nop
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	e000e010 	.word	0xe000e010
 8009b44:	e000e018 	.word	0xe000e018
 8009b48:	20000050 	.word	0x20000050
 8009b4c:	10624dd3 	.word	0x10624dd3
 8009b50:	e000e014 	.word	0xe000e014

08009b54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009b64 <vPortEnableVFP+0x10>
 8009b58:	6801      	ldr	r1, [r0, #0]
 8009b5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009b5e:	6001      	str	r1, [r0, #0]
 8009b60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009b62:	bf00      	nop
 8009b64:	e000ed88 	.word	0xe000ed88

08009b68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009b68:	b480      	push	{r7}
 8009b6a:	b085      	sub	sp, #20
 8009b6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009b6e:	f3ef 8305 	mrs	r3, IPSR
 8009b72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2b0f      	cmp	r3, #15
 8009b78:	d915      	bls.n	8009ba6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009b7a:	4a18      	ldr	r2, [pc, #96]	@ (8009bdc <vPortValidateInterruptPriority+0x74>)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009b84:	4b16      	ldr	r3, [pc, #88]	@ (8009be0 <vPortValidateInterruptPriority+0x78>)
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	7afa      	ldrb	r2, [r7, #11]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	d20b      	bcs.n	8009ba6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b92:	f383 8811 	msr	BASEPRI, r3
 8009b96:	f3bf 8f6f 	isb	sy
 8009b9a:	f3bf 8f4f 	dsb	sy
 8009b9e:	607b      	str	r3, [r7, #4]
}
 8009ba0:	bf00      	nop
 8009ba2:	bf00      	nop
 8009ba4:	e7fd      	b.n	8009ba2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ba6:	4b0f      	ldr	r3, [pc, #60]	@ (8009be4 <vPortValidateInterruptPriority+0x7c>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009bae:	4b0e      	ldr	r3, [pc, #56]	@ (8009be8 <vPortValidateInterruptPriority+0x80>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	429a      	cmp	r2, r3
 8009bb4:	d90b      	bls.n	8009bce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bba:	f383 8811 	msr	BASEPRI, r3
 8009bbe:	f3bf 8f6f 	isb	sy
 8009bc2:	f3bf 8f4f 	dsb	sy
 8009bc6:	603b      	str	r3, [r7, #0]
}
 8009bc8:	bf00      	nop
 8009bca:	bf00      	nop
 8009bcc:	e7fd      	b.n	8009bca <vPortValidateInterruptPriority+0x62>
	}
 8009bce:	bf00      	nop
 8009bd0:	3714      	adds	r7, #20
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr
 8009bda:	bf00      	nop
 8009bdc:	e000e3f0 	.word	0xe000e3f0
 8009be0:	20001038 	.word	0x20001038
 8009be4:	e000ed0c 	.word	0xe000ed0c
 8009be8:	2000103c 	.word	0x2000103c

08009bec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b08a      	sub	sp, #40	@ 0x28
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009bf8:	f7fe fcc2 	bl	8008580 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009bfc:	4b5c      	ldr	r3, [pc, #368]	@ (8009d70 <pvPortMalloc+0x184>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d101      	bne.n	8009c08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c04:	f000 f924 	bl	8009e50 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c08:	4b5a      	ldr	r3, [pc, #360]	@ (8009d74 <pvPortMalloc+0x188>)
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4013      	ands	r3, r2
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	f040 8095 	bne.w	8009d40 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d01e      	beq.n	8009c5a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009c1c:	2208      	movs	r2, #8
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4413      	add	r3, r2
 8009c22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	f003 0307 	and.w	r3, r3, #7
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d015      	beq.n	8009c5a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f023 0307 	bic.w	r3, r3, #7
 8009c34:	3308      	adds	r3, #8
 8009c36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	f003 0307 	and.w	r3, r3, #7
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00b      	beq.n	8009c5a <pvPortMalloc+0x6e>
	__asm volatile
 8009c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c46:	f383 8811 	msr	BASEPRI, r3
 8009c4a:	f3bf 8f6f 	isb	sy
 8009c4e:	f3bf 8f4f 	dsb	sy
 8009c52:	617b      	str	r3, [r7, #20]
}
 8009c54:	bf00      	nop
 8009c56:	bf00      	nop
 8009c58:	e7fd      	b.n	8009c56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d06f      	beq.n	8009d40 <pvPortMalloc+0x154>
 8009c60:	4b45      	ldr	r3, [pc, #276]	@ (8009d78 <pvPortMalloc+0x18c>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d86a      	bhi.n	8009d40 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009c6a:	4b44      	ldr	r3, [pc, #272]	@ (8009d7c <pvPortMalloc+0x190>)
 8009c6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009c6e:	4b43      	ldr	r3, [pc, #268]	@ (8009d7c <pvPortMalloc+0x190>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c74:	e004      	b.n	8009c80 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	429a      	cmp	r2, r3
 8009c88:	d903      	bls.n	8009c92 <pvPortMalloc+0xa6>
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1f1      	bne.n	8009c76 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009c92:	4b37      	ldr	r3, [pc, #220]	@ (8009d70 <pvPortMalloc+0x184>)
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c98:	429a      	cmp	r2, r3
 8009c9a:	d051      	beq.n	8009d40 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c9c:	6a3b      	ldr	r3, [r7, #32]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	2208      	movs	r2, #8
 8009ca2:	4413      	add	r3, r2
 8009ca4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	6a3b      	ldr	r3, [r7, #32]
 8009cac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cb0:	685a      	ldr	r2, [r3, #4]
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	1ad2      	subs	r2, r2, r3
 8009cb6:	2308      	movs	r3, #8
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	d920      	bls.n	8009d00 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	4413      	add	r3, r2
 8009cc4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	f003 0307 	and.w	r3, r3, #7
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d00b      	beq.n	8009ce8 <pvPortMalloc+0xfc>
	__asm volatile
 8009cd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cd4:	f383 8811 	msr	BASEPRI, r3
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	f3bf 8f4f 	dsb	sy
 8009ce0:	613b      	str	r3, [r7, #16]
}
 8009ce2:	bf00      	nop
 8009ce4:	bf00      	nop
 8009ce6:	e7fd      	b.n	8009ce4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	1ad2      	subs	r2, r2, r3
 8009cf0:	69bb      	ldr	r3, [r7, #24]
 8009cf2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cf6:	687a      	ldr	r2, [r7, #4]
 8009cf8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009cfa:	69b8      	ldr	r0, [r7, #24]
 8009cfc:	f000 f90a 	bl	8009f14 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d00:	4b1d      	ldr	r3, [pc, #116]	@ (8009d78 <pvPortMalloc+0x18c>)
 8009d02:	681a      	ldr	r2, [r3, #0]
 8009d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d06:	685b      	ldr	r3, [r3, #4]
 8009d08:	1ad3      	subs	r3, r2, r3
 8009d0a:	4a1b      	ldr	r2, [pc, #108]	@ (8009d78 <pvPortMalloc+0x18c>)
 8009d0c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8009d78 <pvPortMalloc+0x18c>)
 8009d10:	681a      	ldr	r2, [r3, #0]
 8009d12:	4b1b      	ldr	r3, [pc, #108]	@ (8009d80 <pvPortMalloc+0x194>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	d203      	bcs.n	8009d22 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d1a:	4b17      	ldr	r3, [pc, #92]	@ (8009d78 <pvPortMalloc+0x18c>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a18      	ldr	r2, [pc, #96]	@ (8009d80 <pvPortMalloc+0x194>)
 8009d20:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d24:	685a      	ldr	r2, [r3, #4]
 8009d26:	4b13      	ldr	r3, [pc, #76]	@ (8009d74 <pvPortMalloc+0x188>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	431a      	orrs	r2, r3
 8009d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d32:	2200      	movs	r2, #0
 8009d34:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009d36:	4b13      	ldr	r3, [pc, #76]	@ (8009d84 <pvPortMalloc+0x198>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	3301      	adds	r3, #1
 8009d3c:	4a11      	ldr	r2, [pc, #68]	@ (8009d84 <pvPortMalloc+0x198>)
 8009d3e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d40:	f7fe fc2c 	bl	800859c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d44:	69fb      	ldr	r3, [r7, #28]
 8009d46:	f003 0307 	and.w	r3, r3, #7
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00b      	beq.n	8009d66 <pvPortMalloc+0x17a>
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	60fb      	str	r3, [r7, #12]
}
 8009d60:	bf00      	nop
 8009d62:	bf00      	nop
 8009d64:	e7fd      	b.n	8009d62 <pvPortMalloc+0x176>
	return pvReturn;
 8009d66:	69fb      	ldr	r3, [r7, #28]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3728      	adds	r7, #40	@ 0x28
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}
 8009d70:	20001c00 	.word	0x20001c00
 8009d74:	20001c14 	.word	0x20001c14
 8009d78:	20001c04 	.word	0x20001c04
 8009d7c:	20001bf8 	.word	0x20001bf8
 8009d80:	20001c08 	.word	0x20001c08
 8009d84:	20001c0c 	.word	0x20001c0c

08009d88 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b086      	sub	sp, #24
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d04f      	beq.n	8009e3a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009d9a:	2308      	movs	r3, #8
 8009d9c:	425b      	negs	r3, r3
 8009d9e:	697a      	ldr	r2, [r7, #20]
 8009da0:	4413      	add	r3, r2
 8009da2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009da4:	697b      	ldr	r3, [r7, #20]
 8009da6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009da8:	693b      	ldr	r3, [r7, #16]
 8009daa:	685a      	ldr	r2, [r3, #4]
 8009dac:	4b25      	ldr	r3, [pc, #148]	@ (8009e44 <vPortFree+0xbc>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4013      	ands	r3, r2
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10b      	bne.n	8009dce <vPortFree+0x46>
	__asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	60fb      	str	r3, [r7, #12]
}
 8009dc8:	bf00      	nop
 8009dca:	bf00      	nop
 8009dcc:	e7fd      	b.n	8009dca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d00b      	beq.n	8009dee <vPortFree+0x66>
	__asm volatile
 8009dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dda:	f383 8811 	msr	BASEPRI, r3
 8009dde:	f3bf 8f6f 	isb	sy
 8009de2:	f3bf 8f4f 	dsb	sy
 8009de6:	60bb      	str	r3, [r7, #8]
}
 8009de8:	bf00      	nop
 8009dea:	bf00      	nop
 8009dec:	e7fd      	b.n	8009dea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	685a      	ldr	r2, [r3, #4]
 8009df2:	4b14      	ldr	r3, [pc, #80]	@ (8009e44 <vPortFree+0xbc>)
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4013      	ands	r3, r2
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d01e      	beq.n	8009e3a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009dfc:	693b      	ldr	r3, [r7, #16]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d11a      	bne.n	8009e3a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e04:	693b      	ldr	r3, [r7, #16]
 8009e06:	685a      	ldr	r2, [r3, #4]
 8009e08:	4b0e      	ldr	r3, [pc, #56]	@ (8009e44 <vPortFree+0xbc>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	43db      	mvns	r3, r3
 8009e0e:	401a      	ands	r2, r3
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e14:	f7fe fbb4 	bl	8008580 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e18:	693b      	ldr	r3, [r7, #16]
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	4b0a      	ldr	r3, [pc, #40]	@ (8009e48 <vPortFree+0xc0>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4413      	add	r3, r2
 8009e22:	4a09      	ldr	r2, [pc, #36]	@ (8009e48 <vPortFree+0xc0>)
 8009e24:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e26:	6938      	ldr	r0, [r7, #16]
 8009e28:	f000 f874 	bl	8009f14 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009e2c:	4b07      	ldr	r3, [pc, #28]	@ (8009e4c <vPortFree+0xc4>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	3301      	adds	r3, #1
 8009e32:	4a06      	ldr	r2, [pc, #24]	@ (8009e4c <vPortFree+0xc4>)
 8009e34:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009e36:	f7fe fbb1 	bl	800859c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e3a:	bf00      	nop
 8009e3c:	3718      	adds	r7, #24
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	20001c14 	.word	0x20001c14
 8009e48:	20001c04 	.word	0x20001c04
 8009e4c:	20001c10 	.word	0x20001c10

08009e50 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e56:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009e5a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e5c:	4b27      	ldr	r3, [pc, #156]	@ (8009efc <prvHeapInit+0xac>)
 8009e5e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00c      	beq.n	8009e84 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	3307      	adds	r3, #7
 8009e6e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f023 0307 	bic.w	r3, r3, #7
 8009e76:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009e78:	68ba      	ldr	r2, [r7, #8]
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	4a1f      	ldr	r2, [pc, #124]	@ (8009efc <prvHeapInit+0xac>)
 8009e80:	4413      	add	r3, r2
 8009e82:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009e88:	4a1d      	ldr	r2, [pc, #116]	@ (8009f00 <prvHeapInit+0xb0>)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8009f00 <prvHeapInit+0xb0>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	68ba      	ldr	r2, [r7, #8]
 8009e98:	4413      	add	r3, r2
 8009e9a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009e9c:	2208      	movs	r2, #8
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	1a9b      	subs	r3, r3, r2
 8009ea2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f023 0307 	bic.w	r3, r3, #7
 8009eaa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	4a15      	ldr	r2, [pc, #84]	@ (8009f04 <prvHeapInit+0xb4>)
 8009eb0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009eb2:	4b14      	ldr	r3, [pc, #80]	@ (8009f04 <prvHeapInit+0xb4>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009eba:	4b12      	ldr	r3, [pc, #72]	@ (8009f04 <prvHeapInit+0xb4>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	1ad2      	subs	r2, r2, r3
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8009f04 <prvHeapInit+0xb4>)
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ed8:	683b      	ldr	r3, [r7, #0]
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	4a0a      	ldr	r2, [pc, #40]	@ (8009f08 <prvHeapInit+0xb8>)
 8009ede:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009ee0:	683b      	ldr	r3, [r7, #0]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	4a09      	ldr	r2, [pc, #36]	@ (8009f0c <prvHeapInit+0xbc>)
 8009ee6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009ee8:	4b09      	ldr	r3, [pc, #36]	@ (8009f10 <prvHeapInit+0xc0>)
 8009eea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009eee:	601a      	str	r2, [r3, #0]
}
 8009ef0:	bf00      	nop
 8009ef2:	3714      	adds	r7, #20
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efa:	4770      	bx	lr
 8009efc:	20001040 	.word	0x20001040
 8009f00:	20001bf8 	.word	0x20001bf8
 8009f04:	20001c00 	.word	0x20001c00
 8009f08:	20001c08 	.word	0x20001c08
 8009f0c:	20001c04 	.word	0x20001c04
 8009f10:	20001c14 	.word	0x20001c14

08009f14 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f1c:	4b28      	ldr	r3, [pc, #160]	@ (8009fc0 <prvInsertBlockIntoFreeList+0xac>)
 8009f1e:	60fb      	str	r3, [r7, #12]
 8009f20:	e002      	b.n	8009f28 <prvInsertBlockIntoFreeList+0x14>
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	687a      	ldr	r2, [r7, #4]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d8f7      	bhi.n	8009f22 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	68ba      	ldr	r2, [r7, #8]
 8009f3c:	4413      	add	r3, r2
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d108      	bne.n	8009f56 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	441a      	add	r2, r3
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	441a      	add	r2, r3
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d118      	bne.n	8009f9c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681a      	ldr	r2, [r3, #0]
 8009f6e:	4b15      	ldr	r3, [pc, #84]	@ (8009fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d00d      	beq.n	8009f92 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	441a      	add	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681a      	ldr	r2, [r3, #0]
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	e008      	b.n	8009fa4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009f92:	4b0c      	ldr	r3, [pc, #48]	@ (8009fc4 <prvInsertBlockIntoFreeList+0xb0>)
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	601a      	str	r2, [r3, #0]
 8009f9a:	e003      	b.n	8009fa4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fa4:	68fa      	ldr	r2, [r7, #12]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d002      	beq.n	8009fb2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fb2:	bf00      	nop
 8009fb4:	3714      	adds	r7, #20
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr
 8009fbe:	bf00      	nop
 8009fc0:	20001bf8 	.word	0x20001bf8
 8009fc4:	20001c00 	.word	0x20001c00

08009fc8 <memset>:
 8009fc8:	4402      	add	r2, r0
 8009fca:	4603      	mov	r3, r0
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d100      	bne.n	8009fd2 <memset+0xa>
 8009fd0:	4770      	bx	lr
 8009fd2:	f803 1b01 	strb.w	r1, [r3], #1
 8009fd6:	e7f9      	b.n	8009fcc <memset+0x4>

08009fd8 <__libc_init_array>:
 8009fd8:	b570      	push	{r4, r5, r6, lr}
 8009fda:	4d0d      	ldr	r5, [pc, #52]	@ (800a010 <__libc_init_array+0x38>)
 8009fdc:	4c0d      	ldr	r4, [pc, #52]	@ (800a014 <__libc_init_array+0x3c>)
 8009fde:	1b64      	subs	r4, r4, r5
 8009fe0:	10a4      	asrs	r4, r4, #2
 8009fe2:	2600      	movs	r6, #0
 8009fe4:	42a6      	cmp	r6, r4
 8009fe6:	d109      	bne.n	8009ffc <__libc_init_array+0x24>
 8009fe8:	4d0b      	ldr	r5, [pc, #44]	@ (800a018 <__libc_init_array+0x40>)
 8009fea:	4c0c      	ldr	r4, [pc, #48]	@ (800a01c <__libc_init_array+0x44>)
 8009fec:	f000 f826 	bl	800a03c <_init>
 8009ff0:	1b64      	subs	r4, r4, r5
 8009ff2:	10a4      	asrs	r4, r4, #2
 8009ff4:	2600      	movs	r6, #0
 8009ff6:	42a6      	cmp	r6, r4
 8009ff8:	d105      	bne.n	800a006 <__libc_init_array+0x2e>
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 800a000:	4798      	blx	r3
 800a002:	3601      	adds	r6, #1
 800a004:	e7ee      	b.n	8009fe4 <__libc_init_array+0xc>
 800a006:	f855 3b04 	ldr.w	r3, [r5], #4
 800a00a:	4798      	blx	r3
 800a00c:	3601      	adds	r6, #1
 800a00e:	e7f2      	b.n	8009ff6 <__libc_init_array+0x1e>
 800a010:	0800a22c 	.word	0x0800a22c
 800a014:	0800a22c 	.word	0x0800a22c
 800a018:	0800a22c 	.word	0x0800a22c
 800a01c:	0800a230 	.word	0x0800a230

0800a020 <memcpy>:
 800a020:	440a      	add	r2, r1
 800a022:	4291      	cmp	r1, r2
 800a024:	f100 33ff 	add.w	r3, r0, #4294967295
 800a028:	d100      	bne.n	800a02c <memcpy+0xc>
 800a02a:	4770      	bx	lr
 800a02c:	b510      	push	{r4, lr}
 800a02e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a032:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a036:	4291      	cmp	r1, r2
 800a038:	d1f9      	bne.n	800a02e <memcpy+0xe>
 800a03a:	bd10      	pop	{r4, pc}

0800a03c <_init>:
 800a03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a03e:	bf00      	nop
 800a040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a042:	bc08      	pop	{r3}
 800a044:	469e      	mov	lr, r3
 800a046:	4770      	bx	lr

0800a048 <_fini>:
 800a048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a04a:	bf00      	nop
 800a04c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a04e:	bc08      	pop	{r3}
 800a050:	469e      	mov	lr, r3
 800a052:	4770      	bx	lr

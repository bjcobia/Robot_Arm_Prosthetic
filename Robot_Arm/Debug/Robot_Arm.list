
Robot_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000479c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004924  08004924  00005924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800496c  0800496c  00006048  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800496c  0800496c  0000596c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004974  08004974  00006048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004974  08004974  00005974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004978  08004978  00005978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000048  20000000  0800497c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000048  080049c4  00006048  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  080049c4  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f069  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d52  00000000  00000000  000150e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e68  00000000  00000000  00016e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b54  00000000  00000000  00017ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d89  00000000  00000000  000187f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001034b  00000000  00000000  0003e57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eeae3  00000000  00000000  0004e8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013d3ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d08  00000000  00000000  0013d3f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001410f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800490c 	.word	0x0800490c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	0800490c 	.word	0x0800490c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 fea2 	bl	8001240 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f829 	bl	8000552 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fad6 	bl	8000ab0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000504:	f000 faa4 	bl	8000a50 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000508:	f000 f874 	bl	80005f4 <MX_TIM1_Init>
  MX_TIM2_Init();
 800050c:	f000 f902 	bl	8000714 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000510:	f000 f95a 	bl	80007c8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000514:	f000 f9b2 	bl	800087c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000518:	f000 fa0a 	bl	8000930 <MX_TIM8_Init>

  /* USER CODE BEGIN 2 */

  SignLetter('A', 2000);
 800051c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000520:	2041      	movs	r0, #65	@ 0x41
 8000522:	f000 fc0f 	bl	8000d44 <SignLetter>

  HAL_Delay(2000);
 8000526:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800052a:	f000 ff05 	bl	8001338 <HAL_Delay>

  Servo_StopAll();
 800052e:	f000 fbab 	bl	8000c88 <Servo_StopAll>

  HAL_Delay(3000);
 8000532:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000536:	f000 feff 	bl	8001338 <HAL_Delay>

  SignLetter('B', 1000);
 800053a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800053e:	2042      	movs	r0, #66	@ 0x42
 8000540:	f000 fc00 	bl	8000d44 <SignLetter>

  SignLetter('A', 2000);
 8000544:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000548:	2041      	movs	r0, #65	@ 0x41
 800054a:	f000 fbfb 	bl	8000d44 <SignLetter>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054e:	bf00      	nop
 8000550:	e7fd      	b.n	800054e <main+0x5a>

08000552 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000552:	b580      	push	{r7, lr}
 8000554:	b096      	sub	sp, #88	@ 0x58
 8000556:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000558:	f107 0314 	add.w	r3, r7, #20
 800055c:	2244      	movs	r2, #68	@ 0x44
 800055e:	2100      	movs	r1, #0
 8000560:	4618      	mov	r0, r3
 8000562:	f004 f9a6 	bl	80048b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000574:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000578:	f001 f9b8 	bl	80018ec <HAL_PWREx_ControlVoltageScaling>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000582:	f000 fc31 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000586:	2302      	movs	r3, #2
 8000588:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800058a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000590:	2310      	movs	r3, #16
 8000592:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000594:	2302      	movs	r3, #2
 8000596:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000598:	2302      	movs	r3, #2
 800059a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800059c:	2301      	movs	r3, #1
 800059e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005a0:	230a      	movs	r3, #10
 80005a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005a4:	2307      	movs	r3, #7
 80005a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0314 	add.w	r3, r7, #20
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 f9ef 	bl	8001998 <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005c0:	f000 fc12 	bl	8000de8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2303      	movs	r3, #3
 80005ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d8:	463b      	mov	r3, r7
 80005da:	2104      	movs	r1, #4
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 fdb7 	bl	8002150 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005e8:	f000 fbfe 	bl	8000de8 <Error_Handler>
  }
}
 80005ec:	bf00      	nop
 80005ee:	3758      	adds	r7, #88	@ 0x58
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}

080005f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b096      	sub	sp, #88	@ 0x58
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005fa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000606:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
 8000612:	60da      	str	r2, [r3, #12]
 8000614:	611a      	str	r2, [r3, #16]
 8000616:	615a      	str	r2, [r3, #20]
 8000618:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	222c      	movs	r2, #44	@ 0x2c
 800061e:	2100      	movs	r1, #0
 8000620:	4618      	mov	r0, r3
 8000622:	f004 f946 	bl	80048b2 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000626:	4b39      	ldr	r3, [pc, #228]	@ (800070c <MX_TIM1_Init+0x118>)
 8000628:	4a39      	ldr	r2, [pc, #228]	@ (8000710 <MX_TIM1_Init+0x11c>)
 800062a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800062c:	4b37      	ldr	r3, [pc, #220]	@ (800070c <MX_TIM1_Init+0x118>)
 800062e:	224f      	movs	r2, #79	@ 0x4f
 8000630:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000632:	4b36      	ldr	r3, [pc, #216]	@ (800070c <MX_TIM1_Init+0x118>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000638:	4b34      	ldr	r3, [pc, #208]	@ (800070c <MX_TIM1_Init+0x118>)
 800063a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800063e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000640:	4b32      	ldr	r3, [pc, #200]	@ (800070c <MX_TIM1_Init+0x118>)
 8000642:	2200      	movs	r2, #0
 8000644:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000646:	4b31      	ldr	r3, [pc, #196]	@ (800070c <MX_TIM1_Init+0x118>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800064c:	4b2f      	ldr	r3, [pc, #188]	@ (800070c <MX_TIM1_Init+0x118>)
 800064e:	2200      	movs	r2, #0
 8000650:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000652:	482e      	ldr	r0, [pc, #184]	@ (800070c <MX_TIM1_Init+0x118>)
 8000654:	f002 fc5c 	bl	8002f10 <HAL_TIM_PWM_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800065e:	f000 fbc3 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000662:	2300      	movs	r3, #0
 8000664:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000666:	2300      	movs	r3, #0
 8000668:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800066e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000672:	4619      	mov	r1, r3
 8000674:	4825      	ldr	r0, [pc, #148]	@ (800070c <MX_TIM1_Init+0x118>)
 8000676:	f003 faf5 	bl	8003c64 <HAL_TIMEx_MasterConfigSynchronization>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000680:	f000 fbb2 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000684:	2360      	movs	r3, #96	@ 0x60
 8000686:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000690:	2300      	movs	r3, #0
 8000692:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000698:	2300      	movs	r3, #0
 800069a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006a4:	2200      	movs	r2, #0
 80006a6:	4619      	mov	r1, r3
 80006a8:	4818      	ldr	r0, [pc, #96]	@ (800070c <MX_TIM1_Init+0x118>)
 80006aa:	f002 fe25 	bl	80032f8 <HAL_TIM_PWM_ConfigChannel>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006b4:	f000 fb98 	bl	8000de8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006bc:	2300      	movs	r3, #0
 80006be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006c0:	2300      	movs	r3, #0
 80006c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006c4:	2300      	movs	r3, #0
 80006c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80006d6:	2300      	movs	r3, #0
 80006d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80006da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	4807      	ldr	r0, [pc, #28]	@ (800070c <MX_TIM1_Init+0x118>)
 80006ee:	f003 fb41 	bl	8003d74 <HAL_TIMEx_ConfigBreakDeadTime>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80006f8:	f000 fb76 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80006fc:	4803      	ldr	r0, [pc, #12]	@ (800070c <MX_TIM1_Init+0x118>)
 80006fe:	f000 fc0b 	bl	8000f18 <HAL_TIM_MspPostInit>

}
 8000702:	bf00      	nop
 8000704:	3758      	adds	r7, #88	@ 0x58
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000064 	.word	0x20000064
 8000710:	40012c00 	.word	0x40012c00

08000714 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	@ 0x28
 8000718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800071a:	f107 031c 	add.w	r3, r7, #28
 800071e:	2200      	movs	r2, #0
 8000720:	601a      	str	r2, [r3, #0]
 8000722:	605a      	str	r2, [r3, #4]
 8000724:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000726:	463b      	mov	r3, r7
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
 8000734:	615a      	str	r2, [r3, #20]
 8000736:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <MX_TIM2_Init+0xb0>)
 800073a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800073e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000740:	4b20      	ldr	r3, [pc, #128]	@ (80007c4 <MX_TIM2_Init+0xb0>)
 8000742:	224f      	movs	r2, #79	@ 0x4f
 8000744:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b1f      	ldr	r3, [pc, #124]	@ (80007c4 <MX_TIM2_Init+0xb0>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800074c:	4b1d      	ldr	r3, [pc, #116]	@ (80007c4 <MX_TIM2_Init+0xb0>)
 800074e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000752:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <MX_TIM2_Init+0xb0>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800075a:	4b1a      	ldr	r3, [pc, #104]	@ (80007c4 <MX_TIM2_Init+0xb0>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000760:	4818      	ldr	r0, [pc, #96]	@ (80007c4 <MX_TIM2_Init+0xb0>)
 8000762:	f002 fbd5 	bl	8002f10 <HAL_TIM_PWM_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 800076c:	f000 fb3c 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	4811      	ldr	r0, [pc, #68]	@ (80007c4 <MX_TIM2_Init+0xb0>)
 8000780:	f003 fa70 	bl	8003c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800078a:	f000 fb2d 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800078e:	2360      	movs	r3, #96	@ 0x60
 8000790:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000796:	2300      	movs	r3, #0
 8000798:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800079a:	2300      	movs	r3, #0
 800079c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800079e:	463b      	mov	r3, r7
 80007a0:	2200      	movs	r2, #0
 80007a2:	4619      	mov	r1, r3
 80007a4:	4807      	ldr	r0, [pc, #28]	@ (80007c4 <MX_TIM2_Init+0xb0>)
 80007a6:	f002 fda7 	bl	80032f8 <HAL_TIM_PWM_ConfigChannel>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80007b0:	f000 fb1a 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007b4:	4803      	ldr	r0, [pc, #12]	@ (80007c4 <MX_TIM2_Init+0xb0>)
 80007b6:	f000 fbaf 	bl	8000f18 <HAL_TIM_MspPostInit>

}
 80007ba:	bf00      	nop
 80007bc:	3728      	adds	r7, #40	@ 0x28
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200000b0 	.word	0x200000b0

080007c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007ec:	4b21      	ldr	r3, [pc, #132]	@ (8000874 <MX_TIM3_Init+0xac>)
 80007ee:	4a22      	ldr	r2, [pc, #136]	@ (8000878 <MX_TIM3_Init+0xb0>)
 80007f0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80007f2:	4b20      	ldr	r3, [pc, #128]	@ (8000874 <MX_TIM3_Init+0xac>)
 80007f4:	224f      	movs	r2, #79	@ 0x4f
 80007f6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007f8:	4b1e      	ldr	r3, [pc, #120]	@ (8000874 <MX_TIM3_Init+0xac>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80007fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000874 <MX_TIM3_Init+0xac>)
 8000800:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000804:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b1b      	ldr	r3, [pc, #108]	@ (8000874 <MX_TIM3_Init+0xac>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b19      	ldr	r3, [pc, #100]	@ (8000874 <MX_TIM3_Init+0xac>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000812:	4818      	ldr	r0, [pc, #96]	@ (8000874 <MX_TIM3_Init+0xac>)
 8000814:	f002 fb7c 	bl	8002f10 <HAL_TIM_PWM_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800081e:	f000 fae3 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000822:	2300      	movs	r3, #0
 8000824:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4810      	ldr	r0, [pc, #64]	@ (8000874 <MX_TIM3_Init+0xac>)
 8000832:	f003 fa17 	bl	8003c64 <HAL_TIMEx_MasterConfigSynchronization>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800083c:	f000 fad4 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000840:	2360      	movs	r3, #96	@ 0x60
 8000842:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800084c:	2300      	movs	r3, #0
 800084e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000850:	463b      	mov	r3, r7
 8000852:	2200      	movs	r2, #0
 8000854:	4619      	mov	r1, r3
 8000856:	4807      	ldr	r0, [pc, #28]	@ (8000874 <MX_TIM3_Init+0xac>)
 8000858:	f002 fd4e 	bl	80032f8 <HAL_TIM_PWM_ConfigChannel>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000862:	f000 fac1 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000866:	4803      	ldr	r0, [pc, #12]	@ (8000874 <MX_TIM3_Init+0xac>)
 8000868:	f000 fb56 	bl	8000f18 <HAL_TIM_MspPostInit>

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	@ 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	200000fc 	.word	0x200000fc
 8000878:	40000400 	.word	0x40000400

0800087c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	@ 0x28
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800088e:	463b      	mov	r3, r7
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
 800089c:	615a      	str	r2, [r3, #20]
 800089e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008a0:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_TIM4_Init+0xac>)
 80008a2:	4a22      	ldr	r2, [pc, #136]	@ (800092c <MX_TIM4_Init+0xb0>)
 80008a4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80008a6:	4b20      	ldr	r3, [pc, #128]	@ (8000928 <MX_TIM4_Init+0xac>)
 80008a8:	224f      	movs	r2, #79	@ 0x4f
 80008aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <MX_TIM4_Init+0xac>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80008b2:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <MX_TIM4_Init+0xac>)
 80008b4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000928 <MX_TIM4_Init+0xac>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008c0:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <MX_TIM4_Init+0xac>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008c6:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_TIM4_Init+0xac>)
 80008c8:	f002 fb22 	bl	8002f10 <HAL_TIM_PWM_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80008d2:	f000 fa89 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4810      	ldr	r0, [pc, #64]	@ (8000928 <MX_TIM4_Init+0xac>)
 80008e6:	f003 f9bd 	bl	8003c64 <HAL_TIMEx_MasterConfigSynchronization>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80008f0:	f000 fa7a 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f4:	2360      	movs	r3, #96	@ 0x60
 80008f6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	2200      	movs	r2, #0
 8000908:	4619      	mov	r1, r3
 800090a:	4807      	ldr	r0, [pc, #28]	@ (8000928 <MX_TIM4_Init+0xac>)
 800090c:	f002 fcf4 	bl	80032f8 <HAL_TIM_PWM_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000916:	f000 fa67 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800091a:	4803      	ldr	r0, [pc, #12]	@ (8000928 <MX_TIM4_Init+0xac>)
 800091c:	f000 fafc 	bl	8000f18 <HAL_TIM_MspPostInit>

}
 8000920:	bf00      	nop
 8000922:	3728      	adds	r7, #40	@ 0x28
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000148 	.word	0x20000148
 800092c:	40000800 	.word	0x40000800

08000930 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b096      	sub	sp, #88	@ 0x58
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000936:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800093a:	2200      	movs	r2, #0
 800093c:	601a      	str	r2, [r3, #0]
 800093e:	605a      	str	r2, [r3, #4]
 8000940:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000942:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]
 8000952:	615a      	str	r2, [r3, #20]
 8000954:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	222c      	movs	r2, #44	@ 0x2c
 800095a:	2100      	movs	r1, #0
 800095c:	4618      	mov	r0, r3
 800095e:	f003 ffa8 	bl	80048b2 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000962:	4b39      	ldr	r3, [pc, #228]	@ (8000a48 <MX_TIM8_Init+0x118>)
 8000964:	4a39      	ldr	r2, [pc, #228]	@ (8000a4c <MX_TIM8_Init+0x11c>)
 8000966:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8000968:	4b37      	ldr	r3, [pc, #220]	@ (8000a48 <MX_TIM8_Init+0x118>)
 800096a:	224f      	movs	r2, #79	@ 0x4f
 800096c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800096e:	4b36      	ldr	r3, [pc, #216]	@ (8000a48 <MX_TIM8_Init+0x118>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8000974:	4b34      	ldr	r3, [pc, #208]	@ (8000a48 <MX_TIM8_Init+0x118>)
 8000976:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800097a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800097c:	4b32      	ldr	r3, [pc, #200]	@ (8000a48 <MX_TIM8_Init+0x118>)
 800097e:	2200      	movs	r2, #0
 8000980:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000982:	4b31      	ldr	r3, [pc, #196]	@ (8000a48 <MX_TIM8_Init+0x118>)
 8000984:	2200      	movs	r2, #0
 8000986:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b2f      	ldr	r3, [pc, #188]	@ (8000a48 <MX_TIM8_Init+0x118>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800098e:	482e      	ldr	r0, [pc, #184]	@ (8000a48 <MX_TIM8_Init+0x118>)
 8000990:	f002 fabe 	bl	8002f10 <HAL_TIM_PWM_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 800099a:	f000 fa25 	bl	8000de8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009a2:	2300      	movs	r3, #0
 80009a4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009aa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009ae:	4619      	mov	r1, r3
 80009b0:	4825      	ldr	r0, [pc, #148]	@ (8000a48 <MX_TIM8_Init+0x118>)
 80009b2:	f003 f957 	bl	8003c64 <HAL_TIMEx_MasterConfigSynchronization>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80009bc:	f000 fa14 	bl	8000de8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009c0:	2360      	movs	r3, #96	@ 0x60
 80009c2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c8:	2300      	movs	r3, #0
 80009ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009cc:	2300      	movs	r3, #0
 80009ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009d4:	2300      	movs	r3, #0
 80009d6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009dc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009e0:	2200      	movs	r2, #0
 80009e2:	4619      	mov	r1, r3
 80009e4:	4818      	ldr	r0, [pc, #96]	@ (8000a48 <MX_TIM8_Init+0x118>)
 80009e6:	f002 fc87 	bl	80032f8 <HAL_TIM_PWM_ConfigChannel>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80009f0:	f000 f9fa 	bl	8000de8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80009f4:	2300      	movs	r3, #0
 80009f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a24:	1d3b      	adds	r3, r7, #4
 8000a26:	4619      	mov	r1, r3
 8000a28:	4807      	ldr	r0, [pc, #28]	@ (8000a48 <MX_TIM8_Init+0x118>)
 8000a2a:	f003 f9a3 	bl	8003d74 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000a34:	f000 f9d8 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000a38:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <MX_TIM8_Init+0x118>)
 8000a3a:	f000 fa6d 	bl	8000f18 <HAL_TIM_MspPostInit>

}
 8000a3e:	bf00      	nop
 8000a40:	3758      	adds	r7, #88	@ 0x58
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000194 	.word	0x20000194
 8000a4c:	40013400 	.word	0x40013400

08000a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a54:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a56:	4a15      	ldr	r2, [pc, #84]	@ (8000aac <MX_USART2_UART_Init+0x5c>)
 8000a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a68:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a76:	220c      	movs	r2, #12
 8000a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a80:	4b09      	ldr	r3, [pc, #36]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a92:	4805      	ldr	r0, [pc, #20]	@ (8000aa8 <MX_USART2_UART_Init+0x58>)
 8000a94:	f003 f9ec 	bl	8003e70 <HAL_UART_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a9e:	f000 f9a3 	bl	8000de8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200001e0 	.word	0x200001e0
 8000aac:	40004400 	.word	0x40004400

08000ab0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08a      	sub	sp, #40	@ 0x28
 8000ab4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab6:	f107 0314 	add.w	r3, r7, #20
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]
 8000ac0:	609a      	str	r2, [r3, #8]
 8000ac2:	60da      	str	r2, [r3, #12]
 8000ac4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac6:	4b2b      	ldr	r3, [pc, #172]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	4a2a      	ldr	r2, [pc, #168]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ad2:	4b28      	ldr	r3, [pc, #160]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ade:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	4a24      	ldr	r2, [pc, #144]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000ae4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ae8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000aea:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	4a1e      	ldr	r2, [pc, #120]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b02:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b0e:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	4a18      	ldr	r2, [pc, #96]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000b14:	f043 0302 	orr.w	r3, r3, #2
 8000b18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b1a:	4b16      	ldr	r3, [pc, #88]	@ (8000b74 <MX_GPIO_Init+0xc4>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1e:	f003 0302 	and.w	r3, r3, #2
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2120      	movs	r1, #32
 8000b2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b2e:	f000 feb7 	bl	80018a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b38:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b42:	f107 0314 	add.w	r3, r7, #20
 8000b46:	4619      	mov	r1, r3
 8000b48:	480b      	ldr	r0, [pc, #44]	@ (8000b78 <MX_GPIO_Init+0xc8>)
 8000b4a:	f000 fcff 	bl	800154c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b4e:	2320      	movs	r3, #32
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b68:	f000 fcf0 	bl	800154c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3728      	adds	r7, #40	@ 0x28
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021000 	.word	0x40021000
 8000b78:	48000800 	.word	0x48000800

08000b7c <Servo_SetMotion>:
 * @param finger: Which finger (THUMB, INDEX, MIDDLE, RING, PINKY)
 * @param direction: STOP, CLOCKWISE, or COUNTERCLOCKWISE
 * @param speed: Speed percentage (0-100)
 * @retval None
 */
void Servo_SetMotion(Finger finger, Direction direction, int speed) {
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	603a      	str	r2, [r7, #0]
 8000b86:	71fb      	strb	r3, [r7, #7]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	71bb      	strb	r3, [r7, #6]
    uint32_t pulse;

    // Clamp speed to 0-100%
    if (speed < 0) speed = 0;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	da01      	bge.n	8000b96 <Servo_SetMotion+0x1a>
 8000b92:	2300      	movs	r3, #0
 8000b94:	603b      	str	r3, [r7, #0]
    if (speed > 100) speed = 100;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b64      	cmp	r3, #100	@ 0x64
 8000b9a:	dd01      	ble.n	8000ba0 <Servo_SetMotion+0x24>
 8000b9c:	2364      	movs	r3, #100	@ 0x64
 8000b9e:	603b      	str	r3, [r7, #0]

    // Calculate pulse width based on direction and speed
    if (direction == STOP) {
 8000ba0:	79bb      	ldrb	r3, [r7, #6]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d103      	bne.n	8000bae <Servo_SetMotion+0x32>
        pulse = SERVO_STOP;
 8000ba6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	e013      	b.n	8000bd6 <Servo_SetMotion+0x5a>
    } else if (direction == CLOCKWISE) {
 8000bae:	79bb      	ldrb	r3, [r7, #6]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d109      	bne.n	8000bc8 <Servo_SetMotion+0x4c>
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CW
        pulse = SERVO_STOP - ((SERVO_STOP - SERVO_MAX_CW) * speed / 100);
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	4613      	mov	r3, r2
 8000bb8:	079b      	lsls	r3, r3, #30
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	009b      	lsls	r3, r3, #2
 8000bbe:	1a9b      	subs	r3, r3, r2
 8000bc0:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	e006      	b.n	8000bd6 <Servo_SetMotion+0x5a>
    } else { // COUNTERCLOCKWISE
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CCW
        pulse = SERVO_STOP + ((SERVO_MAX_CCW - SERVO_STOP) * speed / 100);
 8000bc8:	683a      	ldr	r2, [r7, #0]
 8000bca:	4613      	mov	r3, r2
 8000bcc:	009b      	lsls	r3, r3, #2
 8000bce:	4413      	add	r3, r2
 8000bd0:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000bd4:	60fb      	str	r3, [r7, #12]
    }

    // Update servo state
    servoStates[finger].speed = speed;
 8000bd6:	79fa      	ldrb	r2, [r7, #7]
 8000bd8:	4925      	ldr	r1, [pc, #148]	@ (8000c70 <Servo_SetMotion+0xf4>)
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	440b      	add	r3, r1
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	601a      	str	r2, [r3, #0]
    servoStates[finger].dir = direction;
 8000be8:	79fa      	ldrb	r2, [r7, #7]
 8000bea:	4921      	ldr	r1, [pc, #132]	@ (8000c70 <Servo_SetMotion+0xf4>)
 8000bec:	4613      	mov	r3, r2
 8000bee:	005b      	lsls	r3, r3, #1
 8000bf0:	4413      	add	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	440b      	add	r3, r1
 8000bf6:	3304      	adds	r3, #4
 8000bf8:	79ba      	ldrb	r2, [r7, #6]
 8000bfa:	701a      	strb	r2, [r3, #0]
    servoStates[finger].pulse = pulse;
 8000bfc:	79fa      	ldrb	r2, [r7, #7]
 8000bfe:	491c      	ldr	r1, [pc, #112]	@ (8000c70 <Servo_SetMotion+0xf4>)
 8000c00:	4613      	mov	r3, r2
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	440b      	add	r3, r1
 8000c0a:	3308      	adds	r3, #8
 8000c0c:	68fa      	ldr	r2, [r7, #12]
 8000c0e:	601a      	str	r2, [r3, #0]

    // Apply pulse width to the appropriate timer
    switch (finger) {
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d825      	bhi.n	8000c62 <Servo_SetMotion+0xe6>
 8000c16:	a201      	add	r2, pc, #4	@ (adr r2, 8000c1c <Servo_SetMotion+0xa0>)
 8000c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1c:	08000c31 	.word	0x08000c31
 8000c20:	08000c3b 	.word	0x08000c3b
 8000c24:	08000c45 	.word	0x08000c45
 8000c28:	08000c4f 	.word	0x08000c4f
 8000c2c:	08000c59 	.word	0x08000c59
        case THUMB:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8000c30:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <Servo_SetMotion+0xf8>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000c38:	e013      	b.n	8000c62 <Servo_SetMotion+0xe6>
        case INDEX:
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <Servo_SetMotion+0xfc>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000c42:	e00e      	b.n	8000c62 <Servo_SetMotion+0xe6>
        case MIDDLE:
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8000c44:	4b0d      	ldr	r3, [pc, #52]	@ (8000c7c <Servo_SetMotion+0x100>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68fa      	ldr	r2, [r7, #12]
 8000c4a:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000c4c:	e009      	b.n	8000c62 <Servo_SetMotion+0xe6>
        case RING:
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <Servo_SetMotion+0x104>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000c56:	e004      	b.n	8000c62 <Servo_SetMotion+0xe6>
        case PINKY:
            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pulse);
 8000c58:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <Servo_SetMotion+0x108>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000c60:	bf00      	nop
    }
	}
 8000c62:	bf00      	nop
 8000c64:	3714      	adds	r7, #20
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000064 	.word	0x20000064
 8000c78:	200000b0 	.word	0x200000b0
 8000c7c:	200000fc 	.word	0x200000fc
 8000c80:	20000148 	.word	0x20000148
 8000c84:	20000194 	.word	0x20000194

08000c88 <Servo_StopAll>:
	/**
	 * @brief Stops all servos
	 * @param None
	 * @retval None
	 */
	void Servo_StopAll(void) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
		Servo_SetMotion(THUMB, STOP, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2100      	movs	r1, #0
 8000c90:	2000      	movs	r0, #0
 8000c92:	f7ff ff73 	bl	8000b7c <Servo_SetMotion>
		Servo_SetMotion(INDEX, STOP, 0);
 8000c96:	2200      	movs	r2, #0
 8000c98:	2100      	movs	r1, #0
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f7ff ff6e 	bl	8000b7c <Servo_SetMotion>
		Servo_SetMotion(MIDDLE, STOP, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2002      	movs	r0, #2
 8000ca6:	f7ff ff69 	bl	8000b7c <Servo_SetMotion>
		Servo_SetMotion(RING, STOP, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2100      	movs	r1, #0
 8000cae:	2003      	movs	r0, #3
 8000cb0:	f7ff ff64 	bl	8000b7c <Servo_SetMotion>
		Servo_SetMotion(PINKY, STOP, 0);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	2004      	movs	r0, #4
 8000cba:	f7ff ff5f 	bl	8000b7c <Servo_SetMotion>

	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	480a      	ldr	r0, [pc, #40]	@ (8000cec <Servo_StopAll+0x64>)
 8000cc2:	f002 fa83 	bl	80031cc <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4809      	ldr	r0, [pc, #36]	@ (8000cf0 <Servo_StopAll+0x68>)
 8000cca:	f002 fa7f 	bl	80031cc <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000cce:	2100      	movs	r1, #0
 8000cd0:	4808      	ldr	r0, [pc, #32]	@ (8000cf4 <Servo_StopAll+0x6c>)
 8000cd2:	f002 fa7b 	bl	80031cc <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4807      	ldr	r0, [pc, #28]	@ (8000cf8 <Servo_StopAll+0x70>)
 8000cda:	f002 fa77 	bl	80031cc <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4806      	ldr	r0, [pc, #24]	@ (8000cfc <Servo_StopAll+0x74>)
 8000ce2:	f002 fa73 	bl	80031cc <HAL_TIM_PWM_Stop>
	}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000064 	.word	0x20000064
 8000cf0:	200000b0 	.word	0x200000b0
 8000cf4:	200000fc 	.word	0x200000fc
 8000cf8:	20000148 	.word	0x20000148
 8000cfc:	20000194 	.word	0x20000194

08000d00 <Servo_Init>:
	/**
	 * @brief Initialize all servo timers and start PWM
	 * @param None
	 * @retval None
	 */
	void Servo_Init(void) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	    // Start all PWM channels
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d04:	2100      	movs	r1, #0
 8000d06:	480a      	ldr	r0, [pc, #40]	@ (8000d30 <Servo_Init+0x30>)
 8000d08:	f002 f95a 	bl	8002fc0 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4809      	ldr	r0, [pc, #36]	@ (8000d34 <Servo_Init+0x34>)
 8000d10:	f002 f956 	bl	8002fc0 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d14:	2100      	movs	r1, #0
 8000d16:	4808      	ldr	r0, [pc, #32]	@ (8000d38 <Servo_Init+0x38>)
 8000d18:	f002 f952 	bl	8002fc0 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <Servo_Init+0x3c>)
 8000d20:	f002 f94e 	bl	8002fc0 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000d24:	2100      	movs	r1, #0
 8000d26:	4806      	ldr	r0, [pc, #24]	@ (8000d40 <Servo_Init+0x40>)
 8000d28:	f002 f94a 	bl	8002fc0 <HAL_TIM_PWM_Start>

//	    // Initialize all servos to stop position
//	    Servo_StopAll();
	}
 8000d2c:	bf00      	nop
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	20000064 	.word	0x20000064
 8000d34:	200000b0 	.word	0x200000b0
 8000d38:	200000fc 	.word	0x200000fc
 8000d3c:	20000148 	.word	0x20000148
 8000d40:	20000194 	.word	0x20000194

08000d44 <SignLetter>:
	 * @brief Example function to demonstrate a sign language letter
	 * @param letter: ASCII character (A-Z)
	 * @param duration: How long to hold the position (in ms)
	 * @retval None
	 */
	void SignLetter(char letter, uint32_t duration) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	6039      	str	r1, [r7, #0]
 8000d4e:	71fb      	strb	r3, [r7, #7]
	    // Reset to neutral position
	    Servo_Init();
 8000d50:	f7ff ffd6 	bl	8000d00 <Servo_Init>
	    HAL_Delay(500); // Wait for fingers to return to neutral
 8000d54:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d58:	f000 faee 	bl	8001338 <HAL_Delay>

	    // Set finger positions based on the letter
	    switch(letter) {
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	2b41      	cmp	r3, #65	@ 0x41
 8000d60:	d002      	beq.n	8000d68 <SignLetter+0x24>
 8000d62:	2b42      	cmp	r3, #66	@ 0x42
 8000d64:	d01a      	beq.n	8000d9c <SignLetter+0x58>
 8000d66:	e033      	b.n	8000dd0 <SignLetter+0x8c>
	        case 'A':
	            // Example: Make 'A' sign (thumb out, all other fingers closed)
	            Servo_SetMotion(THUMB, CLOCKWISE, 70);
 8000d68:	2246      	movs	r2, #70	@ 0x46
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f7ff ff05 	bl	8000b7c <Servo_SetMotion>
	            Servo_SetMotion(INDEX, COUNTERCLOCKWISE, 90);
 8000d72:	225a      	movs	r2, #90	@ 0x5a
 8000d74:	2102      	movs	r1, #2
 8000d76:	2001      	movs	r0, #1
 8000d78:	f7ff ff00 	bl	8000b7c <Servo_SetMotion>
	            Servo_SetMotion(MIDDLE, COUNTERCLOCKWISE, 90);
 8000d7c:	225a      	movs	r2, #90	@ 0x5a
 8000d7e:	2102      	movs	r1, #2
 8000d80:	2002      	movs	r0, #2
 8000d82:	f7ff fefb 	bl	8000b7c <Servo_SetMotion>
	            Servo_SetMotion(RING, COUNTERCLOCKWISE, 90);
 8000d86:	225a      	movs	r2, #90	@ 0x5a
 8000d88:	2102      	movs	r1, #2
 8000d8a:	2003      	movs	r0, #3
 8000d8c:	f7ff fef6 	bl	8000b7c <Servo_SetMotion>
	            Servo_SetMotion(PINKY, COUNTERCLOCKWISE, 90);
 8000d90:	225a      	movs	r2, #90	@ 0x5a
 8000d92:	2102      	movs	r1, #2
 8000d94:	2004      	movs	r0, #4
 8000d96:	f7ff fef1 	bl	8000b7c <Servo_SetMotion>
	            break;
 8000d9a:	e01c      	b.n	8000dd6 <SignLetter+0x92>

	        case 'B':
	            // Example: Make 'B' sign (thumb in, all other fingers straight)
	            Servo_SetMotion(THUMB, COUNTERCLOCKWISE, 80);
 8000d9c:	2250      	movs	r2, #80	@ 0x50
 8000d9e:	2102      	movs	r1, #2
 8000da0:	2000      	movs	r0, #0
 8000da2:	f7ff feeb 	bl	8000b7c <Servo_SetMotion>
	            Servo_SetMotion(INDEX, CLOCKWISE, 50);
 8000da6:	2232      	movs	r2, #50	@ 0x32
 8000da8:	2101      	movs	r1, #1
 8000daa:	2001      	movs	r0, #1
 8000dac:	f7ff fee6 	bl	8000b7c <Servo_SetMotion>
	            Servo_SetMotion(MIDDLE, CLOCKWISE, 50);
 8000db0:	2232      	movs	r2, #50	@ 0x32
 8000db2:	2101      	movs	r1, #1
 8000db4:	2002      	movs	r0, #2
 8000db6:	f7ff fee1 	bl	8000b7c <Servo_SetMotion>
	            Servo_SetMotion(RING, CLOCKWISE, 50);
 8000dba:	2232      	movs	r2, #50	@ 0x32
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	2003      	movs	r0, #3
 8000dc0:	f7ff fedc 	bl	8000b7c <Servo_SetMotion>
	            Servo_SetMotion(PINKY, CLOCKWISE, 50);
 8000dc4:	2232      	movs	r2, #50	@ 0x32
 8000dc6:	2101      	movs	r1, #1
 8000dc8:	2004      	movs	r0, #4
 8000dca:	f7ff fed7 	bl	8000b7c <Servo_SetMotion>
	            break;
 8000dce:	e002      	b.n	8000dd6 <SignLetter+0x92>

	        // Add more letters as needed

	        default:
	            // Default position (rest)
	            Servo_StopAll();
 8000dd0:	f7ff ff5a 	bl	8000c88 <Servo_StopAll>
	            break;
 8000dd4:	bf00      	nop
	    }

	    // Hold the position for the specified duration
	    HAL_Delay(duration);
 8000dd6:	6838      	ldr	r0, [r7, #0]
 8000dd8:	f000 faae 	bl	8001338 <HAL_Delay>

	    // Return to neutral position
	    Servo_StopAll();
 8000ddc:	f7ff ff54 	bl	8000c88 <Servo_StopAll>
	}
 8000de0:	bf00      	nop
 8000de2:	3708      	adds	r7, #8
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dec:	b672      	cpsid	i
}
 8000dee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <Error_Handler+0x8>

08000df4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8000e38 <HAL_MspInit+0x44>)
 8000dfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e06:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	607b      	str	r3, [r7, #4]
 8000e10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e12:	4b09      	ldr	r3, [pc, #36]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e16:	4a08      	ldr	r2, [pc, #32]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e1e:	4b06      	ldr	r3, [pc, #24]	@ (8000e38 <HAL_MspInit+0x44>)
 8000e20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e26:	603b      	str	r3, [r7, #0]
 8000e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	40021000 	.word	0x40021000

08000e3c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b089      	sub	sp, #36	@ 0x24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a2e      	ldr	r2, [pc, #184]	@ (8000f04 <HAL_TIM_PWM_MspInit+0xc8>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10c      	bne.n	8000e68 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000e50:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e52:	4a2d      	ldr	r2, [pc, #180]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000e54:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000e58:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000e5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000e66:	e046      	b.n	8000ef6 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e70:	d10c      	bne.n	8000e8c <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e72:	4b25      	ldr	r3, [pc, #148]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e76:	4a24      	ldr	r2, [pc, #144]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e7e:	4b22      	ldr	r3, [pc, #136]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e82:	f003 0301 	and.w	r3, r3, #1
 8000e86:	61bb      	str	r3, [r7, #24]
 8000e88:	69bb      	ldr	r3, [r7, #24]
}
 8000e8a:	e034      	b.n	8000ef6 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a1e      	ldr	r2, [pc, #120]	@ (8000f0c <HAL_TIM_PWM_MspInit+0xd0>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10c      	bne.n	8000eb0 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e96:	4b1c      	ldr	r3, [pc, #112]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000e9c:	f043 0302 	orr.w	r3, r3, #2
 8000ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ea2:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697b      	ldr	r3, [r7, #20]
}
 8000eae:	e022      	b.n	8000ef6 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM4)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a16      	ldr	r2, [pc, #88]	@ (8000f10 <HAL_TIM_PWM_MspInit+0xd4>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000eba:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ebe:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000ec0:	f043 0304 	orr.w	r3, r3, #4
 8000ec4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ec6:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eca:	f003 0304 	and.w	r3, r3, #4
 8000ece:	613b      	str	r3, [r7, #16]
 8000ed0:	693b      	ldr	r3, [r7, #16]
}
 8000ed2:	e010      	b.n	8000ef6 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM8)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8000f14 <HAL_TIM_PWM_MspInit+0xd8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d10b      	bne.n	8000ef6 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000ede:	4b0a      	ldr	r3, [pc, #40]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000ee0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ee2:	4a09      	ldr	r2, [pc, #36]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000ee4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000ee8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eea:	4b07      	ldr	r3, [pc, #28]	@ (8000f08 <HAL_TIM_PWM_MspInit+0xcc>)
 8000eec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
}
 8000ef6:	bf00      	nop
 8000ef8:	3724      	adds	r7, #36	@ 0x24
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40012c00 	.word	0x40012c00
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40000400 	.word	0x40000400
 8000f10:	40000800 	.word	0x40000800
 8000f14:	40013400 	.word	0x40013400

08000f18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	@ 0x30
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a57      	ldr	r2, [pc, #348]	@ (8001094 <HAL_TIM_MspPostInit+0x17c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d11e      	bne.n	8000f78 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3a:	4b57      	ldr	r3, [pc, #348]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3e:	4a56      	ldr	r2, [pc, #344]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f46:	4b54      	ldr	r3, [pc, #336]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
 8000f50:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f72:	f000 faeb 	bl	800154c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000f76:	e088      	b.n	800108a <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f80:	d11d      	bne.n	8000fbe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f82:	4b45      	ldr	r3, [pc, #276]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f86:	4a44      	ldr	r2, [pc, #272]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8000f88:	f043 0301 	orr.w	r3, r3, #1
 8000f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8e:	4b42      	ldr	r3, [pc, #264]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000faa:	2301      	movs	r3, #1
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fb8:	f000 fac8 	bl	800154c <HAL_GPIO_Init>
}
 8000fbc:	e065      	b.n	800108a <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a36      	ldr	r2, [pc, #216]	@ (800109c <HAL_TIM_MspPostInit+0x184>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d11d      	bne.n	8001004 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b33      	ldr	r3, [pc, #204]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8000fca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fcc:	4a32      	ldr	r2, [pc, #200]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd4:	4b30      	ldr	r3, [pc, #192]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8000fd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fe0:	2340      	movs	r3, #64	@ 0x40
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fec:	2300      	movs	r3, #0
 8000fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ffe:	f000 faa5 	bl	800154c <HAL_GPIO_Init>
}
 8001002:	e042      	b.n	800108a <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a25      	ldr	r2, [pc, #148]	@ (80010a0 <HAL_TIM_MspPostInit+0x188>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d11c      	bne.n	8001048 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100e:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001012:	4a21      	ldr	r2, [pc, #132]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101a:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001026:	2340      	movs	r3, #64	@ 0x40
 8001028:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	2300      	movs	r3, #0
 8001030:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001032:	2300      	movs	r3, #0
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001036:	2302      	movs	r3, #2
 8001038:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4619      	mov	r1, r3
 8001040:	4818      	ldr	r0, [pc, #96]	@ (80010a4 <HAL_TIM_MspPostInit+0x18c>)
 8001042:	f000 fa83 	bl	800154c <HAL_GPIO_Init>
}
 8001046:	e020      	b.n	800108a <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM8)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a16      	ldr	r2, [pc, #88]	@ (80010a8 <HAL_TIM_MspPostInit+0x190>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d11b      	bne.n	800108a <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001052:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8001054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001056:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8001058:	f043 0304 	orr.w	r3, r3, #4
 800105c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800105e:	4b0e      	ldr	r3, [pc, #56]	@ (8001098 <HAL_TIM_MspPostInit+0x180>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800106a:	2340      	movs	r3, #64	@ 0x40
 800106c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106e:	2302      	movs	r3, #2
 8001070:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001076:	2300      	movs	r3, #0
 8001078:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800107a:	2303      	movs	r3, #3
 800107c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800107e:	f107 031c 	add.w	r3, r7, #28
 8001082:	4619      	mov	r1, r3
 8001084:	4809      	ldr	r0, [pc, #36]	@ (80010ac <HAL_TIM_MspPostInit+0x194>)
 8001086:	f000 fa61 	bl	800154c <HAL_GPIO_Init>
}
 800108a:	bf00      	nop
 800108c:	3730      	adds	r7, #48	@ 0x30
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40012c00 	.word	0x40012c00
 8001098:	40021000 	.word	0x40021000
 800109c:	40000400 	.word	0x40000400
 80010a0:	40000800 	.word	0x40000800
 80010a4:	48000400 	.word	0x48000400
 80010a8:	40013400 	.word	0x40013400
 80010ac:	48000800 	.word	0x48000800

080010b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0ac      	sub	sp, #176	@ 0xb0
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2288      	movs	r2, #136	@ 0x88
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 fbee 	bl	80048b2 <memset>
  if(huart->Instance==USART2)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a21      	ldr	r2, [pc, #132]	@ (8001160 <HAL_UART_MspInit+0xb0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d13b      	bne.n	8001158 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fa53 	bl	8002598 <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010f8:	f7ff fe76 	bl	8000de8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fc:	4b19      	ldr	r3, [pc, #100]	@ (8001164 <HAL_UART_MspInit+0xb4>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001100:	4a18      	ldr	r2, [pc, #96]	@ (8001164 <HAL_UART_MspInit+0xb4>)
 8001102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001106:	6593      	str	r3, [r2, #88]	@ 0x58
 8001108:	4b16      	ldr	r3, [pc, #88]	@ (8001164 <HAL_UART_MspInit+0xb4>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001114:	4b13      	ldr	r3, [pc, #76]	@ (8001164 <HAL_UART_MspInit+0xb4>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001118:	4a12      	ldr	r2, [pc, #72]	@ (8001164 <HAL_UART_MspInit+0xb4>)
 800111a:	f043 0301 	orr.w	r3, r3, #1
 800111e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001120:	4b10      	ldr	r3, [pc, #64]	@ (8001164 <HAL_UART_MspInit+0xb4>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001124:	f003 0301 	and.w	r3, r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800112c:	230c      	movs	r3, #12
 800112e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001144:	2307      	movs	r3, #7
 8001146:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800114e:	4619      	mov	r1, r3
 8001150:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001154:	f000 f9fa 	bl	800154c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001158:	bf00      	nop
 800115a:	37b0      	adds	r7, #176	@ 0xb0
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40004400 	.word	0x40004400
 8001164:	40021000 	.word	0x40021000

08001168 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <NMI_Handler+0x4>

08001170 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001174:	bf00      	nop
 8001176:	e7fd      	b.n	8001174 <HardFault_Handler+0x4>

08001178 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <MemManage_Handler+0x4>

08001180 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <BusFault_Handler+0x4>

08001188 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <UsageFault_Handler+0x4>

08001190 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011be:	f000 f89b 	bl	80012f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <SystemInit+0x20>)
 80011ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011d2:	4a05      	ldr	r2, [pc, #20]	@ (80011e8 <SystemInit+0x20>)
 80011d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001224 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011f0:	f7ff ffea 	bl	80011c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <LoopForever+0x6>)
  ldr r1, =_edata
 80011f6:	490d      	ldr	r1, [pc, #52]	@ (800122c <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001230 <LoopForever+0xe>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011fc:	e002      	b.n	8001204 <LoopCopyDataInit>

080011fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001200:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001202:	3304      	adds	r3, #4

08001204 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001204:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001206:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001208:	d3f9      	bcc.n	80011fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <LoopForever+0x12>)
  ldr r4, =_ebss
 800120c:	4c0a      	ldr	r4, [pc, #40]	@ (8001238 <LoopForever+0x16>)
  movs r3, #0
 800120e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001210:	e001      	b.n	8001216 <LoopFillZerobss>

08001212 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001212:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001214:	3204      	adds	r2, #4

08001216 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001216:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001218:	d3fb      	bcc.n	8001212 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800121a:	f003 fb53 	bl	80048c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800121e:	f7ff f969 	bl	80004f4 <main>

08001222 <LoopForever>:

LoopForever:
    b LoopForever
 8001222:	e7fe      	b.n	8001222 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001224:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001228:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800122c:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8001230:	0800497c 	.word	0x0800497c
  ldr r2, =_sbss
 8001234:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8001238:	2000026c 	.word	0x2000026c

0800123c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800123c:	e7fe      	b.n	800123c <ADC1_2_IRQHandler>
	...

08001240 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800124a:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <HAL_Init+0x3c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a0b      	ldr	r2, [pc, #44]	@ (800127c <HAL_Init+0x3c>)
 8001250:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001254:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001256:	2003      	movs	r0, #3
 8001258:	f000 f944 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125c:	2000      	movs	r0, #0
 800125e:	f000 f80f 	bl	8001280 <HAL_InitTick>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	e001      	b.n	8001272 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800126e:	f7ff fdc1 	bl	8000df4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001272:	79fb      	ldrb	r3, [r7, #7]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3708      	adds	r7, #8
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40022000 	.word	0x40022000

08001280 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800128c:	4b17      	ldr	r3, [pc, #92]	@ (80012ec <HAL_InitTick+0x6c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d023      	beq.n	80012dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001294:	4b16      	ldr	r3, [pc, #88]	@ (80012f0 <HAL_InitTick+0x70>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b14      	ldr	r3, [pc, #80]	@ (80012ec <HAL_InitTick+0x6c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	4619      	mov	r1, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012aa:	4618      	mov	r0, r3
 80012ac:	f000 f941 	bl	8001532 <HAL_SYSTICK_Config>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10f      	bne.n	80012d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d809      	bhi.n	80012d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f000 f919 	bl	80014fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012c8:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <HAL_InitTick+0x74>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	e007      	b.n	80012e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012d0:	2301      	movs	r3, #1
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e004      	b.n	80012e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e001      	b.n	80012e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000044 	.word	0x20000044
 80012f0:	2000003c 	.word	0x2000003c
 80012f4:	20000040 	.word	0x20000040

080012f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_IncTick+0x20>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x24>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4413      	add	r3, r2
 8001308:	4a04      	ldr	r2, [pc, #16]	@ (800131c <HAL_IncTick+0x24>)
 800130a:	6013      	str	r3, [r2, #0]
}
 800130c:	bf00      	nop
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	20000044 	.word	0x20000044
 800131c:	20000268 	.word	0x20000268

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	@ (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000268 	.word	0x20000268

08001338 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001340:	f7ff ffee 	bl	8001320 <HAL_GetTick>
 8001344:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001350:	d005      	beq.n	800135e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_Delay+0x44>)
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4413      	add	r3, r2
 800135c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800135e:	bf00      	nop
 8001360:	f7ff ffde 	bl	8001320 <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	68bb      	ldr	r3, [r7, #8]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	429a      	cmp	r2, r3
 800136e:	d8f7      	bhi.n	8001360 <HAL_Delay+0x28>
  {
  }
}
 8001370:	bf00      	nop
 8001372:	bf00      	nop
 8001374:	3710      	adds	r7, #16
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	20000044 	.word	0x20000044

08001380 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001390:	4b0c      	ldr	r3, [pc, #48]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001396:	68ba      	ldr	r2, [r7, #8]
 8001398:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800139c:	4013      	ands	r3, r2
 800139e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b2:	4a04      	ldr	r2, [pc, #16]	@ (80013c4 <__NVIC_SetPriorityGrouping+0x44>)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	60d3      	str	r3, [r2, #12]
}
 80013b8:	bf00      	nop
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b04      	ldr	r3, [pc, #16]	@ (80013e0 <__NVIC_GetPriorityGrouping+0x18>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	f003 0307 	and.w	r3, r3, #7
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr
 80013e0:	e000ed00 	.word	0xe000ed00

080013e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b083      	sub	sp, #12
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	6039      	str	r1, [r7, #0]
 80013ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	db0a      	blt.n	800140e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	b2da      	uxtb	r2, r3
 80013fc:	490c      	ldr	r1, [pc, #48]	@ (8001430 <__NVIC_SetPriority+0x4c>)
 80013fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001402:	0112      	lsls	r2, r2, #4
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	440b      	add	r3, r1
 8001408:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800140c:	e00a      	b.n	8001424 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	4908      	ldr	r1, [pc, #32]	@ (8001434 <__NVIC_SetPriority+0x50>)
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	3b04      	subs	r3, #4
 800141c:	0112      	lsls	r2, r2, #4
 800141e:	b2d2      	uxtb	r2, r2
 8001420:	440b      	add	r3, r1
 8001422:	761a      	strb	r2, [r3, #24]
}
 8001424:	bf00      	nop
 8001426:	370c      	adds	r7, #12
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001438:	b480      	push	{r7}
 800143a:	b089      	sub	sp, #36	@ 0x24
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	60b9      	str	r1, [r7, #8]
 8001442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f003 0307 	and.w	r3, r3, #7
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f1c3 0307 	rsb	r3, r3, #7
 8001452:	2b04      	cmp	r3, #4
 8001454:	bf28      	it	cs
 8001456:	2304      	movcs	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	3304      	adds	r3, #4
 800145e:	2b06      	cmp	r3, #6
 8001460:	d902      	bls.n	8001468 <NVIC_EncodePriority+0x30>
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3b03      	subs	r3, #3
 8001466:	e000      	b.n	800146a <NVIC_EncodePriority+0x32>
 8001468:	2300      	movs	r3, #0
 800146a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800146c:	f04f 32ff 	mov.w	r2, #4294967295
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	401a      	ands	r2, r3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001480:	f04f 31ff 	mov.w	r1, #4294967295
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	fa01 f303 	lsl.w	r3, r1, r3
 800148a:	43d9      	mvns	r1, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	4313      	orrs	r3, r2
         );
}
 8001492:	4618      	mov	r0, r3
 8001494:	3724      	adds	r7, #36	@ 0x24
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295
 80014c4:	f7ff ff8e 	bl	80013e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	@ (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	@ (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff47 	bl	8001380 <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff5c 	bl	80013c8 <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff8e 	bl	8001438 <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5d 	bl	80013e4 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffb0 	bl	80014a0 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800154c:	b480      	push	{r7}
 800154e:	b087      	sub	sp, #28
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001556:	2300      	movs	r3, #0
 8001558:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800155a:	e17f      	b.n	800185c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2101      	movs	r1, #1
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa01 f303 	lsl.w	r3, r1, r3
 8001568:	4013      	ands	r3, r2
 800156a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	f000 8171 	beq.w	8001856 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f003 0303 	and.w	r3, r3, #3
 800157c:	2b01      	cmp	r3, #1
 800157e:	d005      	beq.n	800158c <HAL_GPIO_Init+0x40>
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f003 0303 	and.w	r3, r3, #3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d130      	bne.n	80015ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	2203      	movs	r2, #3
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	4013      	ands	r3, r2
 80015a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	68da      	ldr	r2, [r3, #12]
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	693a      	ldr	r2, [r7, #16]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015c2:	2201      	movs	r2, #1
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	091b      	lsrs	r3, r3, #4
 80015d8:	f003 0201 	and.w	r2, r3, #1
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa02 f303 	lsl.w	r3, r2, r3
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	4313      	orrs	r3, r2
 80015e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	693a      	ldr	r2, [r7, #16]
 80015ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
 80015f6:	2b03      	cmp	r3, #3
 80015f8:	d118      	bne.n	800162c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001600:	2201      	movs	r2, #1
 8001602:	697b      	ldr	r3, [r7, #20]
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	43db      	mvns	r3, r3
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	4013      	ands	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	f003 0201 	and.w	r2, r3, #1
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4313      	orrs	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	693a      	ldr	r2, [r7, #16]
 800162a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f003 0303 	and.w	r3, r3, #3
 8001634:	2b03      	cmp	r3, #3
 8001636:	d017      	beq.n	8001668 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	4313      	orrs	r3, r2
 8001660:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0303 	and.w	r3, r3, #3
 8001670:	2b02      	cmp	r3, #2
 8001672:	d123      	bne.n	80016bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	08da      	lsrs	r2, r3, #3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	3208      	adds	r2, #8
 800167c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001680:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	220f      	movs	r2, #15
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	43db      	mvns	r3, r3
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4013      	ands	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	08da      	lsrs	r2, r3, #3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	3208      	adds	r2, #8
 80016b6:	6939      	ldr	r1, [r7, #16]
 80016b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	2203      	movs	r2, #3
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	43db      	mvns	r3, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f003 0203 	and.w	r2, r3, #3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f000 80ac 	beq.w	8001856 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016fe:	4b5f      	ldr	r3, [pc, #380]	@ (800187c <HAL_GPIO_Init+0x330>)
 8001700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001702:	4a5e      	ldr	r2, [pc, #376]	@ (800187c <HAL_GPIO_Init+0x330>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6613      	str	r3, [r2, #96]	@ 0x60
 800170a:	4b5c      	ldr	r3, [pc, #368]	@ (800187c <HAL_GPIO_Init+0x330>)
 800170c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001716:	4a5a      	ldr	r2, [pc, #360]	@ (8001880 <HAL_GPIO_Init+0x334>)
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	089b      	lsrs	r3, r3, #2
 800171c:	3302      	adds	r3, #2
 800171e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	220f      	movs	r2, #15
 800172e:	fa02 f303 	lsl.w	r3, r2, r3
 8001732:	43db      	mvns	r3, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4013      	ands	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001740:	d025      	beq.n	800178e <HAL_GPIO_Init+0x242>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4f      	ldr	r2, [pc, #316]	@ (8001884 <HAL_GPIO_Init+0x338>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d01f      	beq.n	800178a <HAL_GPIO_Init+0x23e>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4e      	ldr	r2, [pc, #312]	@ (8001888 <HAL_GPIO_Init+0x33c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d019      	beq.n	8001786 <HAL_GPIO_Init+0x23a>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4d      	ldr	r2, [pc, #308]	@ (800188c <HAL_GPIO_Init+0x340>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d013      	beq.n	8001782 <HAL_GPIO_Init+0x236>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4c      	ldr	r2, [pc, #304]	@ (8001890 <HAL_GPIO_Init+0x344>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d00d      	beq.n	800177e <HAL_GPIO_Init+0x232>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4b      	ldr	r2, [pc, #300]	@ (8001894 <HAL_GPIO_Init+0x348>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d007      	beq.n	800177a <HAL_GPIO_Init+0x22e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a4a      	ldr	r2, [pc, #296]	@ (8001898 <HAL_GPIO_Init+0x34c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_GPIO_Init+0x22a>
 8001772:	2306      	movs	r3, #6
 8001774:	e00c      	b.n	8001790 <HAL_GPIO_Init+0x244>
 8001776:	2307      	movs	r3, #7
 8001778:	e00a      	b.n	8001790 <HAL_GPIO_Init+0x244>
 800177a:	2305      	movs	r3, #5
 800177c:	e008      	b.n	8001790 <HAL_GPIO_Init+0x244>
 800177e:	2304      	movs	r3, #4
 8001780:	e006      	b.n	8001790 <HAL_GPIO_Init+0x244>
 8001782:	2303      	movs	r3, #3
 8001784:	e004      	b.n	8001790 <HAL_GPIO_Init+0x244>
 8001786:	2302      	movs	r3, #2
 8001788:	e002      	b.n	8001790 <HAL_GPIO_Init+0x244>
 800178a:	2301      	movs	r3, #1
 800178c:	e000      	b.n	8001790 <HAL_GPIO_Init+0x244>
 800178e:	2300      	movs	r3, #0
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	f002 0203 	and.w	r2, r2, #3
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	4093      	lsls	r3, r2
 800179a:	693a      	ldr	r2, [r7, #16]
 800179c:	4313      	orrs	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017a0:	4937      	ldr	r1, [pc, #220]	@ (8001880 <HAL_GPIO_Init+0x334>)
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	089b      	lsrs	r3, r3, #2
 80017a6:	3302      	adds	r3, #2
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80017ae:	4b3b      	ldr	r3, [pc, #236]	@ (800189c <HAL_GPIO_Init+0x350>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017d2:	4a32      	ldr	r2, [pc, #200]	@ (800189c <HAL_GPIO_Init+0x350>)
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80017d8:	4b30      	ldr	r3, [pc, #192]	@ (800189c <HAL_GPIO_Init+0x350>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43db      	mvns	r3, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017fc:	4a27      	ldr	r2, [pc, #156]	@ (800189c <HAL_GPIO_Init+0x350>)
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001802:	4b26      	ldr	r3, [pc, #152]	@ (800189c <HAL_GPIO_Init+0x350>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	43db      	mvns	r3, r3
 800180c:	693a      	ldr	r2, [r7, #16]
 800180e:	4013      	ands	r3, r2
 8001810:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d003      	beq.n	8001826 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001826:	4a1d      	ldr	r2, [pc, #116]	@ (800189c <HAL_GPIO_Init+0x350>)
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800182c:	4b1b      	ldr	r3, [pc, #108]	@ (800189c <HAL_GPIO_Init+0x350>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	43db      	mvns	r3, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4013      	ands	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d003      	beq.n	8001850 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001850:	4a12      	ldr	r2, [pc, #72]	@ (800189c <HAL_GPIO_Init+0x350>)
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	fa22 f303 	lsr.w	r3, r2, r3
 8001866:	2b00      	cmp	r3, #0
 8001868:	f47f ae78 	bne.w	800155c <HAL_GPIO_Init+0x10>
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	371c      	adds	r7, #28
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000
 8001884:	48000400 	.word	0x48000400
 8001888:	48000800 	.word	0x48000800
 800188c:	48000c00 	.word	0x48000c00
 8001890:	48001000 	.word	0x48001000
 8001894:	48001400 	.word	0x48001400
 8001898:	48001800 	.word	0x48001800
 800189c:	40010400 	.word	0x40010400

080018a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	460b      	mov	r3, r1
 80018aa:	807b      	strh	r3, [r7, #2]
 80018ac:	4613      	mov	r3, r2
 80018ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018b0:	787b      	ldrb	r3, [r7, #1]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018b6:	887a      	ldrh	r2, [r7, #2]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018bc:	e002      	b.n	80018c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018be:	887a      	ldrh	r2, [r7, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018c4:	bf00      	nop
 80018c6:	370c      	adds	r7, #12
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80018d4:	4b04      	ldr	r3, [pc, #16]	@ (80018e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80018dc:	4618      	mov	r0, r3
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	40007000 	.word	0x40007000

080018ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80018fa:	d130      	bne.n	800195e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80018fc:	4b23      	ldr	r3, [pc, #140]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001908:	d038      	beq.n	800197c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800190a:	4b20      	ldr	r3, [pc, #128]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001912:	4a1e      	ldr	r2, [pc, #120]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001914:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001918:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800191a:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2232      	movs	r2, #50	@ 0x32
 8001920:	fb02 f303 	mul.w	r3, r2, r3
 8001924:	4a1b      	ldr	r2, [pc, #108]	@ (8001994 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001926:	fba2 2303 	umull	r2, r3, r2, r3
 800192a:	0c9b      	lsrs	r3, r3, #18
 800192c:	3301      	adds	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001930:	e002      	b.n	8001938 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	3b01      	subs	r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001938:	4b14      	ldr	r3, [pc, #80]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001944:	d102      	bne.n	800194c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f2      	bne.n	8001932 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800194c:	4b0f      	ldr	r3, [pc, #60]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001958:	d110      	bne.n	800197c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800195a:	2303      	movs	r3, #3
 800195c:	e00f      	b.n	800197e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800195e:	4b0b      	ldr	r3, [pc, #44]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001966:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800196a:	d007      	beq.n	800197c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800196c:	4b07      	ldr	r3, [pc, #28]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001974:	4a05      	ldr	r2, [pc, #20]	@ (800198c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001976:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800197a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3714      	adds	r7, #20
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40007000 	.word	0x40007000
 8001990:	2000003c 	.word	0x2000003c
 8001994:	431bde83 	.word	0x431bde83

08001998 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e3ca      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019aa:	4b97      	ldr	r3, [pc, #604]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019b4:	4b94      	ldr	r3, [pc, #592]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	f003 0303 	and.w	r3, r3, #3
 80019bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	f000 80e4 	beq.w	8001b94 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d007      	beq.n	80019e2 <HAL_RCC_OscConfig+0x4a>
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	2b0c      	cmp	r3, #12
 80019d6:	f040 808b 	bne.w	8001af0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	2b01      	cmp	r3, #1
 80019de:	f040 8087 	bne.w	8001af0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019e2:	4b89      	ldr	r3, [pc, #548]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_RCC_OscConfig+0x62>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e3a2      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a1a      	ldr	r2, [r3, #32]
 80019fe:	4b82      	ldr	r3, [pc, #520]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d004      	beq.n	8001a14 <HAL_RCC_OscConfig+0x7c>
 8001a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a12:	e005      	b.n	8001a20 <HAL_RCC_OscConfig+0x88>
 8001a14:	4b7c      	ldr	r3, [pc, #496]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1a:	091b      	lsrs	r3, r3, #4
 8001a1c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d223      	bcs.n	8001a6c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a1b      	ldr	r3, [r3, #32]
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 fd55 	bl	80024d8 <RCC_SetFlashLatencyFromMSIRange>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	e383      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a38:	4b73      	ldr	r3, [pc, #460]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a72      	ldr	r2, [pc, #456]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a3e:	f043 0308 	orr.w	r3, r3, #8
 8001a42:	6013      	str	r3, [r2, #0]
 8001a44:	4b70      	ldr	r3, [pc, #448]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	496d      	ldr	r1, [pc, #436]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a56:	4b6c      	ldr	r3, [pc, #432]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	021b      	lsls	r3, r3, #8
 8001a64:	4968      	ldr	r1, [pc, #416]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a66:	4313      	orrs	r3, r2
 8001a68:	604b      	str	r3, [r1, #4]
 8001a6a:	e025      	b.n	8001ab8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a6c:	4b66      	ldr	r3, [pc, #408]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a65      	ldr	r2, [pc, #404]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a72:	f043 0308 	orr.w	r3, r3, #8
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b63      	ldr	r3, [pc, #396]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a1b      	ldr	r3, [r3, #32]
 8001a84:	4960      	ldr	r1, [pc, #384]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	021b      	lsls	r3, r3, #8
 8001a98:	495b      	ldr	r1, [pc, #364]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d109      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a1b      	ldr	r3, [r3, #32]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 fd15 	bl	80024d8 <RCC_SetFlashLatencyFromMSIRange>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e343      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ab8:	f000 fc4a 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b52      	ldr	r3, [pc, #328]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	f003 030f 	and.w	r3, r3, #15
 8001ac8:	4950      	ldr	r1, [pc, #320]	@ (8001c0c <HAL_RCC_OscConfig+0x274>)
 8001aca:	5ccb      	ldrb	r3, [r1, r3]
 8001acc:	f003 031f 	and.w	r3, r3, #31
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ad4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c10 <HAL_RCC_OscConfig+0x278>)
 8001ad6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ad8:	4b4e      	ldr	r3, [pc, #312]	@ (8001c14 <HAL_RCC_OscConfig+0x27c>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7ff fbcf 	bl	8001280 <HAL_InitTick>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d052      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	e327      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d032      	beq.n	8001b5e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001af8:	4b43      	ldr	r3, [pc, #268]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a42      	ldr	r2, [pc, #264]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b04:	f7ff fc0c 	bl	8001320 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fc08 	bl	8001320 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e310      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b1e:	4b3a      	ldr	r3, [pc, #232]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b2a:	4b37      	ldr	r3, [pc, #220]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a36      	ldr	r2, [pc, #216]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b34      	ldr	r3, [pc, #208]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a1b      	ldr	r3, [r3, #32]
 8001b42:	4931      	ldr	r1, [pc, #196]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b48:	4b2f      	ldr	r3, [pc, #188]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	021b      	lsls	r3, r3, #8
 8001b56:	492c      	ldr	r1, [pc, #176]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	604b      	str	r3, [r1, #4]
 8001b5c:	e01a      	b.n	8001b94 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a29      	ldr	r2, [pc, #164]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b6a:	f7ff fbd9 	bl	8001320 <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b70:	e008      	b.n	8001b84 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b72:	f7ff fbd5 	bl	8001320 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d901      	bls.n	8001b84 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e2dd      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b84:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f0      	bne.n	8001b72 <HAL_RCC_OscConfig+0x1da>
 8001b90:	e000      	b.n	8001b94 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d074      	beq.n	8001c8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b08      	cmp	r3, #8
 8001ba4:	d005      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x21a>
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	2b0c      	cmp	r3, #12
 8001baa:	d10e      	bne.n	8001bca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d10b      	bne.n	8001bca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb2:	4b15      	ldr	r3, [pc, #84]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d064      	beq.n	8001c88 <HAL_RCC_OscConfig+0x2f0>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d160      	bne.n	8001c88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e2ba      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x24a>
 8001bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a0b      	ldr	r2, [pc, #44]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bde:	6013      	str	r3, [r2, #0]
 8001be0:	e026      	b.n	8001c30 <HAL_RCC_OscConfig+0x298>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bea:	d115      	bne.n	8001c18 <HAL_RCC_OscConfig+0x280>
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a05      	ldr	r2, [pc, #20]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001bf2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf6:	6013      	str	r3, [r2, #0]
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a02      	ldr	r2, [pc, #8]	@ (8001c08 <HAL_RCC_OscConfig+0x270>)
 8001bfe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c02:	6013      	str	r3, [r2, #0]
 8001c04:	e014      	b.n	8001c30 <HAL_RCC_OscConfig+0x298>
 8001c06:	bf00      	nop
 8001c08:	40021000 	.word	0x40021000
 8001c0c:	08004924 	.word	0x08004924
 8001c10:	2000003c 	.word	0x2000003c
 8001c14:	20000040 	.word	0x20000040
 8001c18:	4ba0      	ldr	r3, [pc, #640]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a9f      	ldr	r2, [pc, #636]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b9d      	ldr	r3, [pc, #628]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a9c      	ldr	r2, [pc, #624]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d013      	beq.n	8001c60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff fb72 	bl	8001320 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c40:	f7ff fb6e 	bl	8001320 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b64      	cmp	r3, #100	@ 0x64
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e276      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c52:	4b92      	ldr	r3, [pc, #584]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d0f0      	beq.n	8001c40 <HAL_RCC_OscConfig+0x2a8>
 8001c5e:	e014      	b.n	8001c8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c60:	f7ff fb5e 	bl	8001320 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c68:	f7ff fb5a 	bl	8001320 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b64      	cmp	r3, #100	@ 0x64
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e262      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7a:	4b88      	ldr	r3, [pc, #544]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x2d0>
 8001c86:	e000      	b.n	8001c8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d060      	beq.n	8001d58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c96:	69bb      	ldr	r3, [r7, #24]
 8001c98:	2b04      	cmp	r3, #4
 8001c9a:	d005      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x310>
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	2b0c      	cmp	r3, #12
 8001ca0:	d119      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d116      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca8:	4b7c      	ldr	r3, [pc, #496]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x328>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e23f      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc0:	4b76      	ldr	r3, [pc, #472]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	691b      	ldr	r3, [r3, #16]
 8001ccc:	061b      	lsls	r3, r3, #24
 8001cce:	4973      	ldr	r1, [pc, #460]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd4:	e040      	b.n	8001d58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	68db      	ldr	r3, [r3, #12]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d023      	beq.n	8001d26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cde:	4b6f      	ldr	r3, [pc, #444]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001ce4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7ff fb19 	bl	8001320 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff fb15 	bl	8001320 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e21d      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d04:	4b65      	ldr	r3, [pc, #404]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d10:	4b62      	ldr	r3, [pc, #392]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	061b      	lsls	r3, r3, #24
 8001d1e:	495f      	ldr	r1, [pc, #380]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
 8001d24:	e018      	b.n	8001d58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d26:	4b5d      	ldr	r3, [pc, #372]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a5c      	ldr	r2, [pc, #368]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d32:	f7ff faf5 	bl	8001320 <HAL_GetTick>
 8001d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d38:	e008      	b.n	8001d4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3a:	f7ff faf1 	bl	8001320 <HAL_GetTick>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d901      	bls.n	8001d4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d48:	2303      	movs	r3, #3
 8001d4a:	e1f9      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d4c:	4b53      	ldr	r3, [pc, #332]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1f0      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d03c      	beq.n	8001dde <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	695b      	ldr	r3, [r3, #20]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d01c      	beq.n	8001da6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001d6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d72:	4a4a      	ldr	r2, [pc, #296]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7c:	f7ff fad0 	bl	8001320 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d84:	f7ff facc 	bl	8001320 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e1d4      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d96:	4b41      	ldr	r3, [pc, #260]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001d98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d0ef      	beq.n	8001d84 <HAL_RCC_OscConfig+0x3ec>
 8001da4:	e01b      	b.n	8001dde <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001da6:	4b3d      	ldr	r3, [pc, #244]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001da8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dac:	4a3b      	ldr	r2, [pc, #236]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001dae:	f023 0301 	bic.w	r3, r3, #1
 8001db2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db6:	f7ff fab3 	bl	8001320 <HAL_GetTick>
 8001dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dbe:	f7ff faaf 	bl	8001320 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e1b7      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dd0:	4b32      	ldr	r3, [pc, #200]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d1ef      	bne.n	8001dbe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0304 	and.w	r3, r3, #4
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f000 80a6 	beq.w	8001f38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dec:	2300      	movs	r3, #0
 8001dee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001df0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d10d      	bne.n	8001e18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfc:	4b27      	ldr	r3, [pc, #156]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	4a26      	ldr	r2, [pc, #152]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e08:	4b24      	ldr	r3, [pc, #144]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e14:	2301      	movs	r3, #1
 8001e16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e18:	4b21      	ldr	r3, [pc, #132]	@ (8001ea0 <HAL_RCC_OscConfig+0x508>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d118      	bne.n	8001e56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e24:	4b1e      	ldr	r3, [pc, #120]	@ (8001ea0 <HAL_RCC_OscConfig+0x508>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a1d      	ldr	r2, [pc, #116]	@ (8001ea0 <HAL_RCC_OscConfig+0x508>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e30:	f7ff fa76 	bl	8001320 <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e38:	f7ff fa72 	bl	8001320 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b02      	cmp	r3, #2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e17a      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e4a:	4b15      	ldr	r3, [pc, #84]	@ (8001ea0 <HAL_RCC_OscConfig+0x508>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d108      	bne.n	8001e70 <HAL_RCC_OscConfig+0x4d8>
 8001e5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e64:	4a0d      	ldr	r2, [pc, #52]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e6e:	e029      	b.n	8001ec4 <HAL_RCC_OscConfig+0x52c>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	2b05      	cmp	r3, #5
 8001e76:	d115      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x50c>
 8001e78:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e7e:	4a07      	ldr	r2, [pc, #28]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e88:	4b04      	ldr	r3, [pc, #16]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e8e:	4a03      	ldr	r2, [pc, #12]	@ (8001e9c <HAL_RCC_OscConfig+0x504>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001e98:	e014      	b.n	8001ec4 <HAL_RCC_OscConfig+0x52c>
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	40007000 	.word	0x40007000
 8001ea4:	4b9c      	ldr	r3, [pc, #624]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eaa:	4a9b      	ldr	r2, [pc, #620]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001eb4:	4b98      	ldr	r3, [pc, #608]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001eba:	4a97      	ldr	r2, [pc, #604]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001ebc:	f023 0304 	bic.w	r3, r3, #4
 8001ec0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d016      	beq.n	8001efa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ecc:	f7ff fa28 	bl	8001320 <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed4:	f7ff fa24 	bl	8001320 <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e12a      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eea:	4b8b      	ldr	r3, [pc, #556]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d0ed      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x53c>
 8001ef8:	e015      	b.n	8001f26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efa:	f7ff fa11 	bl	8001320 <HAL_GetTick>
 8001efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f00:	e00a      	b.n	8001f18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f02:	f7ff fa0d 	bl	8001320 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e113      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f18:	4b7f      	ldr	r3, [pc, #508]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1ed      	bne.n	8001f02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f26:	7ffb      	ldrb	r3, [r7, #31]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d105      	bne.n	8001f38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f2c:	4b7a      	ldr	r3, [pc, #488]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f30:	4a79      	ldr	r2, [pc, #484]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001f32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f36:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 80fe 	beq.w	800213e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	f040 80d0 	bne.w	80020ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001f4c:	4b72      	ldr	r3, [pc, #456]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	f003 0203 	and.w	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d130      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d127      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d11f      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001f8c:	2a07      	cmp	r2, #7
 8001f8e:	bf14      	ite	ne
 8001f90:	2201      	movne	r2, #1
 8001f92:	2200      	moveq	r2, #0
 8001f94:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d113      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fa4:	085b      	lsrs	r3, r3, #1
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d109      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb8:	085b      	lsrs	r3, r3, #1
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d06e      	beq.n	80020a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	2b0c      	cmp	r3, #12
 8001fc6:	d069      	beq.n	800209c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001fc8:	4b53      	ldr	r3, [pc, #332]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001fd4:	4b50      	ldr	r3, [pc, #320]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0ad      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001fe4:	4b4c      	ldr	r3, [pc, #304]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a4b      	ldr	r2, [pc, #300]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8001fea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ff0:	f7ff f996 	bl	8001320 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff f992 	bl	8001320 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e09a      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800200a:	4b43      	ldr	r3, [pc, #268]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002016:	4b40      	ldr	r3, [pc, #256]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8002018:	68da      	ldr	r2, [r3, #12]
 800201a:	4b40      	ldr	r3, [pc, #256]	@ (800211c <HAL_RCC_OscConfig+0x784>)
 800201c:	4013      	ands	r3, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002026:	3a01      	subs	r2, #1
 8002028:	0112      	lsls	r2, r2, #4
 800202a:	4311      	orrs	r1, r2
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002030:	0212      	lsls	r2, r2, #8
 8002032:	4311      	orrs	r1, r2
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002038:	0852      	lsrs	r2, r2, #1
 800203a:	3a01      	subs	r2, #1
 800203c:	0552      	lsls	r2, r2, #21
 800203e:	4311      	orrs	r1, r2
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002044:	0852      	lsrs	r2, r2, #1
 8002046:	3a01      	subs	r2, #1
 8002048:	0652      	lsls	r2, r2, #25
 800204a:	4311      	orrs	r1, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002050:	0912      	lsrs	r2, r2, #4
 8002052:	0452      	lsls	r2, r2, #17
 8002054:	430a      	orrs	r2, r1
 8002056:	4930      	ldr	r1, [pc, #192]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8002058:	4313      	orrs	r3, r2
 800205a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800205c:	4b2e      	ldr	r3, [pc, #184]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a2d      	ldr	r2, [pc, #180]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8002062:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002066:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002068:	4b2b      	ldr	r3, [pc, #172]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	4a2a      	ldr	r2, [pc, #168]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 800206e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002072:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002074:	f7ff f954 	bl	8001320 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800207c:	f7ff f950 	bl	8001320 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e058      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800208e:	4b22      	ldr	r3, [pc, #136]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800209a:	e050      	b.n	800213e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e04f      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d148      	bne.n	800213e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a19      	ldr	r2, [pc, #100]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020b8:	4b17      	ldr	r3, [pc, #92]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	4a16      	ldr	r2, [pc, #88]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80020c4:	f7ff f92c 	bl	8001320 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020cc:	f7ff f928 	bl	8001320 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e030      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020de:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0f0      	beq.n	80020cc <HAL_RCC_OscConfig+0x734>
 80020ea:	e028      	b.n	800213e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2b0c      	cmp	r3, #12
 80020f0:	d023      	beq.n	800213a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020f2:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a08      	ldr	r2, [pc, #32]	@ (8002118 <HAL_RCC_OscConfig+0x780>)
 80020f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fe:	f7ff f90f 	bl	8001320 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002104:	e00c      	b.n	8002120 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002106:	f7ff f90b 	bl	8001320 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d905      	bls.n	8002120 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e013      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
 8002118:	40021000 	.word	0x40021000
 800211c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002120:	4b09      	ldr	r3, [pc, #36]	@ (8002148 <HAL_RCC_OscConfig+0x7b0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1ec      	bne.n	8002106 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800212c:	4b06      	ldr	r3, [pc, #24]	@ (8002148 <HAL_RCC_OscConfig+0x7b0>)
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	4905      	ldr	r1, [pc, #20]	@ (8002148 <HAL_RCC_OscConfig+0x7b0>)
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_RCC_OscConfig+0x7b4>)
 8002134:	4013      	ands	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]
 8002138:	e001      	b.n	800213e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3720      	adds	r7, #32
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000
 800214c:	feeefffc 	.word	0xfeeefffc

08002150 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d101      	bne.n	8002164 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e0e7      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002164:	4b75      	ldr	r3, [pc, #468]	@ (800233c <HAL_RCC_ClockConfig+0x1ec>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	429a      	cmp	r2, r3
 8002170:	d910      	bls.n	8002194 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002172:	4b72      	ldr	r3, [pc, #456]	@ (800233c <HAL_RCC_ClockConfig+0x1ec>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f023 0207 	bic.w	r2, r3, #7
 800217a:	4970      	ldr	r1, [pc, #448]	@ (800233c <HAL_RCC_ClockConfig+0x1ec>)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	4313      	orrs	r3, r2
 8002180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002182:	4b6e      	ldr	r3, [pc, #440]	@ (800233c <HAL_RCC_ClockConfig+0x1ec>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 0307 	and.w	r3, r3, #7
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	429a      	cmp	r2, r3
 800218e:	d001      	beq.n	8002194 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0cf      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d010      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	4b66      	ldr	r3, [pc, #408]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d908      	bls.n	80021c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b63      	ldr	r3, [pc, #396]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	4960      	ldr	r1, [pc, #384]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d04c      	beq.n	8002268 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b03      	cmp	r3, #3
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021d6:	4b5a      	ldr	r3, [pc, #360]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d121      	bne.n	8002226 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e0a6      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ee:	4b54      	ldr	r3, [pc, #336]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d115      	bne.n	8002226 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e09a      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002206:	4b4e      	ldr	r3, [pc, #312]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d109      	bne.n	8002226 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e08e      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002216:	4b4a      	ldr	r3, [pc, #296]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e086      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002226:	4b46      	ldr	r3, [pc, #280]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f023 0203 	bic.w	r2, r3, #3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	4943      	ldr	r1, [pc, #268]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002238:	f7ff f872 	bl	8001320 <HAL_GetTick>
 800223c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	e00a      	b.n	8002256 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002240:	f7ff f86e 	bl	8001320 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800224e:	4293      	cmp	r3, r2
 8002250:	d901      	bls.n	8002256 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e06e      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002256:	4b3a      	ldr	r3, [pc, #232]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f003 020c 	and.w	r2, r3, #12
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	429a      	cmp	r2, r3
 8002266:	d1eb      	bne.n	8002240 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d010      	beq.n	8002296 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	4b31      	ldr	r3, [pc, #196]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002280:	429a      	cmp	r2, r3
 8002282:	d208      	bcs.n	8002296 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002284:	4b2e      	ldr	r3, [pc, #184]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	492b      	ldr	r1, [pc, #172]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002296:	4b29      	ldr	r3, [pc, #164]	@ (800233c <HAL_RCC_ClockConfig+0x1ec>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0307 	and.w	r3, r3, #7
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d210      	bcs.n	80022c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a4:	4b25      	ldr	r3, [pc, #148]	@ (800233c <HAL_RCC_ClockConfig+0x1ec>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 0207 	bic.w	r2, r3, #7
 80022ac:	4923      	ldr	r1, [pc, #140]	@ (800233c <HAL_RCC_ClockConfig+0x1ec>)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b4:	4b21      	ldr	r3, [pc, #132]	@ (800233c <HAL_RCC_ClockConfig+0x1ec>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d001      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e036      	b.n	8002334 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d008      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	4918      	ldr	r1, [pc, #96]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022f0:	4b13      	ldr	r3, [pc, #76]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	691b      	ldr	r3, [r3, #16]
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4910      	ldr	r1, [pc, #64]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 8002300:	4313      	orrs	r3, r2
 8002302:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002304:	f000 f824 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8002308:	4602      	mov	r2, r0
 800230a:	4b0d      	ldr	r3, [pc, #52]	@ (8002340 <HAL_RCC_ClockConfig+0x1f0>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	f003 030f 	and.w	r3, r3, #15
 8002314:	490b      	ldr	r1, [pc, #44]	@ (8002344 <HAL_RCC_ClockConfig+0x1f4>)
 8002316:	5ccb      	ldrb	r3, [r1, r3]
 8002318:	f003 031f 	and.w	r3, r3, #31
 800231c:	fa22 f303 	lsr.w	r3, r2, r3
 8002320:	4a09      	ldr	r2, [pc, #36]	@ (8002348 <HAL_RCC_ClockConfig+0x1f8>)
 8002322:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002324:	4b09      	ldr	r3, [pc, #36]	@ (800234c <HAL_RCC_ClockConfig+0x1fc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe ffa9 	bl	8001280 <HAL_InitTick>
 800232e:	4603      	mov	r3, r0
 8002330:	72fb      	strb	r3, [r7, #11]

  return status;
 8002332:	7afb      	ldrb	r3, [r7, #11]
}
 8002334:	4618      	mov	r0, r3
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40022000 	.word	0x40022000
 8002340:	40021000 	.word	0x40021000
 8002344:	08004924 	.word	0x08004924
 8002348:	2000003c 	.word	0x2000003c
 800234c:	20000040 	.word	0x20000040

08002350 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	@ 0x24
 8002354:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	61fb      	str	r3, [r7, #28]
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235e:	4b3e      	ldr	r3, [pc, #248]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 030c 	and.w	r3, r3, #12
 8002366:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002368:	4b3b      	ldr	r3, [pc, #236]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f003 0303 	and.w	r3, r3, #3
 8002370:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0x34>
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	2b0c      	cmp	r3, #12
 800237c:	d121      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d11e      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002384:	4b34      	ldr	r3, [pc, #208]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0308 	and.w	r3, r3, #8
 800238c:	2b00      	cmp	r3, #0
 800238e:	d107      	bne.n	80023a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002390:	4b31      	ldr	r3, [pc, #196]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002392:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002396:	0a1b      	lsrs	r3, r3, #8
 8002398:	f003 030f 	and.w	r3, r3, #15
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	e005      	b.n	80023ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	091b      	lsrs	r3, r3, #4
 80023a6:	f003 030f 	and.w	r3, r3, #15
 80023aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023ac:	4a2b      	ldr	r2, [pc, #172]	@ (800245c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10d      	bne.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023c0:	e00a      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	2b04      	cmp	r3, #4
 80023c6:	d102      	bne.n	80023ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023c8:	4b25      	ldr	r3, [pc, #148]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x110>)
 80023ca:	61bb      	str	r3, [r7, #24]
 80023cc:	e004      	b.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	2b08      	cmp	r3, #8
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023d4:	4b23      	ldr	r3, [pc, #140]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x114>)
 80023d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b0c      	cmp	r3, #12
 80023dc:	d134      	bne.n	8002448 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023de:	4b1e      	ldr	r3, [pc, #120]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	f003 0303 	and.w	r3, r3, #3
 80023e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d003      	beq.n	80023f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	2b03      	cmp	r3, #3
 80023f2:	d003      	beq.n	80023fc <HAL_RCC_GetSysClockFreq+0xac>
 80023f4:	e005      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80023f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002460 <HAL_RCC_GetSysClockFreq+0x110>)
 80023f8:	617b      	str	r3, [r7, #20]
      break;
 80023fa:	e005      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80023fc:	4b19      	ldr	r3, [pc, #100]	@ (8002464 <HAL_RCC_GetSysClockFreq+0x114>)
 80023fe:	617b      	str	r3, [r7, #20]
      break;
 8002400:	e002      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	617b      	str	r3, [r7, #20]
      break;
 8002406:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002408:	4b13      	ldr	r3, [pc, #76]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	3301      	adds	r3, #1
 8002414:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002416:	4b10      	ldr	r3, [pc, #64]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	fb03 f202 	mul.w	r2, r3, r2
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	fbb2 f3f3 	udiv	r3, r2, r3
 800242c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800242e:	4b0a      	ldr	r3, [pc, #40]	@ (8002458 <HAL_RCC_GetSysClockFreq+0x108>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	0e5b      	lsrs	r3, r3, #25
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	3301      	adds	r3, #1
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800243e:	697a      	ldr	r2, [r7, #20]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	fbb2 f3f3 	udiv	r3, r2, r3
 8002446:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002448:	69bb      	ldr	r3, [r7, #24]
}
 800244a:	4618      	mov	r0, r3
 800244c:	3724      	adds	r7, #36	@ 0x24
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	0800493c 	.word	0x0800493c
 8002460:	00f42400 	.word	0x00f42400
 8002464:	007a1200 	.word	0x007a1200

08002468 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800246c:	4b03      	ldr	r3, [pc, #12]	@ (800247c <HAL_RCC_GetHCLKFreq+0x14>)
 800246e:	681b      	ldr	r3, [r3, #0]
}
 8002470:	4618      	mov	r0, r3
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	2000003c 	.word	0x2000003c

08002480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002484:	f7ff fff0 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b06      	ldr	r3, [pc, #24]	@ (80024a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	4904      	ldr	r1, [pc, #16]	@ (80024a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40021000 	.word	0x40021000
 80024a8:	08004934 	.word	0x08004934

080024ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024b0:	f7ff ffda 	bl	8002468 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b06      	ldr	r3, [pc, #24]	@ (80024d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0adb      	lsrs	r3, r3, #11
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4904      	ldr	r1, [pc, #16]	@ (80024d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40021000 	.word	0x40021000
 80024d4:	08004934 	.word	0x08004934

080024d8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024e4:	4b2a      	ldr	r3, [pc, #168]	@ (8002590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024f0:	f7ff f9ee 	bl	80018d0 <HAL_PWREx_GetVoltageRange>
 80024f4:	6178      	str	r0, [r7, #20]
 80024f6:	e014      	b.n	8002522 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024f8:	4b25      	ldr	r3, [pc, #148]	@ (8002590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024fc:	4a24      	ldr	r2, [pc, #144]	@ (8002590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002502:	6593      	str	r3, [r2, #88]	@ 0x58
 8002504:	4b22      	ldr	r3, [pc, #136]	@ (8002590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002508:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800250c:	60fb      	str	r3, [r7, #12]
 800250e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002510:	f7ff f9de 	bl	80018d0 <HAL_PWREx_GetVoltageRange>
 8002514:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002516:	4b1e      	ldr	r3, [pc, #120]	@ (8002590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800251a:	4a1d      	ldr	r2, [pc, #116]	@ (8002590 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800251c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002520:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002528:	d10b      	bne.n	8002542 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b80      	cmp	r3, #128	@ 0x80
 800252e:	d919      	bls.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2ba0      	cmp	r3, #160	@ 0xa0
 8002534:	d902      	bls.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002536:	2302      	movs	r3, #2
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	e013      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800253c:	2301      	movs	r3, #1
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	e010      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b80      	cmp	r3, #128	@ 0x80
 8002546:	d902      	bls.n	800254e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002548:	2303      	movs	r3, #3
 800254a:	613b      	str	r3, [r7, #16]
 800254c:	e00a      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2b80      	cmp	r3, #128	@ 0x80
 8002552:	d102      	bne.n	800255a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002554:	2302      	movs	r3, #2
 8002556:	613b      	str	r3, [r7, #16]
 8002558:	e004      	b.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b70      	cmp	r3, #112	@ 0x70
 800255e:	d101      	bne.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002560:	2301      	movs	r3, #1
 8002562:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f023 0207 	bic.w	r2, r3, #7
 800256c:	4909      	ldr	r1, [pc, #36]	@ (8002594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002574:	4b07      	ldr	r3, [pc, #28]	@ (8002594 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	693a      	ldr	r2, [r7, #16]
 800257e:	429a      	cmp	r2, r3
 8002580:	d001      	beq.n	8002586 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002586:	2300      	movs	r3, #0
}
 8002588:	4618      	mov	r0, r3
 800258a:	3718      	adds	r7, #24
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40021000 	.word	0x40021000
 8002594:	40022000 	.word	0x40022000

08002598 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025a0:	2300      	movs	r3, #0
 80025a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025a4:	2300      	movs	r3, #0
 80025a6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d041      	beq.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80025b8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025bc:	d02a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025be:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80025c2:	d824      	bhi.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025c8:	d008      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80025ce:	d81e      	bhi.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025d8:	d010      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025da:	e018      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025dc:	4b86      	ldr	r3, [pc, #536]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	4a85      	ldr	r2, [pc, #532]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025e6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025e8:	e015      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	3304      	adds	r3, #4
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 fabb 	bl	8002b6c <RCCEx_PLLSAI1_Config>
 80025f6:	4603      	mov	r3, r0
 80025f8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025fa:	e00c      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3320      	adds	r3, #32
 8002600:	2100      	movs	r1, #0
 8002602:	4618      	mov	r0, r3
 8002604:	f000 fba6 	bl	8002d54 <RCCEx_PLLSAI2_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800260c:	e003      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	74fb      	strb	r3, [r7, #19]
      break;
 8002612:	e000      	b.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002614:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d10b      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800261c:	4b76      	ldr	r3, [pc, #472]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002622:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800262a:	4973      	ldr	r1, [pc, #460]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002632:	e001      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002634:	7cfb      	ldrb	r3, [r7, #19]
 8002636:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d041      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002648:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800264c:	d02a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800264e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002652:	d824      	bhi.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002654:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002658:	d008      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800265a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800265e:	d81e      	bhi.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002668:	d010      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800266a:	e018      	b.n	800269e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800266c:	4b62      	ldr	r3, [pc, #392]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a61      	ldr	r2, [pc, #388]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002672:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002676:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002678:	e015      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	3304      	adds	r3, #4
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fa73 	bl	8002b6c <RCCEx_PLLSAI1_Config>
 8002686:	4603      	mov	r3, r0
 8002688:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800268a:	e00c      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3320      	adds	r3, #32
 8002690:	2100      	movs	r1, #0
 8002692:	4618      	mov	r0, r3
 8002694:	f000 fb5e 	bl	8002d54 <RCCEx_PLLSAI2_Config>
 8002698:	4603      	mov	r3, r0
 800269a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800269c:	e003      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	74fb      	strb	r3, [r7, #19]
      break;
 80026a2:	e000      	b.n	80026a6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026a6:	7cfb      	ldrb	r3, [r7, #19]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026ac:	4b52      	ldr	r3, [pc, #328]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026ba:	494f      	ldr	r1, [pc, #316]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026c2:	e001      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f000 80a0 	beq.w	8002816 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d6:	2300      	movs	r3, #0
 80026d8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026da:	4b47      	ldr	r3, [pc, #284]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026ea:	2300      	movs	r3, #0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00d      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	4b41      	ldr	r3, [pc, #260]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	4a40      	ldr	r2, [pc, #256]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80026fc:	4b3e      	ldr	r3, [pc, #248]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002704:	60bb      	str	r3, [r7, #8]
 8002706:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002708:	2301      	movs	r3, #1
 800270a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800270c:	4b3b      	ldr	r3, [pc, #236]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a3a      	ldr	r2, [pc, #232]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002712:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002716:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002718:	f7fe fe02 	bl	8001320 <HAL_GetTick>
 800271c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800271e:	e009      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002720:	f7fe fdfe 	bl	8001320 <HAL_GetTick>
 8002724:	4602      	mov	r2, r0
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	2b02      	cmp	r3, #2
 800272c:	d902      	bls.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	74fb      	strb	r3, [r7, #19]
        break;
 8002732:	e005      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002734:	4b31      	ldr	r3, [pc, #196]	@ (80027fc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273c:	2b00      	cmp	r3, #0
 800273e:	d0ef      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002740:	7cfb      	ldrb	r3, [r7, #19]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d15c      	bne.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002746:	4b2c      	ldr	r3, [pc, #176]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800274c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002750:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d01f      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	429a      	cmp	r2, r3
 8002762:	d019      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002764:	4b24      	ldr	r3, [pc, #144]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800276a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800276e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002770:	4b21      	ldr	r3, [pc, #132]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002776:	4a20      	ldr	r2, [pc, #128]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002778:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800277c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002780:	4b1d      	ldr	r3, [pc, #116]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002786:	4a1c      	ldr	r2, [pc, #112]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800278c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002790:	4a19      	ldr	r2, [pc, #100]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fdbd 	bl	8001320 <HAL_GetTick>
 80027a6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a8:	e00b      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7fe fdb9 	bl	8001320 <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d902      	bls.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	74fb      	strb	r3, [r7, #19]
            break;
 80027c0:	e006      	b.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027c2:	4b0d      	ldr	r3, [pc, #52]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d0ec      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027d0:	7cfb      	ldrb	r3, [r7, #19]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10c      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027d6:	4b08      	ldr	r3, [pc, #32]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027e6:	4904      	ldr	r1, [pc, #16]	@ (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80027ee:	e009      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	74bb      	strb	r3, [r7, #18]
 80027f4:	e006      	b.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002800:	7cfb      	ldrb	r3, [r7, #19]
 8002802:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002804:	7c7b      	ldrb	r3, [r7, #17]
 8002806:	2b01      	cmp	r3, #1
 8002808:	d105      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800280a:	4b9e      	ldr	r3, [pc, #632]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800280e:	4a9d      	ldr	r2, [pc, #628]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002814:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002822:	4b98      	ldr	r3, [pc, #608]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002828:	f023 0203 	bic.w	r2, r3, #3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002830:	4994      	ldr	r1, [pc, #592]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002844:	4b8f      	ldr	r3, [pc, #572]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800284a:	f023 020c 	bic.w	r2, r3, #12
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002852:	498c      	ldr	r1, [pc, #560]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002866:	4b87      	ldr	r3, [pc, #540]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800286c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002874:	4983      	ldr	r1, [pc, #524]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002888:	4b7e      	ldr	r3, [pc, #504]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800288e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002896:	497b      	ldr	r1, [pc, #492]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0310 	and.w	r3, r3, #16
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028aa:	4b76      	ldr	r3, [pc, #472]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028b8:	4972      	ldr	r1, [pc, #456]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028cc:	4b6d      	ldr	r3, [pc, #436]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028da:	496a      	ldr	r1, [pc, #424]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ee:	4b65      	ldr	r3, [pc, #404]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028fc:	4961      	ldr	r1, [pc, #388]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002910:	4b5c      	ldr	r3, [pc, #368]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002916:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800291e:	4959      	ldr	r1, [pc, #356]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002932:	4b54      	ldr	r3, [pc, #336]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002938:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002940:	4950      	ldr	r1, [pc, #320]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00a      	beq.n	800296a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002954:	4b4b      	ldr	r3, [pc, #300]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002962:	4948      	ldr	r1, [pc, #288]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002972:	2b00      	cmp	r3, #0
 8002974:	d00a      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002976:	4b43      	ldr	r3, [pc, #268]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800297c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002984:	493f      	ldr	r1, [pc, #252]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002986:	4313      	orrs	r3, r2
 8002988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d028      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002998:	4b3a      	ldr	r3, [pc, #232]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800299e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029a6:	4937      	ldr	r1, [pc, #220]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80029b6:	d106      	bne.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b8:	4b32      	ldr	r3, [pc, #200]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a31      	ldr	r2, [pc, #196]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029c2:	60d3      	str	r3, [r2, #12]
 80029c4:	e011      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80029ce:	d10c      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	3304      	adds	r3, #4
 80029d4:	2101      	movs	r1, #1
 80029d6:	4618      	mov	r0, r3
 80029d8:	f000 f8c8 	bl	8002b6c <RCCEx_PLLSAI1_Config>
 80029dc:	4603      	mov	r3, r0
 80029de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029e0:	7cfb      	ldrb	r3, [r7, #19]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029e6:	7cfb      	ldrb	r3, [r7, #19]
 80029e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d028      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029f6:	4b23      	ldr	r3, [pc, #140]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a04:	491f      	ldr	r1, [pc, #124]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a10:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a14:	d106      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a16:	4b1b      	ldr	r3, [pc, #108]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a20:	60d3      	str	r3, [r2, #12]
 8002a22:	e011      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a28:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 f899 	bl	8002b6c <RCCEx_PLLSAI1_Config>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a3e:	7cfb      	ldrb	r3, [r7, #19]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a44:	7cfb      	ldrb	r3, [r7, #19]
 8002a46:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d02b      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a54:	4b0b      	ldr	r3, [pc, #44]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a62:	4908      	ldr	r1, [pc, #32]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a6e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a72:	d109      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a74:	4b03      	ldr	r3, [pc, #12]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a02      	ldr	r2, [pc, #8]	@ (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a7e:	60d3      	str	r3, [r2, #12]
 8002a80:	e014      	b.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a82:	bf00      	nop
 8002a84:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a8c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a90:	d10c      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	3304      	adds	r3, #4
 8002a96:	2101      	movs	r1, #1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f000 f867 	bl	8002b6c <RCCEx_PLLSAI1_Config>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002aa8:	7cfb      	ldrb	r3, [r7, #19]
 8002aaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d02f      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ac6:	4928      	ldr	r1, [pc, #160]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ad2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ad6:	d10d      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	3304      	adds	r3, #4
 8002adc:	2102      	movs	r1, #2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f844 	bl	8002b6c <RCCEx_PLLSAI1_Config>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d014      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002aee:	7cfb      	ldrb	r3, [r7, #19]
 8002af0:	74bb      	strb	r3, [r7, #18]
 8002af2:	e011      	b.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002af8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002afc:	d10c      	bne.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	3320      	adds	r3, #32
 8002b02:	2102      	movs	r1, #2
 8002b04:	4618      	mov	r0, r3
 8002b06:	f000 f925 	bl	8002d54 <RCCEx_PLLSAI2_Config>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b0e:	7cfb      	ldrb	r3, [r7, #19]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b14:	7cfb      	ldrb	r3, [r7, #19]
 8002b16:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b24:	4b10      	ldr	r3, [pc, #64]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b2a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b32:	490d      	ldr	r1, [pc, #52]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00b      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b46:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b56:	4904      	ldr	r1, [pc, #16]	@ (8002b68 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b5e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	40021000 	.word	0x40021000

08002b6c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b76:	2300      	movs	r3, #0
 8002b78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b7a:	4b75      	ldr	r3, [pc, #468]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d018      	beq.n	8002bb8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b86:	4b72      	ldr	r3, [pc, #456]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	f003 0203 	and.w	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d10d      	bne.n	8002bb2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
       ||
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d009      	beq.n	8002bb2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b9e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ba0:	68db      	ldr	r3, [r3, #12]
 8002ba2:	091b      	lsrs	r3, r3, #4
 8002ba4:	f003 0307 	and.w	r3, r3, #7
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
       ||
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d047      	beq.n	8002c42 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
 8002bb6:	e044      	b.n	8002c42 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b03      	cmp	r3, #3
 8002bbe:	d018      	beq.n	8002bf2 <RCCEx_PLLSAI1_Config+0x86>
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d825      	bhi.n	8002c10 <RCCEx_PLLSAI1_Config+0xa4>
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	d002      	beq.n	8002bce <RCCEx_PLLSAI1_Config+0x62>
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	d009      	beq.n	8002be0 <RCCEx_PLLSAI1_Config+0x74>
 8002bcc:	e020      	b.n	8002c10 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bce:	4b60      	ldr	r3, [pc, #384]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11d      	bne.n	8002c16 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bde:	e01a      	b.n	8002c16 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002be0:	4b5b      	ldr	r3, [pc, #364]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d116      	bne.n	8002c1a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bf0:	e013      	b.n	8002c1a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bf2:	4b57      	ldr	r3, [pc, #348]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10f      	bne.n	8002c1e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bfe:	4b54      	ldr	r3, [pc, #336]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d109      	bne.n	8002c1e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c0e:	e006      	b.n	8002c1e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	73fb      	strb	r3, [r7, #15]
      break;
 8002c14:	e004      	b.n	8002c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c16:	bf00      	nop
 8002c18:	e002      	b.n	8002c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c1a:	bf00      	nop
 8002c1c:	e000      	b.n	8002c20 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c1e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c20:	7bfb      	ldrb	r3, [r7, #15]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10d      	bne.n	8002c42 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c26:	4b4a      	ldr	r3, [pc, #296]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6819      	ldr	r1, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	430b      	orrs	r3, r1
 8002c3c:	4944      	ldr	r1, [pc, #272]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c42:	7bfb      	ldrb	r3, [r7, #15]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d17d      	bne.n	8002d44 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c48:	4b41      	ldr	r3, [pc, #260]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a40      	ldr	r2, [pc, #256]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002c52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c54:	f7fe fb64 	bl	8001320 <HAL_GetTick>
 8002c58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c5a:	e009      	b.n	8002c70 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c5c:	f7fe fb60 	bl	8001320 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d902      	bls.n	8002c70 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c6e:	e005      	b.n	8002c7c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c70:	4b37      	ldr	r3, [pc, #220]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ef      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d160      	bne.n	8002d44 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d111      	bne.n	8002cac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c88:	4b31      	ldr	r3, [pc, #196]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6892      	ldr	r2, [r2, #8]
 8002c98:	0211      	lsls	r1, r2, #8
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68d2      	ldr	r2, [r2, #12]
 8002c9e:	0912      	lsrs	r2, r2, #4
 8002ca0:	0452      	lsls	r2, r2, #17
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	492a      	ldr	r1, [pc, #168]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	610b      	str	r3, [r1, #16]
 8002caa:	e027      	b.n	8002cfc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d112      	bne.n	8002cd8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb2:	4b27      	ldr	r3, [pc, #156]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002cba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002cbe:	687a      	ldr	r2, [r7, #4]
 8002cc0:	6892      	ldr	r2, [r2, #8]
 8002cc2:	0211      	lsls	r1, r2, #8
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6912      	ldr	r2, [r2, #16]
 8002cc8:	0852      	lsrs	r2, r2, #1
 8002cca:	3a01      	subs	r2, #1
 8002ccc:	0552      	lsls	r2, r2, #21
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	491f      	ldr	r1, [pc, #124]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	610b      	str	r3, [r1, #16]
 8002cd6:	e011      	b.n	8002cfc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002ce0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ce4:	687a      	ldr	r2, [r7, #4]
 8002ce6:	6892      	ldr	r2, [r2, #8]
 8002ce8:	0211      	lsls	r1, r2, #8
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6952      	ldr	r2, [r2, #20]
 8002cee:	0852      	lsrs	r2, r2, #1
 8002cf0:	3a01      	subs	r2, #1
 8002cf2:	0652      	lsls	r2, r2, #25
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	4916      	ldr	r1, [pc, #88]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002cfc:	4b14      	ldr	r3, [pc, #80]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a13      	ldr	r2, [pc, #76]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d02:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d08:	f7fe fb0a 	bl	8001320 <HAL_GetTick>
 8002d0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d0e:	e009      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d10:	f7fe fb06 	bl	8001320 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d902      	bls.n	8002d24 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	73fb      	strb	r3, [r7, #15]
          break;
 8002d22:	e005      	b.n	8002d30 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d24:	4b0a      	ldr	r3, [pc, #40]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0ef      	beq.n	8002d10 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d106      	bne.n	8002d44 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d36:	4b06      	ldr	r3, [pc, #24]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d38:	691a      	ldr	r2, [r3, #16]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	4904      	ldr	r1, [pc, #16]	@ (8002d50 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000

08002d54 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d5e:	2300      	movs	r3, #0
 8002d60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d62:	4b6a      	ldr	r3, [pc, #424]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d018      	beq.n	8002da0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d6e:	4b67      	ldr	r3, [pc, #412]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	f003 0203 	and.w	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d10d      	bne.n	8002d9a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
       ||
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d009      	beq.n	8002d9a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d86:	4b61      	ldr	r3, [pc, #388]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	1c5a      	adds	r2, r3, #1
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
       ||
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d047      	beq.n	8002e2a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	73fb      	strb	r3, [r7, #15]
 8002d9e:	e044      	b.n	8002e2a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d018      	beq.n	8002dda <RCCEx_PLLSAI2_Config+0x86>
 8002da8:	2b03      	cmp	r3, #3
 8002daa:	d825      	bhi.n	8002df8 <RCCEx_PLLSAI2_Config+0xa4>
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d002      	beq.n	8002db6 <RCCEx_PLLSAI2_Config+0x62>
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d009      	beq.n	8002dc8 <RCCEx_PLLSAI2_Config+0x74>
 8002db4:	e020      	b.n	8002df8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002db6:	4b55      	ldr	r3, [pc, #340]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d11d      	bne.n	8002dfe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc6:	e01a      	b.n	8002dfe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002dc8:	4b50      	ldr	r3, [pc, #320]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d116      	bne.n	8002e02 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dd8:	e013      	b.n	8002e02 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dda:	4b4c      	ldr	r3, [pc, #304]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d10f      	bne.n	8002e06 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002de6:	4b49      	ldr	r3, [pc, #292]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002df6:	e006      	b.n	8002e06 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfc:	e004      	b.n	8002e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dfe:	bf00      	nop
 8002e00:	e002      	b.n	8002e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e02:	bf00      	nop
 8002e04:	e000      	b.n	8002e08 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e06:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e08:	7bfb      	ldrb	r3, [r7, #15]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10d      	bne.n	8002e2a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e0e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	430b      	orrs	r3, r1
 8002e24:	4939      	ldr	r1, [pc, #228]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d167      	bne.n	8002f00 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e30:	4b36      	ldr	r3, [pc, #216]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a35      	ldr	r2, [pc, #212]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e3c:	f7fe fa70 	bl	8001320 <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e42:	e009      	b.n	8002e58 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e44:	f7fe fa6c 	bl	8001320 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d902      	bls.n	8002e58 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	73fb      	strb	r3, [r7, #15]
        break;
 8002e56:	e005      	b.n	8002e64 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e58:	4b2c      	ldr	r3, [pc, #176]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1ef      	bne.n	8002e44 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d14a      	bne.n	8002f00 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d111      	bne.n	8002e94 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e70:	4b26      	ldr	r3, [pc, #152]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e72:	695b      	ldr	r3, [r3, #20]
 8002e74:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002e78:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6892      	ldr	r2, [r2, #8]
 8002e80:	0211      	lsls	r1, r2, #8
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	68d2      	ldr	r2, [r2, #12]
 8002e86:	0912      	lsrs	r2, r2, #4
 8002e88:	0452      	lsls	r2, r2, #17
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	491f      	ldr	r1, [pc, #124]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	614b      	str	r3, [r1, #20]
 8002e92:	e011      	b.n	8002eb8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e94:	4b1d      	ldr	r3, [pc, #116]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e9c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6892      	ldr	r2, [r2, #8]
 8002ea4:	0211      	lsls	r1, r2, #8
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6912      	ldr	r2, [r2, #16]
 8002eaa:	0852      	lsrs	r2, r2, #1
 8002eac:	3a01      	subs	r2, #1
 8002eae:	0652      	lsls	r2, r2, #25
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	4916      	ldr	r1, [pc, #88]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002eb8:	4b14      	ldr	r3, [pc, #80]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a13      	ldr	r2, [pc, #76]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ec2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ec4:	f7fe fa2c 	bl	8001320 <HAL_GetTick>
 8002ec8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eca:	e009      	b.n	8002ee0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ecc:	f7fe fa28 	bl	8001320 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d902      	bls.n	8002ee0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	73fb      	strb	r3, [r7, #15]
          break;
 8002ede:	e005      	b.n	8002eec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ee0:	4b0a      	ldr	r3, [pc, #40]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d0ef      	beq.n	8002ecc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ef2:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef4:	695a      	ldr	r2, [r3, #20]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	695b      	ldr	r3, [r3, #20]
 8002efa:	4904      	ldr	r1, [pc, #16]	@ (8002f0c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40021000 	.word	0x40021000

08002f10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e049      	b.n	8002fb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fd ff80 	bl	8000e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f000 fae6 	bl	8003520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3708      	adds	r7, #8
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_TIM_PWM_Start+0x24>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	bf14      	ite	ne
 8002fdc:	2301      	movne	r3, #1
 8002fde:	2300      	moveq	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	e03c      	b.n	800305e <HAL_TIM_PWM_Start+0x9e>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	d109      	bne.n	8002ffe <HAL_TIM_PWM_Start+0x3e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	bf14      	ite	ne
 8002ff6:	2301      	movne	r3, #1
 8002ff8:	2300      	moveq	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	e02f      	b.n	800305e <HAL_TIM_PWM_Start+0x9e>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2b08      	cmp	r3, #8
 8003002:	d109      	bne.n	8003018 <HAL_TIM_PWM_Start+0x58>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	bf14      	ite	ne
 8003010:	2301      	movne	r3, #1
 8003012:	2300      	moveq	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e022      	b.n	800305e <HAL_TIM_PWM_Start+0x9e>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	2b0c      	cmp	r3, #12
 800301c:	d109      	bne.n	8003032 <HAL_TIM_PWM_Start+0x72>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003024:	b2db      	uxtb	r3, r3
 8003026:	2b01      	cmp	r3, #1
 8003028:	bf14      	ite	ne
 800302a:	2301      	movne	r3, #1
 800302c:	2300      	moveq	r3, #0
 800302e:	b2db      	uxtb	r3, r3
 8003030:	e015      	b.n	800305e <HAL_TIM_PWM_Start+0x9e>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b10      	cmp	r3, #16
 8003036:	d109      	bne.n	800304c <HAL_TIM_PWM_Start+0x8c>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b01      	cmp	r3, #1
 8003042:	bf14      	ite	ne
 8003044:	2301      	movne	r3, #1
 8003046:	2300      	moveq	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e008      	b.n	800305e <HAL_TIM_PWM_Start+0x9e>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e09c      	b.n	80031a0 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d104      	bne.n	8003076 <HAL_TIM_PWM_Start+0xb6>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2202      	movs	r2, #2
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003074:	e023      	b.n	80030be <HAL_TIM_PWM_Start+0xfe>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2b04      	cmp	r3, #4
 800307a:	d104      	bne.n	8003086 <HAL_TIM_PWM_Start+0xc6>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003084:	e01b      	b.n	80030be <HAL_TIM_PWM_Start+0xfe>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d104      	bne.n	8003096 <HAL_TIM_PWM_Start+0xd6>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2202      	movs	r2, #2
 8003090:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003094:	e013      	b.n	80030be <HAL_TIM_PWM_Start+0xfe>
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	2b0c      	cmp	r3, #12
 800309a:	d104      	bne.n	80030a6 <HAL_TIM_PWM_Start+0xe6>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2202      	movs	r2, #2
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030a4:	e00b      	b.n	80030be <HAL_TIM_PWM_Start+0xfe>
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	2b10      	cmp	r3, #16
 80030aa:	d104      	bne.n	80030b6 <HAL_TIM_PWM_Start+0xf6>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030b4:	e003      	b.n	80030be <HAL_TIM_PWM_Start+0xfe>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2202      	movs	r2, #2
 80030ba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2201      	movs	r2, #1
 80030c4:	6839      	ldr	r1, [r7, #0]
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fda6 	bl	8003c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a35      	ldr	r2, [pc, #212]	@ (80031a8 <HAL_TIM_PWM_Start+0x1e8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d013      	beq.n	80030fe <HAL_TIM_PWM_Start+0x13e>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a34      	ldr	r2, [pc, #208]	@ (80031ac <HAL_TIM_PWM_Start+0x1ec>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d00e      	beq.n	80030fe <HAL_TIM_PWM_Start+0x13e>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a32      	ldr	r2, [pc, #200]	@ (80031b0 <HAL_TIM_PWM_Start+0x1f0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d009      	beq.n	80030fe <HAL_TIM_PWM_Start+0x13e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a31      	ldr	r2, [pc, #196]	@ (80031b4 <HAL_TIM_PWM_Start+0x1f4>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d004      	beq.n	80030fe <HAL_TIM_PWM_Start+0x13e>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a2f      	ldr	r2, [pc, #188]	@ (80031b8 <HAL_TIM_PWM_Start+0x1f8>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d101      	bne.n	8003102 <HAL_TIM_PWM_Start+0x142>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <HAL_TIM_PWM_Start+0x144>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d007      	beq.n	8003118 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003116:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a22      	ldr	r2, [pc, #136]	@ (80031a8 <HAL_TIM_PWM_Start+0x1e8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d01d      	beq.n	800315e <HAL_TIM_PWM_Start+0x19e>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800312a:	d018      	beq.n	800315e <HAL_TIM_PWM_Start+0x19e>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a22      	ldr	r2, [pc, #136]	@ (80031bc <HAL_TIM_PWM_Start+0x1fc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d013      	beq.n	800315e <HAL_TIM_PWM_Start+0x19e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a21      	ldr	r2, [pc, #132]	@ (80031c0 <HAL_TIM_PWM_Start+0x200>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d00e      	beq.n	800315e <HAL_TIM_PWM_Start+0x19e>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1f      	ldr	r2, [pc, #124]	@ (80031c4 <HAL_TIM_PWM_Start+0x204>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d009      	beq.n	800315e <HAL_TIM_PWM_Start+0x19e>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a17      	ldr	r2, [pc, #92]	@ (80031ac <HAL_TIM_PWM_Start+0x1ec>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d004      	beq.n	800315e <HAL_TIM_PWM_Start+0x19e>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a15      	ldr	r2, [pc, #84]	@ (80031b0 <HAL_TIM_PWM_Start+0x1f0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d115      	bne.n	800318a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	4b18      	ldr	r3, [pc, #96]	@ (80031c8 <HAL_TIM_PWM_Start+0x208>)
 8003166:	4013      	ands	r3, r2
 8003168:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2b06      	cmp	r3, #6
 800316e:	d015      	beq.n	800319c <HAL_TIM_PWM_Start+0x1dc>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003176:	d011      	beq.n	800319c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003188:	e008      	b.n	800319c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f042 0201 	orr.w	r2, r2, #1
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	e000      	b.n	800319e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800319c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40012c00 	.word	0x40012c00
 80031ac:	40013400 	.word	0x40013400
 80031b0:	40014000 	.word	0x40014000
 80031b4:	40014400 	.word	0x40014400
 80031b8:	40014800 	.word	0x40014800
 80031bc:	40000400 	.word	0x40000400
 80031c0:	40000800 	.word	0x40000800
 80031c4:	40000c00 	.word	0x40000c00
 80031c8:	00010007 	.word	0x00010007

080031cc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2200      	movs	r2, #0
 80031dc:	6839      	ldr	r1, [r7, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fd1a 	bl	8003c18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a3e      	ldr	r2, [pc, #248]	@ (80032e4 <HAL_TIM_PWM_Stop+0x118>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d013      	beq.n	8003216 <HAL_TIM_PWM_Stop+0x4a>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a3d      	ldr	r2, [pc, #244]	@ (80032e8 <HAL_TIM_PWM_Stop+0x11c>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_TIM_PWM_Stop+0x4a>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a3b      	ldr	r2, [pc, #236]	@ (80032ec <HAL_TIM_PWM_Stop+0x120>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d009      	beq.n	8003216 <HAL_TIM_PWM_Stop+0x4a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a3a      	ldr	r2, [pc, #232]	@ (80032f0 <HAL_TIM_PWM_Stop+0x124>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d004      	beq.n	8003216 <HAL_TIM_PWM_Stop+0x4a>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a38      	ldr	r2, [pc, #224]	@ (80032f4 <HAL_TIM_PWM_Stop+0x128>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <HAL_TIM_PWM_Stop+0x4e>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <HAL_TIM_PWM_Stop+0x50>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d017      	beq.n	8003250 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6a1a      	ldr	r2, [r3, #32]
 8003226:	f241 1311 	movw	r3, #4369	@ 0x1111
 800322a:	4013      	ands	r3, r2
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10f      	bne.n	8003250 <HAL_TIM_PWM_Stop+0x84>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6a1a      	ldr	r2, [r3, #32]
 8003236:	f240 4344 	movw	r3, #1092	@ 0x444
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <HAL_TIM_PWM_Stop+0x84>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800324e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6a1a      	ldr	r2, [r3, #32]
 8003256:	f241 1311 	movw	r3, #4369	@ 0x1111
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10f      	bne.n	8003280 <HAL_TIM_PWM_Stop+0xb4>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6a1a      	ldr	r2, [r3, #32]
 8003266:	f240 4344 	movw	r3, #1092	@ 0x444
 800326a:	4013      	ands	r3, r2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d107      	bne.n	8003280 <HAL_TIM_PWM_Stop+0xb4>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0201 	bic.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d104      	bne.n	8003290 <HAL_TIM_PWM_Stop+0xc4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800328e:	e023      	b.n	80032d8 <HAL_TIM_PWM_Stop+0x10c>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b04      	cmp	r3, #4
 8003294:	d104      	bne.n	80032a0 <HAL_TIM_PWM_Stop+0xd4>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800329e:	e01b      	b.n	80032d8 <HAL_TIM_PWM_Stop+0x10c>
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d104      	bne.n	80032b0 <HAL_TIM_PWM_Stop+0xe4>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032ae:	e013      	b.n	80032d8 <HAL_TIM_PWM_Stop+0x10c>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b0c      	cmp	r3, #12
 80032b4:	d104      	bne.n	80032c0 <HAL_TIM_PWM_Stop+0xf4>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032be:	e00b      	b.n	80032d8 <HAL_TIM_PWM_Stop+0x10c>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d104      	bne.n	80032d0 <HAL_TIM_PWM_Stop+0x104>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2201      	movs	r2, #1
 80032ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032ce:	e003      	b.n	80032d8 <HAL_TIM_PWM_Stop+0x10c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40012c00 	.word	0x40012c00
 80032e8:	40013400 	.word	0x40013400
 80032ec:	40014000 	.word	0x40014000
 80032f0:	40014400 	.word	0x40014400
 80032f4:	40014800 	.word	0x40014800

080032f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b086      	sub	sp, #24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003304:	2300      	movs	r3, #0
 8003306:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003312:	2302      	movs	r3, #2
 8003314:	e0ff      	b.n	8003516 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b14      	cmp	r3, #20
 8003322:	f200 80f0 	bhi.w	8003506 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003326:	a201      	add	r2, pc, #4	@ (adr r2, 800332c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800332c:	08003381 	.word	0x08003381
 8003330:	08003507 	.word	0x08003507
 8003334:	08003507 	.word	0x08003507
 8003338:	08003507 	.word	0x08003507
 800333c:	080033c1 	.word	0x080033c1
 8003340:	08003507 	.word	0x08003507
 8003344:	08003507 	.word	0x08003507
 8003348:	08003507 	.word	0x08003507
 800334c:	08003403 	.word	0x08003403
 8003350:	08003507 	.word	0x08003507
 8003354:	08003507 	.word	0x08003507
 8003358:	08003507 	.word	0x08003507
 800335c:	08003443 	.word	0x08003443
 8003360:	08003507 	.word	0x08003507
 8003364:	08003507 	.word	0x08003507
 8003368:	08003507 	.word	0x08003507
 800336c:	08003485 	.word	0x08003485
 8003370:	08003507 	.word	0x08003507
 8003374:	08003507 	.word	0x08003507
 8003378:	08003507 	.word	0x08003507
 800337c:	080034c5 	.word	0x080034c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68b9      	ldr	r1, [r7, #8]
 8003386:	4618      	mov	r0, r3
 8003388:	f000 f970 	bl	800366c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f042 0208 	orr.w	r2, r2, #8
 800339a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0204 	bic.w	r2, r2, #4
 80033aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6999      	ldr	r1, [r3, #24]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	691a      	ldr	r2, [r3, #16]
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	619a      	str	r2, [r3, #24]
      break;
 80033be:	e0a5      	b.n	800350c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68b9      	ldr	r1, [r7, #8]
 80033c6:	4618      	mov	r0, r3
 80033c8:	f000 f9e0 	bl	800378c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699a      	ldr	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	699a      	ldr	r2, [r3, #24]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6999      	ldr	r1, [r3, #24]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	691b      	ldr	r3, [r3, #16]
 80033f6:	021a      	lsls	r2, r3, #8
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	619a      	str	r2, [r3, #24]
      break;
 8003400:	e084      	b.n	800350c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68b9      	ldr	r1, [r7, #8]
 8003408:	4618      	mov	r0, r3
 800340a:	f000 fa49 	bl	80038a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69da      	ldr	r2, [r3, #28]
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f042 0208 	orr.w	r2, r2, #8
 800341c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	69da      	ldr	r2, [r3, #28]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f022 0204 	bic.w	r2, r2, #4
 800342c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	69d9      	ldr	r1, [r3, #28]
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	691a      	ldr	r2, [r3, #16]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	61da      	str	r2, [r3, #28]
      break;
 8003440:	e064      	b.n	800350c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68b9      	ldr	r1, [r7, #8]
 8003448:	4618      	mov	r0, r3
 800344a:	f000 fab1 	bl	80039b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	69da      	ldr	r2, [r3, #28]
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800345c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	69da      	ldr	r2, [r3, #28]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800346c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69d9      	ldr	r1, [r3, #28]
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	021a      	lsls	r2, r3, #8
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	61da      	str	r2, [r3, #28]
      break;
 8003482:	e043      	b.n	800350c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	68b9      	ldr	r1, [r7, #8]
 800348a:	4618      	mov	r0, r3
 800348c:	f000 fafa 	bl	8003a84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f042 0208 	orr.w	r2, r2, #8
 800349e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f022 0204 	bic.w	r2, r2, #4
 80034ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80034c2:	e023      	b.n	800350c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68b9      	ldr	r1, [r7, #8]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f000 fb3e 	bl	8003b4c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	021a      	lsls	r2, r3, #8
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003504:	e002      	b.n	800350c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	75fb      	strb	r3, [r7, #23]
      break;
 800350a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003514:	7dfb      	ldrb	r3, [r7, #23]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop

08003520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a46      	ldr	r2, [pc, #280]	@ (800364c <TIM_Base_SetConfig+0x12c>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d013      	beq.n	8003560 <TIM_Base_SetConfig+0x40>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800353e:	d00f      	beq.n	8003560 <TIM_Base_SetConfig+0x40>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a43      	ldr	r2, [pc, #268]	@ (8003650 <TIM_Base_SetConfig+0x130>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00b      	beq.n	8003560 <TIM_Base_SetConfig+0x40>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a42      	ldr	r2, [pc, #264]	@ (8003654 <TIM_Base_SetConfig+0x134>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d007      	beq.n	8003560 <TIM_Base_SetConfig+0x40>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a41      	ldr	r2, [pc, #260]	@ (8003658 <TIM_Base_SetConfig+0x138>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d003      	beq.n	8003560 <TIM_Base_SetConfig+0x40>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a40      	ldr	r2, [pc, #256]	@ (800365c <TIM_Base_SetConfig+0x13c>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d108      	bne.n	8003572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a35      	ldr	r2, [pc, #212]	@ (800364c <TIM_Base_SetConfig+0x12c>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d01f      	beq.n	80035ba <TIM_Base_SetConfig+0x9a>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003580:	d01b      	beq.n	80035ba <TIM_Base_SetConfig+0x9a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a32      	ldr	r2, [pc, #200]	@ (8003650 <TIM_Base_SetConfig+0x130>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d017      	beq.n	80035ba <TIM_Base_SetConfig+0x9a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a31      	ldr	r2, [pc, #196]	@ (8003654 <TIM_Base_SetConfig+0x134>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <TIM_Base_SetConfig+0x9a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a30      	ldr	r2, [pc, #192]	@ (8003658 <TIM_Base_SetConfig+0x138>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d00f      	beq.n	80035ba <TIM_Base_SetConfig+0x9a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2f      	ldr	r2, [pc, #188]	@ (800365c <TIM_Base_SetConfig+0x13c>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00b      	beq.n	80035ba <TIM_Base_SetConfig+0x9a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003660 <TIM_Base_SetConfig+0x140>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d007      	beq.n	80035ba <TIM_Base_SetConfig+0x9a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003664 <TIM_Base_SetConfig+0x144>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d003      	beq.n	80035ba <TIM_Base_SetConfig+0x9a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003668 <TIM_Base_SetConfig+0x148>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d108      	bne.n	80035cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68fa      	ldr	r2, [r7, #12]
 80035de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a16      	ldr	r2, [pc, #88]	@ (800364c <TIM_Base_SetConfig+0x12c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d00f      	beq.n	8003618 <TIM_Base_SetConfig+0xf8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a18      	ldr	r2, [pc, #96]	@ (800365c <TIM_Base_SetConfig+0x13c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00b      	beq.n	8003618 <TIM_Base_SetConfig+0xf8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a17      	ldr	r2, [pc, #92]	@ (8003660 <TIM_Base_SetConfig+0x140>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d007      	beq.n	8003618 <TIM_Base_SetConfig+0xf8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a16      	ldr	r2, [pc, #88]	@ (8003664 <TIM_Base_SetConfig+0x144>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d003      	beq.n	8003618 <TIM_Base_SetConfig+0xf8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a15      	ldr	r2, [pc, #84]	@ (8003668 <TIM_Base_SetConfig+0x148>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d103      	bne.n	8003620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	2b01      	cmp	r3, #1
 8003630:	d105      	bne.n	800363e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	691b      	ldr	r3, [r3, #16]
 8003636:	f023 0201 	bic.w	r2, r3, #1
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	611a      	str	r2, [r3, #16]
  }
}
 800363e:	bf00      	nop
 8003640:	3714      	adds	r7, #20
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40012c00 	.word	0x40012c00
 8003650:	40000400 	.word	0x40000400
 8003654:	40000800 	.word	0x40000800
 8003658:	40000c00 	.word	0x40000c00
 800365c:	40013400 	.word	0x40013400
 8003660:	40014000 	.word	0x40014000
 8003664:	40014400 	.word	0x40014400
 8003668:	40014800 	.word	0x40014800

0800366c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f023 0201 	bic.w	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800369a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800369e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f023 0303 	bic.w	r3, r3, #3
 80036a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	f023 0302 	bic.w	r3, r3, #2
 80036b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a2c      	ldr	r2, [pc, #176]	@ (8003778 <TIM_OC1_SetConfig+0x10c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d00f      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a2b      	ldr	r2, [pc, #172]	@ (800377c <TIM_OC1_SetConfig+0x110>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d00b      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003780 <TIM_OC1_SetConfig+0x114>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d007      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	4a29      	ldr	r2, [pc, #164]	@ (8003784 <TIM_OC1_SetConfig+0x118>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d003      	beq.n	80036ec <TIM_OC1_SetConfig+0x80>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a28      	ldr	r2, [pc, #160]	@ (8003788 <TIM_OC1_SetConfig+0x11c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d10c      	bne.n	8003706 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	f023 0308 	bic.w	r3, r3, #8
 80036f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f023 0304 	bic.w	r3, r3, #4
 8003704:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	4a1b      	ldr	r2, [pc, #108]	@ (8003778 <TIM_OC1_SetConfig+0x10c>)
 800370a:	4293      	cmp	r3, r2
 800370c:	d00f      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a1a      	ldr	r2, [pc, #104]	@ (800377c <TIM_OC1_SetConfig+0x110>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00b      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a19      	ldr	r2, [pc, #100]	@ (8003780 <TIM_OC1_SetConfig+0x114>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d007      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a18      	ldr	r2, [pc, #96]	@ (8003784 <TIM_OC1_SetConfig+0x118>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_OC1_SetConfig+0xc2>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a17      	ldr	r2, [pc, #92]	@ (8003788 <TIM_OC1_SetConfig+0x11c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d111      	bne.n	8003752 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800373c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	693a      	ldr	r2, [r7, #16]
 8003744:	4313      	orrs	r3, r2
 8003746:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	699b      	ldr	r3, [r3, #24]
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685a      	ldr	r2, [r3, #4]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	697a      	ldr	r2, [r7, #20]
 800376a:	621a      	str	r2, [r3, #32]
}
 800376c:	bf00      	nop
 800376e:	371c      	adds	r7, #28
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40012c00 	.word	0x40012c00
 800377c:	40013400 	.word	0x40013400
 8003780:	40014000 	.word	0x40014000
 8003784:	40014400 	.word	0x40014400
 8003788:	40014800 	.word	0x40014800

0800378c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f023 0210 	bic.w	r2, r3, #16
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	021b      	lsls	r3, r3, #8
 80037ce:	68fa      	ldr	r2, [r7, #12]
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f023 0320 	bic.w	r3, r3, #32
 80037da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	697a      	ldr	r2, [r7, #20]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a28      	ldr	r2, [pc, #160]	@ (800388c <TIM_OC2_SetConfig+0x100>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d003      	beq.n	80037f8 <TIM_OC2_SetConfig+0x6c>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a27      	ldr	r2, [pc, #156]	@ (8003890 <TIM_OC2_SetConfig+0x104>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d10d      	bne.n	8003814 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	4313      	orrs	r3, r2
 800380a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003812:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	4a1d      	ldr	r2, [pc, #116]	@ (800388c <TIM_OC2_SetConfig+0x100>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d00f      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	4a1c      	ldr	r2, [pc, #112]	@ (8003890 <TIM_OC2_SetConfig+0x104>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d00b      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	4a1b      	ldr	r2, [pc, #108]	@ (8003894 <TIM_OC2_SetConfig+0x108>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d007      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	4a1a      	ldr	r2, [pc, #104]	@ (8003898 <TIM_OC2_SetConfig+0x10c>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d003      	beq.n	800383c <TIM_OC2_SetConfig+0xb0>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a19      	ldr	r2, [pc, #100]	@ (800389c <TIM_OC2_SetConfig+0x110>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d113      	bne.n	8003864 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003842:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800384a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	4313      	orrs	r3, r2
 8003856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685a      	ldr	r2, [r3, #4]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	621a      	str	r2, [r3, #32]
}
 800387e:	bf00      	nop
 8003880:	371c      	adds	r7, #28
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	40013400 	.word	0x40013400
 8003894:	40014000 	.word	0x40014000
 8003898:	40014400 	.word	0x40014400
 800389c:	40014800 	.word	0x40014800

080038a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b087      	sub	sp, #28
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a27      	ldr	r2, [pc, #156]	@ (800399c <TIM_OC3_SetConfig+0xfc>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_OC3_SetConfig+0x6a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a26      	ldr	r2, [pc, #152]	@ (80039a0 <TIM_OC3_SetConfig+0x100>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10d      	bne.n	8003926 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a1c      	ldr	r2, [pc, #112]	@ (800399c <TIM_OC3_SetConfig+0xfc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d00f      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a1b      	ldr	r2, [pc, #108]	@ (80039a0 <TIM_OC3_SetConfig+0x100>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00b      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a1a      	ldr	r2, [pc, #104]	@ (80039a4 <TIM_OC3_SetConfig+0x104>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d007      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a19      	ldr	r2, [pc, #100]	@ (80039a8 <TIM_OC3_SetConfig+0x108>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d003      	beq.n	800394e <TIM_OC3_SetConfig+0xae>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a18      	ldr	r2, [pc, #96]	@ (80039ac <TIM_OC3_SetConfig+0x10c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d113      	bne.n	8003976 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800395c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	621a      	str	r2, [r3, #32]
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40012c00 	.word	0x40012c00
 80039a0:	40013400 	.word	0x40013400
 80039a4:	40014000 	.word	0x40014000
 80039a8:	40014400 	.word	0x40014400
 80039ac:	40014800 	.word	0x40014800

080039b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	69db      	ldr	r3, [r3, #28]
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	021b      	lsls	r3, r3, #8
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	031b      	lsls	r3, r3, #12
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a18      	ldr	r2, [pc, #96]	@ (8003a70 <TIM_OC4_SetConfig+0xc0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d00f      	beq.n	8003a34 <TIM_OC4_SetConfig+0x84>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a17      	ldr	r2, [pc, #92]	@ (8003a74 <TIM_OC4_SetConfig+0xc4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00b      	beq.n	8003a34 <TIM_OC4_SetConfig+0x84>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a16      	ldr	r2, [pc, #88]	@ (8003a78 <TIM_OC4_SetConfig+0xc8>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d007      	beq.n	8003a34 <TIM_OC4_SetConfig+0x84>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a15      	ldr	r2, [pc, #84]	@ (8003a7c <TIM_OC4_SetConfig+0xcc>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d003      	beq.n	8003a34 <TIM_OC4_SetConfig+0x84>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a14      	ldr	r2, [pc, #80]	@ (8003a80 <TIM_OC4_SetConfig+0xd0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d109      	bne.n	8003a48 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003a3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	019b      	lsls	r3, r3, #6
 8003a42:	697a      	ldr	r2, [r7, #20]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	621a      	str	r2, [r3, #32]
}
 8003a62:	bf00      	nop
 8003a64:	371c      	adds	r7, #28
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40012c00 	.word	0x40012c00
 8003a74:	40013400 	.word	0x40013400
 8003a78:	40014000 	.word	0x40014000
 8003a7c:	40014400 	.word	0x40014400
 8003a80:	40014800 	.word	0x40014800

08003a84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	041b      	lsls	r3, r3, #16
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a17      	ldr	r2, [pc, #92]	@ (8003b38 <TIM_OC5_SetConfig+0xb4>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00f      	beq.n	8003afe <TIM_OC5_SetConfig+0x7a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a16      	ldr	r2, [pc, #88]	@ (8003b3c <TIM_OC5_SetConfig+0xb8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_OC5_SetConfig+0x7a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a15      	ldr	r2, [pc, #84]	@ (8003b40 <TIM_OC5_SetConfig+0xbc>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_OC5_SetConfig+0x7a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a14      	ldr	r2, [pc, #80]	@ (8003b44 <TIM_OC5_SetConfig+0xc0>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_OC5_SetConfig+0x7a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a13      	ldr	r2, [pc, #76]	@ (8003b48 <TIM_OC5_SetConfig+0xc4>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d109      	bne.n	8003b12 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	021b      	lsls	r3, r3, #8
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	621a      	str	r2, [r3, #32]
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	40012c00 	.word	0x40012c00
 8003b3c:	40013400 	.word	0x40013400
 8003b40:	40014000 	.word	0x40014000
 8003b44:	40014400 	.word	0x40014400
 8003b48:	40014800 	.word	0x40014800

08003b4c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b087      	sub	sp, #28
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b7a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	051b      	lsls	r3, r3, #20
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a18      	ldr	r2, [pc, #96]	@ (8003c04 <TIM_OC6_SetConfig+0xb8>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00f      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x7c>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a17      	ldr	r2, [pc, #92]	@ (8003c08 <TIM_OC6_SetConfig+0xbc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d00b      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x7c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a16      	ldr	r2, [pc, #88]	@ (8003c0c <TIM_OC6_SetConfig+0xc0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d007      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x7c>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a15      	ldr	r2, [pc, #84]	@ (8003c10 <TIM_OC6_SetConfig+0xc4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_OC6_SetConfig+0x7c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a14      	ldr	r2, [pc, #80]	@ (8003c14 <TIM_OC6_SetConfig+0xc8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d109      	bne.n	8003bdc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003bce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	029b      	lsls	r3, r3, #10
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	685a      	ldr	r2, [r3, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	693a      	ldr	r2, [r7, #16]
 8003bf4:	621a      	str	r2, [r3, #32]
}
 8003bf6:	bf00      	nop
 8003bf8:	371c      	adds	r7, #28
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	40012c00 	.word	0x40012c00
 8003c08:	40013400 	.word	0x40013400
 8003c0c:	40014000 	.word	0x40014000
 8003c10:	40014400 	.word	0x40014400
 8003c14:	40014800 	.word	0x40014800

08003c18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 031f 	and.w	r3, r3, #31
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a1a      	ldr	r2, [r3, #32]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	43db      	mvns	r3, r3
 8003c3a:	401a      	ands	r2, r3
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6a1a      	ldr	r2, [r3, #32]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	f003 031f 	and.w	r3, r3, #31
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c50:	431a      	orrs	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	621a      	str	r2, [r3, #32]
}
 8003c56:	bf00      	nop
 8003c58:	371c      	adds	r7, #28
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr
	...

08003c64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d101      	bne.n	8003c7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e068      	b.n	8003d4e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2202      	movs	r2, #2
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d004      	beq.n	8003cb0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2d      	ldr	r2, [pc, #180]	@ (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d108      	bne.n	8003cc2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003cb6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cc8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8003d5c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01d      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cee:	d018      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8003d64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8003d68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00e      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a18      	ldr	r2, [pc, #96]	@ (8003d6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d009      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4a13      	ldr	r2, [pc, #76]	@ (8003d60 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d004      	beq.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a14      	ldr	r2, [pc, #80]	@ (8003d70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d10c      	bne.n	8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d4c:	2300      	movs	r3, #0
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3714      	adds	r7, #20
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40012c00 	.word	0x40012c00
 8003d60:	40013400 	.word	0x40013400
 8003d64:	40000400 	.word	0x40000400
 8003d68:	40000800 	.word	0x40000800
 8003d6c:	40000c00 	.word	0x40000c00
 8003d70:	40014000 	.word	0x40014000

08003d74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d101      	bne.n	8003d90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003d8c:	2302      	movs	r3, #2
 8003d8e:	e065      	b.n	8003e5c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2201      	movs	r2, #1
 8003d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df6:	4313      	orrs	r3, r2
 8003df8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	4313      	orrs	r3, r2
 8003e08:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a16      	ldr	r2, [pc, #88]	@ (8003e68 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d004      	beq.n	8003e1e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a14      	ldr	r2, [pc, #80]	@ (8003e6c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d115      	bne.n	8003e4a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e28:	051b      	lsls	r3, r3, #20
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr
 8003e68:	40012c00 	.word	0x40012c00
 8003e6c:	40013400 	.word	0x40013400

08003e70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e040      	b.n	8003f04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd f90c 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2224      	movs	r2, #36	@ 0x24
 8003e9c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f022 0201 	bic.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 fae0 	bl	800447c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f825 	bl	8003f0c <UART_SetConfig>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d101      	bne.n	8003ecc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e01b      	b.n	8003f04 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003eea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	f000 fb5f 	bl	80045c0 <UART_CheckIdleState>
 8003f02:	4603      	mov	r3, r0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3708      	adds	r7, #8
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f10:	b08a      	sub	sp, #40	@ 0x28
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	69db      	ldr	r3, [r3, #28]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	4ba4      	ldr	r3, [pc, #656]	@ (80041cc <UART_SetConfig+0x2c0>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	68da      	ldr	r2, [r3, #12]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a99      	ldr	r2, [pc, #612]	@ (80041d0 <UART_SetConfig+0x2c4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d004      	beq.n	8003f78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f74:	4313      	orrs	r3, r2
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a90      	ldr	r2, [pc, #576]	@ (80041d4 <UART_SetConfig+0x2c8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d126      	bne.n	8003fe4 <UART_SetConfig+0xd8>
 8003f96:	4b90      	ldr	r3, [pc, #576]	@ (80041d8 <UART_SetConfig+0x2cc>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d81b      	bhi.n	8003fdc <UART_SetConfig+0xd0>
 8003fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8003fac <UART_SetConfig+0xa0>)
 8003fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003faa:	bf00      	nop
 8003fac:	08003fbd 	.word	0x08003fbd
 8003fb0:	08003fcd 	.word	0x08003fcd
 8003fb4:	08003fc5 	.word	0x08003fc5
 8003fb8:	08003fd5 	.word	0x08003fd5
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fc2:	e116      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fca:	e112      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fd2:	e10e      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8003fd4:	2308      	movs	r3, #8
 8003fd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fda:	e10a      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8003fdc:	2310      	movs	r3, #16
 8003fde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003fe2:	e106      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a7c      	ldr	r2, [pc, #496]	@ (80041dc <UART_SetConfig+0x2d0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d138      	bne.n	8004060 <UART_SetConfig+0x154>
 8003fee:	4b7a      	ldr	r3, [pc, #488]	@ (80041d8 <UART_SetConfig+0x2cc>)
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ff4:	f003 030c 	and.w	r3, r3, #12
 8003ff8:	2b0c      	cmp	r3, #12
 8003ffa:	d82d      	bhi.n	8004058 <UART_SetConfig+0x14c>
 8003ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <UART_SetConfig+0xf8>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004039 	.word	0x08004039
 8004008:	08004059 	.word	0x08004059
 800400c:	08004059 	.word	0x08004059
 8004010:	08004059 	.word	0x08004059
 8004014:	08004049 	.word	0x08004049
 8004018:	08004059 	.word	0x08004059
 800401c:	08004059 	.word	0x08004059
 8004020:	08004059 	.word	0x08004059
 8004024:	08004041 	.word	0x08004041
 8004028:	08004059 	.word	0x08004059
 800402c:	08004059 	.word	0x08004059
 8004030:	08004059 	.word	0x08004059
 8004034:	08004051 	.word	0x08004051
 8004038:	2300      	movs	r3, #0
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800403e:	e0d8      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8004040:	2302      	movs	r3, #2
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004046:	e0d4      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8004048:	2304      	movs	r3, #4
 800404a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800404e:	e0d0      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8004050:	2308      	movs	r3, #8
 8004052:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004056:	e0cc      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8004058:	2310      	movs	r3, #16
 800405a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800405e:	e0c8      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a5e      	ldr	r2, [pc, #376]	@ (80041e0 <UART_SetConfig+0x2d4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d125      	bne.n	80040b6 <UART_SetConfig+0x1aa>
 800406a:	4b5b      	ldr	r3, [pc, #364]	@ (80041d8 <UART_SetConfig+0x2cc>)
 800406c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004070:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004074:	2b30      	cmp	r3, #48	@ 0x30
 8004076:	d016      	beq.n	80040a6 <UART_SetConfig+0x19a>
 8004078:	2b30      	cmp	r3, #48	@ 0x30
 800407a:	d818      	bhi.n	80040ae <UART_SetConfig+0x1a2>
 800407c:	2b20      	cmp	r3, #32
 800407e:	d00a      	beq.n	8004096 <UART_SetConfig+0x18a>
 8004080:	2b20      	cmp	r3, #32
 8004082:	d814      	bhi.n	80040ae <UART_SetConfig+0x1a2>
 8004084:	2b00      	cmp	r3, #0
 8004086:	d002      	beq.n	800408e <UART_SetConfig+0x182>
 8004088:	2b10      	cmp	r3, #16
 800408a:	d008      	beq.n	800409e <UART_SetConfig+0x192>
 800408c:	e00f      	b.n	80040ae <UART_SetConfig+0x1a2>
 800408e:	2300      	movs	r3, #0
 8004090:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004094:	e0ad      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8004096:	2302      	movs	r3, #2
 8004098:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800409c:	e0a9      	b.n	80041f2 <UART_SetConfig+0x2e6>
 800409e:	2304      	movs	r3, #4
 80040a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040a4:	e0a5      	b.n	80041f2 <UART_SetConfig+0x2e6>
 80040a6:	2308      	movs	r3, #8
 80040a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ac:	e0a1      	b.n	80041f2 <UART_SetConfig+0x2e6>
 80040ae:	2310      	movs	r3, #16
 80040b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040b4:	e09d      	b.n	80041f2 <UART_SetConfig+0x2e6>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a4a      	ldr	r2, [pc, #296]	@ (80041e4 <UART_SetConfig+0x2d8>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d125      	bne.n	800410c <UART_SetConfig+0x200>
 80040c0:	4b45      	ldr	r3, [pc, #276]	@ (80041d8 <UART_SetConfig+0x2cc>)
 80040c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040c6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80040ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80040cc:	d016      	beq.n	80040fc <UART_SetConfig+0x1f0>
 80040ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80040d0:	d818      	bhi.n	8004104 <UART_SetConfig+0x1f8>
 80040d2:	2b80      	cmp	r3, #128	@ 0x80
 80040d4:	d00a      	beq.n	80040ec <UART_SetConfig+0x1e0>
 80040d6:	2b80      	cmp	r3, #128	@ 0x80
 80040d8:	d814      	bhi.n	8004104 <UART_SetConfig+0x1f8>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <UART_SetConfig+0x1d8>
 80040de:	2b40      	cmp	r3, #64	@ 0x40
 80040e0:	d008      	beq.n	80040f4 <UART_SetConfig+0x1e8>
 80040e2:	e00f      	b.n	8004104 <UART_SetConfig+0x1f8>
 80040e4:	2300      	movs	r3, #0
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040ea:	e082      	b.n	80041f2 <UART_SetConfig+0x2e6>
 80040ec:	2302      	movs	r3, #2
 80040ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040f2:	e07e      	b.n	80041f2 <UART_SetConfig+0x2e6>
 80040f4:	2304      	movs	r3, #4
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80040fa:	e07a      	b.n	80041f2 <UART_SetConfig+0x2e6>
 80040fc:	2308      	movs	r3, #8
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004102:	e076      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8004104:	2310      	movs	r3, #16
 8004106:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800410a:	e072      	b.n	80041f2 <UART_SetConfig+0x2e6>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a35      	ldr	r2, [pc, #212]	@ (80041e8 <UART_SetConfig+0x2dc>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d12a      	bne.n	800416c <UART_SetConfig+0x260>
 8004116:	4b30      	ldr	r3, [pc, #192]	@ (80041d8 <UART_SetConfig+0x2cc>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800411c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004120:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004124:	d01a      	beq.n	800415c <UART_SetConfig+0x250>
 8004126:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800412a:	d81b      	bhi.n	8004164 <UART_SetConfig+0x258>
 800412c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004130:	d00c      	beq.n	800414c <UART_SetConfig+0x240>
 8004132:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004136:	d815      	bhi.n	8004164 <UART_SetConfig+0x258>
 8004138:	2b00      	cmp	r3, #0
 800413a:	d003      	beq.n	8004144 <UART_SetConfig+0x238>
 800413c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004140:	d008      	beq.n	8004154 <UART_SetConfig+0x248>
 8004142:	e00f      	b.n	8004164 <UART_SetConfig+0x258>
 8004144:	2300      	movs	r3, #0
 8004146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800414a:	e052      	b.n	80041f2 <UART_SetConfig+0x2e6>
 800414c:	2302      	movs	r3, #2
 800414e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004152:	e04e      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8004154:	2304      	movs	r3, #4
 8004156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800415a:	e04a      	b.n	80041f2 <UART_SetConfig+0x2e6>
 800415c:	2308      	movs	r3, #8
 800415e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004162:	e046      	b.n	80041f2 <UART_SetConfig+0x2e6>
 8004164:	2310      	movs	r3, #16
 8004166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800416a:	e042      	b.n	80041f2 <UART_SetConfig+0x2e6>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a17      	ldr	r2, [pc, #92]	@ (80041d0 <UART_SetConfig+0x2c4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d13a      	bne.n	80041ec <UART_SetConfig+0x2e0>
 8004176:	4b18      	ldr	r3, [pc, #96]	@ (80041d8 <UART_SetConfig+0x2cc>)
 8004178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800417c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004180:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004184:	d01a      	beq.n	80041bc <UART_SetConfig+0x2b0>
 8004186:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800418a:	d81b      	bhi.n	80041c4 <UART_SetConfig+0x2b8>
 800418c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004190:	d00c      	beq.n	80041ac <UART_SetConfig+0x2a0>
 8004192:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004196:	d815      	bhi.n	80041c4 <UART_SetConfig+0x2b8>
 8004198:	2b00      	cmp	r3, #0
 800419a:	d003      	beq.n	80041a4 <UART_SetConfig+0x298>
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041a0:	d008      	beq.n	80041b4 <UART_SetConfig+0x2a8>
 80041a2:	e00f      	b.n	80041c4 <UART_SetConfig+0x2b8>
 80041a4:	2300      	movs	r3, #0
 80041a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041aa:	e022      	b.n	80041f2 <UART_SetConfig+0x2e6>
 80041ac:	2302      	movs	r3, #2
 80041ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041b2:	e01e      	b.n	80041f2 <UART_SetConfig+0x2e6>
 80041b4:	2304      	movs	r3, #4
 80041b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ba:	e01a      	b.n	80041f2 <UART_SetConfig+0x2e6>
 80041bc:	2308      	movs	r3, #8
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041c2:	e016      	b.n	80041f2 <UART_SetConfig+0x2e6>
 80041c4:	2310      	movs	r3, #16
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80041ca:	e012      	b.n	80041f2 <UART_SetConfig+0x2e6>
 80041cc:	efff69f3 	.word	0xefff69f3
 80041d0:	40008000 	.word	0x40008000
 80041d4:	40013800 	.word	0x40013800
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40004400 	.word	0x40004400
 80041e0:	40004800 	.word	0x40004800
 80041e4:	40004c00 	.word	0x40004c00
 80041e8:	40005000 	.word	0x40005000
 80041ec:	2310      	movs	r3, #16
 80041ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a9f      	ldr	r2, [pc, #636]	@ (8004474 <UART_SetConfig+0x568>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d17a      	bne.n	80042f2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004200:	2b08      	cmp	r3, #8
 8004202:	d824      	bhi.n	800424e <UART_SetConfig+0x342>
 8004204:	a201      	add	r2, pc, #4	@ (adr r2, 800420c <UART_SetConfig+0x300>)
 8004206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420a:	bf00      	nop
 800420c:	08004231 	.word	0x08004231
 8004210:	0800424f 	.word	0x0800424f
 8004214:	08004239 	.word	0x08004239
 8004218:	0800424f 	.word	0x0800424f
 800421c:	0800423f 	.word	0x0800423f
 8004220:	0800424f 	.word	0x0800424f
 8004224:	0800424f 	.word	0x0800424f
 8004228:	0800424f 	.word	0x0800424f
 800422c:	08004247 	.word	0x08004247
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004230:	f7fe f926 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8004234:	61f8      	str	r0, [r7, #28]
        break;
 8004236:	e010      	b.n	800425a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004238:	4b8f      	ldr	r3, [pc, #572]	@ (8004478 <UART_SetConfig+0x56c>)
 800423a:	61fb      	str	r3, [r7, #28]
        break;
 800423c:	e00d      	b.n	800425a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800423e:	f7fe f887 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8004242:	61f8      	str	r0, [r7, #28]
        break;
 8004244:	e009      	b.n	800425a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004246:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800424a:	61fb      	str	r3, [r7, #28]
        break;
 800424c:	e005      	b.n	800425a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004258:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 80fb 	beq.w	8004458 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	4413      	add	r3, r2
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	429a      	cmp	r2, r3
 8004270:	d305      	bcc.n	800427e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004278:	69fa      	ldr	r2, [r7, #28]
 800427a:	429a      	cmp	r2, r3
 800427c:	d903      	bls.n	8004286 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004284:	e0e8      	b.n	8004458 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2200      	movs	r2, #0
 800428a:	461c      	mov	r4, r3
 800428c:	4615      	mov	r5, r2
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	022b      	lsls	r3, r5, #8
 8004298:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800429c:	0222      	lsls	r2, r4, #8
 800429e:	68f9      	ldr	r1, [r7, #12]
 80042a0:	6849      	ldr	r1, [r1, #4]
 80042a2:	0849      	lsrs	r1, r1, #1
 80042a4:	2000      	movs	r0, #0
 80042a6:	4688      	mov	r8, r1
 80042a8:	4681      	mov	r9, r0
 80042aa:	eb12 0a08 	adds.w	sl, r2, r8
 80042ae:	eb43 0b09 	adc.w	fp, r3, r9
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	603b      	str	r3, [r7, #0]
 80042ba:	607a      	str	r2, [r7, #4]
 80042bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042c0:	4650      	mov	r0, sl
 80042c2:	4659      	mov	r1, fp
 80042c4:	f7fb ff80 	bl	80001c8 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4613      	mov	r3, r2
 80042ce:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042d6:	d308      	bcc.n	80042ea <UART_SetConfig+0x3de>
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042de:	d204      	bcs.n	80042ea <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	69ba      	ldr	r2, [r7, #24]
 80042e6:	60da      	str	r2, [r3, #12]
 80042e8:	e0b6      	b.n	8004458 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80042f0:	e0b2      	b.n	8004458 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042fa:	d15e      	bne.n	80043ba <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80042fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004300:	2b08      	cmp	r3, #8
 8004302:	d828      	bhi.n	8004356 <UART_SetConfig+0x44a>
 8004304:	a201      	add	r2, pc, #4	@ (adr r2, 800430c <UART_SetConfig+0x400>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	08004331 	.word	0x08004331
 8004310:	08004339 	.word	0x08004339
 8004314:	08004341 	.word	0x08004341
 8004318:	08004357 	.word	0x08004357
 800431c:	08004347 	.word	0x08004347
 8004320:	08004357 	.word	0x08004357
 8004324:	08004357 	.word	0x08004357
 8004328:	08004357 	.word	0x08004357
 800432c:	0800434f 	.word	0x0800434f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004330:	f7fe f8a6 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 8004334:	61f8      	str	r0, [r7, #28]
        break;
 8004336:	e014      	b.n	8004362 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004338:	f7fe f8b8 	bl	80024ac <HAL_RCC_GetPCLK2Freq>
 800433c:	61f8      	str	r0, [r7, #28]
        break;
 800433e:	e010      	b.n	8004362 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004340:	4b4d      	ldr	r3, [pc, #308]	@ (8004478 <UART_SetConfig+0x56c>)
 8004342:	61fb      	str	r3, [r7, #28]
        break;
 8004344:	e00d      	b.n	8004362 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004346:	f7fe f803 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 800434a:	61f8      	str	r0, [r7, #28]
        break;
 800434c:	e009      	b.n	8004362 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800434e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004352:	61fb      	str	r3, [r7, #28]
        break;
 8004354:	e005      	b.n	8004362 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004360:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d077      	beq.n	8004458 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	005a      	lsls	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	085b      	lsrs	r3, r3, #1
 8004372:	441a      	add	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	fbb2 f3f3 	udiv	r3, r2, r3
 800437c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	2b0f      	cmp	r3, #15
 8004382:	d916      	bls.n	80043b2 <UART_SetConfig+0x4a6>
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800438a:	d212      	bcs.n	80043b2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	b29b      	uxth	r3, r3
 8004390:	f023 030f 	bic.w	r3, r3, #15
 8004394:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004396:	69bb      	ldr	r3, [r7, #24]
 8004398:	085b      	lsrs	r3, r3, #1
 800439a:	b29b      	uxth	r3, r3
 800439c:	f003 0307 	and.w	r3, r3, #7
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	8afb      	ldrh	r3, [r7, #22]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	8afa      	ldrh	r2, [r7, #22]
 80043ae:	60da      	str	r2, [r3, #12]
 80043b0:	e052      	b.n	8004458 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80043b8:	e04e      	b.n	8004458 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043ba:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80043be:	2b08      	cmp	r3, #8
 80043c0:	d827      	bhi.n	8004412 <UART_SetConfig+0x506>
 80043c2:	a201      	add	r2, pc, #4	@ (adr r2, 80043c8 <UART_SetConfig+0x4bc>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	080043ed 	.word	0x080043ed
 80043cc:	080043f5 	.word	0x080043f5
 80043d0:	080043fd 	.word	0x080043fd
 80043d4:	08004413 	.word	0x08004413
 80043d8:	08004403 	.word	0x08004403
 80043dc:	08004413 	.word	0x08004413
 80043e0:	08004413 	.word	0x08004413
 80043e4:	08004413 	.word	0x08004413
 80043e8:	0800440b 	.word	0x0800440b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043ec:	f7fe f848 	bl	8002480 <HAL_RCC_GetPCLK1Freq>
 80043f0:	61f8      	str	r0, [r7, #28]
        break;
 80043f2:	e014      	b.n	800441e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043f4:	f7fe f85a 	bl	80024ac <HAL_RCC_GetPCLK2Freq>
 80043f8:	61f8      	str	r0, [r7, #28]
        break;
 80043fa:	e010      	b.n	800441e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004478 <UART_SetConfig+0x56c>)
 80043fe:	61fb      	str	r3, [r7, #28]
        break;
 8004400:	e00d      	b.n	800441e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004402:	f7fd ffa5 	bl	8002350 <HAL_RCC_GetSysClockFreq>
 8004406:	61f8      	str	r0, [r7, #28]
        break;
 8004408:	e009      	b.n	800441e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800440a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800440e:	61fb      	str	r3, [r7, #28]
        break;
 8004410:	e005      	b.n	800441e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800441c:	bf00      	nop
    }

    if (pclk != 0U)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d019      	beq.n	8004458 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	085a      	lsrs	r2, r3, #1
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	441a      	add	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	2b0f      	cmp	r3, #15
 800443c:	d909      	bls.n	8004452 <UART_SetConfig+0x546>
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004444:	d205      	bcs.n	8004452 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60da      	str	r2, [r3, #12]
 8004450:	e002      	b.n	8004458 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004464:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004468:	4618      	mov	r0, r3
 800446a:	3728      	adds	r7, #40	@ 0x28
 800446c:	46bd      	mov	sp, r7
 800446e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004472:	bf00      	nop
 8004474:	40008000 	.word	0x40008000
 8004478:	00f42400 	.word	0x00f42400

0800447c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01a      	beq.n	8004592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800457a:	d10a      	bne.n	8004592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b098      	sub	sp, #96	@ 0x60
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045d0:	f7fc fea6 	bl	8001320 <HAL_GetTick>
 80045d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d12e      	bne.n	8004642 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ec:	2200      	movs	r2, #0
 80045ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f88c 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d021      	beq.n	8004642 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004612:	653b      	str	r3, [r7, #80]	@ 0x50
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800461c:	647b      	str	r3, [r7, #68]	@ 0x44
 800461e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800462a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e6      	bne.n	80045fe <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e062      	b.n	8004708 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b04      	cmp	r3, #4
 800464e:	d149      	bne.n	80046e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004658:	2200      	movs	r2, #0
 800465a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f856 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d03c      	beq.n	80046e4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	623b      	str	r3, [r7, #32]
   return(result);
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800467e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004688:	633b      	str	r3, [r7, #48]	@ 0x30
 800468a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800468e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e6      	bne.n	800466a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3308      	adds	r3, #8
 80046a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3308      	adds	r3, #8
 80046ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046bc:	61fa      	str	r2, [r7, #28]
 80046be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	69b9      	ldr	r1, [r7, #24]
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e011      	b.n	8004708 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3758      	adds	r7, #88	@ 0x58
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004720:	e04f      	b.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d04b      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fc fdf9 	bl	8001320 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <UART_WaitOnFlagUntilTimeout+0x30>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e04e      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d037      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b80      	cmp	r3, #128	@ 0x80
 8004756:	d034      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b40      	cmp	r3, #64	@ 0x40
 800475c:	d031      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b08      	cmp	r3, #8
 800476a:	d110      	bne.n	800478e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2208      	movs	r2, #8
 8004772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f838 	bl	80047ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2208      	movs	r2, #8
 800477e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e029      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800479c:	d111      	bne.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f81e 	bl	80047ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e00f      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4013      	ands	r3, r2
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	bf0c      	ite	eq
 80047d2:	2301      	moveq	r3, #1
 80047d4:	2300      	movne	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d0a0      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b095      	sub	sp, #84	@ 0x54
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004810:	643b      	str	r3, [r7, #64]	@ 0x40
 8004812:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e6      	bne.n	80047f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	61fb      	str	r3, [r7, #28]
   return(result);
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f023 0301 	bic.w	r3, r3, #1
 800483a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	3308      	adds	r3, #8
 8004842:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004844:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004846:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800484a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800484c:	e841 2300 	strex	r3, r2, [r1]
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	2b00      	cmp	r3, #0
 8004856:	d1e5      	bne.n	8004824 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800485c:	2b01      	cmp	r3, #1
 800485e:	d118      	bne.n	8004892 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	60bb      	str	r3, [r7, #8]
   return(result);
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f023 0310 	bic.w	r3, r3, #16
 8004874:	647b      	str	r3, [r7, #68]	@ 0x44
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	461a      	mov	r2, r3
 800487c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800487e:	61bb      	str	r3, [r7, #24]
 8004880:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6979      	ldr	r1, [r7, #20]
 8004884:	69ba      	ldr	r2, [r7, #24]
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	613b      	str	r3, [r7, #16]
   return(result);
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e6      	bne.n	8004860 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80048a6:	bf00      	nop
 80048a8:	3754      	adds	r7, #84	@ 0x54
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr

080048b2 <memset>:
 80048b2:	4402      	add	r2, r0
 80048b4:	4603      	mov	r3, r0
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d100      	bne.n	80048bc <memset+0xa>
 80048ba:	4770      	bx	lr
 80048bc:	f803 1b01 	strb.w	r1, [r3], #1
 80048c0:	e7f9      	b.n	80048b6 <memset+0x4>
	...

080048c4 <__libc_init_array>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	4d0d      	ldr	r5, [pc, #52]	@ (80048fc <__libc_init_array+0x38>)
 80048c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004900 <__libc_init_array+0x3c>)
 80048ca:	1b64      	subs	r4, r4, r5
 80048cc:	10a4      	asrs	r4, r4, #2
 80048ce:	2600      	movs	r6, #0
 80048d0:	42a6      	cmp	r6, r4
 80048d2:	d109      	bne.n	80048e8 <__libc_init_array+0x24>
 80048d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004904 <__libc_init_array+0x40>)
 80048d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004908 <__libc_init_array+0x44>)
 80048d8:	f000 f818 	bl	800490c <_init>
 80048dc:	1b64      	subs	r4, r4, r5
 80048de:	10a4      	asrs	r4, r4, #2
 80048e0:	2600      	movs	r6, #0
 80048e2:	42a6      	cmp	r6, r4
 80048e4:	d105      	bne.n	80048f2 <__libc_init_array+0x2e>
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80048ec:	4798      	blx	r3
 80048ee:	3601      	adds	r6, #1
 80048f0:	e7ee      	b.n	80048d0 <__libc_init_array+0xc>
 80048f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80048f6:	4798      	blx	r3
 80048f8:	3601      	adds	r6, #1
 80048fa:	e7f2      	b.n	80048e2 <__libc_init_array+0x1e>
 80048fc:	08004974 	.word	0x08004974
 8004900:	08004974 	.word	0x08004974
 8004904:	08004974 	.word	0x08004974
 8004908:	08004978 	.word	0x08004978

0800490c <_init>:
 800490c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800490e:	bf00      	nop
 8004910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004912:	bc08      	pop	{r3}
 8004914:	469e      	mov	lr, r3
 8004916:	4770      	bx	lr

08004918 <_fini>:
 8004918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800491a:	bf00      	nop
 800491c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800491e:	bc08      	pop	{r3}
 8004920:	469e      	mov	lr, r3
 8004922:	4770      	bx	lr

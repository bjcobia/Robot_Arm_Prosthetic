
Robot_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008614  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080087a4  080087a4  000097a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008940  08008940  0000a04c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008940  08008940  00009940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008948  08008948  0000a04c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008948  08008948  00009948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800894c  0800894c  0000994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08008950  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb0  2000004c  0800899c  0000a04c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bfc  0800899c  0000abfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a65d  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b7  00000000  00000000  000246d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00027c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f1  00000000  00000000  00029390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bed  00000000  00000000  0002a581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001927c  00000000  00000000  0002e16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcf7b  00000000  00000000  000473ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00144365  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000618c  00000000  00000000  001443a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0014a534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000004c 	.word	0x2000004c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800878c 	.word	0x0800878c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000050 	.word	0x20000050
 80001cc:	0800878c 	.word	0x0800878c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f001 fc9c 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f870 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fb1e 	bl	8000b48 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 faec 	bl	8000ae8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000510:	f000 f94c 	bl	80007ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8000514:	f000 f9a4 	bl	8000860 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000518:	f000 f8b8 	bl	800068c <MX_TIM1_Init>
  MX_TIM4_Init();
 800051c:	f000 f9fa 	bl	8000914 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000520:	f000 fa52 	bl	80009c8 <MX_TIM8_Init>
//  HAL_Delay(2000);
//
//  memset(message, 0, sizeof(message));
//  HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, 1);

  SignLetter('A');
 8000524:	2041      	movs	r0, #65	@ 0x41
 8000526:	f000 fc6f 	bl	8000e08 <SignLetter>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800052a:	f005 f9f3 	bl	8005914 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Index_Finger */
  Index_FingerHandle = osTimerNew(Index, osTimerOnce, NULL, &Index_Finger_attributes);
 800052e:	4b1c      	ldr	r3, [pc, #112]	@ (80005a0 <main+0xa4>)
 8000530:	2200      	movs	r2, #0
 8000532:	2100      	movs	r1, #0
 8000534:	481b      	ldr	r0, [pc, #108]	@ (80005a4 <main+0xa8>)
 8000536:	f005 faf9 	bl	8005b2c <osTimerNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a1a      	ldr	r2, [pc, #104]	@ (80005a8 <main+0xac>)
 800053e:	6013      	str	r3, [r2, #0]

  /* creation of Thumb_Finger */
  Thumb_FingerHandle = osTimerNew(Thumb, osTimerPeriodic, NULL, &Thumb_Finger_attributes);
 8000540:	4b1a      	ldr	r3, [pc, #104]	@ (80005ac <main+0xb0>)
 8000542:	2200      	movs	r2, #0
 8000544:	2101      	movs	r1, #1
 8000546:	481a      	ldr	r0, [pc, #104]	@ (80005b0 <main+0xb4>)
 8000548:	f005 faf0 	bl	8005b2c <osTimerNew>
 800054c:	4603      	mov	r3, r0
 800054e:	4a19      	ldr	r2, [pc, #100]	@ (80005b4 <main+0xb8>)
 8000550:	6013      	str	r3, [r2, #0]

  /* creation of Middle_Finger */
  Middle_FingerHandle = osTimerNew(Middle, osTimerPeriodic, NULL, &Middle_Finger_attributes);
 8000552:	4b19      	ldr	r3, [pc, #100]	@ (80005b8 <main+0xbc>)
 8000554:	2200      	movs	r2, #0
 8000556:	2101      	movs	r1, #1
 8000558:	4818      	ldr	r0, [pc, #96]	@ (80005bc <main+0xc0>)
 800055a:	f005 fae7 	bl	8005b2c <osTimerNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a17      	ldr	r2, [pc, #92]	@ (80005c0 <main+0xc4>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of Ring_Finger */
  Ring_FingerHandle = osTimerNew(Ring, osTimerPeriodic, NULL, &Ring_Finger_attributes);
 8000564:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <main+0xc8>)
 8000566:	2200      	movs	r2, #0
 8000568:	2101      	movs	r1, #1
 800056a:	4817      	ldr	r0, [pc, #92]	@ (80005c8 <main+0xcc>)
 800056c:	f005 fade 	bl	8005b2c <osTimerNew>
 8000570:	4603      	mov	r3, r0
 8000572:	4a16      	ldr	r2, [pc, #88]	@ (80005cc <main+0xd0>)
 8000574:	6013      	str	r3, [r2, #0]

  /* creation of Pinky_Finger */
  Pinky_FingerHandle = osTimerNew(Pinky, osTimerPeriodic, NULL, &Pinky_Finger_attributes);
 8000576:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <main+0xd4>)
 8000578:	2200      	movs	r2, #0
 800057a:	2101      	movs	r1, #1
 800057c:	4815      	ldr	r0, [pc, #84]	@ (80005d4 <main+0xd8>)
 800057e:	f005 fad5 	bl	8005b2c <osTimerNew>
 8000582:	4603      	mov	r3, r0
 8000584:	4a14      	ldr	r2, [pc, #80]	@ (80005d8 <main+0xdc>)
 8000586:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000588:	4a14      	ldr	r2, [pc, #80]	@ (80005dc <main+0xe0>)
 800058a:	2100      	movs	r1, #0
 800058c:	4814      	ldr	r0, [pc, #80]	@ (80005e0 <main+0xe4>)
 800058e:	f005 fa0b 	bl	80059a8 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a13      	ldr	r2, [pc, #76]	@ (80005e4 <main+0xe8>)
 8000596:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000598:	f005 f9e0 	bl	800595c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800059c:	bf00      	nop
 800059e:	e7fd      	b.n	800059c <main+0xa0>
 80005a0:	080088a8 	.word	0x080088a8
 80005a4:	08001865 	.word	0x08001865
 80005a8:	20000270 	.word	0x20000270
 80005ac:	080088b8 	.word	0x080088b8
 80005b0:	08001879 	.word	0x08001879
 80005b4:	20000274 	.word	0x20000274
 80005b8:	080088c8 	.word	0x080088c8
 80005bc:	0800188d 	.word	0x0800188d
 80005c0:	20000278 	.word	0x20000278
 80005c4:	080088d8 	.word	0x080088d8
 80005c8:	080018a1 	.word	0x080018a1
 80005cc:	2000027c 	.word	0x2000027c
 80005d0:	080088e8 	.word	0x080088e8
 80005d4:	080018b5 	.word	0x080018b5
 80005d8:	20000280 	.word	0x20000280
 80005dc:	08008884 	.word	0x08008884
 80005e0:	080017d9 	.word	0x080017d9
 80005e4:	2000026c 	.word	0x2000026c

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b096      	sub	sp, #88	@ 0x58
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	2244      	movs	r2, #68	@ 0x44
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f008 f88e 	bl	8008718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	463b      	mov	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800060a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800060e:	f001 ff07 	bl	8002420 <HAL_PWREx_ControlVoltageScaling>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000618:	f001 f968 	bl	80018ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000624:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000626:	2310      	movs	r3, #16
 8000628:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062e:	2302      	movs	r3, #2
 8000630:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000636:	230a      	movs	r3, #10
 8000638:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800063a:	2307      	movs	r3, #7
 800063c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4618      	mov	r0, r3
 800064c:	f001 ff3e 	bl	80024cc <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000656:	f001 f949 	bl	80018ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f002 fb06 	bl	8002c84 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800067e:	f001 f935 	bl	80018ec <Error_Handler>
  }
}
 8000682:	bf00      	nop
 8000684:	3758      	adds	r7, #88	@ 0x58
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b096      	sub	sp, #88	@ 0x58
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000692:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800069e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	222c      	movs	r2, #44	@ 0x2c
 80006b6:	2100      	movs	r1, #0
 80006b8:	4618      	mov	r0, r3
 80006ba:	f008 f82d 	bl	8008718 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006be:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <MX_TIM1_Init+0x118>)
 80006c0:	4a39      	ldr	r2, [pc, #228]	@ (80007a8 <MX_TIM1_Init+0x11c>)
 80006c2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80006c4:	4b37      	ldr	r3, [pc, #220]	@ (80007a4 <MX_TIM1_Init+0x118>)
 80006c6:	224f      	movs	r2, #79	@ 0x4f
 80006c8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ca:	4b36      	ldr	r3, [pc, #216]	@ (80007a4 <MX_TIM1_Init+0x118>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80006d0:	4b34      	ldr	r3, [pc, #208]	@ (80007a4 <MX_TIM1_Init+0x118>)
 80006d2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80006d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d8:	4b32      	ldr	r3, [pc, #200]	@ (80007a4 <MX_TIM1_Init+0x118>)
 80006da:	2200      	movs	r2, #0
 80006dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006de:	4b31      	ldr	r3, [pc, #196]	@ (80007a4 <MX_TIM1_Init+0x118>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e4:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <MX_TIM1_Init+0x118>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ea:	482e      	ldr	r0, [pc, #184]	@ (80007a4 <MX_TIM1_Init+0x118>)
 80006ec:	f003 faae 	bl	8003c4c <HAL_TIM_PWM_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006f6:	f001 f8f9 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006fe:	2300      	movs	r3, #0
 8000700:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000706:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800070a:	4619      	mov	r1, r3
 800070c:	4825      	ldr	r0, [pc, #148]	@ (80007a4 <MX_TIM1_Init+0x118>)
 800070e:	f004 fa77 	bl	8004c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000718:	f001 f8e8 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071c:	2360      	movs	r3, #96	@ 0x60
 800071e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000724:	2300      	movs	r3, #0
 8000726:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000728:	2300      	movs	r3, #0
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000730:	2300      	movs	r3, #0
 8000732:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000734:	2300      	movs	r3, #0
 8000736:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000738:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800073c:	2200      	movs	r2, #0
 800073e:	4619      	mov	r1, r3
 8000740:	4818      	ldr	r0, [pc, #96]	@ (80007a4 <MX_TIM1_Init+0x118>)
 8000742:	f003 fd7f 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800074c:	f001 f8ce 	bl	80018ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000754:	2300      	movs	r3, #0
 8000756:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000758:	2300      	movs	r3, #0
 800075a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800075c:	2300      	movs	r3, #0
 800075e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000768:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800076e:	2300      	movs	r3, #0
 8000770:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000772:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000776:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	4619      	mov	r1, r3
 8000784:	4807      	ldr	r0, [pc, #28]	@ (80007a4 <MX_TIM1_Init+0x118>)
 8000786:	f004 fac3 	bl	8004d10 <HAL_TIMEx_ConfigBreakDeadTime>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000790:	f001 f8ac 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000794:	4803      	ldr	r0, [pc, #12]	@ (80007a4 <MX_TIM1_Init+0x118>)
 8000796:	f001 f945 	bl	8001a24 <HAL_TIM_MspPostInit>

}
 800079a:	bf00      	nop
 800079c:	3758      	adds	r7, #88	@ 0x58
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	20000068 	.word	0x20000068
 80007a8:	40012c00 	.word	0x40012c00

080007ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007d0:	4b22      	ldr	r3, [pc, #136]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80007d8:	4b20      	ldr	r3, [pc, #128]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007da:	224f      	movs	r2, #79	@ 0x4f
 80007dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007de:	4b1f      	ldr	r3, [pc, #124]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80007e4:	4b1d      	ldr	r3, [pc, #116]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007e6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ec:	4b1b      	ldr	r3, [pc, #108]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b1a      	ldr	r3, [pc, #104]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007f8:	4818      	ldr	r0, [pc, #96]	@ (800085c <MX_TIM2_Init+0xb0>)
 80007fa:	f003 fa27 	bl	8003c4c <HAL_TIM_PWM_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000804:	f001 f872 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	4811      	ldr	r0, [pc, #68]	@ (800085c <MX_TIM2_Init+0xb0>)
 8000818:	f004 f9f2 	bl	8004c00 <HAL_TIMEx_MasterConfigSynchronization>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000822:	f001 f863 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000826:	2360      	movs	r3, #96	@ 0x60
 8000828:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082e:	2300      	movs	r3, #0
 8000830:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000836:	463b      	mov	r3, r7
 8000838:	2200      	movs	r2, #0
 800083a:	4619      	mov	r1, r3
 800083c:	4807      	ldr	r0, [pc, #28]	@ (800085c <MX_TIM2_Init+0xb0>)
 800083e:	f003 fd01 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000848:	f001 f850 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800084c:	4803      	ldr	r0, [pc, #12]	@ (800085c <MX_TIM2_Init+0xb0>)
 800084e:	f001 f8e9 	bl	8001a24 <HAL_TIM_MspPostInit>

}
 8000852:	bf00      	nop
 8000854:	3728      	adds	r7, #40	@ 0x28
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000b4 	.word	0x200000b4

08000860 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08a      	sub	sp, #40	@ 0x28
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000866:	f107 031c 	add.w	r3, r7, #28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000872:	463b      	mov	r3, r7
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
 8000878:	605a      	str	r2, [r3, #4]
 800087a:	609a      	str	r2, [r3, #8]
 800087c:	60da      	str	r2, [r3, #12]
 800087e:	611a      	str	r2, [r3, #16]
 8000880:	615a      	str	r2, [r3, #20]
 8000882:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000884:	4b21      	ldr	r3, [pc, #132]	@ (800090c <MX_TIM3_Init+0xac>)
 8000886:	4a22      	ldr	r2, [pc, #136]	@ (8000910 <MX_TIM3_Init+0xb0>)
 8000888:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800088a:	4b20      	ldr	r3, [pc, #128]	@ (800090c <MX_TIM3_Init+0xac>)
 800088c:	224f      	movs	r2, #79	@ 0x4f
 800088e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000890:	4b1e      	ldr	r3, [pc, #120]	@ (800090c <MX_TIM3_Init+0xac>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000896:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <MX_TIM3_Init+0xac>)
 8000898:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800089c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089e:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <MX_TIM3_Init+0xac>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a4:	4b19      	ldr	r3, [pc, #100]	@ (800090c <MX_TIM3_Init+0xac>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008aa:	4818      	ldr	r0, [pc, #96]	@ (800090c <MX_TIM3_Init+0xac>)
 80008ac:	f003 f9ce 	bl	8003c4c <HAL_TIM_PWM_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80008b6:	f001 f819 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4810      	ldr	r0, [pc, #64]	@ (800090c <MX_TIM3_Init+0xac>)
 80008ca:	f004 f999 	bl	8004c00 <HAL_TIMEx_MasterConfigSynchronization>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008d4:	f001 f80a 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d8:	2360      	movs	r3, #96	@ 0x60
 80008da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008dc:	2300      	movs	r3, #0
 80008de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e4:	2300      	movs	r3, #0
 80008e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	4619      	mov	r1, r3
 80008ee:	4807      	ldr	r0, [pc, #28]	@ (800090c <MX_TIM3_Init+0xac>)
 80008f0:	f003 fca8 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008fa:	f000 fff7 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008fe:	4803      	ldr	r0, [pc, #12]	@ (800090c <MX_TIM3_Init+0xac>)
 8000900:	f001 f890 	bl	8001a24 <HAL_TIM_MspPostInit>

}
 8000904:	bf00      	nop
 8000906:	3728      	adds	r7, #40	@ 0x28
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	20000100 	.word	0x20000100
 8000910:	40000400 	.word	0x40000400

08000914 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	@ 0x28
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
 800092c:	605a      	str	r2, [r3, #4]
 800092e:	609a      	str	r2, [r3, #8]
 8000930:	60da      	str	r2, [r3, #12]
 8000932:	611a      	str	r2, [r3, #16]
 8000934:	615a      	str	r2, [r3, #20]
 8000936:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000938:	4b21      	ldr	r3, [pc, #132]	@ (80009c0 <MX_TIM4_Init+0xac>)
 800093a:	4a22      	ldr	r2, [pc, #136]	@ (80009c4 <MX_TIM4_Init+0xb0>)
 800093c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 800093e:	4b20      	ldr	r3, [pc, #128]	@ (80009c0 <MX_TIM4_Init+0xac>)
 8000940:	224f      	movs	r2, #79	@ 0x4f
 8000942:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000944:	4b1e      	ldr	r3, [pc, #120]	@ (80009c0 <MX_TIM4_Init+0xac>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 800094a:	4b1d      	ldr	r3, [pc, #116]	@ (80009c0 <MX_TIM4_Init+0xac>)
 800094c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000950:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000952:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <MX_TIM4_Init+0xac>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000958:	4b19      	ldr	r3, [pc, #100]	@ (80009c0 <MX_TIM4_Init+0xac>)
 800095a:	2200      	movs	r2, #0
 800095c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800095e:	4818      	ldr	r0, [pc, #96]	@ (80009c0 <MX_TIM4_Init+0xac>)
 8000960:	f003 f974 	bl	8003c4c <HAL_TIM_PWM_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800096a:	f000 ffbf 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000972:	2300      	movs	r3, #0
 8000974:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	4619      	mov	r1, r3
 800097c:	4810      	ldr	r0, [pc, #64]	@ (80009c0 <MX_TIM4_Init+0xac>)
 800097e:	f004 f93f 	bl	8004c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000988:	f000 ffb0 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098c:	2360      	movs	r3, #96	@ 0x60
 800098e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000994:	2300      	movs	r3, #0
 8000996:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000998:	2300      	movs	r3, #0
 800099a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099c:	463b      	mov	r3, r7
 800099e:	2200      	movs	r2, #0
 80009a0:	4619      	mov	r1, r3
 80009a2:	4807      	ldr	r0, [pc, #28]	@ (80009c0 <MX_TIM4_Init+0xac>)
 80009a4:	f003 fc4e 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 80009a8:	4603      	mov	r3, r0
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80009ae:	f000 ff9d 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009b2:	4803      	ldr	r0, [pc, #12]	@ (80009c0 <MX_TIM4_Init+0xac>)
 80009b4:	f001 f836 	bl	8001a24 <HAL_TIM_MspPostInit>

}
 80009b8:	bf00      	nop
 80009ba:	3728      	adds	r7, #40	@ 0x28
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	2000014c 	.word	0x2000014c
 80009c4:	40000800 	.word	0x40000800

080009c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b096      	sub	sp, #88	@ 0x58
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ce:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009d2:	2200      	movs	r2, #0
 80009d4:	601a      	str	r2, [r3, #0]
 80009d6:	605a      	str	r2, [r3, #4]
 80009d8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]
 80009ea:	615a      	str	r2, [r3, #20]
 80009ec:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ee:	1d3b      	adds	r3, r7, #4
 80009f0:	222c      	movs	r2, #44	@ 0x2c
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f007 fe8f 	bl	8008718 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009fa:	4b39      	ldr	r3, [pc, #228]	@ (8000ae0 <MX_TIM8_Init+0x118>)
 80009fc:	4a39      	ldr	r2, [pc, #228]	@ (8000ae4 <MX_TIM8_Init+0x11c>)
 80009fe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8000a00:	4b37      	ldr	r3, [pc, #220]	@ (8000ae0 <MX_TIM8_Init+0x118>)
 8000a02:	224f      	movs	r2, #79	@ 0x4f
 8000a04:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b36      	ldr	r3, [pc, #216]	@ (8000ae0 <MX_TIM8_Init+0x118>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8000a0c:	4b34      	ldr	r3, [pc, #208]	@ (8000ae0 <MX_TIM8_Init+0x118>)
 8000a0e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a12:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a14:	4b32      	ldr	r3, [pc, #200]	@ (8000ae0 <MX_TIM8_Init+0x118>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ae0 <MX_TIM8_Init+0x118>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a20:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae0 <MX_TIM8_Init+0x118>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a26:	482e      	ldr	r0, [pc, #184]	@ (8000ae0 <MX_TIM8_Init+0x118>)
 8000a28:	f003 f910 	bl	8003c4c <HAL_TIM_PWM_Init>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000a32:	f000 ff5b 	bl	80018ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a42:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a46:	4619      	mov	r1, r3
 8000a48:	4825      	ldr	r0, [pc, #148]	@ (8000ae0 <MX_TIM8_Init+0x118>)
 8000a4a:	f004 f8d9 	bl	8004c00 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000a54:	f000 ff4a 	bl	80018ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a58:	2360      	movs	r3, #96	@ 0x60
 8000a5a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a64:	2300      	movs	r3, #0
 8000a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a70:	2300      	movs	r3, #0
 8000a72:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a74:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a78:	2200      	movs	r2, #0
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4818      	ldr	r0, [pc, #96]	@ (8000ae0 <MX_TIM8_Init+0x118>)
 8000a7e:	f003 fbe1 	bl	8004244 <HAL_TIM_PWM_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000a88:	f000 ff30 	bl	80018ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000abc:	1d3b      	adds	r3, r7, #4
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	@ (8000ae0 <MX_TIM8_Init+0x118>)
 8000ac2:	f004 f925 	bl	8004d10 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000acc:	f000 ff0e 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ad0:	4803      	ldr	r0, [pc, #12]	@ (8000ae0 <MX_TIM8_Init+0x118>)
 8000ad2:	f000 ffa7 	bl	8001a24 <HAL_TIM_MspPostInit>

}
 8000ad6:	bf00      	nop
 8000ad8:	3758      	adds	r7, #88	@ 0x58
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000198 	.word	0x20000198
 8000ae4:	40013400 	.word	0x40013400

08000ae8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aec:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <MX_USART2_UART_Init+0x58>)
 8000aee:	4a15      	ldr	r2, [pc, #84]	@ (8000b44 <MX_USART2_UART_Init+0x5c>)
 8000af0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af2:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <MX_USART2_UART_Init+0x58>)
 8000af4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_USART2_UART_Init+0x58>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <MX_USART2_UART_Init+0x58>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_USART2_UART_Init+0x58>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <MX_USART2_UART_Init+0x58>)
 8000b0e:	220c      	movs	r2, #12
 8000b10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	@ (8000b40 <MX_USART2_UART_Init+0x58>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b18:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_USART2_UART_Init+0x58>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <MX_USART2_UART_Init+0x58>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b24:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_USART2_UART_Init+0x58>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	@ (8000b40 <MX_USART2_UART_Init+0x58>)
 8000b2c:	f004 f98c 	bl	8004e48 <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b36:	f000 fed9 	bl	80018ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200001e4 	.word	0x200001e4
 8000b44:	40004400 	.word	0x40004400

08000b48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08a      	sub	sp, #40	@ 0x28
 8000b4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
 8000b5c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	4a2a      	ldr	r2, [pc, #168]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6a:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	613b      	str	r3, [r7, #16]
 8000b74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b76:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b7a:	4a24      	ldr	r2, [pc, #144]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000b7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b80:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b82:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b8a:	60fb      	str	r3, [r7, #12]
 8000b8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000b90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b92:	4a1e      	ldr	r2, [pc, #120]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000b9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9e:	f003 0301 	and.w	r3, r3, #1
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba6:	4b19      	ldr	r3, [pc, #100]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000ba8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000baa:	4a18      	ldr	r2, [pc, #96]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb2:	4b16      	ldr	r3, [pc, #88]	@ (8000c0c <MX_GPIO_Init+0xc4>)
 8000bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2120      	movs	r1, #32
 8000bc2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc6:	f001 fc05 	bl	80023d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bd4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0314 	add.w	r3, r7, #20
 8000bde:	4619      	mov	r1, r3
 8000be0:	480b      	ldr	r0, [pc, #44]	@ (8000c10 <MX_GPIO_Init+0xc8>)
 8000be2:	f001 fa4d 	bl	8002080 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000be6:	2320      	movs	r3, #32
 8000be8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bea:	2301      	movs	r3, #1
 8000bec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c00:	f001 fa3e 	bl	8002080 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	@ 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40021000 	.word	0x40021000
 8000c10:	48000800 	.word	0x48000800

08000c14 <Servo_SetMotion>:
 * @param finger: Which finger (THUMB, INDEX, MIDDLE, RING, PINKY)
 * @param direction: STOP, CLOCKWISE, or COUNTERCLOCKWISE
 * @param speed: Speed percentage (0-100)
 * @retval None
 */
void Servo_SetMotion(Finger finger, Direction direction, int speed) {
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	603a      	str	r2, [r7, #0]
 8000c1e:	71fb      	strb	r3, [r7, #7]
 8000c20:	460b      	mov	r3, r1
 8000c22:	71bb      	strb	r3, [r7, #6]
    uint32_t pulse;

    // Clamp speed to 0-100%
    if (speed < 0) speed = 0;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da01      	bge.n	8000c2e <Servo_SetMotion+0x1a>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
    if (speed > 100) speed = 100;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	2b64      	cmp	r3, #100	@ 0x64
 8000c32:	dd01      	ble.n	8000c38 <Servo_SetMotion+0x24>
 8000c34:	2364      	movs	r3, #100	@ 0x64
 8000c36:	603b      	str	r3, [r7, #0]

    // Calculate pulse width based on direction and speed
    if (direction == STOP) {
 8000c38:	79bb      	ldrb	r3, [r7, #6]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d103      	bne.n	8000c46 <Servo_SetMotion+0x32>
        pulse = SERVO_STOP;
 8000c3e:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e013      	b.n	8000c6e <Servo_SetMotion+0x5a>
    } else if (direction == CLOCKWISE) {
 8000c46:	79bb      	ldrb	r3, [r7, #6]
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d109      	bne.n	8000c60 <Servo_SetMotion+0x4c>
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CW
        pulse = SERVO_STOP - ((SERVO_STOP - SERVO_MAX_CW) * speed / 100);
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4613      	mov	r3, r2
 8000c50:	079b      	lsls	r3, r3, #30
 8000c52:	1a9b      	subs	r3, r3, r2
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e006      	b.n	8000c6e <Servo_SetMotion+0x5a>
    } else { // COUNTERCLOCKWISE
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CCW
        pulse = SERVO_STOP + ((SERVO_MAX_CCW - SERVO_STOP) * speed / 100);
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	4613      	mov	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000c6c:	60fb      	str	r3, [r7, #12]
    }

    // Update servo state
    servoStates[finger].speed = speed;
 8000c6e:	79fa      	ldrb	r2, [r7, #7]
 8000c70:	4925      	ldr	r1, [pc, #148]	@ (8000d08 <Servo_SetMotion+0xf4>)
 8000c72:	4613      	mov	r3, r2
 8000c74:	005b      	lsls	r3, r3, #1
 8000c76:	4413      	add	r3, r2
 8000c78:	009b      	lsls	r3, r3, #2
 8000c7a:	440b      	add	r3, r1
 8000c7c:	683a      	ldr	r2, [r7, #0]
 8000c7e:	601a      	str	r2, [r3, #0]
    servoStates[finger].dir = direction;
 8000c80:	79fa      	ldrb	r2, [r7, #7]
 8000c82:	4921      	ldr	r1, [pc, #132]	@ (8000d08 <Servo_SetMotion+0xf4>)
 8000c84:	4613      	mov	r3, r2
 8000c86:	005b      	lsls	r3, r3, #1
 8000c88:	4413      	add	r3, r2
 8000c8a:	009b      	lsls	r3, r3, #2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	3304      	adds	r3, #4
 8000c90:	79ba      	ldrb	r2, [r7, #6]
 8000c92:	701a      	strb	r2, [r3, #0]
    servoStates[finger].pulse = pulse;
 8000c94:	79fa      	ldrb	r2, [r7, #7]
 8000c96:	491c      	ldr	r1, [pc, #112]	@ (8000d08 <Servo_SetMotion+0xf4>)
 8000c98:	4613      	mov	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	009b      	lsls	r3, r3, #2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	3308      	adds	r3, #8
 8000ca4:	68fa      	ldr	r2, [r7, #12]
 8000ca6:	601a      	str	r2, [r3, #0]

    // Apply pulse width to the appropriate timer
    switch (finger) {
 8000ca8:	79fb      	ldrb	r3, [r7, #7]
 8000caa:	2b04      	cmp	r3, #4
 8000cac:	d825      	bhi.n	8000cfa <Servo_SetMotion+0xe6>
 8000cae:	a201      	add	r2, pc, #4	@ (adr r2, 8000cb4 <Servo_SetMotion+0xa0>)
 8000cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cb4:	08000cc9 	.word	0x08000cc9
 8000cb8:	08000cd3 	.word	0x08000cd3
 8000cbc:	08000cdd 	.word	0x08000cdd
 8000cc0:	08000ce7 	.word	0x08000ce7
 8000cc4:	08000cf1 	.word	0x08000cf1
        case THUMB:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8000cc8:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <Servo_SetMotion+0xf8>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68fa      	ldr	r2, [r7, #12]
 8000cce:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000cd0:	e013      	b.n	8000cfa <Servo_SetMotion+0xe6>
        case INDEX:
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8000cd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000d10 <Servo_SetMotion+0xfc>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	68fa      	ldr	r2, [r7, #12]
 8000cd8:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000cda:	e00e      	b.n	8000cfa <Servo_SetMotion+0xe6>
        case MIDDLE:
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	@ (8000d14 <Servo_SetMotion+0x100>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	68fa      	ldr	r2, [r7, #12]
 8000ce2:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000ce4:	e009      	b.n	8000cfa <Servo_SetMotion+0xe6>
        case RING:
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <Servo_SetMotion+0x104>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	68fa      	ldr	r2, [r7, #12]
 8000cec:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000cee:	e004      	b.n	8000cfa <Servo_SetMotion+0xe6>
        case PINKY:
            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pulse);
 8000cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8000d1c <Servo_SetMotion+0x108>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	68fa      	ldr	r2, [r7, #12]
 8000cf6:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000cf8:	bf00      	nop
    }
	}
 8000cfa:	bf00      	nop
 8000cfc:	3714      	adds	r7, #20
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000000 	.word	0x20000000
 8000d0c:	20000068 	.word	0x20000068
 8000d10:	200000b4 	.word	0x200000b4
 8000d14:	20000100 	.word	0x20000100
 8000d18:	2000014c 	.word	0x2000014c
 8000d1c:	20000198 	.word	0x20000198

08000d20 <Servo_StopAll>:
	/**
	 * @brief Stops all servos
	 * @param None
	 * @retval None
	 */
	void Servo_StopAll(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
		Servo_SetMotion(THUMB, STOP, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f7ff ff73 	bl	8000c14 <Servo_SetMotion>
		Servo_SetMotion(INDEX, STOP, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	2001      	movs	r0, #1
 8000d34:	f7ff ff6e 	bl	8000c14 <Servo_SetMotion>
		Servo_SetMotion(MIDDLE, STOP, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	2002      	movs	r0, #2
 8000d3e:	f7ff ff69 	bl	8000c14 <Servo_SetMotion>
		Servo_SetMotion(RING, STOP, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	2100      	movs	r1, #0
 8000d46:	2003      	movs	r0, #3
 8000d48:	f7ff ff64 	bl	8000c14 <Servo_SetMotion>
		Servo_SetMotion(PINKY, STOP, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2100      	movs	r1, #0
 8000d50:	2004      	movs	r0, #4
 8000d52:	f7ff ff5f 	bl	8000c14 <Servo_SetMotion>

	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000d56:	2100      	movs	r1, #0
 8000d58:	480a      	ldr	r0, [pc, #40]	@ (8000d84 <Servo_StopAll+0x64>)
 8000d5a:	f003 f8d5 	bl	8003f08 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4809      	ldr	r0, [pc, #36]	@ (8000d88 <Servo_StopAll+0x68>)
 8000d62:	f003 f8d1 	bl	8003f08 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000d66:	2100      	movs	r1, #0
 8000d68:	4808      	ldr	r0, [pc, #32]	@ (8000d8c <Servo_StopAll+0x6c>)
 8000d6a:	f003 f8cd 	bl	8003f08 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	4807      	ldr	r0, [pc, #28]	@ (8000d90 <Servo_StopAll+0x70>)
 8000d72:	f003 f8c9 	bl	8003f08 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8000d76:	2100      	movs	r1, #0
 8000d78:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <Servo_StopAll+0x74>)
 8000d7a:	f003 f8c5 	bl	8003f08 <HAL_TIM_PWM_Stop>
	}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000068 	.word	0x20000068
 8000d88:	200000b4 	.word	0x200000b4
 8000d8c:	20000100 	.word	0x20000100
 8000d90:	2000014c 	.word	0x2000014c
 8000d94:	20000198 	.word	0x20000198

08000d98 <Servo_Init>:
	/**
	 * @brief Initialize all servo timers and start PWM
	 * @param None
	 * @retval None
	 */
	void Servo_Init(void) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
	    // Start all PWM channels
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	480a      	ldr	r0, [pc, #40]	@ (8000dc8 <Servo_Init+0x30>)
 8000da0:	f002 ffac 	bl	8003cfc <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000da4:	2100      	movs	r1, #0
 8000da6:	4809      	ldr	r0, [pc, #36]	@ (8000dcc <Servo_Init+0x34>)
 8000da8:	f002 ffa8 	bl	8003cfc <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000dac:	2100      	movs	r1, #0
 8000dae:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <Servo_Init+0x38>)
 8000db0:	f002 ffa4 	bl	8003cfc <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000db4:	2100      	movs	r1, #0
 8000db6:	4807      	ldr	r0, [pc, #28]	@ (8000dd4 <Servo_Init+0x3c>)
 8000db8:	f002 ffa0 	bl	8003cfc <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4806      	ldr	r0, [pc, #24]	@ (8000dd8 <Servo_Init+0x40>)
 8000dc0:	f002 ff9c 	bl	8003cfc <HAL_TIM_PWM_Start>

//	    // Initialize all servos to stop position
//	    Servo_StopAll();
	}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000068 	.word	0x20000068
 8000dcc:	200000b4 	.word	0x200000b4
 8000dd0:	20000100 	.word	0x20000100
 8000dd4:	2000014c 	.word	0x2000014c
 8000dd8:	20000198 	.word	0x20000198

08000ddc <Direction_Decider>:

	int Direction_Decider(int* Desired_Position){
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
		if(*Desired_Position < 0){
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	da06      	bge.n	8000dfa <Direction_Decider+0x1e>
			*Desired_Position = *Desired_Position * -1;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	425a      	negs	r2, r3
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	601a      	str	r2, [r3, #0]
			return CLOCKWISE;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e000      	b.n	8000dfc <Direction_Decider+0x20>
		}
		else{
			return COUNTERCLOCKWISE;
 8000dfa:	2302      	movs	r3, #2
		}
	}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <SignLetter>:
	 * @brief Example function to demonstrate a sign language letter
	 * @param letter: ASCII character (A-Z)
	 * @param duration: How long to hold the position (in ms)
	 * @retval None
	 */
	void SignLetter(char letter) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
	    // Reset to neutral position
	    Servo_Init();
 8000e12:	f7ff ffc1 	bl	8000d98 <Servo_Init>


	    // Set finger positions based on the letter
	    switch(letter) {
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	3b41      	subs	r3, #65	@ 0x41
 8000e1a:	2b19      	cmp	r3, #25
 8000e1c:	f200 848c 	bhi.w	8001738 <SignLetter+0x930>
 8000e20:	a201      	add	r2, pc, #4	@ (adr r2, 8000e28 <SignLetter+0x20>)
 8000e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e26:	bf00      	nop
 8000e28:	08000e91 	.word	0x08000e91
 8000e2c:	08000ee5 	.word	0x08000ee5
 8000e30:	08000f61 	.word	0x08000f61
 8000e34:	08000fb1 	.word	0x08000fb1
 8000e38:	08001001 	.word	0x08001001
 8000e3c:	08001051 	.word	0x08001051
 8000e40:	080010a1 	.word	0x080010a1
 8000e44:	080010f1 	.word	0x080010f1
 8000e48:	08001141 	.word	0x08001141
 8000e4c:	08001191 	.word	0x08001191
 8000e50:	080011e1 	.word	0x080011e1
 8000e54:	08001231 	.word	0x08001231
 8000e58:	080012ad 	.word	0x080012ad
 8000e5c:	080012fd 	.word	0x080012fd
 8000e60:	0800134d 	.word	0x0800134d
 8000e64:	0800139d 	.word	0x0800139d
 8000e68:	080013ed 	.word	0x080013ed
 8000e6c:	0800143d 	.word	0x0800143d
 8000e70:	0800148d 	.word	0x0800148d
 8000e74:	080014dd 	.word	0x080014dd
 8000e78:	0800152d 	.word	0x0800152d
 8000e7c:	080015a9 	.word	0x080015a9
 8000e80:	080015f9 	.word	0x080015f9
 8000e84:	08001649 	.word	0x08001649
 8000e88:	08001699 	.word	0x08001699
 8000e8c:	080016e9 	.word	0x080016e9
	        case 'A':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8000e90:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <SignLetter+0x130>)
 8000e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e96:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000e9a:	3b10      	subs	r3, #16
 8000e9c:	4a27      	ldr	r2, [pc, #156]	@ (8000f3c <SignLetter+0x134>)
 8000e9e:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8000ea0:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <SignLetter+0x138>)
 8000ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000eaa:	3b10      	subs	r3, #16
 8000eac:	4a25      	ldr	r2, [pc, #148]	@ (8000f44 <SignLetter+0x13c>)
 8000eae:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8000eb0:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <SignLetter+0x140>)
 8000eb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000eba:	3b10      	subs	r3, #16
 8000ebc:	4a23      	ldr	r2, [pc, #140]	@ (8000f4c <SignLetter+0x144>)
 8000ebe:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8000ec0:	4b23      	ldr	r3, [pc, #140]	@ (8000f50 <SignLetter+0x148>)
 8000ec2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000eca:	3b10      	subs	r3, #16
 8000ecc:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <SignLetter+0x14c>)
 8000ece:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8000ed0:	4b21      	ldr	r3, [pc, #132]	@ (8000f58 <SignLetter+0x150>)
 8000ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000eda:	3b10      	subs	r3, #16
 8000edc:	4a1f      	ldr	r2, [pc, #124]	@ (8000f5c <SignLetter+0x154>)
 8000ede:	6013      	str	r3, [r2, #0]
	            break;
 8000ee0:	f000 bc2d 	b.w	800173e <SignLetter+0x936>

	        case 'B':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8000ee4:	4b14      	ldr	r3, [pc, #80]	@ (8000f38 <SignLetter+0x130>)
 8000ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eea:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000eee:	3b10      	subs	r3, #16
 8000ef0:	4a12      	ldr	r2, [pc, #72]	@ (8000f3c <SignLetter+0x134>)
 8000ef2:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8000ef4:	4b12      	ldr	r3, [pc, #72]	@ (8000f40 <SignLetter+0x138>)
 8000ef6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000efa:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000efe:	3b10      	subs	r3, #16
 8000f00:	4a10      	ldr	r2, [pc, #64]	@ (8000f44 <SignLetter+0x13c>)
 8000f02:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8000f04:	4b10      	ldr	r3, [pc, #64]	@ (8000f48 <SignLetter+0x140>)
 8000f06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f0a:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000f0e:	3b10      	subs	r3, #16
 8000f10:	4a0e      	ldr	r2, [pc, #56]	@ (8000f4c <SignLetter+0x144>)
 8000f12:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8000f14:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <SignLetter+0x148>)
 8000f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f1a:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000f1e:	3b10      	subs	r3, #16
 8000f20:	4a0c      	ldr	r2, [pc, #48]	@ (8000f54 <SignLetter+0x14c>)
 8000f22:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <SignLetter+0x150>)
 8000f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f2a:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000f2e:	3b10      	subs	r3, #16
 8000f30:	4a0a      	ldr	r2, [pc, #40]	@ (8000f5c <SignLetter+0x154>)
 8000f32:	6013      	str	r3, [r2, #0]
	            break;
 8000f34:	f000 bc03 	b.w	800173e <SignLetter+0x936>
 8000f38:	20000284 	.word	0x20000284
 8000f3c:	20000290 	.word	0x20000290
 8000f40:	20000286 	.word	0x20000286
 8000f44:	20000294 	.word	0x20000294
 8000f48:	20000288 	.word	0x20000288
 8000f4c:	20000298 	.word	0x20000298
 8000f50:	2000028a 	.word	0x2000028a
 8000f54:	2000029c 	.word	0x2000029c
 8000f58:	2000028c 	.word	0x2000028c
 8000f5c:	200002a0 	.word	0x200002a0

	        case 'C':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8000f60:	4bb8      	ldr	r3, [pc, #736]	@ (8001244 <SignLetter+0x43c>)
 8000f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f66:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000f6a:	3b10      	subs	r3, #16
 8000f6c:	4ab6      	ldr	r2, [pc, #728]	@ (8001248 <SignLetter+0x440>)
 8000f6e:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8000f70:	4bb6      	ldr	r3, [pc, #728]	@ (800124c <SignLetter+0x444>)
 8000f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f76:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000f7a:	3b10      	subs	r3, #16
 8000f7c:	4ab4      	ldr	r2, [pc, #720]	@ (8001250 <SignLetter+0x448>)
 8000f7e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8000f80:	4bb4      	ldr	r3, [pc, #720]	@ (8001254 <SignLetter+0x44c>)
 8000f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f86:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000f8a:	3b10      	subs	r3, #16
 8000f8c:	4ab2      	ldr	r2, [pc, #712]	@ (8001258 <SignLetter+0x450>)
 8000f8e:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8000f90:	4bb2      	ldr	r3, [pc, #712]	@ (800125c <SignLetter+0x454>)
 8000f92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f96:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000f9a:	3b10      	subs	r3, #16
 8000f9c:	4ab0      	ldr	r2, [pc, #704]	@ (8001260 <SignLetter+0x458>)
 8000f9e:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8000fa0:	4bb0      	ldr	r3, [pc, #704]	@ (8001264 <SignLetter+0x45c>)
 8000fa2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000faa:	3b10      	subs	r3, #16
 8000fac:	4aae      	ldr	r2, [pc, #696]	@ (8001268 <SignLetter+0x460>)
 8000fae:	6013      	str	r3, [r2, #0]

	        case 'D':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8000fb0:	4ba4      	ldr	r3, [pc, #656]	@ (8001244 <SignLetter+0x43c>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000fba:	3b10      	subs	r3, #16
 8000fbc:	4aa2      	ldr	r2, [pc, #648]	@ (8001248 <SignLetter+0x440>)
 8000fbe:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8000fc0:	4ba2      	ldr	r3, [pc, #648]	@ (800124c <SignLetter+0x444>)
 8000fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000fca:	3b10      	subs	r3, #16
 8000fcc:	4aa0      	ldr	r2, [pc, #640]	@ (8001250 <SignLetter+0x448>)
 8000fce:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8000fd0:	4ba0      	ldr	r3, [pc, #640]	@ (8001254 <SignLetter+0x44c>)
 8000fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000fda:	3b10      	subs	r3, #16
 8000fdc:	4a9e      	ldr	r2, [pc, #632]	@ (8001258 <SignLetter+0x450>)
 8000fde:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8000fe0:	4b9e      	ldr	r3, [pc, #632]	@ (800125c <SignLetter+0x454>)
 8000fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000fea:	3b10      	subs	r3, #16
 8000fec:	4a9c      	ldr	r2, [pc, #624]	@ (8001260 <SignLetter+0x458>)
 8000fee:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8000ff0:	4b9c      	ldr	r3, [pc, #624]	@ (8001264 <SignLetter+0x45c>)
 8000ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8000ffa:	3b10      	subs	r3, #16
 8000ffc:	4a9a      	ldr	r2, [pc, #616]	@ (8001268 <SignLetter+0x460>)
 8000ffe:	6013      	str	r3, [r2, #0]

	        case 'E':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001000:	4b90      	ldr	r3, [pc, #576]	@ (8001244 <SignLetter+0x43c>)
 8001002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001006:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800100a:	3b10      	subs	r3, #16
 800100c:	4a8e      	ldr	r2, [pc, #568]	@ (8001248 <SignLetter+0x440>)
 800100e:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001010:	4b8e      	ldr	r3, [pc, #568]	@ (800124c <SignLetter+0x444>)
 8001012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001016:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800101a:	3b10      	subs	r3, #16
 800101c:	4a8c      	ldr	r2, [pc, #560]	@ (8001250 <SignLetter+0x448>)
 800101e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001020:	4b8c      	ldr	r3, [pc, #560]	@ (8001254 <SignLetter+0x44c>)
 8001022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001026:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800102a:	3b10      	subs	r3, #16
 800102c:	4a8a      	ldr	r2, [pc, #552]	@ (8001258 <SignLetter+0x450>)
 800102e:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001030:	4b8a      	ldr	r3, [pc, #552]	@ (800125c <SignLetter+0x454>)
 8001032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001036:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800103a:	3b10      	subs	r3, #16
 800103c:	4a88      	ldr	r2, [pc, #544]	@ (8001260 <SignLetter+0x458>)
 800103e:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001040:	4b88      	ldr	r3, [pc, #544]	@ (8001264 <SignLetter+0x45c>)
 8001042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001046:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800104a:	3b10      	subs	r3, #16
 800104c:	4a86      	ldr	r2, [pc, #536]	@ (8001268 <SignLetter+0x460>)
 800104e:	6013      	str	r3, [r2, #0]

	        case 'F':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001050:	4b7c      	ldr	r3, [pc, #496]	@ (8001244 <SignLetter+0x43c>)
 8001052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001056:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800105a:	3b10      	subs	r3, #16
 800105c:	4a7a      	ldr	r2, [pc, #488]	@ (8001248 <SignLetter+0x440>)
 800105e:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001060:	4b7a      	ldr	r3, [pc, #488]	@ (800124c <SignLetter+0x444>)
 8001062:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001066:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800106a:	3b10      	subs	r3, #16
 800106c:	4a78      	ldr	r2, [pc, #480]	@ (8001250 <SignLetter+0x448>)
 800106e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001070:	4b78      	ldr	r3, [pc, #480]	@ (8001254 <SignLetter+0x44c>)
 8001072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001076:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800107a:	3b10      	subs	r3, #16
 800107c:	4a76      	ldr	r2, [pc, #472]	@ (8001258 <SignLetter+0x450>)
 800107e:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001080:	4b76      	ldr	r3, [pc, #472]	@ (800125c <SignLetter+0x454>)
 8001082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001086:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800108a:	3b10      	subs	r3, #16
 800108c:	4a74      	ldr	r2, [pc, #464]	@ (8001260 <SignLetter+0x458>)
 800108e:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001090:	4b74      	ldr	r3, [pc, #464]	@ (8001264 <SignLetter+0x45c>)
 8001092:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001096:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800109a:	3b10      	subs	r3, #16
 800109c:	4a72      	ldr	r2, [pc, #456]	@ (8001268 <SignLetter+0x460>)
 800109e:	6013      	str	r3, [r2, #0]

	        case 'G':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80010a0:	4b68      	ldr	r3, [pc, #416]	@ (8001244 <SignLetter+0x43c>)
 80010a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010a6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80010aa:	3b10      	subs	r3, #16
 80010ac:	4a66      	ldr	r2, [pc, #408]	@ (8001248 <SignLetter+0x440>)
 80010ae:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80010b0:	4b66      	ldr	r3, [pc, #408]	@ (800124c <SignLetter+0x444>)
 80010b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80010ba:	3b10      	subs	r3, #16
 80010bc:	4a64      	ldr	r2, [pc, #400]	@ (8001250 <SignLetter+0x448>)
 80010be:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80010c0:	4b64      	ldr	r3, [pc, #400]	@ (8001254 <SignLetter+0x44c>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80010ca:	3b10      	subs	r3, #16
 80010cc:	4a62      	ldr	r2, [pc, #392]	@ (8001258 <SignLetter+0x450>)
 80010ce:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80010d0:	4b62      	ldr	r3, [pc, #392]	@ (800125c <SignLetter+0x454>)
 80010d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80010da:	3b10      	subs	r3, #16
 80010dc:	4a60      	ldr	r2, [pc, #384]	@ (8001260 <SignLetter+0x458>)
 80010de:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80010e0:	4b60      	ldr	r3, [pc, #384]	@ (8001264 <SignLetter+0x45c>)
 80010e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80010ea:	3b10      	subs	r3, #16
 80010ec:	4a5e      	ldr	r2, [pc, #376]	@ (8001268 <SignLetter+0x460>)
 80010ee:	6013      	str	r3, [r2, #0]

	        case 'H':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80010f0:	4b54      	ldr	r3, [pc, #336]	@ (8001244 <SignLetter+0x43c>)
 80010f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80010fa:	3b10      	subs	r3, #16
 80010fc:	4a52      	ldr	r2, [pc, #328]	@ (8001248 <SignLetter+0x440>)
 80010fe:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001100:	4b52      	ldr	r3, [pc, #328]	@ (800124c <SignLetter+0x444>)
 8001102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001106:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800110a:	3b10      	subs	r3, #16
 800110c:	4a50      	ldr	r2, [pc, #320]	@ (8001250 <SignLetter+0x448>)
 800110e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001110:	4b50      	ldr	r3, [pc, #320]	@ (8001254 <SignLetter+0x44c>)
 8001112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001116:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800111a:	3b10      	subs	r3, #16
 800111c:	4a4e      	ldr	r2, [pc, #312]	@ (8001258 <SignLetter+0x450>)
 800111e:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001120:	4b4e      	ldr	r3, [pc, #312]	@ (800125c <SignLetter+0x454>)
 8001122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001126:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800112a:	3b10      	subs	r3, #16
 800112c:	4a4c      	ldr	r2, [pc, #304]	@ (8001260 <SignLetter+0x458>)
 800112e:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001130:	4b4c      	ldr	r3, [pc, #304]	@ (8001264 <SignLetter+0x45c>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800113a:	3b10      	subs	r3, #16
 800113c:	4a4a      	ldr	r2, [pc, #296]	@ (8001268 <SignLetter+0x460>)
 800113e:	6013      	str	r3, [r2, #0]

	        case 'I':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001140:	4b40      	ldr	r3, [pc, #256]	@ (8001244 <SignLetter+0x43c>)
 8001142:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001146:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800114a:	3b10      	subs	r3, #16
 800114c:	4a3e      	ldr	r2, [pc, #248]	@ (8001248 <SignLetter+0x440>)
 800114e:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001150:	4b3e      	ldr	r3, [pc, #248]	@ (800124c <SignLetter+0x444>)
 8001152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001156:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800115a:	3b10      	subs	r3, #16
 800115c:	4a3c      	ldr	r2, [pc, #240]	@ (8001250 <SignLetter+0x448>)
 800115e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001160:	4b3c      	ldr	r3, [pc, #240]	@ (8001254 <SignLetter+0x44c>)
 8001162:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001166:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800116a:	3b10      	subs	r3, #16
 800116c:	4a3a      	ldr	r2, [pc, #232]	@ (8001258 <SignLetter+0x450>)
 800116e:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001170:	4b3a      	ldr	r3, [pc, #232]	@ (800125c <SignLetter+0x454>)
 8001172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001176:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800117a:	3b10      	subs	r3, #16
 800117c:	4a38      	ldr	r2, [pc, #224]	@ (8001260 <SignLetter+0x458>)
 800117e:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001180:	4b38      	ldr	r3, [pc, #224]	@ (8001264 <SignLetter+0x45c>)
 8001182:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001186:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800118a:	3b10      	subs	r3, #16
 800118c:	4a36      	ldr	r2, [pc, #216]	@ (8001268 <SignLetter+0x460>)
 800118e:	6013      	str	r3, [r2, #0]

	        case 'J':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001190:	4b2c      	ldr	r3, [pc, #176]	@ (8001244 <SignLetter+0x43c>)
 8001192:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001196:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800119a:	3b10      	subs	r3, #16
 800119c:	4a2a      	ldr	r2, [pc, #168]	@ (8001248 <SignLetter+0x440>)
 800119e:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80011a0:	4b2a      	ldr	r3, [pc, #168]	@ (800124c <SignLetter+0x444>)
 80011a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80011aa:	3b10      	subs	r3, #16
 80011ac:	4a28      	ldr	r2, [pc, #160]	@ (8001250 <SignLetter+0x448>)
 80011ae:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80011b0:	4b28      	ldr	r3, [pc, #160]	@ (8001254 <SignLetter+0x44c>)
 80011b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80011ba:	3b10      	subs	r3, #16
 80011bc:	4a26      	ldr	r2, [pc, #152]	@ (8001258 <SignLetter+0x450>)
 80011be:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80011c0:	4b26      	ldr	r3, [pc, #152]	@ (800125c <SignLetter+0x454>)
 80011c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80011ca:	3b10      	subs	r3, #16
 80011cc:	4a24      	ldr	r2, [pc, #144]	@ (8001260 <SignLetter+0x458>)
 80011ce:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80011d0:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <SignLetter+0x45c>)
 80011d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80011da:	3b10      	subs	r3, #16
 80011dc:	4a22      	ldr	r2, [pc, #136]	@ (8001268 <SignLetter+0x460>)
 80011de:	6013      	str	r3, [r2, #0]

	        case 'K':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <SignLetter+0x43c>)
 80011e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011e6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80011ea:	3b10      	subs	r3, #16
 80011ec:	4a16      	ldr	r2, [pc, #88]	@ (8001248 <SignLetter+0x440>)
 80011ee:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80011f0:	4b16      	ldr	r3, [pc, #88]	@ (800124c <SignLetter+0x444>)
 80011f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f6:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80011fa:	3b10      	subs	r3, #16
 80011fc:	4a14      	ldr	r2, [pc, #80]	@ (8001250 <SignLetter+0x448>)
 80011fe:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001200:	4b14      	ldr	r3, [pc, #80]	@ (8001254 <SignLetter+0x44c>)
 8001202:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001206:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800120a:	3b10      	subs	r3, #16
 800120c:	4a12      	ldr	r2, [pc, #72]	@ (8001258 <SignLetter+0x450>)
 800120e:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001210:	4b12      	ldr	r3, [pc, #72]	@ (800125c <SignLetter+0x454>)
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800121a:	3b10      	subs	r3, #16
 800121c:	4a10      	ldr	r2, [pc, #64]	@ (8001260 <SignLetter+0x458>)
 800121e:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001220:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <SignLetter+0x45c>)
 8001222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001226:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800122a:	3b10      	subs	r3, #16
 800122c:	4a0e      	ldr	r2, [pc, #56]	@ (8001268 <SignLetter+0x460>)
 800122e:	6013      	str	r3, [r2, #0]

	        case 'L':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <SignLetter+0x43c>)
 8001232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001236:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 800123a:	3b10      	subs	r3, #16
 800123c:	4a02      	ldr	r2, [pc, #8]	@ (8001248 <SignLetter+0x440>)
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	e014      	b.n	800126c <SignLetter+0x464>
 8001242:	bf00      	nop
 8001244:	20000284 	.word	0x20000284
 8001248:	20000290 	.word	0x20000290
 800124c:	20000286 	.word	0x20000286
 8001250:	20000294 	.word	0x20000294
 8001254:	20000288 	.word	0x20000288
 8001258:	20000298 	.word	0x20000298
 800125c:	2000028a 	.word	0x2000028a
 8001260:	2000029c 	.word	0x2000029c
 8001264:	2000028c 	.word	0x2000028c
 8001268:	200002a0 	.word	0x200002a0
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800126c:	4bb8      	ldr	r3, [pc, #736]	@ (8001550 <SignLetter+0x748>)
 800126e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001272:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001276:	3b10      	subs	r3, #16
 8001278:	4ab6      	ldr	r2, [pc, #728]	@ (8001554 <SignLetter+0x74c>)
 800127a:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800127c:	4bb6      	ldr	r3, [pc, #728]	@ (8001558 <SignLetter+0x750>)
 800127e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001282:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001286:	3b10      	subs	r3, #16
 8001288:	4ab4      	ldr	r2, [pc, #720]	@ (800155c <SignLetter+0x754>)
 800128a:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800128c:	4bb4      	ldr	r3, [pc, #720]	@ (8001560 <SignLetter+0x758>)
 800128e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001292:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001296:	3b10      	subs	r3, #16
 8001298:	4ab2      	ldr	r2, [pc, #712]	@ (8001564 <SignLetter+0x75c>)
 800129a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800129c:	4bb2      	ldr	r3, [pc, #712]	@ (8001568 <SignLetter+0x760>)
 800129e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80012a6:	3b10      	subs	r3, #16
 80012a8:	4ab0      	ldr	r2, [pc, #704]	@ (800156c <SignLetter+0x764>)
 80012aa:	6013      	str	r3, [r2, #0]

	        case 'M':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80012ac:	4bb0      	ldr	r3, [pc, #704]	@ (8001570 <SignLetter+0x768>)
 80012ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80012b6:	3b10      	subs	r3, #16
 80012b8:	4aae      	ldr	r2, [pc, #696]	@ (8001574 <SignLetter+0x76c>)
 80012ba:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80012bc:	4ba4      	ldr	r3, [pc, #656]	@ (8001550 <SignLetter+0x748>)
 80012be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80012c6:	3b10      	subs	r3, #16
 80012c8:	4aa2      	ldr	r2, [pc, #648]	@ (8001554 <SignLetter+0x74c>)
 80012ca:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80012cc:	4ba2      	ldr	r3, [pc, #648]	@ (8001558 <SignLetter+0x750>)
 80012ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012d2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80012d6:	3b10      	subs	r3, #16
 80012d8:	4aa0      	ldr	r2, [pc, #640]	@ (800155c <SignLetter+0x754>)
 80012da:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80012dc:	4ba0      	ldr	r3, [pc, #640]	@ (8001560 <SignLetter+0x758>)
 80012de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80012e6:	3b10      	subs	r3, #16
 80012e8:	4a9e      	ldr	r2, [pc, #632]	@ (8001564 <SignLetter+0x75c>)
 80012ea:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80012ec:	4b9e      	ldr	r3, [pc, #632]	@ (8001568 <SignLetter+0x760>)
 80012ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80012f6:	3b10      	subs	r3, #16
 80012f8:	4a9c      	ldr	r2, [pc, #624]	@ (800156c <SignLetter+0x764>)
 80012fa:	6013      	str	r3, [r2, #0]

	        case 'N':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80012fc:	4b9c      	ldr	r3, [pc, #624]	@ (8001570 <SignLetter+0x768>)
 80012fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001302:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001306:	3b10      	subs	r3, #16
 8001308:	4a9a      	ldr	r2, [pc, #616]	@ (8001574 <SignLetter+0x76c>)
 800130a:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800130c:	4b90      	ldr	r3, [pc, #576]	@ (8001550 <SignLetter+0x748>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001316:	3b10      	subs	r3, #16
 8001318:	4a8e      	ldr	r2, [pc, #568]	@ (8001554 <SignLetter+0x74c>)
 800131a:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800131c:	4b8e      	ldr	r3, [pc, #568]	@ (8001558 <SignLetter+0x750>)
 800131e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001322:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001326:	3b10      	subs	r3, #16
 8001328:	4a8c      	ldr	r2, [pc, #560]	@ (800155c <SignLetter+0x754>)
 800132a:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800132c:	4b8c      	ldr	r3, [pc, #560]	@ (8001560 <SignLetter+0x758>)
 800132e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001332:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001336:	3b10      	subs	r3, #16
 8001338:	4a8a      	ldr	r2, [pc, #552]	@ (8001564 <SignLetter+0x75c>)
 800133a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800133c:	4b8a      	ldr	r3, [pc, #552]	@ (8001568 <SignLetter+0x760>)
 800133e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001342:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001346:	3b10      	subs	r3, #16
 8001348:	4a88      	ldr	r2, [pc, #544]	@ (800156c <SignLetter+0x764>)
 800134a:	6013      	str	r3, [r2, #0]

	        case 'O':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800134c:	4b88      	ldr	r3, [pc, #544]	@ (8001570 <SignLetter+0x768>)
 800134e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001352:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001356:	3b10      	subs	r3, #16
 8001358:	4a86      	ldr	r2, [pc, #536]	@ (8001574 <SignLetter+0x76c>)
 800135a:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800135c:	4b7c      	ldr	r3, [pc, #496]	@ (8001550 <SignLetter+0x748>)
 800135e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001362:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001366:	3b10      	subs	r3, #16
 8001368:	4a7a      	ldr	r2, [pc, #488]	@ (8001554 <SignLetter+0x74c>)
 800136a:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800136c:	4b7a      	ldr	r3, [pc, #488]	@ (8001558 <SignLetter+0x750>)
 800136e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001372:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001376:	3b10      	subs	r3, #16
 8001378:	4a78      	ldr	r2, [pc, #480]	@ (800155c <SignLetter+0x754>)
 800137a:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800137c:	4b78      	ldr	r3, [pc, #480]	@ (8001560 <SignLetter+0x758>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001386:	3b10      	subs	r3, #16
 8001388:	4a76      	ldr	r2, [pc, #472]	@ (8001564 <SignLetter+0x75c>)
 800138a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800138c:	4b76      	ldr	r3, [pc, #472]	@ (8001568 <SignLetter+0x760>)
 800138e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001392:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001396:	3b10      	subs	r3, #16
 8001398:	4a74      	ldr	r2, [pc, #464]	@ (800156c <SignLetter+0x764>)
 800139a:	6013      	str	r3, [r2, #0]

	        case 'P':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800139c:	4b74      	ldr	r3, [pc, #464]	@ (8001570 <SignLetter+0x768>)
 800139e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013a2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80013a6:	3b10      	subs	r3, #16
 80013a8:	4a72      	ldr	r2, [pc, #456]	@ (8001574 <SignLetter+0x76c>)
 80013aa:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80013ac:	4b68      	ldr	r3, [pc, #416]	@ (8001550 <SignLetter+0x748>)
 80013ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80013b6:	3b10      	subs	r3, #16
 80013b8:	4a66      	ldr	r2, [pc, #408]	@ (8001554 <SignLetter+0x74c>)
 80013ba:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80013bc:	4b66      	ldr	r3, [pc, #408]	@ (8001558 <SignLetter+0x750>)
 80013be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80013c6:	3b10      	subs	r3, #16
 80013c8:	4a64      	ldr	r2, [pc, #400]	@ (800155c <SignLetter+0x754>)
 80013ca:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80013cc:	4b64      	ldr	r3, [pc, #400]	@ (8001560 <SignLetter+0x758>)
 80013ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80013d6:	3b10      	subs	r3, #16
 80013d8:	4a62      	ldr	r2, [pc, #392]	@ (8001564 <SignLetter+0x75c>)
 80013da:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80013dc:	4b62      	ldr	r3, [pc, #392]	@ (8001568 <SignLetter+0x760>)
 80013de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80013e6:	3b10      	subs	r3, #16
 80013e8:	4a60      	ldr	r2, [pc, #384]	@ (800156c <SignLetter+0x764>)
 80013ea:	6013      	str	r3, [r2, #0]

	        case 'Q':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80013ec:	4b60      	ldr	r3, [pc, #384]	@ (8001570 <SignLetter+0x768>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80013f6:	3b10      	subs	r3, #16
 80013f8:	4a5e      	ldr	r2, [pc, #376]	@ (8001574 <SignLetter+0x76c>)
 80013fa:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80013fc:	4b54      	ldr	r3, [pc, #336]	@ (8001550 <SignLetter+0x748>)
 80013fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001402:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001406:	3b10      	subs	r3, #16
 8001408:	4a52      	ldr	r2, [pc, #328]	@ (8001554 <SignLetter+0x74c>)
 800140a:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800140c:	4b52      	ldr	r3, [pc, #328]	@ (8001558 <SignLetter+0x750>)
 800140e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001412:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001416:	3b10      	subs	r3, #16
 8001418:	4a50      	ldr	r2, [pc, #320]	@ (800155c <SignLetter+0x754>)
 800141a:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800141c:	4b50      	ldr	r3, [pc, #320]	@ (8001560 <SignLetter+0x758>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001426:	3b10      	subs	r3, #16
 8001428:	4a4e      	ldr	r2, [pc, #312]	@ (8001564 <SignLetter+0x75c>)
 800142a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800142c:	4b4e      	ldr	r3, [pc, #312]	@ (8001568 <SignLetter+0x760>)
 800142e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001432:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001436:	3b10      	subs	r3, #16
 8001438:	4a4c      	ldr	r2, [pc, #304]	@ (800156c <SignLetter+0x764>)
 800143a:	6013      	str	r3, [r2, #0]

	        case 'R':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800143c:	4b4c      	ldr	r3, [pc, #304]	@ (8001570 <SignLetter+0x768>)
 800143e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001442:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001446:	3b10      	subs	r3, #16
 8001448:	4a4a      	ldr	r2, [pc, #296]	@ (8001574 <SignLetter+0x76c>)
 800144a:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800144c:	4b40      	ldr	r3, [pc, #256]	@ (8001550 <SignLetter+0x748>)
 800144e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001452:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001456:	3b10      	subs	r3, #16
 8001458:	4a3e      	ldr	r2, [pc, #248]	@ (8001554 <SignLetter+0x74c>)
 800145a:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800145c:	4b3e      	ldr	r3, [pc, #248]	@ (8001558 <SignLetter+0x750>)
 800145e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001462:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001466:	3b10      	subs	r3, #16
 8001468:	4a3c      	ldr	r2, [pc, #240]	@ (800155c <SignLetter+0x754>)
 800146a:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800146c:	4b3c      	ldr	r3, [pc, #240]	@ (8001560 <SignLetter+0x758>)
 800146e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001472:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001476:	3b10      	subs	r3, #16
 8001478:	4a3a      	ldr	r2, [pc, #232]	@ (8001564 <SignLetter+0x75c>)
 800147a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800147c:	4b3a      	ldr	r3, [pc, #232]	@ (8001568 <SignLetter+0x760>)
 800147e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001482:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001486:	3b10      	subs	r3, #16
 8001488:	4a38      	ldr	r2, [pc, #224]	@ (800156c <SignLetter+0x764>)
 800148a:	6013      	str	r3, [r2, #0]

	        case 'S':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800148c:	4b38      	ldr	r3, [pc, #224]	@ (8001570 <SignLetter+0x768>)
 800148e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001492:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001496:	3b10      	subs	r3, #16
 8001498:	4a36      	ldr	r2, [pc, #216]	@ (8001574 <SignLetter+0x76c>)
 800149a:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800149c:	4b2c      	ldr	r3, [pc, #176]	@ (8001550 <SignLetter+0x748>)
 800149e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80014a6:	3b10      	subs	r3, #16
 80014a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001554 <SignLetter+0x74c>)
 80014aa:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80014ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001558 <SignLetter+0x750>)
 80014ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80014b6:	3b10      	subs	r3, #16
 80014b8:	4a28      	ldr	r2, [pc, #160]	@ (800155c <SignLetter+0x754>)
 80014ba:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80014bc:	4b28      	ldr	r3, [pc, #160]	@ (8001560 <SignLetter+0x758>)
 80014be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80014c6:	3b10      	subs	r3, #16
 80014c8:	4a26      	ldr	r2, [pc, #152]	@ (8001564 <SignLetter+0x75c>)
 80014ca:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80014cc:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <SignLetter+0x760>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80014d6:	3b10      	subs	r3, #16
 80014d8:	4a24      	ldr	r2, [pc, #144]	@ (800156c <SignLetter+0x764>)
 80014da:	6013      	str	r3, [r2, #0]

	        case 'T':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80014dc:	4b24      	ldr	r3, [pc, #144]	@ (8001570 <SignLetter+0x768>)
 80014de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80014e6:	3b10      	subs	r3, #16
 80014e8:	4a22      	ldr	r2, [pc, #136]	@ (8001574 <SignLetter+0x76c>)
 80014ea:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80014ec:	4b18      	ldr	r3, [pc, #96]	@ (8001550 <SignLetter+0x748>)
 80014ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014f2:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80014f6:	3b10      	subs	r3, #16
 80014f8:	4a16      	ldr	r2, [pc, #88]	@ (8001554 <SignLetter+0x74c>)
 80014fa:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80014fc:	4b16      	ldr	r3, [pc, #88]	@ (8001558 <SignLetter+0x750>)
 80014fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001502:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001506:	3b10      	subs	r3, #16
 8001508:	4a14      	ldr	r2, [pc, #80]	@ (800155c <SignLetter+0x754>)
 800150a:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800150c:	4b14      	ldr	r3, [pc, #80]	@ (8001560 <SignLetter+0x758>)
 800150e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001512:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001516:	3b10      	subs	r3, #16
 8001518:	4a12      	ldr	r2, [pc, #72]	@ (8001564 <SignLetter+0x75c>)
 800151a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800151c:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <SignLetter+0x760>)
 800151e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001522:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001526:	3b10      	subs	r3, #16
 8001528:	4a10      	ldr	r2, [pc, #64]	@ (800156c <SignLetter+0x764>)
 800152a:	6013      	str	r3, [r2, #0]

	        case 'U':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800152c:	4b10      	ldr	r3, [pc, #64]	@ (8001570 <SignLetter+0x768>)
 800152e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001532:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001536:	3b10      	subs	r3, #16
 8001538:	4a0e      	ldr	r2, [pc, #56]	@ (8001574 <SignLetter+0x76c>)
 800153a:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800153c:	4b04      	ldr	r3, [pc, #16]	@ (8001550 <SignLetter+0x748>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001546:	3b10      	subs	r3, #16
 8001548:	4a02      	ldr	r2, [pc, #8]	@ (8001554 <SignLetter+0x74c>)
 800154a:	6013      	str	r3, [r2, #0]
 800154c:	e014      	b.n	8001578 <SignLetter+0x770>
 800154e:	bf00      	nop
 8001550:	20000286 	.word	0x20000286
 8001554:	20000294 	.word	0x20000294
 8001558:	20000288 	.word	0x20000288
 800155c:	20000298 	.word	0x20000298
 8001560:	2000028a 	.word	0x2000028a
 8001564:	2000029c 	.word	0x2000029c
 8001568:	2000028c 	.word	0x2000028c
 800156c:	200002a0 	.word	0x200002a0
 8001570:	20000284 	.word	0x20000284
 8001574:	20000290 	.word	0x20000290
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001578:	4b8d      	ldr	r3, [pc, #564]	@ (80017b0 <SignLetter+0x9a8>)
 800157a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001582:	3b10      	subs	r3, #16
 8001584:	4a8b      	ldr	r2, [pc, #556]	@ (80017b4 <SignLetter+0x9ac>)
 8001586:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001588:	4b8b      	ldr	r3, [pc, #556]	@ (80017b8 <SignLetter+0x9b0>)
 800158a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001592:	3b10      	subs	r3, #16
 8001594:	4a89      	ldr	r2, [pc, #548]	@ (80017bc <SignLetter+0x9b4>)
 8001596:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001598:	4b89      	ldr	r3, [pc, #548]	@ (80017c0 <SignLetter+0x9b8>)
 800159a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80015a2:	3b10      	subs	r3, #16
 80015a4:	4a87      	ldr	r2, [pc, #540]	@ (80017c4 <SignLetter+0x9bc>)
 80015a6:	6013      	str	r3, [r2, #0]

	        case 'V':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80015a8:	4b87      	ldr	r3, [pc, #540]	@ (80017c8 <SignLetter+0x9c0>)
 80015aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ae:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80015b2:	3b10      	subs	r3, #16
 80015b4:	4a85      	ldr	r2, [pc, #532]	@ (80017cc <SignLetter+0x9c4>)
 80015b6:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80015b8:	4b85      	ldr	r3, [pc, #532]	@ (80017d0 <SignLetter+0x9c8>)
 80015ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015be:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80015c2:	3b10      	subs	r3, #16
 80015c4:	4a83      	ldr	r2, [pc, #524]	@ (80017d4 <SignLetter+0x9cc>)
 80015c6:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80015c8:	4b79      	ldr	r3, [pc, #484]	@ (80017b0 <SignLetter+0x9a8>)
 80015ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ce:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80015d2:	3b10      	subs	r3, #16
 80015d4:	4a77      	ldr	r2, [pc, #476]	@ (80017b4 <SignLetter+0x9ac>)
 80015d6:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80015d8:	4b77      	ldr	r3, [pc, #476]	@ (80017b8 <SignLetter+0x9b0>)
 80015da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015de:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80015e2:	3b10      	subs	r3, #16
 80015e4:	4a75      	ldr	r2, [pc, #468]	@ (80017bc <SignLetter+0x9b4>)
 80015e6:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80015e8:	4b75      	ldr	r3, [pc, #468]	@ (80017c0 <SignLetter+0x9b8>)
 80015ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ee:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80015f2:	3b10      	subs	r3, #16
 80015f4:	4a73      	ldr	r2, [pc, #460]	@ (80017c4 <SignLetter+0x9bc>)
 80015f6:	6013      	str	r3, [r2, #0]

	        case 'W':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80015f8:	4b73      	ldr	r3, [pc, #460]	@ (80017c8 <SignLetter+0x9c0>)
 80015fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015fe:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001602:	3b10      	subs	r3, #16
 8001604:	4a71      	ldr	r2, [pc, #452]	@ (80017cc <SignLetter+0x9c4>)
 8001606:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001608:	4b71      	ldr	r3, [pc, #452]	@ (80017d0 <SignLetter+0x9c8>)
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001612:	3b10      	subs	r3, #16
 8001614:	4a6f      	ldr	r2, [pc, #444]	@ (80017d4 <SignLetter+0x9cc>)
 8001616:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001618:	4b65      	ldr	r3, [pc, #404]	@ (80017b0 <SignLetter+0x9a8>)
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001622:	3b10      	subs	r3, #16
 8001624:	4a63      	ldr	r2, [pc, #396]	@ (80017b4 <SignLetter+0x9ac>)
 8001626:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001628:	4b63      	ldr	r3, [pc, #396]	@ (80017b8 <SignLetter+0x9b0>)
 800162a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001632:	3b10      	subs	r3, #16
 8001634:	4a61      	ldr	r2, [pc, #388]	@ (80017bc <SignLetter+0x9b4>)
 8001636:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001638:	4b61      	ldr	r3, [pc, #388]	@ (80017c0 <SignLetter+0x9b8>)
 800163a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001642:	3b10      	subs	r3, #16
 8001644:	4a5f      	ldr	r2, [pc, #380]	@ (80017c4 <SignLetter+0x9bc>)
 8001646:	6013      	str	r3, [r2, #0]

	        case 'X':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001648:	4b5f      	ldr	r3, [pc, #380]	@ (80017c8 <SignLetter+0x9c0>)
 800164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001652:	3b10      	subs	r3, #16
 8001654:	4a5d      	ldr	r2, [pc, #372]	@ (80017cc <SignLetter+0x9c4>)
 8001656:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001658:	4b5d      	ldr	r3, [pc, #372]	@ (80017d0 <SignLetter+0x9c8>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001662:	3b10      	subs	r3, #16
 8001664:	4a5b      	ldr	r2, [pc, #364]	@ (80017d4 <SignLetter+0x9cc>)
 8001666:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001668:	4b51      	ldr	r3, [pc, #324]	@ (80017b0 <SignLetter+0x9a8>)
 800166a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001672:	3b10      	subs	r3, #16
 8001674:	4a4f      	ldr	r2, [pc, #316]	@ (80017b4 <SignLetter+0x9ac>)
 8001676:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001678:	4b4f      	ldr	r3, [pc, #316]	@ (80017b8 <SignLetter+0x9b0>)
 800167a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001682:	3b10      	subs	r3, #16
 8001684:	4a4d      	ldr	r2, [pc, #308]	@ (80017bc <SignLetter+0x9b4>)
 8001686:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001688:	4b4d      	ldr	r3, [pc, #308]	@ (80017c0 <SignLetter+0x9b8>)
 800168a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001692:	3b10      	subs	r3, #16
 8001694:	4a4b      	ldr	r2, [pc, #300]	@ (80017c4 <SignLetter+0x9bc>)
 8001696:	6013      	str	r3, [r2, #0]

	        case 'Y':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001698:	4b4b      	ldr	r3, [pc, #300]	@ (80017c8 <SignLetter+0x9c0>)
 800169a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80016a2:	3b10      	subs	r3, #16
 80016a4:	4a49      	ldr	r2, [pc, #292]	@ (80017cc <SignLetter+0x9c4>)
 80016a6:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80016a8:	4b49      	ldr	r3, [pc, #292]	@ (80017d0 <SignLetter+0x9c8>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80016b2:	3b10      	subs	r3, #16
 80016b4:	4a47      	ldr	r2, [pc, #284]	@ (80017d4 <SignLetter+0x9cc>)
 80016b6:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80016b8:	4b3d      	ldr	r3, [pc, #244]	@ (80017b0 <SignLetter+0x9a8>)
 80016ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016be:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80016c2:	3b10      	subs	r3, #16
 80016c4:	4a3b      	ldr	r2, [pc, #236]	@ (80017b4 <SignLetter+0x9ac>)
 80016c6:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80016c8:	4b3b      	ldr	r3, [pc, #236]	@ (80017b8 <SignLetter+0x9b0>)
 80016ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ce:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80016d2:	3b10      	subs	r3, #16
 80016d4:	4a39      	ldr	r2, [pc, #228]	@ (80017bc <SignLetter+0x9b4>)
 80016d6:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80016d8:	4b39      	ldr	r3, [pc, #228]	@ (80017c0 <SignLetter+0x9b8>)
 80016da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016de:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80016e2:	3b10      	subs	r3, #16
 80016e4:	4a37      	ldr	r2, [pc, #220]	@ (80017c4 <SignLetter+0x9bc>)
 80016e6:	6013      	str	r3, [r2, #0]

	        case 'Z':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80016e8:	4b37      	ldr	r3, [pc, #220]	@ (80017c8 <SignLetter+0x9c0>)
 80016ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ee:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 80016f2:	3b10      	subs	r3, #16
 80016f4:	4a35      	ldr	r2, [pc, #212]	@ (80017cc <SignLetter+0x9c4>)
 80016f6:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80016f8:	4b35      	ldr	r3, [pc, #212]	@ (80017d0 <SignLetter+0x9c8>)
 80016fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fe:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001702:	3b10      	subs	r3, #16
 8001704:	4a33      	ldr	r2, [pc, #204]	@ (80017d4 <SignLetter+0x9cc>)
 8001706:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001708:	4b29      	ldr	r3, [pc, #164]	@ (80017b0 <SignLetter+0x9a8>)
 800170a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001712:	3b10      	subs	r3, #16
 8001714:	4a27      	ldr	r2, [pc, #156]	@ (80017b4 <SignLetter+0x9ac>)
 8001716:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001718:	4b27      	ldr	r3, [pc, #156]	@ (80017b8 <SignLetter+0x9b0>)
 800171a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001722:	3b10      	subs	r3, #16
 8001724:	4a25      	ldr	r2, [pc, #148]	@ (80017bc <SignLetter+0x9b4>)
 8001726:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001728:	4b25      	ldr	r3, [pc, #148]	@ (80017c0 <SignLetter+0x9b8>)
 800172a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172e:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8001732:	3b10      	subs	r3, #16
 8001734:	4a23      	ldr	r2, [pc, #140]	@ (80017c4 <SignLetter+0x9bc>)
 8001736:	6013      	str	r3, [r2, #0]

	        default:
	            // Default position (rest)
	            Servo_StopAll();
 8001738:	f7ff faf2 	bl	8000d20 <Servo_StopAll>
	            break;
 800173c:	bf00      	nop
	    }

	    Servo_SetMotion(THUMB, Direction_Decider(&thumb_desired_position), 100);
 800173e:	4823      	ldr	r0, [pc, #140]	@ (80017cc <SignLetter+0x9c4>)
 8001740:	f7ff fb4c 	bl	8000ddc <Direction_Decider>
 8001744:	4603      	mov	r3, r0
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2264      	movs	r2, #100	@ 0x64
 800174a:	4619      	mov	r1, r3
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff fa61 	bl	8000c14 <Servo_SetMotion>
	    Servo_SetMotion(INDEX, Direction_Decider(&index_desired_position), 100);
 8001752:	4820      	ldr	r0, [pc, #128]	@ (80017d4 <SignLetter+0x9cc>)
 8001754:	f7ff fb42 	bl	8000ddc <Direction_Decider>
 8001758:	4603      	mov	r3, r0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2264      	movs	r2, #100	@ 0x64
 800175e:	4619      	mov	r1, r3
 8001760:	2001      	movs	r0, #1
 8001762:	f7ff fa57 	bl	8000c14 <Servo_SetMotion>
	    Servo_SetMotion(MIDDLE, Direction_Decider(&middle_desired_position), 100);
 8001766:	4813      	ldr	r0, [pc, #76]	@ (80017b4 <SignLetter+0x9ac>)
 8001768:	f7ff fb38 	bl	8000ddc <Direction_Decider>
 800176c:	4603      	mov	r3, r0
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2264      	movs	r2, #100	@ 0x64
 8001772:	4619      	mov	r1, r3
 8001774:	2002      	movs	r0, #2
 8001776:	f7ff fa4d 	bl	8000c14 <Servo_SetMotion>
	    Servo_SetMotion(RING, Direction_Decider(&ring_desired_position), 100);
 800177a:	4810      	ldr	r0, [pc, #64]	@ (80017bc <SignLetter+0x9b4>)
 800177c:	f7ff fb2e 	bl	8000ddc <Direction_Decider>
 8001780:	4603      	mov	r3, r0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	2264      	movs	r2, #100	@ 0x64
 8001786:	4619      	mov	r1, r3
 8001788:	2003      	movs	r0, #3
 800178a:	f7ff fa43 	bl	8000c14 <Servo_SetMotion>
	    Servo_SetMotion(PINKY, Direction_Decider(&pinky_desired_position), 100);
 800178e:	480d      	ldr	r0, [pc, #52]	@ (80017c4 <SignLetter+0x9bc>)
 8001790:	f7ff fb24 	bl	8000ddc <Direction_Decider>
 8001794:	4603      	mov	r3, r0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2264      	movs	r2, #100	@ 0x64
 800179a:	4619      	mov	r1, r3
 800179c:	2004      	movs	r0, #4
 800179e:	f7ff fa39 	bl	8000c14 <Servo_SetMotion>

	    // Return to neutral position
	    Servo_StopAll();
 80017a2:	f7ff fabd 	bl	8000d20 <Servo_StopAll>
	}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000288 	.word	0x20000288
 80017b4:	20000298 	.word	0x20000298
 80017b8:	2000028a 	.word	0x2000028a
 80017bc:	2000029c 	.word	0x2000029c
 80017c0:	2000028c 	.word	0x2000028c
 80017c4:	200002a0 	.word	0x200002a0
 80017c8:	20000284 	.word	0x20000284
 80017cc:	20000290 	.word	0x20000290
 80017d0:	20000286 	.word	0x20000286
 80017d4:	20000294 	.word	0x20000294

080017d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */


	osTimerStart(Index_FingerHandle, index_current);
 80017e0:	4b19      	ldr	r3, [pc, #100]	@ (8001848 <StartDefaultTask+0x70>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a19      	ldr	r2, [pc, #100]	@ (800184c <StartDefaultTask+0x74>)
 80017e6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017ea:	4611      	mov	r1, r2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f004 fa19 	bl	8005c24 <osTimerStart>
	osTimerStart(Thumb_FingerHandle, thumb_current);
 80017f2:	4b17      	ldr	r3, [pc, #92]	@ (8001850 <StartDefaultTask+0x78>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a17      	ldr	r2, [pc, #92]	@ (8001854 <StartDefaultTask+0x7c>)
 80017f8:	f9b2 2000 	ldrsh.w	r2, [r2]
 80017fc:	4611      	mov	r1, r2
 80017fe:	4618      	mov	r0, r3
 8001800:	f004 fa10 	bl	8005c24 <osTimerStart>
	osTimerStart(Middle_FingerHandle, thumb_current);
 8001804:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <StartDefaultTask+0x80>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a12      	ldr	r2, [pc, #72]	@ (8001854 <StartDefaultTask+0x7c>)
 800180a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800180e:	4611      	mov	r1, r2
 8001810:	4618      	mov	r0, r3
 8001812:	f004 fa07 	bl	8005c24 <osTimerStart>
	osTimerStart(Ring_FingerHandle, thumb_current);
 8001816:	4b11      	ldr	r3, [pc, #68]	@ (800185c <StartDefaultTask+0x84>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a0e      	ldr	r2, [pc, #56]	@ (8001854 <StartDefaultTask+0x7c>)
 800181c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f004 f9fe 	bl	8005c24 <osTimerStart>
	osTimerStart(Pinky_FingerHandle, thumb_current);
 8001828:	4b0d      	ldr	r3, [pc, #52]	@ (8001860 <StartDefaultTask+0x88>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a09      	ldr	r2, [pc, #36]	@ (8001854 <StartDefaultTask+0x7c>)
 800182e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001832:	4611      	mov	r1, r2
 8001834:	4618      	mov	r0, r3
 8001836:	f004 f9f5 	bl	8005c24 <osTimerStart>

	SignLetter('A');
 800183a:	2041      	movs	r0, #65	@ 0x41
 800183c:	f7ff fae4 	bl	8000e08 <SignLetter>
  for(;;)
  {
    osDelay(1);
 8001840:	2001      	movs	r0, #1
 8001842:	f004 f943 	bl	8005acc <osDelay>
 8001846:	e7fb      	b.n	8001840 <StartDefaultTask+0x68>
 8001848:	20000270 	.word	0x20000270
 800184c:	20000286 	.word	0x20000286
 8001850:	20000274 	.word	0x20000274
 8001854:	20000284 	.word	0x20000284
 8001858:	20000278 	.word	0x20000278
 800185c:	2000027c 	.word	0x2000027c
 8001860:	20000280 	.word	0x20000280

08001864 <Index>:
  /* USER CODE END 5 */
}

/* Index function */
void Index(void *argument)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Index */

  /* USER CODE END Index */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <Thumb>:

/* Thumb function */
void Thumb(void *argument)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thumb */

  /* USER CODE END Thumb */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <Middle>:

/* Middle function */
void Middle(void *argument)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Middle */

  /* USER CODE END Middle */
}
 8001894:	bf00      	nop
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <Ring>:

/* Ring function */
void Ring(void *argument)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ring */

  /* USER CODE END Ring */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <Pinky>:

/* Pinky function */
void Pinky(void *argument)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Pinky */

  /* USER CODE END Pinky */
}
 80018bc:	bf00      	nop
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a04      	ldr	r2, [pc, #16]	@ (80018e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d101      	bne.n	80018de <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80018da:	f000 facf 	bl	8001e7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40000c00 	.word	0x40000c00

080018ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018f0:	b672      	cpsid	i
}
 80018f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018f4:	bf00      	nop
 80018f6:	e7fd      	b.n	80018f4 <Error_Handler+0x8>

080018f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <HAL_MspInit+0x4c>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001902:	4a10      	ldr	r2, [pc, #64]	@ (8001944 <HAL_MspInit+0x4c>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6613      	str	r3, [r2, #96]	@ 0x60
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <HAL_MspInit+0x4c>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b0b      	ldr	r3, [pc, #44]	@ (8001944 <HAL_MspInit+0x4c>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800191a:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <HAL_MspInit+0x4c>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001920:	6593      	str	r3, [r2, #88]	@ 0x58
 8001922:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <HAL_MspInit+0x4c>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001926:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800192a:	603b      	str	r3, [r7, #0]
 800192c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	210f      	movs	r1, #15
 8001932:	f06f 0001 	mvn.w	r0, #1
 8001936:	f000 fb79 	bl	800202c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193a:	bf00      	nop
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001948:	b480      	push	{r7}
 800194a:	b089      	sub	sp, #36	@ 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a2e      	ldr	r2, [pc, #184]	@ (8001a10 <HAL_TIM_PWM_MspInit+0xc8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d10c      	bne.n	8001974 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800195a:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 800195c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800195e:	4a2d      	ldr	r2, [pc, #180]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001960:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001964:	6613      	str	r3, [r2, #96]	@ 0x60
 8001966:	4b2b      	ldr	r3, [pc, #172]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800196a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800196e:	61fb      	str	r3, [r7, #28]
 8001970:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001972:	e046      	b.n	8001a02 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800197c:	d10c      	bne.n	8001998 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800197e:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001980:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001982:	4a24      	ldr	r2, [pc, #144]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6593      	str	r3, [r2, #88]	@ 0x58
 800198a:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 800198c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	61bb      	str	r3, [r7, #24]
 8001994:	69bb      	ldr	r3, [r7, #24]
}
 8001996:	e034      	b.n	8001a02 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a1e      	ldr	r2, [pc, #120]	@ (8001a18 <HAL_TIM_PWM_MspInit+0xd0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d10c      	bne.n	80019bc <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80019ae:	4b19      	ldr	r3, [pc, #100]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	617b      	str	r3, [r7, #20]
 80019b8:	697b      	ldr	r3, [r7, #20]
}
 80019ba:	e022      	b.n	8001a02 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM4)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a16      	ldr	r2, [pc, #88]	@ (8001a1c <HAL_TIM_PWM_MspInit+0xd4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d10c      	bne.n	80019e0 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019c6:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	4a12      	ldr	r2, [pc, #72]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d2:	4b10      	ldr	r3, [pc, #64]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	613b      	str	r3, [r7, #16]
 80019dc:	693b      	ldr	r3, [r7, #16]
}
 80019de:	e010      	b.n	8001a02 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM8)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001a20 <HAL_TIM_PWM_MspInit+0xd8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d10b      	bne.n	8001a02 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019ee:	4a09      	ldr	r2, [pc, #36]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 80019f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80019f6:	4b07      	ldr	r3, [pc, #28]	@ (8001a14 <HAL_TIM_PWM_MspInit+0xcc>)
 80019f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
}
 8001a02:	bf00      	nop
 8001a04:	3724      	adds	r7, #36	@ 0x24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40012c00 	.word	0x40012c00
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40000400 	.word	0x40000400
 8001a1c:	40000800 	.word	0x40000800
 8001a20:	40013400 	.word	0x40013400

08001a24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08c      	sub	sp, #48	@ 0x30
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 031c 	add.w	r3, r7, #28
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a57      	ldr	r2, [pc, #348]	@ (8001ba0 <HAL_TIM_MspPostInit+0x17c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d11e      	bne.n	8001a84 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	4b57      	ldr	r3, [pc, #348]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001a48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4a:	4a56      	ldr	r2, [pc, #344]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001a4c:	f043 0301 	orr.w	r3, r3, #1
 8001a50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a52:	4b54      	ldr	r3, [pc, #336]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001a54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	61bb      	str	r3, [r7, #24]
 8001a5c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a74:	f107 031c 	add.w	r3, r7, #28
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a7e:	f000 faff 	bl	8002080 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001a82:	e088      	b.n	8001b96 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM2)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a8c:	d11d      	bne.n	8001aca <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8e:	4b45      	ldr	r3, [pc, #276]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a92:	4a44      	ldr	r2, [pc, #272]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a9a:	4b42      	ldr	r3, [pc, #264]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	617b      	str	r3, [r7, #20]
 8001aa4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ac4:	f000 fadc 	bl	8002080 <HAL_GPIO_Init>
}
 8001ac8:	e065      	b.n	8001b96 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a36      	ldr	r2, [pc, #216]	@ (8001ba8 <HAL_TIM_MspPostInit+0x184>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d11d      	bne.n	8001b10 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ad4:	4b33      	ldr	r3, [pc, #204]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001ad6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad8:	4a32      	ldr	r2, [pc, #200]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001ada:	f043 0301 	orr.w	r3, r3, #1
 8001ade:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ae0:	4b30      	ldr	r3, [pc, #192]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae4:	f003 0301 	and.w	r3, r3, #1
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aec:	2340      	movs	r3, #64	@ 0x40
 8001aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001afc:	2302      	movs	r3, #2
 8001afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b00:	f107 031c 	add.w	r3, r7, #28
 8001b04:	4619      	mov	r1, r3
 8001b06:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b0a:	f000 fab9 	bl	8002080 <HAL_GPIO_Init>
}
 8001b0e:	e042      	b.n	8001b96 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a25      	ldr	r2, [pc, #148]	@ (8001bac <HAL_TIM_MspPostInit+0x188>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d11c      	bne.n	8001b54 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b1e:	4a21      	ldr	r2, [pc, #132]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001b20:	f043 0302 	orr.w	r3, r3, #2
 8001b24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b32:	2340      	movs	r3, #64	@ 0x40
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b42:	2302      	movs	r3, #2
 8001b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	f107 031c 	add.w	r3, r7, #28
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4818      	ldr	r0, [pc, #96]	@ (8001bb0 <HAL_TIM_MspPostInit+0x18c>)
 8001b4e:	f000 fa97 	bl	8002080 <HAL_GPIO_Init>
}
 8001b52:	e020      	b.n	8001b96 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM8)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a16      	ldr	r2, [pc, #88]	@ (8001bb4 <HAL_TIM_MspPostInit+0x190>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d11b      	bne.n	8001b96 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b5e:	4b11      	ldr	r3, [pc, #68]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b62:	4a10      	ldr	r2, [pc, #64]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001b64:	f043 0304 	orr.w	r3, r3, #4
 8001b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <HAL_TIM_MspPostInit+0x180>)
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b6e:	f003 0304 	and.w	r3, r3, #4
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b76:	2340      	movs	r3, #64	@ 0x40
 8001b78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001b86:	2303      	movs	r3, #3
 8001b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4809      	ldr	r0, [pc, #36]	@ (8001bb8 <HAL_TIM_MspPostInit+0x194>)
 8001b92:	f000 fa75 	bl	8002080 <HAL_GPIO_Init>
}
 8001b96:	bf00      	nop
 8001b98:	3730      	adds	r7, #48	@ 0x30
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40000400 	.word	0x40000400
 8001bac:	40000800 	.word	0x40000800
 8001bb0:	48000400 	.word	0x48000400
 8001bb4:	40013400 	.word	0x40013400
 8001bb8:	48000800 	.word	0x48000800

08001bbc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b0ac      	sub	sp, #176	@ 0xb0
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bd4:	f107 0314 	add.w	r3, r7, #20
 8001bd8:	2288      	movs	r2, #136	@ 0x88
 8001bda:	2100      	movs	r1, #0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f006 fd9b 	bl	8008718 <memset>
  if(huart->Instance==USART2)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a25      	ldr	r2, [pc, #148]	@ (8001c7c <HAL_UART_MspInit+0xc0>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d143      	bne.n	8001c74 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf4:	f107 0314 	add.w	r3, r7, #20
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f001 fa99 	bl	8003130 <HAL_RCCEx_PeriphCLKConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c04:	f7ff fe72 	bl	80018ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c08:	4b1d      	ldr	r3, [pc, #116]	@ (8001c80 <HAL_UART_MspInit+0xc4>)
 8001c0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001c80 <HAL_UART_MspInit+0xc4>)
 8001c0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c12:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c14:	4b1a      	ldr	r3, [pc, #104]	@ (8001c80 <HAL_UART_MspInit+0xc4>)
 8001c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b17      	ldr	r3, [pc, #92]	@ (8001c80 <HAL_UART_MspInit+0xc4>)
 8001c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c24:	4a16      	ldr	r2, [pc, #88]	@ (8001c80 <HAL_UART_MspInit+0xc4>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c2c:	4b14      	ldr	r3, [pc, #80]	@ (8001c80 <HAL_UART_MspInit+0xc4>)
 8001c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	60fb      	str	r3, [r7, #12]
 8001c36:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c38:	230c      	movs	r3, #12
 8001c3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c44:	2300      	movs	r3, #0
 8001c46:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c50:	2307      	movs	r3, #7
 8001c52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c56:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c60:	f000 fa0e 	bl	8002080 <HAL_GPIO_Init>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2100      	movs	r1, #0
 8001c68:	2026      	movs	r0, #38	@ 0x26
 8001c6a:	f000 f9df 	bl	800202c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c6e:	2026      	movs	r0, #38	@ 0x26
 8001c70:	f000 f9f8 	bl	8002064 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001c74:	bf00      	nop
 8001c76:	37b0      	adds	r7, #176	@ 0xb0
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40004400 	.word	0x40004400
 8001c80:	40021000 	.word	0x40021000

08001c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08e      	sub	sp, #56	@ 0x38
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001c92:	4b34      	ldr	r3, [pc, #208]	@ (8001d64 <HAL_InitTick+0xe0>)
 8001c94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c96:	4a33      	ldr	r2, [pc, #204]	@ (8001d64 <HAL_InitTick+0xe0>)
 8001c98:	f043 0308 	orr.w	r3, r3, #8
 8001c9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c9e:	4b31      	ldr	r3, [pc, #196]	@ (8001d64 <HAL_InitTick+0xe0>)
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	60fb      	str	r3, [r7, #12]
 8001ca8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001caa:	f107 0210 	add.w	r2, r7, #16
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4611      	mov	r1, r2
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f001 f9a9 	bl	800300c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cba:	6a3b      	ldr	r3, [r7, #32]
 8001cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d103      	bne.n	8001ccc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cc4:	f001 f976 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8001cc8:	6378      	str	r0, [r7, #52]	@ 0x34
 8001cca:	e004      	b.n	8001cd6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001ccc:	f001 f972 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd8:	4a23      	ldr	r2, [pc, #140]	@ (8001d68 <HAL_InitTick+0xe4>)
 8001cda:	fba2 2303 	umull	r2, r3, r2, r3
 8001cde:	0c9b      	lsrs	r3, r3, #18
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001ce4:	4b21      	ldr	r3, [pc, #132]	@ (8001d6c <HAL_InitTick+0xe8>)
 8001ce6:	4a22      	ldr	r2, [pc, #136]	@ (8001d70 <HAL_InitTick+0xec>)
 8001ce8:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001cea:	4b20      	ldr	r3, [pc, #128]	@ (8001d6c <HAL_InitTick+0xe8>)
 8001cec:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cf0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d6c <HAL_InitTick+0xe8>)
 8001cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d6c <HAL_InitTick+0xe8>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8001d6c <HAL_InitTick+0xe8>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d04:	4b19      	ldr	r3, [pc, #100]	@ (8001d6c <HAL_InitTick+0xe8>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001d0a:	4818      	ldr	r0, [pc, #96]	@ (8001d6c <HAL_InitTick+0xe8>)
 8001d0c:	f001 fecc 	bl	8003aa8 <HAL_TIM_Base_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d16:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d11b      	bne.n	8001d56 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001d1e:	4813      	ldr	r0, [pc, #76]	@ (8001d6c <HAL_InitTick+0xe8>)
 8001d20:	f001 ff24 	bl	8003b6c <HAL_TIM_Base_Start_IT>
 8001d24:	4603      	mov	r3, r0
 8001d26:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d2a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d111      	bne.n	8001d56 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d32:	2032      	movs	r0, #50	@ 0x32
 8001d34:	f000 f996 	bl	8002064 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b0f      	cmp	r3, #15
 8001d3c:	d808      	bhi.n	8001d50 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	6879      	ldr	r1, [r7, #4]
 8001d42:	2032      	movs	r0, #50	@ 0x32
 8001d44:	f000 f972 	bl	800202c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d48:	4a0a      	ldr	r2, [pc, #40]	@ (8001d74 <HAL_InitTick+0xf0>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e002      	b.n	8001d56 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d56:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3738      	adds	r7, #56	@ 0x38
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000
 8001d68:	431bde83 	.word	0x431bde83
 8001d6c:	200002a4 	.word	0x200002a4
 8001d70:	40000c00 	.word	0x40000c00
 8001d74:	20000040 	.word	0x20000040

08001d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <NMI_Handler+0x4>

08001d80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <HardFault_Handler+0x4>

08001d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8c:	bf00      	nop
 8001d8e:	e7fd      	b.n	8001d8c <MemManage_Handler+0x4>

08001d90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d94:	bf00      	nop
 8001d96:	e7fd      	b.n	8001d94 <BusFault_Handler+0x4>

08001d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d9c:	bf00      	nop
 8001d9e:	e7fd      	b.n	8001d9c <UsageFault_Handler+0x4>

08001da0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001db4:	4802      	ldr	r0, [pc, #8]	@ (8001dc0 <TIM5_IRQHandler+0x10>)
 8001db6:	f002 f93d 	bl	8004034 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	200002a4 	.word	0x200002a4

08001dc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dc8:	4b06      	ldr	r3, [pc, #24]	@ (8001de4 <SystemInit+0x20>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dce:	4a05      	ldr	r2, [pc, #20]	@ (8001de4 <SystemInit+0x20>)
 8001dd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dec:	f7ff ffea 	bl	8001dc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <LoopForever+0x6>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	@ (8001e28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <LoopForever+0xe>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	@ (8001e34 <LoopForever+0x16>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e16:	f006 fc87 	bl	8008728 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e1a:	f7fe fb6f 	bl	80004fc <main>

08001e1e <LoopForever>:

LoopForever:
    b LoopForever
 8001e1e:	e7fe      	b.n	8001e1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e20:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001e2c:	08008950 	.word	0x08008950
  ldr r2, =_sbss
 8001e30:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001e34:	20001bfc 	.word	0x20001bfc

08001e38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_2_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e42:	2300      	movs	r3, #0
 8001e44:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e46:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <HAL_Init+0x3c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001e78 <HAL_Init+0x3c>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e50:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e52:	2003      	movs	r0, #3
 8001e54:	f000 f8df 	bl	8002016 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e58:	200f      	movs	r0, #15
 8001e5a:	f7ff ff13 	bl	8001c84 <HAL_InitTick>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d002      	beq.n	8001e6a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	71fb      	strb	r3, [r7, #7]
 8001e68:	e001      	b.n	8001e6e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e6a:	f7ff fd45 	bl	80018f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40022000 	.word	0x40022000

08001e7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <HAL_IncTick+0x20>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	461a      	mov	r2, r3
 8001e86:	4b06      	ldr	r3, [pc, #24]	@ (8001ea0 <HAL_IncTick+0x24>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	4a04      	ldr	r2, [pc, #16]	@ (8001ea0 <HAL_IncTick+0x24>)
 8001e8e:	6013      	str	r3, [r2, #0]
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000044 	.word	0x20000044
 8001ea0:	200002f0 	.word	0x200002f0

08001ea4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_GetTick+0x14>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200002f0 	.word	0x200002f0

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4907      	ldr	r1, [pc, #28]	@ (8001f58 <__NVIC_EnableIRQ+0x38>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	e000e100 	.word	0xe000e100

08001f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	db0a      	blt.n	8001f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	b2da      	uxtb	r2, r3
 8001f74:	490c      	ldr	r1, [pc, #48]	@ (8001fa8 <__NVIC_SetPriority+0x4c>)
 8001f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f7a:	0112      	lsls	r2, r2, #4
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	440b      	add	r3, r1
 8001f80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f84:	e00a      	b.n	8001f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	b2da      	uxtb	r2, r3
 8001f8a:	4908      	ldr	r1, [pc, #32]	@ (8001fac <__NVIC_SetPriority+0x50>)
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	3b04      	subs	r3, #4
 8001f94:	0112      	lsls	r2, r2, #4
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	440b      	add	r3, r1
 8001f9a:	761a      	strb	r2, [r3, #24]
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	e000e100 	.word	0xe000e100
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b089      	sub	sp, #36	@ 0x24
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f1c3 0307 	rsb	r3, r3, #7
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	bf28      	it	cs
 8001fce:	2304      	movcs	r3, #4
 8001fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	3304      	adds	r3, #4
 8001fd6:	2b06      	cmp	r3, #6
 8001fd8:	d902      	bls.n	8001fe0 <NVIC_EncodePriority+0x30>
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	3b03      	subs	r3, #3
 8001fde:	e000      	b.n	8001fe2 <NVIC_EncodePriority+0x32>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8002002:	43d9      	mvns	r1, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002008:	4313      	orrs	r3, r2
         );
}
 800200a:	4618      	mov	r0, r3
 800200c:	3724      	adds	r7, #36	@ 0x24
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ff4c 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
 8002038:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800203e:	f7ff ff61 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002042:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	68b9      	ldr	r1, [r7, #8]
 8002048:	6978      	ldr	r0, [r7, #20]
 800204a:	f7ff ffb1 	bl	8001fb0 <NVIC_EncodePriority>
 800204e:	4602      	mov	r2, r0
 8002050:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff ff80 	bl	8001f5c <__NVIC_SetPriority>
}
 800205c:	bf00      	nop
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff ff54 	bl	8001f20 <__NVIC_EnableIRQ>
}
 8002078:	bf00      	nop
 800207a:	3708      	adds	r7, #8
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002080:	b480      	push	{r7}
 8002082:	b087      	sub	sp, #28
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800208a:	2300      	movs	r3, #0
 800208c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800208e:	e17f      	b.n	8002390 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	2101      	movs	r1, #1
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	fa01 f303 	lsl.w	r3, r1, r3
 800209c:	4013      	ands	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 8171 	beq.w	800238a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d005      	beq.n	80020c0 <HAL_GPIO_Init+0x40>
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d130      	bne.n	8002122 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2203      	movs	r2, #3
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	693a      	ldr	r2, [r7, #16]
 80020d4:	4013      	ands	r3, r2
 80020d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68da      	ldr	r2, [r3, #12]
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	693a      	ldr	r2, [r7, #16]
 80020ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80020f6:	2201      	movs	r2, #1
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43db      	mvns	r3, r3
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4013      	ands	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	f003 0201 	and.w	r2, r3, #1
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	693a      	ldr	r2, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	693a      	ldr	r2, [r7, #16]
 8002120:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b03      	cmp	r3, #3
 800212c:	d118      	bne.n	8002160 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002132:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002134:	2201      	movs	r2, #1
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	08db      	lsrs	r3, r3, #3
 800214a:	f003 0201 	and.w	r2, r3, #1
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	693a      	ldr	r2, [r7, #16]
 800215e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	2b03      	cmp	r3, #3
 800216a:	d017      	beq.n	800219c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	2203      	movs	r2, #3
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	4013      	ands	r3, r2
 8002182:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	693a      	ldr	r2, [r7, #16]
 8002192:	4313      	orrs	r3, r2
 8002194:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d123      	bne.n	80021f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	08da      	lsrs	r2, r3, #3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3208      	adds	r2, #8
 80021b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	220f      	movs	r2, #15
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4013      	ands	r3, r2
 80021ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	691a      	ldr	r2, [r3, #16]
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	f003 0307 	and.w	r3, r3, #7
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	4313      	orrs	r3, r2
 80021e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	08da      	lsrs	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3208      	adds	r2, #8
 80021ea:	6939      	ldr	r1, [r7, #16]
 80021ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	4013      	ands	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0203 	and.w	r2, r3, #3
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	693a      	ldr	r2, [r7, #16]
 8002222:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800222c:	2b00      	cmp	r3, #0
 800222e:	f000 80ac 	beq.w	800238a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002232:	4b5f      	ldr	r3, [pc, #380]	@ (80023b0 <HAL_GPIO_Init+0x330>)
 8002234:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002236:	4a5e      	ldr	r2, [pc, #376]	@ (80023b0 <HAL_GPIO_Init+0x330>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6613      	str	r3, [r2, #96]	@ 0x60
 800223e:	4b5c      	ldr	r3, [pc, #368]	@ (80023b0 <HAL_GPIO_Init+0x330>)
 8002240:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60bb      	str	r3, [r7, #8]
 8002248:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800224a:	4a5a      	ldr	r2, [pc, #360]	@ (80023b4 <HAL_GPIO_Init+0x334>)
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3302      	adds	r3, #2
 8002252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002256:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f003 0303 	and.w	r3, r3, #3
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	220f      	movs	r2, #15
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002274:	d025      	beq.n	80022c2 <HAL_GPIO_Init+0x242>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a4f      	ldr	r2, [pc, #316]	@ (80023b8 <HAL_GPIO_Init+0x338>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01f      	beq.n	80022be <HAL_GPIO_Init+0x23e>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a4e      	ldr	r2, [pc, #312]	@ (80023bc <HAL_GPIO_Init+0x33c>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d019      	beq.n	80022ba <HAL_GPIO_Init+0x23a>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a4d      	ldr	r2, [pc, #308]	@ (80023c0 <HAL_GPIO_Init+0x340>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <HAL_GPIO_Init+0x236>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a4c      	ldr	r2, [pc, #304]	@ (80023c4 <HAL_GPIO_Init+0x344>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00d      	beq.n	80022b2 <HAL_GPIO_Init+0x232>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a4b      	ldr	r2, [pc, #300]	@ (80023c8 <HAL_GPIO_Init+0x348>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d007      	beq.n	80022ae <HAL_GPIO_Init+0x22e>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a4a      	ldr	r2, [pc, #296]	@ (80023cc <HAL_GPIO_Init+0x34c>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d101      	bne.n	80022aa <HAL_GPIO_Init+0x22a>
 80022a6:	2306      	movs	r3, #6
 80022a8:	e00c      	b.n	80022c4 <HAL_GPIO_Init+0x244>
 80022aa:	2307      	movs	r3, #7
 80022ac:	e00a      	b.n	80022c4 <HAL_GPIO_Init+0x244>
 80022ae:	2305      	movs	r3, #5
 80022b0:	e008      	b.n	80022c4 <HAL_GPIO_Init+0x244>
 80022b2:	2304      	movs	r3, #4
 80022b4:	e006      	b.n	80022c4 <HAL_GPIO_Init+0x244>
 80022b6:	2303      	movs	r3, #3
 80022b8:	e004      	b.n	80022c4 <HAL_GPIO_Init+0x244>
 80022ba:	2302      	movs	r3, #2
 80022bc:	e002      	b.n	80022c4 <HAL_GPIO_Init+0x244>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <HAL_GPIO_Init+0x244>
 80022c2:	2300      	movs	r3, #0
 80022c4:	697a      	ldr	r2, [r7, #20]
 80022c6:	f002 0203 	and.w	r2, r2, #3
 80022ca:	0092      	lsls	r2, r2, #2
 80022cc:	4093      	lsls	r3, r2
 80022ce:	693a      	ldr	r2, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022d4:	4937      	ldr	r1, [pc, #220]	@ (80023b4 <HAL_GPIO_Init+0x334>)
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	089b      	lsrs	r3, r3, #2
 80022da:	3302      	adds	r3, #2
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80022e2:	4b3b      	ldr	r3, [pc, #236]	@ (80023d0 <HAL_GPIO_Init+0x350>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	43db      	mvns	r3, r3
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4013      	ands	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4313      	orrs	r3, r2
 8002304:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002306:	4a32      	ldr	r2, [pc, #200]	@ (80023d0 <HAL_GPIO_Init+0x350>)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800230c:	4b30      	ldr	r3, [pc, #192]	@ (80023d0 <HAL_GPIO_Init+0x350>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	4313      	orrs	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002330:	4a27      	ldr	r2, [pc, #156]	@ (80023d0 <HAL_GPIO_Init+0x350>)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002336:	4b26      	ldr	r3, [pc, #152]	@ (80023d0 <HAL_GPIO_Init+0x350>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	43db      	mvns	r3, r3
 8002340:	693a      	ldr	r2, [r7, #16]
 8002342:	4013      	ands	r3, r2
 8002344:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	4313      	orrs	r3, r2
 8002358:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800235a:	4a1d      	ldr	r2, [pc, #116]	@ (80023d0 <HAL_GPIO_Init+0x350>)
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002360:	4b1b      	ldr	r3, [pc, #108]	@ (80023d0 <HAL_GPIO_Init+0x350>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	43db      	mvns	r3, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	4313      	orrs	r3, r2
 8002382:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002384:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <HAL_GPIO_Init+0x350>)
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa22 f303 	lsr.w	r3, r2, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	f47f ae78 	bne.w	8002090 <HAL_GPIO_Init+0x10>
  }
}
 80023a0:	bf00      	nop
 80023a2:	bf00      	nop
 80023a4:	371c      	adds	r7, #28
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr
 80023ae:	bf00      	nop
 80023b0:	40021000 	.word	0x40021000
 80023b4:	40010000 	.word	0x40010000
 80023b8:	48000400 	.word	0x48000400
 80023bc:	48000800 	.word	0x48000800
 80023c0:	48000c00 	.word	0x48000c00
 80023c4:	48001000 	.word	0x48001000
 80023c8:	48001400 	.word	0x48001400
 80023cc:	48001800 	.word	0x48001800
 80023d0:	40010400 	.word	0x40010400

080023d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
 80023e0:	4613      	mov	r3, r2
 80023e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e4:	787b      	ldrb	r3, [r7, #1]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80023f0:	e002      	b.n	80023f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023f2:	887a      	ldrh	r2, [r7, #2]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002408:	4b04      	ldr	r3, [pc, #16]	@ (800241c <HAL_PWREx_GetVoltageRange+0x18>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40007000 	.word	0x40007000

08002420 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800242e:	d130      	bne.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002430:	4b23      	ldr	r3, [pc, #140]	@ (80024c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800243c:	d038      	beq.n	80024b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800243e:	4b20      	ldr	r3, [pc, #128]	@ (80024c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002446:	4a1e      	ldr	r2, [pc, #120]	@ (80024c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002448:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800244c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800244e:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2232      	movs	r2, #50	@ 0x32
 8002454:	fb02 f303 	mul.w	r3, r2, r3
 8002458:	4a1b      	ldr	r2, [pc, #108]	@ (80024c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	0c9b      	lsrs	r3, r3, #18
 8002460:	3301      	adds	r3, #1
 8002462:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002464:	e002      	b.n	800246c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	3b01      	subs	r3, #1
 800246a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800246c:	4b14      	ldr	r3, [pc, #80]	@ (80024c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800246e:	695b      	ldr	r3, [r3, #20]
 8002470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002474:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002478:	d102      	bne.n	8002480 <HAL_PWREx_ControlVoltageScaling+0x60>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1f2      	bne.n	8002466 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002480:	4b0f      	ldr	r3, [pc, #60]	@ (80024c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002488:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800248c:	d110      	bne.n	80024b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e00f      	b.n	80024b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002492:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800249a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800249e:	d007      	beq.n	80024b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024a0:	4b07      	ldr	r3, [pc, #28]	@ (80024c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024a8:	4a05      	ldr	r2, [pc, #20]	@ (80024c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	40007000 	.word	0x40007000
 80024c4:	2000003c 	.word	0x2000003c
 80024c8:	431bde83 	.word	0x431bde83

080024cc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d101      	bne.n	80024de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e3ca      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024de:	4b97      	ldr	r3, [pc, #604]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 030c 	and.w	r3, r3, #12
 80024e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024e8:	4b94      	ldr	r3, [pc, #592]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80e4 	beq.w	80026c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d007      	beq.n	8002516 <HAL_RCC_OscConfig+0x4a>
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b0c      	cmp	r3, #12
 800250a:	f040 808b 	bne.w	8002624 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	2b01      	cmp	r3, #1
 8002512:	f040 8087 	bne.w	8002624 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002516:	4b89      	ldr	r3, [pc, #548]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_RCC_OscConfig+0x62>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d101      	bne.n	800252e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	e3a2      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1a      	ldr	r2, [r3, #32]
 8002532:	4b82      	ldr	r3, [pc, #520]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d004      	beq.n	8002548 <HAL_RCC_OscConfig+0x7c>
 800253e:	4b7f      	ldr	r3, [pc, #508]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002546:	e005      	b.n	8002554 <HAL_RCC_OscConfig+0x88>
 8002548:	4b7c      	ldr	r3, [pc, #496]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 800254a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800254e:	091b      	lsrs	r3, r3, #4
 8002550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002554:	4293      	cmp	r3, r2
 8002556:	d223      	bcs.n	80025a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	4618      	mov	r0, r3
 800255e:	f000 fd87 	bl	8003070 <RCC_SetFlashLatencyFromMSIRange>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e383      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800256c:	4b73      	ldr	r3, [pc, #460]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a72      	ldr	r2, [pc, #456]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002572:	f043 0308 	orr.w	r3, r3, #8
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b70      	ldr	r3, [pc, #448]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	496d      	ldr	r1, [pc, #436]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002586:	4313      	orrs	r3, r2
 8002588:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800258a:	4b6c      	ldr	r3, [pc, #432]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	021b      	lsls	r3, r3, #8
 8002598:	4968      	ldr	r1, [pc, #416]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
 800259e:	e025      	b.n	80025ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a0:	4b66      	ldr	r3, [pc, #408]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a65      	ldr	r2, [pc, #404]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 80025a6:	f043 0308 	orr.w	r3, r3, #8
 80025aa:	6013      	str	r3, [r2, #0]
 80025ac:	4b63      	ldr	r3, [pc, #396]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	4960      	ldr	r1, [pc, #384]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025be:	4b5f      	ldr	r3, [pc, #380]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	021b      	lsls	r3, r3, #8
 80025cc:	495b      	ldr	r1, [pc, #364]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 80025ce:	4313      	orrs	r3, r2
 80025d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d109      	bne.n	80025ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fd47 	bl	8003070 <RCC_SetFlashLatencyFromMSIRange>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e343      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025ec:	f000 fc4a 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b52      	ldr	r3, [pc, #328]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	4950      	ldr	r1, [pc, #320]	@ (8002740 <HAL_RCC_OscConfig+0x274>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	f003 031f 	and.w	r3, r3, #31
 8002604:	fa22 f303 	lsr.w	r3, r2, r3
 8002608:	4a4e      	ldr	r2, [pc, #312]	@ (8002744 <HAL_RCC_OscConfig+0x278>)
 800260a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800260c:	4b4e      	ldr	r3, [pc, #312]	@ (8002748 <HAL_RCC_OscConfig+0x27c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff fb37 	bl	8001c84 <HAL_InitTick>
 8002616:	4603      	mov	r3, r0
 8002618:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d052      	beq.n	80026c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002620:	7bfb      	ldrb	r3, [r7, #15]
 8002622:	e327      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d032      	beq.n	8002692 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800262c:	4b43      	ldr	r3, [pc, #268]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a42      	ldr	r2, [pc, #264]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002638:	f7ff fc34 	bl	8001ea4 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002640:	f7ff fc30 	bl	8001ea4 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e310      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002652:	4b3a      	ldr	r3, [pc, #232]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0302 	and.w	r3, r3, #2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800265e:	4b37      	ldr	r3, [pc, #220]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a36      	ldr	r2, [pc, #216]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002664:	f043 0308 	orr.w	r3, r3, #8
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	4b34      	ldr	r3, [pc, #208]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a1b      	ldr	r3, [r3, #32]
 8002676:	4931      	ldr	r1, [pc, #196]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002678:	4313      	orrs	r3, r2
 800267a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800267c:	4b2f      	ldr	r3, [pc, #188]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	021b      	lsls	r3, r3, #8
 800268a:	492c      	ldr	r1, [pc, #176]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 800268c:	4313      	orrs	r3, r2
 800268e:	604b      	str	r3, [r1, #4]
 8002690:	e01a      	b.n	80026c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002692:	4b2a      	ldr	r3, [pc, #168]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a29      	ldr	r2, [pc, #164]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002698:	f023 0301 	bic.w	r3, r3, #1
 800269c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800269e:	f7ff fc01 	bl	8001ea4 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a6:	f7ff fbfd 	bl	8001ea4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e2dd      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026b8:	4b20      	ldr	r3, [pc, #128]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1f0      	bne.n	80026a6 <HAL_RCC_OscConfig+0x1da>
 80026c4:	e000      	b.n	80026c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0301 	and.w	r3, r3, #1
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d074      	beq.n	80027be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d005      	beq.n	80026e6 <HAL_RCC_OscConfig+0x21a>
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2b0c      	cmp	r3, #12
 80026de:	d10e      	bne.n	80026fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	2b03      	cmp	r3, #3
 80026e4:	d10b      	bne.n	80026fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e6:	4b15      	ldr	r3, [pc, #84]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d064      	beq.n	80027bc <HAL_RCC_OscConfig+0x2f0>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d160      	bne.n	80027bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e2ba      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x24a>
 8002708:	4b0c      	ldr	r3, [pc, #48]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a0b      	ldr	r2, [pc, #44]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 800270e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	e026      	b.n	8002764 <HAL_RCC_OscConfig+0x298>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800271e:	d115      	bne.n	800274c <HAL_RCC_OscConfig+0x280>
 8002720:	4b06      	ldr	r3, [pc, #24]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a05      	ldr	r2, [pc, #20]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002726:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800272a:	6013      	str	r3, [r2, #0]
 800272c:	4b03      	ldr	r3, [pc, #12]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a02      	ldr	r2, [pc, #8]	@ (800273c <HAL_RCC_OscConfig+0x270>)
 8002732:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	e014      	b.n	8002764 <HAL_RCC_OscConfig+0x298>
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	080088f8 	.word	0x080088f8
 8002744:	2000003c 	.word	0x2000003c
 8002748:	20000040 	.word	0x20000040
 800274c:	4ba0      	ldr	r3, [pc, #640]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a9f      	ldr	r2, [pc, #636]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b9d      	ldr	r3, [pc, #628]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a9c      	ldr	r2, [pc, #624]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 800275e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d013      	beq.n	8002794 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276c:	f7ff fb9a 	bl	8001ea4 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff fb96 	bl	8001ea4 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	@ 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e276      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002786:	4b92      	ldr	r3, [pc, #584]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x2a8>
 8002792:	e014      	b.n	80027be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002794:	f7ff fb86 	bl	8001ea4 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800279a:	e008      	b.n	80027ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800279c:	f7ff fb82 	bl	8001ea4 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	@ 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e262      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027ae:	4b88      	ldr	r3, [pc, #544]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d1f0      	bne.n	800279c <HAL_RCC_OscConfig+0x2d0>
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d060      	beq.n	800288c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_OscConfig+0x310>
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	2b0c      	cmp	r3, #12
 80027d4:	d119      	bne.n	800280a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d116      	bne.n	800280a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027dc:	4b7c      	ldr	r3, [pc, #496]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_OscConfig+0x328>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e23f      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027f4:	4b76      	ldr	r3, [pc, #472]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	061b      	lsls	r3, r3, #24
 8002802:	4973      	ldr	r1, [pc, #460]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002804:	4313      	orrs	r3, r2
 8002806:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002808:	e040      	b.n	800288c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d023      	beq.n	800285a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002812:	4b6f      	ldr	r3, [pc, #444]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a6e      	ldr	r2, [pc, #440]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800281c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800281e:	f7ff fb41 	bl	8001ea4 <HAL_GetTick>
 8002822:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002826:	f7ff fb3d 	bl	8001ea4 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e21d      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002838:	4b65      	ldr	r3, [pc, #404]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002844:	4b62      	ldr	r3, [pc, #392]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	061b      	lsls	r3, r3, #24
 8002852:	495f      	ldr	r1, [pc, #380]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
 8002858:	e018      	b.n	800288c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800285a:	4b5d      	ldr	r3, [pc, #372]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a5c      	ldr	r2, [pc, #368]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002866:	f7ff fb1d 	bl	8001ea4 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800286e:	f7ff fb19 	bl	8001ea4 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e1f9      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002880:	4b53      	ldr	r3, [pc, #332]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0308 	and.w	r3, r3, #8
 8002894:	2b00      	cmp	r3, #0
 8002896:	d03c      	beq.n	8002912 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01c      	beq.n	80028da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a0:	4b4b      	ldr	r3, [pc, #300]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 80028a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028a6:	4a4a      	ldr	r2, [pc, #296]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7ff faf8 	bl	8001ea4 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7ff faf4 	bl	8001ea4 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e1d4      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ca:	4b41      	ldr	r3, [pc, #260]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 80028cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d0ef      	beq.n	80028b8 <HAL_RCC_OscConfig+0x3ec>
 80028d8:	e01b      	b.n	8002912 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028da:	4b3d      	ldr	r3, [pc, #244]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 80028dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80028e0:	4a3b      	ldr	r2, [pc, #236]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ea:	f7ff fadb 	bl	8001ea4 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f2:	f7ff fad7 	bl	8001ea4 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e1b7      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002904:	4b32      	ldr	r3, [pc, #200]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1ef      	bne.n	80028f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 80a6 	beq.w	8002a6c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002920:	2300      	movs	r3, #0
 8002922:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002924:	4b2a      	ldr	r3, [pc, #168]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002928:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d10d      	bne.n	800294c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002930:	4b27      	ldr	r3, [pc, #156]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002934:	4a26      	ldr	r2, [pc, #152]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800293a:	6593      	str	r3, [r2, #88]	@ 0x58
 800293c:	4b24      	ldr	r3, [pc, #144]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 800293e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002940:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002944:	60bb      	str	r3, [r7, #8]
 8002946:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002948:	2301      	movs	r3, #1
 800294a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800294c:	4b21      	ldr	r3, [pc, #132]	@ (80029d4 <HAL_RCC_OscConfig+0x508>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d118      	bne.n	800298a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002958:	4b1e      	ldr	r3, [pc, #120]	@ (80029d4 <HAL_RCC_OscConfig+0x508>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a1d      	ldr	r2, [pc, #116]	@ (80029d4 <HAL_RCC_OscConfig+0x508>)
 800295e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002962:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002964:	f7ff fa9e 	bl	8001ea4 <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800296c:	f7ff fa9a 	bl	8001ea4 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e17a      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800297e:	4b15      	ldr	r3, [pc, #84]	@ (80029d4 <HAL_RCC_OscConfig+0x508>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b01      	cmp	r3, #1
 8002990:	d108      	bne.n	80029a4 <HAL_RCC_OscConfig+0x4d8>
 8002992:	4b0f      	ldr	r3, [pc, #60]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 8002994:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002998:	4a0d      	ldr	r2, [pc, #52]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 800299a:	f043 0301 	orr.w	r3, r3, #1
 800299e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029a2:	e029      	b.n	80029f8 <HAL_RCC_OscConfig+0x52c>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d115      	bne.n	80029d8 <HAL_RCC_OscConfig+0x50c>
 80029ac:	4b08      	ldr	r3, [pc, #32]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029b2:	4a07      	ldr	r2, [pc, #28]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 80029be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029c2:	4a03      	ldr	r2, [pc, #12]	@ (80029d0 <HAL_RCC_OscConfig+0x504>)
 80029c4:	f043 0301 	orr.w	r3, r3, #1
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029cc:	e014      	b.n	80029f8 <HAL_RCC_OscConfig+0x52c>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	40007000 	.word	0x40007000
 80029d8:	4b9c      	ldr	r3, [pc, #624]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 80029da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029de:	4a9b      	ldr	r2, [pc, #620]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 80029e0:	f023 0301 	bic.w	r3, r3, #1
 80029e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80029e8:	4b98      	ldr	r3, [pc, #608]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ee:	4a97      	ldr	r2, [pc, #604]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 80029f0:	f023 0304 	bic.w	r3, r3, #4
 80029f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d016      	beq.n	8002a2e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a00:	f7ff fa50 	bl	8001ea4 <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a06:	e00a      	b.n	8002a1e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a08:	f7ff fa4c 	bl	8001ea4 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d901      	bls.n	8002a1e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	e12a      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a1e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0ed      	beq.n	8002a08 <HAL_RCC_OscConfig+0x53c>
 8002a2c:	e015      	b.n	8002a5a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2e:	f7ff fa39 	bl	8001ea4 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a34:	e00a      	b.n	8002a4c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a36:	f7ff fa35 	bl	8001ea4 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e113      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a4c:	4b7f      	ldr	r3, [pc, #508]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1ed      	bne.n	8002a36 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a5a:	7ffb      	ldrb	r3, [r7, #31]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a60:	4b7a      	ldr	r3, [pc, #488]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a64:	4a79      	ldr	r2, [pc, #484]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002a66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80fe 	beq.w	8002c72 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	f040 80d0 	bne.w	8002c20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a80:	4b72      	ldr	r3, [pc, #456]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	f003 0203 	and.w	r2, r3, #3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d130      	bne.n	8002af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d127      	bne.n	8002af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ab0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d11f      	bne.n	8002af6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ac0:	2a07      	cmp	r2, #7
 8002ac2:	bf14      	ite	ne
 8002ac4:	2201      	movne	r2, #1
 8002ac6:	2200      	moveq	r2, #0
 8002ac8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d113      	bne.n	8002af6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ad8:	085b      	lsrs	r3, r3, #1
 8002ada:	3b01      	subs	r3, #1
 8002adc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	085b      	lsrs	r3, r3, #1
 8002aee:	3b01      	subs	r3, #1
 8002af0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d06e      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	2b0c      	cmp	r3, #12
 8002afa:	d069      	beq.n	8002bd0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002afc:	4b53      	ldr	r3, [pc, #332]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d105      	bne.n	8002b14 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b08:	4b50      	ldr	r3, [pc, #320]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e0ad      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b18:	4b4c      	ldr	r3, [pc, #304]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a4b      	ldr	r2, [pc, #300]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002b1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b22:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b24:	f7ff f9be 	bl	8001ea4 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b2c:	f7ff f9ba 	bl	8001ea4 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e09a      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b3e:	4b43      	ldr	r3, [pc, #268]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b4a:	4b40      	ldr	r3, [pc, #256]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002b4c:	68da      	ldr	r2, [r3, #12]
 8002b4e:	4b40      	ldr	r3, [pc, #256]	@ (8002c50 <HAL_RCC_OscConfig+0x784>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002b5a:	3a01      	subs	r2, #1
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	4311      	orrs	r1, r2
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002b64:	0212      	lsls	r2, r2, #8
 8002b66:	4311      	orrs	r1, r2
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b6c:	0852      	lsrs	r2, r2, #1
 8002b6e:	3a01      	subs	r2, #1
 8002b70:	0552      	lsls	r2, r2, #21
 8002b72:	4311      	orrs	r1, r2
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002b78:	0852      	lsrs	r2, r2, #1
 8002b7a:	3a01      	subs	r2, #1
 8002b7c:	0652      	lsls	r2, r2, #25
 8002b7e:	4311      	orrs	r1, r2
 8002b80:	687a      	ldr	r2, [r7, #4]
 8002b82:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b84:	0912      	lsrs	r2, r2, #4
 8002b86:	0452      	lsls	r2, r2, #17
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	4930      	ldr	r1, [pc, #192]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b90:	4b2e      	ldr	r3, [pc, #184]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a2d      	ldr	r2, [pc, #180]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002b96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b9a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002ba2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ba6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ba8:	f7ff f97c 	bl	8001ea4 <HAL_GetTick>
 8002bac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb0:	f7ff f978 	bl	8001ea4 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e058      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc2:	4b22      	ldr	r3, [pc, #136]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bce:	e050      	b.n	8002c72 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e04f      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d148      	bne.n	8002c72 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002be0:	4b1a      	ldr	r3, [pc, #104]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a19      	ldr	r2, [pc, #100]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002be6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002bec:	4b17      	ldr	r3, [pc, #92]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a16      	ldr	r2, [pc, #88]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002bf2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bf6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bf8:	f7ff f954 	bl	8001ea4 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7ff f950 	bl	8001ea4 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e030      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c12:	4b0e      	ldr	r3, [pc, #56]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d0f0      	beq.n	8002c00 <HAL_RCC_OscConfig+0x734>
 8002c1e:	e028      	b.n	8002c72 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	2b0c      	cmp	r3, #12
 8002c24:	d023      	beq.n	8002c6e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c26:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a08      	ldr	r2, [pc, #32]	@ (8002c4c <HAL_RCC_OscConfig+0x780>)
 8002c2c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c32:	f7ff f937 	bl	8001ea4 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c38:	e00c      	b.n	8002c54 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c3a:	f7ff f933 	bl	8001ea4 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d905      	bls.n	8002c54 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e013      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c54:	4b09      	ldr	r3, [pc, #36]	@ (8002c7c <HAL_RCC_OscConfig+0x7b0>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1ec      	bne.n	8002c3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c60:	4b06      	ldr	r3, [pc, #24]	@ (8002c7c <HAL_RCC_OscConfig+0x7b0>)
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	4905      	ldr	r1, [pc, #20]	@ (8002c7c <HAL_RCC_OscConfig+0x7b0>)
 8002c66:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <HAL_RCC_OscConfig+0x7b4>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	60cb      	str	r3, [r1, #12]
 8002c6c:	e001      	b.n	8002c72 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	3720      	adds	r7, #32
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40021000 	.word	0x40021000
 8002c80:	feeefffc 	.word	0xfeeefffc

08002c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e0e7      	b.n	8002e68 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c98:	4b75      	ldr	r3, [pc, #468]	@ (8002e70 <HAL_RCC_ClockConfig+0x1ec>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d910      	bls.n	8002cc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca6:	4b72      	ldr	r3, [pc, #456]	@ (8002e70 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f023 0207 	bic.w	r2, r3, #7
 8002cae:	4970      	ldr	r1, [pc, #448]	@ (8002e70 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb6:	4b6e      	ldr	r3, [pc, #440]	@ (8002e70 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0cf      	b.n	8002e68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	4b66      	ldr	r3, [pc, #408]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d908      	bls.n	8002cf6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ce4:	4b63      	ldr	r3, [pc, #396]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	4960      	ldr	r1, [pc, #384]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0301 	and.w	r3, r3, #1
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d04c      	beq.n	8002d9c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d0a:	4b5a      	ldr	r3, [pc, #360]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d121      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0a6      	b.n	8002e68 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d22:	4b54      	ldr	r3, [pc, #336]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d115      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e09a      	b.n	8002e68 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d107      	bne.n	8002d4a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d3a:	4b4e      	ldr	r3, [pc, #312]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e08e      	b.n	8002e68 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d4a:	4b4a      	ldr	r3, [pc, #296]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e086      	b.n	8002e68 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d5a:	4b46      	ldr	r3, [pc, #280]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f023 0203 	bic.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4943      	ldr	r1, [pc, #268]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d6c:	f7ff f89a 	bl	8001ea4 <HAL_GetTick>
 8002d70:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d72:	e00a      	b.n	8002d8a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d74:	f7ff f896 	bl	8001ea4 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d901      	bls.n	8002d8a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	e06e      	b.n	8002e68 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 020c 	and.w	r2, r3, #12
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d1eb      	bne.n	8002d74 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d010      	beq.n	8002dca <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689a      	ldr	r2, [r3, #8]
 8002dac:	4b31      	ldr	r3, [pc, #196]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d208      	bcs.n	8002dca <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002db8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	492b      	ldr	r1, [pc, #172]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002dca:	4b29      	ldr	r3, [pc, #164]	@ (8002e70 <HAL_RCC_ClockConfig+0x1ec>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0307 	and.w	r3, r3, #7
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d210      	bcs.n	8002dfa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd8:	4b25      	ldr	r3, [pc, #148]	@ (8002e70 <HAL_RCC_ClockConfig+0x1ec>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f023 0207 	bic.w	r2, r3, #7
 8002de0:	4923      	ldr	r1, [pc, #140]	@ (8002e70 <HAL_RCC_ClockConfig+0x1ec>)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002de8:	4b21      	ldr	r3, [pc, #132]	@ (8002e70 <HAL_RCC_ClockConfig+0x1ec>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d001      	beq.n	8002dfa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e036      	b.n	8002e68 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d008      	beq.n	8002e18 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e06:	4b1b      	ldr	r3, [pc, #108]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	4918      	ldr	r1, [pc, #96]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d009      	beq.n	8002e38 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e24:	4b13      	ldr	r3, [pc, #76]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4910      	ldr	r1, [pc, #64]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e38:	f000 f824 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8002e74 <HAL_RCC_ClockConfig+0x1f0>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	091b      	lsrs	r3, r3, #4
 8002e44:	f003 030f 	and.w	r3, r3, #15
 8002e48:	490b      	ldr	r1, [pc, #44]	@ (8002e78 <HAL_RCC_ClockConfig+0x1f4>)
 8002e4a:	5ccb      	ldrb	r3, [r1, r3]
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	fa22 f303 	lsr.w	r3, r2, r3
 8002e54:	4a09      	ldr	r2, [pc, #36]	@ (8002e7c <HAL_RCC_ClockConfig+0x1f8>)
 8002e56:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e58:	4b09      	ldr	r3, [pc, #36]	@ (8002e80 <HAL_RCC_ClockConfig+0x1fc>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f7fe ff11 	bl	8001c84 <HAL_InitTick>
 8002e62:	4603      	mov	r3, r0
 8002e64:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e66:	7afb      	ldrb	r3, [r7, #11]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3710      	adds	r7, #16
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40022000 	.word	0x40022000
 8002e74:	40021000 	.word	0x40021000
 8002e78:	080088f8 	.word	0x080088f8
 8002e7c:	2000003c 	.word	0x2000003c
 8002e80:	20000040 	.word	0x20000040

08002e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	@ 0x24
 8002e88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e92:	4b3e      	ldr	r3, [pc, #248]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f003 030c 	and.w	r3, r3, #12
 8002e9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 0303 	and.w	r3, r3, #3
 8002ea4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d005      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	d121      	bne.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d11e      	bne.n	8002ef6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002eb8:	4b34      	ldr	r3, [pc, #208]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0308 	and.w	r3, r3, #8
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002ec4:	4b31      	ldr	r3, [pc, #196]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002eca:	0a1b      	lsrs	r3, r3, #8
 8002ecc:	f003 030f 	and.w	r3, r3, #15
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ed4:	4b2d      	ldr	r3, [pc, #180]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	091b      	lsrs	r3, r3, #4
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8002f90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ee8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d10d      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ef4:	e00a      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	2b04      	cmp	r3, #4
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002efc:	4b25      	ldr	r3, [pc, #148]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002efe:	61bb      	str	r3, [r7, #24]
 8002f00:	e004      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b08      	cmp	r3, #8
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f08:	4b23      	ldr	r3, [pc, #140]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	2b0c      	cmp	r3, #12
 8002f10:	d134      	bne.n	8002f7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f12:	4b1e      	ldr	r3, [pc, #120]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d003      	beq.n	8002f2a <HAL_RCC_GetSysClockFreq+0xa6>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b03      	cmp	r3, #3
 8002f26:	d003      	beq.n	8002f30 <HAL_RCC_GetSysClockFreq+0xac>
 8002f28:	e005      	b.n	8002f36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f94 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f2c:	617b      	str	r3, [r7, #20]
      break;
 8002f2e:	e005      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f30:	4b19      	ldr	r3, [pc, #100]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f32:	617b      	str	r3, [r7, #20]
      break;
 8002f34:	e002      	b.n	8002f3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	617b      	str	r3, [r7, #20]
      break;
 8002f3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f3c:	4b13      	ldr	r3, [pc, #76]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	091b      	lsrs	r3, r3, #4
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	3301      	adds	r3, #1
 8002f48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f4a:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	0a1b      	lsrs	r3, r3, #8
 8002f50:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	fb03 f202 	mul.w	r2, r3, r2
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f62:	4b0a      	ldr	r3, [pc, #40]	@ (8002f8c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	0e5b      	lsrs	r3, r3, #25
 8002f68:	f003 0303 	and.w	r3, r3, #3
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f72:	697a      	ldr	r2, [r7, #20]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f7c:	69bb      	ldr	r3, [r7, #24]
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3724      	adds	r7, #36	@ 0x24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08008910 	.word	0x08008910
 8002f94:	00f42400 	.word	0x00f42400
 8002f98:	007a1200 	.word	0x007a1200

08002f9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fa0:	4b03      	ldr	r3, [pc, #12]	@ (8002fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	2000003c 	.word	0x2000003c

08002fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002fb8:	f7ff fff0 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b06      	ldr	r3, [pc, #24]	@ (8002fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	0a1b      	lsrs	r3, r3, #8
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4904      	ldr	r1, [pc, #16]	@ (8002fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40021000 	.word	0x40021000
 8002fdc:	08008908 	.word	0x08008908

08002fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002fe4:	f7ff ffda 	bl	8002f9c <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b06      	ldr	r3, [pc, #24]	@ (8003004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	0adb      	lsrs	r3, r3, #11
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4904      	ldr	r1, [pc, #16]	@ (8003008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	40021000 	.word	0x40021000
 8003008:	08008908 	.word	0x08008908

0800300c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
 8003014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	220f      	movs	r2, #15
 800301a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800301c:	4b12      	ldr	r3, [pc, #72]	@ (8003068 <HAL_RCC_GetClockConfig+0x5c>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 0203 	and.w	r2, r3, #3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003028:	4b0f      	ldr	r3, [pc, #60]	@ (8003068 <HAL_RCC_GetClockConfig+0x5c>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003034:	4b0c      	ldr	r3, [pc, #48]	@ (8003068 <HAL_RCC_GetClockConfig+0x5c>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <HAL_RCC_GetClockConfig+0x5c>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	08db      	lsrs	r3, r3, #3
 8003046:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800304e:	4b07      	ldr	r3, [pc, #28]	@ (800306c <HAL_RCC_GetClockConfig+0x60>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0207 	and.w	r2, r3, #7
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	601a      	str	r2, [r3, #0]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	40021000 	.word	0x40021000
 800306c:	40022000 	.word	0x40022000

08003070 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800307c:	4b2a      	ldr	r3, [pc, #168]	@ (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003088:	f7ff f9bc 	bl	8002404 <HAL_PWREx_GetVoltageRange>
 800308c:	6178      	str	r0, [r7, #20]
 800308e:	e014      	b.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003090:	4b25      	ldr	r3, [pc, #148]	@ (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003094:	4a24      	ldr	r2, [pc, #144]	@ (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800309a:	6593      	str	r3, [r2, #88]	@ 0x58
 800309c:	4b22      	ldr	r3, [pc, #136]	@ (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800309e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030a8:	f7ff f9ac 	bl	8002404 <HAL_PWREx_GetVoltageRange>
 80030ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030c0:	d10b      	bne.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b80      	cmp	r3, #128	@ 0x80
 80030c6:	d919      	bls.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80030cc:	d902      	bls.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ce:	2302      	movs	r3, #2
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	e013      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d4:	2301      	movs	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	e010      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b80      	cmp	r3, #128	@ 0x80
 80030de:	d902      	bls.n	80030e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030e0:	2303      	movs	r3, #3
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	e00a      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b80      	cmp	r3, #128	@ 0x80
 80030ea:	d102      	bne.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ec:	2302      	movs	r3, #2
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	e004      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b70      	cmp	r3, #112	@ 0x70
 80030f6:	d101      	bne.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f8:	2301      	movs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030fc:	4b0b      	ldr	r3, [pc, #44]	@ (800312c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f023 0207 	bic.w	r2, r3, #7
 8003104:	4909      	ldr	r1, [pc, #36]	@ (800312c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800310c:	4b07      	ldr	r3, [pc, #28]	@ (800312c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	429a      	cmp	r2, r3
 8003118:	d001      	beq.n	800311e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	40022000 	.word	0x40022000

08003130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003138:	2300      	movs	r3, #0
 800313a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800313c:	2300      	movs	r3, #0
 800313e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003148:	2b00      	cmp	r3, #0
 800314a:	d041      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003150:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003154:	d02a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003156:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800315a:	d824      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800315c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003160:	d008      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003162:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003166:	d81e      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800316c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003170:	d010      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003172:	e018      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003174:	4b86      	ldr	r3, [pc, #536]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a85      	ldr	r2, [pc, #532]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800317e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003180:	e015      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fabb 	bl	8003704 <RCCEx_PLLSAI1_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003192:	e00c      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3320      	adds	r3, #32
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fba6 	bl	80038ec <RCCEx_PLLSAI2_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031a4:	e003      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	74fb      	strb	r3, [r7, #19]
      break;
 80031aa:	e000      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031b4:	4b76      	ldr	r3, [pc, #472]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031ba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031c2:	4973      	ldr	r1, [pc, #460]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80031ca:	e001      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d041      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80031e0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031e4:	d02a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80031ea:	d824      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031ec:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031f0:	d008      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80031f6:	d81e      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031fc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003200:	d010      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003202:	e018      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003204:	4b62      	ldr	r3, [pc, #392]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a61      	ldr	r2, [pc, #388]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800320e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003210:	e015      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3304      	adds	r3, #4
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fa73 	bl	8003704 <RCCEx_PLLSAI1_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003222:	e00c      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3320      	adds	r3, #32
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fb5e 	bl	80038ec <RCCEx_PLLSAI2_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003234:	e003      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	74fb      	strb	r3, [r7, #19]
      break;
 800323a:	e000      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800323c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10b      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003244:	4b52      	ldr	r3, [pc, #328]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003252:	494f      	ldr	r1, [pc, #316]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800325a:	e001      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a0 	beq.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003272:	4b47      	ldr	r3, [pc, #284]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00d      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b41      	ldr	r3, [pc, #260]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328c:	4a40      	ldr	r2, [pc, #256]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003292:	6593      	str	r3, [r2, #88]	@ 0x58
 8003294:	4b3e      	ldr	r3, [pc, #248]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003298:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a0:	2301      	movs	r3, #1
 80032a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a4:	4b3b      	ldr	r3, [pc, #236]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032b0:	f7fe fdf8 	bl	8001ea4 <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032b6:	e009      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b8:	f7fe fdf4 	bl	8001ea4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d902      	bls.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	74fb      	strb	r3, [r7, #19]
        break;
 80032ca:	e005      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032cc:	4b31      	ldr	r3, [pc, #196]	@ (8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ef      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d15c      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032de:	4b2c      	ldr	r3, [pc, #176]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01f      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d019      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032fc:	4b24      	ldr	r3, [pc, #144]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003306:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003308:	4b21      	ldr	r3, [pc, #132]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800330e:	4a20      	ldr	r2, [pc, #128]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003318:	4b1d      	ldr	r3, [pc, #116]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800331e:	4a1c      	ldr	r2, [pc, #112]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003324:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003328:	4a19      	ldr	r2, [pc, #100]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fe fdb3 	bl	8001ea4 <HAL_GetTick>
 800333e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003340:	e00b      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe fdaf 	bl	8001ea4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d902      	bls.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	74fb      	strb	r3, [r7, #19]
            break;
 8003358:	e006      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335a:	4b0d      	ldr	r3, [pc, #52]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ec      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800336e:	4b08      	ldr	r3, [pc, #32]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003374:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800337e:	4904      	ldr	r1, [pc, #16]	@ (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003386:	e009      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	74bb      	strb	r3, [r7, #18]
 800338c:	e006      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339c:	7c7b      	ldrb	r3, [r7, #17]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d105      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a2:	4b9e      	ldr	r3, [pc, #632]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033a6:	4a9d      	ldr	r2, [pc, #628]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033ac:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ba:	4b98      	ldr	r3, [pc, #608]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033c0:	f023 0203 	bic.w	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c8:	4994      	ldr	r1, [pc, #592]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033dc:	4b8f      	ldr	r3, [pc, #572]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e2:	f023 020c 	bic.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ea:	498c      	ldr	r1, [pc, #560]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033fe:	4b87      	ldr	r3, [pc, #540]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003404:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	4983      	ldr	r1, [pc, #524]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003420:	4b7e      	ldr	r3, [pc, #504]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003426:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800342e:	497b      	ldr	r1, [pc, #492]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003442:	4b76      	ldr	r3, [pc, #472]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003448:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003450:	4972      	ldr	r1, [pc, #456]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003464:	4b6d      	ldr	r3, [pc, #436]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003472:	496a      	ldr	r1, [pc, #424]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003486:	4b65      	ldr	r3, [pc, #404]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003494:	4961      	ldr	r1, [pc, #388]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034a8:	4b5c      	ldr	r3, [pc, #368]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034b6:	4959      	ldr	r1, [pc, #356]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ca:	4b54      	ldr	r3, [pc, #336]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d8:	4950      	ldr	r1, [pc, #320]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034ec:	4b4b      	ldr	r3, [pc, #300]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034fa:	4948      	ldr	r1, [pc, #288]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800350e:	4b43      	ldr	r3, [pc, #268]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003514:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351c:	493f      	ldr	r1, [pc, #252]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d028      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003530:	4b3a      	ldr	r3, [pc, #232]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003536:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800353e:	4937      	ldr	r1, [pc, #220]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800354a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800354e:	d106      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003550:	4b32      	ldr	r3, [pc, #200]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	4a31      	ldr	r2, [pc, #196]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800355a:	60d3      	str	r3, [r2, #12]
 800355c:	e011      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003562:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003566:	d10c      	bne.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3304      	adds	r3, #4
 800356c:	2101      	movs	r1, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f000 f8c8 	bl	8003704 <RCCEx_PLLSAI1_Config>
 8003574:	4603      	mov	r3, r0
 8003576:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003578:	7cfb      	ldrb	r3, [r7, #19]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800357e:	7cfb      	ldrb	r3, [r7, #19]
 8003580:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d028      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800358e:	4b23      	ldr	r3, [pc, #140]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003594:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800359c:	491f      	ldr	r1, [pc, #124]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035a8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035ac:	d106      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ae:	4b1b      	ldr	r3, [pc, #108]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	4a1a      	ldr	r2, [pc, #104]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035b8:	60d3      	str	r3, [r2, #12]
 80035ba:	e011      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80035c4:	d10c      	bne.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	3304      	adds	r3, #4
 80035ca:	2101      	movs	r1, #1
 80035cc:	4618      	mov	r0, r3
 80035ce:	f000 f899 	bl	8003704 <RCCEx_PLLSAI1_Config>
 80035d2:	4603      	mov	r3, r0
 80035d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035d6:	7cfb      	ldrb	r3, [r7, #19]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035dc:	7cfb      	ldrb	r3, [r7, #19]
 80035de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d02b      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035ec:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fa:	4908      	ldr	r1, [pc, #32]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003606:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800360a:	d109      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800360c:	4b03      	ldr	r3, [pc, #12]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4a02      	ldr	r2, [pc, #8]	@ (800361c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003616:	60d3      	str	r3, [r2, #12]
 8003618:	e014      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800361a:	bf00      	nop
 800361c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003624:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003628:	d10c      	bne.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	3304      	adds	r3, #4
 800362e:	2101      	movs	r1, #1
 8003630:	4618      	mov	r0, r3
 8003632:	f000 f867 	bl	8003704 <RCCEx_PLLSAI1_Config>
 8003636:	4603      	mov	r3, r0
 8003638:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800363a:	7cfb      	ldrb	r3, [r7, #19]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d001      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d02f      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003650:	4b2b      	ldr	r3, [pc, #172]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003656:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800365e:	4928      	ldr	r1, [pc, #160]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003660:	4313      	orrs	r3, r2
 8003662:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800366a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800366e:	d10d      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	3304      	adds	r3, #4
 8003674:	2102      	movs	r1, #2
 8003676:	4618      	mov	r0, r3
 8003678:	f000 f844 	bl	8003704 <RCCEx_PLLSAI1_Config>
 800367c:	4603      	mov	r3, r0
 800367e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003680:	7cfb      	ldrb	r3, [r7, #19]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d014      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	74bb      	strb	r3, [r7, #18]
 800368a:	e011      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003694:	d10c      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3320      	adds	r3, #32
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f000 f925 	bl	80038ec <RCCEx_PLLSAI2_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80036ac:	7cfb      	ldrb	r3, [r7, #19]
 80036ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036bc:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036ca:	490d      	ldr	r1, [pc, #52]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036de:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036e4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80036ee:	4904      	ldr	r1, [pc, #16]	@ (8003700 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036f6:	7cbb      	ldrb	r3, [r7, #18]
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40021000 	.word	0x40021000

08003704 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003712:	4b75      	ldr	r3, [pc, #468]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d018      	beq.n	8003750 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800371e:	4b72      	ldr	r3, [pc, #456]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0203 	and.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d10d      	bne.n	800374a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
       ||
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003736:	4b6c      	ldr	r3, [pc, #432]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
       ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d047      	beq.n	80037da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	e044      	b.n	80037da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b03      	cmp	r3, #3
 8003756:	d018      	beq.n	800378a <RCCEx_PLLSAI1_Config+0x86>
 8003758:	2b03      	cmp	r3, #3
 800375a:	d825      	bhi.n	80037a8 <RCCEx_PLLSAI1_Config+0xa4>
 800375c:	2b01      	cmp	r3, #1
 800375e:	d002      	beq.n	8003766 <RCCEx_PLLSAI1_Config+0x62>
 8003760:	2b02      	cmp	r3, #2
 8003762:	d009      	beq.n	8003778 <RCCEx_PLLSAI1_Config+0x74>
 8003764:	e020      	b.n	80037a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003766:	4b60      	ldr	r3, [pc, #384]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d11d      	bne.n	80037ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003776:	e01a      	b.n	80037ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003778:	4b5b      	ldr	r3, [pc, #364]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003780:	2b00      	cmp	r3, #0
 8003782:	d116      	bne.n	80037b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003788:	e013      	b.n	80037b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800378a:	4b57      	ldr	r3, [pc, #348]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d10f      	bne.n	80037b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003796:	4b54      	ldr	r3, [pc, #336]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037a6:	e006      	b.n	80037b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	73fb      	strb	r3, [r7, #15]
      break;
 80037ac:	e004      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037ae:	bf00      	nop
 80037b0:	e002      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037b2:	bf00      	nop
 80037b4:	e000      	b.n	80037b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80037b8:	7bfb      	ldrb	r3, [r7, #15]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10d      	bne.n	80037da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037be:	4b4a      	ldr	r3, [pc, #296]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6819      	ldr	r1, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	3b01      	subs	r3, #1
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	430b      	orrs	r3, r1
 80037d4:	4944      	ldr	r1, [pc, #272]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d17d      	bne.n	80038dc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037e0:	4b41      	ldr	r3, [pc, #260]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a40      	ldr	r2, [pc, #256]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80037ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037ec:	f7fe fb5a 	bl	8001ea4 <HAL_GetTick>
 80037f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037f2:	e009      	b.n	8003808 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037f4:	f7fe fb56 	bl	8001ea4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d902      	bls.n	8003808 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	73fb      	strb	r3, [r7, #15]
        break;
 8003806:	e005      	b.n	8003814 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003808:	4b37      	ldr	r3, [pc, #220]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1ef      	bne.n	80037f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d160      	bne.n	80038dc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d111      	bne.n	8003844 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003820:	4b31      	ldr	r3, [pc, #196]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003828:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	6892      	ldr	r2, [r2, #8]
 8003830:	0211      	lsls	r1, r2, #8
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	68d2      	ldr	r2, [r2, #12]
 8003836:	0912      	lsrs	r2, r2, #4
 8003838:	0452      	lsls	r2, r2, #17
 800383a:	430a      	orrs	r2, r1
 800383c:	492a      	ldr	r1, [pc, #168]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800383e:	4313      	orrs	r3, r2
 8003840:	610b      	str	r3, [r1, #16]
 8003842:	e027      	b.n	8003894 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d112      	bne.n	8003870 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800384a:	4b27      	ldr	r3, [pc, #156]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003852:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6892      	ldr	r2, [r2, #8]
 800385a:	0211      	lsls	r1, r2, #8
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6912      	ldr	r2, [r2, #16]
 8003860:	0852      	lsrs	r2, r2, #1
 8003862:	3a01      	subs	r2, #1
 8003864:	0552      	lsls	r2, r2, #21
 8003866:	430a      	orrs	r2, r1
 8003868:	491f      	ldr	r1, [pc, #124]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386a:	4313      	orrs	r3, r2
 800386c:	610b      	str	r3, [r1, #16]
 800386e:	e011      	b.n	8003894 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003870:	4b1d      	ldr	r3, [pc, #116]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003878:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6892      	ldr	r2, [r2, #8]
 8003880:	0211      	lsls	r1, r2, #8
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6952      	ldr	r2, [r2, #20]
 8003886:	0852      	lsrs	r2, r2, #1
 8003888:	3a01      	subs	r2, #1
 800388a:	0652      	lsls	r2, r2, #25
 800388c:	430a      	orrs	r2, r1
 800388e:	4916      	ldr	r1, [pc, #88]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003890:	4313      	orrs	r3, r2
 8003892:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003894:	4b14      	ldr	r3, [pc, #80]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a13      	ldr	r2, [pc, #76]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800389e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038a0:	f7fe fb00 	bl	8001ea4 <HAL_GetTick>
 80038a4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038a6:	e009      	b.n	80038bc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a8:	f7fe fafc 	bl	8001ea4 <HAL_GetTick>
 80038ac:	4602      	mov	r2, r0
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	2b02      	cmp	r3, #2
 80038b4:	d902      	bls.n	80038bc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	73fb      	strb	r3, [r7, #15]
          break;
 80038ba:	e005      	b.n	80038c8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038bc:	4b0a      	ldr	r3, [pc, #40]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d0ef      	beq.n	80038a8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038c8:	7bfb      	ldrb	r3, [r7, #15]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d106      	bne.n	80038dc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038ce:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d0:	691a      	ldr	r2, [r3, #16]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	4904      	ldr	r1, [pc, #16]	@ (80038e8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3710      	adds	r7, #16
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	40021000 	.word	0x40021000

080038ec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038fa:	4b6a      	ldr	r3, [pc, #424]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d018      	beq.n	8003938 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003906:	4b67      	ldr	r3, [pc, #412]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003908:	68db      	ldr	r3, [r3, #12]
 800390a:	f003 0203 	and.w	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	429a      	cmp	r2, r3
 8003914:	d10d      	bne.n	8003932 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
       ||
 800391a:	2b00      	cmp	r3, #0
 800391c:	d009      	beq.n	8003932 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800391e:	4b61      	ldr	r3, [pc, #388]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	091b      	lsrs	r3, r3, #4
 8003924:	f003 0307 	and.w	r3, r3, #7
 8003928:	1c5a      	adds	r2, r3, #1
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
       ||
 800392e:	429a      	cmp	r2, r3
 8003930:	d047      	beq.n	80039c2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	e044      	b.n	80039c2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2b03      	cmp	r3, #3
 800393e:	d018      	beq.n	8003972 <RCCEx_PLLSAI2_Config+0x86>
 8003940:	2b03      	cmp	r3, #3
 8003942:	d825      	bhi.n	8003990 <RCCEx_PLLSAI2_Config+0xa4>
 8003944:	2b01      	cmp	r3, #1
 8003946:	d002      	beq.n	800394e <RCCEx_PLLSAI2_Config+0x62>
 8003948:	2b02      	cmp	r3, #2
 800394a:	d009      	beq.n	8003960 <RCCEx_PLLSAI2_Config+0x74>
 800394c:	e020      	b.n	8003990 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800394e:	4b55      	ldr	r3, [pc, #340]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d11d      	bne.n	8003996 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800395e:	e01a      	b.n	8003996 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003960:	4b50      	ldr	r3, [pc, #320]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003968:	2b00      	cmp	r3, #0
 800396a:	d116      	bne.n	800399a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003970:	e013      	b.n	800399a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003972:	4b4c      	ldr	r3, [pc, #304]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10f      	bne.n	800399e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800397e:	4b49      	ldr	r3, [pc, #292]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800398e:	e006      	b.n	800399e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      break;
 8003994:	e004      	b.n	80039a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003996:	bf00      	nop
 8003998:	e002      	b.n	80039a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800399a:	bf00      	nop
 800399c:	e000      	b.n	80039a0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800399e:	bf00      	nop
    }

    if(status == HAL_OK)
 80039a0:	7bfb      	ldrb	r3, [r7, #15]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10d      	bne.n	80039c2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039a6:	4b3f      	ldr	r3, [pc, #252]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6819      	ldr	r1, [r3, #0]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	3b01      	subs	r3, #1
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	430b      	orrs	r3, r1
 80039bc:	4939      	ldr	r1, [pc, #228]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039c2:	7bfb      	ldrb	r3, [r7, #15]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d167      	bne.n	8003a98 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039c8:	4b36      	ldr	r3, [pc, #216]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a35      	ldr	r2, [pc, #212]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039d4:	f7fe fa66 	bl	8001ea4 <HAL_GetTick>
 80039d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039da:	e009      	b.n	80039f0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039dc:	f7fe fa62 	bl	8001ea4 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d902      	bls.n	80039f0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	73fb      	strb	r3, [r7, #15]
        break;
 80039ee:	e005      	b.n	80039fc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039f0:	4b2c      	ldr	r3, [pc, #176]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d1ef      	bne.n	80039dc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d14a      	bne.n	8003a98 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d111      	bne.n	8003a2c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a08:	4b26      	ldr	r3, [pc, #152]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6892      	ldr	r2, [r2, #8]
 8003a18:	0211      	lsls	r1, r2, #8
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	68d2      	ldr	r2, [r2, #12]
 8003a1e:	0912      	lsrs	r2, r2, #4
 8003a20:	0452      	lsls	r2, r2, #17
 8003a22:	430a      	orrs	r2, r1
 8003a24:	491f      	ldr	r1, [pc, #124]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	614b      	str	r3, [r1, #20]
 8003a2a:	e011      	b.n	8003a50 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003a34:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	6892      	ldr	r2, [r2, #8]
 8003a3c:	0211      	lsls	r1, r2, #8
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	6912      	ldr	r2, [r2, #16]
 8003a42:	0852      	lsrs	r2, r2, #1
 8003a44:	3a01      	subs	r2, #1
 8003a46:	0652      	lsls	r2, r2, #25
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	4916      	ldr	r1, [pc, #88]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a50:	4b14      	ldr	r3, [pc, #80]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a13      	ldr	r2, [pc, #76]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a5a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a5c:	f7fe fa22 	bl	8001ea4 <HAL_GetTick>
 8003a60:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a62:	e009      	b.n	8003a78 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a64:	f7fe fa1e 	bl	8001ea4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d902      	bls.n	8003a78 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	73fb      	strb	r3, [r7, #15]
          break;
 8003a76:	e005      	b.n	8003a84 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a78:	4b0a      	ldr	r3, [pc, #40]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0ef      	beq.n	8003a64 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d106      	bne.n	8003a98 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a8a:	4b06      	ldr	r3, [pc, #24]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	4904      	ldr	r1, [pc, #16]	@ (8003aa4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40021000 	.word	0x40021000

08003aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e049      	b.n	8003b4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f841 	bl	8003b56 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f000 fce8 	bl	80044bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3708      	adds	r7, #8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}

08003b56 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b56:	b480      	push	{r7}
 8003b58:	b083      	sub	sp, #12
 8003b5a:	af00      	add	r7, sp, #0
 8003b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
	...

08003b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b085      	sub	sp, #20
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d001      	beq.n	8003b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e04f      	b.n	8003c24 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2202      	movs	r2, #2
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f042 0201 	orr.w	r2, r2, #1
 8003b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a23      	ldr	r2, [pc, #140]	@ (8003c30 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d01d      	beq.n	8003be2 <HAL_TIM_Base_Start_IT+0x76>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bae:	d018      	beq.n	8003be2 <HAL_TIM_Base_Start_IT+0x76>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a1f      	ldr	r2, [pc, #124]	@ (8003c34 <HAL_TIM_Base_Start_IT+0xc8>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d013      	beq.n	8003be2 <HAL_TIM_Base_Start_IT+0x76>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a1e      	ldr	r2, [pc, #120]	@ (8003c38 <HAL_TIM_Base_Start_IT+0xcc>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d00e      	beq.n	8003be2 <HAL_TIM_Base_Start_IT+0x76>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c3c <HAL_TIM_Base_Start_IT+0xd0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d009      	beq.n	8003be2 <HAL_TIM_Base_Start_IT+0x76>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8003c40 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d004      	beq.n	8003be2 <HAL_TIM_Base_Start_IT+0x76>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a19      	ldr	r2, [pc, #100]	@ (8003c44 <HAL_TIM_Base_Start_IT+0xd8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d115      	bne.n	8003c0e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	4b17      	ldr	r3, [pc, #92]	@ (8003c48 <HAL_TIM_Base_Start_IT+0xdc>)
 8003bea:	4013      	ands	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2b06      	cmp	r3, #6
 8003bf2:	d015      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0xb4>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bfa:	d011      	beq.n	8003c20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c0c:	e008      	b.n	8003c20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f042 0201 	orr.w	r2, r2, #1
 8003c1c:	601a      	str	r2, [r3, #0]
 8003c1e:	e000      	b.n	8003c22 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c20:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr
 8003c30:	40012c00 	.word	0x40012c00
 8003c34:	40000400 	.word	0x40000400
 8003c38:	40000800 	.word	0x40000800
 8003c3c:	40000c00 	.word	0x40000c00
 8003c40:	40013400 	.word	0x40013400
 8003c44:	40014000 	.word	0x40014000
 8003c48:	00010007 	.word	0x00010007

08003c4c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e049      	b.n	8003cf2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd fe68 	bl	8001948 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3304      	adds	r3, #4
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	f000 fc16 	bl	80044bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d109      	bne.n	8003d20 <HAL_TIM_PWM_Start+0x24>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	bf14      	ite	ne
 8003d18:	2301      	movne	r3, #1
 8003d1a:	2300      	moveq	r3, #0
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	e03c      	b.n	8003d9a <HAL_TIM_PWM_Start+0x9e>
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b04      	cmp	r3, #4
 8003d24:	d109      	bne.n	8003d3a <HAL_TIM_PWM_Start+0x3e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	bf14      	ite	ne
 8003d32:	2301      	movne	r3, #1
 8003d34:	2300      	moveq	r3, #0
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	e02f      	b.n	8003d9a <HAL_TIM_PWM_Start+0x9e>
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d109      	bne.n	8003d54 <HAL_TIM_PWM_Start+0x58>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	bf14      	ite	ne
 8003d4c:	2301      	movne	r3, #1
 8003d4e:	2300      	moveq	r3, #0
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	e022      	b.n	8003d9a <HAL_TIM_PWM_Start+0x9e>
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	2b0c      	cmp	r3, #12
 8003d58:	d109      	bne.n	8003d6e <HAL_TIM_PWM_Start+0x72>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	bf14      	ite	ne
 8003d66:	2301      	movne	r3, #1
 8003d68:	2300      	moveq	r3, #0
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	e015      	b.n	8003d9a <HAL_TIM_PWM_Start+0x9e>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d109      	bne.n	8003d88 <HAL_TIM_PWM_Start+0x8c>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b01      	cmp	r3, #1
 8003d7e:	bf14      	ite	ne
 8003d80:	2301      	movne	r3, #1
 8003d82:	2300      	moveq	r3, #0
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	e008      	b.n	8003d9a <HAL_TIM_PWM_Start+0x9e>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	bf14      	ite	ne
 8003d94:	2301      	movne	r3, #1
 8003d96:	2300      	moveq	r3, #0
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e09c      	b.n	8003edc <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d104      	bne.n	8003db2 <HAL_TIM_PWM_Start+0xb6>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003db0:	e023      	b.n	8003dfa <HAL_TIM_PWM_Start+0xfe>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b04      	cmp	r3, #4
 8003db6:	d104      	bne.n	8003dc2 <HAL_TIM_PWM_Start+0xc6>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dc0:	e01b      	b.n	8003dfa <HAL_TIM_PWM_Start+0xfe>
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b08      	cmp	r3, #8
 8003dc6:	d104      	bne.n	8003dd2 <HAL_TIM_PWM_Start+0xd6>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2202      	movs	r2, #2
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dd0:	e013      	b.n	8003dfa <HAL_TIM_PWM_Start+0xfe>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b0c      	cmp	r3, #12
 8003dd6:	d104      	bne.n	8003de2 <HAL_TIM_PWM_Start+0xe6>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2202      	movs	r2, #2
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003de0:	e00b      	b.n	8003dfa <HAL_TIM_PWM_Start+0xfe>
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b10      	cmp	r3, #16
 8003de6:	d104      	bne.n	8003df2 <HAL_TIM_PWM_Start+0xf6>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2202      	movs	r2, #2
 8003dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003df0:	e003      	b.n	8003dfa <HAL_TIM_PWM_Start+0xfe>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	6839      	ldr	r1, [r7, #0]
 8003e02:	4618      	mov	r0, r3
 8003e04:	f000 fed6 	bl	8004bb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a35      	ldr	r2, [pc, #212]	@ (8003ee4 <HAL_TIM_PWM_Start+0x1e8>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d013      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x13e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a34      	ldr	r2, [pc, #208]	@ (8003ee8 <HAL_TIM_PWM_Start+0x1ec>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00e      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x13e>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a32      	ldr	r2, [pc, #200]	@ (8003eec <HAL_TIM_PWM_Start+0x1f0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x13e>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a31      	ldr	r2, [pc, #196]	@ (8003ef0 <HAL_TIM_PWM_Start+0x1f4>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d004      	beq.n	8003e3a <HAL_TIM_PWM_Start+0x13e>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2f      	ldr	r2, [pc, #188]	@ (8003ef4 <HAL_TIM_PWM_Start+0x1f8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d101      	bne.n	8003e3e <HAL_TIM_PWM_Start+0x142>
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e000      	b.n	8003e40 <HAL_TIM_PWM_Start+0x144>
 8003e3e:	2300      	movs	r3, #0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e52:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a22      	ldr	r2, [pc, #136]	@ (8003ee4 <HAL_TIM_PWM_Start+0x1e8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01d      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x19e>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e66:	d018      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x19e>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a22      	ldr	r2, [pc, #136]	@ (8003ef8 <HAL_TIM_PWM_Start+0x1fc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x19e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a21      	ldr	r2, [pc, #132]	@ (8003efc <HAL_TIM_PWM_Start+0x200>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00e      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x19e>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1f      	ldr	r2, [pc, #124]	@ (8003f00 <HAL_TIM_PWM_Start+0x204>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d009      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x19e>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a17      	ldr	r2, [pc, #92]	@ (8003ee8 <HAL_TIM_PWM_Start+0x1ec>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x19e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a15      	ldr	r2, [pc, #84]	@ (8003eec <HAL_TIM_PWM_Start+0x1f0>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d115      	bne.n	8003ec6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	4b18      	ldr	r3, [pc, #96]	@ (8003f04 <HAL_TIM_PWM_Start+0x208>)
 8003ea2:	4013      	ands	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b06      	cmp	r3, #6
 8003eaa:	d015      	beq.n	8003ed8 <HAL_TIM_PWM_Start+0x1dc>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003eb2:	d011      	beq.n	8003ed8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0201 	orr.w	r2, r2, #1
 8003ec2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec4:	e008      	b.n	8003ed8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f042 0201 	orr.w	r2, r2, #1
 8003ed4:	601a      	str	r2, [r3, #0]
 8003ed6:	e000      	b.n	8003eda <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40012c00 	.word	0x40012c00
 8003ee8:	40013400 	.word	0x40013400
 8003eec:	40014000 	.word	0x40014000
 8003ef0:	40014400 	.word	0x40014400
 8003ef4:	40014800 	.word	0x40014800
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	40000800 	.word	0x40000800
 8003f00:	40000c00 	.word	0x40000c00
 8003f04:	00010007 	.word	0x00010007

08003f08 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	6839      	ldr	r1, [r7, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fe4a 	bl	8004bb4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a3e      	ldr	r2, [pc, #248]	@ (8004020 <HAL_TIM_PWM_Stop+0x118>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <HAL_TIM_PWM_Stop+0x4a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a3d      	ldr	r2, [pc, #244]	@ (8004024 <HAL_TIM_PWM_Stop+0x11c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <HAL_TIM_PWM_Stop+0x4a>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a3b      	ldr	r2, [pc, #236]	@ (8004028 <HAL_TIM_PWM_Stop+0x120>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <HAL_TIM_PWM_Stop+0x4a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a3a      	ldr	r2, [pc, #232]	@ (800402c <HAL_TIM_PWM_Stop+0x124>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <HAL_TIM_PWM_Stop+0x4a>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a38      	ldr	r2, [pc, #224]	@ (8004030 <HAL_TIM_PWM_Stop+0x128>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <HAL_TIM_PWM_Stop+0x4e>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <HAL_TIM_PWM_Stop+0x50>
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d017      	beq.n	8003f8c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10f      	bne.n	8003f8c <HAL_TIM_PWM_Stop+0x84>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6a1a      	ldr	r2, [r3, #32]
 8003f72:	f240 4344 	movw	r3, #1092	@ 0x444
 8003f76:	4013      	ands	r3, r2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d107      	bne.n	8003f8c <HAL_TIM_PWM_Stop+0x84>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f8a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a1a      	ldr	r2, [r3, #32]
 8003f92:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003f96:	4013      	ands	r3, r2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10f      	bne.n	8003fbc <HAL_TIM_PWM_Stop+0xb4>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6a1a      	ldr	r2, [r3, #32]
 8003fa2:	f240 4344 	movw	r3, #1092	@ 0x444
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d107      	bne.n	8003fbc <HAL_TIM_PWM_Stop+0xb4>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 0201 	bic.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d104      	bne.n	8003fcc <HAL_TIM_PWM_Stop+0xc4>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fca:	e023      	b.n	8004014 <HAL_TIM_PWM_Stop+0x10c>
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d104      	bne.n	8003fdc <HAL_TIM_PWM_Stop+0xd4>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fda:	e01b      	b.n	8004014 <HAL_TIM_PWM_Stop+0x10c>
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d104      	bne.n	8003fec <HAL_TIM_PWM_Stop+0xe4>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fea:	e013      	b.n	8004014 <HAL_TIM_PWM_Stop+0x10c>
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b0c      	cmp	r3, #12
 8003ff0:	d104      	bne.n	8003ffc <HAL_TIM_PWM_Stop+0xf4>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ffa:	e00b      	b.n	8004014 <HAL_TIM_PWM_Stop+0x10c>
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2b10      	cmp	r3, #16
 8004000:	d104      	bne.n	800400c <HAL_TIM_PWM_Stop+0x104>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800400a:	e003      	b.n	8004014 <HAL_TIM_PWM_Stop+0x10c>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3708      	adds	r7, #8
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40012c00 	.word	0x40012c00
 8004024:	40013400 	.word	0x40013400
 8004028:	40014000 	.word	0x40014000
 800402c:	40014400 	.word	0x40014400
 8004030:	40014800 	.word	0x40014800

08004034 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d020      	beq.n	8004098 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01b      	beq.n	8004098 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f06f 0202 	mvn.w	r2, #2
 8004068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 f9fe 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 8004084:	e005      	b.n	8004092 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f000 f9f0 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 fa01 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d020      	beq.n	80040e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01b      	beq.n	80040e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f06f 0204 	mvn.w	r2, #4
 80040b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2202      	movs	r2, #2
 80040ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f9d8 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 80040d0:	e005      	b.n	80040de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f9ca 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f000 f9db 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d020      	beq.n	8004130 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0308 	and.w	r3, r3, #8
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01b      	beq.n	8004130 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0208 	mvn.w	r2, #8
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2204      	movs	r2, #4
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f9b2 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f9a4 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f9b5 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0310 	and.w	r3, r3, #16
 8004136:	2b00      	cmp	r3, #0
 8004138:	d020      	beq.n	800417c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0310 	and.w	r3, r3, #16
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01b      	beq.n	800417c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0210 	mvn.w	r2, #16
 800414c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2208      	movs	r2, #8
 8004152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f98c 	bl	8004480 <HAL_TIM_IC_CaptureCallback>
 8004168:	e005      	b.n	8004176 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f97e 	bl	800446c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f98f 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 0301 	and.w	r3, r3, #1
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00c      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d007      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f06f 0201 	mvn.w	r2, #1
 8004198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f7fd fb94 	bl	80018c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d104      	bne.n	80041b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d00c      	beq.n	80041ce <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d007      	beq.n	80041ce <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80041c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 fe29 	bl	8004e20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00c      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80041ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fe21 	bl	8004e34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00c      	beq.n	8004216 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800420e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f949 	bl	80044a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f003 0320 	and.w	r3, r3, #32
 800421c:	2b00      	cmp	r3, #0
 800421e:	d00c      	beq.n	800423a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d007      	beq.n	800423a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f06f 0220 	mvn.w	r2, #32
 8004232:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 fde9 	bl	8004e0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800423a:	bf00      	nop
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800425e:	2302      	movs	r3, #2
 8004260:	e0ff      	b.n	8004462 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2201      	movs	r2, #1
 8004266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2b14      	cmp	r3, #20
 800426e:	f200 80f0 	bhi.w	8004452 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004272:	a201      	add	r2, pc, #4	@ (adr r2, 8004278 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004278:	080042cd 	.word	0x080042cd
 800427c:	08004453 	.word	0x08004453
 8004280:	08004453 	.word	0x08004453
 8004284:	08004453 	.word	0x08004453
 8004288:	0800430d 	.word	0x0800430d
 800428c:	08004453 	.word	0x08004453
 8004290:	08004453 	.word	0x08004453
 8004294:	08004453 	.word	0x08004453
 8004298:	0800434f 	.word	0x0800434f
 800429c:	08004453 	.word	0x08004453
 80042a0:	08004453 	.word	0x08004453
 80042a4:	08004453 	.word	0x08004453
 80042a8:	0800438f 	.word	0x0800438f
 80042ac:	08004453 	.word	0x08004453
 80042b0:	08004453 	.word	0x08004453
 80042b4:	08004453 	.word	0x08004453
 80042b8:	080043d1 	.word	0x080043d1
 80042bc:	08004453 	.word	0x08004453
 80042c0:	08004453 	.word	0x08004453
 80042c4:	08004453 	.word	0x08004453
 80042c8:	08004411 	.word	0x08004411
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f000 f998 	bl	8004608 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	699a      	ldr	r2, [r3, #24]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f042 0208 	orr.w	r2, r2, #8
 80042e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	699a      	ldr	r2, [r3, #24]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f022 0204 	bic.w	r2, r2, #4
 80042f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	6999      	ldr	r1, [r3, #24]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	691a      	ldr	r2, [r3, #16]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	619a      	str	r2, [r3, #24]
      break;
 800430a:	e0a5      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68b9      	ldr	r1, [r7, #8]
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fa08 	bl	8004728 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	699a      	ldr	r2, [r3, #24]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004326:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004336:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
      break;
 800434c:	e084      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68b9      	ldr	r1, [r7, #8]
 8004354:	4618      	mov	r0, r3
 8004356:	f000 fa71 	bl	800483c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	69da      	ldr	r2, [r3, #28]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0208 	orr.w	r2, r2, #8
 8004368:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0204 	bic.w	r2, r2, #4
 8004378:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	69d9      	ldr	r1, [r3, #28]
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	691a      	ldr	r2, [r3, #16]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	430a      	orrs	r2, r1
 800438a:	61da      	str	r2, [r3, #28]
      break;
 800438c:	e064      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68b9      	ldr	r1, [r7, #8]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fad9 	bl	800494c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	69da      	ldr	r2, [r3, #28]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	69da      	ldr	r2, [r3, #28]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	69d9      	ldr	r1, [r3, #28]
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	691b      	ldr	r3, [r3, #16]
 80043c4:	021a      	lsls	r2, r3, #8
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	61da      	str	r2, [r3, #28]
      break;
 80043ce:	e043      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fb22 	bl	8004a20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f042 0208 	orr.w	r2, r2, #8
 80043ea:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 0204 	bic.w	r2, r2, #4
 80043fa:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	691a      	ldr	r2, [r3, #16]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	430a      	orrs	r2, r1
 800440c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800440e:	e023      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68b9      	ldr	r1, [r7, #8]
 8004416:	4618      	mov	r0, r3
 8004418:	f000 fb66 	bl	8004ae8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800442a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800443a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	021a      	lsls	r2, r3, #8
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004450:	e002      	b.n	8004458 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	75fb      	strb	r3, [r7, #23]
      break;
 8004456:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004460:	7dfb      	ldrb	r3, [r7, #23]
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop

0800446c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b083      	sub	sp, #12
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044b0:	bf00      	nop
 80044b2:	370c      	adds	r7, #12
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr

080044bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	4a46      	ldr	r2, [pc, #280]	@ (80045e8 <TIM_Base_SetConfig+0x12c>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044da:	d00f      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a43      	ldr	r2, [pc, #268]	@ (80045ec <TIM_Base_SetConfig+0x130>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d00b      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a42      	ldr	r2, [pc, #264]	@ (80045f0 <TIM_Base_SetConfig+0x134>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d007      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a41      	ldr	r2, [pc, #260]	@ (80045f4 <TIM_Base_SetConfig+0x138>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d003      	beq.n	80044fc <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a40      	ldr	r2, [pc, #256]	@ (80045f8 <TIM_Base_SetConfig+0x13c>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d108      	bne.n	800450e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004502:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a35      	ldr	r2, [pc, #212]	@ (80045e8 <TIM_Base_SetConfig+0x12c>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d01f      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800451c:	d01b      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	4a32      	ldr	r2, [pc, #200]	@ (80045ec <TIM_Base_SetConfig+0x130>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d017      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a31      	ldr	r2, [pc, #196]	@ (80045f0 <TIM_Base_SetConfig+0x134>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d013      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a30      	ldr	r2, [pc, #192]	@ (80045f4 <TIM_Base_SetConfig+0x138>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d00f      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a2f      	ldr	r2, [pc, #188]	@ (80045f8 <TIM_Base_SetConfig+0x13c>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d00b      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a2e      	ldr	r2, [pc, #184]	@ (80045fc <TIM_Base_SetConfig+0x140>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d007      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a2d      	ldr	r2, [pc, #180]	@ (8004600 <TIM_Base_SetConfig+0x144>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d003      	beq.n	8004556 <TIM_Base_SetConfig+0x9a>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a2c      	ldr	r2, [pc, #176]	@ (8004604 <TIM_Base_SetConfig+0x148>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d108      	bne.n	8004568 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800455c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	4313      	orrs	r3, r2
 8004566:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	4313      	orrs	r3, r2
 8004574:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4a16      	ldr	r2, [pc, #88]	@ (80045e8 <TIM_Base_SetConfig+0x12c>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d00f      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4a18      	ldr	r2, [pc, #96]	@ (80045f8 <TIM_Base_SetConfig+0x13c>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d00b      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a17      	ldr	r2, [pc, #92]	@ (80045fc <TIM_Base_SetConfig+0x140>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d007      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a16      	ldr	r2, [pc, #88]	@ (8004600 <TIM_Base_SetConfig+0x144>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d003      	beq.n	80045b4 <TIM_Base_SetConfig+0xf8>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a15      	ldr	r2, [pc, #84]	@ (8004604 <TIM_Base_SetConfig+0x148>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d103      	bne.n	80045bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	691a      	ldr	r2, [r3, #16]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b01      	cmp	r3, #1
 80045cc:	d105      	bne.n	80045da <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	f023 0201 	bic.w	r2, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	611a      	str	r2, [r3, #16]
  }
}
 80045da:	bf00      	nop
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40012c00 	.word	0x40012c00
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40013400 	.word	0x40013400
 80045fc:	40014000 	.word	0x40014000
 8004600:	40014400 	.word	0x40014400
 8004604:	40014800 	.word	0x40014800

08004608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004608:	b480      	push	{r7}
 800460a:	b087      	sub	sp, #28
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	f023 0201 	bic.w	r2, r3, #1
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800463a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f023 0303 	bic.w	r3, r3, #3
 8004642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	4313      	orrs	r3, r2
 800464c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f023 0302 	bic.w	r3, r3, #2
 8004654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	4a2c      	ldr	r2, [pc, #176]	@ (8004714 <TIM_OC1_SetConfig+0x10c>)
 8004664:	4293      	cmp	r3, r2
 8004666:	d00f      	beq.n	8004688 <TIM_OC1_SetConfig+0x80>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	4a2b      	ldr	r2, [pc, #172]	@ (8004718 <TIM_OC1_SetConfig+0x110>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d00b      	beq.n	8004688 <TIM_OC1_SetConfig+0x80>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a2a      	ldr	r2, [pc, #168]	@ (800471c <TIM_OC1_SetConfig+0x114>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d007      	beq.n	8004688 <TIM_OC1_SetConfig+0x80>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a29      	ldr	r2, [pc, #164]	@ (8004720 <TIM_OC1_SetConfig+0x118>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d003      	beq.n	8004688 <TIM_OC1_SetConfig+0x80>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	4a28      	ldr	r2, [pc, #160]	@ (8004724 <TIM_OC1_SetConfig+0x11c>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d10c      	bne.n	80046a2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 0308 	bic.w	r3, r3, #8
 800468e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f023 0304 	bic.w	r3, r3, #4
 80046a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4a1b      	ldr	r2, [pc, #108]	@ (8004714 <TIM_OC1_SetConfig+0x10c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00f      	beq.n	80046ca <TIM_OC1_SetConfig+0xc2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	4a1a      	ldr	r2, [pc, #104]	@ (8004718 <TIM_OC1_SetConfig+0x110>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d00b      	beq.n	80046ca <TIM_OC1_SetConfig+0xc2>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a19      	ldr	r2, [pc, #100]	@ (800471c <TIM_OC1_SetConfig+0x114>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d007      	beq.n	80046ca <TIM_OC1_SetConfig+0xc2>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a18      	ldr	r2, [pc, #96]	@ (8004720 <TIM_OC1_SetConfig+0x118>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d003      	beq.n	80046ca <TIM_OC1_SetConfig+0xc2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a17      	ldr	r2, [pc, #92]	@ (8004724 <TIM_OC1_SetConfig+0x11c>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d111      	bne.n	80046ee <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80046d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	693a      	ldr	r2, [r7, #16]
 80046f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	68fa      	ldr	r2, [r7, #12]
 80046f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	621a      	str	r2, [r3, #32]
}
 8004708:	bf00      	nop
 800470a:	371c      	adds	r7, #28
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40012c00 	.word	0x40012c00
 8004718:	40013400 	.word	0x40013400
 800471c:	40014000 	.word	0x40014000
 8004720:	40014400 	.word	0x40014400
 8004724:	40014800 	.word	0x40014800

08004728 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004728:	b480      	push	{r7}
 800472a:	b087      	sub	sp, #28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f023 0210 	bic.w	r2, r3, #16
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800475a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	021b      	lsls	r3, r3, #8
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	4313      	orrs	r3, r2
 800476e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f023 0320 	bic.w	r3, r3, #32
 8004776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a28      	ldr	r2, [pc, #160]	@ (8004828 <TIM_OC2_SetConfig+0x100>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d003      	beq.n	8004794 <TIM_OC2_SetConfig+0x6c>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a27      	ldr	r2, [pc, #156]	@ (800482c <TIM_OC2_SetConfig+0x104>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d10d      	bne.n	80047b0 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800479a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	011b      	lsls	r3, r3, #4
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004828 <TIM_OC2_SetConfig+0x100>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d00f      	beq.n	80047d8 <TIM_OC2_SetConfig+0xb0>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	4a1c      	ldr	r2, [pc, #112]	@ (800482c <TIM_OC2_SetConfig+0x104>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d00b      	beq.n	80047d8 <TIM_OC2_SetConfig+0xb0>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004830 <TIM_OC2_SetConfig+0x108>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d007      	beq.n	80047d8 <TIM_OC2_SetConfig+0xb0>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004834 <TIM_OC2_SetConfig+0x10c>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d003      	beq.n	80047d8 <TIM_OC2_SetConfig+0xb0>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a19      	ldr	r2, [pc, #100]	@ (8004838 <TIM_OC2_SetConfig+0x110>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d113      	bne.n	8004800 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80047de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80047e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	693a      	ldr	r2, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	699b      	ldr	r3, [r3, #24]
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	693a      	ldr	r2, [r7, #16]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685a      	ldr	r2, [r3, #4]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	621a      	str	r2, [r3, #32]
}
 800481a:	bf00      	nop
 800481c:	371c      	adds	r7, #28
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40012c00 	.word	0x40012c00
 800482c:	40013400 	.word	0x40013400
 8004830:	40014000 	.word	0x40014000
 8004834:	40014400 	.word	0x40014400
 8004838:	40014800 	.word	0x40014800

0800483c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800486a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800486e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f023 0303 	bic.w	r3, r3, #3
 8004876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	689b      	ldr	r3, [r3, #8]
 800488e:	021b      	lsls	r3, r3, #8
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a27      	ldr	r2, [pc, #156]	@ (8004938 <TIM_OC3_SetConfig+0xfc>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d003      	beq.n	80048a6 <TIM_OC3_SetConfig+0x6a>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a26      	ldr	r2, [pc, #152]	@ (800493c <TIM_OC3_SetConfig+0x100>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d10d      	bne.n	80048c2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80048ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	021b      	lsls	r3, r3, #8
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80048c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004938 <TIM_OC3_SetConfig+0xfc>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d00f      	beq.n	80048ea <TIM_OC3_SetConfig+0xae>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a1b      	ldr	r2, [pc, #108]	@ (800493c <TIM_OC3_SetConfig+0x100>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d00b      	beq.n	80048ea <TIM_OC3_SetConfig+0xae>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004940 <TIM_OC3_SetConfig+0x104>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d007      	beq.n	80048ea <TIM_OC3_SetConfig+0xae>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a19      	ldr	r2, [pc, #100]	@ (8004944 <TIM_OC3_SetConfig+0x108>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d003      	beq.n	80048ea <TIM_OC3_SetConfig+0xae>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a18      	ldr	r2, [pc, #96]	@ (8004948 <TIM_OC3_SetConfig+0x10c>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d113      	bne.n	8004912 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80048f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	699b      	ldr	r3, [r3, #24]
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	621a      	str	r2, [r3, #32]
}
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40013400 	.word	0x40013400
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800

0800494c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a1b      	ldr	r3, [r3, #32]
 800495a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800497a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800497e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004986:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	021b      	lsls	r3, r3, #8
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800499a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	031b      	lsls	r3, r3, #12
 80049a2:	693a      	ldr	r2, [r7, #16]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a18      	ldr	r2, [pc, #96]	@ (8004a0c <TIM_OC4_SetConfig+0xc0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00f      	beq.n	80049d0 <TIM_OC4_SetConfig+0x84>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a17      	ldr	r2, [pc, #92]	@ (8004a10 <TIM_OC4_SetConfig+0xc4>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d00b      	beq.n	80049d0 <TIM_OC4_SetConfig+0x84>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a16      	ldr	r2, [pc, #88]	@ (8004a14 <TIM_OC4_SetConfig+0xc8>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d007      	beq.n	80049d0 <TIM_OC4_SetConfig+0x84>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a15      	ldr	r2, [pc, #84]	@ (8004a18 <TIM_OC4_SetConfig+0xcc>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_OC4_SetConfig+0x84>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a14      	ldr	r2, [pc, #80]	@ (8004a1c <TIM_OC4_SetConfig+0xd0>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d109      	bne.n	80049e4 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80049d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	695b      	ldr	r3, [r3, #20]
 80049dc:	019b      	lsls	r3, r3, #6
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	621a      	str	r2, [r3, #32]
}
 80049fe:	bf00      	nop
 8004a00:	371c      	adds	r7, #28
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	40012c00 	.word	0x40012c00
 8004a10:	40013400 	.word	0x40013400
 8004a14:	40014000 	.word	0x40014000
 8004a18:	40014400 	.word	0x40014400
 8004a1c:	40014800 	.word	0x40014800

08004a20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b087      	sub	sp, #28
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004a64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a17      	ldr	r2, [pc, #92]	@ (8004ad4 <TIM_OC5_SetConfig+0xb4>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d00f      	beq.n	8004a9a <TIM_OC5_SetConfig+0x7a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a16      	ldr	r2, [pc, #88]	@ (8004ad8 <TIM_OC5_SetConfig+0xb8>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00b      	beq.n	8004a9a <TIM_OC5_SetConfig+0x7a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	4a15      	ldr	r2, [pc, #84]	@ (8004adc <TIM_OC5_SetConfig+0xbc>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d007      	beq.n	8004a9a <TIM_OC5_SetConfig+0x7a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ae0 <TIM_OC5_SetConfig+0xc0>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d003      	beq.n	8004a9a <TIM_OC5_SetConfig+0x7a>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a13      	ldr	r2, [pc, #76]	@ (8004ae4 <TIM_OC5_SetConfig+0xc4>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d109      	bne.n	8004aae <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	021b      	lsls	r3, r3, #8
 8004aa8:	697a      	ldr	r2, [r7, #20]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	621a      	str	r2, [r3, #32]
}
 8004ac8:	bf00      	nop
 8004aca:	371c      	adds	r7, #28
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40012c00 	.word	0x40012c00
 8004ad8:	40013400 	.word	0x40013400
 8004adc:	40014000 	.word	0x40014000
 8004ae0:	40014400 	.word	0x40014400
 8004ae4:	40014800 	.word	0x40014800

08004ae8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b087      	sub	sp, #28
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a1b      	ldr	r3, [r3, #32]
 8004afc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	021b      	lsls	r3, r3, #8
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	051b      	lsls	r3, r3, #20
 8004b36:	693a      	ldr	r2, [r7, #16]
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a18      	ldr	r2, [pc, #96]	@ (8004ba0 <TIM_OC6_SetConfig+0xb8>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00f      	beq.n	8004b64 <TIM_OC6_SetConfig+0x7c>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a17      	ldr	r2, [pc, #92]	@ (8004ba4 <TIM_OC6_SetConfig+0xbc>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d00b      	beq.n	8004b64 <TIM_OC6_SetConfig+0x7c>
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	4a16      	ldr	r2, [pc, #88]	@ (8004ba8 <TIM_OC6_SetConfig+0xc0>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d007      	beq.n	8004b64 <TIM_OC6_SetConfig+0x7c>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	4a15      	ldr	r2, [pc, #84]	@ (8004bac <TIM_OC6_SetConfig+0xc4>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d003      	beq.n	8004b64 <TIM_OC6_SetConfig+0x7c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a14      	ldr	r2, [pc, #80]	@ (8004bb0 <TIM_OC6_SetConfig+0xc8>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d109      	bne.n	8004b78 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	029b      	lsls	r3, r3, #10
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	621a      	str	r2, [r3, #32]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40012c00 	.word	0x40012c00
 8004ba4:	40013400 	.word	0x40013400
 8004ba8:	40014000 	.word	0x40014000
 8004bac:	40014400 	.word	0x40014400
 8004bb0:	40014800 	.word	0x40014800

08004bb4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	6a1a      	ldr	r2, [r3, #32]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	43db      	mvns	r3, r3
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	6a1a      	ldr	r2, [r3, #32]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 031f 	and.w	r3, r3, #31
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	fa01 f303 	lsl.w	r3, r1, r3
 8004bec:	431a      	orrs	r2, r3
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	bf00      	nop
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
	...

08004c00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d101      	bne.n	8004c18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c14:	2302      	movs	r3, #2
 8004c16:	e068      	b.n	8004cea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2202      	movs	r2, #2
 8004c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a2e      	ldr	r2, [pc, #184]	@ (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d004      	beq.n	8004c4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a2d      	ldr	r2, [pc, #180]	@ (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d108      	bne.n	8004c5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004c52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c64:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d01d      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c8a:	d018      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a1b      	ldr	r2, [pc, #108]	@ (8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d013      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a1a      	ldr	r2, [pc, #104]	@ (8004d04 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d00e      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a18      	ldr	r2, [pc, #96]	@ (8004d08 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d009      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a13      	ldr	r2, [pc, #76]	@ (8004cfc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d004      	beq.n	8004cbe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a14      	ldr	r2, [pc, #80]	@ (8004d0c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d10c      	bne.n	8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68ba      	ldr	r2, [r7, #8]
 8004cd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40012c00 	.word	0x40012c00
 8004cfc:	40013400 	.word	0x40013400
 8004d00:	40000400 	.word	0x40000400
 8004d04:	40000800 	.word	0x40000800
 8004d08:	40000c00 	.word	0x40000c00
 8004d0c:	40014000 	.word	0x40014000

08004d10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e065      	b.n	8004df8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	041b      	lsls	r3, r3, #16
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a16      	ldr	r2, [pc, #88]	@ (8004e04 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a14      	ldr	r2, [pc, #80]	@ (8004e08 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d115      	bne.n	8004de6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc4:	051b      	lsls	r3, r3, #20
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	69db      	ldr	r3, [r3, #28]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3714      	adds	r7, #20
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	40012c00 	.word	0x40012c00
 8004e08:	40013400 	.word	0x40013400

08004e0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e040      	b.n	8004edc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d106      	bne.n	8004e70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fc fea6 	bl	8001bbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2224      	movs	r2, #36	@ 0x24
 8004e74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681a      	ldr	r2, [r3, #0]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f022 0201 	bic.w	r2, r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fae0 	bl	8005454 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f000 f825 	bl	8004ee4 <UART_SetConfig>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d101      	bne.n	8004ea4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e01b      	b.n	8004edc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004eb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	689a      	ldr	r2, [r3, #8]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ec2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f042 0201 	orr.w	r2, r2, #1
 8004ed2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fb5f 	bl	8005598 <UART_CheckIdleState>
 8004eda:	4603      	mov	r3, r0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee8:	b08a      	sub	sp, #40	@ 0x28
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	431a      	orrs	r2, r3
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	431a      	orrs	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4ba4      	ldr	r3, [pc, #656]	@ (80051a4 <UART_SetConfig+0x2c0>)
 8004f14:	4013      	ands	r3, r2
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	68da      	ldr	r2, [r3, #12]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	699b      	ldr	r3, [r3, #24]
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a99      	ldr	r2, [pc, #612]	@ (80051a8 <UART_SetConfig+0x2c4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a1b      	ldr	r3, [r3, #32]
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f60:	430a      	orrs	r2, r1
 8004f62:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a90      	ldr	r2, [pc, #576]	@ (80051ac <UART_SetConfig+0x2c8>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d126      	bne.n	8004fbc <UART_SetConfig+0xd8>
 8004f6e:	4b90      	ldr	r3, [pc, #576]	@ (80051b0 <UART_SetConfig+0x2cc>)
 8004f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f74:	f003 0303 	and.w	r3, r3, #3
 8004f78:	2b03      	cmp	r3, #3
 8004f7a:	d81b      	bhi.n	8004fb4 <UART_SetConfig+0xd0>
 8004f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <UART_SetConfig+0xa0>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004f95 	.word	0x08004f95
 8004f88:	08004fa5 	.word	0x08004fa5
 8004f8c:	08004f9d 	.word	0x08004f9d
 8004f90:	08004fad 	.word	0x08004fad
 8004f94:	2301      	movs	r3, #1
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f9a:	e116      	b.n	80051ca <UART_SetConfig+0x2e6>
 8004f9c:	2302      	movs	r3, #2
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fa2:	e112      	b.n	80051ca <UART_SetConfig+0x2e6>
 8004fa4:	2304      	movs	r3, #4
 8004fa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004faa:	e10e      	b.n	80051ca <UART_SetConfig+0x2e6>
 8004fac:	2308      	movs	r3, #8
 8004fae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fb2:	e10a      	b.n	80051ca <UART_SetConfig+0x2e6>
 8004fb4:	2310      	movs	r3, #16
 8004fb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fba:	e106      	b.n	80051ca <UART_SetConfig+0x2e6>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a7c      	ldr	r2, [pc, #496]	@ (80051b4 <UART_SetConfig+0x2d0>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d138      	bne.n	8005038 <UART_SetConfig+0x154>
 8004fc6:	4b7a      	ldr	r3, [pc, #488]	@ (80051b0 <UART_SetConfig+0x2cc>)
 8004fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fcc:	f003 030c 	and.w	r3, r3, #12
 8004fd0:	2b0c      	cmp	r3, #12
 8004fd2:	d82d      	bhi.n	8005030 <UART_SetConfig+0x14c>
 8004fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8004fdc <UART_SetConfig+0xf8>)
 8004fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fda:	bf00      	nop
 8004fdc:	08005011 	.word	0x08005011
 8004fe0:	08005031 	.word	0x08005031
 8004fe4:	08005031 	.word	0x08005031
 8004fe8:	08005031 	.word	0x08005031
 8004fec:	08005021 	.word	0x08005021
 8004ff0:	08005031 	.word	0x08005031
 8004ff4:	08005031 	.word	0x08005031
 8004ff8:	08005031 	.word	0x08005031
 8004ffc:	08005019 	.word	0x08005019
 8005000:	08005031 	.word	0x08005031
 8005004:	08005031 	.word	0x08005031
 8005008:	08005031 	.word	0x08005031
 800500c:	08005029 	.word	0x08005029
 8005010:	2300      	movs	r3, #0
 8005012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005016:	e0d8      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005018:	2302      	movs	r3, #2
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501e:	e0d4      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005020:	2304      	movs	r3, #4
 8005022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005026:	e0d0      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005028:	2308      	movs	r3, #8
 800502a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502e:	e0cc      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005030:	2310      	movs	r3, #16
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005036:	e0c8      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a5e      	ldr	r2, [pc, #376]	@ (80051b8 <UART_SetConfig+0x2d4>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d125      	bne.n	800508e <UART_SetConfig+0x1aa>
 8005042:	4b5b      	ldr	r3, [pc, #364]	@ (80051b0 <UART_SetConfig+0x2cc>)
 8005044:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005048:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800504c:	2b30      	cmp	r3, #48	@ 0x30
 800504e:	d016      	beq.n	800507e <UART_SetConfig+0x19a>
 8005050:	2b30      	cmp	r3, #48	@ 0x30
 8005052:	d818      	bhi.n	8005086 <UART_SetConfig+0x1a2>
 8005054:	2b20      	cmp	r3, #32
 8005056:	d00a      	beq.n	800506e <UART_SetConfig+0x18a>
 8005058:	2b20      	cmp	r3, #32
 800505a:	d814      	bhi.n	8005086 <UART_SetConfig+0x1a2>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <UART_SetConfig+0x182>
 8005060:	2b10      	cmp	r3, #16
 8005062:	d008      	beq.n	8005076 <UART_SetConfig+0x192>
 8005064:	e00f      	b.n	8005086 <UART_SetConfig+0x1a2>
 8005066:	2300      	movs	r3, #0
 8005068:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800506c:	e0ad      	b.n	80051ca <UART_SetConfig+0x2e6>
 800506e:	2302      	movs	r3, #2
 8005070:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005074:	e0a9      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005076:	2304      	movs	r3, #4
 8005078:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507c:	e0a5      	b.n	80051ca <UART_SetConfig+0x2e6>
 800507e:	2308      	movs	r3, #8
 8005080:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005084:	e0a1      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005086:	2310      	movs	r3, #16
 8005088:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508c:	e09d      	b.n	80051ca <UART_SetConfig+0x2e6>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a4a      	ldr	r2, [pc, #296]	@ (80051bc <UART_SetConfig+0x2d8>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d125      	bne.n	80050e4 <UART_SetConfig+0x200>
 8005098:	4b45      	ldr	r3, [pc, #276]	@ (80051b0 <UART_SetConfig+0x2cc>)
 800509a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800509e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80050a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80050a4:	d016      	beq.n	80050d4 <UART_SetConfig+0x1f0>
 80050a6:	2bc0      	cmp	r3, #192	@ 0xc0
 80050a8:	d818      	bhi.n	80050dc <UART_SetConfig+0x1f8>
 80050aa:	2b80      	cmp	r3, #128	@ 0x80
 80050ac:	d00a      	beq.n	80050c4 <UART_SetConfig+0x1e0>
 80050ae:	2b80      	cmp	r3, #128	@ 0x80
 80050b0:	d814      	bhi.n	80050dc <UART_SetConfig+0x1f8>
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d002      	beq.n	80050bc <UART_SetConfig+0x1d8>
 80050b6:	2b40      	cmp	r3, #64	@ 0x40
 80050b8:	d008      	beq.n	80050cc <UART_SetConfig+0x1e8>
 80050ba:	e00f      	b.n	80050dc <UART_SetConfig+0x1f8>
 80050bc:	2300      	movs	r3, #0
 80050be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c2:	e082      	b.n	80051ca <UART_SetConfig+0x2e6>
 80050c4:	2302      	movs	r3, #2
 80050c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ca:	e07e      	b.n	80051ca <UART_SetConfig+0x2e6>
 80050cc:	2304      	movs	r3, #4
 80050ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d2:	e07a      	b.n	80051ca <UART_SetConfig+0x2e6>
 80050d4:	2308      	movs	r3, #8
 80050d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050da:	e076      	b.n	80051ca <UART_SetConfig+0x2e6>
 80050dc:	2310      	movs	r3, #16
 80050de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e2:	e072      	b.n	80051ca <UART_SetConfig+0x2e6>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a35      	ldr	r2, [pc, #212]	@ (80051c0 <UART_SetConfig+0x2dc>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d12a      	bne.n	8005144 <UART_SetConfig+0x260>
 80050ee:	4b30      	ldr	r3, [pc, #192]	@ (80051b0 <UART_SetConfig+0x2cc>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80050fc:	d01a      	beq.n	8005134 <UART_SetConfig+0x250>
 80050fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005102:	d81b      	bhi.n	800513c <UART_SetConfig+0x258>
 8005104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005108:	d00c      	beq.n	8005124 <UART_SetConfig+0x240>
 800510a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800510e:	d815      	bhi.n	800513c <UART_SetConfig+0x258>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d003      	beq.n	800511c <UART_SetConfig+0x238>
 8005114:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005118:	d008      	beq.n	800512c <UART_SetConfig+0x248>
 800511a:	e00f      	b.n	800513c <UART_SetConfig+0x258>
 800511c:	2300      	movs	r3, #0
 800511e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005122:	e052      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005124:	2302      	movs	r3, #2
 8005126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800512a:	e04e      	b.n	80051ca <UART_SetConfig+0x2e6>
 800512c:	2304      	movs	r3, #4
 800512e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005132:	e04a      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005134:	2308      	movs	r3, #8
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513a:	e046      	b.n	80051ca <UART_SetConfig+0x2e6>
 800513c:	2310      	movs	r3, #16
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005142:	e042      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4a17      	ldr	r2, [pc, #92]	@ (80051a8 <UART_SetConfig+0x2c4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d13a      	bne.n	80051c4 <UART_SetConfig+0x2e0>
 800514e:	4b18      	ldr	r3, [pc, #96]	@ (80051b0 <UART_SetConfig+0x2cc>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005154:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005158:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800515c:	d01a      	beq.n	8005194 <UART_SetConfig+0x2b0>
 800515e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005162:	d81b      	bhi.n	800519c <UART_SetConfig+0x2b8>
 8005164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005168:	d00c      	beq.n	8005184 <UART_SetConfig+0x2a0>
 800516a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800516e:	d815      	bhi.n	800519c <UART_SetConfig+0x2b8>
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <UART_SetConfig+0x298>
 8005174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005178:	d008      	beq.n	800518c <UART_SetConfig+0x2a8>
 800517a:	e00f      	b.n	800519c <UART_SetConfig+0x2b8>
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005182:	e022      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005184:	2302      	movs	r3, #2
 8005186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800518a:	e01e      	b.n	80051ca <UART_SetConfig+0x2e6>
 800518c:	2304      	movs	r3, #4
 800518e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005192:	e01a      	b.n	80051ca <UART_SetConfig+0x2e6>
 8005194:	2308      	movs	r3, #8
 8005196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800519a:	e016      	b.n	80051ca <UART_SetConfig+0x2e6>
 800519c:	2310      	movs	r3, #16
 800519e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051a2:	e012      	b.n	80051ca <UART_SetConfig+0x2e6>
 80051a4:	efff69f3 	.word	0xefff69f3
 80051a8:	40008000 	.word	0x40008000
 80051ac:	40013800 	.word	0x40013800
 80051b0:	40021000 	.word	0x40021000
 80051b4:	40004400 	.word	0x40004400
 80051b8:	40004800 	.word	0x40004800
 80051bc:	40004c00 	.word	0x40004c00
 80051c0:	40005000 	.word	0x40005000
 80051c4:	2310      	movs	r3, #16
 80051c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a9f      	ldr	r2, [pc, #636]	@ (800544c <UART_SetConfig+0x568>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d17a      	bne.n	80052ca <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80051d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d824      	bhi.n	8005226 <UART_SetConfig+0x342>
 80051dc:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <UART_SetConfig+0x300>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	08005209 	.word	0x08005209
 80051e8:	08005227 	.word	0x08005227
 80051ec:	08005211 	.word	0x08005211
 80051f0:	08005227 	.word	0x08005227
 80051f4:	08005217 	.word	0x08005217
 80051f8:	08005227 	.word	0x08005227
 80051fc:	08005227 	.word	0x08005227
 8005200:	08005227 	.word	0x08005227
 8005204:	0800521f 	.word	0x0800521f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005208:	f7fd fed4 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 800520c:	61f8      	str	r0, [r7, #28]
        break;
 800520e:	e010      	b.n	8005232 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005210:	4b8f      	ldr	r3, [pc, #572]	@ (8005450 <UART_SetConfig+0x56c>)
 8005212:	61fb      	str	r3, [r7, #28]
        break;
 8005214:	e00d      	b.n	8005232 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005216:	f7fd fe35 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 800521a:	61f8      	str	r0, [r7, #28]
        break;
 800521c:	e009      	b.n	8005232 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005222:	61fb      	str	r3, [r7, #28]
        break;
 8005224:	e005      	b.n	8005232 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005230:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80fb 	beq.w	8005430 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	4613      	mov	r3, r2
 8005240:	005b      	lsls	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	429a      	cmp	r2, r3
 8005248:	d305      	bcc.n	8005256 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	429a      	cmp	r2, r3
 8005254:	d903      	bls.n	800525e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800525c:	e0e8      	b.n	8005430 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	2200      	movs	r2, #0
 8005262:	461c      	mov	r4, r3
 8005264:	4615      	mov	r5, r2
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	022b      	lsls	r3, r5, #8
 8005270:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005274:	0222      	lsls	r2, r4, #8
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	6849      	ldr	r1, [r1, #4]
 800527a:	0849      	lsrs	r1, r1, #1
 800527c:	2000      	movs	r0, #0
 800527e:	4688      	mov	r8, r1
 8005280:	4681      	mov	r9, r0
 8005282:	eb12 0a08 	adds.w	sl, r2, r8
 8005286:	eb43 0b09 	adc.w	fp, r3, r9
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	603b      	str	r3, [r7, #0]
 8005292:	607a      	str	r2, [r7, #4]
 8005294:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005298:	4650      	mov	r0, sl
 800529a:	4659      	mov	r1, fp
 800529c:	f7fa ff98 	bl	80001d0 <__aeabi_uldivmod>
 80052a0:	4602      	mov	r2, r0
 80052a2:	460b      	mov	r3, r1
 80052a4:	4613      	mov	r3, r2
 80052a6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052ae:	d308      	bcc.n	80052c2 <UART_SetConfig+0x3de>
 80052b0:	69bb      	ldr	r3, [r7, #24]
 80052b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052b6:	d204      	bcs.n	80052c2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	60da      	str	r2, [r3, #12]
 80052c0:	e0b6      	b.n	8005430 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052c8:	e0b2      	b.n	8005430 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052d2:	d15e      	bne.n	8005392 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80052d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052d8:	2b08      	cmp	r3, #8
 80052da:	d828      	bhi.n	800532e <UART_SetConfig+0x44a>
 80052dc:	a201      	add	r2, pc, #4	@ (adr r2, 80052e4 <UART_SetConfig+0x400>)
 80052de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e2:	bf00      	nop
 80052e4:	08005309 	.word	0x08005309
 80052e8:	08005311 	.word	0x08005311
 80052ec:	08005319 	.word	0x08005319
 80052f0:	0800532f 	.word	0x0800532f
 80052f4:	0800531f 	.word	0x0800531f
 80052f8:	0800532f 	.word	0x0800532f
 80052fc:	0800532f 	.word	0x0800532f
 8005300:	0800532f 	.word	0x0800532f
 8005304:	08005327 	.word	0x08005327
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005308:	f7fd fe54 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 800530c:	61f8      	str	r0, [r7, #28]
        break;
 800530e:	e014      	b.n	800533a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005310:	f7fd fe66 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 8005314:	61f8      	str	r0, [r7, #28]
        break;
 8005316:	e010      	b.n	800533a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005318:	4b4d      	ldr	r3, [pc, #308]	@ (8005450 <UART_SetConfig+0x56c>)
 800531a:	61fb      	str	r3, [r7, #28]
        break;
 800531c:	e00d      	b.n	800533a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800531e:	f7fd fdb1 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 8005322:	61f8      	str	r0, [r7, #28]
        break;
 8005324:	e009      	b.n	800533a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005326:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800532a:	61fb      	str	r3, [r7, #28]
        break;
 800532c:	e005      	b.n	800533a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800532e:	2300      	movs	r3, #0
 8005330:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005338:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d077      	beq.n	8005430 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	005a      	lsls	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	085b      	lsrs	r3, r3, #1
 800534a:	441a      	add	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	fbb2 f3f3 	udiv	r3, r2, r3
 8005354:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	2b0f      	cmp	r3, #15
 800535a:	d916      	bls.n	800538a <UART_SetConfig+0x4a6>
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005362:	d212      	bcs.n	800538a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	b29b      	uxth	r3, r3
 8005368:	f023 030f 	bic.w	r3, r3, #15
 800536c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	085b      	lsrs	r3, r3, #1
 8005372:	b29b      	uxth	r3, r3
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	b29a      	uxth	r2, r3
 800537a:	8afb      	ldrh	r3, [r7, #22]
 800537c:	4313      	orrs	r3, r2
 800537e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	8afa      	ldrh	r2, [r7, #22]
 8005386:	60da      	str	r2, [r3, #12]
 8005388:	e052      	b.n	8005430 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005390:	e04e      	b.n	8005430 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005392:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005396:	2b08      	cmp	r3, #8
 8005398:	d827      	bhi.n	80053ea <UART_SetConfig+0x506>
 800539a:	a201      	add	r2, pc, #4	@ (adr r2, 80053a0 <UART_SetConfig+0x4bc>)
 800539c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a0:	080053c5 	.word	0x080053c5
 80053a4:	080053cd 	.word	0x080053cd
 80053a8:	080053d5 	.word	0x080053d5
 80053ac:	080053eb 	.word	0x080053eb
 80053b0:	080053db 	.word	0x080053db
 80053b4:	080053eb 	.word	0x080053eb
 80053b8:	080053eb 	.word	0x080053eb
 80053bc:	080053eb 	.word	0x080053eb
 80053c0:	080053e3 	.word	0x080053e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c4:	f7fd fdf6 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 80053c8:	61f8      	str	r0, [r7, #28]
        break;
 80053ca:	e014      	b.n	80053f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053cc:	f7fd fe08 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 80053d0:	61f8      	str	r0, [r7, #28]
        break;
 80053d2:	e010      	b.n	80053f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005450 <UART_SetConfig+0x56c>)
 80053d6:	61fb      	str	r3, [r7, #28]
        break;
 80053d8:	e00d      	b.n	80053f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053da:	f7fd fd53 	bl	8002e84 <HAL_RCC_GetSysClockFreq>
 80053de:	61f8      	str	r0, [r7, #28]
        break;
 80053e0:	e009      	b.n	80053f6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053e6:	61fb      	str	r3, [r7, #28]
        break;
 80053e8:	e005      	b.n	80053f6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80053ea:	2300      	movs	r3, #0
 80053ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053f4:	bf00      	nop
    }

    if (pclk != 0U)
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d019      	beq.n	8005430 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	085a      	lsrs	r2, r3, #1
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	441a      	add	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	fbb2 f3f3 	udiv	r3, r2, r3
 800540e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005410:	69bb      	ldr	r3, [r7, #24]
 8005412:	2b0f      	cmp	r3, #15
 8005414:	d909      	bls.n	800542a <UART_SetConfig+0x546>
 8005416:	69bb      	ldr	r3, [r7, #24]
 8005418:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800541c:	d205      	bcs.n	800542a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	b29a      	uxth	r2, r3
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	60da      	str	r2, [r3, #12]
 8005428:	e002      	b.n	8005430 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800542a:	2301      	movs	r3, #1
 800542c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800543c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005440:	4618      	mov	r0, r3
 8005442:	3728      	adds	r7, #40	@ 0x28
 8005444:	46bd      	mov	sp, r7
 8005446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800544a:	bf00      	nop
 800544c:	40008000 	.word	0x40008000
 8005450:	00f42400 	.word	0x00f42400

08005454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	f003 0308 	and.w	r3, r3, #8
 8005464:	2b00      	cmp	r3, #0
 8005466:	d00a      	beq.n	800547e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00a      	beq.n	80054a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	430a      	orrs	r2, r1
 800549e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d00a      	beq.n	80054c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c6:	f003 0304 	and.w	r3, r3, #4
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00a      	beq.n	8005506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	430a      	orrs	r2, r1
 8005504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800550a:	f003 0320 	and.w	r3, r3, #32
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00a      	beq.n	8005528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01a      	beq.n	800556a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800554e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005552:	d10a      	bne.n	800556a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	605a      	str	r2, [r3, #4]
  }
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b098      	sub	sp, #96	@ 0x60
 800559c:	af02      	add	r7, sp, #8
 800559e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80055a8:	f7fc fc7c 	bl	8001ea4 <HAL_GetTick>
 80055ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d12e      	bne.n	800561a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055c0:	9300      	str	r3, [sp, #0]
 80055c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055c4:	2200      	movs	r2, #0
 80055c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f88c 	bl	80056e8 <UART_WaitOnFlagUntilTimeout>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d021      	beq.n	800561a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	461a      	mov	r2, r3
 80055f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055fc:	e841 2300 	strex	r3, r2, [r1]
 8005600:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1e6      	bne.n	80055d6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2220      	movs	r2, #32
 800560c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e062      	b.n	80056e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b04      	cmp	r3, #4
 8005626:	d149      	bne.n	80056bc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005628:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800562c:	9300      	str	r3, [sp, #0]
 800562e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005630:	2200      	movs	r2, #0
 8005632:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f856 	bl	80056e8 <UART_WaitOnFlagUntilTimeout>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d03c      	beq.n	80056bc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564a:	e853 3f00 	ldrex	r3, [r3]
 800564e:	623b      	str	r3, [r7, #32]
   return(result);
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005656:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005660:	633b      	str	r3, [r7, #48]	@ 0x30
 8005662:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005664:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005668:	e841 2300 	strex	r3, r2, [r1]
 800566c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800566e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1e6      	bne.n	8005642 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3308      	adds	r3, #8
 800567a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	60fb      	str	r3, [r7, #12]
   return(result);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0301 	bic.w	r3, r3, #1
 800568a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3308      	adds	r3, #8
 8005692:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005694:	61fa      	str	r2, [r7, #28]
 8005696:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005698:	69b9      	ldr	r1, [r7, #24]
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	e841 2300 	strex	r3, r2, [r1]
 80056a0:	617b      	str	r3, [r7, #20]
   return(result);
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e5      	bne.n	8005674 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2220      	movs	r2, #32
 80056ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e011      	b.n	80056e0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2220      	movs	r2, #32
 80056c0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2220      	movs	r2, #32
 80056c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3758      	adds	r7, #88	@ 0x58
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	603b      	str	r3, [r7, #0]
 80056f4:	4613      	mov	r3, r2
 80056f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f8:	e04f      	b.n	800579a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d04b      	beq.n	800579a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005702:	f7fc fbcf 	bl	8001ea4 <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <UART_WaitOnFlagUntilTimeout+0x30>
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005718:	2303      	movs	r3, #3
 800571a:	e04e      	b.n	80057ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0304 	and.w	r3, r3, #4
 8005726:	2b00      	cmp	r3, #0
 8005728:	d037      	beq.n	800579a <UART_WaitOnFlagUntilTimeout+0xb2>
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2b80      	cmp	r3, #128	@ 0x80
 800572e:	d034      	beq.n	800579a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	2b40      	cmp	r3, #64	@ 0x40
 8005734:	d031      	beq.n	800579a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69db      	ldr	r3, [r3, #28]
 800573c:	f003 0308 	and.w	r3, r3, #8
 8005740:	2b08      	cmp	r3, #8
 8005742:	d110      	bne.n	8005766 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2208      	movs	r2, #8
 800574a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800574c:	68f8      	ldr	r0, [r7, #12]
 800574e:	f000 f838 	bl	80057c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2208      	movs	r2, #8
 8005756:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	e029      	b.n	80057ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005770:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005774:	d111      	bne.n	800579a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800577e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005780:	68f8      	ldr	r0, [r7, #12]
 8005782:	f000 f81e 	bl	80057c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2220      	movs	r2, #32
 800578a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2200      	movs	r2, #0
 8005792:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e00f      	b.n	80057ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69da      	ldr	r2, [r3, #28]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	4013      	ands	r3, r2
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	bf0c      	ite	eq
 80057aa:	2301      	moveq	r3, #1
 80057ac:	2300      	movne	r3, #0
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	461a      	mov	r2, r3
 80057b2:	79fb      	ldrb	r3, [r7, #7]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d0a0      	beq.n	80056fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3710      	adds	r7, #16
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b095      	sub	sp, #84	@ 0x54
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057d2:	e853 3f00 	ldrex	r3, [r3]
 80057d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80057d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80057ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80057ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80057f0:	e841 2300 	strex	r3, r2, [r1]
 80057f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80057f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1e6      	bne.n	80057ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3308      	adds	r3, #8
 8005802:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	e853 3f00 	ldrex	r3, [r3]
 800580a:	61fb      	str	r3, [r7, #28]
   return(result);
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	f023 0301 	bic.w	r3, r3, #1
 8005812:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	3308      	adds	r3, #8
 800581a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800581c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800581e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005820:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005822:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005824:	e841 2300 	strex	r3, r2, [r1]
 8005828:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1e5      	bne.n	80057fc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005834:	2b01      	cmp	r3, #1
 8005836:	d118      	bne.n	800586a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	60bb      	str	r3, [r7, #8]
   return(result);
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f023 0310 	bic.w	r3, r3, #16
 800584c:	647b      	str	r3, [r7, #68]	@ 0x44
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005856:	61bb      	str	r3, [r7, #24]
 8005858:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585a:	6979      	ldr	r1, [r7, #20]
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	613b      	str	r3, [r7, #16]
   return(result);
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1e6      	bne.n	8005838 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2220      	movs	r2, #32
 800586e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2200      	movs	r2, #0
 8005876:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800587e:	bf00      	nop
 8005880:	3754      	adds	r7, #84	@ 0x54
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <__NVIC_SetPriority>:
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	4603      	mov	r3, r0
 8005894:	6039      	str	r1, [r7, #0]
 8005896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800589c:	2b00      	cmp	r3, #0
 800589e:	db0a      	blt.n	80058b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	b2da      	uxtb	r2, r3
 80058a4:	490c      	ldr	r1, [pc, #48]	@ (80058d8 <__NVIC_SetPriority+0x4c>)
 80058a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058aa:	0112      	lsls	r2, r2, #4
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	440b      	add	r3, r1
 80058b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80058b4:	e00a      	b.n	80058cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	b2da      	uxtb	r2, r3
 80058ba:	4908      	ldr	r1, [pc, #32]	@ (80058dc <__NVIC_SetPriority+0x50>)
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	f003 030f 	and.w	r3, r3, #15
 80058c2:	3b04      	subs	r3, #4
 80058c4:	0112      	lsls	r2, r2, #4
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	440b      	add	r3, r1
 80058ca:	761a      	strb	r2, [r3, #24]
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	e000e100 	.word	0xe000e100
 80058dc:	e000ed00 	.word	0xe000ed00

080058e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80058e4:	4b05      	ldr	r3, [pc, #20]	@ (80058fc <SysTick_Handler+0x1c>)
 80058e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80058e8:	f001 fdd6 	bl	8007498 <xTaskGetSchedulerState>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b01      	cmp	r3, #1
 80058f0:	d001      	beq.n	80058f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80058f2:	f002 fc91 	bl	8008218 <xPortSysTickHandler>
  }
}
 80058f6:	bf00      	nop
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	e000e010 	.word	0xe000e010

08005900 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005904:	2100      	movs	r1, #0
 8005906:	f06f 0004 	mvn.w	r0, #4
 800590a:	f7ff ffbf 	bl	800588c <__NVIC_SetPriority>
#endif
}
 800590e:	bf00      	nop
 8005910:	bd80      	pop	{r7, pc}
	...

08005914 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800591a:	f3ef 8305 	mrs	r3, IPSR
 800591e:	603b      	str	r3, [r7, #0]
  return(result);
 8005920:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005922:	2b00      	cmp	r3, #0
 8005924:	d003      	beq.n	800592e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005926:	f06f 0305 	mvn.w	r3, #5
 800592a:	607b      	str	r3, [r7, #4]
 800592c:	e00c      	b.n	8005948 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800592e:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <osKernelInitialize+0x44>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d105      	bne.n	8005942 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005936:	4b08      	ldr	r3, [pc, #32]	@ (8005958 <osKernelInitialize+0x44>)
 8005938:	2201      	movs	r2, #1
 800593a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800593c:	2300      	movs	r3, #0
 800593e:	607b      	str	r3, [r7, #4]
 8005940:	e002      	b.n	8005948 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005942:	f04f 33ff 	mov.w	r3, #4294967295
 8005946:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005948:	687b      	ldr	r3, [r7, #4]
}
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr
 8005956:	bf00      	nop
 8005958:	200002f4 	.word	0x200002f4

0800595c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005962:	f3ef 8305 	mrs	r3, IPSR
 8005966:	603b      	str	r3, [r7, #0]
  return(result);
 8005968:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <osKernelStart+0x1a>
    stat = osErrorISR;
 800596e:	f06f 0305 	mvn.w	r3, #5
 8005972:	607b      	str	r3, [r7, #4]
 8005974:	e010      	b.n	8005998 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005976:	4b0b      	ldr	r3, [pc, #44]	@ (80059a4 <osKernelStart+0x48>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d109      	bne.n	8005992 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800597e:	f7ff ffbf 	bl	8005900 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005982:	4b08      	ldr	r3, [pc, #32]	@ (80059a4 <osKernelStart+0x48>)
 8005984:	2202      	movs	r2, #2
 8005986:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005988:	f001 f938 	bl	8006bfc <vTaskStartScheduler>
      stat = osOK;
 800598c:	2300      	movs	r3, #0
 800598e:	607b      	str	r3, [r7, #4]
 8005990:	e002      	b.n	8005998 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005992:	f04f 33ff 	mov.w	r3, #4294967295
 8005996:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005998:	687b      	ldr	r3, [r7, #4]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3708      	adds	r7, #8
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	200002f4 	.word	0x200002f4

080059a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08e      	sub	sp, #56	@ 0x38
 80059ac:	af04      	add	r7, sp, #16
 80059ae:	60f8      	str	r0, [r7, #12]
 80059b0:	60b9      	str	r1, [r7, #8]
 80059b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059b8:	f3ef 8305 	mrs	r3, IPSR
 80059bc:	617b      	str	r3, [r7, #20]
  return(result);
 80059be:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d17e      	bne.n	8005ac2 <osThreadNew+0x11a>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d07b      	beq.n	8005ac2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80059ca:	2380      	movs	r3, #128	@ 0x80
 80059cc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80059ce:	2318      	movs	r3, #24
 80059d0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295
 80059da:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d045      	beq.n	8005a6e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <osThreadNew+0x48>
        name = attr->name;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	699b      	ldr	r3, [r3, #24]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	699b      	ldr	r3, [r3, #24]
 80059fc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d008      	beq.n	8005a16 <osThreadNew+0x6e>
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	2b38      	cmp	r3, #56	@ 0x38
 8005a08:	d805      	bhi.n	8005a16 <osThreadNew+0x6e>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <osThreadNew+0x72>
        return (NULL);
 8005a16:	2300      	movs	r3, #0
 8005a18:	e054      	b.n	8005ac4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	089b      	lsrs	r3, r3, #2
 8005a28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00e      	beq.n	8005a50 <osThreadNew+0xa8>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	2b5b      	cmp	r3, #91	@ 0x5b
 8005a38:	d90a      	bls.n	8005a50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d006      	beq.n	8005a50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <osThreadNew+0xa8>
        mem = 1;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	61bb      	str	r3, [r7, #24]
 8005a4e:	e010      	b.n	8005a72 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10c      	bne.n	8005a72 <osThreadNew+0xca>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d108      	bne.n	8005a72 <osThreadNew+0xca>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d104      	bne.n	8005a72 <osThreadNew+0xca>
          mem = 0;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	e001      	b.n	8005a72 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d110      	bne.n	8005a9a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a80:	9202      	str	r2, [sp, #8]
 8005a82:	9301      	str	r3, [sp, #4]
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	9300      	str	r3, [sp, #0]
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	6a3a      	ldr	r2, [r7, #32]
 8005a8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a8e:	68f8      	ldr	r0, [r7, #12]
 8005a90:	f000 fed8 	bl	8006844 <xTaskCreateStatic>
 8005a94:	4603      	mov	r3, r0
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	e013      	b.n	8005ac2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d110      	bne.n	8005ac2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	f107 0310 	add.w	r3, r7, #16
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	f000 ff26 	bl	8006904 <xTaskCreate>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d001      	beq.n	8005ac2 <osThreadNew+0x11a>
            hTask = NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005ac2:	693b      	ldr	r3, [r7, #16]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3728      	adds	r7, #40	@ 0x28
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad4:	f3ef 8305 	mrs	r3, IPSR
 8005ad8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005ada:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d003      	beq.n	8005ae8 <osDelay+0x1c>
    stat = osErrorISR;
 8005ae0:	f06f 0305 	mvn.w	r3, #5
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e007      	b.n	8005af8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d002      	beq.n	8005af8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f001 f84c 	bl	8006b90 <vTaskDelay>
    }
  }

  return (stat);
 8005af8:	68fb      	ldr	r3, [r7, #12]
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f002 f99e 	bl	8007e4c <pvTimerGetTimerID>
 8005b10:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	6852      	ldr	r2, [r2, #4]
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
  }
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08c      	sub	sp, #48	@ 0x30
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	607a      	str	r2, [r7, #4]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	460b      	mov	r3, r1
 8005b3a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b40:	f3ef 8305 	mrs	r3, IPSR
 8005b44:	613b      	str	r3, [r7, #16]
  return(result);
 8005b46:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d163      	bne.n	8005c14 <osTimerNew+0xe8>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d060      	beq.n	8005c14 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005b52:	2008      	movs	r0, #8
 8005b54:	f002 fbf2 	bl	800833c <pvPortMalloc>
 8005b58:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005b5a:	697b      	ldr	r3, [r7, #20]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d059      	beq.n	8005c14 <osTimerNew+0xe8>
      callb->func = func;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005b6c:	7afb      	ldrb	r3, [r7, #11]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d102      	bne.n	8005b78 <osTimerNew+0x4c>
        reload = pdFALSE;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]
 8005b76:	e001      	b.n	8005b7c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b80:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8005b82:	2300      	movs	r3, #0
 8005b84:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d01c      	beq.n	8005bc6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d002      	beq.n	8005b9a <osTimerNew+0x6e>
          name = attr->name;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d006      	beq.n	8005bb0 <osTimerNew+0x84>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	2b2b      	cmp	r3, #43	@ 0x2b
 8005ba8:	d902      	bls.n	8005bb0 <osTimerNew+0x84>
          mem = 1;
 8005baa:	2301      	movs	r3, #1
 8005bac:	61bb      	str	r3, [r7, #24]
 8005bae:	e00c      	b.n	8005bca <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d108      	bne.n	8005bca <osTimerNew+0x9e>
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d104      	bne.n	8005bca <osTimerNew+0x9e>
            mem = 0;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	61bb      	str	r3, [r7, #24]
 8005bc4:	e001      	b.n	8005bca <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d10c      	bne.n	8005bea <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	9301      	str	r3, [sp, #4]
 8005bd6:	4b12      	ldr	r3, [pc, #72]	@ (8005c20 <osTimerNew+0xf4>)
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	69fa      	ldr	r2, [r7, #28]
 8005bde:	2101      	movs	r1, #1
 8005be0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005be2:	f001 fda6 	bl	8007732 <xTimerCreateStatic>
 8005be6:	6238      	str	r0, [r7, #32]
 8005be8:	e00b      	b.n	8005c02 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d108      	bne.n	8005c02 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8005c20 <osTimerNew+0xf4>)
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	69fa      	ldr	r2, [r7, #28]
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005bfc:	f001 fd78 	bl	80076f0 <xTimerCreate>
 8005c00:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8005c02:	6a3b      	ldr	r3, [r7, #32]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d105      	bne.n	8005c14 <osTimerNew+0xe8>
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <osTimerNew+0xe8>
        vPortFree (callb);
 8005c0e:	6978      	ldr	r0, [r7, #20]
 8005c10:	f002 fc62 	bl	80084d8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005c14:	6a3b      	ldr	r3, [r7, #32]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3728      	adds	r7, #40	@ 0x28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	08005b03 	.word	0x08005b03

08005c24 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c32:	f3ef 8305 	mrs	r3, IPSR
 8005c36:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c38:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <osTimerStart+0x22>
    stat = osErrorISR;
 8005c3e:	f06f 0305 	mvn.w	r3, #5
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e017      	b.n	8005c76 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d103      	bne.n	8005c54 <osTimerStart+0x30>
    stat = osErrorParameter;
 8005c4c:	f06f 0303 	mvn.w	r3, #3
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e010      	b.n	8005c76 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005c54:	2300      	movs	r3, #0
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	683a      	ldr	r2, [r7, #0]
 8005c5c:	2104      	movs	r1, #4
 8005c5e:	6938      	ldr	r0, [r7, #16]
 8005c60:	f001 fde4 	bl	800782c <xTimerGenericCommand>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d102      	bne.n	8005c70 <osTimerStart+0x4c>
      stat = osOK;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	617b      	str	r3, [r7, #20]
 8005c6e:	e002      	b.n	8005c76 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005c70:	f06f 0302 	mvn.w	r3, #2
 8005c74:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005c76:	697b      	ldr	r3, [r7, #20]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3718      	adds	r7, #24
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	4a07      	ldr	r2, [pc, #28]	@ (8005cac <vApplicationGetIdleTaskMemory+0x2c>)
 8005c90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4a06      	ldr	r2, [pc, #24]	@ (8005cb0 <vApplicationGetIdleTaskMemory+0x30>)
 8005c96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2280      	movs	r2, #128	@ 0x80
 8005c9c:	601a      	str	r2, [r3, #0]
}
 8005c9e:	bf00      	nop
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	200002f8 	.word	0x200002f8
 8005cb0:	20000354 	.word	0x20000354

08005cb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	4a07      	ldr	r2, [pc, #28]	@ (8005ce0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005cc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	4a06      	ldr	r2, [pc, #24]	@ (8005ce4 <vApplicationGetTimerTaskMemory+0x30>)
 8005cca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005cd2:	601a      	str	r2, [r3, #0]
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	20000554 	.word	0x20000554
 8005ce4:	200005b0 	.word	0x200005b0

08005ce8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b083      	sub	sp, #12
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f103 0208 	add.w	r2, r3, #8
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8005d00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f103 0208 	add.w	r2, r3, #8
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f103 0208 	add.w	r2, r3, #8
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b083      	sub	sp, #12
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d42:	b480      	push	{r7}
 8005d44:	b085      	sub	sp, #20
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	689a      	ldr	r2, [r3, #8]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	601a      	str	r2, [r3, #0]
}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b085      	sub	sp, #20
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d103      	bne.n	8005daa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	e00c      	b.n	8005dc4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	3308      	adds	r3, #8
 8005dae:	60fb      	str	r3, [r7, #12]
 8005db0:	e002      	b.n	8005db8 <vListInsert+0x2e>
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	60fb      	str	r3, [r7, #12]
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d2f6      	bcs.n	8005db2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	1c5a      	adds	r2, r3, #1
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	601a      	str	r2, [r3, #0]
}
 8005df0:	bf00      	nop
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	6892      	ldr	r2, [r2, #8]
 8005e12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	6852      	ldr	r2, [r2, #4]
 8005e1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d103      	bne.n	8005e30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	1e5a      	subs	r2, r3, #1
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10b      	bne.n	8005e7c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
 8005e7a:	e7fd      	b.n	8005e78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e7c:	f002 f93c 	bl	80080f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e88:	68f9      	ldr	r1, [r7, #12]
 8005e8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005e8c:	fb01 f303 	mul.w	r3, r1, r3
 8005e90:	441a      	add	r2, r3
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eac:	3b01      	subs	r3, #1
 8005eae:	68f9      	ldr	r1, [r7, #12]
 8005eb0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005eb2:	fb01 f303 	mul.w	r3, r1, r3
 8005eb6:	441a      	add	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	22ff      	movs	r2, #255	@ 0xff
 8005ec0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	22ff      	movs	r2, #255	@ 0xff
 8005ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d114      	bne.n	8005efc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d01a      	beq.n	8005f10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3310      	adds	r3, #16
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 f91a 	bl	8007118 <xTaskRemoveFromEventList>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d012      	beq.n	8005f10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005eea:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <xQueueGenericReset+0xd0>)
 8005eec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	e009      	b.n	8005f10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	3310      	adds	r3, #16
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff fef1 	bl	8005ce8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	3324      	adds	r3, #36	@ 0x24
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	f7ff feec 	bl	8005ce8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f10:	f002 f924 	bl	800815c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f14:	2301      	movs	r3, #1
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08e      	sub	sp, #56	@ 0x38
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10b      	bne.n	8005f50 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	e7fd      	b.n	8005f4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10b      	bne.n	8005f6e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	e7fd      	b.n	8005f6a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d002      	beq.n	8005f7a <xQueueGenericCreateStatic+0x56>
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d001      	beq.n	8005f7e <xQueueGenericCreateStatic+0x5a>
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	e000      	b.n	8005f80 <xQueueGenericCreateStatic+0x5c>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10b      	bne.n	8005f9c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005f84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f88:	f383 8811 	msr	BASEPRI, r3
 8005f8c:	f3bf 8f6f 	isb	sy
 8005f90:	f3bf 8f4f 	dsb	sy
 8005f94:	623b      	str	r3, [r7, #32]
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	e7fd      	b.n	8005f98 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d102      	bne.n	8005fa8 <xQueueGenericCreateStatic+0x84>
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d101      	bne.n	8005fac <xQueueGenericCreateStatic+0x88>
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e000      	b.n	8005fae <xQueueGenericCreateStatic+0x8a>
 8005fac:	2300      	movs	r3, #0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10b      	bne.n	8005fca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb6:	f383 8811 	msr	BASEPRI, r3
 8005fba:	f3bf 8f6f 	isb	sy
 8005fbe:	f3bf 8f4f 	dsb	sy
 8005fc2:	61fb      	str	r3, [r7, #28]
}
 8005fc4:	bf00      	nop
 8005fc6:	bf00      	nop
 8005fc8:	e7fd      	b.n	8005fc6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fca:	2350      	movs	r3, #80	@ 0x50
 8005fcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b50      	cmp	r3, #80	@ 0x50
 8005fd2:	d00b      	beq.n	8005fec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fd8:	f383 8811 	msr	BASEPRI, r3
 8005fdc:	f3bf 8f6f 	isb	sy
 8005fe0:	f3bf 8f4f 	dsb	sy
 8005fe4:	61bb      	str	r3, [r7, #24]
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	e7fd      	b.n	8005fe8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00d      	beq.n	8006014 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006000:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006006:	9300      	str	r3, [sp, #0]
 8006008:	4613      	mov	r3, r2
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	68b9      	ldr	r1, [r7, #8]
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f805 	bl	800601e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006016:	4618      	mov	r0, r3
 8006018:	3730      	adds	r7, #48	@ 0x30
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	60f8      	str	r0, [r7, #12]
 8006026:	60b9      	str	r1, [r7, #8]
 8006028:	607a      	str	r2, [r7, #4]
 800602a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d103      	bne.n	800603a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	e002      	b.n	8006040 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	68ba      	ldr	r2, [r7, #8]
 800604a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800604c:	2101      	movs	r1, #1
 800604e:	69b8      	ldr	r0, [r7, #24]
 8006050:	f7ff fefe 	bl	8005e50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800605c:	bf00      	nop
 800605e:	3710      	adds	r7, #16
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b08e      	sub	sp, #56	@ 0x38
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006072:	2300      	movs	r3, #0
 8006074:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <xQueueGenericSend+0x34>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	e7fd      	b.n	8006094 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d103      	bne.n	80060a6 <xQueueGenericSend+0x42>
 800609e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d101      	bne.n	80060aa <xQueueGenericSend+0x46>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <xQueueGenericSend+0x48>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10b      	bne.n	80060c8 <xQueueGenericSend+0x64>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
 80060c6:	e7fd      	b.n	80060c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d103      	bne.n	80060d6 <xQueueGenericSend+0x72>
 80060ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d101      	bne.n	80060da <xQueueGenericSend+0x76>
 80060d6:	2301      	movs	r3, #1
 80060d8:	e000      	b.n	80060dc <xQueueGenericSend+0x78>
 80060da:	2300      	movs	r3, #0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10b      	bne.n	80060f8 <xQueueGenericSend+0x94>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	623b      	str	r3, [r7, #32]
}
 80060f2:	bf00      	nop
 80060f4:	bf00      	nop
 80060f6:	e7fd      	b.n	80060f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060f8:	f001 f9ce 	bl	8007498 <xTaskGetSchedulerState>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d102      	bne.n	8006108 <xQueueGenericSend+0xa4>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <xQueueGenericSend+0xa8>
 8006108:	2301      	movs	r3, #1
 800610a:	e000      	b.n	800610e <xQueueGenericSend+0xaa>
 800610c:	2300      	movs	r3, #0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10b      	bne.n	800612a <xQueueGenericSend+0xc6>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	61fb      	str	r3, [r7, #28]
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800612a:	f001 ffe5 	bl	80080f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800612e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006130:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006136:	429a      	cmp	r2, r3
 8006138:	d302      	bcc.n	8006140 <xQueueGenericSend+0xdc>
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	2b02      	cmp	r3, #2
 800613e:	d129      	bne.n	8006194 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006146:	f000 fa0f 	bl	8006568 <prvCopyDataToQueue>
 800614a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800614c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006150:	2b00      	cmp	r3, #0
 8006152:	d010      	beq.n	8006176 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	3324      	adds	r3, #36	@ 0x24
 8006158:	4618      	mov	r0, r3
 800615a:	f000 ffdd 	bl	8007118 <xTaskRemoveFromEventList>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d013      	beq.n	800618c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006164:	4b3f      	ldr	r3, [pc, #252]	@ (8006264 <xQueueGenericSend+0x200>)
 8006166:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	f3bf 8f4f 	dsb	sy
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	e00a      	b.n	800618c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d007      	beq.n	800618c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800617c:	4b39      	ldr	r3, [pc, #228]	@ (8006264 <xQueueGenericSend+0x200>)
 800617e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800618c:	f001 ffe6 	bl	800815c <vPortExitCritical>
				return pdPASS;
 8006190:	2301      	movs	r3, #1
 8006192:	e063      	b.n	800625c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d103      	bne.n	80061a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800619a:	f001 ffdf 	bl	800815c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800619e:	2300      	movs	r3, #0
 80061a0:	e05c      	b.n	800625c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80061a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d106      	bne.n	80061b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061a8:	f107 0314 	add.w	r3, r7, #20
 80061ac:	4618      	mov	r0, r3
 80061ae:	f001 f817 	bl	80071e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061b2:	2301      	movs	r3, #1
 80061b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061b6:	f001 ffd1 	bl	800815c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061ba:	f000 fd87 	bl	8006ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061be:	f001 ff9b 	bl	80080f8 <vPortEnterCritical>
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061c8:	b25b      	sxtb	r3, r3
 80061ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061ce:	d103      	bne.n	80061d8 <xQueueGenericSend+0x174>
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061de:	b25b      	sxtb	r3, r3
 80061e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e4:	d103      	bne.n	80061ee <xQueueGenericSend+0x18a>
 80061e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061ee:	f001 ffb5 	bl	800815c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061f2:	1d3a      	adds	r2, r7, #4
 80061f4:	f107 0314 	add.w	r3, r7, #20
 80061f8:	4611      	mov	r1, r2
 80061fa:	4618      	mov	r0, r3
 80061fc:	f001 f806 	bl	800720c <xTaskCheckForTimeOut>
 8006200:	4603      	mov	r3, r0
 8006202:	2b00      	cmp	r3, #0
 8006204:	d124      	bne.n	8006250 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006206:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006208:	f000 faa6 	bl	8006758 <prvIsQueueFull>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d018      	beq.n	8006244 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006214:	3310      	adds	r3, #16
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	4611      	mov	r1, r2
 800621a:	4618      	mov	r0, r3
 800621c:	f000 ff2a 	bl	8007074 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006220:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006222:	f000 fa31 	bl	8006688 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006226:	f000 fd5f 	bl	8006ce8 <xTaskResumeAll>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	f47f af7c 	bne.w	800612a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006232:	4b0c      	ldr	r3, [pc, #48]	@ (8006264 <xQueueGenericSend+0x200>)
 8006234:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	e772      	b.n	800612a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006244:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006246:	f000 fa1f 	bl	8006688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800624a:	f000 fd4d 	bl	8006ce8 <xTaskResumeAll>
 800624e:	e76c      	b.n	800612a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006252:	f000 fa19 	bl	8006688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006256:	f000 fd47 	bl	8006ce8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800625a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800625c:	4618      	mov	r0, r3
 800625e:	3738      	adds	r7, #56	@ 0x38
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	e000ed04 	.word	0xe000ed04

08006268 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b090      	sub	sp, #64	@ 0x40
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800627a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10b      	bne.n	8006298 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006292:	bf00      	nop
 8006294:	bf00      	nop
 8006296:	e7fd      	b.n	8006294 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d103      	bne.n	80062a6 <xQueueGenericSendFromISR+0x3e>
 800629e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d101      	bne.n	80062aa <xQueueGenericSendFromISR+0x42>
 80062a6:	2301      	movs	r3, #1
 80062a8:	e000      	b.n	80062ac <xQueueGenericSendFromISR+0x44>
 80062aa:	2300      	movs	r3, #0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d10b      	bne.n	80062c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80062b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b4:	f383 8811 	msr	BASEPRI, r3
 80062b8:	f3bf 8f6f 	isb	sy
 80062bc:	f3bf 8f4f 	dsb	sy
 80062c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d103      	bne.n	80062d6 <xQueueGenericSendFromISR+0x6e>
 80062ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <xQueueGenericSendFromISR+0x72>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <xQueueGenericSendFromISR+0x74>
 80062da:	2300      	movs	r3, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10b      	bne.n	80062f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	f383 8811 	msr	BASEPRI, r3
 80062e8:	f3bf 8f6f 	isb	sy
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	623b      	str	r3, [r7, #32]
}
 80062f2:	bf00      	nop
 80062f4:	bf00      	nop
 80062f6:	e7fd      	b.n	80062f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062f8:	f001 ffde 	bl	80082b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80062fc:	f3ef 8211 	mrs	r2, BASEPRI
 8006300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006304:	f383 8811 	msr	BASEPRI, r3
 8006308:	f3bf 8f6f 	isb	sy
 800630c:	f3bf 8f4f 	dsb	sy
 8006310:	61fa      	str	r2, [r7, #28]
 8006312:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006314:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006316:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006318:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800631c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006320:	429a      	cmp	r2, r3
 8006322:	d302      	bcc.n	800632a <xQueueGenericSendFromISR+0xc2>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	2b02      	cmp	r3, #2
 8006328:	d12f      	bne.n	800638a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800632a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006330:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006338:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800633a:	683a      	ldr	r2, [r7, #0]
 800633c:	68b9      	ldr	r1, [r7, #8]
 800633e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006340:	f000 f912 	bl	8006568 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006344:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800634c:	d112      	bne.n	8006374 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800634e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006352:	2b00      	cmp	r3, #0
 8006354:	d016      	beq.n	8006384 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006358:	3324      	adds	r3, #36	@ 0x24
 800635a:	4618      	mov	r0, r3
 800635c:	f000 fedc 	bl	8007118 <xTaskRemoveFromEventList>
 8006360:	4603      	mov	r3, r0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00e      	beq.n	8006384 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	601a      	str	r2, [r3, #0]
 8006372:	e007      	b.n	8006384 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006374:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006378:	3301      	adds	r3, #1
 800637a:	b2db      	uxtb	r3, r3
 800637c:	b25a      	sxtb	r2, r3
 800637e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006384:	2301      	movs	r3, #1
 8006386:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006388:	e001      	b.n	800638e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800638a:	2300      	movs	r3, #0
 800638c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800638e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006390:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006398:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800639a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800639c:	4618      	mov	r0, r3
 800639e:	3740      	adds	r7, #64	@ 0x40
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08c      	sub	sp, #48	@ 0x30
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <xQueueReceive+0x32>
	__asm volatile
 80063be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c2:	f383 8811 	msr	BASEPRI, r3
 80063c6:	f3bf 8f6f 	isb	sy
 80063ca:	f3bf 8f4f 	dsb	sy
 80063ce:	623b      	str	r3, [r7, #32]
}
 80063d0:	bf00      	nop
 80063d2:	bf00      	nop
 80063d4:	e7fd      	b.n	80063d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d103      	bne.n	80063e4 <xQueueReceive+0x40>
 80063dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d101      	bne.n	80063e8 <xQueueReceive+0x44>
 80063e4:	2301      	movs	r3, #1
 80063e6:	e000      	b.n	80063ea <xQueueReceive+0x46>
 80063e8:	2300      	movs	r3, #0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d10b      	bne.n	8006406 <xQueueReceive+0x62>
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	61fb      	str	r3, [r7, #28]
}
 8006400:	bf00      	nop
 8006402:	bf00      	nop
 8006404:	e7fd      	b.n	8006402 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006406:	f001 f847 	bl	8007498 <xTaskGetSchedulerState>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d102      	bne.n	8006416 <xQueueReceive+0x72>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <xQueueReceive+0x76>
 8006416:	2301      	movs	r3, #1
 8006418:	e000      	b.n	800641c <xQueueReceive+0x78>
 800641a:	2300      	movs	r3, #0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10b      	bne.n	8006438 <xQueueReceive+0x94>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	f383 8811 	msr	BASEPRI, r3
 8006428:	f3bf 8f6f 	isb	sy
 800642c:	f3bf 8f4f 	dsb	sy
 8006430:	61bb      	str	r3, [r7, #24]
}
 8006432:	bf00      	nop
 8006434:	bf00      	nop
 8006436:	e7fd      	b.n	8006434 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006438:	f001 fe5e 	bl	80080f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800643c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006440:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	2b00      	cmp	r3, #0
 8006446:	d01f      	beq.n	8006488 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800644c:	f000 f8f6 	bl	800663c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006452:	1e5a      	subs	r2, r3, #1
 8006454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006456:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d00f      	beq.n	8006480 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006462:	3310      	adds	r3, #16
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fe57 	bl	8007118 <xTaskRemoveFromEventList>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006470:	4b3c      	ldr	r3, [pc, #240]	@ (8006564 <xQueueReceive+0x1c0>)
 8006472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006476:	601a      	str	r2, [r3, #0]
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006480:	f001 fe6c 	bl	800815c <vPortExitCritical>
				return pdPASS;
 8006484:	2301      	movs	r3, #1
 8006486:	e069      	b.n	800655c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d103      	bne.n	8006496 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800648e:	f001 fe65 	bl	800815c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006492:	2300      	movs	r3, #0
 8006494:	e062      	b.n	800655c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006498:	2b00      	cmp	r3, #0
 800649a:	d106      	bne.n	80064aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800649c:	f107 0310 	add.w	r3, r7, #16
 80064a0:	4618      	mov	r0, r3
 80064a2:	f000 fe9d 	bl	80071e0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064a6:	2301      	movs	r3, #1
 80064a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064aa:	f001 fe57 	bl	800815c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064ae:	f000 fc0d 	bl	8006ccc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064b2:	f001 fe21 	bl	80080f8 <vPortEnterCritical>
 80064b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064bc:	b25b      	sxtb	r3, r3
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d103      	bne.n	80064cc <xQueueReceive+0x128>
 80064c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c6:	2200      	movs	r2, #0
 80064c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064d2:	b25b      	sxtb	r3, r3
 80064d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064d8:	d103      	bne.n	80064e2 <xQueueReceive+0x13e>
 80064da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064e2:	f001 fe3b 	bl	800815c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064e6:	1d3a      	adds	r2, r7, #4
 80064e8:	f107 0310 	add.w	r3, r7, #16
 80064ec:	4611      	mov	r1, r2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fe8c 	bl	800720c <xTaskCheckForTimeOut>
 80064f4:	4603      	mov	r3, r0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d123      	bne.n	8006542 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80064fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80064fc:	f000 f916 	bl	800672c <prvIsQueueEmpty>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d017      	beq.n	8006536 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006508:	3324      	adds	r3, #36	@ 0x24
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	4611      	mov	r1, r2
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fdb0 	bl	8007074 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006514:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006516:	f000 f8b7 	bl	8006688 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800651a:	f000 fbe5 	bl	8006ce8 <xTaskResumeAll>
 800651e:	4603      	mov	r3, r0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d189      	bne.n	8006438 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006524:	4b0f      	ldr	r3, [pc, #60]	@ (8006564 <xQueueReceive+0x1c0>)
 8006526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800652a:	601a      	str	r2, [r3, #0]
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	e780      	b.n	8006438 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006538:	f000 f8a6 	bl	8006688 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800653c:	f000 fbd4 	bl	8006ce8 <xTaskResumeAll>
 8006540:	e77a      	b.n	8006438 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006544:	f000 f8a0 	bl	8006688 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006548:	f000 fbce 	bl	8006ce8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800654c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800654e:	f000 f8ed 	bl	800672c <prvIsQueueEmpty>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	f43f af6f 	beq.w	8006438 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800655a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800655c:	4618      	mov	r0, r3
 800655e:	3730      	adds	r7, #48	@ 0x30
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	e000ed04 	.word	0xe000ed04

08006568 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006574:	2300      	movs	r3, #0
 8006576:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006582:	2b00      	cmp	r3, #0
 8006584:	d10d      	bne.n	80065a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d14d      	bne.n	800662a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	4618      	mov	r0, r3
 8006594:	f000 ff9e 	bl	80074d4 <xTaskPriorityDisinherit>
 8006598:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	609a      	str	r2, [r3, #8]
 80065a0:	e043      	b.n	800662a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d119      	bne.n	80065dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6858      	ldr	r0, [r3, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b0:	461a      	mov	r2, r3
 80065b2:	68b9      	ldr	r1, [r7, #8]
 80065b4:	f002 f8dc 	bl	8008770 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065c0:	441a      	add	r2, r3
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d32b      	bcc.n	800662a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	e026      	b.n	800662a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	68d8      	ldr	r0, [r3, #12]
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065e4:	461a      	mov	r2, r3
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	f002 f8c2 	bl	8008770 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	68da      	ldr	r2, [r3, #12]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065f4:	425b      	negs	r3, r3
 80065f6:	441a      	add	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68da      	ldr	r2, [r3, #12]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	429a      	cmp	r2, r3
 8006606:	d207      	bcs.n	8006618 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	689a      	ldr	r2, [r3, #8]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006610:	425b      	negs	r3, r3
 8006612:	441a      	add	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d105      	bne.n	800662a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	3b01      	subs	r3, #1
 8006628:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1c5a      	adds	r2, r3, #1
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006632:	697b      	ldr	r3, [r7, #20]
}
 8006634:	4618      	mov	r0, r3
 8006636:	3718      	adds	r7, #24
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
 8006644:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800664a:	2b00      	cmp	r3, #0
 800664c:	d018      	beq.n	8006680 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	68da      	ldr	r2, [r3, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006656:	441a      	add	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	68da      	ldr	r2, [r3, #12]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	429a      	cmp	r2, r3
 8006666:	d303      	bcc.n	8006670 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68d9      	ldr	r1, [r3, #12]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006678:	461a      	mov	r2, r3
 800667a:	6838      	ldr	r0, [r7, #0]
 800667c:	f002 f878 	bl	8008770 <memcpy>
	}
}
 8006680:	bf00      	nop
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006690:	f001 fd32 	bl	80080f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800669a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800669c:	e011      	b.n	80066c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d012      	beq.n	80066cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3324      	adds	r3, #36	@ 0x24
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fd34 	bl	8007118 <xTaskRemoveFromEventList>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80066b6:	f000 fe0d 	bl	80072d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80066ba:	7bfb      	ldrb	r3, [r7, #15]
 80066bc:	3b01      	subs	r3, #1
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80066c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	dce9      	bgt.n	800669e <prvUnlockQueue+0x16>
 80066ca:	e000      	b.n	80066ce <prvUnlockQueue+0x46>
					break;
 80066cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	22ff      	movs	r2, #255	@ 0xff
 80066d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80066d6:	f001 fd41 	bl	800815c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80066da:	f001 fd0d 	bl	80080f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80066e6:	e011      	b.n	800670c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d012      	beq.n	8006716 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	3310      	adds	r3, #16
 80066f4:	4618      	mov	r0, r3
 80066f6:	f000 fd0f 	bl	8007118 <xTaskRemoveFromEventList>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d001      	beq.n	8006704 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006700:	f000 fde8 	bl	80072d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006704:	7bbb      	ldrb	r3, [r7, #14]
 8006706:	3b01      	subs	r3, #1
 8006708:	b2db      	uxtb	r3, r3
 800670a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800670c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006710:	2b00      	cmp	r3, #0
 8006712:	dce9      	bgt.n	80066e8 <prvUnlockQueue+0x60>
 8006714:	e000      	b.n	8006718 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006716:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	22ff      	movs	r2, #255	@ 0xff
 800671c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006720:	f001 fd1c 	bl	800815c <vPortExitCritical>
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006734:	f001 fce0 	bl	80080f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673c:	2b00      	cmp	r3, #0
 800673e:	d102      	bne.n	8006746 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006740:	2301      	movs	r3, #1
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	e001      	b.n	800674a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800674a:	f001 fd07 	bl	800815c <vPortExitCritical>

	return xReturn;
 800674e:	68fb      	ldr	r3, [r7, #12]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}

08006758 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006760:	f001 fcca 	bl	80080f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800676c:	429a      	cmp	r2, r3
 800676e:	d102      	bne.n	8006776 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006770:	2301      	movs	r3, #1
 8006772:	60fb      	str	r3, [r7, #12]
 8006774:	e001      	b.n	800677a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006776:	2300      	movs	r3, #0
 8006778:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800677a:	f001 fcef 	bl	800815c <vPortExitCritical>

	return xReturn;
 800677e:	68fb      	ldr	r3, [r7, #12]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3710      	adds	r7, #16
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006788:	b480      	push	{r7}
 800678a:	b085      	sub	sp, #20
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	e014      	b.n	80067c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006798:	4a0f      	ldr	r2, [pc, #60]	@ (80067d8 <vQueueAddToRegistry+0x50>)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10b      	bne.n	80067bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80067a4:	490c      	ldr	r1, [pc, #48]	@ (80067d8 <vQueueAddToRegistry+0x50>)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80067ae:	4a0a      	ldr	r2, [pc, #40]	@ (80067d8 <vQueueAddToRegistry+0x50>)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	00db      	lsls	r3, r3, #3
 80067b4:	4413      	add	r3, r2
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80067ba:	e006      	b.n	80067ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b07      	cmp	r3, #7
 80067c6:	d9e7      	bls.n	8006798 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80067c8:	bf00      	nop
 80067ca:	bf00      	nop
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr
 80067d6:	bf00      	nop
 80067d8:	200009b0 	.word	0x200009b0

080067dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	60f8      	str	r0, [r7, #12]
 80067e4:	60b9      	str	r1, [r7, #8]
 80067e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80067ec:	f001 fc84 	bl	80080f8 <vPortEnterCritical>
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067f6:	b25b      	sxtb	r3, r3
 80067f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fc:	d103      	bne.n	8006806 <vQueueWaitForMessageRestricted+0x2a>
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800680c:	b25b      	sxtb	r3, r3
 800680e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006812:	d103      	bne.n	800681c <vQueueWaitForMessageRestricted+0x40>
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	2200      	movs	r2, #0
 8006818:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800681c:	f001 fc9e 	bl	800815c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006824:	2b00      	cmp	r3, #0
 8006826:	d106      	bne.n	8006836 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	3324      	adds	r3, #36	@ 0x24
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	68b9      	ldr	r1, [r7, #8]
 8006830:	4618      	mov	r0, r3
 8006832:	f000 fc45 	bl	80070c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006836:	6978      	ldr	r0, [r7, #20]
 8006838:	f7ff ff26 	bl	8006688 <prvUnlockQueue>
	}
 800683c:	bf00      	nop
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006844:	b580      	push	{r7, lr}
 8006846:	b08e      	sub	sp, #56	@ 0x38
 8006848:	af04      	add	r7, sp, #16
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
 8006850:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006854:	2b00      	cmp	r3, #0
 8006856:	d10b      	bne.n	8006870 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	623b      	str	r3, [r7, #32]
}
 800686a:	bf00      	nop
 800686c:	bf00      	nop
 800686e:	e7fd      	b.n	800686c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006872:	2b00      	cmp	r3, #0
 8006874:	d10b      	bne.n	800688e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687a:	f383 8811 	msr	BASEPRI, r3
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f3bf 8f4f 	dsb	sy
 8006886:	61fb      	str	r3, [r7, #28]
}
 8006888:	bf00      	nop
 800688a:	bf00      	nop
 800688c:	e7fd      	b.n	800688a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800688e:	235c      	movs	r3, #92	@ 0x5c
 8006890:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	2b5c      	cmp	r3, #92	@ 0x5c
 8006896:	d00b      	beq.n	80068b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	61bb      	str	r3, [r7, #24]
}
 80068aa:	bf00      	nop
 80068ac:	bf00      	nop
 80068ae:	e7fd      	b.n	80068ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80068b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80068b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01e      	beq.n	80068f6 <xTaskCreateStatic+0xb2>
 80068b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d01b      	beq.n	80068f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80068be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80068c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80068c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ca:	2202      	movs	r2, #2
 80068cc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80068d0:	2300      	movs	r3, #0
 80068d2:	9303      	str	r3, [sp, #12]
 80068d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d6:	9302      	str	r3, [sp, #8]
 80068d8:	f107 0314 	add.w	r3, r7, #20
 80068dc:	9301      	str	r3, [sp, #4]
 80068de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e0:	9300      	str	r3, [sp, #0]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f850 	bl	800698e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80068ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80068f0:	f000 f8de 	bl	8006ab0 <prvAddNewTaskToReadyList>
 80068f4:	e001      	b.n	80068fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80068f6:	2300      	movs	r3, #0
 80068f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80068fa:	697b      	ldr	r3, [r7, #20]
	}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3728      	adds	r7, #40	@ 0x28
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08c      	sub	sp, #48	@ 0x30
 8006908:	af04      	add	r7, sp, #16
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006914:	88fb      	ldrh	r3, [r7, #6]
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4618      	mov	r0, r3
 800691a:	f001 fd0f 	bl	800833c <pvPortMalloc>
 800691e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00e      	beq.n	8006944 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006926:	205c      	movs	r0, #92	@ 0x5c
 8006928:	f001 fd08 	bl	800833c <pvPortMalloc>
 800692c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	631a      	str	r2, [r3, #48]	@ 0x30
 800693a:	e005      	b.n	8006948 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800693c:	6978      	ldr	r0, [r7, #20]
 800693e:	f001 fdcb 	bl	80084d8 <vPortFree>
 8006942:	e001      	b.n	8006948 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006944:	2300      	movs	r3, #0
 8006946:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006948:	69fb      	ldr	r3, [r7, #28]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d017      	beq.n	800697e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	2200      	movs	r2, #0
 8006952:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	2300      	movs	r3, #0
 800695a:	9303      	str	r3, [sp, #12]
 800695c:	69fb      	ldr	r3, [r7, #28]
 800695e:	9302      	str	r3, [sp, #8]
 8006960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006962:	9301      	str	r3, [sp, #4]
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	9300      	str	r3, [sp, #0]
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68b9      	ldr	r1, [r7, #8]
 800696c:	68f8      	ldr	r0, [r7, #12]
 800696e:	f000 f80e 	bl	800698e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006972:	69f8      	ldr	r0, [r7, #28]
 8006974:	f000 f89c 	bl	8006ab0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006978:	2301      	movs	r3, #1
 800697a:	61bb      	str	r3, [r7, #24]
 800697c:	e002      	b.n	8006984 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800697e:	f04f 33ff 	mov.w	r3, #4294967295
 8006982:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006984:	69bb      	ldr	r3, [r7, #24]
	}
 8006986:	4618      	mov	r0, r3
 8006988:	3720      	adds	r7, #32
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b088      	sub	sp, #32
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	607a      	str	r2, [r7, #4]
 800699a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800699c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	461a      	mov	r2, r3
 80069a6:	21a5      	movs	r1, #165	@ 0xa5
 80069a8:	f001 feb6 	bl	8008718 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80069ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80069b6:	3b01      	subs	r3, #1
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	f023 0307 	bic.w	r3, r3, #7
 80069c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00b      	beq.n	80069e8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	617b      	str	r3, [r7, #20]
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d01f      	beq.n	8006a2e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80069ee:	2300      	movs	r3, #0
 80069f0:	61fb      	str	r3, [r7, #28]
 80069f2:	e012      	b.n	8006a1a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80069f4:	68ba      	ldr	r2, [r7, #8]
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	4413      	add	r3, r2
 80069fa:	7819      	ldrb	r1, [r3, #0]
 80069fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	3334      	adds	r3, #52	@ 0x34
 8006a04:	460a      	mov	r2, r1
 8006a06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d006      	beq.n	8006a22 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	3301      	adds	r3, #1
 8006a18:	61fb      	str	r3, [r7, #28]
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	2b0f      	cmp	r3, #15
 8006a1e:	d9e9      	bls.n	80069f4 <prvInitialiseNewTask+0x66>
 8006a20:	e000      	b.n	8006a24 <prvInitialiseNewTask+0x96>
			{
				break;
 8006a22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a2c:	e003      	b.n	8006a36 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a38:	2b37      	cmp	r3, #55	@ 0x37
 8006a3a:	d901      	bls.n	8006a40 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006a3c:	2337      	movs	r3, #55	@ 0x37
 8006a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a44:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a4a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4e:	2200      	movs	r2, #0
 8006a50:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a54:	3304      	adds	r3, #4
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff f966 	bl	8005d28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006a5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5e:	3318      	adds	r3, #24
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7ff f961 	bl	8005d28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a7a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a7e:	2200      	movs	r2, #0
 8006a80:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	68f9      	ldr	r1, [r7, #12]
 8006a8e:	69b8      	ldr	r0, [r7, #24]
 8006a90:	f001 f9fe 	bl	8007e90 <pxPortInitialiseStack>
 8006a94:	4602      	mov	r2, r0
 8006a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a98:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d002      	beq.n	8006aa6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aa4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006aa6:	bf00      	nop
 8006aa8:	3720      	adds	r7, #32
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
	...

08006ab0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ab8:	f001 fb1e 	bl	80080f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006abc:	4b2d      	ldr	r3, [pc, #180]	@ (8006b74 <prvAddNewTaskToReadyList+0xc4>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	4a2c      	ldr	r2, [pc, #176]	@ (8006b74 <prvAddNewTaskToReadyList+0xc4>)
 8006ac4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006ac6:	4b2c      	ldr	r3, [pc, #176]	@ (8006b78 <prvAddNewTaskToReadyList+0xc8>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d109      	bne.n	8006ae2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ace:	4a2a      	ldr	r2, [pc, #168]	@ (8006b78 <prvAddNewTaskToReadyList+0xc8>)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ad4:	4b27      	ldr	r3, [pc, #156]	@ (8006b74 <prvAddNewTaskToReadyList+0xc4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d110      	bne.n	8006afe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006adc:	f000 fc1e 	bl	800731c <prvInitialiseTaskLists>
 8006ae0:	e00d      	b.n	8006afe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ae2:	4b26      	ldr	r3, [pc, #152]	@ (8006b7c <prvAddNewTaskToReadyList+0xcc>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d109      	bne.n	8006afe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006aea:	4b23      	ldr	r3, [pc, #140]	@ (8006b78 <prvAddNewTaskToReadyList+0xc8>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af4:	429a      	cmp	r2, r3
 8006af6:	d802      	bhi.n	8006afe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006af8:	4a1f      	ldr	r2, [pc, #124]	@ (8006b78 <prvAddNewTaskToReadyList+0xc8>)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006afe:	4b20      	ldr	r3, [pc, #128]	@ (8006b80 <prvAddNewTaskToReadyList+0xd0>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3301      	adds	r3, #1
 8006b04:	4a1e      	ldr	r2, [pc, #120]	@ (8006b80 <prvAddNewTaskToReadyList+0xd0>)
 8006b06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006b08:	4b1d      	ldr	r3, [pc, #116]	@ (8006b80 <prvAddNewTaskToReadyList+0xd0>)
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b14:	4b1b      	ldr	r3, [pc, #108]	@ (8006b84 <prvAddNewTaskToReadyList+0xd4>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d903      	bls.n	8006b24 <prvAddNewTaskToReadyList+0x74>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b20:	4a18      	ldr	r2, [pc, #96]	@ (8006b84 <prvAddNewTaskToReadyList+0xd4>)
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b28:	4613      	mov	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	4413      	add	r3, r2
 8006b2e:	009b      	lsls	r3, r3, #2
 8006b30:	4a15      	ldr	r2, [pc, #84]	@ (8006b88 <prvAddNewTaskToReadyList+0xd8>)
 8006b32:	441a      	add	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3304      	adds	r3, #4
 8006b38:	4619      	mov	r1, r3
 8006b3a:	4610      	mov	r0, r2
 8006b3c:	f7ff f901 	bl	8005d42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006b40:	f001 fb0c 	bl	800815c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006b44:	4b0d      	ldr	r3, [pc, #52]	@ (8006b7c <prvAddNewTaskToReadyList+0xcc>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d00e      	beq.n	8006b6a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8006b78 <prvAddNewTaskToReadyList+0xc8>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d207      	bcs.n	8006b6a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b8c <prvAddNewTaskToReadyList+0xdc>)
 8006b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	f3bf 8f4f 	dsb	sy
 8006b66:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006b6a:	bf00      	nop
 8006b6c:	3708      	adds	r7, #8
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20000ec4 	.word	0x20000ec4
 8006b78:	200009f0 	.word	0x200009f0
 8006b7c:	20000ed0 	.word	0x20000ed0
 8006b80:	20000ee0 	.word	0x20000ee0
 8006b84:	20000ecc 	.word	0x20000ecc
 8006b88:	200009f4 	.word	0x200009f4
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d018      	beq.n	8006bd4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006ba2:	4b14      	ldr	r3, [pc, #80]	@ (8006bf4 <vTaskDelay+0x64>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00b      	beq.n	8006bc2 <vTaskDelay+0x32>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	60bb      	str	r3, [r7, #8]
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	e7fd      	b.n	8006bbe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006bc2:	f000 f883 	bl	8006ccc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006bc6:	2100      	movs	r1, #0
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fcf3 	bl	80075b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006bce:	f000 f88b 	bl	8006ce8 <xTaskResumeAll>
 8006bd2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d107      	bne.n	8006bea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006bda:	4b07      	ldr	r3, [pc, #28]	@ (8006bf8 <vTaskDelay+0x68>)
 8006bdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	f3bf 8f4f 	dsb	sy
 8006be6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bea:	bf00      	nop
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000eec 	.word	0x20000eec
 8006bf8:	e000ed04 	.word	0xe000ed04

08006bfc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b08a      	sub	sp, #40	@ 0x28
 8006c00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006c02:	2300      	movs	r3, #0
 8006c04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006c06:	2300      	movs	r3, #0
 8006c08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006c0a:	463a      	mov	r2, r7
 8006c0c:	1d39      	adds	r1, r7, #4
 8006c0e:	f107 0308 	add.w	r3, r7, #8
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7ff f834 	bl	8005c80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006c18:	6839      	ldr	r1, [r7, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	9202      	str	r2, [sp, #8]
 8006c20:	9301      	str	r3, [sp, #4]
 8006c22:	2300      	movs	r3, #0
 8006c24:	9300      	str	r3, [sp, #0]
 8006c26:	2300      	movs	r3, #0
 8006c28:	460a      	mov	r2, r1
 8006c2a:	4922      	ldr	r1, [pc, #136]	@ (8006cb4 <vTaskStartScheduler+0xb8>)
 8006c2c:	4822      	ldr	r0, [pc, #136]	@ (8006cb8 <vTaskStartScheduler+0xbc>)
 8006c2e:	f7ff fe09 	bl	8006844 <xTaskCreateStatic>
 8006c32:	4603      	mov	r3, r0
 8006c34:	4a21      	ldr	r2, [pc, #132]	@ (8006cbc <vTaskStartScheduler+0xc0>)
 8006c36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006c38:	4b20      	ldr	r3, [pc, #128]	@ (8006cbc <vTaskStartScheduler+0xc0>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d002      	beq.n	8006c46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006c40:	2301      	movs	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
 8006c44:	e001      	b.n	8006c4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d102      	bne.n	8006c56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006c50:	f000 fd04 	bl	800765c <xTimerCreateTimerTask>
 8006c54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d116      	bne.n	8006c8a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c60:	f383 8811 	msr	BASEPRI, r3
 8006c64:	f3bf 8f6f 	isb	sy
 8006c68:	f3bf 8f4f 	dsb	sy
 8006c6c:	613b      	str	r3, [r7, #16]
}
 8006c6e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006c70:	4b13      	ldr	r3, [pc, #76]	@ (8006cc0 <vTaskStartScheduler+0xc4>)
 8006c72:	f04f 32ff 	mov.w	r2, #4294967295
 8006c76:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006c78:	4b12      	ldr	r3, [pc, #72]	@ (8006cc4 <vTaskStartScheduler+0xc8>)
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006c7e:	4b12      	ldr	r3, [pc, #72]	@ (8006cc8 <vTaskStartScheduler+0xcc>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006c84:	f001 f994 	bl	8007fb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006c88:	e00f      	b.n	8006caa <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c90:	d10b      	bne.n	8006caa <vTaskStartScheduler+0xae>
	__asm volatile
 8006c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c96:	f383 8811 	msr	BASEPRI, r3
 8006c9a:	f3bf 8f6f 	isb	sy
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	60fb      	str	r3, [r7, #12]
}
 8006ca4:	bf00      	nop
 8006ca6:	bf00      	nop
 8006ca8:	e7fd      	b.n	8006ca6 <vTaskStartScheduler+0xaa>
}
 8006caa:	bf00      	nop
 8006cac:	3718      	adds	r7, #24
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	0800886c 	.word	0x0800886c
 8006cb8:	080072ed 	.word	0x080072ed
 8006cbc:	20000ee8 	.word	0x20000ee8
 8006cc0:	20000ee4 	.word	0x20000ee4
 8006cc4:	20000ed0 	.word	0x20000ed0
 8006cc8:	20000ec8 	.word	0x20000ec8

08006ccc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006ccc:	b480      	push	{r7}
 8006cce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006cd0:	4b04      	ldr	r3, [pc, #16]	@ (8006ce4 <vTaskSuspendAll+0x18>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	4a03      	ldr	r2, [pc, #12]	@ (8006ce4 <vTaskSuspendAll+0x18>)
 8006cd8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006cda:	bf00      	nop
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr
 8006ce4:	20000eec 	.word	0x20000eec

08006ce8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b084      	sub	sp, #16
 8006cec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006cf6:	4b42      	ldr	r3, [pc, #264]	@ (8006e00 <xTaskResumeAll+0x118>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d10b      	bne.n	8006d16 <xTaskResumeAll+0x2e>
	__asm volatile
 8006cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d02:	f383 8811 	msr	BASEPRI, r3
 8006d06:	f3bf 8f6f 	isb	sy
 8006d0a:	f3bf 8f4f 	dsb	sy
 8006d0e:	603b      	str	r3, [r7, #0]
}
 8006d10:	bf00      	nop
 8006d12:	bf00      	nop
 8006d14:	e7fd      	b.n	8006d12 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006d16:	f001 f9ef 	bl	80080f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006d1a:	4b39      	ldr	r3, [pc, #228]	@ (8006e00 <xTaskResumeAll+0x118>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	3b01      	subs	r3, #1
 8006d20:	4a37      	ldr	r2, [pc, #220]	@ (8006e00 <xTaskResumeAll+0x118>)
 8006d22:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d24:	4b36      	ldr	r3, [pc, #216]	@ (8006e00 <xTaskResumeAll+0x118>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d162      	bne.n	8006df2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006d2c:	4b35      	ldr	r3, [pc, #212]	@ (8006e04 <xTaskResumeAll+0x11c>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d05e      	beq.n	8006df2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d34:	e02f      	b.n	8006d96 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d36:	4b34      	ldr	r3, [pc, #208]	@ (8006e08 <xTaskResumeAll+0x120>)
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	3318      	adds	r3, #24
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7ff f85a 	bl	8005dfc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	3304      	adds	r3, #4
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff f855 	bl	8005dfc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d56:	4b2d      	ldr	r3, [pc, #180]	@ (8006e0c <xTaskResumeAll+0x124>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d903      	bls.n	8006d66 <xTaskResumeAll+0x7e>
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d62:	4a2a      	ldr	r2, [pc, #168]	@ (8006e0c <xTaskResumeAll+0x124>)
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	4413      	add	r3, r2
 8006d70:	009b      	lsls	r3, r3, #2
 8006d72:	4a27      	ldr	r2, [pc, #156]	@ (8006e10 <xTaskResumeAll+0x128>)
 8006d74:	441a      	add	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	3304      	adds	r3, #4
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	4610      	mov	r0, r2
 8006d7e:	f7fe ffe0 	bl	8005d42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d86:	4b23      	ldr	r3, [pc, #140]	@ (8006e14 <xTaskResumeAll+0x12c>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d302      	bcc.n	8006d96 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006d90:	4b21      	ldr	r3, [pc, #132]	@ (8006e18 <xTaskResumeAll+0x130>)
 8006d92:	2201      	movs	r2, #1
 8006d94:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006d96:	4b1c      	ldr	r3, [pc, #112]	@ (8006e08 <xTaskResumeAll+0x120>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1cb      	bne.n	8006d36 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006da4:	f000 fb58 	bl	8007458 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006da8:	4b1c      	ldr	r3, [pc, #112]	@ (8006e1c <xTaskResumeAll+0x134>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d010      	beq.n	8006dd6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006db4:	f000 f846 	bl	8006e44 <xTaskIncrementTick>
 8006db8:	4603      	mov	r3, r0
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d002      	beq.n	8006dc4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006dbe:	4b16      	ldr	r3, [pc, #88]	@ (8006e18 <xTaskResumeAll+0x130>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1f1      	bne.n	8006db4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006dd0:	4b12      	ldr	r3, [pc, #72]	@ (8006e1c <xTaskResumeAll+0x134>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006dd6:	4b10      	ldr	r3, [pc, #64]	@ (8006e18 <xTaskResumeAll+0x130>)
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d009      	beq.n	8006df2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006dde:	2301      	movs	r3, #1
 8006de0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006de2:	4b0f      	ldr	r3, [pc, #60]	@ (8006e20 <xTaskResumeAll+0x138>)
 8006de4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	f3bf 8f4f 	dsb	sy
 8006dee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006df2:	f001 f9b3 	bl	800815c <vPortExitCritical>

	return xAlreadyYielded;
 8006df6:	68bb      	ldr	r3, [r7, #8]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	20000eec 	.word	0x20000eec
 8006e04:	20000ec4 	.word	0x20000ec4
 8006e08:	20000e84 	.word	0x20000e84
 8006e0c:	20000ecc 	.word	0x20000ecc
 8006e10:	200009f4 	.word	0x200009f4
 8006e14:	200009f0 	.word	0x200009f0
 8006e18:	20000ed8 	.word	0x20000ed8
 8006e1c:	20000ed4 	.word	0x20000ed4
 8006e20:	e000ed04 	.word	0xe000ed04

08006e24 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b083      	sub	sp, #12
 8006e28:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006e2a:	4b05      	ldr	r3, [pc, #20]	@ (8006e40 <xTaskGetTickCount+0x1c>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006e30:	687b      	ldr	r3, [r7, #4]
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	370c      	adds	r7, #12
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
 8006e3e:	bf00      	nop
 8006e40:	20000ec8 	.word	0x20000ec8

08006e44 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e4e:	4b4f      	ldr	r3, [pc, #316]	@ (8006f8c <xTaskIncrementTick+0x148>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f040 8090 	bne.w	8006f78 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006e58:	4b4d      	ldr	r3, [pc, #308]	@ (8006f90 <xTaskIncrementTick+0x14c>)
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006e60:	4a4b      	ldr	r2, [pc, #300]	@ (8006f90 <xTaskIncrementTick+0x14c>)
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d121      	bne.n	8006eb0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006e6c:	4b49      	ldr	r3, [pc, #292]	@ (8006f94 <xTaskIncrementTick+0x150>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d00b      	beq.n	8006e8e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7a:	f383 8811 	msr	BASEPRI, r3
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f3bf 8f4f 	dsb	sy
 8006e86:	603b      	str	r3, [r7, #0]
}
 8006e88:	bf00      	nop
 8006e8a:	bf00      	nop
 8006e8c:	e7fd      	b.n	8006e8a <xTaskIncrementTick+0x46>
 8006e8e:	4b41      	ldr	r3, [pc, #260]	@ (8006f94 <xTaskIncrementTick+0x150>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	4b40      	ldr	r3, [pc, #256]	@ (8006f98 <xTaskIncrementTick+0x154>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a3e      	ldr	r2, [pc, #248]	@ (8006f94 <xTaskIncrementTick+0x150>)
 8006e9a:	6013      	str	r3, [r2, #0]
 8006e9c:	4a3e      	ldr	r2, [pc, #248]	@ (8006f98 <xTaskIncrementTick+0x154>)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	6013      	str	r3, [r2, #0]
 8006ea2:	4b3e      	ldr	r3, [pc, #248]	@ (8006f9c <xTaskIncrementTick+0x158>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	4a3c      	ldr	r2, [pc, #240]	@ (8006f9c <xTaskIncrementTick+0x158>)
 8006eaa:	6013      	str	r3, [r2, #0]
 8006eac:	f000 fad4 	bl	8007458 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006eb0:	4b3b      	ldr	r3, [pc, #236]	@ (8006fa0 <xTaskIncrementTick+0x15c>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	693a      	ldr	r2, [r7, #16]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d349      	bcc.n	8006f4e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006eba:	4b36      	ldr	r3, [pc, #216]	@ (8006f94 <xTaskIncrementTick+0x150>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d104      	bne.n	8006ece <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ec4:	4b36      	ldr	r3, [pc, #216]	@ (8006fa0 <xTaskIncrementTick+0x15c>)
 8006ec6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eca:	601a      	str	r2, [r3, #0]
					break;
 8006ecc:	e03f      	b.n	8006f4e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ece:	4b31      	ldr	r3, [pc, #196]	@ (8006f94 <xTaskIncrementTick+0x150>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68db      	ldr	r3, [r3, #12]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d203      	bcs.n	8006eee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ee6:	4a2e      	ldr	r2, [pc, #184]	@ (8006fa0 <xTaskIncrementTick+0x15c>)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006eec:	e02f      	b.n	8006f4e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	3304      	adds	r3, #4
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fe ff82 	bl	8005dfc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d004      	beq.n	8006f0a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	3318      	adds	r3, #24
 8006f04:	4618      	mov	r0, r3
 8006f06:	f7fe ff79 	bl	8005dfc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f0e:	4b25      	ldr	r3, [pc, #148]	@ (8006fa4 <xTaskIncrementTick+0x160>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d903      	bls.n	8006f1e <xTaskIncrementTick+0xda>
 8006f16:	68bb      	ldr	r3, [r7, #8]
 8006f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1a:	4a22      	ldr	r2, [pc, #136]	@ (8006fa4 <xTaskIncrementTick+0x160>)
 8006f1c:	6013      	str	r3, [r2, #0]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f22:	4613      	mov	r3, r2
 8006f24:	009b      	lsls	r3, r3, #2
 8006f26:	4413      	add	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8006fa8 <xTaskIncrementTick+0x164>)
 8006f2c:	441a      	add	r2, r3
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	3304      	adds	r3, #4
 8006f32:	4619      	mov	r1, r3
 8006f34:	4610      	mov	r0, r2
 8006f36:	f7fe ff04 	bl	8005d42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8006fac <xTaskIncrementTick+0x168>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d3b8      	bcc.n	8006eba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f4c:	e7b5      	b.n	8006eba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006f4e:	4b17      	ldr	r3, [pc, #92]	@ (8006fac <xTaskIncrementTick+0x168>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f54:	4914      	ldr	r1, [pc, #80]	@ (8006fa8 <xTaskIncrementTick+0x164>)
 8006f56:	4613      	mov	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4413      	add	r3, r2
 8006f5c:	009b      	lsls	r3, r3, #2
 8006f5e:	440b      	add	r3, r1
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d901      	bls.n	8006f6a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006f66:	2301      	movs	r3, #1
 8006f68:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006f6a:	4b11      	ldr	r3, [pc, #68]	@ (8006fb0 <xTaskIncrementTick+0x16c>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d007      	beq.n	8006f82 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006f72:	2301      	movs	r3, #1
 8006f74:	617b      	str	r3, [r7, #20]
 8006f76:	e004      	b.n	8006f82 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006f78:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb4 <xTaskIncrementTick+0x170>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	4a0d      	ldr	r2, [pc, #52]	@ (8006fb4 <xTaskIncrementTick+0x170>)
 8006f80:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006f82:	697b      	ldr	r3, [r7, #20]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3718      	adds	r7, #24
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	20000eec 	.word	0x20000eec
 8006f90:	20000ec8 	.word	0x20000ec8
 8006f94:	20000e7c 	.word	0x20000e7c
 8006f98:	20000e80 	.word	0x20000e80
 8006f9c:	20000edc 	.word	0x20000edc
 8006fa0:	20000ee4 	.word	0x20000ee4
 8006fa4:	20000ecc 	.word	0x20000ecc
 8006fa8:	200009f4 	.word	0x200009f4
 8006fac:	200009f0 	.word	0x200009f0
 8006fb0:	20000ed8 	.word	0x20000ed8
 8006fb4:	20000ed4 	.word	0x20000ed4

08006fb8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006fbe:	4b28      	ldr	r3, [pc, #160]	@ (8007060 <vTaskSwitchContext+0xa8>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006fc6:	4b27      	ldr	r3, [pc, #156]	@ (8007064 <vTaskSwitchContext+0xac>)
 8006fc8:	2201      	movs	r2, #1
 8006fca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006fcc:	e042      	b.n	8007054 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8006fce:	4b25      	ldr	r3, [pc, #148]	@ (8007064 <vTaskSwitchContext+0xac>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd4:	4b24      	ldr	r3, [pc, #144]	@ (8007068 <vTaskSwitchContext+0xb0>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	e011      	b.n	8007000 <vTaskSwitchContext+0x48>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10b      	bne.n	8006ffa <vTaskSwitchContext+0x42>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	607b      	str	r3, [r7, #4]
}
 8006ff4:	bf00      	nop
 8006ff6:	bf00      	nop
 8006ff8:	e7fd      	b.n	8006ff6 <vTaskSwitchContext+0x3e>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]
 8007000:	491a      	ldr	r1, [pc, #104]	@ (800706c <vTaskSwitchContext+0xb4>)
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	4613      	mov	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	4413      	add	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	440b      	add	r3, r1
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d0e3      	beq.n	8006fdc <vTaskSwitchContext+0x24>
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	4613      	mov	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	4a13      	ldr	r2, [pc, #76]	@ (800706c <vTaskSwitchContext+0xb4>)
 8007020:	4413      	add	r3, r2
 8007022:	60bb      	str	r3, [r7, #8]
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	685a      	ldr	r2, [r3, #4]
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	605a      	str	r2, [r3, #4]
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	685a      	ldr	r2, [r3, #4]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3308      	adds	r3, #8
 8007036:	429a      	cmp	r2, r3
 8007038:	d104      	bne.n	8007044 <vTaskSwitchContext+0x8c>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	685a      	ldr	r2, [r3, #4]
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	605a      	str	r2, [r3, #4]
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	4a09      	ldr	r2, [pc, #36]	@ (8007070 <vTaskSwitchContext+0xb8>)
 800704c:	6013      	str	r3, [r2, #0]
 800704e:	4a06      	ldr	r2, [pc, #24]	@ (8007068 <vTaskSwitchContext+0xb0>)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6013      	str	r3, [r2, #0]
}
 8007054:	bf00      	nop
 8007056:	3714      	adds	r7, #20
 8007058:	46bd      	mov	sp, r7
 800705a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705e:	4770      	bx	lr
 8007060:	20000eec 	.word	0x20000eec
 8007064:	20000ed8 	.word	0x20000ed8
 8007068:	20000ecc 	.word	0x20000ecc
 800706c:	200009f4 	.word	0x200009f4
 8007070:	200009f0 	.word	0x200009f0

08007074 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b084      	sub	sp, #16
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10b      	bne.n	800709c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	60fb      	str	r3, [r7, #12]
}
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	e7fd      	b.n	8007098 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800709c:	4b07      	ldr	r3, [pc, #28]	@ (80070bc <vTaskPlaceOnEventList+0x48>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3318      	adds	r3, #24
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fe fe70 	bl	8005d8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80070aa:	2101      	movs	r1, #1
 80070ac:	6838      	ldr	r0, [r7, #0]
 80070ae:	f000 fa81 	bl	80075b4 <prvAddCurrentTaskToDelayedList>
}
 80070b2:	bf00      	nop
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	200009f0 	.word	0x200009f0

080070c0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b086      	sub	sp, #24
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10b      	bne.n	80070ea <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	617b      	str	r3, [r7, #20]
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	e7fd      	b.n	80070e6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80070ea:	4b0a      	ldr	r3, [pc, #40]	@ (8007114 <vTaskPlaceOnEventListRestricted+0x54>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3318      	adds	r3, #24
 80070f0:	4619      	mov	r1, r3
 80070f2:	68f8      	ldr	r0, [r7, #12]
 80070f4:	f7fe fe25 	bl	8005d42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80070fe:	f04f 33ff 	mov.w	r3, #4294967295
 8007102:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	68b8      	ldr	r0, [r7, #8]
 8007108:	f000 fa54 	bl	80075b4 <prvAddCurrentTaskToDelayedList>
	}
 800710c:	bf00      	nop
 800710e:	3718      	adds	r7, #24
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}
 8007114:	200009f0 	.word	0x200009f0

08007118 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	68db      	ldr	r3, [r3, #12]
 8007126:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007128:	693b      	ldr	r3, [r7, #16]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10b      	bne.n	8007146 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	60fb      	str	r3, [r7, #12]
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	e7fd      	b.n	8007142 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	3318      	adds	r3, #24
 800714a:	4618      	mov	r0, r3
 800714c:	f7fe fe56 	bl	8005dfc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007150:	4b1d      	ldr	r3, [pc, #116]	@ (80071c8 <xTaskRemoveFromEventList+0xb0>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d11d      	bne.n	8007194 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	3304      	adds	r3, #4
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe fe4d 	bl	8005dfc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007166:	4b19      	ldr	r3, [pc, #100]	@ (80071cc <xTaskRemoveFromEventList+0xb4>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	429a      	cmp	r2, r3
 800716c:	d903      	bls.n	8007176 <xTaskRemoveFromEventList+0x5e>
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007172:	4a16      	ldr	r2, [pc, #88]	@ (80071cc <xTaskRemoveFromEventList+0xb4>)
 8007174:	6013      	str	r3, [r2, #0]
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800717a:	4613      	mov	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4a13      	ldr	r2, [pc, #76]	@ (80071d0 <xTaskRemoveFromEventList+0xb8>)
 8007184:	441a      	add	r2, r3
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	3304      	adds	r3, #4
 800718a:	4619      	mov	r1, r3
 800718c:	4610      	mov	r0, r2
 800718e:	f7fe fdd8 	bl	8005d42 <vListInsertEnd>
 8007192:	e005      	b.n	80071a0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	3318      	adds	r3, #24
 8007198:	4619      	mov	r1, r3
 800719a:	480e      	ldr	r0, [pc, #56]	@ (80071d4 <xTaskRemoveFromEventList+0xbc>)
 800719c:	f7fe fdd1 	bl	8005d42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a4:	4b0c      	ldr	r3, [pc, #48]	@ (80071d8 <xTaskRemoveFromEventList+0xc0>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d905      	bls.n	80071ba <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80071ae:	2301      	movs	r3, #1
 80071b0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80071b2:	4b0a      	ldr	r3, [pc, #40]	@ (80071dc <xTaskRemoveFromEventList+0xc4>)
 80071b4:	2201      	movs	r2, #1
 80071b6:	601a      	str	r2, [r3, #0]
 80071b8:	e001      	b.n	80071be <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80071ba:	2300      	movs	r3, #0
 80071bc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80071be:	697b      	ldr	r3, [r7, #20]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	3718      	adds	r7, #24
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}
 80071c8:	20000eec 	.word	0x20000eec
 80071cc:	20000ecc 	.word	0x20000ecc
 80071d0:	200009f4 	.word	0x200009f4
 80071d4:	20000e84 	.word	0x20000e84
 80071d8:	200009f0 	.word	0x200009f0
 80071dc:	20000ed8 	.word	0x20000ed8

080071e0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80071e8:	4b06      	ldr	r3, [pc, #24]	@ (8007204 <vTaskInternalSetTimeOutState+0x24>)
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80071f0:	4b05      	ldr	r3, [pc, #20]	@ (8007208 <vTaskInternalSetTimeOutState+0x28>)
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	605a      	str	r2, [r3, #4]
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr
 8007204:	20000edc 	.word	0x20000edc
 8007208:	20000ec8 	.word	0x20000ec8

0800720c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b088      	sub	sp, #32
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10b      	bne.n	8007234 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007220:	f383 8811 	msr	BASEPRI, r3
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	f3bf 8f4f 	dsb	sy
 800722c:	613b      	str	r3, [r7, #16]
}
 800722e:	bf00      	nop
 8007230:	bf00      	nop
 8007232:	e7fd      	b.n	8007230 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10b      	bne.n	8007252 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800723e:	f383 8811 	msr	BASEPRI, r3
 8007242:	f3bf 8f6f 	isb	sy
 8007246:	f3bf 8f4f 	dsb	sy
 800724a:	60fb      	str	r3, [r7, #12]
}
 800724c:	bf00      	nop
 800724e:	bf00      	nop
 8007250:	e7fd      	b.n	800724e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007252:	f000 ff51 	bl	80080f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007256:	4b1d      	ldr	r3, [pc, #116]	@ (80072cc <xTaskCheckForTimeOut+0xc0>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726e:	d102      	bne.n	8007276 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007270:	2300      	movs	r3, #0
 8007272:	61fb      	str	r3, [r7, #28]
 8007274:	e023      	b.n	80072be <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	4b15      	ldr	r3, [pc, #84]	@ (80072d0 <xTaskCheckForTimeOut+0xc4>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	429a      	cmp	r2, r3
 8007280:	d007      	beq.n	8007292 <xTaskCheckForTimeOut+0x86>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	69ba      	ldr	r2, [r7, #24]
 8007288:	429a      	cmp	r2, r3
 800728a:	d302      	bcc.n	8007292 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800728c:	2301      	movs	r3, #1
 800728e:	61fb      	str	r3, [r7, #28]
 8007290:	e015      	b.n	80072be <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	697a      	ldr	r2, [r7, #20]
 8007298:	429a      	cmp	r2, r3
 800729a:	d20b      	bcs.n	80072b4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	681a      	ldr	r2, [r3, #0]
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	1ad2      	subs	r2, r2, r3
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7ff ff99 	bl	80071e0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
 80072b2:	e004      	b.n	80072be <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80072ba:	2301      	movs	r3, #1
 80072bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80072be:	f000 ff4d 	bl	800815c <vPortExitCritical>

	return xReturn;
 80072c2:	69fb      	ldr	r3, [r7, #28]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3720      	adds	r7, #32
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}
 80072cc:	20000ec8 	.word	0x20000ec8
 80072d0:	20000edc 	.word	0x20000edc

080072d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80072d4:	b480      	push	{r7}
 80072d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80072d8:	4b03      	ldr	r3, [pc, #12]	@ (80072e8 <vTaskMissedYield+0x14>)
 80072da:	2201      	movs	r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
}
 80072de:	bf00      	nop
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	20000ed8 	.word	0x20000ed8

080072ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80072f4:	f000 f852 	bl	800739c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80072f8:	4b06      	ldr	r3, [pc, #24]	@ (8007314 <prvIdleTask+0x28>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2b01      	cmp	r3, #1
 80072fe:	d9f9      	bls.n	80072f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007300:	4b05      	ldr	r3, [pc, #20]	@ (8007318 <prvIdleTask+0x2c>)
 8007302:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	f3bf 8f4f 	dsb	sy
 800730c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007310:	e7f0      	b.n	80072f4 <prvIdleTask+0x8>
 8007312:	bf00      	nop
 8007314:	200009f4 	.word	0x200009f4
 8007318:	e000ed04 	.word	0xe000ed04

0800731c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007322:	2300      	movs	r3, #0
 8007324:	607b      	str	r3, [r7, #4]
 8007326:	e00c      	b.n	8007342 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	4613      	mov	r3, r2
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	4413      	add	r3, r2
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4a12      	ldr	r2, [pc, #72]	@ (800737c <prvInitialiseTaskLists+0x60>)
 8007334:	4413      	add	r3, r2
 8007336:	4618      	mov	r0, r3
 8007338:	f7fe fcd6 	bl	8005ce8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	3301      	adds	r3, #1
 8007340:	607b      	str	r3, [r7, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b37      	cmp	r3, #55	@ 0x37
 8007346:	d9ef      	bls.n	8007328 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007348:	480d      	ldr	r0, [pc, #52]	@ (8007380 <prvInitialiseTaskLists+0x64>)
 800734a:	f7fe fccd 	bl	8005ce8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800734e:	480d      	ldr	r0, [pc, #52]	@ (8007384 <prvInitialiseTaskLists+0x68>)
 8007350:	f7fe fcca 	bl	8005ce8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007354:	480c      	ldr	r0, [pc, #48]	@ (8007388 <prvInitialiseTaskLists+0x6c>)
 8007356:	f7fe fcc7 	bl	8005ce8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800735a:	480c      	ldr	r0, [pc, #48]	@ (800738c <prvInitialiseTaskLists+0x70>)
 800735c:	f7fe fcc4 	bl	8005ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007360:	480b      	ldr	r0, [pc, #44]	@ (8007390 <prvInitialiseTaskLists+0x74>)
 8007362:	f7fe fcc1 	bl	8005ce8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007366:	4b0b      	ldr	r3, [pc, #44]	@ (8007394 <prvInitialiseTaskLists+0x78>)
 8007368:	4a05      	ldr	r2, [pc, #20]	@ (8007380 <prvInitialiseTaskLists+0x64>)
 800736a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800736c:	4b0a      	ldr	r3, [pc, #40]	@ (8007398 <prvInitialiseTaskLists+0x7c>)
 800736e:	4a05      	ldr	r2, [pc, #20]	@ (8007384 <prvInitialiseTaskLists+0x68>)
 8007370:	601a      	str	r2, [r3, #0]
}
 8007372:	bf00      	nop
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	200009f4 	.word	0x200009f4
 8007380:	20000e54 	.word	0x20000e54
 8007384:	20000e68 	.word	0x20000e68
 8007388:	20000e84 	.word	0x20000e84
 800738c:	20000e98 	.word	0x20000e98
 8007390:	20000eb0 	.word	0x20000eb0
 8007394:	20000e7c 	.word	0x20000e7c
 8007398:	20000e80 	.word	0x20000e80

0800739c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b082      	sub	sp, #8
 80073a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073a2:	e019      	b.n	80073d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80073a4:	f000 fea8 	bl	80080f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073a8:	4b10      	ldr	r3, [pc, #64]	@ (80073ec <prvCheckTasksWaitingTermination+0x50>)
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	68db      	ldr	r3, [r3, #12]
 80073ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	3304      	adds	r3, #4
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7fe fd21 	bl	8005dfc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80073ba:	4b0d      	ldr	r3, [pc, #52]	@ (80073f0 <prvCheckTasksWaitingTermination+0x54>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	3b01      	subs	r3, #1
 80073c0:	4a0b      	ldr	r2, [pc, #44]	@ (80073f0 <prvCheckTasksWaitingTermination+0x54>)
 80073c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80073c4:	4b0b      	ldr	r3, [pc, #44]	@ (80073f4 <prvCheckTasksWaitingTermination+0x58>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	3b01      	subs	r3, #1
 80073ca:	4a0a      	ldr	r2, [pc, #40]	@ (80073f4 <prvCheckTasksWaitingTermination+0x58>)
 80073cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80073ce:	f000 fec5 	bl	800815c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f810 	bl	80073f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80073d8:	4b06      	ldr	r3, [pc, #24]	@ (80073f4 <prvCheckTasksWaitingTermination+0x58>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d1e1      	bne.n	80073a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	3708      	adds	r7, #8
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd80      	pop	{r7, pc}
 80073ea:	bf00      	nop
 80073ec:	20000e98 	.word	0x20000e98
 80073f0:	20000ec4 	.word	0x20000ec4
 80073f4:	20000eac 	.word	0x20000eac

080073f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007406:	2b00      	cmp	r3, #0
 8007408:	d108      	bne.n	800741c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800740e:	4618      	mov	r0, r3
 8007410:	f001 f862 	bl	80084d8 <vPortFree>
				vPortFree( pxTCB );
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 f85f 	bl	80084d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800741a:	e019      	b.n	8007450 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007422:	2b01      	cmp	r3, #1
 8007424:	d103      	bne.n	800742e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f001 f856 	bl	80084d8 <vPortFree>
	}
 800742c:	e010      	b.n	8007450 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007434:	2b02      	cmp	r3, #2
 8007436:	d00b      	beq.n	8007450 <prvDeleteTCB+0x58>
	__asm volatile
 8007438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743c:	f383 8811 	msr	BASEPRI, r3
 8007440:	f3bf 8f6f 	isb	sy
 8007444:	f3bf 8f4f 	dsb	sy
 8007448:	60fb      	str	r3, [r7, #12]
}
 800744a:	bf00      	nop
 800744c:	bf00      	nop
 800744e:	e7fd      	b.n	800744c <prvDeleteTCB+0x54>
	}
 8007450:	bf00      	nop
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800745e:	4b0c      	ldr	r3, [pc, #48]	@ (8007490 <prvResetNextTaskUnblockTime+0x38>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d104      	bne.n	8007472 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007468:	4b0a      	ldr	r3, [pc, #40]	@ (8007494 <prvResetNextTaskUnblockTime+0x3c>)
 800746a:	f04f 32ff 	mov.w	r2, #4294967295
 800746e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007470:	e008      	b.n	8007484 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007472:	4b07      	ldr	r3, [pc, #28]	@ (8007490 <prvResetNextTaskUnblockTime+0x38>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	4a04      	ldr	r2, [pc, #16]	@ (8007494 <prvResetNextTaskUnblockTime+0x3c>)
 8007482:	6013      	str	r3, [r2, #0]
}
 8007484:	bf00      	nop
 8007486:	370c      	adds	r7, #12
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr
 8007490:	20000e7c 	.word	0x20000e7c
 8007494:	20000ee4 	.word	0x20000ee4

08007498 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800749e:	4b0b      	ldr	r3, [pc, #44]	@ (80074cc <xTaskGetSchedulerState+0x34>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d102      	bne.n	80074ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80074a6:	2301      	movs	r3, #1
 80074a8:	607b      	str	r3, [r7, #4]
 80074aa:	e008      	b.n	80074be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80074ac:	4b08      	ldr	r3, [pc, #32]	@ (80074d0 <xTaskGetSchedulerState+0x38>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d102      	bne.n	80074ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80074b4:	2302      	movs	r3, #2
 80074b6:	607b      	str	r3, [r7, #4]
 80074b8:	e001      	b.n	80074be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80074ba:	2300      	movs	r3, #0
 80074bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80074be:	687b      	ldr	r3, [r7, #4]
	}
 80074c0:	4618      	mov	r0, r3
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	20000ed0 	.word	0x20000ed0
 80074d0:	20000eec 	.word	0x20000eec

080074d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80074e0:	2300      	movs	r3, #0
 80074e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d058      	beq.n	800759c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80074ea:	4b2f      	ldr	r3, [pc, #188]	@ (80075a8 <xTaskPriorityDisinherit+0xd4>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d00b      	beq.n	800750c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80074f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f8:	f383 8811 	msr	BASEPRI, r3
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f3bf 8f4f 	dsb	sy
 8007504:	60fb      	str	r3, [r7, #12]
}
 8007506:	bf00      	nop
 8007508:	bf00      	nop
 800750a:	e7fd      	b.n	8007508 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007510:	2b00      	cmp	r3, #0
 8007512:	d10b      	bne.n	800752c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	60bb      	str	r3, [r7, #8]
}
 8007526:	bf00      	nop
 8007528:	bf00      	nop
 800752a:	e7fd      	b.n	8007528 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800752c:	693b      	ldr	r3, [r7, #16]
 800752e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007530:	1e5a      	subs	r2, r3, #1
 8007532:	693b      	ldr	r3, [r7, #16]
 8007534:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800753e:	429a      	cmp	r2, r3
 8007540:	d02c      	beq.n	800759c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007546:	2b00      	cmp	r3, #0
 8007548:	d128      	bne.n	800759c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	3304      	adds	r3, #4
 800754e:	4618      	mov	r0, r3
 8007550:	f7fe fc54 	bl	8005dfc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007560:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800756c:	4b0f      	ldr	r3, [pc, #60]	@ (80075ac <xTaskPriorityDisinherit+0xd8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d903      	bls.n	800757c <xTaskPriorityDisinherit+0xa8>
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007578:	4a0c      	ldr	r2, [pc, #48]	@ (80075ac <xTaskPriorityDisinherit+0xd8>)
 800757a:	6013      	str	r3, [r2, #0]
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007580:	4613      	mov	r3, r2
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4a09      	ldr	r2, [pc, #36]	@ (80075b0 <xTaskPriorityDisinherit+0xdc>)
 800758a:	441a      	add	r2, r3
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	3304      	adds	r3, #4
 8007590:	4619      	mov	r1, r3
 8007592:	4610      	mov	r0, r2
 8007594:	f7fe fbd5 	bl	8005d42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007598:	2301      	movs	r3, #1
 800759a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800759c:	697b      	ldr	r3, [r7, #20]
	}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	200009f0 	.word	0x200009f0
 80075ac:	20000ecc 	.word	0x20000ecc
 80075b0:	200009f4 	.word	0x200009f4

080075b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80075be:	4b21      	ldr	r3, [pc, #132]	@ (8007644 <prvAddCurrentTaskToDelayedList+0x90>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80075c4:	4b20      	ldr	r3, [pc, #128]	@ (8007648 <prvAddCurrentTaskToDelayedList+0x94>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	3304      	adds	r3, #4
 80075ca:	4618      	mov	r0, r3
 80075cc:	f7fe fc16 	bl	8005dfc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075d6:	d10a      	bne.n	80075ee <prvAddCurrentTaskToDelayedList+0x3a>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d007      	beq.n	80075ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80075de:	4b1a      	ldr	r3, [pc, #104]	@ (8007648 <prvAddCurrentTaskToDelayedList+0x94>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	3304      	adds	r3, #4
 80075e4:	4619      	mov	r1, r3
 80075e6:	4819      	ldr	r0, [pc, #100]	@ (800764c <prvAddCurrentTaskToDelayedList+0x98>)
 80075e8:	f7fe fbab 	bl	8005d42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80075ec:	e026      	b.n	800763c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	4413      	add	r3, r2
 80075f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075f6:	4b14      	ldr	r3, [pc, #80]	@ (8007648 <prvAddCurrentTaskToDelayedList+0x94>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	429a      	cmp	r2, r3
 8007604:	d209      	bcs.n	800761a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007606:	4b12      	ldr	r3, [pc, #72]	@ (8007650 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	4b0f      	ldr	r3, [pc, #60]	@ (8007648 <prvAddCurrentTaskToDelayedList+0x94>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3304      	adds	r3, #4
 8007610:	4619      	mov	r1, r3
 8007612:	4610      	mov	r0, r2
 8007614:	f7fe fbb9 	bl	8005d8a <vListInsert>
}
 8007618:	e010      	b.n	800763c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800761a:	4b0e      	ldr	r3, [pc, #56]	@ (8007654 <prvAddCurrentTaskToDelayedList+0xa0>)
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	4b0a      	ldr	r3, [pc, #40]	@ (8007648 <prvAddCurrentTaskToDelayedList+0x94>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3304      	adds	r3, #4
 8007624:	4619      	mov	r1, r3
 8007626:	4610      	mov	r0, r2
 8007628:	f7fe fbaf 	bl	8005d8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800762c:	4b0a      	ldr	r3, [pc, #40]	@ (8007658 <prvAddCurrentTaskToDelayedList+0xa4>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	429a      	cmp	r2, r3
 8007634:	d202      	bcs.n	800763c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007636:	4a08      	ldr	r2, [pc, #32]	@ (8007658 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	6013      	str	r3, [r2, #0]
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	20000ec8 	.word	0x20000ec8
 8007648:	200009f0 	.word	0x200009f0
 800764c:	20000eb0 	.word	0x20000eb0
 8007650:	20000e80 	.word	0x20000e80
 8007654:	20000e7c 	.word	0x20000e7c
 8007658:	20000ee4 	.word	0x20000ee4

0800765c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08a      	sub	sp, #40	@ 0x28
 8007660:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007662:	2300      	movs	r3, #0
 8007664:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007666:	f000 fbb1 	bl	8007dcc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800766a:	4b1d      	ldr	r3, [pc, #116]	@ (80076e0 <xTimerCreateTimerTask+0x84>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d021      	beq.n	80076b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007672:	2300      	movs	r3, #0
 8007674:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800767a:	1d3a      	adds	r2, r7, #4
 800767c:	f107 0108 	add.w	r1, r7, #8
 8007680:	f107 030c 	add.w	r3, r7, #12
 8007684:	4618      	mov	r0, r3
 8007686:	f7fe fb15 	bl	8005cb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800768a:	6879      	ldr	r1, [r7, #4]
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	9202      	str	r2, [sp, #8]
 8007692:	9301      	str	r3, [sp, #4]
 8007694:	2302      	movs	r3, #2
 8007696:	9300      	str	r3, [sp, #0]
 8007698:	2300      	movs	r3, #0
 800769a:	460a      	mov	r2, r1
 800769c:	4911      	ldr	r1, [pc, #68]	@ (80076e4 <xTimerCreateTimerTask+0x88>)
 800769e:	4812      	ldr	r0, [pc, #72]	@ (80076e8 <xTimerCreateTimerTask+0x8c>)
 80076a0:	f7ff f8d0 	bl	8006844 <xTaskCreateStatic>
 80076a4:	4603      	mov	r3, r0
 80076a6:	4a11      	ldr	r2, [pc, #68]	@ (80076ec <xTimerCreateTimerTask+0x90>)
 80076a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80076aa:	4b10      	ldr	r3, [pc, #64]	@ (80076ec <xTimerCreateTimerTask+0x90>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80076b2:	2301      	movs	r3, #1
 80076b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d10b      	bne.n	80076d4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80076bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c0:	f383 8811 	msr	BASEPRI, r3
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	613b      	str	r3, [r7, #16]
}
 80076ce:	bf00      	nop
 80076d0:	bf00      	nop
 80076d2:	e7fd      	b.n	80076d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80076d4:	697b      	ldr	r3, [r7, #20]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000f20 	.word	0x20000f20
 80076e4:	08008874 	.word	0x08008874
 80076e8:	08007965 	.word	0x08007965
 80076ec:	20000f24 	.word	0x20000f24

080076f0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80076fe:	202c      	movs	r0, #44	@ 0x2c
 8007700:	f000 fe1c 	bl	800833c <pvPortMalloc>
 8007704:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00d      	beq.n	8007728 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	68b9      	ldr	r1, [r7, #8]
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 f845 	bl	80077b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007728:	697b      	ldr	r3, [r7, #20]
	}
 800772a:	4618      	mov	r0, r3
 800772c:	3718      	adds	r7, #24
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007732:	b580      	push	{r7, lr}
 8007734:	b08a      	sub	sp, #40	@ 0x28
 8007736:	af02      	add	r7, sp, #8
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007740:	232c      	movs	r3, #44	@ 0x2c
 8007742:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	2b2c      	cmp	r3, #44	@ 0x2c
 8007748:	d00b      	beq.n	8007762 <xTimerCreateStatic+0x30>
	__asm volatile
 800774a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774e:	f383 8811 	msr	BASEPRI, r3
 8007752:	f3bf 8f6f 	isb	sy
 8007756:	f3bf 8f4f 	dsb	sy
 800775a:	61bb      	str	r3, [r7, #24]
}
 800775c:	bf00      	nop
 800775e:	bf00      	nop
 8007760:	e7fd      	b.n	800775e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007762:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007764:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10b      	bne.n	8007782 <xTimerCreateStatic+0x50>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	617b      	str	r3, [r7, #20]
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	e7fd      	b.n	800777e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007784:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00d      	beq.n	80077a8 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	9301      	str	r3, [sp, #4]
 8007798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	68b9      	ldr	r1, [r7, #8]
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 f805 	bl	80077b2 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80077a8:	69fb      	ldr	r3, [r7, #28]
	}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3720      	adds	r7, #32
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}

080077b2 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80077b2:	b580      	push	{r7, lr}
 80077b4:	b086      	sub	sp, #24
 80077b6:	af00      	add	r7, sp, #0
 80077b8:	60f8      	str	r0, [r7, #12]
 80077ba:	60b9      	str	r1, [r7, #8]
 80077bc:	607a      	str	r2, [r7, #4]
 80077be:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10b      	bne.n	80077de <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	617b      	str	r3, [r7, #20]
}
 80077d8:	bf00      	nop
 80077da:	bf00      	nop
 80077dc:	e7fd      	b.n	80077da <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d01e      	beq.n	8007822 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80077e4:	f000 faf2 	bl	8007dcc <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80077e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80077ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80077f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f6:	683a      	ldr	r2, [r7, #0]
 80077f8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80077fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fc:	6a3a      	ldr	r2, [r7, #32]
 80077fe:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007802:	3304      	adds	r3, #4
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe fa8f 	bl	8005d28 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007812:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007816:	f043 0304 	orr.w	r3, r3, #4
 800781a:	b2da      	uxtb	r2, r3
 800781c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007822:	bf00      	nop
 8007824:	3718      	adds	r7, #24
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}
	...

0800782c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	@ 0x28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800783a:	2300      	movs	r3, #0
 800783c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10b      	bne.n	800785c <xTimerGenericCommand+0x30>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	623b      	str	r3, [r7, #32]
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800785c:	4b19      	ldr	r3, [pc, #100]	@ (80078c4 <xTimerGenericCommand+0x98>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d02a      	beq.n	80078ba <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2b05      	cmp	r3, #5
 8007874:	dc18      	bgt.n	80078a8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007876:	f7ff fe0f 	bl	8007498 <xTaskGetSchedulerState>
 800787a:	4603      	mov	r3, r0
 800787c:	2b02      	cmp	r3, #2
 800787e:	d109      	bne.n	8007894 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007880:	4b10      	ldr	r3, [pc, #64]	@ (80078c4 <xTimerGenericCommand+0x98>)
 8007882:	6818      	ldr	r0, [r3, #0]
 8007884:	f107 0110 	add.w	r1, r7, #16
 8007888:	2300      	movs	r3, #0
 800788a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800788c:	f7fe fbea 	bl	8006064 <xQueueGenericSend>
 8007890:	6278      	str	r0, [r7, #36]	@ 0x24
 8007892:	e012      	b.n	80078ba <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007894:	4b0b      	ldr	r3, [pc, #44]	@ (80078c4 <xTimerGenericCommand+0x98>)
 8007896:	6818      	ldr	r0, [r3, #0]
 8007898:	f107 0110 	add.w	r1, r7, #16
 800789c:	2300      	movs	r3, #0
 800789e:	2200      	movs	r2, #0
 80078a0:	f7fe fbe0 	bl	8006064 <xQueueGenericSend>
 80078a4:	6278      	str	r0, [r7, #36]	@ 0x24
 80078a6:	e008      	b.n	80078ba <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80078a8:	4b06      	ldr	r3, [pc, #24]	@ (80078c4 <xTimerGenericCommand+0x98>)
 80078aa:	6818      	ldr	r0, [r3, #0]
 80078ac:	f107 0110 	add.w	r1, r7, #16
 80078b0:	2300      	movs	r3, #0
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	f7fe fcd8 	bl	8006268 <xQueueGenericSendFromISR>
 80078b8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3728      	adds	r7, #40	@ 0x28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	20000f20 	.word	0x20000f20

080078c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b088      	sub	sp, #32
 80078cc:	af02      	add	r7, sp, #8
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d2:	4b23      	ldr	r3, [pc, #140]	@ (8007960 <prvProcessExpiredTimer+0x98>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	3304      	adds	r3, #4
 80078e0:	4618      	mov	r0, r3
 80078e2:	f7fe fa8b 	bl	8005dfc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078ec:	f003 0304 	and.w	r3, r3, #4
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d023      	beq.n	800793c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	699a      	ldr	r2, [r3, #24]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	18d1      	adds	r1, r2, r3
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	6978      	ldr	r0, [r7, #20]
 8007902:	f000 f8d5 	bl	8007ab0 <prvInsertTimerInActiveList>
 8007906:	4603      	mov	r3, r0
 8007908:	2b00      	cmp	r3, #0
 800790a:	d020      	beq.n	800794e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800790c:	2300      	movs	r3, #0
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	2300      	movs	r3, #0
 8007912:	687a      	ldr	r2, [r7, #4]
 8007914:	2100      	movs	r1, #0
 8007916:	6978      	ldr	r0, [r7, #20]
 8007918:	f7ff ff88 	bl	800782c <xTimerGenericCommand>
 800791c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d114      	bne.n	800794e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007928:	f383 8811 	msr	BASEPRI, r3
 800792c:	f3bf 8f6f 	isb	sy
 8007930:	f3bf 8f4f 	dsb	sy
 8007934:	60fb      	str	r3, [r7, #12]
}
 8007936:	bf00      	nop
 8007938:	bf00      	nop
 800793a:	e7fd      	b.n	8007938 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007942:	f023 0301 	bic.w	r3, r3, #1
 8007946:	b2da      	uxtb	r2, r3
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	6a1b      	ldr	r3, [r3, #32]
 8007952:	6978      	ldr	r0, [r7, #20]
 8007954:	4798      	blx	r3
}
 8007956:	bf00      	nop
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	20000f18 	.word	0x20000f18

08007964 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800796c:	f107 0308 	add.w	r3, r7, #8
 8007970:	4618      	mov	r0, r3
 8007972:	f000 f859 	bl	8007a28 <prvGetNextExpireTime>
 8007976:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	4619      	mov	r1, r3
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 f805 	bl	800798c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007982:	f000 f8d7 	bl	8007b34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007986:	bf00      	nop
 8007988:	e7f0      	b.n	800796c <prvTimerTask+0x8>
	...

0800798c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007996:	f7ff f999 	bl	8006ccc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800799a:	f107 0308 	add.w	r3, r7, #8
 800799e:	4618      	mov	r0, r3
 80079a0:	f000 f866 	bl	8007a70 <prvSampleTimeNow>
 80079a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d130      	bne.n	8007a0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d10a      	bne.n	80079c8 <prvProcessTimerOrBlockTask+0x3c>
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d806      	bhi.n	80079c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80079ba:	f7ff f995 	bl	8006ce8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079be:	68f9      	ldr	r1, [r7, #12]
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff ff81 	bl	80078c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80079c6:	e024      	b.n	8007a12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d008      	beq.n	80079e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079ce:	4b13      	ldr	r3, [pc, #76]	@ (8007a1c <prvProcessTimerOrBlockTask+0x90>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <prvProcessTimerOrBlockTask+0x50>
 80079d8:	2301      	movs	r3, #1
 80079da:	e000      	b.n	80079de <prvProcessTimerOrBlockTask+0x52>
 80079dc:	2300      	movs	r3, #0
 80079de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079e0:	4b0f      	ldr	r3, [pc, #60]	@ (8007a20 <prvProcessTimerOrBlockTask+0x94>)
 80079e2:	6818      	ldr	r0, [r3, #0]
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	683a      	ldr	r2, [r7, #0]
 80079ec:	4619      	mov	r1, r3
 80079ee:	f7fe fef5 	bl	80067dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079f2:	f7ff f979 	bl	8006ce8 <xTaskResumeAll>
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079fc:	4b09      	ldr	r3, [pc, #36]	@ (8007a24 <prvProcessTimerOrBlockTask+0x98>)
 80079fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a02:	601a      	str	r2, [r3, #0]
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	f3bf 8f6f 	isb	sy
}
 8007a0c:	e001      	b.n	8007a12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007a0e:	f7ff f96b 	bl	8006ce8 <xTaskResumeAll>
}
 8007a12:	bf00      	nop
 8007a14:	3710      	adds	r7, #16
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	20000f1c 	.word	0x20000f1c
 8007a20:	20000f20 	.word	0x20000f20
 8007a24:	e000ed04 	.word	0xe000ed04

08007a28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a30:	4b0e      	ldr	r3, [pc, #56]	@ (8007a6c <prvGetNextExpireTime+0x44>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <prvGetNextExpireTime+0x16>
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	e000      	b.n	8007a40 <prvGetNextExpireTime+0x18>
 8007a3e:	2200      	movs	r2, #0
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d105      	bne.n	8007a58 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a4c:	4b07      	ldr	r3, [pc, #28]	@ (8007a6c <prvGetNextExpireTime+0x44>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	e001      	b.n	8007a5c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3714      	adds	r7, #20
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	20000f18 	.word	0x20000f18

08007a70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a78:	f7ff f9d4 	bl	8006e24 <xTaskGetTickCount>
 8007a7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8007aac <prvSampleTimeNow+0x3c>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68fa      	ldr	r2, [r7, #12]
 8007a84:	429a      	cmp	r2, r3
 8007a86:	d205      	bcs.n	8007a94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a88:	f000 f93a 	bl	8007d00 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2201      	movs	r2, #1
 8007a90:	601a      	str	r2, [r3, #0]
 8007a92:	e002      	b.n	8007a9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a9a:	4a04      	ldr	r2, [pc, #16]	@ (8007aac <prvSampleTimeNow+0x3c>)
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3710      	adds	r7, #16
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	20000f28 	.word	0x20000f28

08007ab0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	607a      	str	r2, [r7, #4]
 8007abc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	68fa      	ldr	r2, [r7, #12]
 8007acc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007ace:	68ba      	ldr	r2, [r7, #8]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d812      	bhi.n	8007afc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	1ad2      	subs	r2, r2, r3
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d302      	bcc.n	8007aea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	617b      	str	r3, [r7, #20]
 8007ae8:	e01b      	b.n	8007b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007aea:	4b10      	ldr	r3, [pc, #64]	@ (8007b2c <prvInsertTimerInActiveList+0x7c>)
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	3304      	adds	r3, #4
 8007af2:	4619      	mov	r1, r3
 8007af4:	4610      	mov	r0, r2
 8007af6:	f7fe f948 	bl	8005d8a <vListInsert>
 8007afa:	e012      	b.n	8007b22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d206      	bcs.n	8007b12 <prvInsertTimerInActiveList+0x62>
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d302      	bcc.n	8007b12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	617b      	str	r3, [r7, #20]
 8007b10:	e007      	b.n	8007b22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b12:	4b07      	ldr	r3, [pc, #28]	@ (8007b30 <prvInsertTimerInActiveList+0x80>)
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	3304      	adds	r3, #4
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	f7fe f934 	bl	8005d8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007b22:	697b      	ldr	r3, [r7, #20]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3718      	adds	r7, #24
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20000f1c 	.word	0x20000f1c
 8007b30:	20000f18 	.word	0x20000f18

08007b34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08e      	sub	sp, #56	@ 0x38
 8007b38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007b3a:	e0ce      	b.n	8007cda <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	da19      	bge.n	8007b76 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b42:	1d3b      	adds	r3, r7, #4
 8007b44:	3304      	adds	r3, #4
 8007b46:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d10b      	bne.n	8007b66 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b52:	f383 8811 	msr	BASEPRI, r3
 8007b56:	f3bf 8f6f 	isb	sy
 8007b5a:	f3bf 8f4f 	dsb	sy
 8007b5e:	61fb      	str	r3, [r7, #28]
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	e7fd      	b.n	8007b62 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b6c:	6850      	ldr	r0, [r2, #4]
 8007b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b70:	6892      	ldr	r2, [r2, #8]
 8007b72:	4611      	mov	r1, r2
 8007b74:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f2c0 80ae 	blt.w	8007cda <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b84:	695b      	ldr	r3, [r3, #20]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d004      	beq.n	8007b94 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe f934 	bl	8005dfc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b94:	463b      	mov	r3, r7
 8007b96:	4618      	mov	r0, r3
 8007b98:	f7ff ff6a 	bl	8007a70 <prvSampleTimeNow>
 8007b9c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b09      	cmp	r3, #9
 8007ba2:	f200 8097 	bhi.w	8007cd4 <prvProcessReceivedCommands+0x1a0>
 8007ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8007bac <prvProcessReceivedCommands+0x78>)
 8007ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bac:	08007bd5 	.word	0x08007bd5
 8007bb0:	08007bd5 	.word	0x08007bd5
 8007bb4:	08007bd5 	.word	0x08007bd5
 8007bb8:	08007c4b 	.word	0x08007c4b
 8007bbc:	08007c5f 	.word	0x08007c5f
 8007bc0:	08007cab 	.word	0x08007cab
 8007bc4:	08007bd5 	.word	0x08007bd5
 8007bc8:	08007bd5 	.word	0x08007bd5
 8007bcc:	08007c4b 	.word	0x08007c4b
 8007bd0:	08007c5f 	.word	0x08007c5f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bda:	f043 0301 	orr.w	r3, r3, #1
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007be6:	68ba      	ldr	r2, [r7, #8]
 8007be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	18d1      	adds	r1, r2, r3
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bf4:	f7ff ff5c 	bl	8007ab0 <prvInsertTimerInActiveList>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d06c      	beq.n	8007cd8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c00:	6a1b      	ldr	r3, [r3, #32]
 8007c02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c04:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d061      	beq.n	8007cd8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007c14:	68ba      	ldr	r2, [r7, #8]
 8007c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	441a      	add	r2, r3
 8007c1c:	2300      	movs	r3, #0
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	2300      	movs	r3, #0
 8007c22:	2100      	movs	r1, #0
 8007c24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c26:	f7ff fe01 	bl	800782c <xTimerGenericCommand>
 8007c2a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d152      	bne.n	8007cd8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c36:	f383 8811 	msr	BASEPRI, r3
 8007c3a:	f3bf 8f6f 	isb	sy
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	61bb      	str	r3, [r7, #24]
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop
 8007c48:	e7fd      	b.n	8007c46 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c50:	f023 0301 	bic.w	r3, r3, #1
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c5c:	e03d      	b.n	8007cda <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c64:	f043 0301 	orr.w	r3, r3, #1
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c74:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c78:	699b      	ldr	r3, [r3, #24]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10b      	bne.n	8007c96 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	617b      	str	r3, [r7, #20]
}
 8007c90:	bf00      	nop
 8007c92:	bf00      	nop
 8007c94:	e7fd      	b.n	8007c92 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c9c:	18d1      	adds	r1, r2, r3
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ca2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ca4:	f7ff ff04 	bl	8007ab0 <prvInsertTimerInActiveList>
					break;
 8007ca8:	e017      	b.n	8007cda <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d103      	bne.n	8007cc0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007cb8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cba:	f000 fc0d 	bl	80084d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007cbe:	e00c      	b.n	8007cda <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cc6:	f023 0301 	bic.w	r3, r3, #1
 8007cca:	b2da      	uxtb	r2, r3
 8007ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007cd2:	e002      	b.n	8007cda <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007cd4:	bf00      	nop
 8007cd6:	e000      	b.n	8007cda <prvProcessReceivedCommands+0x1a6>
					break;
 8007cd8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cda:	4b08      	ldr	r3, [pc, #32]	@ (8007cfc <prvProcessReceivedCommands+0x1c8>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	1d39      	adds	r1, r7, #4
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fe fb5e 	bl	80063a4 <xQueueReceive>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f47f af26 	bne.w	8007b3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007cf0:	bf00      	nop
 8007cf2:	bf00      	nop
 8007cf4:	3730      	adds	r7, #48	@ 0x30
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000f20 	.word	0x20000f20

08007d00 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b088      	sub	sp, #32
 8007d04:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d06:	e049      	b.n	8007d9c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d08:	4b2e      	ldr	r3, [pc, #184]	@ (8007dc4 <prvSwitchTimerLists+0xc4>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d12:	4b2c      	ldr	r3, [pc, #176]	@ (8007dc4 <prvSwitchTimerLists+0xc4>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	3304      	adds	r3, #4
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7fe f86b 	bl	8005dfc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	6a1b      	ldr	r3, [r3, #32]
 8007d2a:	68f8      	ldr	r0, [r7, #12]
 8007d2c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d02f      	beq.n	8007d9c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	4413      	add	r3, r2
 8007d44:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d46:	68ba      	ldr	r2, [r7, #8]
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	429a      	cmp	r2, r3
 8007d4c:	d90e      	bls.n	8007d6c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	68ba      	ldr	r2, [r7, #8]
 8007d52:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d5a:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc4 <prvSwitchTimerLists+0xc4>)
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	3304      	adds	r3, #4
 8007d62:	4619      	mov	r1, r3
 8007d64:	4610      	mov	r0, r2
 8007d66:	f7fe f810 	bl	8005d8a <vListInsert>
 8007d6a:	e017      	b.n	8007d9c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	9300      	str	r3, [sp, #0]
 8007d70:	2300      	movs	r3, #0
 8007d72:	693a      	ldr	r2, [r7, #16]
 8007d74:	2100      	movs	r1, #0
 8007d76:	68f8      	ldr	r0, [r7, #12]
 8007d78:	f7ff fd58 	bl	800782c <xTimerGenericCommand>
 8007d7c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10b      	bne.n	8007d9c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	603b      	str	r3, [r7, #0]
}
 8007d96:	bf00      	nop
 8007d98:	bf00      	nop
 8007d9a:	e7fd      	b.n	8007d98 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d9c:	4b09      	ldr	r3, [pc, #36]	@ (8007dc4 <prvSwitchTimerLists+0xc4>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d1b0      	bne.n	8007d08 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007da6:	4b07      	ldr	r3, [pc, #28]	@ (8007dc4 <prvSwitchTimerLists+0xc4>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007dac:	4b06      	ldr	r3, [pc, #24]	@ (8007dc8 <prvSwitchTimerLists+0xc8>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a04      	ldr	r2, [pc, #16]	@ (8007dc4 <prvSwitchTimerLists+0xc4>)
 8007db2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007db4:	4a04      	ldr	r2, [pc, #16]	@ (8007dc8 <prvSwitchTimerLists+0xc8>)
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	6013      	str	r3, [r2, #0]
}
 8007dba:	bf00      	nop
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20000f18 	.word	0x20000f18
 8007dc8:	20000f1c 	.word	0x20000f1c

08007dcc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	b082      	sub	sp, #8
 8007dd0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007dd2:	f000 f991 	bl	80080f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007dd6:	4b15      	ldr	r3, [pc, #84]	@ (8007e2c <prvCheckForValidListAndQueue+0x60>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d120      	bne.n	8007e20 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007dde:	4814      	ldr	r0, [pc, #80]	@ (8007e30 <prvCheckForValidListAndQueue+0x64>)
 8007de0:	f7fd ff82 	bl	8005ce8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007de4:	4813      	ldr	r0, [pc, #76]	@ (8007e34 <prvCheckForValidListAndQueue+0x68>)
 8007de6:	f7fd ff7f 	bl	8005ce8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007dea:	4b13      	ldr	r3, [pc, #76]	@ (8007e38 <prvCheckForValidListAndQueue+0x6c>)
 8007dec:	4a10      	ldr	r2, [pc, #64]	@ (8007e30 <prvCheckForValidListAndQueue+0x64>)
 8007dee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007df0:	4b12      	ldr	r3, [pc, #72]	@ (8007e3c <prvCheckForValidListAndQueue+0x70>)
 8007df2:	4a10      	ldr	r2, [pc, #64]	@ (8007e34 <prvCheckForValidListAndQueue+0x68>)
 8007df4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007df6:	2300      	movs	r3, #0
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	4b11      	ldr	r3, [pc, #68]	@ (8007e40 <prvCheckForValidListAndQueue+0x74>)
 8007dfc:	4a11      	ldr	r2, [pc, #68]	@ (8007e44 <prvCheckForValidListAndQueue+0x78>)
 8007dfe:	2110      	movs	r1, #16
 8007e00:	200a      	movs	r0, #10
 8007e02:	f7fe f88f 	bl	8005f24 <xQueueGenericCreateStatic>
 8007e06:	4603      	mov	r3, r0
 8007e08:	4a08      	ldr	r2, [pc, #32]	@ (8007e2c <prvCheckForValidListAndQueue+0x60>)
 8007e0a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007e0c:	4b07      	ldr	r3, [pc, #28]	@ (8007e2c <prvCheckForValidListAndQueue+0x60>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d005      	beq.n	8007e20 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007e14:	4b05      	ldr	r3, [pc, #20]	@ (8007e2c <prvCheckForValidListAndQueue+0x60>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	490b      	ldr	r1, [pc, #44]	@ (8007e48 <prvCheckForValidListAndQueue+0x7c>)
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	f7fe fcb4 	bl	8006788 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007e20:	f000 f99c 	bl	800815c <vPortExitCritical>
}
 8007e24:	bf00      	nop
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	20000f20 	.word	0x20000f20
 8007e30:	20000ef0 	.word	0x20000ef0
 8007e34:	20000f04 	.word	0x20000f04
 8007e38:	20000f18 	.word	0x20000f18
 8007e3c:	20000f1c 	.word	0x20000f1c
 8007e40:	20000fcc 	.word	0x20000fcc
 8007e44:	20000f2c 	.word	0x20000f2c
 8007e48:	0800887c 	.word	0x0800887c

08007e4c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d10b      	bne.n	8007e76 <pvTimerGetTimerID+0x2a>
	__asm volatile
 8007e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e62:	f383 8811 	msr	BASEPRI, r3
 8007e66:	f3bf 8f6f 	isb	sy
 8007e6a:	f3bf 8f4f 	dsb	sy
 8007e6e:	60fb      	str	r3, [r7, #12]
}
 8007e70:	bf00      	nop
 8007e72:	bf00      	nop
 8007e74:	e7fd      	b.n	8007e72 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007e76:	f000 f93f 	bl	80080f8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	69db      	ldr	r3, [r3, #28]
 8007e7e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007e80:	f000 f96c 	bl	800815c <vPortExitCritical>

	return pvReturn;
 8007e84:	693b      	ldr	r3, [r7, #16]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3718      	adds	r7, #24
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e90:	b480      	push	{r7}
 8007e92:	b085      	sub	sp, #20
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3b04      	subs	r3, #4
 8007ea0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3b04      	subs	r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	f023 0201 	bic.w	r2, r3, #1
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3b04      	subs	r3, #4
 8007ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007ec0:	4a0c      	ldr	r2, [pc, #48]	@ (8007ef4 <pxPortInitialiseStack+0x64>)
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	3b14      	subs	r3, #20
 8007eca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	3b04      	subs	r3, #4
 8007ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f06f 0202 	mvn.w	r2, #2
 8007ede:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	3b20      	subs	r3, #32
 8007ee4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
}
 8007ee8:	4618      	mov	r0, r3
 8007eea:	3714      	adds	r7, #20
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	08007ef9 	.word	0x08007ef9

08007ef8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f02:	4b13      	ldr	r3, [pc, #76]	@ (8007f50 <prvTaskExitError+0x58>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f0a:	d00b      	beq.n	8007f24 <prvTaskExitError+0x2c>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	60fb      	str	r3, [r7, #12]
}
 8007f1e:	bf00      	nop
 8007f20:	bf00      	nop
 8007f22:	e7fd      	b.n	8007f20 <prvTaskExitError+0x28>
	__asm volatile
 8007f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f28:	f383 8811 	msr	BASEPRI, r3
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f3bf 8f4f 	dsb	sy
 8007f34:	60bb      	str	r3, [r7, #8]
}
 8007f36:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007f38:	bf00      	nop
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0fc      	beq.n	8007f3a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007f40:	bf00      	nop
 8007f42:	bf00      	nop
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
 8007f4e:	bf00      	nop
 8007f50:	20000048 	.word	0x20000048
	...

08007f60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f60:	4b07      	ldr	r3, [pc, #28]	@ (8007f80 <pxCurrentTCBConst2>)
 8007f62:	6819      	ldr	r1, [r3, #0]
 8007f64:	6808      	ldr	r0, [r1, #0]
 8007f66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f6a:	f380 8809 	msr	PSP, r0
 8007f6e:	f3bf 8f6f 	isb	sy
 8007f72:	f04f 0000 	mov.w	r0, #0
 8007f76:	f380 8811 	msr	BASEPRI, r0
 8007f7a:	4770      	bx	lr
 8007f7c:	f3af 8000 	nop.w

08007f80 <pxCurrentTCBConst2>:
 8007f80:	200009f0 	.word	0x200009f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop

08007f88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f88:	4808      	ldr	r0, [pc, #32]	@ (8007fac <prvPortStartFirstTask+0x24>)
 8007f8a:	6800      	ldr	r0, [r0, #0]
 8007f8c:	6800      	ldr	r0, [r0, #0]
 8007f8e:	f380 8808 	msr	MSP, r0
 8007f92:	f04f 0000 	mov.w	r0, #0
 8007f96:	f380 8814 	msr	CONTROL, r0
 8007f9a:	b662      	cpsie	i
 8007f9c:	b661      	cpsie	f
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	f3bf 8f6f 	isb	sy
 8007fa6:	df00      	svc	0
 8007fa8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007faa:	bf00      	nop
 8007fac:	e000ed08 	.word	0xe000ed08

08007fb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007fb6:	4b47      	ldr	r3, [pc, #284]	@ (80080d4 <xPortStartScheduler+0x124>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a47      	ldr	r2, [pc, #284]	@ (80080d8 <xPortStartScheduler+0x128>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d10b      	bne.n	8007fd8 <xPortStartScheduler+0x28>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	60fb      	str	r3, [r7, #12]
}
 8007fd2:	bf00      	nop
 8007fd4:	bf00      	nop
 8007fd6:	e7fd      	b.n	8007fd4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fd8:	4b3e      	ldr	r3, [pc, #248]	@ (80080d4 <xPortStartScheduler+0x124>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a3f      	ldr	r2, [pc, #252]	@ (80080dc <xPortStartScheduler+0x12c>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d10b      	bne.n	8007ffa <xPortStartScheduler+0x4a>
	__asm volatile
 8007fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe6:	f383 8811 	msr	BASEPRI, r3
 8007fea:	f3bf 8f6f 	isb	sy
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	613b      	str	r3, [r7, #16]
}
 8007ff4:	bf00      	nop
 8007ff6:	bf00      	nop
 8007ff8:	e7fd      	b.n	8007ff6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ffa:	4b39      	ldr	r3, [pc, #228]	@ (80080e0 <xPortStartScheduler+0x130>)
 8007ffc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	b2db      	uxtb	r3, r3
 8008004:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	22ff      	movs	r2, #255	@ 0xff
 800800a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	b2db      	uxtb	r3, r3
 8008012:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008014:	78fb      	ldrb	r3, [r7, #3]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800801c:	b2da      	uxtb	r2, r3
 800801e:	4b31      	ldr	r3, [pc, #196]	@ (80080e4 <xPortStartScheduler+0x134>)
 8008020:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008022:	4b31      	ldr	r3, [pc, #196]	@ (80080e8 <xPortStartScheduler+0x138>)
 8008024:	2207      	movs	r2, #7
 8008026:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008028:	e009      	b.n	800803e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800802a:	4b2f      	ldr	r3, [pc, #188]	@ (80080e8 <xPortStartScheduler+0x138>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	3b01      	subs	r3, #1
 8008030:	4a2d      	ldr	r2, [pc, #180]	@ (80080e8 <xPortStartScheduler+0x138>)
 8008032:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008034:	78fb      	ldrb	r3, [r7, #3]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	005b      	lsls	r3, r3, #1
 800803a:	b2db      	uxtb	r3, r3
 800803c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800803e:	78fb      	ldrb	r3, [r7, #3]
 8008040:	b2db      	uxtb	r3, r3
 8008042:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008046:	2b80      	cmp	r3, #128	@ 0x80
 8008048:	d0ef      	beq.n	800802a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800804a:	4b27      	ldr	r3, [pc, #156]	@ (80080e8 <xPortStartScheduler+0x138>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f1c3 0307 	rsb	r3, r3, #7
 8008052:	2b04      	cmp	r3, #4
 8008054:	d00b      	beq.n	800806e <xPortStartScheduler+0xbe>
	__asm volatile
 8008056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805a:	f383 8811 	msr	BASEPRI, r3
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	f3bf 8f4f 	dsb	sy
 8008066:	60bb      	str	r3, [r7, #8]
}
 8008068:	bf00      	nop
 800806a:	bf00      	nop
 800806c:	e7fd      	b.n	800806a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800806e:	4b1e      	ldr	r3, [pc, #120]	@ (80080e8 <xPortStartScheduler+0x138>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	021b      	lsls	r3, r3, #8
 8008074:	4a1c      	ldr	r2, [pc, #112]	@ (80080e8 <xPortStartScheduler+0x138>)
 8008076:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008078:	4b1b      	ldr	r3, [pc, #108]	@ (80080e8 <xPortStartScheduler+0x138>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008080:	4a19      	ldr	r2, [pc, #100]	@ (80080e8 <xPortStartScheduler+0x138>)
 8008082:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	b2da      	uxtb	r2, r3
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800808c:	4b17      	ldr	r3, [pc, #92]	@ (80080ec <xPortStartScheduler+0x13c>)
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a16      	ldr	r2, [pc, #88]	@ (80080ec <xPortStartScheduler+0x13c>)
 8008092:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008096:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008098:	4b14      	ldr	r3, [pc, #80]	@ (80080ec <xPortStartScheduler+0x13c>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a13      	ldr	r2, [pc, #76]	@ (80080ec <xPortStartScheduler+0x13c>)
 800809e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80080a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080a4:	f000 f8da 	bl	800825c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080a8:	4b11      	ldr	r3, [pc, #68]	@ (80080f0 <xPortStartScheduler+0x140>)
 80080aa:	2200      	movs	r2, #0
 80080ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080ae:	f000 f8f9 	bl	80082a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080b2:	4b10      	ldr	r3, [pc, #64]	@ (80080f4 <xPortStartScheduler+0x144>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	4a0f      	ldr	r2, [pc, #60]	@ (80080f4 <xPortStartScheduler+0x144>)
 80080b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80080bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080be:	f7ff ff63 	bl	8007f88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080c2:	f7fe ff79 	bl	8006fb8 <vTaskSwitchContext>
	prvTaskExitError();
 80080c6:	f7ff ff17 	bl	8007ef8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080ca:	2300      	movs	r3, #0
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	3718      	adds	r7, #24
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	e000ed00 	.word	0xe000ed00
 80080d8:	410fc271 	.word	0x410fc271
 80080dc:	410fc270 	.word	0x410fc270
 80080e0:	e000e400 	.word	0xe000e400
 80080e4:	2000101c 	.word	0x2000101c
 80080e8:	20001020 	.word	0x20001020
 80080ec:	e000ed20 	.word	0xe000ed20
 80080f0:	20000048 	.word	0x20000048
 80080f4:	e000ef34 	.word	0xe000ef34

080080f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
	__asm volatile
 80080fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008102:	f383 8811 	msr	BASEPRI, r3
 8008106:	f3bf 8f6f 	isb	sy
 800810a:	f3bf 8f4f 	dsb	sy
 800810e:	607b      	str	r3, [r7, #4]
}
 8008110:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008112:	4b10      	ldr	r3, [pc, #64]	@ (8008154 <vPortEnterCritical+0x5c>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3301      	adds	r3, #1
 8008118:	4a0e      	ldr	r2, [pc, #56]	@ (8008154 <vPortEnterCritical+0x5c>)
 800811a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800811c:	4b0d      	ldr	r3, [pc, #52]	@ (8008154 <vPortEnterCritical+0x5c>)
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2b01      	cmp	r3, #1
 8008122:	d110      	bne.n	8008146 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008124:	4b0c      	ldr	r3, [pc, #48]	@ (8008158 <vPortEnterCritical+0x60>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00b      	beq.n	8008146 <vPortEnterCritical+0x4e>
	__asm volatile
 800812e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008132:	f383 8811 	msr	BASEPRI, r3
 8008136:	f3bf 8f6f 	isb	sy
 800813a:	f3bf 8f4f 	dsb	sy
 800813e:	603b      	str	r3, [r7, #0]
}
 8008140:	bf00      	nop
 8008142:	bf00      	nop
 8008144:	e7fd      	b.n	8008142 <vPortEnterCritical+0x4a>
	}
}
 8008146:	bf00      	nop
 8008148:	370c      	adds	r7, #12
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	20000048 	.word	0x20000048
 8008158:	e000ed04 	.word	0xe000ed04

0800815c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800815c:	b480      	push	{r7}
 800815e:	b083      	sub	sp, #12
 8008160:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008162:	4b12      	ldr	r3, [pc, #72]	@ (80081ac <vPortExitCritical+0x50>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d10b      	bne.n	8008182 <vPortExitCritical+0x26>
	__asm volatile
 800816a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800816e:	f383 8811 	msr	BASEPRI, r3
 8008172:	f3bf 8f6f 	isb	sy
 8008176:	f3bf 8f4f 	dsb	sy
 800817a:	607b      	str	r3, [r7, #4]
}
 800817c:	bf00      	nop
 800817e:	bf00      	nop
 8008180:	e7fd      	b.n	800817e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008182:	4b0a      	ldr	r3, [pc, #40]	@ (80081ac <vPortExitCritical+0x50>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	3b01      	subs	r3, #1
 8008188:	4a08      	ldr	r2, [pc, #32]	@ (80081ac <vPortExitCritical+0x50>)
 800818a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800818c:	4b07      	ldr	r3, [pc, #28]	@ (80081ac <vPortExitCritical+0x50>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	2b00      	cmp	r3, #0
 8008192:	d105      	bne.n	80081a0 <vPortExitCritical+0x44>
 8008194:	2300      	movs	r3, #0
 8008196:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	f383 8811 	msr	BASEPRI, r3
}
 800819e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr
 80081ac:	20000048 	.word	0x20000048

080081b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081b0:	f3ef 8009 	mrs	r0, PSP
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	4b15      	ldr	r3, [pc, #84]	@ (8008210 <pxCurrentTCBConst>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	f01e 0f10 	tst.w	lr, #16
 80081c0:	bf08      	it	eq
 80081c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ca:	6010      	str	r0, [r2, #0]
 80081cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081d4:	f380 8811 	msr	BASEPRI, r0
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f7fe feea 	bl	8006fb8 <vTaskSwitchContext>
 80081e4:	f04f 0000 	mov.w	r0, #0
 80081e8:	f380 8811 	msr	BASEPRI, r0
 80081ec:	bc09      	pop	{r0, r3}
 80081ee:	6819      	ldr	r1, [r3, #0]
 80081f0:	6808      	ldr	r0, [r1, #0]
 80081f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f6:	f01e 0f10 	tst.w	lr, #16
 80081fa:	bf08      	it	eq
 80081fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008200:	f380 8809 	msr	PSP, r0
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	4770      	bx	lr
 800820a:	bf00      	nop
 800820c:	f3af 8000 	nop.w

08008210 <pxCurrentTCBConst>:
 8008210:	200009f0 	.word	0x200009f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008214:	bf00      	nop
 8008216:	bf00      	nop

08008218 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	607b      	str	r3, [r7, #4]
}
 8008230:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008232:	f7fe fe07 	bl	8006e44 <xTaskIncrementTick>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d003      	beq.n	8008244 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800823c:	4b06      	ldr	r3, [pc, #24]	@ (8008258 <xPortSysTickHandler+0x40>)
 800823e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008242:	601a      	str	r2, [r3, #0]
 8008244:	2300      	movs	r3, #0
 8008246:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	f383 8811 	msr	BASEPRI, r3
}
 800824e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008250:	bf00      	nop
 8008252:	3708      	adds	r7, #8
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}
 8008258:	e000ed04 	.word	0xe000ed04

0800825c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800825c:	b480      	push	{r7}
 800825e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008260:	4b0b      	ldr	r3, [pc, #44]	@ (8008290 <vPortSetupTimerInterrupt+0x34>)
 8008262:	2200      	movs	r2, #0
 8008264:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008266:	4b0b      	ldr	r3, [pc, #44]	@ (8008294 <vPortSetupTimerInterrupt+0x38>)
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800826c:	4b0a      	ldr	r3, [pc, #40]	@ (8008298 <vPortSetupTimerInterrupt+0x3c>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a0a      	ldr	r2, [pc, #40]	@ (800829c <vPortSetupTimerInterrupt+0x40>)
 8008272:	fba2 2303 	umull	r2, r3, r2, r3
 8008276:	099b      	lsrs	r3, r3, #6
 8008278:	4a09      	ldr	r2, [pc, #36]	@ (80082a0 <vPortSetupTimerInterrupt+0x44>)
 800827a:	3b01      	subs	r3, #1
 800827c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800827e:	4b04      	ldr	r3, [pc, #16]	@ (8008290 <vPortSetupTimerInterrupt+0x34>)
 8008280:	2207      	movs	r2, #7
 8008282:	601a      	str	r2, [r3, #0]
}
 8008284:	bf00      	nop
 8008286:	46bd      	mov	sp, r7
 8008288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828c:	4770      	bx	lr
 800828e:	bf00      	nop
 8008290:	e000e010 	.word	0xe000e010
 8008294:	e000e018 	.word	0xe000e018
 8008298:	2000003c 	.word	0x2000003c
 800829c:	10624dd3 	.word	0x10624dd3
 80082a0:	e000e014 	.word	0xe000e014

080082a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80082b4 <vPortEnableVFP+0x10>
 80082a8:	6801      	ldr	r1, [r0, #0]
 80082aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80082ae:	6001      	str	r1, [r0, #0]
 80082b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082b2:	bf00      	nop
 80082b4:	e000ed88 	.word	0xe000ed88

080082b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082b8:	b480      	push	{r7}
 80082ba:	b085      	sub	sp, #20
 80082bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082be:	f3ef 8305 	mrs	r3, IPSR
 80082c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b0f      	cmp	r3, #15
 80082c8:	d915      	bls.n	80082f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082ca:	4a18      	ldr	r2, [pc, #96]	@ (800832c <vPortValidateInterruptPriority+0x74>)
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	4413      	add	r3, r2
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082d4:	4b16      	ldr	r3, [pc, #88]	@ (8008330 <vPortValidateInterruptPriority+0x78>)
 80082d6:	781b      	ldrb	r3, [r3, #0]
 80082d8:	7afa      	ldrb	r2, [r7, #11]
 80082da:	429a      	cmp	r2, r3
 80082dc:	d20b      	bcs.n	80082f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80082de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e2:	f383 8811 	msr	BASEPRI, r3
 80082e6:	f3bf 8f6f 	isb	sy
 80082ea:	f3bf 8f4f 	dsb	sy
 80082ee:	607b      	str	r3, [r7, #4]
}
 80082f0:	bf00      	nop
 80082f2:	bf00      	nop
 80082f4:	e7fd      	b.n	80082f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082f6:	4b0f      	ldr	r3, [pc, #60]	@ (8008334 <vPortValidateInterruptPriority+0x7c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80082fe:	4b0e      	ldr	r3, [pc, #56]	@ (8008338 <vPortValidateInterruptPriority+0x80>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	429a      	cmp	r2, r3
 8008304:	d90b      	bls.n	800831e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800830a:	f383 8811 	msr	BASEPRI, r3
 800830e:	f3bf 8f6f 	isb	sy
 8008312:	f3bf 8f4f 	dsb	sy
 8008316:	603b      	str	r3, [r7, #0]
}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	e7fd      	b.n	800831a <vPortValidateInterruptPriority+0x62>
	}
 800831e:	bf00      	nop
 8008320:	3714      	adds	r7, #20
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	e000e3f0 	.word	0xe000e3f0
 8008330:	2000101c 	.word	0x2000101c
 8008334:	e000ed0c 	.word	0xe000ed0c
 8008338:	20001020 	.word	0x20001020

0800833c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b08a      	sub	sp, #40	@ 0x28
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008344:	2300      	movs	r3, #0
 8008346:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008348:	f7fe fcc0 	bl	8006ccc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800834c:	4b5c      	ldr	r3, [pc, #368]	@ (80084c0 <pvPortMalloc+0x184>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008354:	f000 f924 	bl	80085a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008358:	4b5a      	ldr	r3, [pc, #360]	@ (80084c4 <pvPortMalloc+0x188>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4013      	ands	r3, r2
 8008360:	2b00      	cmp	r3, #0
 8008362:	f040 8095 	bne.w	8008490 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d01e      	beq.n	80083aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800836c:	2208      	movs	r2, #8
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4413      	add	r3, r2
 8008372:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f003 0307 	and.w	r3, r3, #7
 800837a:	2b00      	cmp	r3, #0
 800837c:	d015      	beq.n	80083aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f023 0307 	bic.w	r3, r3, #7
 8008384:	3308      	adds	r3, #8
 8008386:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f003 0307 	and.w	r3, r3, #7
 800838e:	2b00      	cmp	r3, #0
 8008390:	d00b      	beq.n	80083aa <pvPortMalloc+0x6e>
	__asm volatile
 8008392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	617b      	str	r3, [r7, #20]
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop
 80083a8:	e7fd      	b.n	80083a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d06f      	beq.n	8008490 <pvPortMalloc+0x154>
 80083b0:	4b45      	ldr	r3, [pc, #276]	@ (80084c8 <pvPortMalloc+0x18c>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d86a      	bhi.n	8008490 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083ba:	4b44      	ldr	r3, [pc, #272]	@ (80084cc <pvPortMalloc+0x190>)
 80083bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083be:	4b43      	ldr	r3, [pc, #268]	@ (80084cc <pvPortMalloc+0x190>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083c4:	e004      	b.n	80083d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80083c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d903      	bls.n	80083e2 <pvPortMalloc+0xa6>
 80083da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d1f1      	bne.n	80083c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80083e2:	4b37      	ldr	r3, [pc, #220]	@ (80084c0 <pvPortMalloc+0x184>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d051      	beq.n	8008490 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2208      	movs	r2, #8
 80083f2:	4413      	add	r3, r2
 80083f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008400:	685a      	ldr	r2, [r3, #4]
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	1ad2      	subs	r2, r2, r3
 8008406:	2308      	movs	r3, #8
 8008408:	005b      	lsls	r3, r3, #1
 800840a:	429a      	cmp	r2, r3
 800840c:	d920      	bls.n	8008450 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800840e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	4413      	add	r3, r2
 8008414:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	f003 0307 	and.w	r3, r3, #7
 800841c:	2b00      	cmp	r3, #0
 800841e:	d00b      	beq.n	8008438 <pvPortMalloc+0xfc>
	__asm volatile
 8008420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008424:	f383 8811 	msr	BASEPRI, r3
 8008428:	f3bf 8f6f 	isb	sy
 800842c:	f3bf 8f4f 	dsb	sy
 8008430:	613b      	str	r3, [r7, #16]
}
 8008432:	bf00      	nop
 8008434:	bf00      	nop
 8008436:	e7fd      	b.n	8008434 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	1ad2      	subs	r2, r2, r3
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800844a:	69b8      	ldr	r0, [r7, #24]
 800844c:	f000 f90a 	bl	8008664 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008450:	4b1d      	ldr	r3, [pc, #116]	@ (80084c8 <pvPortMalloc+0x18c>)
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	1ad3      	subs	r3, r2, r3
 800845a:	4a1b      	ldr	r2, [pc, #108]	@ (80084c8 <pvPortMalloc+0x18c>)
 800845c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800845e:	4b1a      	ldr	r3, [pc, #104]	@ (80084c8 <pvPortMalloc+0x18c>)
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	4b1b      	ldr	r3, [pc, #108]	@ (80084d0 <pvPortMalloc+0x194>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	429a      	cmp	r2, r3
 8008468:	d203      	bcs.n	8008472 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800846a:	4b17      	ldr	r3, [pc, #92]	@ (80084c8 <pvPortMalloc+0x18c>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a18      	ldr	r2, [pc, #96]	@ (80084d0 <pvPortMalloc+0x194>)
 8008470:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008474:	685a      	ldr	r2, [r3, #4]
 8008476:	4b13      	ldr	r3, [pc, #76]	@ (80084c4 <pvPortMalloc+0x188>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	431a      	orrs	r2, r3
 800847c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008482:	2200      	movs	r2, #0
 8008484:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008486:	4b13      	ldr	r3, [pc, #76]	@ (80084d4 <pvPortMalloc+0x198>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	3301      	adds	r3, #1
 800848c:	4a11      	ldr	r2, [pc, #68]	@ (80084d4 <pvPortMalloc+0x198>)
 800848e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008490:	f7fe fc2a 	bl	8006ce8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008494:	69fb      	ldr	r3, [r7, #28]
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00b      	beq.n	80084b6 <pvPortMalloc+0x17a>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	60fb      	str	r3, [r7, #12]
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	e7fd      	b.n	80084b2 <pvPortMalloc+0x176>
	return pvReturn;
 80084b6:	69fb      	ldr	r3, [r7, #28]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3728      	adds	r7, #40	@ 0x28
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	20001be4 	.word	0x20001be4
 80084c4:	20001bf8 	.word	0x20001bf8
 80084c8:	20001be8 	.word	0x20001be8
 80084cc:	20001bdc 	.word	0x20001bdc
 80084d0:	20001bec 	.word	0x20001bec
 80084d4:	20001bf0 	.word	0x20001bf0

080084d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d04f      	beq.n	800858a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80084ea:	2308      	movs	r3, #8
 80084ec:	425b      	negs	r3, r3
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	4413      	add	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	685a      	ldr	r2, [r3, #4]
 80084fc:	4b25      	ldr	r3, [pc, #148]	@ (8008594 <vPortFree+0xbc>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4013      	ands	r3, r2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d10b      	bne.n	800851e <vPortFree+0x46>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850a:	f383 8811 	msr	BASEPRI, r3
 800850e:	f3bf 8f6f 	isb	sy
 8008512:	f3bf 8f4f 	dsb	sy
 8008516:	60fb      	str	r3, [r7, #12]
}
 8008518:	bf00      	nop
 800851a:	bf00      	nop
 800851c:	e7fd      	b.n	800851a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00b      	beq.n	800853e <vPortFree+0x66>
	__asm volatile
 8008526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	60bb      	str	r3, [r7, #8]
}
 8008538:	bf00      	nop
 800853a:	bf00      	nop
 800853c:	e7fd      	b.n	800853a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800853e:	693b      	ldr	r3, [r7, #16]
 8008540:	685a      	ldr	r2, [r3, #4]
 8008542:	4b14      	ldr	r3, [pc, #80]	@ (8008594 <vPortFree+0xbc>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4013      	ands	r3, r2
 8008548:	2b00      	cmp	r3, #0
 800854a:	d01e      	beq.n	800858a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d11a      	bne.n	800858a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	4b0e      	ldr	r3, [pc, #56]	@ (8008594 <vPortFree+0xbc>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	43db      	mvns	r3, r3
 800855e:	401a      	ands	r2, r3
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008564:	f7fe fbb2 	bl	8006ccc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008568:	693b      	ldr	r3, [r7, #16]
 800856a:	685a      	ldr	r2, [r3, #4]
 800856c:	4b0a      	ldr	r3, [pc, #40]	@ (8008598 <vPortFree+0xc0>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4413      	add	r3, r2
 8008572:	4a09      	ldr	r2, [pc, #36]	@ (8008598 <vPortFree+0xc0>)
 8008574:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008576:	6938      	ldr	r0, [r7, #16]
 8008578:	f000 f874 	bl	8008664 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800857c:	4b07      	ldr	r3, [pc, #28]	@ (800859c <vPortFree+0xc4>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	3301      	adds	r3, #1
 8008582:	4a06      	ldr	r2, [pc, #24]	@ (800859c <vPortFree+0xc4>)
 8008584:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008586:	f7fe fbaf 	bl	8006ce8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800858a:	bf00      	nop
 800858c:	3718      	adds	r7, #24
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	20001bf8 	.word	0x20001bf8
 8008598:	20001be8 	.word	0x20001be8
 800859c:	20001bf4 	.word	0x20001bf4

080085a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085a6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80085aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085ac:	4b27      	ldr	r3, [pc, #156]	@ (800864c <prvHeapInit+0xac>)
 80085ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00c      	beq.n	80085d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	3307      	adds	r3, #7
 80085be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f023 0307 	bic.w	r3, r3, #7
 80085c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085c8:	68ba      	ldr	r2, [r7, #8]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	1ad3      	subs	r3, r2, r3
 80085ce:	4a1f      	ldr	r2, [pc, #124]	@ (800864c <prvHeapInit+0xac>)
 80085d0:	4413      	add	r3, r2
 80085d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085d8:	4a1d      	ldr	r2, [pc, #116]	@ (8008650 <prvHeapInit+0xb0>)
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085de:	4b1c      	ldr	r3, [pc, #112]	@ (8008650 <prvHeapInit+0xb0>)
 80085e0:	2200      	movs	r2, #0
 80085e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	4413      	add	r3, r2
 80085ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80085ec:	2208      	movs	r2, #8
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	1a9b      	subs	r3, r3, r2
 80085f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0307 	bic.w	r3, r3, #7
 80085fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	4a15      	ldr	r2, [pc, #84]	@ (8008654 <prvHeapInit+0xb4>)
 8008600:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008602:	4b14      	ldr	r3, [pc, #80]	@ (8008654 <prvHeapInit+0xb4>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2200      	movs	r2, #0
 8008608:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800860a:	4b12      	ldr	r3, [pc, #72]	@ (8008654 <prvHeapInit+0xb4>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	1ad2      	subs	r2, r2, r3
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008620:	4b0c      	ldr	r3, [pc, #48]	@ (8008654 <prvHeapInit+0xb4>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	4a0a      	ldr	r2, [pc, #40]	@ (8008658 <prvHeapInit+0xb8>)
 800862e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	685b      	ldr	r3, [r3, #4]
 8008634:	4a09      	ldr	r2, [pc, #36]	@ (800865c <prvHeapInit+0xbc>)
 8008636:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008638:	4b09      	ldr	r3, [pc, #36]	@ (8008660 <prvHeapInit+0xc0>)
 800863a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800863e:	601a      	str	r2, [r3, #0]
}
 8008640:	bf00      	nop
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr
 800864c:	20001024 	.word	0x20001024
 8008650:	20001bdc 	.word	0x20001bdc
 8008654:	20001be4 	.word	0x20001be4
 8008658:	20001bec 	.word	0x20001bec
 800865c:	20001be8 	.word	0x20001be8
 8008660:	20001bf8 	.word	0x20001bf8

08008664 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800866c:	4b28      	ldr	r3, [pc, #160]	@ (8008710 <prvInsertBlockIntoFreeList+0xac>)
 800866e:	60fb      	str	r3, [r7, #12]
 8008670:	e002      	b.n	8008678 <prvInsertBlockIntoFreeList+0x14>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	429a      	cmp	r2, r3
 8008680:	d8f7      	bhi.n	8008672 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	4413      	add	r3, r2
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	429a      	cmp	r2, r3
 8008692:	d108      	bne.n	80086a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	441a      	add	r2, r3
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	441a      	add	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	429a      	cmp	r2, r3
 80086b8:	d118      	bne.n	80086ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	681a      	ldr	r2, [r3, #0]
 80086be:	4b15      	ldr	r3, [pc, #84]	@ (8008714 <prvInsertBlockIntoFreeList+0xb0>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d00d      	beq.n	80086e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	685a      	ldr	r2, [r3, #4]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	441a      	add	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	e008      	b.n	80086f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086e2:	4b0c      	ldr	r3, [pc, #48]	@ (8008714 <prvInsertBlockIntoFreeList+0xb0>)
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	601a      	str	r2, [r3, #0]
 80086ea:	e003      	b.n	80086f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	d002      	beq.n	8008702 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	687a      	ldr	r2, [r7, #4]
 8008700:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008702:	bf00      	nop
 8008704:	3714      	adds	r7, #20
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	20001bdc 	.word	0x20001bdc
 8008714:	20001be4 	.word	0x20001be4

08008718 <memset>:
 8008718:	4402      	add	r2, r0
 800871a:	4603      	mov	r3, r0
 800871c:	4293      	cmp	r3, r2
 800871e:	d100      	bne.n	8008722 <memset+0xa>
 8008720:	4770      	bx	lr
 8008722:	f803 1b01 	strb.w	r1, [r3], #1
 8008726:	e7f9      	b.n	800871c <memset+0x4>

08008728 <__libc_init_array>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	4d0d      	ldr	r5, [pc, #52]	@ (8008760 <__libc_init_array+0x38>)
 800872c:	4c0d      	ldr	r4, [pc, #52]	@ (8008764 <__libc_init_array+0x3c>)
 800872e:	1b64      	subs	r4, r4, r5
 8008730:	10a4      	asrs	r4, r4, #2
 8008732:	2600      	movs	r6, #0
 8008734:	42a6      	cmp	r6, r4
 8008736:	d109      	bne.n	800874c <__libc_init_array+0x24>
 8008738:	4d0b      	ldr	r5, [pc, #44]	@ (8008768 <__libc_init_array+0x40>)
 800873a:	4c0c      	ldr	r4, [pc, #48]	@ (800876c <__libc_init_array+0x44>)
 800873c:	f000 f826 	bl	800878c <_init>
 8008740:	1b64      	subs	r4, r4, r5
 8008742:	10a4      	asrs	r4, r4, #2
 8008744:	2600      	movs	r6, #0
 8008746:	42a6      	cmp	r6, r4
 8008748:	d105      	bne.n	8008756 <__libc_init_array+0x2e>
 800874a:	bd70      	pop	{r4, r5, r6, pc}
 800874c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008750:	4798      	blx	r3
 8008752:	3601      	adds	r6, #1
 8008754:	e7ee      	b.n	8008734 <__libc_init_array+0xc>
 8008756:	f855 3b04 	ldr.w	r3, [r5], #4
 800875a:	4798      	blx	r3
 800875c:	3601      	adds	r6, #1
 800875e:	e7f2      	b.n	8008746 <__libc_init_array+0x1e>
 8008760:	08008948 	.word	0x08008948
 8008764:	08008948 	.word	0x08008948
 8008768:	08008948 	.word	0x08008948
 800876c:	0800894c 	.word	0x0800894c

08008770 <memcpy>:
 8008770:	440a      	add	r2, r1
 8008772:	4291      	cmp	r1, r2
 8008774:	f100 33ff 	add.w	r3, r0, #4294967295
 8008778:	d100      	bne.n	800877c <memcpy+0xc>
 800877a:	4770      	bx	lr
 800877c:	b510      	push	{r4, lr}
 800877e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008786:	4291      	cmp	r1, r2
 8008788:	d1f9      	bne.n	800877e <memcpy+0xe>
 800878a:	bd10      	pop	{r4, pc}

0800878c <_init>:
 800878c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878e:	bf00      	nop
 8008790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008792:	bc08      	pop	{r3}
 8008794:	469e      	mov	lr, r3
 8008796:	4770      	bx	lr

08008798 <_fini>:
 8008798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800879a:	bf00      	nop
 800879c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879e:	bc08      	pop	{r3}
 80087a0:	469e      	mov	lr, r3
 80087a2:	4770      	bx	lr

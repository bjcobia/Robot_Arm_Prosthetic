
Robot_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087d4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  08008964  08008964  00009964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b00  08008b00  0000a04c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008b00  08008b00  00009b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b08  08008b08  0000a04c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b08  08008b08  00009b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b0c  08008b0c  00009b0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08008b10  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001cb4  2000004c  08008b5c  0000a04c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d00  08008b5c  0000ad00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a65d  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b7  00000000  00000000  000246d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  00027c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011f1  00000000  00000000  00029390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003bed  00000000  00000000  0002a581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019298  00000000  00000000  0002e16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcf76  00000000  00000000  00047406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014437c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000618c  00000000  00000000  001443c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0014a54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000004c 	.word	0x2000004c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800894c 	.word	0x0800894c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000050 	.word	0x20000050
 80001cc:	0800894c 	.word	0x0800894c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b988 	b.w	8000508 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	468e      	mov	lr, r1
 8000218:	4604      	mov	r4, r0
 800021a:	4688      	mov	r8, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4617      	mov	r7, r2
 8000224:	d962      	bls.n	80002ec <__udivmoddi4+0xdc>
 8000226:	fab2 f682 	clz	r6, r2
 800022a:	b14e      	cbz	r6, 8000240 <__udivmoddi4+0x30>
 800022c:	f1c6 0320 	rsb	r3, r6, #32
 8000230:	fa01 f806 	lsl.w	r8, r1, r6
 8000234:	fa20 f303 	lsr.w	r3, r0, r3
 8000238:	40b7      	lsls	r7, r6
 800023a:	ea43 0808 	orr.w	r8, r3, r8
 800023e:	40b4      	lsls	r4, r6
 8000240:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000244:	fa1f fc87 	uxth.w	ip, r7
 8000248:	fbb8 f1fe 	udiv	r1, r8, lr
 800024c:	0c23      	lsrs	r3, r4, #16
 800024e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000252:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000256:	fb01 f20c 	mul.w	r2, r1, ip
 800025a:	429a      	cmp	r2, r3
 800025c:	d909      	bls.n	8000272 <__udivmoddi4+0x62>
 800025e:	18fb      	adds	r3, r7, r3
 8000260:	f101 30ff 	add.w	r0, r1, #4294967295
 8000264:	f080 80ea 	bcs.w	800043c <__udivmoddi4+0x22c>
 8000268:	429a      	cmp	r2, r3
 800026a:	f240 80e7 	bls.w	800043c <__udivmoddi4+0x22c>
 800026e:	3902      	subs	r1, #2
 8000270:	443b      	add	r3, r7
 8000272:	1a9a      	subs	r2, r3, r2
 8000274:	b2a3      	uxth	r3, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb00 fc0c 	mul.w	ip, r0, ip
 8000286:	459c      	cmp	ip, r3
 8000288:	d909      	bls.n	800029e <__udivmoddi4+0x8e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000290:	f080 80d6 	bcs.w	8000440 <__udivmoddi4+0x230>
 8000294:	459c      	cmp	ip, r3
 8000296:	f240 80d3 	bls.w	8000440 <__udivmoddi4+0x230>
 800029a:	443b      	add	r3, r7
 800029c:	3802      	subs	r0, #2
 800029e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a2:	eba3 030c 	sub.w	r3, r3, ip
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11d      	cbz	r5, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40f3      	lsrs	r3, r6
 80002ac:	2200      	movs	r2, #0
 80002ae:	e9c5 3200 	strd	r3, r2, [r5]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d905      	bls.n	80002c6 <__udivmoddi4+0xb6>
 80002ba:	b10d      	cbz	r5, 80002c0 <__udivmoddi4+0xb0>
 80002bc:	e9c5 0100 	strd	r0, r1, [r5]
 80002c0:	2100      	movs	r1, #0
 80002c2:	4608      	mov	r0, r1
 80002c4:	e7f5      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002c6:	fab3 f183 	clz	r1, r3
 80002ca:	2900      	cmp	r1, #0
 80002cc:	d146      	bne.n	800035c <__udivmoddi4+0x14c>
 80002ce:	4573      	cmp	r3, lr
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xc8>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 8105 	bhi.w	80004e2 <__udivmoddi4+0x2d2>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb6e 0203 	sbc.w	r2, lr, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4690      	mov	r8, r2
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e5      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002e6:	e9c5 4800 	strd	r4, r8, [r5]
 80002ea:	e7e2      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f000 8090 	beq.w	8000412 <__udivmoddi4+0x202>
 80002f2:	fab2 f682 	clz	r6, r2
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	f040 80a4 	bne.w	8000444 <__udivmoddi4+0x234>
 80002fc:	1a8a      	subs	r2, r1, r2
 80002fe:	0c03      	lsrs	r3, r0, #16
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	b280      	uxth	r0, r0
 8000306:	b2bc      	uxth	r4, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb2 fcfe 	udiv	ip, r2, lr
 800030e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000316:	fb04 f20c 	mul.w	r2, r4, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d907      	bls.n	800032e <__udivmoddi4+0x11e>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000324:	d202      	bcs.n	800032c <__udivmoddi4+0x11c>
 8000326:	429a      	cmp	r2, r3
 8000328:	f200 80e0 	bhi.w	80004ec <__udivmoddi4+0x2dc>
 800032c:	46c4      	mov	ip, r8
 800032e:	1a9b      	subs	r3, r3, r2
 8000330:	fbb3 f2fe 	udiv	r2, r3, lr
 8000334:	fb0e 3312 	mls	r3, lr, r2, r3
 8000338:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800033c:	fb02 f404 	mul.w	r4, r2, r4
 8000340:	429c      	cmp	r4, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x144>
 8000344:	18fb      	adds	r3, r7, r3
 8000346:	f102 30ff 	add.w	r0, r2, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x142>
 800034c:	429c      	cmp	r4, r3
 800034e:	f200 80ca 	bhi.w	80004e6 <__udivmoddi4+0x2d6>
 8000352:	4602      	mov	r2, r0
 8000354:	1b1b      	subs	r3, r3, r4
 8000356:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0x98>
 800035c:	f1c1 0620 	rsb	r6, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 f706 	lsr.w	r7, r2, r6
 8000366:	431f      	orrs	r7, r3
 8000368:	fa0e f401 	lsl.w	r4, lr, r1
 800036c:	fa20 f306 	lsr.w	r3, r0, r6
 8000370:	fa2e fe06 	lsr.w	lr, lr, r6
 8000374:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	fa1f fc87 	uxth.w	ip, r7
 8000382:	fbbe f0f9 	udiv	r0, lr, r9
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	fb09 ee10 	mls	lr, r9, r0, lr
 800038c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000390:	fb00 fe0c 	mul.w	lr, r0, ip
 8000394:	45a6      	cmp	lr, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x1a0>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 3aff 	add.w	sl, r0, #4294967295
 80003a2:	f080 809c 	bcs.w	80004de <__udivmoddi4+0x2ce>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f240 8099 	bls.w	80004de <__udivmoddi4+0x2ce>
 80003ac:	3802      	subs	r0, #2
 80003ae:	443c      	add	r4, r7
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	fa1f fe83 	uxth.w	lr, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c8:	45a4      	cmp	ip, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1ce>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80003d2:	f080 8082 	bcs.w	80004da <__udivmoddi4+0x2ca>
 80003d6:	45a4      	cmp	ip, r4
 80003d8:	d97f      	bls.n	80004da <__udivmoddi4+0x2ca>
 80003da:	3b02      	subs	r3, #2
 80003dc:	443c      	add	r4, r7
 80003de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003ea:	4564      	cmp	r4, ip
 80003ec:	4673      	mov	r3, lr
 80003ee:	46e1      	mov	r9, ip
 80003f0:	d362      	bcc.n	80004b8 <__udivmoddi4+0x2a8>
 80003f2:	d05f      	beq.n	80004b4 <__udivmoddi4+0x2a4>
 80003f4:	b15d      	cbz	r5, 800040e <__udivmoddi4+0x1fe>
 80003f6:	ebb8 0203 	subs.w	r2, r8, r3
 80003fa:	eb64 0409 	sbc.w	r4, r4, r9
 80003fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000402:	fa22 f301 	lsr.w	r3, r2, r1
 8000406:	431e      	orrs	r6, r3
 8000408:	40cc      	lsrs	r4, r1
 800040a:	e9c5 6400 	strd	r6, r4, [r5]
 800040e:	2100      	movs	r1, #0
 8000410:	e74f      	b.n	80002b2 <__udivmoddi4+0xa2>
 8000412:	fbb1 fcf2 	udiv	ip, r1, r2
 8000416:	0c01      	lsrs	r1, r0, #16
 8000418:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800041c:	b280      	uxth	r0, r0
 800041e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000422:	463b      	mov	r3, r7
 8000424:	4638      	mov	r0, r7
 8000426:	463c      	mov	r4, r7
 8000428:	46b8      	mov	r8, r7
 800042a:	46be      	mov	lr, r7
 800042c:	2620      	movs	r6, #32
 800042e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000432:	eba2 0208 	sub.w	r2, r2, r8
 8000436:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800043a:	e766      	b.n	800030a <__udivmoddi4+0xfa>
 800043c:	4601      	mov	r1, r0
 800043e:	e718      	b.n	8000272 <__udivmoddi4+0x62>
 8000440:	4610      	mov	r0, r2
 8000442:	e72c      	b.n	800029e <__udivmoddi4+0x8e>
 8000444:	f1c6 0220 	rsb	r2, r6, #32
 8000448:	fa2e f302 	lsr.w	r3, lr, r2
 800044c:	40b7      	lsls	r7, r6
 800044e:	40b1      	lsls	r1, r6
 8000450:	fa20 f202 	lsr.w	r2, r0, r2
 8000454:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000458:	430a      	orrs	r2, r1
 800045a:	fbb3 f8fe 	udiv	r8, r3, lr
 800045e:	b2bc      	uxth	r4, r7
 8000460:	fb0e 3318 	mls	r3, lr, r8, r3
 8000464:	0c11      	lsrs	r1, r2, #16
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb08 f904 	mul.w	r9, r8, r4
 800046e:	40b0      	lsls	r0, r6
 8000470:	4589      	cmp	r9, r1
 8000472:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000476:	b280      	uxth	r0, r0
 8000478:	d93e      	bls.n	80004f8 <__udivmoddi4+0x2e8>
 800047a:	1879      	adds	r1, r7, r1
 800047c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000480:	d201      	bcs.n	8000486 <__udivmoddi4+0x276>
 8000482:	4589      	cmp	r9, r1
 8000484:	d81f      	bhi.n	80004c6 <__udivmoddi4+0x2b6>
 8000486:	eba1 0109 	sub.w	r1, r1, r9
 800048a:	fbb1 f9fe 	udiv	r9, r1, lr
 800048e:	fb09 f804 	mul.w	r8, r9, r4
 8000492:	fb0e 1119 	mls	r1, lr, r9, r1
 8000496:	b292      	uxth	r2, r2
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	4542      	cmp	r2, r8
 800049e:	d229      	bcs.n	80004f4 <__udivmoddi4+0x2e4>
 80004a0:	18ba      	adds	r2, r7, r2
 80004a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004a6:	d2c4      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d2c2      	bcs.n	8000432 <__udivmoddi4+0x222>
 80004ac:	f1a9 0102 	sub.w	r1, r9, #2
 80004b0:	443a      	add	r2, r7
 80004b2:	e7be      	b.n	8000432 <__udivmoddi4+0x222>
 80004b4:	45f0      	cmp	r8, lr
 80004b6:	d29d      	bcs.n	80003f4 <__udivmoddi4+0x1e4>
 80004b8:	ebbe 0302 	subs.w	r3, lr, r2
 80004bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004c0:	3801      	subs	r0, #1
 80004c2:	46e1      	mov	r9, ip
 80004c4:	e796      	b.n	80003f4 <__udivmoddi4+0x1e4>
 80004c6:	eba7 0909 	sub.w	r9, r7, r9
 80004ca:	4449      	add	r1, r9
 80004cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d4:	fb09 f804 	mul.w	r8, r9, r4
 80004d8:	e7db      	b.n	8000492 <__udivmoddi4+0x282>
 80004da:	4673      	mov	r3, lr
 80004dc:	e77f      	b.n	80003de <__udivmoddi4+0x1ce>
 80004de:	4650      	mov	r0, sl
 80004e0:	e766      	b.n	80003b0 <__udivmoddi4+0x1a0>
 80004e2:	4608      	mov	r0, r1
 80004e4:	e6fd      	b.n	80002e2 <__udivmoddi4+0xd2>
 80004e6:	443b      	add	r3, r7
 80004e8:	3a02      	subs	r2, #2
 80004ea:	e733      	b.n	8000354 <__udivmoddi4+0x144>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	443b      	add	r3, r7
 80004f2:	e71c      	b.n	800032e <__udivmoddi4+0x11e>
 80004f4:	4649      	mov	r1, r9
 80004f6:	e79c      	b.n	8000432 <__udivmoddi4+0x222>
 80004f8:	eba1 0109 	sub.w	r1, r1, r9
 80004fc:	46c4      	mov	ip, r8
 80004fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000502:	fb09 f804 	mul.w	r8, r9, r4
 8000506:	e7c4      	b.n	8000492 <__udivmoddi4+0x282>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000510:	f001 fcae 	bl	8001e70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000514:	f000 f88e 	bl	8000634 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000518:	f000 fb3c 	bl	8000b94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800051c:	f000 fb0a 	bl	8000b34 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000520:	f000 f96a 	bl	80007f8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000524:	f000 f9c2 	bl	80008ac <MX_TIM3_Init>
  MX_TIM1_Init();
 8000528:	f000 f8d6 	bl	80006d8 <MX_TIM1_Init>
  MX_TIM4_Init();
 800052c:	f000 fa18 	bl	8000960 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000530:	f000 fa70 	bl	8000a14 <MX_TIM8_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f005 face 	bl	8005ad4 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Index_Finger */
  Index_FingerHandle = osTimerNew(Index, osTimerOnce, NULL, &Index_Finger_attributes);
 8000538:	4b29      	ldr	r3, [pc, #164]	@ (80005e0 <main+0xd4>)
 800053a:	2200      	movs	r2, #0
 800053c:	2100      	movs	r1, #0
 800053e:	4829      	ldr	r0, [pc, #164]	@ (80005e4 <main+0xd8>)
 8000540:	f005 fbd4 	bl	8005cec <osTimerNew>
 8000544:	4603      	mov	r3, r0
 8000546:	4a28      	ldr	r2, [pc, #160]	@ (80005e8 <main+0xdc>)
 8000548:	6013      	str	r3, [r2, #0]

  /* creation of Thumb_Finger */
  Thumb_FingerHandle = osTimerNew(Thumb, osTimerPeriodic, NULL, &Thumb_Finger_attributes);
 800054a:	4b28      	ldr	r3, [pc, #160]	@ (80005ec <main+0xe0>)
 800054c:	2200      	movs	r2, #0
 800054e:	2101      	movs	r1, #1
 8000550:	4827      	ldr	r0, [pc, #156]	@ (80005f0 <main+0xe4>)
 8000552:	f005 fbcb 	bl	8005cec <osTimerNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a26      	ldr	r2, [pc, #152]	@ (80005f4 <main+0xe8>)
 800055a:	6013      	str	r3, [r2, #0]

  /* creation of Middle_Finger */
  Middle_FingerHandle = osTimerNew(Middle, osTimerPeriodic, NULL, &Middle_Finger_attributes);
 800055c:	4b26      	ldr	r3, [pc, #152]	@ (80005f8 <main+0xec>)
 800055e:	2200      	movs	r2, #0
 8000560:	2101      	movs	r1, #1
 8000562:	4826      	ldr	r0, [pc, #152]	@ (80005fc <main+0xf0>)
 8000564:	f005 fbc2 	bl	8005cec <osTimerNew>
 8000568:	4603      	mov	r3, r0
 800056a:	4a25      	ldr	r2, [pc, #148]	@ (8000600 <main+0xf4>)
 800056c:	6013      	str	r3, [r2, #0]

  /* creation of Ring_Finger */
  Ring_FingerHandle = osTimerNew(Ring, osTimerPeriodic, NULL, &Ring_Finger_attributes);
 800056e:	4b25      	ldr	r3, [pc, #148]	@ (8000604 <main+0xf8>)
 8000570:	2200      	movs	r2, #0
 8000572:	2101      	movs	r1, #1
 8000574:	4824      	ldr	r0, [pc, #144]	@ (8000608 <main+0xfc>)
 8000576:	f005 fbb9 	bl	8005cec <osTimerNew>
 800057a:	4603      	mov	r3, r0
 800057c:	4a23      	ldr	r2, [pc, #140]	@ (800060c <main+0x100>)
 800057e:	6013      	str	r3, [r2, #0]

  /* creation of Pinky_Finger */
  Pinky_FingerHandle = osTimerNew(Pinky, osTimerPeriodic, NULL, &Pinky_Finger_attributes);
 8000580:	4b23      	ldr	r3, [pc, #140]	@ (8000610 <main+0x104>)
 8000582:	2200      	movs	r2, #0
 8000584:	2101      	movs	r1, #1
 8000586:	4823      	ldr	r0, [pc, #140]	@ (8000614 <main+0x108>)
 8000588:	f005 fbb0 	bl	8005cec <osTimerNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a22      	ldr	r2, [pc, #136]	@ (8000618 <main+0x10c>)
 8000590:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000592:	4a22      	ldr	r2, [pc, #136]	@ (800061c <main+0x110>)
 8000594:	2100      	movs	r1, #0
 8000596:	4822      	ldr	r0, [pc, #136]	@ (8000620 <main+0x114>)
 8000598:	f005 fae6 	bl	8005b68 <osThreadNew>
 800059c:	4603      	mov	r3, r0
 800059e:	4a21      	ldr	r2, [pc, #132]	@ (8000624 <main+0x118>)
 80005a0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005a2:	f005 fabb 	bl	8005b1c <osKernelStart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (IsButtonPressed() && messageReady)
 80005a6:	f000 fb5b 	bl	8000c60 <IsButtonPressed>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d0fa      	beq.n	80005a6 <main+0x9a>
 80005b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000628 <main+0x11c>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d0f6      	beq.n	80005a6 <main+0x9a>
	  {
		/* Process the message when button is pressed and message is available */
		ProcessReceivedMessage(message);
 80005b8:	481c      	ldr	r0, [pc, #112]	@ (800062c <main+0x120>)
 80005ba:	f000 fb63 	bl	8000c84 <ProcessReceivedMessage>

		/* Reset message buffer */
		messageIndex = 0;
 80005be:	4b1c      	ldr	r3, [pc, #112]	@ (8000630 <main+0x124>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	801a      	strh	r2, [r3, #0]
		messageReady = 0;
 80005c4:	4b18      	ldr	r3, [pc, #96]	@ (8000628 <main+0x11c>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	701a      	strb	r2, [r3, #0]
		memset(message, 0, sizeof(message));
 80005ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005ce:	2100      	movs	r1, #0
 80005d0:	4816      	ldr	r0, [pc, #88]	@ (800062c <main+0x120>)
 80005d2:	f008 f981 	bl	80088d8 <memset>

		/* Debounce */
		HAL_Delay(200);
 80005d6:	20c8      	movs	r0, #200	@ 0xc8
 80005d8:	f001 fc8a 	bl	8001ef0 <HAL_Delay>
	if (IsButtonPressed() && messageReady)
 80005dc:	e7e3      	b.n	80005a6 <main+0x9a>
 80005de:	bf00      	nop
 80005e0:	08008a68 	.word	0x08008a68
 80005e4:	08001899 	.word	0x08001899
 80005e8:	20000270 	.word	0x20000270
 80005ec:	08008a78 	.word	0x08008a78
 80005f0:	080018ad 	.word	0x080018ad
 80005f4:	20000274 	.word	0x20000274
 80005f8:	08008a88 	.word	0x08008a88
 80005fc:	080018c1 	.word	0x080018c1
 8000600:	20000278 	.word	0x20000278
 8000604:	08008a98 	.word	0x08008a98
 8000608:	080018d5 	.word	0x080018d5
 800060c:	2000027c 	.word	0x2000027c
 8000610:	08008aa8 	.word	0x08008aa8
 8000614:	080018e9 	.word	0x080018e9
 8000618:	20000280 	.word	0x20000280
 800061c:	08008a44 	.word	0x08008a44
 8000620:	0800180d 	.word	0x0800180d
 8000624:	2000026c 	.word	0x2000026c
 8000628:	20000386 	.word	0x20000386
 800062c:	20000284 	.word	0x20000284
 8000630:	20000384 	.word	0x20000384

08000634 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b096      	sub	sp, #88	@ 0x58
 8000638:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	2244      	movs	r2, #68	@ 0x44
 8000640:	2100      	movs	r1, #0
 8000642:	4618      	mov	r0, r3
 8000644:	f008 f948 	bl	80088d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	463b      	mov	r3, r7
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000656:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800065a:	f001 ff37 	bl	80024cc <HAL_PWREx_ControlVoltageScaling>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000664:	f001 f95c 	bl	8001920 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000668:	2302      	movs	r3, #2
 800066a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000670:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000672:	2310      	movs	r3, #16
 8000674:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000676:	2302      	movs	r3, #2
 8000678:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800067a:	2302      	movs	r3, #2
 800067c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800067e:	2301      	movs	r3, #1
 8000680:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000682:	230a      	movs	r3, #10
 8000684:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000686:	2307      	movs	r3, #7
 8000688:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800068a:	2302      	movs	r3, #2
 800068c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068e:	2302      	movs	r3, #2
 8000690:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000692:	f107 0314 	add.w	r3, r7, #20
 8000696:	4618      	mov	r0, r3
 8000698:	f001 ff6e 	bl	8002578 <HAL_RCC_OscConfig>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006a2:	f001 f93d 	bl	8001920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a6:	230f      	movs	r3, #15
 80006a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006aa:	2303      	movs	r3, #3
 80006ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	2104      	movs	r1, #4
 80006be:	4618      	mov	r0, r3
 80006c0:	f002 fb36 	bl	8002d30 <HAL_RCC_ClockConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ca:	f001 f929 	bl	8001920 <Error_Handler>
  }
}
 80006ce:	bf00      	nop
 80006d0:	3758      	adds	r7, #88	@ 0x58
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b096      	sub	sp, #88	@ 0x58
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006de:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]
 80006e8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006ea:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
 80006f6:	60da      	str	r2, [r3, #12]
 80006f8:	611a      	str	r2, [r3, #16]
 80006fa:	615a      	str	r2, [r3, #20]
 80006fc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	222c      	movs	r2, #44	@ 0x2c
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f008 f8e7 	bl	80088d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800070a:	4b39      	ldr	r3, [pc, #228]	@ (80007f0 <MX_TIM1_Init+0x118>)
 800070c:	4a39      	ldr	r2, [pc, #228]	@ (80007f4 <MX_TIM1_Init+0x11c>)
 800070e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000710:	4b37      	ldr	r3, [pc, #220]	@ (80007f0 <MX_TIM1_Init+0x118>)
 8000712:	224f      	movs	r2, #79	@ 0x4f
 8000714:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000716:	4b36      	ldr	r3, [pc, #216]	@ (80007f0 <MX_TIM1_Init+0x118>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 800071c:	4b34      	ldr	r3, [pc, #208]	@ (80007f0 <MX_TIM1_Init+0x118>)
 800071e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000722:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000724:	4b32      	ldr	r3, [pc, #200]	@ (80007f0 <MX_TIM1_Init+0x118>)
 8000726:	2200      	movs	r2, #0
 8000728:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800072a:	4b31      	ldr	r3, [pc, #196]	@ (80007f0 <MX_TIM1_Init+0x118>)
 800072c:	2200      	movs	r2, #0
 800072e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000730:	4b2f      	ldr	r3, [pc, #188]	@ (80007f0 <MX_TIM1_Init+0x118>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000736:	482e      	ldr	r0, [pc, #184]	@ (80007f0 <MX_TIM1_Init+0x118>)
 8000738:	f003 fade 	bl	8003cf8 <HAL_TIM_PWM_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000742:	f001 f8ed 	bl	8001920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000746:	2300      	movs	r3, #0
 8000748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800074a:	2300      	movs	r3, #0
 800074c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000752:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000756:	4619      	mov	r1, r3
 8000758:	4825      	ldr	r0, [pc, #148]	@ (80007f0 <MX_TIM1_Init+0x118>)
 800075a:	f004 faa7 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d001      	beq.n	8000768 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000764:	f001 f8dc 	bl	8001920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000768:	2360      	movs	r3, #96	@ 0x60
 800076a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000774:	2300      	movs	r3, #0
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800077c:	2300      	movs	r3, #0
 800077e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000780:	2300      	movs	r3, #0
 8000782:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000784:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000788:	2200      	movs	r2, #0
 800078a:	4619      	mov	r1, r3
 800078c:	4818      	ldr	r0, [pc, #96]	@ (80007f0 <MX_TIM1_Init+0x118>)
 800078e:	f003 fdaf 	bl	80042f0 <HAL_TIM_PWM_ConfigChannel>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000798:	f001 f8c2 	bl	8001920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800079c:	2300      	movs	r3, #0
 800079e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80007b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80007b6:	2300      	movs	r3, #0
 80007b8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80007ba:	2300      	movs	r3, #0
 80007bc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80007be:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	4807      	ldr	r0, [pc, #28]	@ (80007f0 <MX_TIM1_Init+0x118>)
 80007d2:	f004 faf3 	bl	8004dbc <HAL_TIMEx_ConfigBreakDeadTime>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80007dc:	f001 f8a0 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <MX_TIM1_Init+0x118>)
 80007e2:	f001 f939 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 80007e6:	bf00      	nop
 80007e8:	3758      	adds	r7, #88	@ 0x58
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	20000068 	.word	0x20000068
 80007f4:	40012c00 	.word	0x40012c00

080007f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	@ 0x28
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fe:	f107 031c 	add.w	r3, r7, #28
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800080a:	463b      	mov	r3, r7
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
 8000818:	615a      	str	r2, [r3, #20]
 800081a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800081c:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <MX_TIM2_Init+0xb0>)
 800081e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000822:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000824:	4b20      	ldr	r3, [pc, #128]	@ (80008a8 <MX_TIM2_Init+0xb0>)
 8000826:	224f      	movs	r2, #79	@ 0x4f
 8000828:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800082a:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <MX_TIM2_Init+0xb0>)
 800082c:	2200      	movs	r2, #0
 800082e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000830:	4b1d      	ldr	r3, [pc, #116]	@ (80008a8 <MX_TIM2_Init+0xb0>)
 8000832:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000836:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000838:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <MX_TIM2_Init+0xb0>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800083e:	4b1a      	ldr	r3, [pc, #104]	@ (80008a8 <MX_TIM2_Init+0xb0>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000844:	4818      	ldr	r0, [pc, #96]	@ (80008a8 <MX_TIM2_Init+0xb0>)
 8000846:	f003 fa57 	bl	8003cf8 <HAL_TIM_PWM_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000850:	f001 f866 	bl	8001920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085c:	f107 031c 	add.w	r3, r7, #28
 8000860:	4619      	mov	r1, r3
 8000862:	4811      	ldr	r0, [pc, #68]	@ (80008a8 <MX_TIM2_Init+0xb0>)
 8000864:	f004 fa22 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800086e:	f001 f857 	bl	8001920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000872:	2360      	movs	r3, #96	@ 0x60
 8000874:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087a:	2300      	movs	r3, #0
 800087c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000882:	463b      	mov	r3, r7
 8000884:	2200      	movs	r2, #0
 8000886:	4619      	mov	r1, r3
 8000888:	4807      	ldr	r0, [pc, #28]	@ (80008a8 <MX_TIM2_Init+0xb0>)
 800088a:	f003 fd31 	bl	80042f0 <HAL_TIM_PWM_ConfigChannel>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000894:	f001 f844 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000898:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <MX_TIM2_Init+0xb0>)
 800089a:	f001 f8dd 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 800089e:	bf00      	nop
 80008a0:	3728      	adds	r7, #40	@ 0x28
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000b4 	.word	0x200000b4

080008ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b08a      	sub	sp, #40	@ 0x28
 80008b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b2:	f107 031c 	add.w	r3, r7, #28
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]
 80008bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
 80008cc:	615a      	str	r2, [r3, #20]
 80008ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008d0:	4b21      	ldr	r3, [pc, #132]	@ (8000958 <MX_TIM3_Init+0xac>)
 80008d2:	4a22      	ldr	r2, [pc, #136]	@ (800095c <MX_TIM3_Init+0xb0>)
 80008d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 80008d6:	4b20      	ldr	r3, [pc, #128]	@ (8000958 <MX_TIM3_Init+0xac>)
 80008d8:	224f      	movs	r2, #79	@ 0x4f
 80008da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000958 <MX_TIM3_Init+0xac>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80008e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000958 <MX_TIM3_Init+0xac>)
 80008e4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000958 <MX_TIM3_Init+0xac>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b19      	ldr	r3, [pc, #100]	@ (8000958 <MX_TIM3_Init+0xac>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008f6:	4818      	ldr	r0, [pc, #96]	@ (8000958 <MX_TIM3_Init+0xac>)
 80008f8:	f003 f9fe 	bl	8003cf8 <HAL_TIM_PWM_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000902:	f001 f80d 	bl	8001920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	4810      	ldr	r0, [pc, #64]	@ (8000958 <MX_TIM3_Init+0xac>)
 8000916:	f004 f9c9 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000920:	f000 fffe 	bl	8001920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000924:	2360      	movs	r3, #96	@ 0x60
 8000926:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000928:	2300      	movs	r3, #0
 800092a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800092c:	2300      	movs	r3, #0
 800092e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	2200      	movs	r2, #0
 8000938:	4619      	mov	r1, r3
 800093a:	4807      	ldr	r0, [pc, #28]	@ (8000958 <MX_TIM3_Init+0xac>)
 800093c:	f003 fcd8 	bl	80042f0 <HAL_TIM_PWM_ConfigChannel>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000946:	f000 ffeb 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800094a:	4803      	ldr	r0, [pc, #12]	@ (8000958 <MX_TIM3_Init+0xac>)
 800094c:	f001 f884 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 8000950:	bf00      	nop
 8000952:	3728      	adds	r7, #40	@ 0x28
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000100 	.word	0x20000100
 800095c:	40000400 	.word	0x40000400

08000960 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	@ 0x28
 8000964:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	2200      	movs	r2, #0
 800096c:	601a      	str	r2, [r3, #0]
 800096e:	605a      	str	r2, [r3, #4]
 8000970:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000972:	463b      	mov	r3, r7
 8000974:	2200      	movs	r2, #0
 8000976:	601a      	str	r2, [r3, #0]
 8000978:	605a      	str	r2, [r3, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	60da      	str	r2, [r3, #12]
 800097e:	611a      	str	r2, [r3, #16]
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000984:	4b21      	ldr	r3, [pc, #132]	@ (8000a0c <MX_TIM4_Init+0xac>)
 8000986:	4a22      	ldr	r2, [pc, #136]	@ (8000a10 <MX_TIM4_Init+0xb0>)
 8000988:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 800098a:	4b20      	ldr	r3, [pc, #128]	@ (8000a0c <MX_TIM4_Init+0xac>)
 800098c:	224f      	movs	r2, #79	@ 0x4f
 800098e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b1e      	ldr	r3, [pc, #120]	@ (8000a0c <MX_TIM4_Init+0xac>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000996:	4b1d      	ldr	r3, [pc, #116]	@ (8000a0c <MX_TIM4_Init+0xac>)
 8000998:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800099c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099e:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <MX_TIM4_Init+0xac>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b19      	ldr	r3, [pc, #100]	@ (8000a0c <MX_TIM4_Init+0xac>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009aa:	4818      	ldr	r0, [pc, #96]	@ (8000a0c <MX_TIM4_Init+0xac>)
 80009ac:	f003 f9a4 	bl	8003cf8 <HAL_TIM_PWM_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80009b6:	f000 ffb3 	bl	8001920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009c2:	f107 031c 	add.w	r3, r7, #28
 80009c6:	4619      	mov	r1, r3
 80009c8:	4810      	ldr	r0, [pc, #64]	@ (8000a0c <MX_TIM4_Init+0xac>)
 80009ca:	f004 f96f 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80009d4:	f000 ffa4 	bl	8001920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d8:	2360      	movs	r3, #96	@ 0x60
 80009da:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009e8:	463b      	mov	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	4619      	mov	r1, r3
 80009ee:	4807      	ldr	r0, [pc, #28]	@ (8000a0c <MX_TIM4_Init+0xac>)
 80009f0:	f003 fc7e 	bl	80042f0 <HAL_TIM_PWM_ConfigChannel>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80009fa:	f000 ff91 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009fe:	4803      	ldr	r0, [pc, #12]	@ (8000a0c <MX_TIM4_Init+0xac>)
 8000a00:	f001 f82a 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 8000a04:	bf00      	nop
 8000a06:	3728      	adds	r7, #40	@ 0x28
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	2000014c 	.word	0x2000014c
 8000a10:	40000800 	.word	0x40000800

08000a14 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b096      	sub	sp, #88	@ 0x58
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]
 8000a24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	615a      	str	r2, [r3, #20]
 8000a38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	222c      	movs	r2, #44	@ 0x2c
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f007 ff49 	bl	80088d8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a46:	4b39      	ldr	r3, [pc, #228]	@ (8000b2c <MX_TIM8_Init+0x118>)
 8000a48:	4a39      	ldr	r2, [pc, #228]	@ (8000b30 <MX_TIM8_Init+0x11c>)
 8000a4a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8000a4c:	4b37      	ldr	r3, [pc, #220]	@ (8000b2c <MX_TIM8_Init+0x118>)
 8000a4e:	224f      	movs	r2, #79	@ 0x4f
 8000a50:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a52:	4b36      	ldr	r3, [pc, #216]	@ (8000b2c <MX_TIM8_Init+0x118>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8000a58:	4b34      	ldr	r3, [pc, #208]	@ (8000b2c <MX_TIM8_Init+0x118>)
 8000a5a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a60:	4b32      	ldr	r3, [pc, #200]	@ (8000b2c <MX_TIM8_Init+0x118>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a66:	4b31      	ldr	r3, [pc, #196]	@ (8000b2c <MX_TIM8_Init+0x118>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8000b2c <MX_TIM8_Init+0x118>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a72:	482e      	ldr	r0, [pc, #184]	@ (8000b2c <MX_TIM8_Init+0x118>)
 8000a74:	f003 f940 	bl	8003cf8 <HAL_TIM_PWM_Init>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000a7e:	f000 ff4f 	bl	8001920 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a82:	2300      	movs	r3, #0
 8000a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a8e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a92:	4619      	mov	r1, r3
 8000a94:	4825      	ldr	r0, [pc, #148]	@ (8000b2c <MX_TIM8_Init+0x118>)
 8000a96:	f004 f909 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000aa0:	f000 ff3e 	bl	8001920 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aa4:	2360      	movs	r3, #96	@ 0x60
 8000aa6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000aac:	2300      	movs	r3, #0
 8000aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000abc:	2300      	movs	r3, #0
 8000abe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ac0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4818      	ldr	r0, [pc, #96]	@ (8000b2c <MX_TIM8_Init+0x118>)
 8000aca:	f003 fc11 	bl	80042f0 <HAL_TIM_PWM_ConfigChannel>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000ad4:	f000 ff24 	bl	8001920 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000af0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000af2:	2300      	movs	r3, #0
 8000af4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000af6:	2300      	movs	r3, #0
 8000af8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000afa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000afe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b04:	2300      	movs	r3, #0
 8000b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000b08:	1d3b      	adds	r3, r7, #4
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4807      	ldr	r0, [pc, #28]	@ (8000b2c <MX_TIM8_Init+0x118>)
 8000b0e:	f004 f955 	bl	8004dbc <HAL_TIMEx_ConfigBreakDeadTime>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000b18:	f000 ff02 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b1c:	4803      	ldr	r0, [pc, #12]	@ (8000b2c <MX_TIM8_Init+0x118>)
 8000b1e:	f000 ff9b 	bl	8001a58 <HAL_TIM_MspPostInit>

}
 8000b22:	bf00      	nop
 8000b24:	3758      	adds	r7, #88	@ 0x58
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000198 	.word	0x20000198
 8000b30:	40013400 	.word	0x40013400

08000b34 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b38:	4b14      	ldr	r3, [pc, #80]	@ (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b3a:	4a15      	ldr	r2, [pc, #84]	@ (8000b90 <MX_USART2_UART_Init+0x5c>)
 8000b3c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b44:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b46:	4b11      	ldr	r3, [pc, #68]	@ (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	@ (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	@ (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b64:	4b09      	ldr	r3, [pc, #36]	@ (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	@ (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <MX_USART2_UART_Init+0x58>)
 8000b78:	f004 f9bc 	bl	8004ef4 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b82:	f000 fecd 	bl	8001920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200001e4 	.word	0x200001e4
 8000b90:	40004400 	.word	0x40004400

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	@ 0x28
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	4b2b      	ldr	r3, [pc, #172]	@ (8000c58 <MX_GPIO_Init+0xc4>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bae:	4a2a      	ldr	r2, [pc, #168]	@ (8000c58 <MX_GPIO_Init+0xc4>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bb6:	4b28      	ldr	r3, [pc, #160]	@ (8000c58 <MX_GPIO_Init+0xc4>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	4b25      	ldr	r3, [pc, #148]	@ (8000c58 <MX_GPIO_Init+0xc4>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bc6:	4a24      	ldr	r2, [pc, #144]	@ (8000c58 <MX_GPIO_Init+0xc4>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bcc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bce:	4b22      	ldr	r3, [pc, #136]	@ (8000c58 <MX_GPIO_Init+0xc4>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b1f      	ldr	r3, [pc, #124]	@ (8000c58 <MX_GPIO_Init+0xc4>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bde:	4a1e      	ldr	r2, [pc, #120]	@ (8000c58 <MX_GPIO_Init+0xc4>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c58 <MX_GPIO_Init+0xc4>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b19      	ldr	r3, [pc, #100]	@ (8000c58 <MX_GPIO_Init+0xc4>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bf6:	4a18      	ldr	r2, [pc, #96]	@ (8000c58 <MX_GPIO_Init+0xc4>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bfe:	4b16      	ldr	r3, [pc, #88]	@ (8000c58 <MX_GPIO_Init+0xc4>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2120      	movs	r1, #32
 8000c0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c12:	f001 fc35 	bl	8002480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c1c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c22:	2300      	movs	r3, #0
 8000c24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 0314 	add.w	r3, r7, #20
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480b      	ldr	r0, [pc, #44]	@ (8000c5c <MX_GPIO_Init+0xc8>)
 8000c2e:	f001 fa65 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c32:	2320      	movs	r3, #32
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c36:	2301      	movs	r3, #1
 8000c38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	4619      	mov	r1, r3
 8000c48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c4c:	f001 fa56 	bl	80020fc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c50:	bf00      	nop
 8000c52:	3728      	adds	r7, #40	@ 0x28
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	40021000 	.word	0x40021000
 8000c5c:	48000800 	.word	0x48000800

08000c60 <IsButtonPressed>:
/* USER CODE BEGIN 4 */


/* Button press detection function - modify for your specific board */
uint8_t IsButtonPressed(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* Assuming B2 is connected to PC13 (common on many Nucleo boards) */
  /* Note: B2 is typically active LOW (returns 0 when pressed) */

  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000c64:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c68:	4805      	ldr	r0, [pc, #20]	@ (8000c80 <IsButtonPressed+0x20>)
 8000c6a:	f001 fbf1 	bl	8002450 <HAL_GPIO_ReadPin>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d101      	bne.n	8000c78 <IsButtonPressed+0x18>
  {
    return 1; /* Button pressed */
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <IsButtonPressed+0x1a>
  }
  return 0; /* Button not pressed */
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	48000800 	.word	0x48000800

08000c84 <ProcessReceivedMessage>:
  }
}

/* Process the complete received message, currently it echos back to the UART port once B1 has been pressed. Later this needs to be changes to sign the letters of the words */
void ProcessReceivedMessage(char* msg)
{
 8000c84:	b5b0      	push	{r4, r5, r7, lr}
 8000c86:	b096      	sub	sp, #88	@ 0x58
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* First, send a notification that button was pressed */
  char buttonMsg[] = "Button B2 pressed - Echoing received message:\r\n";
 8000c8c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <ProcessReceivedMessage+0xb8>)
 8000c8e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000c92:	461d      	mov	r5, r3
 8000c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c9c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000ca0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart2, (uint8_t*)buttonMsg, strlen(buttonMsg), 1000);
 8000ca4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff fa91 	bl	80001d0 <strlen>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	b29a      	uxth	r2, r3
 8000cb2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cba:	4821      	ldr	r0, [pc, #132]	@ (8000d40 <ProcessReceivedMessage+0xbc>)
 8000cbc:	f004 f968 	bl	8004f90 <HAL_UART_Transmit>

  /* Echo the exact message that was received */
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff fa85 	bl	80001d0 <strlen>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	481b      	ldr	r0, [pc, #108]	@ (8000d40 <ProcessReceivedMessage+0xbc>)
 8000cd2:	f004 f95d 	bl	8004f90 <HAL_UART_Transmit>

  /* Add a newline for better readability */
  char newline[] = "\r\n";
 8000cd6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d44 <ProcessReceivedMessage+0xc0>)
 8000cd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cdc:	6812      	ldr	r2, [r2, #0]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	8019      	strh	r1, [r3, #0]
 8000ce2:	3302      	adds	r3, #2
 8000ce4:	0c12      	lsrs	r2, r2, #16
 8000ce6:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)newline, strlen(newline), 1000);
 8000ce8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fa6f 	bl	80001d0 <strlen>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000cfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfe:	4810      	ldr	r0, [pc, #64]	@ (8000d40 <ProcessReceivedMessage+0xbc>)
 8000d00:	f004 f946 	bl	8004f90 <HAL_UART_Transmit>

  /* Optional: Notify completion */
  char completeMsg[] = "Message echo complete\r\n";
 8000d04:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <ProcessReceivedMessage+0xc4>)
 8000d06:	f107 040c 	add.w	r4, r7, #12
 8000d0a:	461d      	mov	r5, r3
 8000d0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d10:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d14:	e884 0003 	stmia.w	r4, {r0, r1}
  HAL_UART_Transmit(&huart2, (uint8_t*)completeMsg, strlen(completeMsg), 1000);
 8000d18:	f107 030c 	add.w	r3, r7, #12
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fa57 	bl	80001d0 <strlen>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	f107 010c 	add.w	r1, r7, #12
 8000d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d2e:	4804      	ldr	r0, [pc, #16]	@ (8000d40 <ProcessReceivedMessage+0xbc>)
 8000d30:	f004 f92e 	bl	8004f90 <HAL_UART_Transmit>
}
 8000d34:	bf00      	nop
 8000d36:	3758      	adds	r7, #88	@ 0x58
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d3c:	080089e0 	.word	0x080089e0
 8000d40:	200001e4 	.word	0x200001e4
 8000d44:	08008a10 	.word	0x08008a10
 8000d48:	08008a14 	.word	0x08008a14

08000d4c <Servo_SetMotion>:
 * @param finger: Which finger (THUMB, INDEX, MIDDLE, RING, PINKY)
 * @param direction: STOP, CLOCKWISE, or COUNTERCLOCKWISE
 * @param speed: Speed percentage (0-100)
 * @retval None
 */
void Servo_SetMotion(Finger finger, Direction direction, int speed) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	b085      	sub	sp, #20
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	603a      	str	r2, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
 8000d58:	460b      	mov	r3, r1
 8000d5a:	71bb      	strb	r3, [r7, #6]
    uint32_t pulse;

    // Clamp speed to 0-100%
    if (speed < 0) speed = 0;
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	da01      	bge.n	8000d66 <Servo_SetMotion+0x1a>
 8000d62:	2300      	movs	r3, #0
 8000d64:	603b      	str	r3, [r7, #0]
    if (speed > 100) speed = 100;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	2b64      	cmp	r3, #100	@ 0x64
 8000d6a:	dd01      	ble.n	8000d70 <Servo_SetMotion+0x24>
 8000d6c:	2364      	movs	r3, #100	@ 0x64
 8000d6e:	603b      	str	r3, [r7, #0]

    // Calculate pulse width based on direction and speed
    if (direction == STOP) {
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d103      	bne.n	8000d7e <Servo_SetMotion+0x32>
        pulse = SERVO_STOP;
 8000d76:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	e013      	b.n	8000da6 <Servo_SetMotion+0x5a>
    } else if (direction == CLOCKWISE) {
 8000d7e:	79bb      	ldrb	r3, [r7, #6]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d109      	bne.n	8000d98 <Servo_SetMotion+0x4c>
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CW
        pulse = SERVO_STOP - ((SERVO_STOP - SERVO_MAX_CW) * speed / 100);
 8000d84:	683a      	ldr	r2, [r7, #0]
 8000d86:	4613      	mov	r3, r2
 8000d88:	079b      	lsls	r3, r3, #30
 8000d8a:	1a9b      	subs	r3, r3, r2
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	e006      	b.n	8000da6 <Servo_SetMotion+0x5a>
    } else { // COUNTERCLOCKWISE
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CCW
        pulse = SERVO_STOP + ((SERVO_MAX_CCW - SERVO_STOP) * speed / 100);
 8000d98:	683a      	ldr	r2, [r7, #0]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	009b      	lsls	r3, r3, #2
 8000d9e:	4413      	add	r3, r2
 8000da0:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000da4:	60fb      	str	r3, [r7, #12]
    }

    // Update servo state
    servoStates[finger].speed = speed;
 8000da6:	79fa      	ldrb	r2, [r7, #7]
 8000da8:	4925      	ldr	r1, [pc, #148]	@ (8000e40 <Servo_SetMotion+0xf4>)
 8000daa:	4613      	mov	r3, r2
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	4413      	add	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	440b      	add	r3, r1
 8000db4:	683a      	ldr	r2, [r7, #0]
 8000db6:	601a      	str	r2, [r3, #0]
    servoStates[finger].dir = direction;
 8000db8:	79fa      	ldrb	r2, [r7, #7]
 8000dba:	4921      	ldr	r1, [pc, #132]	@ (8000e40 <Servo_SetMotion+0xf4>)
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	79ba      	ldrb	r2, [r7, #6]
 8000dca:	701a      	strb	r2, [r3, #0]
    servoStates[finger].pulse = pulse;
 8000dcc:	79fa      	ldrb	r2, [r7, #7]
 8000dce:	491c      	ldr	r1, [pc, #112]	@ (8000e40 <Servo_SetMotion+0xf4>)
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4413      	add	r3, r2
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	440b      	add	r3, r1
 8000dda:	3308      	adds	r3, #8
 8000ddc:	68fa      	ldr	r2, [r7, #12]
 8000dde:	601a      	str	r2, [r3, #0]

    // Apply pulse width to the appropriate timer
    switch (finger) {
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	d825      	bhi.n	8000e32 <Servo_SetMotion+0xe6>
 8000de6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dec <Servo_SetMotion+0xa0>)
 8000de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dec:	08000e01 	.word	0x08000e01
 8000df0:	08000e0b 	.word	0x08000e0b
 8000df4:	08000e15 	.word	0x08000e15
 8000df8:	08000e1f 	.word	0x08000e1f
 8000dfc:	08000e29 	.word	0x08000e29
        case THUMB:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8000e00:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <Servo_SetMotion+0xf8>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000e08:	e013      	b.n	8000e32 <Servo_SetMotion+0xe6>
        case INDEX:
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8000e0a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e48 <Servo_SetMotion+0xfc>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000e12:	e00e      	b.n	8000e32 <Servo_SetMotion+0xe6>
        case MIDDLE:
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8000e14:	4b0d      	ldr	r3, [pc, #52]	@ (8000e4c <Servo_SetMotion+0x100>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000e1c:	e009      	b.n	8000e32 <Servo_SetMotion+0xe6>
        case RING:
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <Servo_SetMotion+0x104>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000e26:	e004      	b.n	8000e32 <Servo_SetMotion+0xe6>
        case PINKY:
            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pulse);
 8000e28:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <Servo_SetMotion+0x108>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	68fa      	ldr	r2, [r7, #12]
 8000e2e:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000e30:	bf00      	nop
    }
	}
 8000e32:	bf00      	nop
 8000e34:	3714      	adds	r7, #20
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000000 	.word	0x20000000
 8000e44:	20000068 	.word	0x20000068
 8000e48:	200000b4 	.word	0x200000b4
 8000e4c:	20000100 	.word	0x20000100
 8000e50:	2000014c 	.word	0x2000014c
 8000e54:	20000198 	.word	0x20000198

08000e58 <Servo_StopAll>:
	/**
	 * @brief Stops all servos
	 * @param None
	 * @retval None
	 */
	void Servo_StopAll(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
		Servo_SetMotion(THUMB, STOP, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2100      	movs	r1, #0
 8000e60:	2000      	movs	r0, #0
 8000e62:	f7ff ff73 	bl	8000d4c <Servo_SetMotion>
		Servo_SetMotion(INDEX, STOP, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f7ff ff6e 	bl	8000d4c <Servo_SetMotion>
		Servo_SetMotion(MIDDLE, STOP, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2100      	movs	r1, #0
 8000e74:	2002      	movs	r0, #2
 8000e76:	f7ff ff69 	bl	8000d4c <Servo_SetMotion>
		Servo_SetMotion(RING, STOP, 0);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2003      	movs	r0, #3
 8000e80:	f7ff ff64 	bl	8000d4c <Servo_SetMotion>
		Servo_SetMotion(PINKY, STOP, 0);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2100      	movs	r1, #0
 8000e88:	2004      	movs	r0, #4
 8000e8a:	f7ff ff5f 	bl	8000d4c <Servo_SetMotion>

	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000e8e:	2100      	movs	r1, #0
 8000e90:	480a      	ldr	r0, [pc, #40]	@ (8000ebc <Servo_StopAll+0x64>)
 8000e92:	f003 f88f 	bl	8003fb4 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000e96:	2100      	movs	r1, #0
 8000e98:	4809      	ldr	r0, [pc, #36]	@ (8000ec0 <Servo_StopAll+0x68>)
 8000e9a:	f003 f88b 	bl	8003fb4 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4808      	ldr	r0, [pc, #32]	@ (8000ec4 <Servo_StopAll+0x6c>)
 8000ea2:	f003 f887 	bl	8003fb4 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	4807      	ldr	r0, [pc, #28]	@ (8000ec8 <Servo_StopAll+0x70>)
 8000eaa:	f003 f883 	bl	8003fb4 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <Servo_StopAll+0x74>)
 8000eb2:	f003 f87f 	bl	8003fb4 <HAL_TIM_PWM_Stop>
	}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000068 	.word	0x20000068
 8000ec0:	200000b4 	.word	0x200000b4
 8000ec4:	20000100 	.word	0x20000100
 8000ec8:	2000014c 	.word	0x2000014c
 8000ecc:	20000198 	.word	0x20000198

08000ed0 <Servo_Init>:
	/**
	 * @brief Initialize all servo timers and start PWM
	 * @param None
	 * @retval None
	 */
	void Servo_Init(void) {
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
	    // Start all PWM channels
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	480a      	ldr	r0, [pc, #40]	@ (8000f00 <Servo_Init+0x30>)
 8000ed8:	f002 ff66 	bl	8003da8 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000edc:	2100      	movs	r1, #0
 8000ede:	4809      	ldr	r0, [pc, #36]	@ (8000f04 <Servo_Init+0x34>)
 8000ee0:	f002 ff62 	bl	8003da8 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4808      	ldr	r0, [pc, #32]	@ (8000f08 <Servo_Init+0x38>)
 8000ee8:	f002 ff5e 	bl	8003da8 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000eec:	2100      	movs	r1, #0
 8000eee:	4807      	ldr	r0, [pc, #28]	@ (8000f0c <Servo_Init+0x3c>)
 8000ef0:	f002 ff5a 	bl	8003da8 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4806      	ldr	r0, [pc, #24]	@ (8000f10 <Servo_Init+0x40>)
 8000ef8:	f002 ff56 	bl	8003da8 <HAL_TIM_PWM_Start>

//	    // Initialize all servos to stop position
//	    Servo_StopAll();
	}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	20000068 	.word	0x20000068
 8000f04:	200000b4 	.word	0x200000b4
 8000f08:	20000100 	.word	0x20000100
 8000f0c:	2000014c 	.word	0x2000014c
 8000f10:	20000198 	.word	0x20000198

08000f14 <Direction_Decider>:

	int Direction_Decider(int* Desired_Position){
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
		if(*Desired_Position < 0){
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	da06      	bge.n	8000f32 <Direction_Decider+0x1e>
			*Desired_Position = *Desired_Position * -1;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	425a      	negs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	601a      	str	r2, [r3, #0]
			return CLOCKWISE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e000      	b.n	8000f34 <Direction_Decider+0x20>
		}
		else{
			return COUNTERCLOCKWISE;
 8000f32:	2302      	movs	r3, #2
		}
	}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <SignLetter>:
	 * @brief Example function to demonstrate a sign language letter
	 * @param letter: ASCII character (A-Z)
	 * @param duration: How long to hold the position (in ms)
	 * @retval None
	 */
	void SignLetter(char letter) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
	    // Reset to neutral position
	    Servo_Init();
 8000f4a:	f7ff ffc1 	bl	8000ed0 <Servo_Init>
	    HAL_Delay(500); // Wait for fingers to return to neutral
 8000f4e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000f52:	f000 ffcd 	bl	8001ef0 <HAL_Delay>



	    // Set finger positions based on the letter
	    switch(letter) {
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	3b41      	subs	r3, #65	@ 0x41
 8000f5a:	2b19      	cmp	r3, #25
 8000f5c:	f200 8406 	bhi.w	800176c <SignLetter+0x82c>
 8000f60:	a201      	add	r2, pc, #4	@ (adr r2, 8000f68 <SignLetter+0x28>)
 8000f62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f66:	bf00      	nop
 8000f68:	08000fd1 	.word	0x08000fd1
 8000f6c:	08001019 	.word	0x08001019
 8000f70:	08001089 	.word	0x08001089
 8000f74:	080010cf 	.word	0x080010cf
 8000f78:	08001115 	.word	0x08001115
 8000f7c:	0800115b 	.word	0x0800115b
 8000f80:	080011a1 	.word	0x080011a1
 8000f84:	080011e7 	.word	0x080011e7
 8000f88:	0800122d 	.word	0x0800122d
 8000f8c:	08001273 	.word	0x08001273
 8000f90:	080012b9 	.word	0x080012b9
 8000f94:	080012ff 	.word	0x080012ff
 8000f98:	08001345 	.word	0x08001345
 8000f9c:	080013b5 	.word	0x080013b5
 8000fa0:	080013fb 	.word	0x080013fb
 8000fa4:	08001441 	.word	0x08001441
 8000fa8:	08001487 	.word	0x08001487
 8000fac:	080014cd 	.word	0x080014cd
 8000fb0:	08001513 	.word	0x08001513
 8000fb4:	08001559 	.word	0x08001559
 8000fb8:	0800159f 	.word	0x0800159f
 8000fbc:	080015e5 	.word	0x080015e5
 8000fc0:	0800162b 	.word	0x0800162b
 8000fc4:	0800169b 	.word	0x0800169b
 8000fc8:	080016e1 	.word	0x080016e1
 8000fcc:	08001727 	.word	0x08001727
	        case 'A':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	@ (8001060 <SignLetter+0x120>)
 8000fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000fda:	4a22      	ldr	r2, [pc, #136]	@ (8001064 <SignLetter+0x124>)
 8000fdc:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8000fde:	4b22      	ldr	r3, [pc, #136]	@ (8001068 <SignLetter+0x128>)
 8000fe0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000fe8:	4a20      	ldr	r2, [pc, #128]	@ (800106c <SignLetter+0x12c>)
 8000fea:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8000fec:	4b20      	ldr	r3, [pc, #128]	@ (8001070 <SignLetter+0x130>)
 8000fee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8001074 <SignLetter+0x134>)
 8000ff8:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8001078 <SignLetter+0x138>)
 8000ffc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001000:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001004:	4a1d      	ldr	r2, [pc, #116]	@ (800107c <SignLetter+0x13c>)
 8001006:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001008:	4b1d      	ldr	r3, [pc, #116]	@ (8001080 <SignLetter+0x140>)
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001012:	4a1c      	ldr	r2, [pc, #112]	@ (8001084 <SignLetter+0x144>)
 8001014:	6013      	str	r3, [r2, #0]
	            break;
 8001016:	e3ac      	b.n	8001772 <SignLetter+0x832>

	        case 'B':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001018:	4b11      	ldr	r3, [pc, #68]	@ (8001060 <SignLetter+0x120>)
 800101a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001022:	4a10      	ldr	r2, [pc, #64]	@ (8001064 <SignLetter+0x124>)
 8001024:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001026:	4b10      	ldr	r3, [pc, #64]	@ (8001068 <SignLetter+0x128>)
 8001028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001030:	4a0e      	ldr	r2, [pc, #56]	@ (800106c <SignLetter+0x12c>)
 8001032:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001034:	4b0e      	ldr	r3, [pc, #56]	@ (8001070 <SignLetter+0x130>)
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800103e:	4a0d      	ldr	r2, [pc, #52]	@ (8001074 <SignLetter+0x134>)
 8001040:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001042:	4b0d      	ldr	r3, [pc, #52]	@ (8001078 <SignLetter+0x138>)
 8001044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001048:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800104c:	4a0b      	ldr	r2, [pc, #44]	@ (800107c <SignLetter+0x13c>)
 800104e:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001050:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <SignLetter+0x140>)
 8001052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001056:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800105a:	4a0a      	ldr	r2, [pc, #40]	@ (8001084 <SignLetter+0x144>)
 800105c:	6013      	str	r3, [r2, #0]
	            break;
 800105e:	e388      	b.n	8001772 <SignLetter+0x832>
 8001060:	20000388 	.word	0x20000388
 8001064:	20000394 	.word	0x20000394
 8001068:	2000038a 	.word	0x2000038a
 800106c:	20000398 	.word	0x20000398
 8001070:	2000038c 	.word	0x2000038c
 8001074:	2000039c 	.word	0x2000039c
 8001078:	2000038e 	.word	0x2000038e
 800107c:	200003a0 	.word	0x200003a0
 8001080:	20000390 	.word	0x20000390
 8001084:	200003a4 	.word	0x200003a4

	        case 'C':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001088:	4bb1      	ldr	r3, [pc, #708]	@ (8001350 <SignLetter+0x410>)
 800108a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001092:	4ab0      	ldr	r2, [pc, #704]	@ (8001354 <SignLetter+0x414>)
 8001094:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001096:	4bb0      	ldr	r3, [pc, #704]	@ (8001358 <SignLetter+0x418>)
 8001098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010a0:	4aae      	ldr	r2, [pc, #696]	@ (800135c <SignLetter+0x41c>)
 80010a2:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80010a4:	4bae      	ldr	r3, [pc, #696]	@ (8001360 <SignLetter+0x420>)
 80010a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010aa:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010ae:	4aad      	ldr	r2, [pc, #692]	@ (8001364 <SignLetter+0x424>)
 80010b0:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80010b2:	4bad      	ldr	r3, [pc, #692]	@ (8001368 <SignLetter+0x428>)
 80010b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010bc:	4aab      	ldr	r2, [pc, #684]	@ (800136c <SignLetter+0x42c>)
 80010be:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80010c0:	4bab      	ldr	r3, [pc, #684]	@ (8001370 <SignLetter+0x430>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010ca:	4aaa      	ldr	r2, [pc, #680]	@ (8001374 <SignLetter+0x434>)
 80010cc:	6013      	str	r3, [r2, #0]

	        case 'D':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80010ce:	4ba0      	ldr	r3, [pc, #640]	@ (8001350 <SignLetter+0x410>)
 80010d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010d8:	4a9e      	ldr	r2, [pc, #632]	@ (8001354 <SignLetter+0x414>)
 80010da:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80010dc:	4b9e      	ldr	r3, [pc, #632]	@ (8001358 <SignLetter+0x418>)
 80010de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010e6:	4a9d      	ldr	r2, [pc, #628]	@ (800135c <SignLetter+0x41c>)
 80010e8:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80010ea:	4b9d      	ldr	r3, [pc, #628]	@ (8001360 <SignLetter+0x420>)
 80010ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010f4:	4a9b      	ldr	r2, [pc, #620]	@ (8001364 <SignLetter+0x424>)
 80010f6:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80010f8:	4b9b      	ldr	r3, [pc, #620]	@ (8001368 <SignLetter+0x428>)
 80010fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fe:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001102:	4a9a      	ldr	r2, [pc, #616]	@ (800136c <SignLetter+0x42c>)
 8001104:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001106:	4b9a      	ldr	r3, [pc, #616]	@ (8001370 <SignLetter+0x430>)
 8001108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001110:	4a98      	ldr	r2, [pc, #608]	@ (8001374 <SignLetter+0x434>)
 8001112:	6013      	str	r3, [r2, #0]

	        case 'E':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001114:	4b8e      	ldr	r3, [pc, #568]	@ (8001350 <SignLetter+0x410>)
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800111e:	4a8d      	ldr	r2, [pc, #564]	@ (8001354 <SignLetter+0x414>)
 8001120:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001122:	4b8d      	ldr	r3, [pc, #564]	@ (8001358 <SignLetter+0x418>)
 8001124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001128:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800112c:	4a8b      	ldr	r2, [pc, #556]	@ (800135c <SignLetter+0x41c>)
 800112e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001130:	4b8b      	ldr	r3, [pc, #556]	@ (8001360 <SignLetter+0x420>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800113a:	4a8a      	ldr	r2, [pc, #552]	@ (8001364 <SignLetter+0x424>)
 800113c:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800113e:	4b8a      	ldr	r3, [pc, #552]	@ (8001368 <SignLetter+0x428>)
 8001140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001144:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001148:	4a88      	ldr	r2, [pc, #544]	@ (800136c <SignLetter+0x42c>)
 800114a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800114c:	4b88      	ldr	r3, [pc, #544]	@ (8001370 <SignLetter+0x430>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001156:	4a87      	ldr	r2, [pc, #540]	@ (8001374 <SignLetter+0x434>)
 8001158:	6013      	str	r3, [r2, #0]

	        case 'F':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800115a:	4b7d      	ldr	r3, [pc, #500]	@ (8001350 <SignLetter+0x410>)
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001164:	4a7b      	ldr	r2, [pc, #492]	@ (8001354 <SignLetter+0x414>)
 8001166:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001168:	4b7b      	ldr	r3, [pc, #492]	@ (8001358 <SignLetter+0x418>)
 800116a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001172:	4a7a      	ldr	r2, [pc, #488]	@ (800135c <SignLetter+0x41c>)
 8001174:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001176:	4b7a      	ldr	r3, [pc, #488]	@ (8001360 <SignLetter+0x420>)
 8001178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001180:	4a78      	ldr	r2, [pc, #480]	@ (8001364 <SignLetter+0x424>)
 8001182:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001184:	4b78      	ldr	r3, [pc, #480]	@ (8001368 <SignLetter+0x428>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800118e:	4a77      	ldr	r2, [pc, #476]	@ (800136c <SignLetter+0x42c>)
 8001190:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001192:	4b77      	ldr	r3, [pc, #476]	@ (8001370 <SignLetter+0x430>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800119c:	4a75      	ldr	r2, [pc, #468]	@ (8001374 <SignLetter+0x434>)
 800119e:	6013      	str	r3, [r2, #0]

	        case 'G':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80011a0:	4b6b      	ldr	r3, [pc, #428]	@ (8001350 <SignLetter+0x410>)
 80011a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011aa:	4a6a      	ldr	r2, [pc, #424]	@ (8001354 <SignLetter+0x414>)
 80011ac:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80011ae:	4b6a      	ldr	r3, [pc, #424]	@ (8001358 <SignLetter+0x418>)
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011b8:	4a68      	ldr	r2, [pc, #416]	@ (800135c <SignLetter+0x41c>)
 80011ba:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80011bc:	4b68      	ldr	r3, [pc, #416]	@ (8001360 <SignLetter+0x420>)
 80011be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011c6:	4a67      	ldr	r2, [pc, #412]	@ (8001364 <SignLetter+0x424>)
 80011c8:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80011ca:	4b67      	ldr	r3, [pc, #412]	@ (8001368 <SignLetter+0x428>)
 80011cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011d4:	4a65      	ldr	r2, [pc, #404]	@ (800136c <SignLetter+0x42c>)
 80011d6:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80011d8:	4b65      	ldr	r3, [pc, #404]	@ (8001370 <SignLetter+0x430>)
 80011da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011de:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011e2:	4a64      	ldr	r2, [pc, #400]	@ (8001374 <SignLetter+0x434>)
 80011e4:	6013      	str	r3, [r2, #0]

	        case 'H':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80011e6:	4b5a      	ldr	r3, [pc, #360]	@ (8001350 <SignLetter+0x410>)
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011f0:	4a58      	ldr	r2, [pc, #352]	@ (8001354 <SignLetter+0x414>)
 80011f2:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80011f4:	4b58      	ldr	r3, [pc, #352]	@ (8001358 <SignLetter+0x418>)
 80011f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fa:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011fe:	4a57      	ldr	r2, [pc, #348]	@ (800135c <SignLetter+0x41c>)
 8001200:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001202:	4b57      	ldr	r3, [pc, #348]	@ (8001360 <SignLetter+0x420>)
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800120c:	4a55      	ldr	r2, [pc, #340]	@ (8001364 <SignLetter+0x424>)
 800120e:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001210:	4b55      	ldr	r3, [pc, #340]	@ (8001368 <SignLetter+0x428>)
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800121a:	4a54      	ldr	r2, [pc, #336]	@ (800136c <SignLetter+0x42c>)
 800121c:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800121e:	4b54      	ldr	r3, [pc, #336]	@ (8001370 <SignLetter+0x430>)
 8001220:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001224:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001228:	4a52      	ldr	r2, [pc, #328]	@ (8001374 <SignLetter+0x434>)
 800122a:	6013      	str	r3, [r2, #0]

	        case 'I':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800122c:	4b48      	ldr	r3, [pc, #288]	@ (8001350 <SignLetter+0x410>)
 800122e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001232:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001236:	4a47      	ldr	r2, [pc, #284]	@ (8001354 <SignLetter+0x414>)
 8001238:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800123a:	4b47      	ldr	r3, [pc, #284]	@ (8001358 <SignLetter+0x418>)
 800123c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001240:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001244:	4a45      	ldr	r2, [pc, #276]	@ (800135c <SignLetter+0x41c>)
 8001246:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001248:	4b45      	ldr	r3, [pc, #276]	@ (8001360 <SignLetter+0x420>)
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001252:	4a44      	ldr	r2, [pc, #272]	@ (8001364 <SignLetter+0x424>)
 8001254:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001256:	4b44      	ldr	r3, [pc, #272]	@ (8001368 <SignLetter+0x428>)
 8001258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001260:	4a42      	ldr	r2, [pc, #264]	@ (800136c <SignLetter+0x42c>)
 8001262:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001264:	4b42      	ldr	r3, [pc, #264]	@ (8001370 <SignLetter+0x430>)
 8001266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800126e:	4a41      	ldr	r2, [pc, #260]	@ (8001374 <SignLetter+0x434>)
 8001270:	6013      	str	r3, [r2, #0]

	        case 'J':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001272:	4b37      	ldr	r3, [pc, #220]	@ (8001350 <SignLetter+0x410>)
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800127c:	4a35      	ldr	r2, [pc, #212]	@ (8001354 <SignLetter+0x414>)
 800127e:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001280:	4b35      	ldr	r3, [pc, #212]	@ (8001358 <SignLetter+0x418>)
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800128a:	4a34      	ldr	r2, [pc, #208]	@ (800135c <SignLetter+0x41c>)
 800128c:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800128e:	4b34      	ldr	r3, [pc, #208]	@ (8001360 <SignLetter+0x420>)
 8001290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001294:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001298:	4a32      	ldr	r2, [pc, #200]	@ (8001364 <SignLetter+0x424>)
 800129a:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800129c:	4b32      	ldr	r3, [pc, #200]	@ (8001368 <SignLetter+0x428>)
 800129e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012a6:	4a31      	ldr	r2, [pc, #196]	@ (800136c <SignLetter+0x42c>)
 80012a8:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80012aa:	4b31      	ldr	r3, [pc, #196]	@ (8001370 <SignLetter+0x430>)
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012b4:	4a2f      	ldr	r2, [pc, #188]	@ (8001374 <SignLetter+0x434>)
 80012b6:	6013      	str	r3, [r2, #0]

	        case 'K':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80012b8:	4b25      	ldr	r3, [pc, #148]	@ (8001350 <SignLetter+0x410>)
 80012ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012be:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012c2:	4a24      	ldr	r2, [pc, #144]	@ (8001354 <SignLetter+0x414>)
 80012c4:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80012c6:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <SignLetter+0x418>)
 80012c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012cc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012d0:	4a22      	ldr	r2, [pc, #136]	@ (800135c <SignLetter+0x41c>)
 80012d2:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80012d4:	4b22      	ldr	r3, [pc, #136]	@ (8001360 <SignLetter+0x420>)
 80012d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012da:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012de:	4a21      	ldr	r2, [pc, #132]	@ (8001364 <SignLetter+0x424>)
 80012e0:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80012e2:	4b21      	ldr	r3, [pc, #132]	@ (8001368 <SignLetter+0x428>)
 80012e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012ec:	4a1f      	ldr	r2, [pc, #124]	@ (800136c <SignLetter+0x42c>)
 80012ee:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80012f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001370 <SignLetter+0x430>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001374 <SignLetter+0x434>)
 80012fc:	6013      	str	r3, [r2, #0]

	        case 'L':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80012fe:	4b14      	ldr	r3, [pc, #80]	@ (8001350 <SignLetter+0x410>)
 8001300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001304:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001308:	4a12      	ldr	r2, [pc, #72]	@ (8001354 <SignLetter+0x414>)
 800130a:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800130c:	4b12      	ldr	r3, [pc, #72]	@ (8001358 <SignLetter+0x418>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001316:	4a11      	ldr	r2, [pc, #68]	@ (800135c <SignLetter+0x41c>)
 8001318:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <SignLetter+0x420>)
 800131c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001320:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001324:	4a0f      	ldr	r2, [pc, #60]	@ (8001364 <SignLetter+0x424>)
 8001326:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001328:	4b0f      	ldr	r3, [pc, #60]	@ (8001368 <SignLetter+0x428>)
 800132a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001332:	4a0e      	ldr	r2, [pc, #56]	@ (800136c <SignLetter+0x42c>)
 8001334:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <SignLetter+0x430>)
 8001338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001340:	4a0c      	ldr	r2, [pc, #48]	@ (8001374 <SignLetter+0x434>)
 8001342:	6013      	str	r3, [r2, #0]

	        case 'M':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001344:	4b02      	ldr	r3, [pc, #8]	@ (8001350 <SignLetter+0x410>)
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800134e:	e013      	b.n	8001378 <SignLetter+0x438>
 8001350:	20000388 	.word	0x20000388
 8001354:	20000394 	.word	0x20000394
 8001358:	2000038a 	.word	0x2000038a
 800135c:	20000398 	.word	0x20000398
 8001360:	2000038c 	.word	0x2000038c
 8001364:	2000039c 	.word	0x2000039c
 8001368:	2000038e 	.word	0x2000038e
 800136c:	200003a0 	.word	0x200003a0
 8001370:	20000390 	.word	0x20000390
 8001374:	200003a4 	.word	0x200003a4
 8001378:	4ab1      	ldr	r2, [pc, #708]	@ (8001640 <SignLetter+0x700>)
 800137a:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800137c:	4bb1      	ldr	r3, [pc, #708]	@ (8001644 <SignLetter+0x704>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001386:	4ab0      	ldr	r2, [pc, #704]	@ (8001648 <SignLetter+0x708>)
 8001388:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800138a:	4bb0      	ldr	r3, [pc, #704]	@ (800164c <SignLetter+0x70c>)
 800138c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001390:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001394:	4aae      	ldr	r2, [pc, #696]	@ (8001650 <SignLetter+0x710>)
 8001396:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001398:	4bae      	ldr	r3, [pc, #696]	@ (8001654 <SignLetter+0x714>)
 800139a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013a2:	4aad      	ldr	r2, [pc, #692]	@ (8001658 <SignLetter+0x718>)
 80013a4:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80013a6:	4bad      	ldr	r3, [pc, #692]	@ (800165c <SignLetter+0x71c>)
 80013a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ac:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013b0:	4aab      	ldr	r2, [pc, #684]	@ (8001660 <SignLetter+0x720>)
 80013b2:	6013      	str	r3, [r2, #0]

	        case 'N':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80013b4:	4bab      	ldr	r3, [pc, #684]	@ (8001664 <SignLetter+0x724>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013be:	4aa0      	ldr	r2, [pc, #640]	@ (8001640 <SignLetter+0x700>)
 80013c0:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80013c2:	4ba0      	ldr	r3, [pc, #640]	@ (8001644 <SignLetter+0x704>)
 80013c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013cc:	4a9e      	ldr	r2, [pc, #632]	@ (8001648 <SignLetter+0x708>)
 80013ce:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80013d0:	4b9e      	ldr	r3, [pc, #632]	@ (800164c <SignLetter+0x70c>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013da:	4a9d      	ldr	r2, [pc, #628]	@ (8001650 <SignLetter+0x710>)
 80013dc:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80013de:	4b9d      	ldr	r3, [pc, #628]	@ (8001654 <SignLetter+0x714>)
 80013e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013e8:	4a9b      	ldr	r2, [pc, #620]	@ (8001658 <SignLetter+0x718>)
 80013ea:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80013ec:	4b9b      	ldr	r3, [pc, #620]	@ (800165c <SignLetter+0x71c>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013f6:	4a9a      	ldr	r2, [pc, #616]	@ (8001660 <SignLetter+0x720>)
 80013f8:	6013      	str	r3, [r2, #0]

	        case 'O':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80013fa:	4b9a      	ldr	r3, [pc, #616]	@ (8001664 <SignLetter+0x724>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001404:	4a8e      	ldr	r2, [pc, #568]	@ (8001640 <SignLetter+0x700>)
 8001406:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001408:	4b8e      	ldr	r3, [pc, #568]	@ (8001644 <SignLetter+0x704>)
 800140a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001412:	4a8d      	ldr	r2, [pc, #564]	@ (8001648 <SignLetter+0x708>)
 8001414:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001416:	4b8d      	ldr	r3, [pc, #564]	@ (800164c <SignLetter+0x70c>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001420:	4a8b      	ldr	r2, [pc, #556]	@ (8001650 <SignLetter+0x710>)
 8001422:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001424:	4b8b      	ldr	r3, [pc, #556]	@ (8001654 <SignLetter+0x714>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800142e:	4a8a      	ldr	r2, [pc, #552]	@ (8001658 <SignLetter+0x718>)
 8001430:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001432:	4b8a      	ldr	r3, [pc, #552]	@ (800165c <SignLetter+0x71c>)
 8001434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001438:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800143c:	4a88      	ldr	r2, [pc, #544]	@ (8001660 <SignLetter+0x720>)
 800143e:	6013      	str	r3, [r2, #0]

	        case 'P':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001440:	4b88      	ldr	r3, [pc, #544]	@ (8001664 <SignLetter+0x724>)
 8001442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001446:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800144a:	4a7d      	ldr	r2, [pc, #500]	@ (8001640 <SignLetter+0x700>)
 800144c:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800144e:	4b7d      	ldr	r3, [pc, #500]	@ (8001644 <SignLetter+0x704>)
 8001450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001454:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001458:	4a7b      	ldr	r2, [pc, #492]	@ (8001648 <SignLetter+0x708>)
 800145a:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800145c:	4b7b      	ldr	r3, [pc, #492]	@ (800164c <SignLetter+0x70c>)
 800145e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001462:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001466:	4a7a      	ldr	r2, [pc, #488]	@ (8001650 <SignLetter+0x710>)
 8001468:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800146a:	4b7a      	ldr	r3, [pc, #488]	@ (8001654 <SignLetter+0x714>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001474:	4a78      	ldr	r2, [pc, #480]	@ (8001658 <SignLetter+0x718>)
 8001476:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001478:	4b78      	ldr	r3, [pc, #480]	@ (800165c <SignLetter+0x71c>)
 800147a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001482:	4a77      	ldr	r2, [pc, #476]	@ (8001660 <SignLetter+0x720>)
 8001484:	6013      	str	r3, [r2, #0]

	        case 'Q':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001486:	4b77      	ldr	r3, [pc, #476]	@ (8001664 <SignLetter+0x724>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001490:	4a6b      	ldr	r2, [pc, #428]	@ (8001640 <SignLetter+0x700>)
 8001492:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001494:	4b6b      	ldr	r3, [pc, #428]	@ (8001644 <SignLetter+0x704>)
 8001496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800149e:	4a6a      	ldr	r2, [pc, #424]	@ (8001648 <SignLetter+0x708>)
 80014a0:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80014a2:	4b6a      	ldr	r3, [pc, #424]	@ (800164c <SignLetter+0x70c>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80014ac:	4a68      	ldr	r2, [pc, #416]	@ (8001650 <SignLetter+0x710>)
 80014ae:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80014b0:	4b68      	ldr	r3, [pc, #416]	@ (8001654 <SignLetter+0x714>)
 80014b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80014ba:	4a67      	ldr	r2, [pc, #412]	@ (8001658 <SignLetter+0x718>)
 80014bc:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80014be:	4b67      	ldr	r3, [pc, #412]	@ (800165c <SignLetter+0x71c>)
 80014c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80014c8:	4a65      	ldr	r2, [pc, #404]	@ (8001660 <SignLetter+0x720>)
 80014ca:	6013      	str	r3, [r2, #0]

	        case 'R':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80014cc:	4b65      	ldr	r3, [pc, #404]	@ (8001664 <SignLetter+0x724>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80014d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001640 <SignLetter+0x700>)
 80014d8:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80014da:	4b5a      	ldr	r3, [pc, #360]	@ (8001644 <SignLetter+0x704>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80014e4:	4a58      	ldr	r2, [pc, #352]	@ (8001648 <SignLetter+0x708>)
 80014e6:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80014e8:	4b58      	ldr	r3, [pc, #352]	@ (800164c <SignLetter+0x70c>)
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80014f2:	4a57      	ldr	r2, [pc, #348]	@ (8001650 <SignLetter+0x710>)
 80014f4:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80014f6:	4b57      	ldr	r3, [pc, #348]	@ (8001654 <SignLetter+0x714>)
 80014f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001500:	4a55      	ldr	r2, [pc, #340]	@ (8001658 <SignLetter+0x718>)
 8001502:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001504:	4b55      	ldr	r3, [pc, #340]	@ (800165c <SignLetter+0x71c>)
 8001506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800150e:	4a54      	ldr	r2, [pc, #336]	@ (8001660 <SignLetter+0x720>)
 8001510:	6013      	str	r3, [r2, #0]

	        case 'S':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001512:	4b54      	ldr	r3, [pc, #336]	@ (8001664 <SignLetter+0x724>)
 8001514:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001518:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800151c:	4a48      	ldr	r2, [pc, #288]	@ (8001640 <SignLetter+0x700>)
 800151e:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001520:	4b48      	ldr	r3, [pc, #288]	@ (8001644 <SignLetter+0x704>)
 8001522:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001526:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800152a:	4a47      	ldr	r2, [pc, #284]	@ (8001648 <SignLetter+0x708>)
 800152c:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800152e:	4b47      	ldr	r3, [pc, #284]	@ (800164c <SignLetter+0x70c>)
 8001530:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001534:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001538:	4a45      	ldr	r2, [pc, #276]	@ (8001650 <SignLetter+0x710>)
 800153a:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800153c:	4b45      	ldr	r3, [pc, #276]	@ (8001654 <SignLetter+0x714>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001546:	4a44      	ldr	r2, [pc, #272]	@ (8001658 <SignLetter+0x718>)
 8001548:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800154a:	4b44      	ldr	r3, [pc, #272]	@ (800165c <SignLetter+0x71c>)
 800154c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001550:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001554:	4a42      	ldr	r2, [pc, #264]	@ (8001660 <SignLetter+0x720>)
 8001556:	6013      	str	r3, [r2, #0]

	        case 'T':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001558:	4b42      	ldr	r3, [pc, #264]	@ (8001664 <SignLetter+0x724>)
 800155a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001562:	4a37      	ldr	r2, [pc, #220]	@ (8001640 <SignLetter+0x700>)
 8001564:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001566:	4b37      	ldr	r3, [pc, #220]	@ (8001644 <SignLetter+0x704>)
 8001568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001570:	4a35      	ldr	r2, [pc, #212]	@ (8001648 <SignLetter+0x708>)
 8001572:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001574:	4b35      	ldr	r3, [pc, #212]	@ (800164c <SignLetter+0x70c>)
 8001576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800157e:	4a34      	ldr	r2, [pc, #208]	@ (8001650 <SignLetter+0x710>)
 8001580:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001582:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <SignLetter+0x714>)
 8001584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001588:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800158c:	4a32      	ldr	r2, [pc, #200]	@ (8001658 <SignLetter+0x718>)
 800158e:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001590:	4b32      	ldr	r3, [pc, #200]	@ (800165c <SignLetter+0x71c>)
 8001592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001596:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800159a:	4a31      	ldr	r2, [pc, #196]	@ (8001660 <SignLetter+0x720>)
 800159c:	6013      	str	r3, [r2, #0]

	        case 'U':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800159e:	4b31      	ldr	r3, [pc, #196]	@ (8001664 <SignLetter+0x724>)
 80015a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015a8:	4a25      	ldr	r2, [pc, #148]	@ (8001640 <SignLetter+0x700>)
 80015aa:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80015ac:	4b25      	ldr	r3, [pc, #148]	@ (8001644 <SignLetter+0x704>)
 80015ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015b6:	4a24      	ldr	r2, [pc, #144]	@ (8001648 <SignLetter+0x708>)
 80015b8:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80015ba:	4b24      	ldr	r3, [pc, #144]	@ (800164c <SignLetter+0x70c>)
 80015bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015c4:	4a22      	ldr	r2, [pc, #136]	@ (8001650 <SignLetter+0x710>)
 80015c6:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80015c8:	4b22      	ldr	r3, [pc, #136]	@ (8001654 <SignLetter+0x714>)
 80015ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ce:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015d2:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <SignLetter+0x718>)
 80015d4:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80015d6:	4b21      	ldr	r3, [pc, #132]	@ (800165c <SignLetter+0x71c>)
 80015d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015dc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001660 <SignLetter+0x720>)
 80015e2:	6013      	str	r3, [r2, #0]

	        case 'V':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80015e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <SignLetter+0x724>)
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015ee:	4a14      	ldr	r2, [pc, #80]	@ (8001640 <SignLetter+0x700>)
 80015f0:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80015f2:	4b14      	ldr	r3, [pc, #80]	@ (8001644 <SignLetter+0x704>)
 80015f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015fc:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <SignLetter+0x708>)
 80015fe:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001600:	4b12      	ldr	r3, [pc, #72]	@ (800164c <SignLetter+0x70c>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800160a:	4a11      	ldr	r2, [pc, #68]	@ (8001650 <SignLetter+0x710>)
 800160c:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800160e:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <SignLetter+0x714>)
 8001610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001614:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001618:	4a0f      	ldr	r2, [pc, #60]	@ (8001658 <SignLetter+0x718>)
 800161a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800161c:	4b0f      	ldr	r3, [pc, #60]	@ (800165c <SignLetter+0x71c>)
 800161e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001622:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001626:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <SignLetter+0x720>)
 8001628:	6013      	str	r3, [r2, #0]

	        case 'W':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <SignLetter+0x724>)
 800162c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001630:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001634:	4a02      	ldr	r2, [pc, #8]	@ (8001640 <SignLetter+0x700>)
 8001636:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001638:	4b02      	ldr	r3, [pc, #8]	@ (8001644 <SignLetter+0x704>)
 800163a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163e:	e013      	b.n	8001668 <SignLetter+0x728>
 8001640:	20000394 	.word	0x20000394
 8001644:	2000038a 	.word	0x2000038a
 8001648:	20000398 	.word	0x20000398
 800164c:	2000038c 	.word	0x2000038c
 8001650:	2000039c 	.word	0x2000039c
 8001654:	2000038e 	.word	0x2000038e
 8001658:	200003a0 	.word	0x200003a0
 800165c:	20000390 	.word	0x20000390
 8001660:	200003a4 	.word	0x200003a4
 8001664:	20000388 	.word	0x20000388
 8001668:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800166c:	4a5d      	ldr	r2, [pc, #372]	@ (80017e4 <SignLetter+0x8a4>)
 800166e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001670:	4b5d      	ldr	r3, [pc, #372]	@ (80017e8 <SignLetter+0x8a8>)
 8001672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001676:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800167a:	4a5c      	ldr	r2, [pc, #368]	@ (80017ec <SignLetter+0x8ac>)
 800167c:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800167e:	4b5c      	ldr	r3, [pc, #368]	@ (80017f0 <SignLetter+0x8b0>)
 8001680:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001684:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001688:	4a5a      	ldr	r2, [pc, #360]	@ (80017f4 <SignLetter+0x8b4>)
 800168a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800168c:	4b5a      	ldr	r3, [pc, #360]	@ (80017f8 <SignLetter+0x8b8>)
 800168e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001692:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001696:	4a59      	ldr	r2, [pc, #356]	@ (80017fc <SignLetter+0x8bc>)
 8001698:	6013      	str	r3, [r2, #0]

	        case 'X':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800169a:	4b59      	ldr	r3, [pc, #356]	@ (8001800 <SignLetter+0x8c0>)
 800169c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016a0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80016a4:	4a57      	ldr	r2, [pc, #348]	@ (8001804 <SignLetter+0x8c4>)
 80016a6:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80016a8:	4b57      	ldr	r3, [pc, #348]	@ (8001808 <SignLetter+0x8c8>)
 80016aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ae:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80016b2:	4a4c      	ldr	r2, [pc, #304]	@ (80017e4 <SignLetter+0x8a4>)
 80016b4:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80016b6:	4b4c      	ldr	r3, [pc, #304]	@ (80017e8 <SignLetter+0x8a8>)
 80016b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016bc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80016c0:	4a4a      	ldr	r2, [pc, #296]	@ (80017ec <SignLetter+0x8ac>)
 80016c2:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80016c4:	4b4a      	ldr	r3, [pc, #296]	@ (80017f0 <SignLetter+0x8b0>)
 80016c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ca:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80016ce:	4a49      	ldr	r2, [pc, #292]	@ (80017f4 <SignLetter+0x8b4>)
 80016d0:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80016d2:	4b49      	ldr	r3, [pc, #292]	@ (80017f8 <SignLetter+0x8b8>)
 80016d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016d8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80016dc:	4a47      	ldr	r2, [pc, #284]	@ (80017fc <SignLetter+0x8bc>)
 80016de:	6013      	str	r3, [r2, #0]

	        case 'Y':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80016e0:	4b47      	ldr	r3, [pc, #284]	@ (8001800 <SignLetter+0x8c0>)
 80016e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016e6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80016ea:	4a46      	ldr	r2, [pc, #280]	@ (8001804 <SignLetter+0x8c4>)
 80016ec:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80016ee:	4b46      	ldr	r3, [pc, #280]	@ (8001808 <SignLetter+0x8c8>)
 80016f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016f4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80016f8:	4a3a      	ldr	r2, [pc, #232]	@ (80017e4 <SignLetter+0x8a4>)
 80016fa:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80016fc:	4b3a      	ldr	r3, [pc, #232]	@ (80017e8 <SignLetter+0x8a8>)
 80016fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001702:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001706:	4a39      	ldr	r2, [pc, #228]	@ (80017ec <SignLetter+0x8ac>)
 8001708:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800170a:	4b39      	ldr	r3, [pc, #228]	@ (80017f0 <SignLetter+0x8b0>)
 800170c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001710:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001714:	4a37      	ldr	r2, [pc, #220]	@ (80017f4 <SignLetter+0x8b4>)
 8001716:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001718:	4b37      	ldr	r3, [pc, #220]	@ (80017f8 <SignLetter+0x8b8>)
 800171a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800171e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001722:	4a36      	ldr	r2, [pc, #216]	@ (80017fc <SignLetter+0x8bc>)
 8001724:	6013      	str	r3, [r2, #0]

	        case 'Z':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001726:	4b36      	ldr	r3, [pc, #216]	@ (8001800 <SignLetter+0x8c0>)
 8001728:	f9b3 3000 	ldrsh.w	r3, [r3]
 800172c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001730:	4a34      	ldr	r2, [pc, #208]	@ (8001804 <SignLetter+0x8c4>)
 8001732:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001734:	4b34      	ldr	r3, [pc, #208]	@ (8001808 <SignLetter+0x8c8>)
 8001736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800173e:	4a29      	ldr	r2, [pc, #164]	@ (80017e4 <SignLetter+0x8a4>)
 8001740:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001742:	4b29      	ldr	r3, [pc, #164]	@ (80017e8 <SignLetter+0x8a8>)
 8001744:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001748:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800174c:	4a27      	ldr	r2, [pc, #156]	@ (80017ec <SignLetter+0x8ac>)
 800174e:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001750:	4b27      	ldr	r3, [pc, #156]	@ (80017f0 <SignLetter+0x8b0>)
 8001752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001756:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800175a:	4a26      	ldr	r2, [pc, #152]	@ (80017f4 <SignLetter+0x8b4>)
 800175c:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800175e:	4b26      	ldr	r3, [pc, #152]	@ (80017f8 <SignLetter+0x8b8>)
 8001760:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001764:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001768:	4a24      	ldr	r2, [pc, #144]	@ (80017fc <SignLetter+0x8bc>)
 800176a:	6013      	str	r3, [r2, #0]

	        default:
	            // Default position (rest)
	            Servo_StopAll();
 800176c:	f7ff fb74 	bl	8000e58 <Servo_StopAll>
	            break;
 8001770:	bf00      	nop
	    }

	    Servo_SetMotion(THUMB, Direction_Decider(&thumb_desired_position), 100);
 8001772:	4824      	ldr	r0, [pc, #144]	@ (8001804 <SignLetter+0x8c4>)
 8001774:	f7ff fbce 	bl	8000f14 <Direction_Decider>
 8001778:	4603      	mov	r3, r0
 800177a:	b2db      	uxtb	r3, r3
 800177c:	2264      	movs	r2, #100	@ 0x64
 800177e:	4619      	mov	r1, r3
 8001780:	2000      	movs	r0, #0
 8001782:	f7ff fae3 	bl	8000d4c <Servo_SetMotion>
	    Servo_SetMotion(INDEX, Direction_Decider(&index_desired_position), 100);
 8001786:	4817      	ldr	r0, [pc, #92]	@ (80017e4 <SignLetter+0x8a4>)
 8001788:	f7ff fbc4 	bl	8000f14 <Direction_Decider>
 800178c:	4603      	mov	r3, r0
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2264      	movs	r2, #100	@ 0x64
 8001792:	4619      	mov	r1, r3
 8001794:	2001      	movs	r0, #1
 8001796:	f7ff fad9 	bl	8000d4c <Servo_SetMotion>
	    Servo_SetMotion(MIDDLE, Direction_Decider(&middle_desired_position), 100);
 800179a:	4814      	ldr	r0, [pc, #80]	@ (80017ec <SignLetter+0x8ac>)
 800179c:	f7ff fbba 	bl	8000f14 <Direction_Decider>
 80017a0:	4603      	mov	r3, r0
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2264      	movs	r2, #100	@ 0x64
 80017a6:	4619      	mov	r1, r3
 80017a8:	2002      	movs	r0, #2
 80017aa:	f7ff facf 	bl	8000d4c <Servo_SetMotion>
	    Servo_SetMotion(RING, Direction_Decider(&ring_desired_position), 100);
 80017ae:	4811      	ldr	r0, [pc, #68]	@ (80017f4 <SignLetter+0x8b4>)
 80017b0:	f7ff fbb0 	bl	8000f14 <Direction_Decider>
 80017b4:	4603      	mov	r3, r0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2264      	movs	r2, #100	@ 0x64
 80017ba:	4619      	mov	r1, r3
 80017bc:	2003      	movs	r0, #3
 80017be:	f7ff fac5 	bl	8000d4c <Servo_SetMotion>
	    Servo_SetMotion(PINKY, Direction_Decider(&pinky_desired_position), 100);
 80017c2:	480e      	ldr	r0, [pc, #56]	@ (80017fc <SignLetter+0x8bc>)
 80017c4:	f7ff fba6 	bl	8000f14 <Direction_Decider>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2264      	movs	r2, #100	@ 0x64
 80017ce:	4619      	mov	r1, r3
 80017d0:	2004      	movs	r0, #4
 80017d2:	f7ff fabb 	bl	8000d4c <Servo_SetMotion>

	    // Return to neutral position
	    Servo_StopAll();
 80017d6:	f7ff fb3f 	bl	8000e58 <Servo_StopAll>
	}
 80017da:	bf00      	nop
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000398 	.word	0x20000398
 80017e8:	2000038c 	.word	0x2000038c
 80017ec:	2000039c 	.word	0x2000039c
 80017f0:	2000038e 	.word	0x2000038e
 80017f4:	200003a0 	.word	0x200003a0
 80017f8:	20000390 	.word	0x20000390
 80017fc:	200003a4 	.word	0x200003a4
 8001800:	20000388 	.word	0x20000388
 8001804:	20000394 	.word	0x20000394
 8001808:	2000038a 	.word	0x2000038a

0800180c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

	SignLetter('A');
 8001814:	2041      	movs	r0, #65	@ 0x41
 8001816:	f7ff fb93 	bl	8000f40 <SignLetter>

	osTimerStart(Index_FingerHandle, index_current);
 800181a:	4b18      	ldr	r3, [pc, #96]	@ (800187c <StartDefaultTask+0x70>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a18      	ldr	r2, [pc, #96]	@ (8001880 <StartDefaultTask+0x74>)
 8001820:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001824:	4611      	mov	r1, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f004 fadc 	bl	8005de4 <osTimerStart>
	osTimerStart(Thumb_FingerHandle, thumb_current);
 800182c:	4b15      	ldr	r3, [pc, #84]	@ (8001884 <StartDefaultTask+0x78>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a15      	ldr	r2, [pc, #84]	@ (8001888 <StartDefaultTask+0x7c>)
 8001832:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001836:	4611      	mov	r1, r2
 8001838:	4618      	mov	r0, r3
 800183a:	f004 fad3 	bl	8005de4 <osTimerStart>
	osTimerStart(Middle_FingerHandle, thumb_current);
 800183e:	4b13      	ldr	r3, [pc, #76]	@ (800188c <StartDefaultTask+0x80>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a11      	ldr	r2, [pc, #68]	@ (8001888 <StartDefaultTask+0x7c>)
 8001844:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001848:	4611      	mov	r1, r2
 800184a:	4618      	mov	r0, r3
 800184c:	f004 faca 	bl	8005de4 <osTimerStart>
	osTimerStart(Ring_FingerHandle, thumb_current);
 8001850:	4b0f      	ldr	r3, [pc, #60]	@ (8001890 <StartDefaultTask+0x84>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0c      	ldr	r2, [pc, #48]	@ (8001888 <StartDefaultTask+0x7c>)
 8001856:	f9b2 2000 	ldrsh.w	r2, [r2]
 800185a:	4611      	mov	r1, r2
 800185c:	4618      	mov	r0, r3
 800185e:	f004 fac1 	bl	8005de4 <osTimerStart>
	osTimerStart(Pinky_FingerHandle, thumb_current);
 8001862:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <StartDefaultTask+0x88>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a08      	ldr	r2, [pc, #32]	@ (8001888 <StartDefaultTask+0x7c>)
 8001868:	f9b2 2000 	ldrsh.w	r2, [r2]
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f004 fab8 	bl	8005de4 <osTimerStart>

  for(;;)
  {
    osDelay(1);
 8001874:	2001      	movs	r0, #1
 8001876:	f004 fa09 	bl	8005c8c <osDelay>
 800187a:	e7fb      	b.n	8001874 <StartDefaultTask+0x68>
 800187c:	20000270 	.word	0x20000270
 8001880:	2000038a 	.word	0x2000038a
 8001884:	20000274 	.word	0x20000274
 8001888:	20000388 	.word	0x20000388
 800188c:	20000278 	.word	0x20000278
 8001890:	2000027c 	.word	0x2000027c
 8001894:	20000280 	.word	0x20000280

08001898 <Index>:
  /* USER CODE END 5 */
}

/* Index function */
void Index(void *argument)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Index */

  /* USER CODE END Index */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <Thumb>:

/* Thumb function */
void Thumb(void *argument)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thumb */

  /* USER CODE END Thumb */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <Middle>:

/* Middle function */
void Middle(void *argument)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Middle */

  /* USER CODE END Middle */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <Ring>:

/* Ring function */
void Ring(void *argument)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ring */

  /* USER CODE END Ring */
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr

080018e8 <Pinky>:

/* Pinky function */
void Pinky(void *argument)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Pinky */

  /* USER CODE END Pinky */
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a04      	ldr	r2, [pc, #16]	@ (800191c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800190e:	f000 facf 	bl	8001eb0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40000c00 	.word	0x40000c00

08001920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001924:	b672      	cpsid	i
}
 8001926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <Error_Handler+0x8>

0800192c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	4b11      	ldr	r3, [pc, #68]	@ (8001978 <HAL_MspInit+0x4c>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001936:	4a10      	ldr	r2, [pc, #64]	@ (8001978 <HAL_MspInit+0x4c>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6613      	str	r3, [r2, #96]	@ 0x60
 800193e:	4b0e      	ldr	r3, [pc, #56]	@ (8001978 <HAL_MspInit+0x4c>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	607b      	str	r3, [r7, #4]
 8001948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_MspInit+0x4c>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800194e:	4a0a      	ldr	r2, [pc, #40]	@ (8001978 <HAL_MspInit+0x4c>)
 8001950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001954:	6593      	str	r3, [r2, #88]	@ 0x58
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_MspInit+0x4c>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800195a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800195e:	603b      	str	r3, [r7, #0]
 8001960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001962:	2200      	movs	r2, #0
 8001964:	210f      	movs	r1, #15
 8001966:	f06f 0001 	mvn.w	r0, #1
 800196a:	f000 fb9d 	bl	80020a8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000

0800197c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800197c:	b480      	push	{r7}
 800197e:	b089      	sub	sp, #36	@ 0x24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a2e      	ldr	r2, [pc, #184]	@ (8001a44 <HAL_TIM_PWM_MspInit+0xc8>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d10c      	bne.n	80019a8 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800198e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 8001990:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001992:	4a2d      	ldr	r2, [pc, #180]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 8001994:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001998:	6613      	str	r3, [r2, #96]	@ 0x60
 800199a:	4b2b      	ldr	r3, [pc, #172]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 800199c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800199e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80019a6:	e046      	b.n	8001a36 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80019b0:	d10c      	bne.n	80019cc <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019b2:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 80019b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b6:	4a24      	ldr	r2, [pc, #144]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 80019b8:	f043 0301 	orr.w	r3, r3, #1
 80019bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80019be:	4b22      	ldr	r3, [pc, #136]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 80019c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	61bb      	str	r3, [r7, #24]
 80019c8:	69bb      	ldr	r3, [r7, #24]
}
 80019ca:	e034      	b.n	8001a36 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a1e      	ldr	r2, [pc, #120]	@ (8001a4c <HAL_TIM_PWM_MspInit+0xd0>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d10c      	bne.n	80019f0 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019da:	4a1b      	ldr	r2, [pc, #108]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 80019dc:	f043 0302 	orr.w	r3, r3, #2
 80019e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019e2:	4b19      	ldr	r3, [pc, #100]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	617b      	str	r3, [r7, #20]
 80019ec:	697b      	ldr	r3, [r7, #20]
}
 80019ee:	e022      	b.n	8001a36 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM4)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a16      	ldr	r2, [pc, #88]	@ (8001a50 <HAL_TIM_PWM_MspInit+0xd4>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d10c      	bne.n	8001a14 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019fa:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019fe:	4a12      	ldr	r2, [pc, #72]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a06:	4b10      	ldr	r3, [pc, #64]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
}
 8001a12:	e010      	b.n	8001a36 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM8)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a0e      	ldr	r2, [pc, #56]	@ (8001a54 <HAL_TIM_PWM_MspInit+0xd8>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d10b      	bne.n	8001a36 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a22:	4a09      	ldr	r2, [pc, #36]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a24:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001a28:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a2a:	4b07      	ldr	r3, [pc, #28]	@ (8001a48 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
}
 8001a36:	bf00      	nop
 8001a38:	3724      	adds	r7, #36	@ 0x24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40012c00 	.word	0x40012c00
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40000800 	.word	0x40000800
 8001a54:	40013400 	.word	0x40013400

08001a58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	@ 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a57      	ldr	r2, [pc, #348]	@ (8001bd4 <HAL_TIM_MspPostInit+0x17c>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d11e      	bne.n	8001ab8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7a:	4b57      	ldr	r3, [pc, #348]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a7e:	4a56      	ldr	r2, [pc, #344]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a86:	4b54      	ldr	r3, [pc, #336]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	61bb      	str	r3, [r7, #24]
 8001a90:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a98:	2302      	movs	r3, #2
 8001a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 031c 	add.w	r3, r7, #28
 8001aac:	4619      	mov	r1, r3
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab2:	f000 fb23 	bl	80020fc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001ab6:	e088      	b.n	8001bca <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM2)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ac0:	d11d      	bne.n	8001afe <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b45      	ldr	r3, [pc, #276]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ac6:	4a44      	ldr	r2, [pc, #272]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ace:	4b42      	ldr	r3, [pc, #264]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ada:	2301      	movs	r3, #1
 8001adc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aea:	2301      	movs	r3, #1
 8001aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001af8:	f000 fb00 	bl	80020fc <HAL_GPIO_Init>
}
 8001afc:	e065      	b.n	8001bca <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a36      	ldr	r2, [pc, #216]	@ (8001bdc <HAL_TIM_MspPostInit+0x184>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d11d      	bne.n	8001b44 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b08:	4b33      	ldr	r3, [pc, #204]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b0c:	4a32      	ldr	r2, [pc, #200]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b14:	4b30      	ldr	r3, [pc, #192]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	613b      	str	r3, [r7, #16]
 8001b1e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b20:	2340      	movs	r3, #64	@ 0x40
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b24:	2302      	movs	r3, #2
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b30:	2302      	movs	r3, #2
 8001b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b34:	f107 031c 	add.w	r3, r7, #28
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b3e:	f000 fadd 	bl	80020fc <HAL_GPIO_Init>
}
 8001b42:	e042      	b.n	8001bca <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a25      	ldr	r2, [pc, #148]	@ (8001be0 <HAL_TIM_MspPostInit+0x188>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d11c      	bne.n	8001b88 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	4b22      	ldr	r3, [pc, #136]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b52:	4a21      	ldr	r2, [pc, #132]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b5a:	4b1f      	ldr	r3, [pc, #124]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b66:	2340      	movs	r3, #64	@ 0x40
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b76:	2302      	movs	r3, #2
 8001b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 031c 	add.w	r3, r7, #28
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4818      	ldr	r0, [pc, #96]	@ (8001be4 <HAL_TIM_MspPostInit+0x18c>)
 8001b82:	f000 fabb 	bl	80020fc <HAL_GPIO_Init>
}
 8001b86:	e020      	b.n	8001bca <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM8)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a16      	ldr	r2, [pc, #88]	@ (8001be8 <HAL_TIM_MspPostInit+0x190>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d11b      	bne.n	8001bca <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b92:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001b94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b96:	4a10      	ldr	r2, [pc, #64]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001b98:	f043 0304 	orr.w	r3, r3, #4
 8001b9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd8 <HAL_TIM_MspPostInit+0x180>)
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	60bb      	str	r3, [r7, #8]
 8001ba8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001baa:	2340      	movs	r3, #64	@ 0x40
 8001bac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bbe:	f107 031c 	add.w	r3, r7, #28
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4809      	ldr	r0, [pc, #36]	@ (8001bec <HAL_TIM_MspPostInit+0x194>)
 8001bc6:	f000 fa99 	bl	80020fc <HAL_GPIO_Init>
}
 8001bca:	bf00      	nop
 8001bcc:	3730      	adds	r7, #48	@ 0x30
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40012c00 	.word	0x40012c00
 8001bd8:	40021000 	.word	0x40021000
 8001bdc:	40000400 	.word	0x40000400
 8001be0:	40000800 	.word	0x40000800
 8001be4:	48000400 	.word	0x48000400
 8001be8:	40013400 	.word	0x40013400
 8001bec:	48000800 	.word	0x48000800

08001bf0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b0ac      	sub	sp, #176	@ 0xb0
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c08:	f107 0314 	add.w	r3, r7, #20
 8001c0c:	2288      	movs	r2, #136	@ 0x88
 8001c0e:	2100      	movs	r1, #0
 8001c10:	4618      	mov	r0, r3
 8001c12:	f006 fe61 	bl	80088d8 <memset>
  if(huart->Instance==USART2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a25      	ldr	r2, [pc, #148]	@ (8001cb0 <HAL_UART_MspInit+0xc0>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d143      	bne.n	8001ca8 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c20:	2302      	movs	r3, #2
 8001c22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f001 fad5 	bl	80031dc <HAL_RCCEx_PeriphCLKConfig>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c38:	f7ff fe72 	bl	8001920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8001cb4 <HAL_UART_MspInit+0xc4>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c40:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb4 <HAL_UART_MspInit+0xc4>)
 8001c42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c48:	4b1a      	ldr	r3, [pc, #104]	@ (8001cb4 <HAL_UART_MspInit+0xc4>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	4b17      	ldr	r3, [pc, #92]	@ (8001cb4 <HAL_UART_MspInit+0xc4>)
 8001c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c58:	4a16      	ldr	r2, [pc, #88]	@ (8001cb4 <HAL_UART_MspInit+0xc4>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c60:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <HAL_UART_MspInit+0xc4>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c6c:	230c      	movs	r3, #12
 8001c6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c84:	2307      	movs	r3, #7
 8001c86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c8e:	4619      	mov	r1, r3
 8001c90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001c94:	f000 fa32 	bl	80020fc <HAL_GPIO_Init>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	2026      	movs	r0, #38	@ 0x26
 8001c9e:	f000 fa03 	bl	80020a8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ca2:	2026      	movs	r0, #38	@ 0x26
 8001ca4:	f000 fa1c 	bl	80020e0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001ca8:	bf00      	nop
 8001caa:	37b0      	adds	r7, #176	@ 0xb0
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40004400 	.word	0x40004400
 8001cb4:	40021000 	.word	0x40021000

08001cb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b08e      	sub	sp, #56	@ 0x38
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001cc6:	4b34      	ldr	r3, [pc, #208]	@ (8001d98 <HAL_InitTick+0xe0>)
 8001cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cca:	4a33      	ldr	r2, [pc, #204]	@ (8001d98 <HAL_InitTick+0xe0>)
 8001ccc:	f043 0308 	orr.w	r3, r3, #8
 8001cd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd2:	4b31      	ldr	r3, [pc, #196]	@ (8001d98 <HAL_InitTick+0xe0>)
 8001cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cd6:	f003 0308 	and.w	r3, r3, #8
 8001cda:	60fb      	str	r3, [r7, #12]
 8001cdc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cde:	f107 0210 	add.w	r2, r7, #16
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 f9e5 	bl	80030b8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d103      	bne.n	8001d00 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cf8:	f001 f9b2 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8001cfc:	6378      	str	r0, [r7, #52]	@ 0x34
 8001cfe:	e004      	b.n	8001d0a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d00:	f001 f9ae 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8001d04:	4603      	mov	r3, r0
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d0c:	4a23      	ldr	r2, [pc, #140]	@ (8001d9c <HAL_InitTick+0xe4>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0c9b      	lsrs	r3, r3, #18
 8001d14:	3b01      	subs	r3, #1
 8001d16:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001d18:	4b21      	ldr	r3, [pc, #132]	@ (8001da0 <HAL_InitTick+0xe8>)
 8001d1a:	4a22      	ldr	r2, [pc, #136]	@ (8001da4 <HAL_InitTick+0xec>)
 8001d1c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001d1e:	4b20      	ldr	r3, [pc, #128]	@ (8001da0 <HAL_InitTick+0xe8>)
 8001d20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d24:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001d26:	4a1e      	ldr	r2, [pc, #120]	@ (8001da0 <HAL_InitTick+0xe8>)
 8001d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2a:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001d2c:	4b1c      	ldr	r3, [pc, #112]	@ (8001da0 <HAL_InitTick+0xe8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d32:	4b1b      	ldr	r3, [pc, #108]	@ (8001da0 <HAL_InitTick+0xe8>)
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d38:	4b19      	ldr	r3, [pc, #100]	@ (8001da0 <HAL_InitTick+0xe8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001d3e:	4818      	ldr	r0, [pc, #96]	@ (8001da0 <HAL_InitTick+0xe8>)
 8001d40:	f001 ff08 	bl	8003b54 <HAL_TIM_Base_Init>
 8001d44:	4603      	mov	r3, r0
 8001d46:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001d4a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d11b      	bne.n	8001d8a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001d52:	4813      	ldr	r0, [pc, #76]	@ (8001da0 <HAL_InitTick+0xe8>)
 8001d54:	f001 ff60 	bl	8003c18 <HAL_TIM_Base_Start_IT>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001d5e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d111      	bne.n	8001d8a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001d66:	2032      	movs	r0, #50	@ 0x32
 8001d68:	f000 f9ba 	bl	80020e0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b0f      	cmp	r3, #15
 8001d70:	d808      	bhi.n	8001d84 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001d72:	2200      	movs	r2, #0
 8001d74:	6879      	ldr	r1, [r7, #4]
 8001d76:	2032      	movs	r0, #50	@ 0x32
 8001d78:	f000 f996 	bl	80020a8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d7c:	4a0a      	ldr	r2, [pc, #40]	@ (8001da8 <HAL_InitTick+0xf0>)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e002      	b.n	8001d8a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001d8a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3738      	adds	r7, #56	@ 0x38
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	431bde83 	.word	0x431bde83
 8001da0:	200003a8 	.word	0x200003a8
 8001da4:	40000c00 	.word	0x40000c00
 8001da8:	20000040 	.word	0x20000040

08001dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001db0:	bf00      	nop
 8001db2:	e7fd      	b.n	8001db0 <NMI_Handler+0x4>

08001db4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001db8:	bf00      	nop
 8001dba:	e7fd      	b.n	8001db8 <HardFault_Handler+0x4>

08001dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <MemManage_Handler+0x4>

08001dc4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc8:	bf00      	nop
 8001dca:	e7fd      	b.n	8001dc8 <BusFault_Handler+0x4>

08001dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <UsageFault_Handler+0x4>

08001dd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd8:	bf00      	nop
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
	...

08001de4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001de8:	4802      	ldr	r0, [pc, #8]	@ (8001df4 <TIM5_IRQHandler+0x10>)
 8001dea:	f002 f979 	bl	80040e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	200003a8 	.word	0x200003a8

08001df8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	@ (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e20:	f7ff ffea 	bl	8001df8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e24:	480c      	ldr	r0, [pc, #48]	@ (8001e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e26:	490d      	ldr	r1, [pc, #52]	@ (8001e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e28:	4a0d      	ldr	r2, [pc, #52]	@ (8001e60 <LoopForever+0xe>)
  movs r3, #0
 8001e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e2c:	e002      	b.n	8001e34 <LoopCopyDataInit>

08001e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e32:	3304      	adds	r3, #4

08001e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e38:	d3f9      	bcc.n	8001e2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e3a:	4a0a      	ldr	r2, [pc, #40]	@ (8001e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e3c:	4c0a      	ldr	r4, [pc, #40]	@ (8001e68 <LoopForever+0x16>)
  movs r3, #0
 8001e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e40:	e001      	b.n	8001e46 <LoopFillZerobss>

08001e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e44:	3204      	adds	r2, #4

08001e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e48:	d3fb      	bcc.n	8001e42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e4a:	f006 fd4d 	bl	80088e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e4e:	f7fe fb5d 	bl	800050c <main>

08001e52 <LoopForever>:

LoopForever:
    b LoopForever
 8001e52:	e7fe      	b.n	8001e52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e5c:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001e60:	08008b10 	.word	0x08008b10
  ldr r2, =_sbss
 8001e64:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001e68:	20001d00 	.word	0x20001d00

08001e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e6c:	e7fe      	b.n	8001e6c <ADC1_2_IRQHandler>
	...

08001e70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <HAL_Init+0x3c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	@ (8001eac <HAL_Init+0x3c>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e86:	2003      	movs	r0, #3
 8001e88:	f000 f903 	bl	8002092 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e8c:	200f      	movs	r0, #15
 8001e8e:	f7ff ff13 	bl	8001cb8 <HAL_InitTick>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	71fb      	strb	r3, [r7, #7]
 8001e9c:	e001      	b.n	8001ea2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e9e:	f7ff fd45 	bl	800192c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40022000 	.word	0x40022000

08001eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <HAL_IncTick+0x20>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <HAL_IncTick+0x24>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4413      	add	r3, r2
 8001ec0:	4a04      	ldr	r2, [pc, #16]	@ (8001ed4 <HAL_IncTick+0x24>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	20000044 	.word	0x20000044
 8001ed4:	200003f4 	.word	0x200003f4

08001ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  return uwTick;
 8001edc:	4b03      	ldr	r3, [pc, #12]	@ (8001eec <HAL_GetTick+0x14>)
 8001ede:	681b      	ldr	r3, [r3, #0]
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	200003f4 	.word	0x200003f4

08001ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ef8:	f7ff ffee 	bl	8001ed8 <HAL_GetTick>
 8001efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f08:	d005      	beq.n	8001f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f34 <HAL_Delay+0x44>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f16:	bf00      	nop
 8001f18:	f7ff ffde 	bl	8001ed8 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	429a      	cmp	r2, r3
 8001f26:	d8f7      	bhi.n	8001f18 <HAL_Delay+0x28>
  {
  }
}
 8001f28:	bf00      	nop
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	20000044 	.word	0x20000044

08001f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b085      	sub	sp, #20
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f48:	4b0c      	ldr	r3, [pc, #48]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f4e:	68ba      	ldr	r2, [r7, #8]
 8001f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f54:	4013      	ands	r3, r2
 8001f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f6a:	4a04      	ldr	r2, [pc, #16]	@ (8001f7c <__NVIC_SetPriorityGrouping+0x44>)
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	60d3      	str	r3, [r2, #12]
}
 8001f70:	bf00      	nop
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	e000ed00 	.word	0xe000ed00

08001f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f84:	4b04      	ldr	r3, [pc, #16]	@ (8001f98 <__NVIC_GetPriorityGrouping+0x18>)
 8001f86:	68db      	ldr	r3, [r3, #12]
 8001f88:	0a1b      	lsrs	r3, r3, #8
 8001f8a:	f003 0307 	and.w	r3, r3, #7
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f96:	4770      	bx	lr
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db0b      	blt.n	8001fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f003 021f 	and.w	r2, r3, #31
 8001fb4:	4907      	ldr	r1, [pc, #28]	@ (8001fd4 <__NVIC_EnableIRQ+0x38>)
 8001fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fba:	095b      	lsrs	r3, r3, #5
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8001fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	e000e100 	.word	0xe000e100

08001fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	4603      	mov	r3, r0
 8001fe0:	6039      	str	r1, [r7, #0]
 8001fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	db0a      	blt.n	8002002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	490c      	ldr	r1, [pc, #48]	@ (8002024 <__NVIC_SetPriority+0x4c>)
 8001ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ff6:	0112      	lsls	r2, r2, #4
 8001ff8:	b2d2      	uxtb	r2, r2
 8001ffa:	440b      	add	r3, r1
 8001ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002000:	e00a      	b.n	8002018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	4908      	ldr	r1, [pc, #32]	@ (8002028 <__NVIC_SetPriority+0x50>)
 8002008:	79fb      	ldrb	r3, [r7, #7]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	3b04      	subs	r3, #4
 8002010:	0112      	lsls	r2, r2, #4
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	440b      	add	r3, r1
 8002016:	761a      	strb	r2, [r3, #24]
}
 8002018:	bf00      	nop
 800201a:	370c      	adds	r7, #12
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr
 8002024:	e000e100 	.word	0xe000e100
 8002028:	e000ed00 	.word	0xe000ed00

0800202c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800202c:	b480      	push	{r7}
 800202e:	b089      	sub	sp, #36	@ 0x24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f003 0307 	and.w	r3, r3, #7
 800203e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	f1c3 0307 	rsb	r3, r3, #7
 8002046:	2b04      	cmp	r3, #4
 8002048:	bf28      	it	cs
 800204a:	2304      	movcs	r3, #4
 800204c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	3304      	adds	r3, #4
 8002052:	2b06      	cmp	r3, #6
 8002054:	d902      	bls.n	800205c <NVIC_EncodePriority+0x30>
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3b03      	subs	r3, #3
 800205a:	e000      	b.n	800205e <NVIC_EncodePriority+0x32>
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002060:	f04f 32ff 	mov.w	r2, #4294967295
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	43da      	mvns	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	401a      	ands	r2, r3
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002074:	f04f 31ff 	mov.w	r1, #4294967295
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	fa01 f303 	lsl.w	r3, r1, r3
 800207e:	43d9      	mvns	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002084:	4313      	orrs	r3, r2
         );
}
 8002086:	4618      	mov	r0, r3
 8002088:	3724      	adds	r7, #36	@ 0x24
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr

08002092 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b082      	sub	sp, #8
 8002096:	af00      	add	r7, sp, #0
 8002098:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f7ff ff4c 	bl	8001f38 <__NVIC_SetPriorityGrouping>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
 80020b4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020ba:	f7ff ff61 	bl	8001f80 <__NVIC_GetPriorityGrouping>
 80020be:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	68b9      	ldr	r1, [r7, #8]
 80020c4:	6978      	ldr	r0, [r7, #20]
 80020c6:	f7ff ffb1 	bl	800202c <NVIC_EncodePriority>
 80020ca:	4602      	mov	r2, r0
 80020cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020d0:	4611      	mov	r1, r2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff80 	bl	8001fd8 <__NVIC_SetPriority>
}
 80020d8:	bf00      	nop
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	4603      	mov	r3, r0
 80020e8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff ff54 	bl	8001f9c <__NVIC_EnableIRQ>
}
 80020f4:	bf00      	nop
 80020f6:	3708      	adds	r7, #8
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b087      	sub	sp, #28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800210a:	e17f      	b.n	800240c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	2101      	movs	r1, #1
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	4013      	ands	r3, r2
 800211a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 8171 	beq.w	8002406 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	2b01      	cmp	r3, #1
 800212e:	d005      	beq.n	800213c <HAL_GPIO_Init+0x40>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f003 0303 	and.w	r3, r3, #3
 8002138:	2b02      	cmp	r3, #2
 800213a:	d130      	bne.n	800219e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	2203      	movs	r2, #3
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	693a      	ldr	r2, [r7, #16]
 8002150:	4013      	ands	r3, r2
 8002152:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002172:	2201      	movs	r2, #1
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4013      	ands	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	091b      	lsrs	r3, r3, #4
 8002188:	f003 0201 	and.w	r2, r3, #1
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4313      	orrs	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d118      	bne.n	80021dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021b0:	2201      	movs	r2, #1
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	f003 0201 	and.w	r2, r3, #1
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b03      	cmp	r3, #3
 80021e6:	d017      	beq.n	8002218 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	2203      	movs	r2, #3
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	fa02 f303 	lsl.w	r3, r2, r3
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	4313      	orrs	r3, r2
 8002210:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f003 0303 	and.w	r3, r3, #3
 8002220:	2b02      	cmp	r3, #2
 8002222:	d123      	bne.n	800226c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f003 0307 	and.w	r3, r3, #7
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	220f      	movs	r2, #15
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	691a      	ldr	r2, [r3, #16]
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	08da      	lsrs	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3208      	adds	r2, #8
 8002266:	6939      	ldr	r1, [r7, #16]
 8002268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	2203      	movs	r2, #3
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	43db      	mvns	r3, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0203 	and.w	r2, r3, #3
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	005b      	lsls	r3, r3, #1
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	693a      	ldr	r2, [r7, #16]
 8002296:	4313      	orrs	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80ac 	beq.w	8002406 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ae:	4b5f      	ldr	r3, [pc, #380]	@ (800242c <HAL_GPIO_Init+0x330>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022b2:	4a5e      	ldr	r2, [pc, #376]	@ (800242c <HAL_GPIO_Init+0x330>)
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80022ba:	4b5c      	ldr	r3, [pc, #368]	@ (800242c <HAL_GPIO_Init+0x330>)
 80022bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022c6:	4a5a      	ldr	r2, [pc, #360]	@ (8002430 <HAL_GPIO_Init+0x334>)
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	089b      	lsrs	r3, r3, #2
 80022cc:	3302      	adds	r3, #2
 80022ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	220f      	movs	r2, #15
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	4013      	ands	r3, r2
 80022e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80022f0:	d025      	beq.n	800233e <HAL_GPIO_Init+0x242>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4f      	ldr	r2, [pc, #316]	@ (8002434 <HAL_GPIO_Init+0x338>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d01f      	beq.n	800233a <HAL_GPIO_Init+0x23e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4e      	ldr	r2, [pc, #312]	@ (8002438 <HAL_GPIO_Init+0x33c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d019      	beq.n	8002336 <HAL_GPIO_Init+0x23a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4d      	ldr	r2, [pc, #308]	@ (800243c <HAL_GPIO_Init+0x340>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d013      	beq.n	8002332 <HAL_GPIO_Init+0x236>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4c      	ldr	r2, [pc, #304]	@ (8002440 <HAL_GPIO_Init+0x344>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d00d      	beq.n	800232e <HAL_GPIO_Init+0x232>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4b      	ldr	r2, [pc, #300]	@ (8002444 <HAL_GPIO_Init+0x348>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d007      	beq.n	800232a <HAL_GPIO_Init+0x22e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4a      	ldr	r2, [pc, #296]	@ (8002448 <HAL_GPIO_Init+0x34c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d101      	bne.n	8002326 <HAL_GPIO_Init+0x22a>
 8002322:	2306      	movs	r3, #6
 8002324:	e00c      	b.n	8002340 <HAL_GPIO_Init+0x244>
 8002326:	2307      	movs	r3, #7
 8002328:	e00a      	b.n	8002340 <HAL_GPIO_Init+0x244>
 800232a:	2305      	movs	r3, #5
 800232c:	e008      	b.n	8002340 <HAL_GPIO_Init+0x244>
 800232e:	2304      	movs	r3, #4
 8002330:	e006      	b.n	8002340 <HAL_GPIO_Init+0x244>
 8002332:	2303      	movs	r3, #3
 8002334:	e004      	b.n	8002340 <HAL_GPIO_Init+0x244>
 8002336:	2302      	movs	r3, #2
 8002338:	e002      	b.n	8002340 <HAL_GPIO_Init+0x244>
 800233a:	2301      	movs	r3, #1
 800233c:	e000      	b.n	8002340 <HAL_GPIO_Init+0x244>
 800233e:	2300      	movs	r3, #0
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	f002 0203 	and.w	r2, r2, #3
 8002346:	0092      	lsls	r2, r2, #2
 8002348:	4093      	lsls	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	4313      	orrs	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002350:	4937      	ldr	r1, [pc, #220]	@ (8002430 <HAL_GPIO_Init+0x334>)
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	089b      	lsrs	r3, r3, #2
 8002356:	3302      	adds	r3, #2
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800235e:	4b3b      	ldr	r3, [pc, #236]	@ (800244c <HAL_GPIO_Init+0x350>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	43db      	mvns	r3, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4013      	ands	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002382:	4a32      	ldr	r2, [pc, #200]	@ (800244c <HAL_GPIO_Init+0x350>)
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002388:	4b30      	ldr	r3, [pc, #192]	@ (800244c <HAL_GPIO_Init+0x350>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	43db      	mvns	r3, r3
 8002392:	693a      	ldr	r2, [r7, #16]
 8002394:	4013      	ands	r3, r2
 8002396:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d003      	beq.n	80023ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023a4:	693a      	ldr	r2, [r7, #16]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023ac:	4a27      	ldr	r2, [pc, #156]	@ (800244c <HAL_GPIO_Init+0x350>)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023b2:	4b26      	ldr	r3, [pc, #152]	@ (800244c <HAL_GPIO_Init+0x350>)
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	43db      	mvns	r3, r3
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4013      	ands	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d003      	beq.n	80023d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023d6:	4a1d      	ldr	r2, [pc, #116]	@ (800244c <HAL_GPIO_Init+0x350>)
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023dc:	4b1b      	ldr	r3, [pc, #108]	@ (800244c <HAL_GPIO_Init+0x350>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	43db      	mvns	r3, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4013      	ands	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d003      	beq.n	8002400 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002400:	4a12      	ldr	r2, [pc, #72]	@ (800244c <HAL_GPIO_Init+0x350>)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa22 f303 	lsr.w	r3, r2, r3
 8002416:	2b00      	cmp	r3, #0
 8002418:	f47f ae78 	bne.w	800210c <HAL_GPIO_Init+0x10>
  }
}
 800241c:	bf00      	nop
 800241e:	bf00      	nop
 8002420:	371c      	adds	r7, #28
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000
 8002430:	40010000 	.word	0x40010000
 8002434:	48000400 	.word	0x48000400
 8002438:	48000800 	.word	0x48000800
 800243c:	48000c00 	.word	0x48000c00
 8002440:	48001000 	.word	0x48001000
 8002444:	48001400 	.word	0x48001400
 8002448:	48001800 	.word	0x48001800
 800244c:	40010400 	.word	0x40010400

08002450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002450:	b480      	push	{r7}
 8002452:	b085      	sub	sp, #20
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691a      	ldr	r2, [r3, #16]
 8002460:	887b      	ldrh	r3, [r7, #2]
 8002462:	4013      	ands	r3, r2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d002      	beq.n	800246e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002468:	2301      	movs	r3, #1
 800246a:	73fb      	strb	r3, [r7, #15]
 800246c:	e001      	b.n	8002472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800246e:	2300      	movs	r3, #0
 8002470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	460b      	mov	r3, r1
 800248a:	807b      	strh	r3, [r7, #2]
 800248c:	4613      	mov	r3, r2
 800248e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002490:	787b      	ldrb	r3, [r7, #1]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002496:	887a      	ldrh	r2, [r7, #2]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800249c:	e002      	b.n	80024a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800249e:	887a      	ldrh	r2, [r7, #2]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80024b4:	4b04      	ldr	r3, [pc, #16]	@ (80024c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80024bc:	4618      	mov	r0, r3
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40007000 	.word	0x40007000

080024cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b085      	sub	sp, #20
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024da:	d130      	bne.n	800253e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80024dc:	4b23      	ldr	r3, [pc, #140]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80024e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80024e8:	d038      	beq.n	800255c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024ea:	4b20      	ldr	r3, [pc, #128]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80024f2:	4a1e      	ldr	r2, [pc, #120]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024f4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2232      	movs	r2, #50	@ 0x32
 8002500:	fb02 f303 	mul.w	r3, r2, r3
 8002504:	4a1b      	ldr	r2, [pc, #108]	@ (8002574 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0c9b      	lsrs	r3, r3, #18
 800250c:	3301      	adds	r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002510:	e002      	b.n	8002518 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	3b01      	subs	r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002518:	4b14      	ldr	r3, [pc, #80]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002520:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002524:	d102      	bne.n	800252c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d1f2      	bne.n	8002512 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800252c:	4b0f      	ldr	r3, [pc, #60]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002538:	d110      	bne.n	800255c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e00f      	b.n	800255e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800253e:	4b0b      	ldr	r3, [pc, #44]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002546:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800254a:	d007      	beq.n	800255c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800254c:	4b07      	ldr	r3, [pc, #28]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002554:	4a05      	ldr	r2, [pc, #20]	@ (800256c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800255a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3714      	adds	r7, #20
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
 800256a:	bf00      	nop
 800256c:	40007000 	.word	0x40007000
 8002570:	2000003c 	.word	0x2000003c
 8002574:	431bde83 	.word	0x431bde83

08002578 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b088      	sub	sp, #32
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e3ca      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800258a:	4b97      	ldr	r3, [pc, #604]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002594:	4b94      	ldr	r3, [pc, #592]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0303 	and.w	r3, r3, #3
 800259c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 80e4 	beq.w	8002774 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_RCC_OscConfig+0x4a>
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b0c      	cmp	r3, #12
 80025b6:	f040 808b 	bne.w	80026d0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	f040 8087 	bne.w	80026d0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80025c2:	4b89      	ldr	r3, [pc, #548]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_RCC_OscConfig+0x62>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699b      	ldr	r3, [r3, #24]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e3a2      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1a      	ldr	r2, [r3, #32]
 80025de:	4b82      	ldr	r3, [pc, #520]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d004      	beq.n	80025f4 <HAL_RCC_OscConfig+0x7c>
 80025ea:	4b7f      	ldr	r3, [pc, #508]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025f2:	e005      	b.n	8002600 <HAL_RCC_OscConfig+0x88>
 80025f4:	4b7c      	ldr	r3, [pc, #496]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80025f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80025fa:	091b      	lsrs	r3, r3, #4
 80025fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002600:	4293      	cmp	r3, r2
 8002602:	d223      	bcs.n	800264c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4618      	mov	r0, r3
 800260a:	f000 fd87 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d001      	beq.n	8002618 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e383      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002618:	4b73      	ldr	r3, [pc, #460]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a72      	ldr	r2, [pc, #456]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 800261e:	f043 0308 	orr.w	r3, r3, #8
 8002622:	6013      	str	r3, [r2, #0]
 8002624:	4b70      	ldr	r3, [pc, #448]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	496d      	ldr	r1, [pc, #436]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002636:	4b6c      	ldr	r3, [pc, #432]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	021b      	lsls	r3, r3, #8
 8002644:	4968      	ldr	r1, [pc, #416]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002646:	4313      	orrs	r3, r2
 8002648:	604b      	str	r3, [r1, #4]
 800264a:	e025      	b.n	8002698 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800264c:	4b66      	ldr	r3, [pc, #408]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a65      	ldr	r2, [pc, #404]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002652:	f043 0308 	orr.w	r3, r3, #8
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b63      	ldr	r3, [pc, #396]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	4960      	ldr	r1, [pc, #384]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800266a:	4b5f      	ldr	r3, [pc, #380]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69db      	ldr	r3, [r3, #28]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	495b      	ldr	r1, [pc, #364]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 800267a:	4313      	orrs	r3, r2
 800267c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d109      	bne.n	8002698 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fd47 	bl	800311c <RCC_SetFlashLatencyFromMSIRange>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e343      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002698:	f000 fc4a 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 800269c:	4602      	mov	r2, r0
 800269e:	4b52      	ldr	r3, [pc, #328]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	f003 030f 	and.w	r3, r3, #15
 80026a8:	4950      	ldr	r1, [pc, #320]	@ (80027ec <HAL_RCC_OscConfig+0x274>)
 80026aa:	5ccb      	ldrb	r3, [r1, r3]
 80026ac:	f003 031f 	and.w	r3, r3, #31
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
 80026b4:	4a4e      	ldr	r2, [pc, #312]	@ (80027f0 <HAL_RCC_OscConfig+0x278>)
 80026b6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80026b8:	4b4e      	ldr	r3, [pc, #312]	@ (80027f4 <HAL_RCC_OscConfig+0x27c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff fafb 	bl	8001cb8 <HAL_InitTick>
 80026c2:	4603      	mov	r3, r0
 80026c4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d052      	beq.n	8002772 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	e327      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d032      	beq.n	800273e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80026d8:	4b43      	ldr	r3, [pc, #268]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a42      	ldr	r2, [pc, #264]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026e4:	f7ff fbf8 	bl	8001ed8 <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026ea:	e008      	b.n	80026fe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ec:	f7ff fbf4 	bl	8001ed8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e310      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026fe:	4b3a      	ldr	r3, [pc, #232]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800270a:	4b37      	ldr	r3, [pc, #220]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a36      	ldr	r2, [pc, #216]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002710:	f043 0308 	orr.w	r3, r3, #8
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b34      	ldr	r3, [pc, #208]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	4931      	ldr	r1, [pc, #196]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002724:	4313      	orrs	r3, r2
 8002726:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002728:	4b2f      	ldr	r3, [pc, #188]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	021b      	lsls	r3, r3, #8
 8002736:	492c      	ldr	r1, [pc, #176]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002738:	4313      	orrs	r3, r2
 800273a:	604b      	str	r3, [r1, #4]
 800273c:	e01a      	b.n	8002774 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800273e:	4b2a      	ldr	r3, [pc, #168]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a29      	ldr	r2, [pc, #164]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002744:	f023 0301 	bic.w	r3, r3, #1
 8002748:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800274a:	f7ff fbc5 	bl	8001ed8 <HAL_GetTick>
 800274e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002752:	f7ff fbc1 	bl	8001ed8 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e2dd      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002764:	4b20      	ldr	r3, [pc, #128]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d1f0      	bne.n	8002752 <HAL_RCC_OscConfig+0x1da>
 8002770:	e000      	b.n	8002774 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002772:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d074      	beq.n	800286a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	2b08      	cmp	r3, #8
 8002784:	d005      	beq.n	8002792 <HAL_RCC_OscConfig+0x21a>
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b0c      	cmp	r3, #12
 800278a:	d10e      	bne.n	80027aa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d10b      	bne.n	80027aa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002792:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d064      	beq.n	8002868 <HAL_RCC_OscConfig+0x2f0>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d160      	bne.n	8002868 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e2ba      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b2:	d106      	bne.n	80027c2 <HAL_RCC_OscConfig+0x24a>
 80027b4:	4b0c      	ldr	r3, [pc, #48]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a0b      	ldr	r2, [pc, #44]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80027ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027be:	6013      	str	r3, [r2, #0]
 80027c0:	e026      	b.n	8002810 <HAL_RCC_OscConfig+0x298>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ca:	d115      	bne.n	80027f8 <HAL_RCC_OscConfig+0x280>
 80027cc:	4b06      	ldr	r3, [pc, #24]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a05      	ldr	r2, [pc, #20]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80027d2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b03      	ldr	r3, [pc, #12]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a02      	ldr	r2, [pc, #8]	@ (80027e8 <HAL_RCC_OscConfig+0x270>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e2:	6013      	str	r3, [r2, #0]
 80027e4:	e014      	b.n	8002810 <HAL_RCC_OscConfig+0x298>
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	08008ab8 	.word	0x08008ab8
 80027f0:	2000003c 	.word	0x2000003c
 80027f4:	20000040 	.word	0x20000040
 80027f8:	4ba0      	ldr	r3, [pc, #640]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a9f      	ldr	r2, [pc, #636]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b9d      	ldr	r3, [pc, #628]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a9c      	ldr	r2, [pc, #624]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 800280a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800280e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d013      	beq.n	8002840 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002818:	f7ff fb5e 	bl	8001ed8 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002820:	f7ff fb5a 	bl	8001ed8 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b64      	cmp	r3, #100	@ 0x64
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e276      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002832:	4b92      	ldr	r3, [pc, #584]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x2a8>
 800283e:	e014      	b.n	800286a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002840:	f7ff fb4a 	bl	8001ed8 <HAL_GetTick>
 8002844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002846:	e008      	b.n	800285a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002848:	f7ff fb46 	bl	8001ed8 <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	2b64      	cmp	r3, #100	@ 0x64
 8002854:	d901      	bls.n	800285a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e262      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800285a:	4b88      	ldr	r3, [pc, #544]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d1f0      	bne.n	8002848 <HAL_RCC_OscConfig+0x2d0>
 8002866:	e000      	b.n	800286a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d060      	beq.n	8002938 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	2b04      	cmp	r3, #4
 800287a:	d005      	beq.n	8002888 <HAL_RCC_OscConfig+0x310>
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	2b0c      	cmp	r3, #12
 8002880:	d119      	bne.n	80028b6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d116      	bne.n	80028b6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002888:	4b7c      	ldr	r3, [pc, #496]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d005      	beq.n	80028a0 <HAL_RCC_OscConfig+0x328>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d101      	bne.n	80028a0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e23f      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a0:	4b76      	ldr	r3, [pc, #472]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	061b      	lsls	r3, r3, #24
 80028ae:	4973      	ldr	r1, [pc, #460]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028b4:	e040      	b.n	8002938 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d023      	beq.n	8002906 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028be:	4b6f      	ldr	r3, [pc, #444]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a6e      	ldr	r2, [pc, #440]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80028c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7ff fb05 	bl	8001ed8 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d2:	f7ff fb01 	bl	8001ed8 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e21d      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028e4:	4b65      	ldr	r3, [pc, #404]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4b62      	ldr	r3, [pc, #392]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	495f      	ldr	r1, [pc, #380]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002900:	4313      	orrs	r3, r2
 8002902:	604b      	str	r3, [r1, #4]
 8002904:	e018      	b.n	8002938 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002906:	4b5d      	ldr	r3, [pc, #372]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a5c      	ldr	r2, [pc, #368]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 800290c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002912:	f7ff fae1 	bl	8001ed8 <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800291a:	f7ff fadd 	bl	8001ed8 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e1f9      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800292c:	4b53      	ldr	r3, [pc, #332]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d03c      	beq.n	80029be <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01c      	beq.n	8002986 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800294c:	4b4b      	ldr	r3, [pc, #300]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 800294e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002952:	4a4a      	ldr	r2, [pc, #296]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800295c:	f7ff fabc 	bl	8001ed8 <HAL_GetTick>
 8002960:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002962:	e008      	b.n	8002976 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002964:	f7ff fab8 	bl	8001ed8 <HAL_GetTick>
 8002968:	4602      	mov	r2, r0
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	1ad3      	subs	r3, r2, r3
 800296e:	2b02      	cmp	r3, #2
 8002970:	d901      	bls.n	8002976 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e1d4      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002976:	4b41      	ldr	r3, [pc, #260]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002978:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d0ef      	beq.n	8002964 <HAL_RCC_OscConfig+0x3ec>
 8002984:	e01b      	b.n	80029be <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002986:	4b3d      	ldr	r3, [pc, #244]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002988:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800298c:	4a3b      	ldr	r2, [pc, #236]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 800298e:	f023 0301 	bic.w	r3, r3, #1
 8002992:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002996:	f7ff fa9f 	bl	8001ed8 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299e:	f7ff fa9b 	bl	8001ed8 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e1b7      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029b0:	4b32      	ldr	r3, [pc, #200]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80029b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1ef      	bne.n	800299e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0304 	and.w	r3, r3, #4
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 80a6 	beq.w	8002b18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029cc:	2300      	movs	r3, #0
 80029ce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80029d0:	4b2a      	ldr	r3, [pc, #168]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80029d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d10d      	bne.n	80029f8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029dc:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80029de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e0:	4a26      	ldr	r2, [pc, #152]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80029e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80029e8:	4b24      	ldr	r3, [pc, #144]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 80029ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029f4:	2301      	movs	r3, #1
 80029f6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029f8:	4b21      	ldr	r3, [pc, #132]	@ (8002a80 <HAL_RCC_OscConfig+0x508>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d118      	bne.n	8002a36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a04:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <HAL_RCC_OscConfig+0x508>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1d      	ldr	r2, [pc, #116]	@ (8002a80 <HAL_RCC_OscConfig+0x508>)
 8002a0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a10:	f7ff fa62 	bl	8001ed8 <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a18:	f7ff fa5e 	bl	8001ed8 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e17a      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a2a:	4b15      	ldr	r3, [pc, #84]	@ (8002a80 <HAL_RCC_OscConfig+0x508>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d108      	bne.n	8002a50 <HAL_RCC_OscConfig+0x4d8>
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a44:	4a0d      	ldr	r2, [pc, #52]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a4e:	e029      	b.n	8002aa4 <HAL_RCC_OscConfig+0x52c>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b05      	cmp	r3, #5
 8002a56:	d115      	bne.n	8002a84 <HAL_RCC_OscConfig+0x50c>
 8002a58:	4b08      	ldr	r3, [pc, #32]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a5e:	4a07      	ldr	r2, [pc, #28]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002a60:	f043 0304 	orr.w	r3, r3, #4
 8002a64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a6e:	4a03      	ldr	r2, [pc, #12]	@ (8002a7c <HAL_RCC_OscConfig+0x504>)
 8002a70:	f043 0301 	orr.w	r3, r3, #1
 8002a74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a78:	e014      	b.n	8002aa4 <HAL_RCC_OscConfig+0x52c>
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40007000 	.word	0x40007000
 8002a84:	4b9c      	ldr	r3, [pc, #624]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a8a:	4a9b      	ldr	r2, [pc, #620]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002a8c:	f023 0301 	bic.w	r3, r3, #1
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a94:	4b98      	ldr	r3, [pc, #608]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a9a:	4a97      	ldr	r2, [pc, #604]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002a9c:	f023 0304 	bic.w	r3, r3, #4
 8002aa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d016      	beq.n	8002ada <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aac:	f7ff fa14 	bl	8001ed8 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ab2:	e00a      	b.n	8002aca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ab4:	f7ff fa10 	bl	8001ed8 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e12a      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aca:	4b8b      	ldr	r3, [pc, #556]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d0ed      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x53c>
 8002ad8:	e015      	b.n	8002b06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ada:	f7ff f9fd 	bl	8001ed8 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ae0:	e00a      	b.n	8002af8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae2:	f7ff f9f9 	bl	8001ed8 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e113      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002af8:	4b7f      	ldr	r3, [pc, #508]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afe:	f003 0302 	and.w	r3, r3, #2
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1ed      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b06:	7ffb      	ldrb	r3, [r7, #31]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d105      	bne.n	8002b18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b0c:	4b7a      	ldr	r3, [pc, #488]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b10:	4a79      	ldr	r2, [pc, #484]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002b12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b16:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80fe 	beq.w	8002d1e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	f040 80d0 	bne.w	8002ccc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b2c:	4b72      	ldr	r3, [pc, #456]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	f003 0203 	and.w	r2, r3, #3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d130      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d127      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d11f      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002b6c:	2a07      	cmp	r2, #7
 8002b6e:	bf14      	ite	ne
 8002b70:	2201      	movne	r2, #1
 8002b72:	2200      	moveq	r2, #0
 8002b74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d113      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b84:	085b      	lsrs	r3, r3, #1
 8002b86:	3b01      	subs	r3, #1
 8002b88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d109      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	085b      	lsrs	r3, r3, #1
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d06e      	beq.n	8002c80 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	2b0c      	cmp	r3, #12
 8002ba6:	d069      	beq.n	8002c7c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ba8:	4b53      	ldr	r3, [pc, #332]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d105      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bb4:	4b50      	ldr	r3, [pc, #320]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0ad      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bc4:	4b4c      	ldr	r3, [pc, #304]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a4b      	ldr	r2, [pc, #300]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002bca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bd0:	f7ff f982 	bl	8001ed8 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7ff f97e 	bl	8001ed8 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e09a      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bea:	4b43      	ldr	r3, [pc, #268]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1f0      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bf6:	4b40      	ldr	r3, [pc, #256]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	4b40      	ldr	r3, [pc, #256]	@ (8002cfc <HAL_RCC_OscConfig+0x784>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c06:	3a01      	subs	r2, #1
 8002c08:	0112      	lsls	r2, r2, #4
 8002c0a:	4311      	orrs	r1, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c10:	0212      	lsls	r2, r2, #8
 8002c12:	4311      	orrs	r1, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c18:	0852      	lsrs	r2, r2, #1
 8002c1a:	3a01      	subs	r2, #1
 8002c1c:	0552      	lsls	r2, r2, #21
 8002c1e:	4311      	orrs	r1, r2
 8002c20:	687a      	ldr	r2, [r7, #4]
 8002c22:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c24:	0852      	lsrs	r2, r2, #1
 8002c26:	3a01      	subs	r2, #1
 8002c28:	0652      	lsls	r2, r2, #25
 8002c2a:	4311      	orrs	r1, r2
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c30:	0912      	lsrs	r2, r2, #4
 8002c32:	0452      	lsls	r2, r2, #17
 8002c34:	430a      	orrs	r2, r1
 8002c36:	4930      	ldr	r1, [pc, #192]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c3c:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a2d      	ldr	r2, [pc, #180]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002c42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c46:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c48:	4b2b      	ldr	r3, [pc, #172]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002c4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c52:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c54:	f7ff f940 	bl	8001ed8 <HAL_GetTick>
 8002c58:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c5a:	e008      	b.n	8002c6e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c5c:	f7ff f93c 	bl	8001ed8 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d901      	bls.n	8002c6e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c6a:	2303      	movs	r3, #3
 8002c6c:	e058      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6e:	4b22      	ldr	r3, [pc, #136]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d0f0      	beq.n	8002c5c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c7a:	e050      	b.n	8002d1e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e04f      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c80:	4b1d      	ldr	r3, [pc, #116]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d148      	bne.n	8002d1e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a19      	ldr	r2, [pc, #100]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002c92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c98:	4b17      	ldr	r3, [pc, #92]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	4a16      	ldr	r2, [pc, #88]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002c9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ca2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ca4:	f7ff f918 	bl	8001ed8 <HAL_GetTick>
 8002ca8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cac:	f7ff f914 	bl	8001ed8 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e030      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0f0      	beq.n	8002cac <HAL_RCC_OscConfig+0x734>
 8002cca:	e028      	b.n	8002d1e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	2b0c      	cmp	r3, #12
 8002cd0:	d023      	beq.n	8002d1a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd2:	4b09      	ldr	r3, [pc, #36]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a08      	ldr	r2, [pc, #32]	@ (8002cf8 <HAL_RCC_OscConfig+0x780>)
 8002cd8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cde:	f7ff f8fb 	bl	8001ed8 <HAL_GetTick>
 8002ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce4:	e00c      	b.n	8002d00 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce6:	f7ff f8f7 	bl	8001ed8 <HAL_GetTick>
 8002cea:	4602      	mov	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d905      	bls.n	8002d00 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e013      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d00:	4b09      	ldr	r3, [pc, #36]	@ (8002d28 <HAL_RCC_OscConfig+0x7b0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d1ec      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d0c:	4b06      	ldr	r3, [pc, #24]	@ (8002d28 <HAL_RCC_OscConfig+0x7b0>)
 8002d0e:	68da      	ldr	r2, [r3, #12]
 8002d10:	4905      	ldr	r1, [pc, #20]	@ (8002d28 <HAL_RCC_OscConfig+0x7b0>)
 8002d12:	4b06      	ldr	r3, [pc, #24]	@ (8002d2c <HAL_RCC_OscConfig+0x7b4>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	60cb      	str	r3, [r1, #12]
 8002d18:	e001      	b.n	8002d1e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e000      	b.n	8002d20 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3720      	adds	r7, #32
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	feeefffc 	.word	0xfeeefffc

08002d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e0e7      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d44:	4b75      	ldr	r3, [pc, #468]	@ (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d910      	bls.n	8002d74 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d52:	4b72      	ldr	r3, [pc, #456]	@ (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 0207 	bic.w	r2, r3, #7
 8002d5a:	4970      	ldr	r1, [pc, #448]	@ (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b6e      	ldr	r3, [pc, #440]	@ (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e0cf      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0302 	and.w	r3, r3, #2
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d010      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	4b66      	ldr	r3, [pc, #408]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d908      	bls.n	8002da2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d90:	4b63      	ldr	r3, [pc, #396]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002d92:	689b      	ldr	r3, [r3, #8]
 8002d94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	4960      	ldr	r1, [pc, #384]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0301 	and.w	r3, r3, #1
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d04c      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	2b03      	cmp	r3, #3
 8002db4:	d107      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002db6:	4b5a      	ldr	r3, [pc, #360]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d121      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e0a6      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	2b02      	cmp	r3, #2
 8002dcc:	d107      	bne.n	8002dde <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dce:	4b54      	ldr	r3, [pc, #336]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d115      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e09a      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d107      	bne.n	8002df6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002de6:	4b4e      	ldr	r3, [pc, #312]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0302 	and.w	r3, r3, #2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d109      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e08e      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002df6:	4b4a      	ldr	r3, [pc, #296]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e086      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e06:	4b46      	ldr	r3, [pc, #280]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f023 0203 	bic.w	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	4943      	ldr	r1, [pc, #268]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e18:	f7ff f85e 	bl	8001ed8 <HAL_GetTick>
 8002e1c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e1e:	e00a      	b.n	8002e36 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e20:	f7ff f85a 	bl	8001ed8 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e06e      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e36:	4b3a      	ldr	r3, [pc, #232]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 020c 	and.w	r2, r3, #12
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d1eb      	bne.n	8002e20 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0302 	and.w	r3, r3, #2
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	4b31      	ldr	r3, [pc, #196]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d208      	bcs.n	8002e76 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e64:	4b2e      	ldr	r3, [pc, #184]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	492b      	ldr	r1, [pc, #172]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e76:	4b29      	ldr	r3, [pc, #164]	@ (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 0307 	and.w	r3, r3, #7
 8002e7e:	683a      	ldr	r2, [r7, #0]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d210      	bcs.n	8002ea6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e84:	4b25      	ldr	r3, [pc, #148]	@ (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f023 0207 	bic.w	r2, r3, #7
 8002e8c:	4923      	ldr	r1, [pc, #140]	@ (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e94:	4b21      	ldr	r3, [pc, #132]	@ (8002f1c <HAL_RCC_ClockConfig+0x1ec>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0307 	and.w	r3, r3, #7
 8002e9c:	683a      	ldr	r2, [r7, #0]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d001      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e036      	b.n	8002f14 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0304 	and.w	r3, r3, #4
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d008      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4918      	ldr	r1, [pc, #96]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d009      	beq.n	8002ee4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ed0:	4b13      	ldr	r3, [pc, #76]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	4910      	ldr	r1, [pc, #64]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ee4:	f000 f824 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <HAL_RCC_ClockConfig+0x1f0>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	091b      	lsrs	r3, r3, #4
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	490b      	ldr	r1, [pc, #44]	@ (8002f24 <HAL_RCC_ClockConfig+0x1f4>)
 8002ef6:	5ccb      	ldrb	r3, [r1, r3]
 8002ef8:	f003 031f 	and.w	r3, r3, #31
 8002efc:	fa22 f303 	lsr.w	r3, r2, r3
 8002f00:	4a09      	ldr	r2, [pc, #36]	@ (8002f28 <HAL_RCC_ClockConfig+0x1f8>)
 8002f02:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f04:	4b09      	ldr	r3, [pc, #36]	@ (8002f2c <HAL_RCC_ClockConfig+0x1fc>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7fe fed5 	bl	8001cb8 <HAL_InitTick>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f12:	7afb      	ldrb	r3, [r7, #11]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3710      	adds	r7, #16
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40022000 	.word	0x40022000
 8002f20:	40021000 	.word	0x40021000
 8002f24:	08008ab8 	.word	0x08008ab8
 8002f28:	2000003c 	.word	0x2000003c
 8002f2c:	20000040 	.word	0x20000040

08002f30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b089      	sub	sp, #36	@ 0x24
 8002f34:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f36:	2300      	movs	r3, #0
 8002f38:	61fb      	str	r3, [r7, #28]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 030c 	and.w	r3, r3, #12
 8002f46:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f48:	4b3b      	ldr	r3, [pc, #236]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_GetSysClockFreq+0x34>
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	2b0c      	cmp	r3, #12
 8002f5c:	d121      	bne.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d11e      	bne.n	8002fa2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f64:	4b34      	ldr	r3, [pc, #208]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f70:	4b31      	ldr	r3, [pc, #196]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 030f 	and.w	r3, r3, #15
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	e005      	b.n	8002f8c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f80:	4b2d      	ldr	r3, [pc, #180]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f8c:	4a2b      	ldr	r2, [pc, #172]	@ (800303c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f94:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10d      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d102      	bne.n	8002fae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fa8:	4b25      	ldr	r3, [pc, #148]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x110>)
 8002faa:	61bb      	str	r3, [r7, #24]
 8002fac:	e004      	b.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	2b08      	cmp	r3, #8
 8002fb2:	d101      	bne.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fb4:	4b23      	ldr	r3, [pc, #140]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fb6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b0c      	cmp	r3, #12
 8002fbc:	d134      	bne.n	8003028 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d003      	beq.n	8002fd6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d003      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0xac>
 8002fd4:	e005      	b.n	8002fe2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8003040 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fd8:	617b      	str	r3, [r7, #20]
      break;
 8002fda:	e005      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fdc:	4b19      	ldr	r3, [pc, #100]	@ (8003044 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fde:	617b      	str	r3, [r7, #20]
      break;
 8002fe0:	e002      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	617b      	str	r3, [r7, #20]
      break;
 8002fe6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	fb03 f202 	mul.w	r2, r3, r2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	fbb2 f3f3 	udiv	r3, r2, r3
 800300c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800300e:	4b0a      	ldr	r3, [pc, #40]	@ (8003038 <HAL_RCC_GetSysClockFreq+0x108>)
 8003010:	68db      	ldr	r3, [r3, #12]
 8003012:	0e5b      	lsrs	r3, r3, #25
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	3301      	adds	r3, #1
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	fbb2 f3f3 	udiv	r3, r2, r3
 8003026:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003028:	69bb      	ldr	r3, [r7, #24]
}
 800302a:	4618      	mov	r0, r3
 800302c:	3724      	adds	r7, #36	@ 0x24
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40021000 	.word	0x40021000
 800303c:	08008ad0 	.word	0x08008ad0
 8003040:	00f42400 	.word	0x00f42400
 8003044:	007a1200 	.word	0x007a1200

08003048 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800304c:	4b03      	ldr	r3, [pc, #12]	@ (800305c <HAL_RCC_GetHCLKFreq+0x14>)
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	2000003c 	.word	0x2000003c

08003060 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003064:	f7ff fff0 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003068:	4602      	mov	r2, r0
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <HAL_RCC_GetPCLK1Freq+0x24>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	0a1b      	lsrs	r3, r3, #8
 8003070:	f003 0307 	and.w	r3, r3, #7
 8003074:	4904      	ldr	r1, [pc, #16]	@ (8003088 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003076:	5ccb      	ldrb	r3, [r1, r3]
 8003078:	f003 031f 	and.w	r3, r3, #31
 800307c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003080:	4618      	mov	r0, r3
 8003082:	bd80      	pop	{r7, pc}
 8003084:	40021000 	.word	0x40021000
 8003088:	08008ac8 	.word	0x08008ac8

0800308c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003090:	f7ff ffda 	bl	8003048 <HAL_RCC_GetHCLKFreq>
 8003094:	4602      	mov	r2, r0
 8003096:	4b06      	ldr	r3, [pc, #24]	@ (80030b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0adb      	lsrs	r3, r3, #11
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4904      	ldr	r1, [pc, #16]	@ (80030b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030a2:	5ccb      	ldrb	r3, [r1, r3]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	08008ac8 	.word	0x08008ac8

080030b8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	220f      	movs	r2, #15
 80030c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80030c8:	4b12      	ldr	r3, [pc, #72]	@ (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	f003 0203 	and.w	r2, r3, #3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80030d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80030e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80030ec:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <HAL_RCC_GetClockConfig+0x5c>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	08db      	lsrs	r3, r3, #3
 80030f2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80030fa:	4b07      	ldr	r3, [pc, #28]	@ (8003118 <HAL_RCC_GetClockConfig+0x60>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0207 	and.w	r2, r3, #7
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	601a      	str	r2, [r3, #0]
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40021000 	.word	0x40021000
 8003118:	40022000 	.word	0x40022000

0800311c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b086      	sub	sp, #24
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003124:	2300      	movs	r3, #0
 8003126:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003128:	4b2a      	ldr	r3, [pc, #168]	@ (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800312a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800312c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003134:	f7ff f9bc 	bl	80024b0 <HAL_PWREx_GetVoltageRange>
 8003138:	6178      	str	r0, [r7, #20]
 800313a:	e014      	b.n	8003166 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800313c:	4b25      	ldr	r3, [pc, #148]	@ (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800313e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003140:	4a24      	ldr	r2, [pc, #144]	@ (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003146:	6593      	str	r3, [r2, #88]	@ 0x58
 8003148:	4b22      	ldr	r3, [pc, #136]	@ (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003154:	f7ff f9ac 	bl	80024b0 <HAL_PWREx_GetVoltageRange>
 8003158:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800315a:	4b1e      	ldr	r3, [pc, #120]	@ (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800315c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315e:	4a1d      	ldr	r2, [pc, #116]	@ (80031d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003164:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800316c:	d10b      	bne.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b80      	cmp	r3, #128	@ 0x80
 8003172:	d919      	bls.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2ba0      	cmp	r3, #160	@ 0xa0
 8003178:	d902      	bls.n	8003180 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800317a:	2302      	movs	r3, #2
 800317c:	613b      	str	r3, [r7, #16]
 800317e:	e013      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003180:	2301      	movs	r3, #1
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	e010      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b80      	cmp	r3, #128	@ 0x80
 800318a:	d902      	bls.n	8003192 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800318c:	2303      	movs	r3, #3
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	e00a      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2b80      	cmp	r3, #128	@ 0x80
 8003196:	d102      	bne.n	800319e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003198:	2302      	movs	r3, #2
 800319a:	613b      	str	r3, [r7, #16]
 800319c:	e004      	b.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b70      	cmp	r3, #112	@ 0x70
 80031a2:	d101      	bne.n	80031a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031a4:	2301      	movs	r3, #1
 80031a6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031a8:	4b0b      	ldr	r3, [pc, #44]	@ (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f023 0207 	bic.w	r2, r3, #7
 80031b0:	4909      	ldr	r1, [pc, #36]	@ (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031b8:	4b07      	ldr	r3, [pc, #28]	@ (80031d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d001      	beq.n	80031ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e000      	b.n	80031cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40021000 	.word	0x40021000
 80031d8:	40022000 	.word	0x40022000

080031dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031e4:	2300      	movs	r3, #0
 80031e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031e8:	2300      	movs	r3, #0
 80031ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d041      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80031fc:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003200:	d02a      	beq.n	8003258 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003202:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003206:	d824      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003208:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800320c:	d008      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800320e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003212:	d81e      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00a      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003218:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800321c:	d010      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800321e:	e018      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003220:	4b86      	ldr	r3, [pc, #536]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4a85      	ldr	r2, [pc, #532]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800322a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800322c:	e015      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	3304      	adds	r3, #4
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fabb 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 800323a:	4603      	mov	r3, r0
 800323c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800323e:	e00c      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	3320      	adds	r3, #32
 8003244:	2100      	movs	r1, #0
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fba6 	bl	8003998 <RCCEx_PLLSAI2_Config>
 800324c:	4603      	mov	r3, r0
 800324e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003250:	e003      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	74fb      	strb	r3, [r7, #19]
      break;
 8003256:	e000      	b.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003258:	bf00      	nop
    }

    if(ret == HAL_OK)
 800325a:	7cfb      	ldrb	r3, [r7, #19]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d10b      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003260:	4b76      	ldr	r3, [pc, #472]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003266:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800326e:	4973      	ldr	r1, [pc, #460]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	4313      	orrs	r3, r2
 8003272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003276:	e001      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003278:	7cfb      	ldrb	r3, [r7, #19]
 800327a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d041      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800328c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003290:	d02a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003292:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003296:	d824      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003298:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800329c:	d008      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800329e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032a2:	d81e      	bhi.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00a      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032ac:	d010      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ae:	e018      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032b0:	4b62      	ldr	r3, [pc, #392]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a61      	ldr	r2, [pc, #388]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032bc:	e015      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2100      	movs	r1, #0
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fa73 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 80032ca:	4603      	mov	r3, r0
 80032cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032ce:	e00c      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	3320      	adds	r3, #32
 80032d4:	2100      	movs	r1, #0
 80032d6:	4618      	mov	r0, r3
 80032d8:	f000 fb5e 	bl	8003998 <RCCEx_PLLSAI2_Config>
 80032dc:	4603      	mov	r3, r0
 80032de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80032e0:	e003      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	74fb      	strb	r3, [r7, #19]
      break;
 80032e6:	e000      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80032e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032ea:	7cfb      	ldrb	r3, [r7, #19]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d10b      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032f0:	4b52      	ldr	r3, [pc, #328]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032f6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032fe:	494f      	ldr	r1, [pc, #316]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003306:	e001      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003308:	7cfb      	ldrb	r3, [r7, #19]
 800330a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80a0 	beq.w	800345a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331a:	2300      	movs	r3, #0
 800331c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800331e:	4b47      	ldr	r3, [pc, #284]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800332e:	2300      	movs	r3, #0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003334:	4b41      	ldr	r3, [pc, #260]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003338:	4a40      	ldr	r2, [pc, #256]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800333e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003340:	4b3e      	ldr	r3, [pc, #248]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334c:	2301      	movs	r3, #1
 800334e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003350:	4b3b      	ldr	r3, [pc, #236]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a3a      	ldr	r2, [pc, #232]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003356:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800335a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800335c:	f7fe fdbc 	bl	8001ed8 <HAL_GetTick>
 8003360:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003362:	e009      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003364:	f7fe fdb8 	bl	8001ed8 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d902      	bls.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	74fb      	strb	r3, [r7, #19]
        break;
 8003376:	e005      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003378:	4b31      	ldr	r3, [pc, #196]	@ (8003440 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0ef      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003384:	7cfb      	ldrb	r3, [r7, #19]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d15c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800338a:	4b2c      	ldr	r3, [pc, #176]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800338c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003390:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003394:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d01f      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d019      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033a8:	4b24      	ldr	r3, [pc, #144]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033b4:	4b21      	ldr	r3, [pc, #132]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ba:	4a20      	ldr	r2, [pc, #128]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80033c4:	4b1d      	ldr	r3, [pc, #116]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ca:	4a1c      	ldr	r2, [pc, #112]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80033d4:	4a19      	ldr	r2, [pc, #100]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d016      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033e6:	f7fe fd77 	bl	8001ed8 <HAL_GetTick>
 80033ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80033ec:	e00b      	b.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fe fd73 	bl	8001ed8 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d902      	bls.n	8003406 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	74fb      	strb	r3, [r7, #19]
            break;
 8003404:	e006      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003406:	4b0d      	ldr	r3, [pc, #52]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d0ec      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003414:	7cfb      	ldrb	r3, [r7, #19]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10c      	bne.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800341a:	4b08      	ldr	r3, [pc, #32]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003420:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800342a:	4904      	ldr	r1, [pc, #16]	@ (800343c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342c:	4313      	orrs	r3, r2
 800342e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003432:	e009      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003434:	7cfb      	ldrb	r3, [r7, #19]
 8003436:	74bb      	strb	r3, [r7, #18]
 8003438:	e006      	b.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800343a:	bf00      	nop
 800343c:	40021000 	.word	0x40021000
 8003440:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003444:	7cfb      	ldrb	r3, [r7, #19]
 8003446:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003448:	7c7b      	ldrb	r3, [r7, #17]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d105      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800344e:	4b9e      	ldr	r3, [pc, #632]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003450:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003452:	4a9d      	ldr	r2, [pc, #628]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003458:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003466:	4b98      	ldr	r3, [pc, #608]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346c:	f023 0203 	bic.w	r2, r3, #3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003474:	4994      	ldr	r1, [pc, #592]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003488:	4b8f      	ldr	r3, [pc, #572]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348e:	f023 020c 	bic.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003496:	498c      	ldr	r1, [pc, #560]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034aa:	4b87      	ldr	r3, [pc, #540]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b8:	4983      	ldr	r1, [pc, #524]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80034cc:	4b7e      	ldr	r3, [pc, #504]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034da:	497b      	ldr	r1, [pc, #492]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0310 	and.w	r3, r3, #16
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80034ee:	4b76      	ldr	r3, [pc, #472]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034fc:	4972      	ldr	r1, [pc, #456]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0320 	and.w	r3, r3, #32
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003510:	4b6d      	ldr	r3, [pc, #436]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003516:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351e:	496a      	ldr	r1, [pc, #424]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003532:	4b65      	ldr	r3, [pc, #404]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003534:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003538:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003540:	4961      	ldr	r1, [pc, #388]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003542:	4313      	orrs	r3, r2
 8003544:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003550:	2b00      	cmp	r3, #0
 8003552:	d00a      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003554:	4b5c      	ldr	r3, [pc, #368]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003562:	4959      	ldr	r1, [pc, #356]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003572:	2b00      	cmp	r3, #0
 8003574:	d00a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003576:	4b54      	ldr	r3, [pc, #336]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800357c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003584:	4950      	ldr	r1, [pc, #320]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003586:	4313      	orrs	r3, r2
 8003588:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00a      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003598:	4b4b      	ldr	r3, [pc, #300]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800359e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035a6:	4948      	ldr	r1, [pc, #288]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80035ba:	4b43      	ldr	r3, [pc, #268]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c8:	493f      	ldr	r1, [pc, #252]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d028      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035dc:	4b3a      	ldr	r3, [pc, #232]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035e2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035ea:	4937      	ldr	r1, [pc, #220]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035fa:	d106      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035fc:	4b32      	ldr	r3, [pc, #200]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	4a31      	ldr	r2, [pc, #196]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003602:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003606:	60d3      	str	r3, [r2, #12]
 8003608:	e011      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800360e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003612:	d10c      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	2101      	movs	r1, #1
 800361a:	4618      	mov	r0, r3
 800361c:	f000 f8c8 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 8003620:	4603      	mov	r3, r0
 8003622:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003624:	7cfb      	ldrb	r3, [r7, #19]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800362a:	7cfb      	ldrb	r3, [r7, #19]
 800362c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d028      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800363a:	4b23      	ldr	r3, [pc, #140]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003640:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003648:	491f      	ldr	r1, [pc, #124]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003654:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003658:	d106      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800365a:	4b1b      	ldr	r3, [pc, #108]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	4a1a      	ldr	r2, [pc, #104]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003660:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003664:	60d3      	str	r3, [r2, #12]
 8003666:	e011      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800366c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003670:	d10c      	bne.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3304      	adds	r3, #4
 8003676:	2101      	movs	r1, #1
 8003678:	4618      	mov	r0, r3
 800367a:	f000 f899 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 800367e:	4603      	mov	r3, r0
 8003680:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003682:	7cfb      	ldrb	r3, [r7, #19]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003688:	7cfb      	ldrb	r3, [r7, #19]
 800368a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d02b      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003698:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800369e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a6:	4908      	ldr	r1, [pc, #32]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036b6:	d109      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036b8:	4b03      	ldr	r3, [pc, #12]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	68db      	ldr	r3, [r3, #12]
 80036bc:	4a02      	ldr	r2, [pc, #8]	@ (80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036c2:	60d3      	str	r3, [r2, #12]
 80036c4:	e014      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3304      	adds	r3, #4
 80036da:	2101      	movs	r1, #1
 80036dc:	4618      	mov	r0, r3
 80036de:	f000 f867 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 80036e2:	4603      	mov	r3, r0
 80036e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036e6:	7cfb      	ldrb	r3, [r7, #19]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d02f      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036fc:	4b2b      	ldr	r3, [pc, #172]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003702:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800370a:	4928      	ldr	r1, [pc, #160]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800370c:	4313      	orrs	r3, r2
 800370e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003716:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800371a:	d10d      	bne.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	3304      	adds	r3, #4
 8003720:	2102      	movs	r1, #2
 8003722:	4618      	mov	r0, r3
 8003724:	f000 f844 	bl	80037b0 <RCCEx_PLLSAI1_Config>
 8003728:	4603      	mov	r3, r0
 800372a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d014      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003732:	7cfb      	ldrb	r3, [r7, #19]
 8003734:	74bb      	strb	r3, [r7, #18]
 8003736:	e011      	b.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800373c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003740:	d10c      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	3320      	adds	r3, #32
 8003746:	2102      	movs	r1, #2
 8003748:	4618      	mov	r0, r3
 800374a:	f000 f925 	bl	8003998 <RCCEx_PLLSAI2_Config>
 800374e:	4603      	mov	r3, r0
 8003750:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003752:	7cfb      	ldrb	r3, [r7, #19]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003758:	7cfb      	ldrb	r3, [r7, #19]
 800375a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003768:	4b10      	ldr	r3, [pc, #64]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800376a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800376e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003776:	490d      	ldr	r1, [pc, #52]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003778:	4313      	orrs	r3, r2
 800377a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00b      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800378a:	4b08      	ldr	r3, [pc, #32]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800378c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003790:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800379a:	4904      	ldr	r1, [pc, #16]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800379c:	4313      	orrs	r3, r2
 800379e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80037a2:	7cbb      	ldrb	r3, [r7, #18]
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3718      	adds	r7, #24
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40021000 	.word	0x40021000

080037b0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037be:	4b75      	ldr	r3, [pc, #468]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d018      	beq.n	80037fc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80037ca:	4b72      	ldr	r3, [pc, #456]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	f003 0203 	and.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d10d      	bne.n	80037f6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
       ||
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d009      	beq.n	80037f6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80037e2:	4b6c      	ldr	r3, [pc, #432]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	091b      	lsrs	r3, r3, #4
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	1c5a      	adds	r2, r3, #1
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
       ||
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d047      	beq.n	8003886 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
 80037fa:	e044      	b.n	8003886 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d018      	beq.n	8003836 <RCCEx_PLLSAI1_Config+0x86>
 8003804:	2b03      	cmp	r3, #3
 8003806:	d825      	bhi.n	8003854 <RCCEx_PLLSAI1_Config+0xa4>
 8003808:	2b01      	cmp	r3, #1
 800380a:	d002      	beq.n	8003812 <RCCEx_PLLSAI1_Config+0x62>
 800380c:	2b02      	cmp	r3, #2
 800380e:	d009      	beq.n	8003824 <RCCEx_PLLSAI1_Config+0x74>
 8003810:	e020      	b.n	8003854 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003812:	4b60      	ldr	r3, [pc, #384]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d11d      	bne.n	800385a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003822:	e01a      	b.n	800385a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003824:	4b5b      	ldr	r3, [pc, #364]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800382c:	2b00      	cmp	r3, #0
 800382e:	d116      	bne.n	800385e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003834:	e013      	b.n	800385e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003836:	4b57      	ldr	r3, [pc, #348]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003842:	4b54      	ldr	r3, [pc, #336]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d109      	bne.n	8003862 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003852:	e006      	b.n	8003862 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
      break;
 8003858:	e004      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800385a:	bf00      	nop
 800385c:	e002      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003862:	bf00      	nop
    }

    if(status == HAL_OK)
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800386a:	4b4a      	ldr	r3, [pc, #296]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6819      	ldr	r1, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	3b01      	subs	r3, #1
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	430b      	orrs	r3, r1
 8003880:	4944      	ldr	r1, [pc, #272]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003882:	4313      	orrs	r3, r2
 8003884:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003886:	7bfb      	ldrb	r3, [r7, #15]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d17d      	bne.n	8003988 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800388c:	4b41      	ldr	r3, [pc, #260]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a40      	ldr	r2, [pc, #256]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003892:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003896:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003898:	f7fe fb1e 	bl	8001ed8 <HAL_GetTick>
 800389c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800389e:	e009      	b.n	80038b4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a0:	f7fe fb1a 	bl	8001ed8 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d902      	bls.n	80038b4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	73fb      	strb	r3, [r7, #15]
        break;
 80038b2:	e005      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80038b4:	4b37      	ldr	r3, [pc, #220]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1ef      	bne.n	80038a0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d160      	bne.n	8003988 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d111      	bne.n	80038f0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038cc:	4b31      	ldr	r3, [pc, #196]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6892      	ldr	r2, [r2, #8]
 80038dc:	0211      	lsls	r1, r2, #8
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	68d2      	ldr	r2, [r2, #12]
 80038e2:	0912      	lsrs	r2, r2, #4
 80038e4:	0452      	lsls	r2, r2, #17
 80038e6:	430a      	orrs	r2, r1
 80038e8:	492a      	ldr	r1, [pc, #168]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	610b      	str	r3, [r1, #16]
 80038ee:	e027      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d112      	bne.n	800391c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038f6:	4b27      	ldr	r3, [pc, #156]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80038fe:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	6892      	ldr	r2, [r2, #8]
 8003906:	0211      	lsls	r1, r2, #8
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	6912      	ldr	r2, [r2, #16]
 800390c:	0852      	lsrs	r2, r2, #1
 800390e:	3a01      	subs	r2, #1
 8003910:	0552      	lsls	r2, r2, #21
 8003912:	430a      	orrs	r2, r1
 8003914:	491f      	ldr	r1, [pc, #124]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003916:	4313      	orrs	r3, r2
 8003918:	610b      	str	r3, [r1, #16]
 800391a:	e011      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800391c:	4b1d      	ldr	r3, [pc, #116]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003924:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6892      	ldr	r2, [r2, #8]
 800392c:	0211      	lsls	r1, r2, #8
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6952      	ldr	r2, [r2, #20]
 8003932:	0852      	lsrs	r2, r2, #1
 8003934:	3a01      	subs	r2, #1
 8003936:	0652      	lsls	r2, r2, #25
 8003938:	430a      	orrs	r2, r1
 800393a:	4916      	ldr	r1, [pc, #88]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800393c:	4313      	orrs	r3, r2
 800393e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003940:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a13      	ldr	r2, [pc, #76]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800394a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fe fac4 	bl	8001ed8 <HAL_GetTick>
 8003950:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003952:	e009      	b.n	8003968 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003954:	f7fe fac0 	bl	8001ed8 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d902      	bls.n	8003968 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	73fb      	strb	r3, [r7, #15]
          break;
 8003966:	e005      	b.n	8003974 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003968:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d0ef      	beq.n	8003954 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003974:	7bfb      	ldrb	r3, [r7, #15]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d106      	bne.n	8003988 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800397a:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	4904      	ldr	r1, [pc, #16]	@ (8003994 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003984:	4313      	orrs	r3, r2
 8003986:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40021000 	.word	0x40021000

08003998 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039a8:	68db      	ldr	r3, [r3, #12]
 80039aa:	f003 0303 	and.w	r3, r3, #3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d018      	beq.n	80039e4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80039b2:	4b67      	ldr	r3, [pc, #412]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f003 0203 	and.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d10d      	bne.n	80039de <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
       ||
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d009      	beq.n	80039de <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80039ca:	4b61      	ldr	r3, [pc, #388]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	091b      	lsrs	r3, r3, #4
 80039d0:	f003 0307 	and.w	r3, r3, #7
 80039d4:	1c5a      	adds	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
       ||
 80039da:	429a      	cmp	r2, r3
 80039dc:	d047      	beq.n	8003a6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	e044      	b.n	8003a6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d018      	beq.n	8003a1e <RCCEx_PLLSAI2_Config+0x86>
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d825      	bhi.n	8003a3c <RCCEx_PLLSAI2_Config+0xa4>
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d002      	beq.n	80039fa <RCCEx_PLLSAI2_Config+0x62>
 80039f4:	2b02      	cmp	r3, #2
 80039f6:	d009      	beq.n	8003a0c <RCCEx_PLLSAI2_Config+0x74>
 80039f8:	e020      	b.n	8003a3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80039fa:	4b55      	ldr	r3, [pc, #340]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11d      	bne.n	8003a42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a0a:	e01a      	b.n	8003a42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a0c:	4b50      	ldr	r3, [pc, #320]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d116      	bne.n	8003a46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1c:	e013      	b.n	8003a46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a1e:	4b4c      	ldr	r3, [pc, #304]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10f      	bne.n	8003a4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a2a:	4b49      	ldr	r3, [pc, #292]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d109      	bne.n	8003a4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a36:	2301      	movs	r3, #1
 8003a38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a3a:	e006      	b.n	8003a4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a40:	e004      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a42:	bf00      	nop
 8003a44:	e002      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a46:	bf00      	nop
 8003a48:	e000      	b.n	8003a4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003a4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10d      	bne.n	8003a6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a52:	4b3f      	ldr	r3, [pc, #252]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	3b01      	subs	r3, #1
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	430b      	orrs	r3, r1
 8003a68:	4939      	ldr	r1, [pc, #228]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d167      	bne.n	8003b44 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a74:	4b36      	ldr	r3, [pc, #216]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a35      	ldr	r2, [pc, #212]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a80:	f7fe fa2a 	bl	8001ed8 <HAL_GetTick>
 8003a84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a86:	e009      	b.n	8003a9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a88:	f7fe fa26 	bl	8001ed8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d902      	bls.n	8003a9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	73fb      	strb	r3, [r7, #15]
        break;
 8003a9a:	e005      	b.n	8003aa8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a9c:	4b2c      	ldr	r3, [pc, #176]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d1ef      	bne.n	8003a88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d14a      	bne.n	8003b44 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d111      	bne.n	8003ad8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ab4:	4b26      	ldr	r3, [pc, #152]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6892      	ldr	r2, [r2, #8]
 8003ac4:	0211      	lsls	r1, r2, #8
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	68d2      	ldr	r2, [r2, #12]
 8003aca:	0912      	lsrs	r2, r2, #4
 8003acc:	0452      	lsls	r2, r2, #17
 8003ace:	430a      	orrs	r2, r1
 8003ad0:	491f      	ldr	r1, [pc, #124]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	614b      	str	r3, [r1, #20]
 8003ad6:	e011      	b.n	8003afc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003ad8:	4b1d      	ldr	r3, [pc, #116]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003ae0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	6892      	ldr	r2, [r2, #8]
 8003ae8:	0211      	lsls	r1, r2, #8
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6912      	ldr	r2, [r2, #16]
 8003aee:	0852      	lsrs	r2, r2, #1
 8003af0:	3a01      	subs	r2, #1
 8003af2:	0652      	lsls	r2, r2, #25
 8003af4:	430a      	orrs	r2, r1
 8003af6:	4916      	ldr	r1, [pc, #88]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003afc:	4b14      	ldr	r3, [pc, #80]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a13      	ldr	r2, [pc, #76]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b08:	f7fe f9e6 	bl	8001ed8 <HAL_GetTick>
 8003b0c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b0e:	e009      	b.n	8003b24 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b10:	f7fe f9e2 	bl	8001ed8 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d902      	bls.n	8003b24 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	73fb      	strb	r3, [r7, #15]
          break;
 8003b22:	e005      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b24:	4b0a      	ldr	r3, [pc, #40]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d0ef      	beq.n	8003b10 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003b30:	7bfb      	ldrb	r3, [r7, #15]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003b36:	4b06      	ldr	r3, [pc, #24]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	4904      	ldr	r1, [pc, #16]	@ (8003b50 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003b44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000

08003b54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e049      	b.n	8003bfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 f841 	bl	8003c02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2202      	movs	r2, #2
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	3304      	adds	r3, #4
 8003b90:	4619      	mov	r1, r3
 8003b92:	4610      	mov	r0, r2
 8003b94:	f000 fce8 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b083      	sub	sp, #12
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr
	...

08003c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d001      	beq.n	8003c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e04f      	b.n	8003cd0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a23      	ldr	r2, [pc, #140]	@ (8003cdc <HAL_TIM_Base_Start_IT+0xc4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01d      	beq.n	8003c8e <HAL_TIM_Base_Start_IT+0x76>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c5a:	d018      	beq.n	8003c8e <HAL_TIM_Base_Start_IT+0x76>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1f      	ldr	r2, [pc, #124]	@ (8003ce0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d013      	beq.n	8003c8e <HAL_TIM_Base_Start_IT+0x76>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ce4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d00e      	beq.n	8003c8e <HAL_TIM_Base_Start_IT+0x76>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1c      	ldr	r2, [pc, #112]	@ (8003ce8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d009      	beq.n	8003c8e <HAL_TIM_Base_Start_IT+0x76>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003cec <HAL_TIM_Base_Start_IT+0xd4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d004      	beq.n	8003c8e <HAL_TIM_Base_Start_IT+0x76>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a19      	ldr	r2, [pc, #100]	@ (8003cf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d115      	bne.n	8003cba <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	689a      	ldr	r2, [r3, #8]
 8003c94:	4b17      	ldr	r3, [pc, #92]	@ (8003cf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c96:	4013      	ands	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b06      	cmp	r3, #6
 8003c9e:	d015      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0xb4>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ca6:	d011      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f042 0201 	orr.w	r2, r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cb8:	e008      	b.n	8003ccc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0201 	orr.w	r2, r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	e000      	b.n	8003cce <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ccc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800
 8003ce8:	40000c00 	.word	0x40000c00
 8003cec:	40013400 	.word	0x40013400
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	00010007 	.word	0x00010007

08003cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e049      	b.n	8003d9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7fd fe2c 	bl	800197c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f000 fc16 	bl	8004568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3708      	adds	r7, #8
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d109      	bne.n	8003dcc <HAL_TIM_PWM_Start+0x24>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	bf14      	ite	ne
 8003dc4:	2301      	movne	r3, #1
 8003dc6:	2300      	moveq	r3, #0
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	e03c      	b.n	8003e46 <HAL_TIM_PWM_Start+0x9e>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d109      	bne.n	8003de6 <HAL_TIM_PWM_Start+0x3e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e02f      	b.n	8003e46 <HAL_TIM_PWM_Start+0x9e>
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d109      	bne.n	8003e00 <HAL_TIM_PWM_Start+0x58>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	e022      	b.n	8003e46 <HAL_TIM_PWM_Start+0x9e>
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d109      	bne.n	8003e1a <HAL_TIM_PWM_Start+0x72>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	bf14      	ite	ne
 8003e12:	2301      	movne	r3, #1
 8003e14:	2300      	moveq	r3, #0
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	e015      	b.n	8003e46 <HAL_TIM_PWM_Start+0x9e>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b10      	cmp	r3, #16
 8003e1e:	d109      	bne.n	8003e34 <HAL_TIM_PWM_Start+0x8c>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	bf14      	ite	ne
 8003e2c:	2301      	movne	r3, #1
 8003e2e:	2300      	moveq	r3, #0
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	e008      	b.n	8003e46 <HAL_TIM_PWM_Start+0x9e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	bf14      	ite	ne
 8003e40:	2301      	movne	r3, #1
 8003e42:	2300      	moveq	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e09c      	b.n	8003f88 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d104      	bne.n	8003e5e <HAL_TIM_PWM_Start+0xb6>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2202      	movs	r2, #2
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e5c:	e023      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xfe>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d104      	bne.n	8003e6e <HAL_TIM_PWM_Start+0xc6>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2202      	movs	r2, #2
 8003e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e6c:	e01b      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xfe>
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b08      	cmp	r3, #8
 8003e72:	d104      	bne.n	8003e7e <HAL_TIM_PWM_Start+0xd6>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2202      	movs	r2, #2
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e7c:	e013      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xfe>
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	2b0c      	cmp	r3, #12
 8003e82:	d104      	bne.n	8003e8e <HAL_TIM_PWM_Start+0xe6>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2202      	movs	r2, #2
 8003e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e8c:	e00b      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xfe>
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b10      	cmp	r3, #16
 8003e92:	d104      	bne.n	8003e9e <HAL_TIM_PWM_Start+0xf6>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e9c:	e003      	b.n	8003ea6 <HAL_TIM_PWM_Start+0xfe>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2202      	movs	r2, #2
 8003ea2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	6839      	ldr	r1, [r7, #0]
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fed6 	bl	8004c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a35      	ldr	r2, [pc, #212]	@ (8003f90 <HAL_TIM_PWM_Start+0x1e8>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d013      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0x13e>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a34      	ldr	r2, [pc, #208]	@ (8003f94 <HAL_TIM_PWM_Start+0x1ec>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d00e      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0x13e>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a32      	ldr	r2, [pc, #200]	@ (8003f98 <HAL_TIM_PWM_Start+0x1f0>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d009      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0x13e>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a31      	ldr	r2, [pc, #196]	@ (8003f9c <HAL_TIM_PWM_Start+0x1f4>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d004      	beq.n	8003ee6 <HAL_TIM_PWM_Start+0x13e>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a2f      	ldr	r2, [pc, #188]	@ (8003fa0 <HAL_TIM_PWM_Start+0x1f8>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d101      	bne.n	8003eea <HAL_TIM_PWM_Start+0x142>
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e000      	b.n	8003eec <HAL_TIM_PWM_Start+0x144>
 8003eea:	2300      	movs	r3, #0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d007      	beq.n	8003f00 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003efe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a22      	ldr	r2, [pc, #136]	@ (8003f90 <HAL_TIM_PWM_Start+0x1e8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d01d      	beq.n	8003f46 <HAL_TIM_PWM_Start+0x19e>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f12:	d018      	beq.n	8003f46 <HAL_TIM_PWM_Start+0x19e>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a22      	ldr	r2, [pc, #136]	@ (8003fa4 <HAL_TIM_PWM_Start+0x1fc>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d013      	beq.n	8003f46 <HAL_TIM_PWM_Start+0x19e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a21      	ldr	r2, [pc, #132]	@ (8003fa8 <HAL_TIM_PWM_Start+0x200>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00e      	beq.n	8003f46 <HAL_TIM_PWM_Start+0x19e>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003fac <HAL_TIM_PWM_Start+0x204>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d009      	beq.n	8003f46 <HAL_TIM_PWM_Start+0x19e>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a17      	ldr	r2, [pc, #92]	@ (8003f94 <HAL_TIM_PWM_Start+0x1ec>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d004      	beq.n	8003f46 <HAL_TIM_PWM_Start+0x19e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a15      	ldr	r2, [pc, #84]	@ (8003f98 <HAL_TIM_PWM_Start+0x1f0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d115      	bne.n	8003f72 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	4b18      	ldr	r3, [pc, #96]	@ (8003fb0 <HAL_TIM_PWM_Start+0x208>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2b06      	cmp	r3, #6
 8003f56:	d015      	beq.n	8003f84 <HAL_TIM_PWM_Start+0x1dc>
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f5e:	d011      	beq.n	8003f84 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f70:	e008      	b.n	8003f84 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f042 0201 	orr.w	r2, r2, #1
 8003f80:	601a      	str	r2, [r3, #0]
 8003f82:	e000      	b.n	8003f86 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f84:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3710      	adds	r7, #16
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	40012c00 	.word	0x40012c00
 8003f94:	40013400 	.word	0x40013400
 8003f98:	40014000 	.word	0x40014000
 8003f9c:	40014400 	.word	0x40014400
 8003fa0:	40014800 	.word	0x40014800
 8003fa4:	40000400 	.word	0x40000400
 8003fa8:	40000800 	.word	0x40000800
 8003fac:	40000c00 	.word	0x40000c00
 8003fb0:	00010007 	.word	0x00010007

08003fb4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b082      	sub	sp, #8
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	6839      	ldr	r1, [r7, #0]
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fe4a 	bl	8004c60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a3e      	ldr	r2, [pc, #248]	@ (80040cc <HAL_TIM_PWM_Stop+0x118>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d013      	beq.n	8003ffe <HAL_TIM_PWM_Stop+0x4a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4a3d      	ldr	r2, [pc, #244]	@ (80040d0 <HAL_TIM_PWM_Stop+0x11c>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d00e      	beq.n	8003ffe <HAL_TIM_PWM_Stop+0x4a>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a3b      	ldr	r2, [pc, #236]	@ (80040d4 <HAL_TIM_PWM_Stop+0x120>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d009      	beq.n	8003ffe <HAL_TIM_PWM_Stop+0x4a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a3a      	ldr	r2, [pc, #232]	@ (80040d8 <HAL_TIM_PWM_Stop+0x124>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_TIM_PWM_Stop+0x4a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a38      	ldr	r2, [pc, #224]	@ (80040dc <HAL_TIM_PWM_Stop+0x128>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_TIM_PWM_Stop+0x4e>
 8003ffe:	2301      	movs	r3, #1
 8004000:	e000      	b.n	8004004 <HAL_TIM_PWM_Stop+0x50>
 8004002:	2300      	movs	r3, #0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d017      	beq.n	8004038 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004012:	4013      	ands	r3, r2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d10f      	bne.n	8004038 <HAL_TIM_PWM_Stop+0x84>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a1a      	ldr	r2, [r3, #32]
 800401e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004022:	4013      	ands	r3, r2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d107      	bne.n	8004038 <HAL_TIM_PWM_Stop+0x84>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004036:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	6a1a      	ldr	r2, [r3, #32]
 800403e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004042:	4013      	ands	r3, r2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10f      	bne.n	8004068 <HAL_TIM_PWM_Stop+0xb4>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6a1a      	ldr	r2, [r3, #32]
 800404e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004052:	4013      	ands	r3, r2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d107      	bne.n	8004068 <HAL_TIM_PWM_Stop+0xb4>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d104      	bne.n	8004078 <HAL_TIM_PWM_Stop+0xc4>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2201      	movs	r2, #1
 8004072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004076:	e023      	b.n	80040c0 <HAL_TIM_PWM_Stop+0x10c>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	2b04      	cmp	r3, #4
 800407c:	d104      	bne.n	8004088 <HAL_TIM_PWM_Stop+0xd4>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2201      	movs	r2, #1
 8004082:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004086:	e01b      	b.n	80040c0 <HAL_TIM_PWM_Stop+0x10c>
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b08      	cmp	r3, #8
 800408c:	d104      	bne.n	8004098 <HAL_TIM_PWM_Stop+0xe4>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004096:	e013      	b.n	80040c0 <HAL_TIM_PWM_Stop+0x10c>
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	2b0c      	cmp	r3, #12
 800409c:	d104      	bne.n	80040a8 <HAL_TIM_PWM_Stop+0xf4>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2201      	movs	r2, #1
 80040a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80040a6:	e00b      	b.n	80040c0 <HAL_TIM_PWM_Stop+0x10c>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d104      	bne.n	80040b8 <HAL_TIM_PWM_Stop+0x104>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040b6:	e003      	b.n	80040c0 <HAL_TIM_PWM_Stop+0x10c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3708      	adds	r7, #8
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}
 80040ca:	bf00      	nop
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40013400 	.word	0x40013400
 80040d4:	40014000 	.word	0x40014000
 80040d8:	40014400 	.word	0x40014400
 80040dc:	40014800 	.word	0x40014800

080040e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d020      	beq.n	8004144 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01b      	beq.n	8004144 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0202 	mvn.w	r2, #2
 8004114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	f003 0303 	and.w	r3, r3, #3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f9fe 	bl	800452c <HAL_TIM_IC_CaptureCallback>
 8004130:	e005      	b.n	800413e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f9f0 	bl	8004518 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fa01 	bl	8004540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	f003 0304 	and.w	r3, r3, #4
 800414a:	2b00      	cmp	r3, #0
 800414c:	d020      	beq.n	8004190 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01b      	beq.n	8004190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f06f 0204 	mvn.w	r2, #4
 8004160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2202      	movs	r2, #2
 8004166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004172:	2b00      	cmp	r3, #0
 8004174:	d003      	beq.n	800417e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004176:	6878      	ldr	r0, [r7, #4]
 8004178:	f000 f9d8 	bl	800452c <HAL_TIM_IC_CaptureCallback>
 800417c:	e005      	b.n	800418a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 f9ca 	bl	8004518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f9db 	bl	8004540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d020      	beq.n	80041dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01b      	beq.n	80041dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f06f 0208 	mvn.w	r2, #8
 80041ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2204      	movs	r2, #4
 80041b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69db      	ldr	r3, [r3, #28]
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 f9b2 	bl	800452c <HAL_TIM_IC_CaptureCallback>
 80041c8:	e005      	b.n	80041d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f9a4 	bl	8004518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f9b5 	bl	8004540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2200      	movs	r2, #0
 80041da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	f003 0310 	and.w	r3, r3, #16
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d020      	beq.n	8004228 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f003 0310 	and.w	r3, r3, #16
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d01b      	beq.n	8004228 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f06f 0210 	mvn.w	r2, #16
 80041f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2208      	movs	r2, #8
 80041fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	69db      	ldr	r3, [r3, #28]
 8004206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f98c 	bl	800452c <HAL_TIM_IC_CaptureCallback>
 8004214:	e005      	b.n	8004222 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f97e 	bl	8004518 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 f98f 	bl	8004540 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00c      	beq.n	800424c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f003 0301 	and.w	r3, r3, #1
 8004238:	2b00      	cmp	r3, #0
 800423a:	d007      	beq.n	800424c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f06f 0201 	mvn.w	r2, #1
 8004244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7fd fb58 	bl	80018fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004252:	2b00      	cmp	r3, #0
 8004254:	d104      	bne.n	8004260 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00c      	beq.n	800427a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d007      	beq.n	800427a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fe29 	bl	8004ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004280:	2b00      	cmp	r3, #0
 8004282:	d00c      	beq.n	800429e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428a:	2b00      	cmp	r3, #0
 800428c:	d007      	beq.n	800429e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fe21 	bl	8004ee0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d00c      	beq.n	80042c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d007      	beq.n	80042c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80042ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f949 	bl	8004554 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00c      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d007      	beq.n	80042e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f06f 0220 	mvn.w	r2, #32
 80042de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f000 fde9 	bl	8004eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042e6:	bf00      	nop
 80042e8:	3710      	adds	r7, #16
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b086      	sub	sp, #24
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042fc:	2300      	movs	r3, #0
 80042fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800430a:	2302      	movs	r3, #2
 800430c:	e0ff      	b.n	800450e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b14      	cmp	r3, #20
 800431a:	f200 80f0 	bhi.w	80044fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800431e:	a201      	add	r2, pc, #4	@ (adr r2, 8004324 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004324:	08004379 	.word	0x08004379
 8004328:	080044ff 	.word	0x080044ff
 800432c:	080044ff 	.word	0x080044ff
 8004330:	080044ff 	.word	0x080044ff
 8004334:	080043b9 	.word	0x080043b9
 8004338:	080044ff 	.word	0x080044ff
 800433c:	080044ff 	.word	0x080044ff
 8004340:	080044ff 	.word	0x080044ff
 8004344:	080043fb 	.word	0x080043fb
 8004348:	080044ff 	.word	0x080044ff
 800434c:	080044ff 	.word	0x080044ff
 8004350:	080044ff 	.word	0x080044ff
 8004354:	0800443b 	.word	0x0800443b
 8004358:	080044ff 	.word	0x080044ff
 800435c:	080044ff 	.word	0x080044ff
 8004360:	080044ff 	.word	0x080044ff
 8004364:	0800447d 	.word	0x0800447d
 8004368:	080044ff 	.word	0x080044ff
 800436c:	080044ff 	.word	0x080044ff
 8004370:	080044ff 	.word	0x080044ff
 8004374:	080044bd 	.word	0x080044bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	4618      	mov	r0, r3
 8004380:	f000 f998 	bl	80046b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	699a      	ldr	r2, [r3, #24]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0208 	orr.w	r2, r2, #8
 8004392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f022 0204 	bic.w	r2, r2, #4
 80043a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	6999      	ldr	r1, [r3, #24]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	691a      	ldr	r2, [r3, #16]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	619a      	str	r2, [r3, #24]
      break;
 80043b6:	e0a5      	b.n	8004504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	4618      	mov	r0, r3
 80043c0:	f000 fa08 	bl	80047d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	699a      	ldr	r2, [r3, #24]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6999      	ldr	r1, [r3, #24]
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	021a      	lsls	r2, r3, #8
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	430a      	orrs	r2, r1
 80043f6:	619a      	str	r2, [r3, #24]
      break;
 80043f8:	e084      	b.n	8004504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68b9      	ldr	r1, [r7, #8]
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fa71 	bl	80048e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f042 0208 	orr.w	r2, r2, #8
 8004414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69da      	ldr	r2, [r3, #28]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0204 	bic.w	r2, r2, #4
 8004424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	69d9      	ldr	r1, [r3, #28]
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	691a      	ldr	r2, [r3, #16]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	430a      	orrs	r2, r1
 8004436:	61da      	str	r2, [r3, #28]
      break;
 8004438:	e064      	b.n	8004504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68b9      	ldr	r1, [r7, #8]
 8004440:	4618      	mov	r0, r3
 8004442:	f000 fad9 	bl	80049f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69da      	ldr	r2, [r3, #28]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	69da      	ldr	r2, [r3, #28]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	69d9      	ldr	r1, [r3, #28]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	021a      	lsls	r2, r3, #8
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	430a      	orrs	r2, r1
 8004478:	61da      	str	r2, [r3, #28]
      break;
 800447a:	e043      	b.n	8004504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68b9      	ldr	r1, [r7, #8]
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fb22 	bl	8004acc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f042 0208 	orr.w	r2, r2, #8
 8004496:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f022 0204 	bic.w	r2, r2, #4
 80044a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	691a      	ldr	r2, [r3, #16]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80044ba:	e023      	b.n	8004504 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68b9      	ldr	r1, [r7, #8]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fb66 	bl	8004b94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	021a      	lsls	r2, r3, #8
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80044fc:	e002      	b.n	8004504 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	75fb      	strb	r3, [r7, #23]
      break;
 8004502:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800450c:	7dfb      	ldrb	r3, [r7, #23]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop

08004518 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800455c:	bf00      	nop
 800455e:	370c      	adds	r7, #12
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004568:	b480      	push	{r7}
 800456a:	b085      	sub	sp, #20
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a46      	ldr	r2, [pc, #280]	@ (8004694 <TIM_Base_SetConfig+0x12c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d013      	beq.n	80045a8 <TIM_Base_SetConfig+0x40>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004586:	d00f      	beq.n	80045a8 <TIM_Base_SetConfig+0x40>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	4a43      	ldr	r2, [pc, #268]	@ (8004698 <TIM_Base_SetConfig+0x130>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00b      	beq.n	80045a8 <TIM_Base_SetConfig+0x40>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	4a42      	ldr	r2, [pc, #264]	@ (800469c <TIM_Base_SetConfig+0x134>)
 8004594:	4293      	cmp	r3, r2
 8004596:	d007      	beq.n	80045a8 <TIM_Base_SetConfig+0x40>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a41      	ldr	r2, [pc, #260]	@ (80046a0 <TIM_Base_SetConfig+0x138>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_Base_SetConfig+0x40>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a40      	ldr	r2, [pc, #256]	@ (80046a4 <TIM_Base_SetConfig+0x13c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d108      	bne.n	80045ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a35      	ldr	r2, [pc, #212]	@ (8004694 <TIM_Base_SetConfig+0x12c>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01f      	beq.n	8004602 <TIM_Base_SetConfig+0x9a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c8:	d01b      	beq.n	8004602 <TIM_Base_SetConfig+0x9a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a32      	ldr	r2, [pc, #200]	@ (8004698 <TIM_Base_SetConfig+0x130>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d017      	beq.n	8004602 <TIM_Base_SetConfig+0x9a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a31      	ldr	r2, [pc, #196]	@ (800469c <TIM_Base_SetConfig+0x134>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <TIM_Base_SetConfig+0x9a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a30      	ldr	r2, [pc, #192]	@ (80046a0 <TIM_Base_SetConfig+0x138>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d00f      	beq.n	8004602 <TIM_Base_SetConfig+0x9a>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a2f      	ldr	r2, [pc, #188]	@ (80046a4 <TIM_Base_SetConfig+0x13c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00b      	beq.n	8004602 <TIM_Base_SetConfig+0x9a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a2e      	ldr	r2, [pc, #184]	@ (80046a8 <TIM_Base_SetConfig+0x140>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d007      	beq.n	8004602 <TIM_Base_SetConfig+0x9a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a2d      	ldr	r2, [pc, #180]	@ (80046ac <TIM_Base_SetConfig+0x144>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d003      	beq.n	8004602 <TIM_Base_SetConfig+0x9a>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a2c      	ldr	r2, [pc, #176]	@ (80046b0 <TIM_Base_SetConfig+0x148>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d108      	bne.n	8004614 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004608:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	689a      	ldr	r2, [r3, #8]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a16      	ldr	r2, [pc, #88]	@ (8004694 <TIM_Base_SetConfig+0x12c>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d00f      	beq.n	8004660 <TIM_Base_SetConfig+0xf8>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a18      	ldr	r2, [pc, #96]	@ (80046a4 <TIM_Base_SetConfig+0x13c>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d00b      	beq.n	8004660 <TIM_Base_SetConfig+0xf8>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a17      	ldr	r2, [pc, #92]	@ (80046a8 <TIM_Base_SetConfig+0x140>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d007      	beq.n	8004660 <TIM_Base_SetConfig+0xf8>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a16      	ldr	r2, [pc, #88]	@ (80046ac <TIM_Base_SetConfig+0x144>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d003      	beq.n	8004660 <TIM_Base_SetConfig+0xf8>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	4a15      	ldr	r2, [pc, #84]	@ (80046b0 <TIM_Base_SetConfig+0x148>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d103      	bne.n	8004668 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	2b01      	cmp	r3, #1
 8004678:	d105      	bne.n	8004686 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	f023 0201 	bic.w	r2, r3, #1
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	611a      	str	r2, [r3, #16]
  }
}
 8004686:	bf00      	nop
 8004688:	3714      	adds	r7, #20
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr
 8004692:	bf00      	nop
 8004694:	40012c00 	.word	0x40012c00
 8004698:	40000400 	.word	0x40000400
 800469c:	40000800 	.word	0x40000800
 80046a0:	40000c00 	.word	0x40000c00
 80046a4:	40013400 	.word	0x40013400
 80046a8:	40014000 	.word	0x40014000
 80046ac:	40014400 	.word	0x40014400
 80046b0:	40014800 	.word	0x40014800

080046b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b087      	sub	sp, #28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a1b      	ldr	r3, [r3, #32]
 80046c8:	f023 0201 	bic.w	r2, r3, #1
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80046e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f023 0303 	bic.w	r3, r3, #3
 80046ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f023 0302 	bic.w	r3, r3, #2
 8004700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a2c      	ldr	r2, [pc, #176]	@ (80047c0 <TIM_OC1_SetConfig+0x10c>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d00f      	beq.n	8004734 <TIM_OC1_SetConfig+0x80>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	4a2b      	ldr	r2, [pc, #172]	@ (80047c4 <TIM_OC1_SetConfig+0x110>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00b      	beq.n	8004734 <TIM_OC1_SetConfig+0x80>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a2a      	ldr	r2, [pc, #168]	@ (80047c8 <TIM_OC1_SetConfig+0x114>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d007      	beq.n	8004734 <TIM_OC1_SetConfig+0x80>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a29      	ldr	r2, [pc, #164]	@ (80047cc <TIM_OC1_SetConfig+0x118>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d003      	beq.n	8004734 <TIM_OC1_SetConfig+0x80>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a28      	ldr	r2, [pc, #160]	@ (80047d0 <TIM_OC1_SetConfig+0x11c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d10c      	bne.n	800474e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f023 0308 	bic.w	r3, r3, #8
 800473a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	4313      	orrs	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	f023 0304 	bic.w	r3, r3, #4
 800474c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a1b      	ldr	r2, [pc, #108]	@ (80047c0 <TIM_OC1_SetConfig+0x10c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00f      	beq.n	8004776 <TIM_OC1_SetConfig+0xc2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a1a      	ldr	r2, [pc, #104]	@ (80047c4 <TIM_OC1_SetConfig+0x110>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00b      	beq.n	8004776 <TIM_OC1_SetConfig+0xc2>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a19      	ldr	r2, [pc, #100]	@ (80047c8 <TIM_OC1_SetConfig+0x114>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_OC1_SetConfig+0xc2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a18      	ldr	r2, [pc, #96]	@ (80047cc <TIM_OC1_SetConfig+0x118>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_OC1_SetConfig+0xc2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a17      	ldr	r2, [pc, #92]	@ (80047d0 <TIM_OC1_SetConfig+0x11c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d111      	bne.n	800479a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800477c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	4313      	orrs	r3, r2
 8004798:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	685a      	ldr	r2, [r3, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	697a      	ldr	r2, [r7, #20]
 80047b2:	621a      	str	r2, [r3, #32]
}
 80047b4:	bf00      	nop
 80047b6:	371c      	adds	r7, #28
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	40012c00 	.word	0x40012c00
 80047c4:	40013400 	.word	0x40013400
 80047c8:	40014000 	.word	0x40014000
 80047cc:	40014400 	.word	0x40014400
 80047d0:	40014800 	.word	0x40014800

080047d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a1b      	ldr	r3, [r3, #32]
 80047e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6a1b      	ldr	r3, [r3, #32]
 80047e8:	f023 0210 	bic.w	r2, r3, #16
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004802:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800480e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4313      	orrs	r3, r2
 800481a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f023 0320 	bic.w	r3, r3, #32
 8004822:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	697a      	ldr	r2, [r7, #20]
 800482c:	4313      	orrs	r3, r2
 800482e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a28      	ldr	r2, [pc, #160]	@ (80048d4 <TIM_OC2_SetConfig+0x100>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_OC2_SetConfig+0x6c>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a27      	ldr	r2, [pc, #156]	@ (80048d8 <TIM_OC2_SetConfig+0x104>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d10d      	bne.n	800485c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004846:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	011b      	lsls	r3, r3, #4
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800485a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a1d      	ldr	r2, [pc, #116]	@ (80048d4 <TIM_OC2_SetConfig+0x100>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00f      	beq.n	8004884 <TIM_OC2_SetConfig+0xb0>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a1c      	ldr	r2, [pc, #112]	@ (80048d8 <TIM_OC2_SetConfig+0x104>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d00b      	beq.n	8004884 <TIM_OC2_SetConfig+0xb0>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a1b      	ldr	r2, [pc, #108]	@ (80048dc <TIM_OC2_SetConfig+0x108>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d007      	beq.n	8004884 <TIM_OC2_SetConfig+0xb0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a1a      	ldr	r2, [pc, #104]	@ (80048e0 <TIM_OC2_SetConfig+0x10c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d003      	beq.n	8004884 <TIM_OC2_SetConfig+0xb0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a19      	ldr	r2, [pc, #100]	@ (80048e4 <TIM_OC2_SetConfig+0x110>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d113      	bne.n	80048ac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800488a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004892:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	693a      	ldr	r2, [r7, #16]
 800489c:	4313      	orrs	r3, r2
 800489e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	699b      	ldr	r3, [r3, #24]
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	693a      	ldr	r2, [r7, #16]
 80048a8:	4313      	orrs	r3, r2
 80048aa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	693a      	ldr	r2, [r7, #16]
 80048b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685a      	ldr	r2, [r3, #4]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	621a      	str	r2, [r3, #32]
}
 80048c6:	bf00      	nop
 80048c8:	371c      	adds	r7, #28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	40012c00 	.word	0x40012c00
 80048d8:	40013400 	.word	0x40013400
 80048dc:	40014000 	.word	0x40014000
 80048e0:	40014400 	.word	0x40014400
 80048e4:	40014800 	.word	0x40014800

080048e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b087      	sub	sp, #28
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a1b      	ldr	r3, [r3, #32]
 80048f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800491a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f023 0303 	bic.w	r3, r3, #3
 8004922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4313      	orrs	r3, r2
 800492c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	021b      	lsls	r3, r3, #8
 800493c:	697a      	ldr	r2, [r7, #20]
 800493e:	4313      	orrs	r3, r2
 8004940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a27      	ldr	r2, [pc, #156]	@ (80049e4 <TIM_OC3_SetConfig+0xfc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d003      	beq.n	8004952 <TIM_OC3_SetConfig+0x6a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a26      	ldr	r2, [pc, #152]	@ (80049e8 <TIM_OC3_SetConfig+0x100>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d10d      	bne.n	800496e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	68db      	ldr	r3, [r3, #12]
 800495e:	021b      	lsls	r3, r3, #8
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800496c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a1c      	ldr	r2, [pc, #112]	@ (80049e4 <TIM_OC3_SetConfig+0xfc>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00f      	beq.n	8004996 <TIM_OC3_SetConfig+0xae>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a1b      	ldr	r2, [pc, #108]	@ (80049e8 <TIM_OC3_SetConfig+0x100>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00b      	beq.n	8004996 <TIM_OC3_SetConfig+0xae>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1a      	ldr	r2, [pc, #104]	@ (80049ec <TIM_OC3_SetConfig+0x104>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d007      	beq.n	8004996 <TIM_OC3_SetConfig+0xae>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a19      	ldr	r2, [pc, #100]	@ (80049f0 <TIM_OC3_SetConfig+0x108>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d003      	beq.n	8004996 <TIM_OC3_SetConfig+0xae>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a18      	ldr	r2, [pc, #96]	@ (80049f4 <TIM_OC3_SetConfig+0x10c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d113      	bne.n	80049be <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800499c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80049a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	011b      	lsls	r3, r3, #4
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	011b      	lsls	r3, r3, #4
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	621a      	str	r2, [r3, #32]
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40012c00 	.word	0x40012c00
 80049e8:	40013400 	.word	0x40013400
 80049ec:	40014000 	.word	0x40014000
 80049f0:	40014400 	.word	0x40014400
 80049f4:	40014800 	.word	0x40014800

080049f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a1b      	ldr	r3, [r3, #32]
 8004a0c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	021b      	lsls	r3, r3, #8
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	031b      	lsls	r3, r3, #12
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a18      	ldr	r2, [pc, #96]	@ (8004ab8 <TIM_OC4_SetConfig+0xc0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00f      	beq.n	8004a7c <TIM_OC4_SetConfig+0x84>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a17      	ldr	r2, [pc, #92]	@ (8004abc <TIM_OC4_SetConfig+0xc4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d00b      	beq.n	8004a7c <TIM_OC4_SetConfig+0x84>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a16      	ldr	r2, [pc, #88]	@ (8004ac0 <TIM_OC4_SetConfig+0xc8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d007      	beq.n	8004a7c <TIM_OC4_SetConfig+0x84>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a15      	ldr	r2, [pc, #84]	@ (8004ac4 <TIM_OC4_SetConfig+0xcc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d003      	beq.n	8004a7c <TIM_OC4_SetConfig+0x84>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a14      	ldr	r2, [pc, #80]	@ (8004ac8 <TIM_OC4_SetConfig+0xd0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d109      	bne.n	8004a90 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	019b      	lsls	r3, r3, #6
 8004a8a:	697a      	ldr	r2, [r7, #20]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	697a      	ldr	r2, [r7, #20]
 8004a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	621a      	str	r2, [r3, #32]
}
 8004aaa:	bf00      	nop
 8004aac:	371c      	adds	r7, #28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40012c00 	.word	0x40012c00
 8004abc:	40013400 	.word	0x40013400
 8004ac0:	40014000 	.word	0x40014000
 8004ac4:	40014400 	.word	0x40014400
 8004ac8:	40014800 	.word	0x40014800

08004acc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004afa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004afe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68fa      	ldr	r2, [r7, #12]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b10:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	041b      	lsls	r3, r3, #16
 8004b18:	693a      	ldr	r2, [r7, #16]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a17      	ldr	r2, [pc, #92]	@ (8004b80 <TIM_OC5_SetConfig+0xb4>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d00f      	beq.n	8004b46 <TIM_OC5_SetConfig+0x7a>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a16      	ldr	r2, [pc, #88]	@ (8004b84 <TIM_OC5_SetConfig+0xb8>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d00b      	beq.n	8004b46 <TIM_OC5_SetConfig+0x7a>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a15      	ldr	r2, [pc, #84]	@ (8004b88 <TIM_OC5_SetConfig+0xbc>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d007      	beq.n	8004b46 <TIM_OC5_SetConfig+0x7a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a14      	ldr	r2, [pc, #80]	@ (8004b8c <TIM_OC5_SetConfig+0xc0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d003      	beq.n	8004b46 <TIM_OC5_SetConfig+0x7a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a13      	ldr	r2, [pc, #76]	@ (8004b90 <TIM_OC5_SetConfig+0xc4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d109      	bne.n	8004b5a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	021b      	lsls	r3, r3, #8
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	621a      	str	r2, [r3, #32]
}
 8004b74:	bf00      	nop
 8004b76:	371c      	adds	r7, #28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr
 8004b80:	40012c00 	.word	0x40012c00
 8004b84:	40013400 	.word	0x40013400
 8004b88:	40014000 	.word	0x40014000
 8004b8c:	40014400 	.word	0x40014400
 8004b90:	40014800 	.word	0x40014800

08004b94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6a1b      	ldr	r3, [r3, #32]
 8004ba8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004bc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	051b      	lsls	r3, r3, #20
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	4a18      	ldr	r2, [pc, #96]	@ (8004c4c <TIM_OC6_SetConfig+0xb8>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d00f      	beq.n	8004c10 <TIM_OC6_SetConfig+0x7c>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a17      	ldr	r2, [pc, #92]	@ (8004c50 <TIM_OC6_SetConfig+0xbc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00b      	beq.n	8004c10 <TIM_OC6_SetConfig+0x7c>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a16      	ldr	r2, [pc, #88]	@ (8004c54 <TIM_OC6_SetConfig+0xc0>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d007      	beq.n	8004c10 <TIM_OC6_SetConfig+0x7c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a15      	ldr	r2, [pc, #84]	@ (8004c58 <TIM_OC6_SetConfig+0xc4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_OC6_SetConfig+0x7c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a14      	ldr	r2, [pc, #80]	@ (8004c5c <TIM_OC6_SetConfig+0xc8>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d109      	bne.n	8004c24 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c16:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	695b      	ldr	r3, [r3, #20]
 8004c1c:	029b      	lsls	r3, r3, #10
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	621a      	str	r2, [r3, #32]
}
 8004c3e:	bf00      	nop
 8004c40:	371c      	adds	r7, #28
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40012c00 	.word	0x40012c00
 8004c50:	40013400 	.word	0x40013400
 8004c54:	40014000 	.word	0x40014000
 8004c58:	40014400 	.word	0x40014400
 8004c5c:	40014800 	.word	0x40014800

08004c60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	2201      	movs	r2, #1
 8004c74:	fa02 f303 	lsl.w	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	6a1a      	ldr	r2, [r3, #32]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	43db      	mvns	r3, r3
 8004c82:	401a      	ands	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6a1a      	ldr	r2, [r3, #32]
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 031f 	and.w	r3, r3, #31
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	fa01 f303 	lsl.w	r3, r1, r3
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
	...

08004cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e068      	b.n	8004d96 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a2e      	ldr	r2, [pc, #184]	@ (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d004      	beq.n	8004cf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a2d      	ldr	r2, [pc, #180]	@ (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d108      	bne.n	8004d0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004cfe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	68fa      	ldr	r2, [r7, #12]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a1e      	ldr	r2, [pc, #120]	@ (8004da4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d01d      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d36:	d018      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004dac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d013      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a1a      	ldr	r2, [pc, #104]	@ (8004db0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d00e      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a18      	ldr	r2, [pc, #96]	@ (8004db4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d009      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a13      	ldr	r2, [pc, #76]	@ (8004da8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d004      	beq.n	8004d6a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a14      	ldr	r2, [pc, #80]	@ (8004db8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d10c      	bne.n	8004d84 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	68ba      	ldr	r2, [r7, #8]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68ba      	ldr	r2, [r7, #8]
 8004d82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40012c00 	.word	0x40012c00
 8004da8:	40013400 	.word	0x40013400
 8004dac:	40000400 	.word	0x40000400
 8004db0:	40000800 	.word	0x40000800
 8004db4:	40000c00 	.word	0x40000c00
 8004db8:	40014000 	.word	0x40014000

08004dbc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e065      	b.n	8004ea4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	4313      	orrs	r3, r2
 8004dec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4313      	orrs	r3, r2
 8004dfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a16      	ldr	r2, [pc, #88]	@ (8004eb0 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d004      	beq.n	8004e66 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a14      	ldr	r2, [pc, #80]	@ (8004eb4 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d115      	bne.n	8004e92 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	051b      	lsls	r3, r3, #20
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr
 8004eb0:	40012c00 	.word	0x40012c00
 8004eb4:	40013400 	.word	0x40013400

08004eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e040      	b.n	8004f88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc fe6a 	bl	8001bf0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2224      	movs	r2, #36	@ 0x24
 8004f20:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f022 0201 	bic.w	r2, r2, #1
 8004f30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 fb6a 	bl	8005614 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f8af 	bl	80050a4 <UART_SetConfig>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d101      	bne.n	8004f50 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e01b      	b.n	8004f88 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	689a      	ldr	r2, [r3, #8]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0201 	orr.w	r2, r2, #1
 8004f7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fbe9 	bl	8005758 <UART_CheckIdleState>
 8004f86:	4603      	mov	r3, r0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b08a      	sub	sp, #40	@ 0x28
 8004f94:	af02      	add	r7, sp, #8
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	603b      	str	r3, [r7, #0]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fa4:	2b20      	cmp	r3, #32
 8004fa6:	d177      	bne.n	8005098 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <HAL_UART_Transmit+0x24>
 8004fae:	88fb      	ldrh	r3, [r7, #6]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e070      	b.n	800509a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2221      	movs	r2, #33	@ 0x21
 8004fc4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fc6:	f7fc ff87 	bl	8001ed8 <HAL_GetTick>
 8004fca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	88fa      	ldrh	r2, [r7, #6]
 8004fd0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	88fa      	ldrh	r2, [r7, #6]
 8004fd8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe4:	d108      	bne.n	8004ff8 <HAL_UART_Transmit+0x68>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d104      	bne.n	8004ff8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e003      	b.n	8005000 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005000:	e02f      	b.n	8005062 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2200      	movs	r2, #0
 800500a:	2180      	movs	r1, #128	@ 0x80
 800500c:	68f8      	ldr	r0, [r7, #12]
 800500e:	f000 fc4b 	bl	80058a8 <UART_WaitOnFlagUntilTimeout>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d004      	beq.n	8005022 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2220      	movs	r2, #32
 800501c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e03b      	b.n	800509a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10b      	bne.n	8005040 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005028:	69bb      	ldr	r3, [r7, #24]
 800502a:	881a      	ldrh	r2, [r3, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005034:	b292      	uxth	r2, r2
 8005036:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	3302      	adds	r3, #2
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	e007      	b.n	8005050 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	781a      	ldrb	r2, [r3, #0]
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	3301      	adds	r3, #1
 800504e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d1c9      	bne.n	8005002 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2200      	movs	r2, #0
 8005076:	2140      	movs	r1, #64	@ 0x40
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fc15 	bl	80058a8 <UART_WaitOnFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d004      	beq.n	800508e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2220      	movs	r2, #32
 8005088:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e005      	b.n	800509a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2220      	movs	r2, #32
 8005092:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	e000      	b.n	800509a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005098:	2302      	movs	r3, #2
  }
}
 800509a:	4618      	mov	r0, r3
 800509c:	3720      	adds	r7, #32
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
	...

080050a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050a8:	b08a      	sub	sp, #40	@ 0x28
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80050ae:	2300      	movs	r3, #0
 80050b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689a      	ldr	r2, [r3, #8]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	431a      	orrs	r2, r3
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	431a      	orrs	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	4ba4      	ldr	r3, [pc, #656]	@ (8005364 <UART_SetConfig+0x2c0>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	6812      	ldr	r2, [r2, #0]
 80050da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050dc:	430b      	orrs	r3, r1
 80050de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	68da      	ldr	r2, [r3, #12]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	699b      	ldr	r3, [r3, #24]
 80050fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a99      	ldr	r2, [pc, #612]	@ (8005368 <UART_SetConfig+0x2c4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d004      	beq.n	8005110 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800510c:	4313      	orrs	r3, r2
 800510e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005120:	430a      	orrs	r2, r1
 8005122:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a90      	ldr	r2, [pc, #576]	@ (800536c <UART_SetConfig+0x2c8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d126      	bne.n	800517c <UART_SetConfig+0xd8>
 800512e:	4b90      	ldr	r3, [pc, #576]	@ (8005370 <UART_SetConfig+0x2cc>)
 8005130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	2b03      	cmp	r3, #3
 800513a:	d81b      	bhi.n	8005174 <UART_SetConfig+0xd0>
 800513c:	a201      	add	r2, pc, #4	@ (adr r2, 8005144 <UART_SetConfig+0xa0>)
 800513e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005142:	bf00      	nop
 8005144:	08005155 	.word	0x08005155
 8005148:	08005165 	.word	0x08005165
 800514c:	0800515d 	.word	0x0800515d
 8005150:	0800516d 	.word	0x0800516d
 8005154:	2301      	movs	r3, #1
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800515a:	e116      	b.n	800538a <UART_SetConfig+0x2e6>
 800515c:	2302      	movs	r3, #2
 800515e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005162:	e112      	b.n	800538a <UART_SetConfig+0x2e6>
 8005164:	2304      	movs	r3, #4
 8005166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800516a:	e10e      	b.n	800538a <UART_SetConfig+0x2e6>
 800516c:	2308      	movs	r3, #8
 800516e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005172:	e10a      	b.n	800538a <UART_SetConfig+0x2e6>
 8005174:	2310      	movs	r3, #16
 8005176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800517a:	e106      	b.n	800538a <UART_SetConfig+0x2e6>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a7c      	ldr	r2, [pc, #496]	@ (8005374 <UART_SetConfig+0x2d0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d138      	bne.n	80051f8 <UART_SetConfig+0x154>
 8005186:	4b7a      	ldr	r3, [pc, #488]	@ (8005370 <UART_SetConfig+0x2cc>)
 8005188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800518c:	f003 030c 	and.w	r3, r3, #12
 8005190:	2b0c      	cmp	r3, #12
 8005192:	d82d      	bhi.n	80051f0 <UART_SetConfig+0x14c>
 8005194:	a201      	add	r2, pc, #4	@ (adr r2, 800519c <UART_SetConfig+0xf8>)
 8005196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519a:	bf00      	nop
 800519c:	080051d1 	.word	0x080051d1
 80051a0:	080051f1 	.word	0x080051f1
 80051a4:	080051f1 	.word	0x080051f1
 80051a8:	080051f1 	.word	0x080051f1
 80051ac:	080051e1 	.word	0x080051e1
 80051b0:	080051f1 	.word	0x080051f1
 80051b4:	080051f1 	.word	0x080051f1
 80051b8:	080051f1 	.word	0x080051f1
 80051bc:	080051d9 	.word	0x080051d9
 80051c0:	080051f1 	.word	0x080051f1
 80051c4:	080051f1 	.word	0x080051f1
 80051c8:	080051f1 	.word	0x080051f1
 80051cc:	080051e9 	.word	0x080051e9
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051d6:	e0d8      	b.n	800538a <UART_SetConfig+0x2e6>
 80051d8:	2302      	movs	r3, #2
 80051da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051de:	e0d4      	b.n	800538a <UART_SetConfig+0x2e6>
 80051e0:	2304      	movs	r3, #4
 80051e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051e6:	e0d0      	b.n	800538a <UART_SetConfig+0x2e6>
 80051e8:	2308      	movs	r3, #8
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ee:	e0cc      	b.n	800538a <UART_SetConfig+0x2e6>
 80051f0:	2310      	movs	r3, #16
 80051f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051f6:	e0c8      	b.n	800538a <UART_SetConfig+0x2e6>
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a5e      	ldr	r2, [pc, #376]	@ (8005378 <UART_SetConfig+0x2d4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d125      	bne.n	800524e <UART_SetConfig+0x1aa>
 8005202:	4b5b      	ldr	r3, [pc, #364]	@ (8005370 <UART_SetConfig+0x2cc>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005208:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800520c:	2b30      	cmp	r3, #48	@ 0x30
 800520e:	d016      	beq.n	800523e <UART_SetConfig+0x19a>
 8005210:	2b30      	cmp	r3, #48	@ 0x30
 8005212:	d818      	bhi.n	8005246 <UART_SetConfig+0x1a2>
 8005214:	2b20      	cmp	r3, #32
 8005216:	d00a      	beq.n	800522e <UART_SetConfig+0x18a>
 8005218:	2b20      	cmp	r3, #32
 800521a:	d814      	bhi.n	8005246 <UART_SetConfig+0x1a2>
 800521c:	2b00      	cmp	r3, #0
 800521e:	d002      	beq.n	8005226 <UART_SetConfig+0x182>
 8005220:	2b10      	cmp	r3, #16
 8005222:	d008      	beq.n	8005236 <UART_SetConfig+0x192>
 8005224:	e00f      	b.n	8005246 <UART_SetConfig+0x1a2>
 8005226:	2300      	movs	r3, #0
 8005228:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800522c:	e0ad      	b.n	800538a <UART_SetConfig+0x2e6>
 800522e:	2302      	movs	r3, #2
 8005230:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005234:	e0a9      	b.n	800538a <UART_SetConfig+0x2e6>
 8005236:	2304      	movs	r3, #4
 8005238:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800523c:	e0a5      	b.n	800538a <UART_SetConfig+0x2e6>
 800523e:	2308      	movs	r3, #8
 8005240:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005244:	e0a1      	b.n	800538a <UART_SetConfig+0x2e6>
 8005246:	2310      	movs	r3, #16
 8005248:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800524c:	e09d      	b.n	800538a <UART_SetConfig+0x2e6>
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a4a      	ldr	r2, [pc, #296]	@ (800537c <UART_SetConfig+0x2d8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d125      	bne.n	80052a4 <UART_SetConfig+0x200>
 8005258:	4b45      	ldr	r3, [pc, #276]	@ (8005370 <UART_SetConfig+0x2cc>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005262:	2bc0      	cmp	r3, #192	@ 0xc0
 8005264:	d016      	beq.n	8005294 <UART_SetConfig+0x1f0>
 8005266:	2bc0      	cmp	r3, #192	@ 0xc0
 8005268:	d818      	bhi.n	800529c <UART_SetConfig+0x1f8>
 800526a:	2b80      	cmp	r3, #128	@ 0x80
 800526c:	d00a      	beq.n	8005284 <UART_SetConfig+0x1e0>
 800526e:	2b80      	cmp	r3, #128	@ 0x80
 8005270:	d814      	bhi.n	800529c <UART_SetConfig+0x1f8>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <UART_SetConfig+0x1d8>
 8005276:	2b40      	cmp	r3, #64	@ 0x40
 8005278:	d008      	beq.n	800528c <UART_SetConfig+0x1e8>
 800527a:	e00f      	b.n	800529c <UART_SetConfig+0x1f8>
 800527c:	2300      	movs	r3, #0
 800527e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005282:	e082      	b.n	800538a <UART_SetConfig+0x2e6>
 8005284:	2302      	movs	r3, #2
 8005286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800528a:	e07e      	b.n	800538a <UART_SetConfig+0x2e6>
 800528c:	2304      	movs	r3, #4
 800528e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005292:	e07a      	b.n	800538a <UART_SetConfig+0x2e6>
 8005294:	2308      	movs	r3, #8
 8005296:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800529a:	e076      	b.n	800538a <UART_SetConfig+0x2e6>
 800529c:	2310      	movs	r3, #16
 800529e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052a2:	e072      	b.n	800538a <UART_SetConfig+0x2e6>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a35      	ldr	r2, [pc, #212]	@ (8005380 <UART_SetConfig+0x2dc>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d12a      	bne.n	8005304 <UART_SetConfig+0x260>
 80052ae:	4b30      	ldr	r3, [pc, #192]	@ (8005370 <UART_SetConfig+0x2cc>)
 80052b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052bc:	d01a      	beq.n	80052f4 <UART_SetConfig+0x250>
 80052be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80052c2:	d81b      	bhi.n	80052fc <UART_SetConfig+0x258>
 80052c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052c8:	d00c      	beq.n	80052e4 <UART_SetConfig+0x240>
 80052ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052ce:	d815      	bhi.n	80052fc <UART_SetConfig+0x258>
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d003      	beq.n	80052dc <UART_SetConfig+0x238>
 80052d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052d8:	d008      	beq.n	80052ec <UART_SetConfig+0x248>
 80052da:	e00f      	b.n	80052fc <UART_SetConfig+0x258>
 80052dc:	2300      	movs	r3, #0
 80052de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052e2:	e052      	b.n	800538a <UART_SetConfig+0x2e6>
 80052e4:	2302      	movs	r3, #2
 80052e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ea:	e04e      	b.n	800538a <UART_SetConfig+0x2e6>
 80052ec:	2304      	movs	r3, #4
 80052ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052f2:	e04a      	b.n	800538a <UART_SetConfig+0x2e6>
 80052f4:	2308      	movs	r3, #8
 80052f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052fa:	e046      	b.n	800538a <UART_SetConfig+0x2e6>
 80052fc:	2310      	movs	r3, #16
 80052fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005302:	e042      	b.n	800538a <UART_SetConfig+0x2e6>
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a17      	ldr	r2, [pc, #92]	@ (8005368 <UART_SetConfig+0x2c4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d13a      	bne.n	8005384 <UART_SetConfig+0x2e0>
 800530e:	4b18      	ldr	r3, [pc, #96]	@ (8005370 <UART_SetConfig+0x2cc>)
 8005310:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005314:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005318:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800531c:	d01a      	beq.n	8005354 <UART_SetConfig+0x2b0>
 800531e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005322:	d81b      	bhi.n	800535c <UART_SetConfig+0x2b8>
 8005324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005328:	d00c      	beq.n	8005344 <UART_SetConfig+0x2a0>
 800532a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800532e:	d815      	bhi.n	800535c <UART_SetConfig+0x2b8>
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <UART_SetConfig+0x298>
 8005334:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005338:	d008      	beq.n	800534c <UART_SetConfig+0x2a8>
 800533a:	e00f      	b.n	800535c <UART_SetConfig+0x2b8>
 800533c:	2300      	movs	r3, #0
 800533e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005342:	e022      	b.n	800538a <UART_SetConfig+0x2e6>
 8005344:	2302      	movs	r3, #2
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800534a:	e01e      	b.n	800538a <UART_SetConfig+0x2e6>
 800534c:	2304      	movs	r3, #4
 800534e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005352:	e01a      	b.n	800538a <UART_SetConfig+0x2e6>
 8005354:	2308      	movs	r3, #8
 8005356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800535a:	e016      	b.n	800538a <UART_SetConfig+0x2e6>
 800535c:	2310      	movs	r3, #16
 800535e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005362:	e012      	b.n	800538a <UART_SetConfig+0x2e6>
 8005364:	efff69f3 	.word	0xefff69f3
 8005368:	40008000 	.word	0x40008000
 800536c:	40013800 	.word	0x40013800
 8005370:	40021000 	.word	0x40021000
 8005374:	40004400 	.word	0x40004400
 8005378:	40004800 	.word	0x40004800
 800537c:	40004c00 	.word	0x40004c00
 8005380:	40005000 	.word	0x40005000
 8005384:	2310      	movs	r3, #16
 8005386:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a9f      	ldr	r2, [pc, #636]	@ (800560c <UART_SetConfig+0x568>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d17a      	bne.n	800548a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005394:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005398:	2b08      	cmp	r3, #8
 800539a:	d824      	bhi.n	80053e6 <UART_SetConfig+0x342>
 800539c:	a201      	add	r2, pc, #4	@ (adr r2, 80053a4 <UART_SetConfig+0x300>)
 800539e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053a2:	bf00      	nop
 80053a4:	080053c9 	.word	0x080053c9
 80053a8:	080053e7 	.word	0x080053e7
 80053ac:	080053d1 	.word	0x080053d1
 80053b0:	080053e7 	.word	0x080053e7
 80053b4:	080053d7 	.word	0x080053d7
 80053b8:	080053e7 	.word	0x080053e7
 80053bc:	080053e7 	.word	0x080053e7
 80053c0:	080053e7 	.word	0x080053e7
 80053c4:	080053df 	.word	0x080053df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053c8:	f7fd fe4a 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 80053cc:	61f8      	str	r0, [r7, #28]
        break;
 80053ce:	e010      	b.n	80053f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053d0:	4b8f      	ldr	r3, [pc, #572]	@ (8005610 <UART_SetConfig+0x56c>)
 80053d2:	61fb      	str	r3, [r7, #28]
        break;
 80053d4:	e00d      	b.n	80053f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053d6:	f7fd fdab 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 80053da:	61f8      	str	r0, [r7, #28]
        break;
 80053dc:	e009      	b.n	80053f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053e2:	61fb      	str	r3, [r7, #28]
        break;
 80053e4:	e005      	b.n	80053f2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80053f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053f2:	69fb      	ldr	r3, [r7, #28]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	f000 80fb 	beq.w	80055f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	4613      	mov	r3, r2
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	4413      	add	r3, r2
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	429a      	cmp	r2, r3
 8005408:	d305      	bcc.n	8005416 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	429a      	cmp	r2, r3
 8005414:	d903      	bls.n	800541e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800541c:	e0e8      	b.n	80055f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	2200      	movs	r2, #0
 8005422:	461c      	mov	r4, r3
 8005424:	4615      	mov	r5, r2
 8005426:	f04f 0200 	mov.w	r2, #0
 800542a:	f04f 0300 	mov.w	r3, #0
 800542e:	022b      	lsls	r3, r5, #8
 8005430:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005434:	0222      	lsls	r2, r4, #8
 8005436:	68f9      	ldr	r1, [r7, #12]
 8005438:	6849      	ldr	r1, [r1, #4]
 800543a:	0849      	lsrs	r1, r1, #1
 800543c:	2000      	movs	r0, #0
 800543e:	4688      	mov	r8, r1
 8005440:	4681      	mov	r9, r0
 8005442:	eb12 0a08 	adds.w	sl, r2, r8
 8005446:	eb43 0b09 	adc.w	fp, r3, r9
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	603b      	str	r3, [r7, #0]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005458:	4650      	mov	r0, sl
 800545a:	4659      	mov	r1, fp
 800545c:	f7fa fec0 	bl	80001e0 <__aeabi_uldivmod>
 8005460:	4602      	mov	r2, r0
 8005462:	460b      	mov	r3, r1
 8005464:	4613      	mov	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005468:	69bb      	ldr	r3, [r7, #24]
 800546a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800546e:	d308      	bcc.n	8005482 <UART_SetConfig+0x3de>
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005476:	d204      	bcs.n	8005482 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	60da      	str	r2, [r3, #12]
 8005480:	e0b6      	b.n	80055f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005488:	e0b2      	b.n	80055f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	69db      	ldr	r3, [r3, #28]
 800548e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005492:	d15e      	bne.n	8005552 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005494:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005498:	2b08      	cmp	r3, #8
 800549a:	d828      	bhi.n	80054ee <UART_SetConfig+0x44a>
 800549c:	a201      	add	r2, pc, #4	@ (adr r2, 80054a4 <UART_SetConfig+0x400>)
 800549e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054a2:	bf00      	nop
 80054a4:	080054c9 	.word	0x080054c9
 80054a8:	080054d1 	.word	0x080054d1
 80054ac:	080054d9 	.word	0x080054d9
 80054b0:	080054ef 	.word	0x080054ef
 80054b4:	080054df 	.word	0x080054df
 80054b8:	080054ef 	.word	0x080054ef
 80054bc:	080054ef 	.word	0x080054ef
 80054c0:	080054ef 	.word	0x080054ef
 80054c4:	080054e7 	.word	0x080054e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054c8:	f7fd fdca 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 80054cc:	61f8      	str	r0, [r7, #28]
        break;
 80054ce:	e014      	b.n	80054fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054d0:	f7fd fddc 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 80054d4:	61f8      	str	r0, [r7, #28]
        break;
 80054d6:	e010      	b.n	80054fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005610 <UART_SetConfig+0x56c>)
 80054da:	61fb      	str	r3, [r7, #28]
        break;
 80054dc:	e00d      	b.n	80054fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054de:	f7fd fd27 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 80054e2:	61f8      	str	r0, [r7, #28]
        break;
 80054e4:	e009      	b.n	80054fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80054ea:	61fb      	str	r3, [r7, #28]
        break;
 80054ec:	e005      	b.n	80054fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80054f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d077      	beq.n	80055f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	005a      	lsls	r2, r3, #1
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	085b      	lsrs	r3, r3, #1
 800550a:	441a      	add	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b0f      	cmp	r3, #15
 800551a:	d916      	bls.n	800554a <UART_SetConfig+0x4a6>
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005522:	d212      	bcs.n	800554a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005524:	69bb      	ldr	r3, [r7, #24]
 8005526:	b29b      	uxth	r3, r3
 8005528:	f023 030f 	bic.w	r3, r3, #15
 800552c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	085b      	lsrs	r3, r3, #1
 8005532:	b29b      	uxth	r3, r3
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	b29a      	uxth	r2, r3
 800553a:	8afb      	ldrh	r3, [r7, #22]
 800553c:	4313      	orrs	r3, r2
 800553e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	8afa      	ldrh	r2, [r7, #22]
 8005546:	60da      	str	r2, [r3, #12]
 8005548:	e052      	b.n	80055f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005550:	e04e      	b.n	80055f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005552:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005556:	2b08      	cmp	r3, #8
 8005558:	d827      	bhi.n	80055aa <UART_SetConfig+0x506>
 800555a:	a201      	add	r2, pc, #4	@ (adr r2, 8005560 <UART_SetConfig+0x4bc>)
 800555c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005560:	08005585 	.word	0x08005585
 8005564:	0800558d 	.word	0x0800558d
 8005568:	08005595 	.word	0x08005595
 800556c:	080055ab 	.word	0x080055ab
 8005570:	0800559b 	.word	0x0800559b
 8005574:	080055ab 	.word	0x080055ab
 8005578:	080055ab 	.word	0x080055ab
 800557c:	080055ab 	.word	0x080055ab
 8005580:	080055a3 	.word	0x080055a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005584:	f7fd fd6c 	bl	8003060 <HAL_RCC_GetPCLK1Freq>
 8005588:	61f8      	str	r0, [r7, #28]
        break;
 800558a:	e014      	b.n	80055b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800558c:	f7fd fd7e 	bl	800308c <HAL_RCC_GetPCLK2Freq>
 8005590:	61f8      	str	r0, [r7, #28]
        break;
 8005592:	e010      	b.n	80055b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005594:	4b1e      	ldr	r3, [pc, #120]	@ (8005610 <UART_SetConfig+0x56c>)
 8005596:	61fb      	str	r3, [r7, #28]
        break;
 8005598:	e00d      	b.n	80055b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800559a:	f7fd fcc9 	bl	8002f30 <HAL_RCC_GetSysClockFreq>
 800559e:	61f8      	str	r0, [r7, #28]
        break;
 80055a0:	e009      	b.n	80055b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055a6:	61fb      	str	r3, [r7, #28]
        break;
 80055a8:	e005      	b.n	80055b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80055b4:	bf00      	nop
    }

    if (pclk != 0U)
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d019      	beq.n	80055f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	085a      	lsrs	r2, r3, #1
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	441a      	add	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	2b0f      	cmp	r3, #15
 80055d4:	d909      	bls.n	80055ea <UART_SetConfig+0x546>
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055dc:	d205      	bcs.n	80055ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055de:	69bb      	ldr	r3, [r7, #24]
 80055e0:	b29a      	uxth	r2, r3
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	60da      	str	r2, [r3, #12]
 80055e8:	e002      	b.n	80055f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80055fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005600:	4618      	mov	r0, r3
 8005602:	3728      	adds	r7, #40	@ 0x28
 8005604:	46bd      	mov	sp, r7
 8005606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800560a:	bf00      	nop
 800560c:	40008000 	.word	0x40008000
 8005610:	00f42400 	.word	0x00f42400

08005614 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005614:	b480      	push	{r7}
 8005616:	b083      	sub	sp, #12
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00a      	beq.n	8005682 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005686:	f003 0304 	and.w	r3, r3, #4
 800568a:	2b00      	cmp	r3, #0
 800568c:	d00a      	beq.n	80056a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	430a      	orrs	r2, r1
 80056a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00a      	beq.n	80056c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	430a      	orrs	r2, r1
 80056c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ca:	f003 0320 	and.w	r3, r3, #32
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d00a      	beq.n	80056e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01a      	beq.n	800572a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	430a      	orrs	r2, r1
 8005708:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800570e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005712:	d10a      	bne.n	800572a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	430a      	orrs	r2, r1
 8005728:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800572e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00a      	beq.n	800574c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685b      	ldr	r3, [r3, #4]
 800573c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	430a      	orrs	r2, r1
 800574a:	605a      	str	r2, [r3, #4]
  }
}
 800574c:	bf00      	nop
 800574e:	370c      	adds	r7, #12
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b098      	sub	sp, #96	@ 0x60
 800575c:	af02      	add	r7, sp, #8
 800575e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005768:	f7fc fbb6 	bl	8001ed8 <HAL_GetTick>
 800576c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f003 0308 	and.w	r3, r3, #8
 8005778:	2b08      	cmp	r3, #8
 800577a:	d12e      	bne.n	80057da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800577c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005780:	9300      	str	r3, [sp, #0]
 8005782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005784:	2200      	movs	r2, #0
 8005786:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f000 f88c 	bl	80058a8 <UART_WaitOnFlagUntilTimeout>
 8005790:	4603      	mov	r3, r0
 8005792:	2b00      	cmp	r3, #0
 8005794:	d021      	beq.n	80057da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579e:	e853 3f00 	ldrex	r3, [r3]
 80057a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	461a      	mov	r2, r3
 80057b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057bc:	e841 2300 	strex	r3, r2, [r1]
 80057c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e6      	bne.n	8005796 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2220      	movs	r2, #32
 80057cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e062      	b.n	80058a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d149      	bne.n	800587c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f0:	2200      	movs	r2, #0
 80057f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f856 	bl	80058a8 <UART_WaitOnFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d03c      	beq.n	800587c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	623b      	str	r3, [r7, #32]
   return(result);
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005820:	633b      	str	r3, [r7, #48]	@ 0x30
 8005822:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800582e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e6      	bne.n	8005802 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3308      	adds	r3, #8
 800583a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	60fb      	str	r3, [r7, #12]
   return(result);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0301 	bic.w	r3, r3, #1
 800584a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	3308      	adds	r3, #8
 8005852:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005854:	61fa      	str	r2, [r7, #28]
 8005856:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	69b9      	ldr	r1, [r7, #24]
 800585a:	69fa      	ldr	r2, [r7, #28]
 800585c:	e841 2300 	strex	r3, r2, [r1]
 8005860:	617b      	str	r3, [r7, #20]
   return(result);
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e5      	bne.n	8005834 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e011      	b.n	80058a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2220      	movs	r2, #32
 8005880:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2220      	movs	r2, #32
 8005886:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2200      	movs	r2, #0
 8005894:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3758      	adds	r7, #88	@ 0x58
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058b8:	e04f      	b.n	800595a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c0:	d04b      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058c2:	f7fc fb09 	bl	8001ed8 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d302      	bcc.n	80058d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e04e      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d037      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0xb2>
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2b80      	cmp	r3, #128	@ 0x80
 80058ee:	d034      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0xb2>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b40      	cmp	r3, #64	@ 0x40
 80058f4:	d031      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69db      	ldr	r3, [r3, #28]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b08      	cmp	r3, #8
 8005902:	d110      	bne.n	8005926 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2208      	movs	r2, #8
 800590a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800590c:	68f8      	ldr	r0, [r7, #12]
 800590e:	f000 f838 	bl	8005982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2208      	movs	r2, #8
 8005916:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e029      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	69db      	ldr	r3, [r3, #28]
 800592c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005930:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005934:	d111      	bne.n	800595a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800593e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 f81e 	bl	8005982 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2220      	movs	r2, #32
 800594a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e00f      	b.n	800597a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	69da      	ldr	r2, [r3, #28]
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	4013      	ands	r3, r2
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	429a      	cmp	r2, r3
 8005968:	bf0c      	ite	eq
 800596a:	2301      	moveq	r3, #1
 800596c:	2300      	movne	r3, #0
 800596e:	b2db      	uxtb	r3, r3
 8005970:	461a      	mov	r2, r3
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	429a      	cmp	r2, r3
 8005976:	d0a0      	beq.n	80058ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005982:	b480      	push	{r7}
 8005984:	b095      	sub	sp, #84	@ 0x54
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005992:	e853 3f00 	ldrex	r3, [r3]
 8005996:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800599e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	461a      	mov	r2, r3
 80059a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80059aa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80059ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80059b0:	e841 2300 	strex	r3, r2, [r1]
 80059b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80059b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e6      	bne.n	800598a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	3308      	adds	r3, #8
 80059c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	6a3b      	ldr	r3, [r7, #32]
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f023 0301 	bic.w	r3, r3, #1
 80059d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3308      	adds	r3, #8
 80059da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e5      	bne.n	80059bc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d118      	bne.n	8005a2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	e853 3f00 	ldrex	r3, [r3]
 8005a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	f023 0310 	bic.w	r3, r3, #16
 8005a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a16:	61bb      	str	r3, [r7, #24]
 8005a18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	6979      	ldr	r1, [r7, #20]
 8005a1c:	69ba      	ldr	r2, [r7, #24]
 8005a1e:	e841 2300 	strex	r3, r2, [r1]
 8005a22:	613b      	str	r3, [r7, #16]
   return(result);
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1e6      	bne.n	80059f8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2220      	movs	r2, #32
 8005a2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005a3e:	bf00      	nop
 8005a40:	3754      	adds	r7, #84	@ 0x54
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
	...

08005a4c <__NVIC_SetPriority>:
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	6039      	str	r1, [r7, #0]
 8005a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	db0a      	blt.n	8005a76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	b2da      	uxtb	r2, r3
 8005a64:	490c      	ldr	r1, [pc, #48]	@ (8005a98 <__NVIC_SetPriority+0x4c>)
 8005a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6a:	0112      	lsls	r2, r2, #4
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	440b      	add	r3, r1
 8005a70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005a74:	e00a      	b.n	8005a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	b2da      	uxtb	r2, r3
 8005a7a:	4908      	ldr	r1, [pc, #32]	@ (8005a9c <__NVIC_SetPriority+0x50>)
 8005a7c:	79fb      	ldrb	r3, [r7, #7]
 8005a7e:	f003 030f 	and.w	r3, r3, #15
 8005a82:	3b04      	subs	r3, #4
 8005a84:	0112      	lsls	r2, r2, #4
 8005a86:	b2d2      	uxtb	r2, r2
 8005a88:	440b      	add	r3, r1
 8005a8a:	761a      	strb	r2, [r3, #24]
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	e000e100 	.word	0xe000e100
 8005a9c:	e000ed00 	.word	0xe000ed00

08005aa0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005aa4:	4b05      	ldr	r3, [pc, #20]	@ (8005abc <SysTick_Handler+0x1c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005aa8:	f001 fdd6 	bl	8007658 <xTaskGetSchedulerState>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d001      	beq.n	8005ab6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005ab2:	f002 fc91 	bl	80083d8 <xPortSysTickHandler>
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	e000e010 	.word	0xe000e010

08005ac0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005ac4:	2100      	movs	r1, #0
 8005ac6:	f06f 0004 	mvn.w	r0, #4
 8005aca:	f7ff ffbf 	bl	8005a4c <__NVIC_SetPriority>
#endif
}
 8005ace:	bf00      	nop
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ada:	f3ef 8305 	mrs	r3, IPSR
 8005ade:	603b      	str	r3, [r7, #0]
  return(result);
 8005ae0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005ae6:	f06f 0305 	mvn.w	r3, #5
 8005aea:	607b      	str	r3, [r7, #4]
 8005aec:	e00c      	b.n	8005b08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005aee:	4b0a      	ldr	r3, [pc, #40]	@ (8005b18 <osKernelInitialize+0x44>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d105      	bne.n	8005b02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005af6:	4b08      	ldr	r3, [pc, #32]	@ (8005b18 <osKernelInitialize+0x44>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	607b      	str	r3, [r7, #4]
 8005b00:	e002      	b.n	8005b08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005b02:	f04f 33ff 	mov.w	r3, #4294967295
 8005b06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b08:	687b      	ldr	r3, [r7, #4]
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	370c      	adds	r7, #12
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	200003f8 	.word	0x200003f8

08005b1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b082      	sub	sp, #8
 8005b20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b22:	f3ef 8305 	mrs	r3, IPSR
 8005b26:	603b      	str	r3, [r7, #0]
  return(result);
 8005b28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d003      	beq.n	8005b36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8005b2e:	f06f 0305 	mvn.w	r3, #5
 8005b32:	607b      	str	r3, [r7, #4]
 8005b34:	e010      	b.n	8005b58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005b36:	4b0b      	ldr	r3, [pc, #44]	@ (8005b64 <osKernelStart+0x48>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	d109      	bne.n	8005b52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005b3e:	f7ff ffbf 	bl	8005ac0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005b42:	4b08      	ldr	r3, [pc, #32]	@ (8005b64 <osKernelStart+0x48>)
 8005b44:	2202      	movs	r2, #2
 8005b46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005b48:	f001 f938 	bl	8006dbc <vTaskStartScheduler>
      stat = osOK;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	607b      	str	r3, [r7, #4]
 8005b50:	e002      	b.n	8005b58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295
 8005b56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005b58:	687b      	ldr	r3, [r7, #4]
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	200003f8 	.word	0x200003f8

08005b68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08e      	sub	sp, #56	@ 0x38
 8005b6c:	af04      	add	r7, sp, #16
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b74:	2300      	movs	r3, #0
 8005b76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b78:	f3ef 8305 	mrs	r3, IPSR
 8005b7c:	617b      	str	r3, [r7, #20]
  return(result);
 8005b7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d17e      	bne.n	8005c82 <osThreadNew+0x11a>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d07b      	beq.n	8005c82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005b8a:	2380      	movs	r3, #128	@ 0x80
 8005b8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005b8e:	2318      	movs	r3, #24
 8005b90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005b92:	2300      	movs	r3, #0
 8005b94:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005b96:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d045      	beq.n	8005c2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d002      	beq.n	8005bb0 <osThreadNew+0x48>
        name = attr->name;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	699b      	ldr	r3, [r3, #24]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d008      	beq.n	8005bd6 <osThreadNew+0x6e>
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b38      	cmp	r3, #56	@ 0x38
 8005bc8:	d805      	bhi.n	8005bd6 <osThreadNew+0x6e>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <osThreadNew+0x72>
        return (NULL);
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	e054      	b.n	8005c84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	695b      	ldr	r3, [r3, #20]
 8005be6:	089b      	lsrs	r3, r3, #2
 8005be8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00e      	beq.n	8005c10 <osThreadNew+0xa8>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	2b5b      	cmp	r3, #91	@ 0x5b
 8005bf8:	d90a      	bls.n	8005c10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d006      	beq.n	8005c10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <osThreadNew+0xa8>
        mem = 1;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	e010      	b.n	8005c32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d10c      	bne.n	8005c32 <osThreadNew+0xca>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d108      	bne.n	8005c32 <osThreadNew+0xca>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d104      	bne.n	8005c32 <osThreadNew+0xca>
          mem = 0;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	61bb      	str	r3, [r7, #24]
 8005c2c:	e001      	b.n	8005c32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d110      	bne.n	8005c5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005c40:	9202      	str	r2, [sp, #8]
 8005c42:	9301      	str	r3, [sp, #4]
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	6a3a      	ldr	r2, [r7, #32]
 8005c4c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 fed8 	bl	8006a04 <xTaskCreateStatic>
 8005c54:	4603      	mov	r3, r0
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	e013      	b.n	8005c82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d110      	bne.n	8005c82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	b29a      	uxth	r2, r3
 8005c64:	f107 0310 	add.w	r3, r7, #16
 8005c68:	9301      	str	r3, [sp, #4]
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	9300      	str	r3, [sp, #0]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 ff26 	bl	8006ac4 <xTaskCreate>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d001      	beq.n	8005c82 <osThreadNew+0x11a>
            hTask = NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c82:	693b      	ldr	r3, [r7, #16]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3728      	adds	r7, #40	@ 0x28
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c94:	f3ef 8305 	mrs	r3, IPSR
 8005c98:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d003      	beq.n	8005ca8 <osDelay+0x1c>
    stat = osErrorISR;
 8005ca0:	f06f 0305 	mvn.w	r3, #5
 8005ca4:	60fb      	str	r3, [r7, #12]
 8005ca6:	e007      	b.n	8005cb8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f001 f84c 	bl	8006d50 <vTaskDelay>
    }
  }

  return (stat);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f002 f99e 	bl	800800c <pvTimerGetTimerID>
 8005cd0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d005      	beq.n	8005ce4 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68fa      	ldr	r2, [r7, #12]
 8005cde:	6852      	ldr	r2, [r2, #4]
 8005ce0:	4610      	mov	r0, r2
 8005ce2:	4798      	blx	r3
  }
}
 8005ce4:	bf00      	nop
 8005ce6:	3710      	adds	r7, #16
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd80      	pop	{r7, pc}

08005cec <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	@ 0x30
 8005cf0:	af02      	add	r7, sp, #8
 8005cf2:	60f8      	str	r0, [r7, #12]
 8005cf4:	607a      	str	r2, [r7, #4]
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	460b      	mov	r3, r1
 8005cfa:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d00:	f3ef 8305 	mrs	r3, IPSR
 8005d04:	613b      	str	r3, [r7, #16]
  return(result);
 8005d06:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d163      	bne.n	8005dd4 <osTimerNew+0xe8>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d060      	beq.n	8005dd4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005d12:	2008      	movs	r0, #8
 8005d14:	f002 fbf2 	bl	80084fc <pvPortMalloc>
 8005d18:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d059      	beq.n	8005dd4 <osTimerNew+0xe8>
      callb->func = func;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005d2c:	7afb      	ldrb	r3, [r7, #11]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d102      	bne.n	8005d38 <osTimerNew+0x4c>
        reload = pdFALSE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e001      	b.n	8005d3c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d40:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d01c      	beq.n	8005d86 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <osTimerNew+0x6e>
          name = attr->name;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d006      	beq.n	8005d70 <osTimerNew+0x84>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	2b2b      	cmp	r3, #43	@ 0x2b
 8005d68:	d902      	bls.n	8005d70 <osTimerNew+0x84>
          mem = 1;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	61bb      	str	r3, [r7, #24]
 8005d6e:	e00c      	b.n	8005d8a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d108      	bne.n	8005d8a <osTimerNew+0x9e>
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	68db      	ldr	r3, [r3, #12]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d104      	bne.n	8005d8a <osTimerNew+0x9e>
            mem = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	61bb      	str	r3, [r7, #24]
 8005d84:	e001      	b.n	8005d8a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8005d86:	2300      	movs	r3, #0
 8005d88:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d10c      	bne.n	8005daa <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	9301      	str	r3, [sp, #4]
 8005d96:	4b12      	ldr	r3, [pc, #72]	@ (8005de0 <osTimerNew+0xf4>)
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	69fa      	ldr	r2, [r7, #28]
 8005d9e:	2101      	movs	r1, #1
 8005da0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005da2:	f001 fda6 	bl	80078f2 <xTimerCreateStatic>
 8005da6:	6238      	str	r0, [r7, #32]
 8005da8:	e00b      	b.n	8005dc2 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d108      	bne.n	8005dc2 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005db0:	4b0b      	ldr	r3, [pc, #44]	@ (8005de0 <osTimerNew+0xf4>)
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	69fa      	ldr	r2, [r7, #28]
 8005db8:	2101      	movs	r1, #1
 8005dba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005dbc:	f001 fd78 	bl	80078b0 <xTimerCreate>
 8005dc0:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8005dc2:	6a3b      	ldr	r3, [r7, #32]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d105      	bne.n	8005dd4 <osTimerNew+0xe8>
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <osTimerNew+0xe8>
        vPortFree (callb);
 8005dce:	6978      	ldr	r0, [r7, #20]
 8005dd0:	f002 fc62 	bl	8008698 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3728      	adds	r7, #40	@ 0x28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	08005cc3 	.word	0x08005cc3

08005de4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005df2:	f3ef 8305 	mrs	r3, IPSR
 8005df6:	60fb      	str	r3, [r7, #12]
  return(result);
 8005df8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d003      	beq.n	8005e06 <osTimerStart+0x22>
    stat = osErrorISR;
 8005dfe:	f06f 0305 	mvn.w	r3, #5
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	e017      	b.n	8005e36 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d103      	bne.n	8005e14 <osTimerStart+0x30>
    stat = osErrorParameter;
 8005e0c:	f06f 0303 	mvn.w	r3, #3
 8005e10:	617b      	str	r3, [r7, #20]
 8005e12:	e010      	b.n	8005e36 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005e14:	2300      	movs	r3, #0
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	2300      	movs	r3, #0
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	2104      	movs	r1, #4
 8005e1e:	6938      	ldr	r0, [r7, #16]
 8005e20:	f001 fde4 	bl	80079ec <xTimerGenericCommand>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d102      	bne.n	8005e30 <osTimerStart+0x4c>
      stat = osOK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	617b      	str	r3, [r7, #20]
 8005e2e:	e002      	b.n	8005e36 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005e30:	f06f 0302 	mvn.w	r3, #2
 8005e34:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005e36:	697b      	ldr	r3, [r7, #20]
}
 8005e38:	4618      	mov	r0, r3
 8005e3a:	3718      	adds	r7, #24
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	bd80      	pop	{r7, pc}

08005e40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4a07      	ldr	r2, [pc, #28]	@ (8005e6c <vApplicationGetIdleTaskMemory+0x2c>)
 8005e50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	4a06      	ldr	r2, [pc, #24]	@ (8005e70 <vApplicationGetIdleTaskMemory+0x30>)
 8005e56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2280      	movs	r2, #128	@ 0x80
 8005e5c:	601a      	str	r2, [r3, #0]
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	200003fc 	.word	0x200003fc
 8005e70:	20000458 	.word	0x20000458

08005e74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005e74:	b480      	push	{r7}
 8005e76:	b085      	sub	sp, #20
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	4a07      	ldr	r2, [pc, #28]	@ (8005ea0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005e84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	4a06      	ldr	r2, [pc, #24]	@ (8005ea4 <vApplicationGetTimerTaskMemory+0x30>)
 8005e8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e92:	601a      	str	r2, [r3, #0]
}
 8005e94:	bf00      	nop
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr
 8005ea0:	20000658 	.word	0x20000658
 8005ea4:	200006b4 	.word	0x200006b4

08005ea8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b083      	sub	sp, #12
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f103 0208 	add.w	r2, r3, #8
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f103 0208 	add.w	r2, r3, #8
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f103 0208 	add.w	r2, r3, #8
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005edc:	bf00      	nop
 8005ede:	370c      	adds	r7, #12
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee6:	4770      	bx	lr

08005ee8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005ef6:	bf00      	nop
 8005ef8:	370c      	adds	r7, #12
 8005efa:	46bd      	mov	sp, r7
 8005efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f00:	4770      	bx	lr

08005f02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f02:	b480      	push	{r7}
 8005f04:	b085      	sub	sp, #20
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	68fa      	ldr	r2, [r7, #12]
 8005f16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	683a      	ldr	r2, [r7, #0]
 8005f26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	683a      	ldr	r2, [r7, #0]
 8005f2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	601a      	str	r2, [r3, #0]
}
 8005f3e:	bf00      	nop
 8005f40:	3714      	adds	r7, #20
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr

08005f4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f4a:	b480      	push	{r7}
 8005f4c:	b085      	sub	sp, #20
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
 8005f52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d103      	bne.n	8005f6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	60fb      	str	r3, [r7, #12]
 8005f68:	e00c      	b.n	8005f84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	60fb      	str	r3, [r7, #12]
 8005f70:	e002      	b.n	8005f78 <vListInsert+0x2e>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	60fb      	str	r3, [r7, #12]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	68ba      	ldr	r2, [r7, #8]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d2f6      	bcs.n	8005f72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	683a      	ldr	r2, [r7, #0]
 8005f9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	1c5a      	adds	r2, r3, #1
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	601a      	str	r2, [r3, #0]
}
 8005fb0:	bf00      	nop
 8005fb2:	3714      	adds	r7, #20
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fba:	4770      	bx	lr

08005fbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	6892      	ldr	r2, [r2, #8]
 8005fd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	6852      	ldr	r2, [r2, #4]
 8005fdc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d103      	bne.n	8005ff0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	1e5a      	subs	r2, r3, #1
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
}
 8006004:	4618      	mov	r0, r3
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d10b      	bne.n	800603c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006028:	f383 8811 	msr	BASEPRI, r3
 800602c:	f3bf 8f6f 	isb	sy
 8006030:	f3bf 8f4f 	dsb	sy
 8006034:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006036:	bf00      	nop
 8006038:	bf00      	nop
 800603a:	e7fd      	b.n	8006038 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800603c:	f002 f93c 	bl	80082b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006048:	68f9      	ldr	r1, [r7, #12]
 800604a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	441a      	add	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681a      	ldr	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606c:	3b01      	subs	r3, #1
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006072:	fb01 f303 	mul.w	r3, r1, r3
 8006076:	441a      	add	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	22ff      	movs	r2, #255	@ 0xff
 8006080:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	22ff      	movs	r2, #255	@ 0xff
 8006088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d114      	bne.n	80060bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01a      	beq.n	80060d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	3310      	adds	r3, #16
 800609e:	4618      	mov	r0, r3
 80060a0:	f001 f91a 	bl	80072d8 <xTaskRemoveFromEventList>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d012      	beq.n	80060d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060aa:	4b0d      	ldr	r3, [pc, #52]	@ (80060e0 <xQueueGenericReset+0xd0>)
 80060ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060b0:	601a      	str	r2, [r3, #0]
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	f3bf 8f6f 	isb	sy
 80060ba:	e009      	b.n	80060d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3310      	adds	r3, #16
 80060c0:	4618      	mov	r0, r3
 80060c2:	f7ff fef1 	bl	8005ea8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3324      	adds	r3, #36	@ 0x24
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7ff feec 	bl	8005ea8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80060d0:	f002 f924 	bl	800831c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80060d4:	2301      	movs	r3, #1
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	e000ed04 	.word	0xe000ed04

080060e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08e      	sub	sp, #56	@ 0x38
 80060e8:	af02      	add	r7, sp, #8
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
 80060f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d10b      	bne.n	8006110 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800610a:	bf00      	nop
 800610c:	bf00      	nop
 800610e:	e7fd      	b.n	800610c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d10b      	bne.n	800612e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611a:	f383 8811 	msr	BASEPRI, r3
 800611e:	f3bf 8f6f 	isb	sy
 8006122:	f3bf 8f4f 	dsb	sy
 8006126:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	e7fd      	b.n	800612a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d002      	beq.n	800613a <xQueueGenericCreateStatic+0x56>
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d001      	beq.n	800613e <xQueueGenericCreateStatic+0x5a>
 800613a:	2301      	movs	r3, #1
 800613c:	e000      	b.n	8006140 <xQueueGenericCreateStatic+0x5c>
 800613e:	2300      	movs	r3, #0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d10b      	bne.n	800615c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006148:	f383 8811 	msr	BASEPRI, r3
 800614c:	f3bf 8f6f 	isb	sy
 8006150:	f3bf 8f4f 	dsb	sy
 8006154:	623b      	str	r3, [r7, #32]
}
 8006156:	bf00      	nop
 8006158:	bf00      	nop
 800615a:	e7fd      	b.n	8006158 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d102      	bne.n	8006168 <xQueueGenericCreateStatic+0x84>
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <xQueueGenericCreateStatic+0x88>
 8006168:	2301      	movs	r3, #1
 800616a:	e000      	b.n	800616e <xQueueGenericCreateStatic+0x8a>
 800616c:	2300      	movs	r3, #0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10b      	bne.n	800618a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006176:	f383 8811 	msr	BASEPRI, r3
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	61fb      	str	r3, [r7, #28]
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	e7fd      	b.n	8006186 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800618a:	2350      	movs	r3, #80	@ 0x50
 800618c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2b50      	cmp	r3, #80	@ 0x50
 8006192:	d00b      	beq.n	80061ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	61bb      	str	r3, [r7, #24]
}
 80061a6:	bf00      	nop
 80061a8:	bf00      	nop
 80061aa:	e7fd      	b.n	80061a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80061b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00d      	beq.n	80061d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80061c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	4613      	mov	r3, r2
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	68b9      	ldr	r1, [r7, #8]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f000 f805 	bl	80061de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80061d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3730      	adds	r7, #48	@ 0x30
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}

080061de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80061de:	b580      	push	{r7, lr}
 80061e0:	b084      	sub	sp, #16
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	60f8      	str	r0, [r7, #12]
 80061e6:	60b9      	str	r1, [r7, #8]
 80061e8:	607a      	str	r2, [r7, #4]
 80061ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d103      	bne.n	80061fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	69ba      	ldr	r2, [r7, #24]
 80061f6:	601a      	str	r2, [r3, #0]
 80061f8:	e002      	b.n	8006200 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006200:	69bb      	ldr	r3, [r7, #24]
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800620c:	2101      	movs	r1, #1
 800620e:	69b8      	ldr	r0, [r7, #24]
 8006210:	f7ff fefe 	bl	8006010 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	78fa      	ldrb	r2, [r7, #3]
 8006218:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800621c:	bf00      	nop
 800621e:	3710      	adds	r7, #16
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}

08006224 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b08e      	sub	sp, #56	@ 0x38
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006232:	2300      	movs	r3, #0
 8006234:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800623a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800623c:	2b00      	cmp	r3, #0
 800623e:	d10b      	bne.n	8006258 <xQueueGenericSend+0x34>
	__asm volatile
 8006240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006244:	f383 8811 	msr	BASEPRI, r3
 8006248:	f3bf 8f6f 	isb	sy
 800624c:	f3bf 8f4f 	dsb	sy
 8006250:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006252:	bf00      	nop
 8006254:	bf00      	nop
 8006256:	e7fd      	b.n	8006254 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d103      	bne.n	8006266 <xQueueGenericSend+0x42>
 800625e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <xQueueGenericSend+0x46>
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <xQueueGenericSend+0x48>
 800626a:	2300      	movs	r3, #0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10b      	bne.n	8006288 <xQueueGenericSend+0x64>
	__asm volatile
 8006270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006274:	f383 8811 	msr	BASEPRI, r3
 8006278:	f3bf 8f6f 	isb	sy
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006282:	bf00      	nop
 8006284:	bf00      	nop
 8006286:	e7fd      	b.n	8006284 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	2b02      	cmp	r3, #2
 800628c:	d103      	bne.n	8006296 <xQueueGenericSend+0x72>
 800628e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006290:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006292:	2b01      	cmp	r3, #1
 8006294:	d101      	bne.n	800629a <xQueueGenericSend+0x76>
 8006296:	2301      	movs	r3, #1
 8006298:	e000      	b.n	800629c <xQueueGenericSend+0x78>
 800629a:	2300      	movs	r3, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10b      	bne.n	80062b8 <xQueueGenericSend+0x94>
	__asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	623b      	str	r3, [r7, #32]
}
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	e7fd      	b.n	80062b4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062b8:	f001 f9ce 	bl	8007658 <xTaskGetSchedulerState>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d102      	bne.n	80062c8 <xQueueGenericSend+0xa4>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d101      	bne.n	80062cc <xQueueGenericSend+0xa8>
 80062c8:	2301      	movs	r3, #1
 80062ca:	e000      	b.n	80062ce <xQueueGenericSend+0xaa>
 80062cc:	2300      	movs	r3, #0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10b      	bne.n	80062ea <xQueueGenericSend+0xc6>
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	61fb      	str	r3, [r7, #28]
}
 80062e4:	bf00      	nop
 80062e6:	bf00      	nop
 80062e8:	e7fd      	b.n	80062e6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80062ea:	f001 ffe5 	bl	80082b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80062ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d302      	bcc.n	8006300 <xQueueGenericSend+0xdc>
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d129      	bne.n	8006354 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	68b9      	ldr	r1, [r7, #8]
 8006304:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006306:	f000 fa0f 	bl	8006728 <prvCopyDataToQueue>
 800630a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800630c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006310:	2b00      	cmp	r3, #0
 8006312:	d010      	beq.n	8006336 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006314:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006316:	3324      	adds	r3, #36	@ 0x24
 8006318:	4618      	mov	r0, r3
 800631a:	f000 ffdd 	bl	80072d8 <xTaskRemoveFromEventList>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d013      	beq.n	800634c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006324:	4b3f      	ldr	r3, [pc, #252]	@ (8006424 <xQueueGenericSend+0x200>)
 8006326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	e00a      	b.n	800634c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800633c:	4b39      	ldr	r3, [pc, #228]	@ (8006424 <xQueueGenericSend+0x200>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	f3bf 8f4f 	dsb	sy
 8006348:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800634c:	f001 ffe6 	bl	800831c <vPortExitCritical>
				return pdPASS;
 8006350:	2301      	movs	r3, #1
 8006352:	e063      	b.n	800641c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d103      	bne.n	8006362 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800635a:	f001 ffdf 	bl	800831c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800635e:	2300      	movs	r3, #0
 8006360:	e05c      	b.n	800641c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006364:	2b00      	cmp	r3, #0
 8006366:	d106      	bne.n	8006376 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006368:	f107 0314 	add.w	r3, r7, #20
 800636c:	4618      	mov	r0, r3
 800636e:	f001 f817 	bl	80073a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006372:	2301      	movs	r3, #1
 8006374:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006376:	f001 ffd1 	bl	800831c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800637a:	f000 fd87 	bl	8006e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800637e:	f001 ff9b 	bl	80082b8 <vPortEnterCritical>
 8006382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006384:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006388:	b25b      	sxtb	r3, r3
 800638a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800638e:	d103      	bne.n	8006398 <xQueueGenericSend+0x174>
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006398:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800639a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800639e:	b25b      	sxtb	r3, r3
 80063a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a4:	d103      	bne.n	80063ae <xQueueGenericSend+0x18a>
 80063a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063ae:	f001 ffb5 	bl	800831c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063b2:	1d3a      	adds	r2, r7, #4
 80063b4:	f107 0314 	add.w	r3, r7, #20
 80063b8:	4611      	mov	r1, r2
 80063ba:	4618      	mov	r0, r3
 80063bc:	f001 f806 	bl	80073cc <xTaskCheckForTimeOut>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d124      	bne.n	8006410 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063c8:	f000 faa6 	bl	8006918 <prvIsQueueFull>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d018      	beq.n	8006404 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d4:	3310      	adds	r3, #16
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	4611      	mov	r1, r2
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 ff2a 	bl	8007234 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80063e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063e2:	f000 fa31 	bl	8006848 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80063e6:	f000 fd5f 	bl	8006ea8 <xTaskResumeAll>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	f47f af7c 	bne.w	80062ea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80063f2:	4b0c      	ldr	r3, [pc, #48]	@ (8006424 <xQueueGenericSend+0x200>)
 80063f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	e772      	b.n	80062ea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006404:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006406:	f000 fa1f 	bl	8006848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800640a:	f000 fd4d 	bl	8006ea8 <xTaskResumeAll>
 800640e:	e76c      	b.n	80062ea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006410:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006412:	f000 fa19 	bl	8006848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006416:	f000 fd47 	bl	8006ea8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800641a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800641c:	4618      	mov	r0, r3
 800641e:	3738      	adds	r7, #56	@ 0x38
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b090      	sub	sp, #64	@ 0x40
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800643a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643c:	2b00      	cmp	r3, #0
 800643e:	d10b      	bne.n	8006458 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006444:	f383 8811 	msr	BASEPRI, r3
 8006448:	f3bf 8f6f 	isb	sy
 800644c:	f3bf 8f4f 	dsb	sy
 8006450:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006452:	bf00      	nop
 8006454:	bf00      	nop
 8006456:	e7fd      	b.n	8006454 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d103      	bne.n	8006466 <xQueueGenericSendFromISR+0x3e>
 800645e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006460:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006462:	2b00      	cmp	r3, #0
 8006464:	d101      	bne.n	800646a <xQueueGenericSendFromISR+0x42>
 8006466:	2301      	movs	r3, #1
 8006468:	e000      	b.n	800646c <xQueueGenericSendFromISR+0x44>
 800646a:	2300      	movs	r3, #0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d10b      	bne.n	8006488 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006474:	f383 8811 	msr	BASEPRI, r3
 8006478:	f3bf 8f6f 	isb	sy
 800647c:	f3bf 8f4f 	dsb	sy
 8006480:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006482:	bf00      	nop
 8006484:	bf00      	nop
 8006486:	e7fd      	b.n	8006484 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b02      	cmp	r3, #2
 800648c:	d103      	bne.n	8006496 <xQueueGenericSendFromISR+0x6e>
 800648e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006490:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <xQueueGenericSendFromISR+0x72>
 8006496:	2301      	movs	r3, #1
 8006498:	e000      	b.n	800649c <xQueueGenericSendFromISR+0x74>
 800649a:	2300      	movs	r3, #0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10b      	bne.n	80064b8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	623b      	str	r3, [r7, #32]
}
 80064b2:	bf00      	nop
 80064b4:	bf00      	nop
 80064b6:	e7fd      	b.n	80064b4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064b8:	f001 ffde 	bl	8008478 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064bc:	f3ef 8211 	mrs	r2, BASEPRI
 80064c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	61fa      	str	r2, [r7, #28]
 80064d2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064d4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064d6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d302      	bcc.n	80064ea <xQueueGenericSendFromISR+0xc2>
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d12f      	bne.n	800654a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80064ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80064f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006500:	f000 f912 	bl	8006728 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006504:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800650c:	d112      	bne.n	8006534 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800650e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	2b00      	cmp	r3, #0
 8006514:	d016      	beq.n	8006544 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006518:	3324      	adds	r3, #36	@ 0x24
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fedc 	bl	80072d8 <xTaskRemoveFromEventList>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00e      	beq.n	8006544 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00b      	beq.n	8006544 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	e007      	b.n	8006544 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006534:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006538:	3301      	adds	r3, #1
 800653a:	b2db      	uxtb	r3, r3
 800653c:	b25a      	sxtb	r2, r3
 800653e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006544:	2301      	movs	r3, #1
 8006546:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006548:	e001      	b.n	800654e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800654a:	2300      	movs	r3, #0
 800654c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800654e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006550:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006558:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800655a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800655c:	4618      	mov	r0, r3
 800655e:	3740      	adds	r7, #64	@ 0x40
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b08c      	sub	sp, #48	@ 0x30
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006570:	2300      	movs	r3, #0
 8006572:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10b      	bne.n	8006596 <xQueueReceive+0x32>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	623b      	str	r3, [r7, #32]
}
 8006590:	bf00      	nop
 8006592:	bf00      	nop
 8006594:	e7fd      	b.n	8006592 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <xQueueReceive+0x40>
 800659c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800659e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <xQueueReceive+0x44>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <xQueueReceive+0x46>
 80065a8:	2300      	movs	r3, #0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10b      	bne.n	80065c6 <xQueueReceive+0x62>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	61fb      	str	r3, [r7, #28]
}
 80065c0:	bf00      	nop
 80065c2:	bf00      	nop
 80065c4:	e7fd      	b.n	80065c2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80065c6:	f001 f847 	bl	8007658 <xTaskGetSchedulerState>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d102      	bne.n	80065d6 <xQueueReceive+0x72>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <xQueueReceive+0x76>
 80065d6:	2301      	movs	r3, #1
 80065d8:	e000      	b.n	80065dc <xQueueReceive+0x78>
 80065da:	2300      	movs	r3, #0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d10b      	bne.n	80065f8 <xQueueReceive+0x94>
	__asm volatile
 80065e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	61bb      	str	r3, [r7, #24]
}
 80065f2:	bf00      	nop
 80065f4:	bf00      	nop
 80065f6:	e7fd      	b.n	80065f4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80065f8:	f001 fe5e 	bl	80082b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80065fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006600:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006604:	2b00      	cmp	r3, #0
 8006606:	d01f      	beq.n	8006648 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006608:	68b9      	ldr	r1, [r7, #8]
 800660a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800660c:	f000 f8f6 	bl	80067fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006612:	1e5a      	subs	r2, r3, #1
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00f      	beq.n	8006640 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006622:	3310      	adds	r3, #16
 8006624:	4618      	mov	r0, r3
 8006626:	f000 fe57 	bl	80072d8 <xTaskRemoveFromEventList>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d007      	beq.n	8006640 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006630:	4b3c      	ldr	r3, [pc, #240]	@ (8006724 <xQueueReceive+0x1c0>)
 8006632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006636:	601a      	str	r2, [r3, #0]
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006640:	f001 fe6c 	bl	800831c <vPortExitCritical>
				return pdPASS;
 8006644:	2301      	movs	r3, #1
 8006646:	e069      	b.n	800671c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d103      	bne.n	8006656 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800664e:	f001 fe65 	bl	800831c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006652:	2300      	movs	r3, #0
 8006654:	e062      	b.n	800671c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006658:	2b00      	cmp	r3, #0
 800665a:	d106      	bne.n	800666a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800665c:	f107 0310 	add.w	r3, r7, #16
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fe9d 	bl	80073a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006666:	2301      	movs	r3, #1
 8006668:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800666a:	f001 fe57 	bl	800831c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800666e:	f000 fc0d 	bl	8006e8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006672:	f001 fe21 	bl	80082b8 <vPortEnterCritical>
 8006676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006678:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800667c:	b25b      	sxtb	r3, r3
 800667e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006682:	d103      	bne.n	800668c <xQueueReceive+0x128>
 8006684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006686:	2200      	movs	r2, #0
 8006688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006692:	b25b      	sxtb	r3, r3
 8006694:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006698:	d103      	bne.n	80066a2 <xQueueReceive+0x13e>
 800669a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669c:	2200      	movs	r2, #0
 800669e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80066a2:	f001 fe3b 	bl	800831c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80066a6:	1d3a      	adds	r2, r7, #4
 80066a8:	f107 0310 	add.w	r3, r7, #16
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f000 fe8c 	bl	80073cc <xTaskCheckForTimeOut>
 80066b4:	4603      	mov	r3, r0
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d123      	bne.n	8006702 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80066ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066bc:	f000 f916 	bl	80068ec <prvIsQueueEmpty>
 80066c0:	4603      	mov	r3, r0
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d017      	beq.n	80066f6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80066c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c8:	3324      	adds	r3, #36	@ 0x24
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	4611      	mov	r1, r2
 80066ce:	4618      	mov	r0, r3
 80066d0:	f000 fdb0 	bl	8007234 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80066d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066d6:	f000 f8b7 	bl	8006848 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80066da:	f000 fbe5 	bl	8006ea8 <xTaskResumeAll>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d189      	bne.n	80065f8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80066e4:	4b0f      	ldr	r3, [pc, #60]	@ (8006724 <xQueueReceive+0x1c0>)
 80066e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066ea:	601a      	str	r2, [r3, #0]
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	e780      	b.n	80065f8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80066f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80066f8:	f000 f8a6 	bl	8006848 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80066fc:	f000 fbd4 	bl	8006ea8 <xTaskResumeAll>
 8006700:	e77a      	b.n	80065f8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006704:	f000 f8a0 	bl	8006848 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006708:	f000 fbce 	bl	8006ea8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800670c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800670e:	f000 f8ed 	bl	80068ec <prvIsQueueEmpty>
 8006712:	4603      	mov	r3, r0
 8006714:	2b00      	cmp	r3, #0
 8006716:	f43f af6f 	beq.w	80065f8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800671a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800671c:	4618      	mov	r0, r3
 800671e:	3730      	adds	r7, #48	@ 0x30
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}
 8006724:	e000ed04 	.word	0xe000ed04

08006728 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006734:	2300      	movs	r3, #0
 8006736:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800673c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10d      	bne.n	8006762 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d14d      	bne.n	80067ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 ff9e 	bl	8007694 <xTaskPriorityDisinherit>
 8006758:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	609a      	str	r2, [r3, #8]
 8006760:	e043      	b.n	80067ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d119      	bne.n	800679c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6858      	ldr	r0, [r3, #4]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006770:	461a      	mov	r2, r3
 8006772:	68b9      	ldr	r1, [r7, #8]
 8006774:	f002 f8dc 	bl	8008930 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685a      	ldr	r2, [r3, #4]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006780:	441a      	add	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	429a      	cmp	r2, r3
 8006790:	d32b      	bcc.n	80067ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	605a      	str	r2, [r3, #4]
 800679a:	e026      	b.n	80067ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	68d8      	ldr	r0, [r3, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a4:	461a      	mov	r2, r3
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	f002 f8c2 	bl	8008930 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b4:	425b      	negs	r3, r3
 80067b6:	441a      	add	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	68da      	ldr	r2, [r3, #12]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d207      	bcs.n	80067d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d0:	425b      	negs	r3, r3
 80067d2:	441a      	add	r2, r3
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2b02      	cmp	r3, #2
 80067dc:	d105      	bne.n	80067ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d002      	beq.n	80067ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	3b01      	subs	r3, #1
 80067e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80067f2:	697b      	ldr	r3, [r7, #20]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	d018      	beq.n	8006840 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006816:	441a      	add	r2, r3
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	68da      	ldr	r2, [r3, #12]
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	429a      	cmp	r2, r3
 8006826:	d303      	bcc.n	8006830 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68d9      	ldr	r1, [r3, #12]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006838:	461a      	mov	r2, r3
 800683a:	6838      	ldr	r0, [r7, #0]
 800683c:	f002 f878 	bl	8008930 <memcpy>
	}
}
 8006840:	bf00      	nop
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006850:	f001 fd32 	bl	80082b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800685a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800685c:	e011      	b.n	8006882 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	2b00      	cmp	r3, #0
 8006864:	d012      	beq.n	800688c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	3324      	adds	r3, #36	@ 0x24
 800686a:	4618      	mov	r0, r3
 800686c:	f000 fd34 	bl	80072d8 <xTaskRemoveFromEventList>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006876:	f000 fe0d 	bl	8007494 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	3b01      	subs	r3, #1
 800687e:	b2db      	uxtb	r3, r3
 8006880:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006886:	2b00      	cmp	r3, #0
 8006888:	dce9      	bgt.n	800685e <prvUnlockQueue+0x16>
 800688a:	e000      	b.n	800688e <prvUnlockQueue+0x46>
					break;
 800688c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	22ff      	movs	r2, #255	@ 0xff
 8006892:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006896:	f001 fd41 	bl	800831c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800689a:	f001 fd0d 	bl	80082b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068a6:	e011      	b.n	80068cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d012      	beq.n	80068d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	3310      	adds	r3, #16
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 fd0f 	bl	80072d8 <xTaskRemoveFromEventList>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80068c0:	f000 fde8 	bl	8007494 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80068c4:	7bbb      	ldrb	r3, [r7, #14]
 80068c6:	3b01      	subs	r3, #1
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80068cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dce9      	bgt.n	80068a8 <prvUnlockQueue+0x60>
 80068d4:	e000      	b.n	80068d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80068d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	22ff      	movs	r2, #255	@ 0xff
 80068dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80068e0:	f001 fd1c 	bl	800831c <vPortExitCritical>
}
 80068e4:	bf00      	nop
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b084      	sub	sp, #16
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068f4:	f001 fce0 	bl	80082b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d102      	bne.n	8006906 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006900:	2301      	movs	r3, #1
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	e001      	b.n	800690a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006906:	2300      	movs	r3, #0
 8006908:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800690a:	f001 fd07 	bl	800831c <vPortExitCritical>

	return xReturn;
 800690e:	68fb      	ldr	r3, [r7, #12]
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006920:	f001 fcca 	bl	80082b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692c:	429a      	cmp	r2, r3
 800692e:	d102      	bne.n	8006936 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006930:	2301      	movs	r3, #1
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	e001      	b.n	800693a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006936:	2300      	movs	r3, #0
 8006938:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800693a:	f001 fcef 	bl	800831c <vPortExitCritical>

	return xReturn;
 800693e:	68fb      	ldr	r3, [r7, #12]
}
 8006940:	4618      	mov	r0, r3
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}

08006948 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006952:	2300      	movs	r3, #0
 8006954:	60fb      	str	r3, [r7, #12]
 8006956:	e014      	b.n	8006982 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006958:	4a0f      	ldr	r2, [pc, #60]	@ (8006998 <vQueueAddToRegistry+0x50>)
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10b      	bne.n	800697c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006964:	490c      	ldr	r1, [pc, #48]	@ (8006998 <vQueueAddToRegistry+0x50>)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	683a      	ldr	r2, [r7, #0]
 800696a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800696e:	4a0a      	ldr	r2, [pc, #40]	@ (8006998 <vQueueAddToRegistry+0x50>)
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	4413      	add	r3, r2
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800697a:	e006      	b.n	800698a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	3301      	adds	r3, #1
 8006980:	60fb      	str	r3, [r7, #12]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b07      	cmp	r3, #7
 8006986:	d9e7      	bls.n	8006958 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop
 8006998:	20000ab4 	.word	0x20000ab4

0800699c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80069ac:	f001 fc84 	bl	80082b8 <vPortEnterCritical>
 80069b0:	697b      	ldr	r3, [r7, #20]
 80069b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069b6:	b25b      	sxtb	r3, r3
 80069b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069bc:	d103      	bne.n	80069c6 <vQueueWaitForMessageRestricted+0x2a>
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80069c6:	697b      	ldr	r3, [r7, #20]
 80069c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069cc:	b25b      	sxtb	r3, r3
 80069ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d2:	d103      	bne.n	80069dc <vQueueWaitForMessageRestricted+0x40>
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	2200      	movs	r2, #0
 80069d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80069dc:	f001 fc9e 	bl	800831c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d106      	bne.n	80069f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	3324      	adds	r3, #36	@ 0x24
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	68b9      	ldr	r1, [r7, #8]
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 fc45 	bl	8007280 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80069f6:	6978      	ldr	r0, [r7, #20]
 80069f8:	f7ff ff26 	bl	8006848 <prvUnlockQueue>
	}
 80069fc:	bf00      	nop
 80069fe:	3718      	adds	r7, #24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	bd80      	pop	{r7, pc}

08006a04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b08e      	sub	sp, #56	@ 0x38
 8006a08:	af04      	add	r7, sp, #16
 8006a0a:	60f8      	str	r0, [r7, #12]
 8006a0c:	60b9      	str	r1, [r7, #8]
 8006a0e:	607a      	str	r2, [r7, #4]
 8006a10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d10b      	bne.n	8006a30 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a1c:	f383 8811 	msr	BASEPRI, r3
 8006a20:	f3bf 8f6f 	isb	sy
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	623b      	str	r3, [r7, #32]
}
 8006a2a:	bf00      	nop
 8006a2c:	bf00      	nop
 8006a2e:	e7fd      	b.n	8006a2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10b      	bne.n	8006a4e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a3a:	f383 8811 	msr	BASEPRI, r3
 8006a3e:	f3bf 8f6f 	isb	sy
 8006a42:	f3bf 8f4f 	dsb	sy
 8006a46:	61fb      	str	r3, [r7, #28]
}
 8006a48:	bf00      	nop
 8006a4a:	bf00      	nop
 8006a4c:	e7fd      	b.n	8006a4a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006a4e:	235c      	movs	r3, #92	@ 0x5c
 8006a50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	2b5c      	cmp	r3, #92	@ 0x5c
 8006a56:	d00b      	beq.n	8006a70 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006a58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a5c:	f383 8811 	msr	BASEPRI, r3
 8006a60:	f3bf 8f6f 	isb	sy
 8006a64:	f3bf 8f4f 	dsb	sy
 8006a68:	61bb      	str	r3, [r7, #24]
}
 8006a6a:	bf00      	nop
 8006a6c:	bf00      	nop
 8006a6e:	e7fd      	b.n	8006a6c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a70:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01e      	beq.n	8006ab6 <xTaskCreateStatic+0xb2>
 8006a78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d01b      	beq.n	8006ab6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a80:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a86:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a90:	2300      	movs	r3, #0
 8006a92:	9303      	str	r3, [sp, #12]
 8006a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a96:	9302      	str	r3, [sp, #8]
 8006a98:	f107 0314 	add.w	r3, r7, #20
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 f850 	bl	8006b4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aae:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006ab0:	f000 f8de 	bl	8006c70 <prvAddNewTaskToReadyList>
 8006ab4:	e001      	b.n	8006aba <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006aba:	697b      	ldr	r3, [r7, #20]
	}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3728      	adds	r7, #40	@ 0x28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b08c      	sub	sp, #48	@ 0x30
 8006ac8:	af04      	add	r7, sp, #16
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ad4:	88fb      	ldrh	r3, [r7, #6]
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f001 fd0f 	bl	80084fc <pvPortMalloc>
 8006ade:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00e      	beq.n	8006b04 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006ae6:	205c      	movs	r0, #92	@ 0x5c
 8006ae8:	f001 fd08 	bl	80084fc <pvPortMalloc>
 8006aec:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d003      	beq.n	8006afc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	631a      	str	r2, [r3, #48]	@ 0x30
 8006afa:	e005      	b.n	8006b08 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006afc:	6978      	ldr	r0, [r7, #20]
 8006afe:	f001 fdcb 	bl	8008698 <vPortFree>
 8006b02:	e001      	b.n	8006b08 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d017      	beq.n	8006b3e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	2300      	movs	r3, #0
 8006b1a:	9303      	str	r3, [sp, #12]
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	9302      	str	r3, [sp, #8]
 8006b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b22:	9301      	str	r3, [sp, #4]
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	68b9      	ldr	r1, [r7, #8]
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f000 f80e 	bl	8006b4e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006b32:	69f8      	ldr	r0, [r7, #28]
 8006b34:	f000 f89c 	bl	8006c70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	61bb      	str	r3, [r7, #24]
 8006b3c:	e002      	b.n	8006b44 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006b3e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b42:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006b44:	69bb      	ldr	r3, [r7, #24]
	}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3720      	adds	r7, #32
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}

08006b4e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b088      	sub	sp, #32
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	60f8      	str	r0, [r7, #12]
 8006b56:	60b9      	str	r1, [r7, #8]
 8006b58:	607a      	str	r2, [r7, #4]
 8006b5a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b5e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	461a      	mov	r2, r3
 8006b66:	21a5      	movs	r1, #165	@ 0xa5
 8006b68:	f001 feb6 	bl	80088d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006b76:	3b01      	subs	r3, #1
 8006b78:	009b      	lsls	r3, r3, #2
 8006b7a:	4413      	add	r3, r2
 8006b7c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f023 0307 	bic.w	r3, r3, #7
 8006b84:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	f003 0307 	and.w	r3, r3, #7
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d00b      	beq.n	8006ba8 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b94:	f383 8811 	msr	BASEPRI, r3
 8006b98:	f3bf 8f6f 	isb	sy
 8006b9c:	f3bf 8f4f 	dsb	sy
 8006ba0:	617b      	str	r3, [r7, #20]
}
 8006ba2:	bf00      	nop
 8006ba4:	bf00      	nop
 8006ba6:	e7fd      	b.n	8006ba4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d01f      	beq.n	8006bee <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bae:	2300      	movs	r3, #0
 8006bb0:	61fb      	str	r3, [r7, #28]
 8006bb2:	e012      	b.n	8006bda <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	4413      	add	r3, r2
 8006bba:	7819      	ldrb	r1, [r3, #0]
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	3334      	adds	r3, #52	@ 0x34
 8006bc4:	460a      	mov	r2, r1
 8006bc6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	4413      	add	r3, r2
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d006      	beq.n	8006be2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006bd4:	69fb      	ldr	r3, [r7, #28]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	61fb      	str	r3, [r7, #28]
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	2b0f      	cmp	r3, #15
 8006bde:	d9e9      	bls.n	8006bb4 <prvInitialiseNewTask+0x66>
 8006be0:	e000      	b.n	8006be4 <prvInitialiseNewTask+0x96>
			{
				break;
 8006be2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bec:	e003      	b.n	8006bf6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf8:	2b37      	cmp	r3, #55	@ 0x37
 8006bfa:	d901      	bls.n	8006c00 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006bfc:	2337      	movs	r3, #55	@ 0x37
 8006bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006c00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c04:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006c06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006c0a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0e:	2200      	movs	r2, #0
 8006c10:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c14:	3304      	adds	r3, #4
 8006c16:	4618      	mov	r0, r3
 8006c18:	f7ff f966 	bl	8005ee8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c1e:	3318      	adds	r3, #24
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff f961 	bl	8005ee8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006c26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c2a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c2e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c34:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006c36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c3a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c3e:	2200      	movs	r2, #0
 8006c40:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	68f9      	ldr	r1, [r7, #12]
 8006c4e:	69b8      	ldr	r0, [r7, #24]
 8006c50:	f001 f9fe 	bl	8008050 <pxPortInitialiseStack>
 8006c54:	4602      	mov	r2, r0
 8006c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c58:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d002      	beq.n	8006c66 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c66:	bf00      	nop
 8006c68:	3720      	adds	r7, #32
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c78:	f001 fb1e 	bl	80082b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8006d34 <prvAddNewTaskToReadyList+0xc4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	3301      	adds	r3, #1
 8006c82:	4a2c      	ldr	r2, [pc, #176]	@ (8006d34 <prvAddNewTaskToReadyList+0xc4>)
 8006c84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c86:	4b2c      	ldr	r3, [pc, #176]	@ (8006d38 <prvAddNewTaskToReadyList+0xc8>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d109      	bne.n	8006ca2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c8e:	4a2a      	ldr	r2, [pc, #168]	@ (8006d38 <prvAddNewTaskToReadyList+0xc8>)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c94:	4b27      	ldr	r3, [pc, #156]	@ (8006d34 <prvAddNewTaskToReadyList+0xc4>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d110      	bne.n	8006cbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c9c:	f000 fc1e 	bl	80074dc <prvInitialiseTaskLists>
 8006ca0:	e00d      	b.n	8006cbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ca2:	4b26      	ldr	r3, [pc, #152]	@ (8006d3c <prvAddNewTaskToReadyList+0xcc>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d109      	bne.n	8006cbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006caa:	4b23      	ldr	r3, [pc, #140]	@ (8006d38 <prvAddNewTaskToReadyList+0xc8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d802      	bhi.n	8006cbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006cb8:	4a1f      	ldr	r2, [pc, #124]	@ (8006d38 <prvAddNewTaskToReadyList+0xc8>)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006cbe:	4b20      	ldr	r3, [pc, #128]	@ (8006d40 <prvAddNewTaskToReadyList+0xd0>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	4a1e      	ldr	r2, [pc, #120]	@ (8006d40 <prvAddNewTaskToReadyList+0xd0>)
 8006cc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006cc8:	4b1d      	ldr	r3, [pc, #116]	@ (8006d40 <prvAddNewTaskToReadyList+0xd0>)
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cd4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d44 <prvAddNewTaskToReadyList+0xd4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d903      	bls.n	8006ce4 <prvAddNewTaskToReadyList+0x74>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce0:	4a18      	ldr	r2, [pc, #96]	@ (8006d44 <prvAddNewTaskToReadyList+0xd4>)
 8006ce2:	6013      	str	r3, [r2, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	009b      	lsls	r3, r3, #2
 8006cf0:	4a15      	ldr	r2, [pc, #84]	@ (8006d48 <prvAddNewTaskToReadyList+0xd8>)
 8006cf2:	441a      	add	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	3304      	adds	r3, #4
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	f7ff f901 	bl	8005f02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006d00:	f001 fb0c 	bl	800831c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006d04:	4b0d      	ldr	r3, [pc, #52]	@ (8006d3c <prvAddNewTaskToReadyList+0xcc>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00e      	beq.n	8006d2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d38 <prvAddNewTaskToReadyList+0xc8>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d207      	bcs.n	8006d2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006d4c <prvAddNewTaskToReadyList+0xdc>)
 8006d1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d20:	601a      	str	r2, [r3, #0]
 8006d22:	f3bf 8f4f 	dsb	sy
 8006d26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d2a:	bf00      	nop
 8006d2c:	3708      	adds	r7, #8
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop
 8006d34:	20000fc8 	.word	0x20000fc8
 8006d38:	20000af4 	.word	0x20000af4
 8006d3c:	20000fd4 	.word	0x20000fd4
 8006d40:	20000fe4 	.word	0x20000fe4
 8006d44:	20000fd0 	.word	0x20000fd0
 8006d48:	20000af8 	.word	0x20000af8
 8006d4c:	e000ed04 	.word	0xe000ed04

08006d50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d018      	beq.n	8006d94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d62:	4b14      	ldr	r3, [pc, #80]	@ (8006db4 <vTaskDelay+0x64>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00b      	beq.n	8006d82 <vTaskDelay+0x32>
	__asm volatile
 8006d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d6e:	f383 8811 	msr	BASEPRI, r3
 8006d72:	f3bf 8f6f 	isb	sy
 8006d76:	f3bf 8f4f 	dsb	sy
 8006d7a:	60bb      	str	r3, [r7, #8]
}
 8006d7c:	bf00      	nop
 8006d7e:	bf00      	nop
 8006d80:	e7fd      	b.n	8006d7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d82:	f000 f883 	bl	8006e8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d86:	2100      	movs	r1, #0
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 fcf3 	bl	8007774 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d8e:	f000 f88b 	bl	8006ea8 <xTaskResumeAll>
 8006d92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d107      	bne.n	8006daa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006d9a:	4b07      	ldr	r3, [pc, #28]	@ (8006db8 <vTaskDelay+0x68>)
 8006d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da0:	601a      	str	r2, [r3, #0]
 8006da2:	f3bf 8f4f 	dsb	sy
 8006da6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006daa:	bf00      	nop
 8006dac:	3710      	adds	r7, #16
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	20000ff0 	.word	0x20000ff0
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b08a      	sub	sp, #40	@ 0x28
 8006dc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006dca:	463a      	mov	r2, r7
 8006dcc:	1d39      	adds	r1, r7, #4
 8006dce:	f107 0308 	add.w	r3, r7, #8
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff f834 	bl	8005e40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006dd8:	6839      	ldr	r1, [r7, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68ba      	ldr	r2, [r7, #8]
 8006dde:	9202      	str	r2, [sp, #8]
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	2300      	movs	r3, #0
 8006de4:	9300      	str	r3, [sp, #0]
 8006de6:	2300      	movs	r3, #0
 8006de8:	460a      	mov	r2, r1
 8006dea:	4922      	ldr	r1, [pc, #136]	@ (8006e74 <vTaskStartScheduler+0xb8>)
 8006dec:	4822      	ldr	r0, [pc, #136]	@ (8006e78 <vTaskStartScheduler+0xbc>)
 8006dee:	f7ff fe09 	bl	8006a04 <xTaskCreateStatic>
 8006df2:	4603      	mov	r3, r0
 8006df4:	4a21      	ldr	r2, [pc, #132]	@ (8006e7c <vTaskStartScheduler+0xc0>)
 8006df6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006df8:	4b20      	ldr	r3, [pc, #128]	@ (8006e7c <vTaskStartScheduler+0xc0>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d002      	beq.n	8006e06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006e00:	2301      	movs	r3, #1
 8006e02:	617b      	str	r3, [r7, #20]
 8006e04:	e001      	b.n	8006e0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006e06:	2300      	movs	r3, #0
 8006e08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006e0a:	697b      	ldr	r3, [r7, #20]
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d102      	bne.n	8006e16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006e10:	f000 fd04 	bl	800781c <xTimerCreateTimerTask>
 8006e14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d116      	bne.n	8006e4a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e20:	f383 8811 	msr	BASEPRI, r3
 8006e24:	f3bf 8f6f 	isb	sy
 8006e28:	f3bf 8f4f 	dsb	sy
 8006e2c:	613b      	str	r3, [r7, #16]
}
 8006e2e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006e30:	4b13      	ldr	r3, [pc, #76]	@ (8006e80 <vTaskStartScheduler+0xc4>)
 8006e32:	f04f 32ff 	mov.w	r2, #4294967295
 8006e36:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006e38:	4b12      	ldr	r3, [pc, #72]	@ (8006e84 <vTaskStartScheduler+0xc8>)
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006e3e:	4b12      	ldr	r3, [pc, #72]	@ (8006e88 <vTaskStartScheduler+0xcc>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006e44:	f001 f994 	bl	8008170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006e48:	e00f      	b.n	8006e6a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e50:	d10b      	bne.n	8006e6a <vTaskStartScheduler+0xae>
	__asm volatile
 8006e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e56:	f383 8811 	msr	BASEPRI, r3
 8006e5a:	f3bf 8f6f 	isb	sy
 8006e5e:	f3bf 8f4f 	dsb	sy
 8006e62:	60fb      	str	r3, [r7, #12]
}
 8006e64:	bf00      	nop
 8006e66:	bf00      	nop
 8006e68:	e7fd      	b.n	8006e66 <vTaskStartScheduler+0xaa>
}
 8006e6a:	bf00      	nop
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
 8006e72:	bf00      	nop
 8006e74:	08008a2c 	.word	0x08008a2c
 8006e78:	080074ad 	.word	0x080074ad
 8006e7c:	20000fec 	.word	0x20000fec
 8006e80:	20000fe8 	.word	0x20000fe8
 8006e84:	20000fd4 	.word	0x20000fd4
 8006e88:	20000fcc 	.word	0x20000fcc

08006e8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006e90:	4b04      	ldr	r3, [pc, #16]	@ (8006ea4 <vTaskSuspendAll+0x18>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3301      	adds	r3, #1
 8006e96:	4a03      	ldr	r2, [pc, #12]	@ (8006ea4 <vTaskSuspendAll+0x18>)
 8006e98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006e9a:	bf00      	nop
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	20000ff0 	.word	0x20000ff0

08006ea8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006eb6:	4b42      	ldr	r3, [pc, #264]	@ (8006fc0 <xTaskResumeAll+0x118>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d10b      	bne.n	8006ed6 <xTaskResumeAll+0x2e>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	603b      	str	r3, [r7, #0]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006ed6:	f001 f9ef 	bl	80082b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006eda:	4b39      	ldr	r3, [pc, #228]	@ (8006fc0 <xTaskResumeAll+0x118>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	4a37      	ldr	r2, [pc, #220]	@ (8006fc0 <xTaskResumeAll+0x118>)
 8006ee2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ee4:	4b36      	ldr	r3, [pc, #216]	@ (8006fc0 <xTaskResumeAll+0x118>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d162      	bne.n	8006fb2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eec:	4b35      	ldr	r3, [pc, #212]	@ (8006fc4 <xTaskResumeAll+0x11c>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d05e      	beq.n	8006fb2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ef4:	e02f      	b.n	8006f56 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef6:	4b34      	ldr	r3, [pc, #208]	@ (8006fc8 <xTaskResumeAll+0x120>)
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3318      	adds	r3, #24
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7ff f85a 	bl	8005fbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	3304      	adds	r3, #4
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f7ff f855 	bl	8005fbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f16:	4b2d      	ldr	r3, [pc, #180]	@ (8006fcc <xTaskResumeAll+0x124>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d903      	bls.n	8006f26 <xTaskResumeAll+0x7e>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f22:	4a2a      	ldr	r2, [pc, #168]	@ (8006fcc <xTaskResumeAll+0x124>)
 8006f24:	6013      	str	r3, [r2, #0]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2a:	4613      	mov	r3, r2
 8006f2c:	009b      	lsls	r3, r3, #2
 8006f2e:	4413      	add	r3, r2
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	4a27      	ldr	r2, [pc, #156]	@ (8006fd0 <xTaskResumeAll+0x128>)
 8006f34:	441a      	add	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3304      	adds	r3, #4
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	f7fe ffe0 	bl	8005f02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f46:	4b23      	ldr	r3, [pc, #140]	@ (8006fd4 <xTaskResumeAll+0x12c>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d302      	bcc.n	8006f56 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006f50:	4b21      	ldr	r3, [pc, #132]	@ (8006fd8 <xTaskResumeAll+0x130>)
 8006f52:	2201      	movs	r2, #1
 8006f54:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f56:	4b1c      	ldr	r3, [pc, #112]	@ (8006fc8 <xTaskResumeAll+0x120>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1cb      	bne.n	8006ef6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d001      	beq.n	8006f68 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f64:	f000 fb58 	bl	8007618 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006f68:	4b1c      	ldr	r3, [pc, #112]	@ (8006fdc <xTaskResumeAll+0x134>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d010      	beq.n	8006f96 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f74:	f000 f846 	bl	8007004 <xTaskIncrementTick>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006f7e:	4b16      	ldr	r3, [pc, #88]	@ (8006fd8 <xTaskResumeAll+0x130>)
 8006f80:	2201      	movs	r2, #1
 8006f82:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3b01      	subs	r3, #1
 8006f88:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d1f1      	bne.n	8006f74 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006f90:	4b12      	ldr	r3, [pc, #72]	@ (8006fdc <xTaskResumeAll+0x134>)
 8006f92:	2200      	movs	r2, #0
 8006f94:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f96:	4b10      	ldr	r3, [pc, #64]	@ (8006fd8 <xTaskResumeAll+0x130>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d009      	beq.n	8006fb2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe0 <xTaskResumeAll+0x138>)
 8006fa4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006fb2:	f001 f9b3 	bl	800831c <vPortExitCritical>

	return xAlreadyYielded;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	20000ff0 	.word	0x20000ff0
 8006fc4:	20000fc8 	.word	0x20000fc8
 8006fc8:	20000f88 	.word	0x20000f88
 8006fcc:	20000fd0 	.word	0x20000fd0
 8006fd0:	20000af8 	.word	0x20000af8
 8006fd4:	20000af4 	.word	0x20000af4
 8006fd8:	20000fdc 	.word	0x20000fdc
 8006fdc:	20000fd8 	.word	0x20000fd8
 8006fe0:	e000ed04 	.word	0xe000ed04

08006fe4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b083      	sub	sp, #12
 8006fe8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006fea:	4b05      	ldr	r3, [pc, #20]	@ (8007000 <xTaskGetTickCount+0x1c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006ff0:	687b      	ldr	r3, [r7, #4]
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	20000fcc 	.word	0x20000fcc

08007004 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800700e:	4b4f      	ldr	r3, [pc, #316]	@ (800714c <xTaskIncrementTick+0x148>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	f040 8090 	bne.w	8007138 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007018:	4b4d      	ldr	r3, [pc, #308]	@ (8007150 <xTaskIncrementTick+0x14c>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3301      	adds	r3, #1
 800701e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007020:	4a4b      	ldr	r2, [pc, #300]	@ (8007150 <xTaskIncrementTick+0x14c>)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d121      	bne.n	8007070 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800702c:	4b49      	ldr	r3, [pc, #292]	@ (8007154 <xTaskIncrementTick+0x150>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00b      	beq.n	800704e <xTaskIncrementTick+0x4a>
	__asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	603b      	str	r3, [r7, #0]
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	e7fd      	b.n	800704a <xTaskIncrementTick+0x46>
 800704e:	4b41      	ldr	r3, [pc, #260]	@ (8007154 <xTaskIncrementTick+0x150>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	4b40      	ldr	r3, [pc, #256]	@ (8007158 <xTaskIncrementTick+0x154>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a3e      	ldr	r2, [pc, #248]	@ (8007154 <xTaskIncrementTick+0x150>)
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	4a3e      	ldr	r2, [pc, #248]	@ (8007158 <xTaskIncrementTick+0x154>)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6013      	str	r3, [r2, #0]
 8007062:	4b3e      	ldr	r3, [pc, #248]	@ (800715c <xTaskIncrementTick+0x158>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	3301      	adds	r3, #1
 8007068:	4a3c      	ldr	r2, [pc, #240]	@ (800715c <xTaskIncrementTick+0x158>)
 800706a:	6013      	str	r3, [r2, #0]
 800706c:	f000 fad4 	bl	8007618 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007070:	4b3b      	ldr	r3, [pc, #236]	@ (8007160 <xTaskIncrementTick+0x15c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	693a      	ldr	r2, [r7, #16]
 8007076:	429a      	cmp	r2, r3
 8007078:	d349      	bcc.n	800710e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800707a:	4b36      	ldr	r3, [pc, #216]	@ (8007154 <xTaskIncrementTick+0x150>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d104      	bne.n	800708e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007084:	4b36      	ldr	r3, [pc, #216]	@ (8007160 <xTaskIncrementTick+0x15c>)
 8007086:	f04f 32ff 	mov.w	r2, #4294967295
 800708a:	601a      	str	r2, [r3, #0]
					break;
 800708c:	e03f      	b.n	800710e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800708e:	4b31      	ldr	r3, [pc, #196]	@ (8007154 <xTaskIncrementTick+0x150>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d203      	bcs.n	80070ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80070a6:	4a2e      	ldr	r2, [pc, #184]	@ (8007160 <xTaskIncrementTick+0x15c>)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80070ac:	e02f      	b.n	800710e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fe ff82 	bl	8005fbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d004      	beq.n	80070ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	3318      	adds	r3, #24
 80070c4:	4618      	mov	r0, r3
 80070c6:	f7fe ff79 	bl	8005fbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070ce:	4b25      	ldr	r3, [pc, #148]	@ (8007164 <xTaskIncrementTick+0x160>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d903      	bls.n	80070de <xTaskIncrementTick+0xda>
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070da:	4a22      	ldr	r2, [pc, #136]	@ (8007164 <xTaskIncrementTick+0x160>)
 80070dc:	6013      	str	r3, [r2, #0]
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007168 <xTaskIncrementTick+0x164>)
 80070ec:	441a      	add	r2, r3
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	3304      	adds	r3, #4
 80070f2:	4619      	mov	r1, r3
 80070f4:	4610      	mov	r0, r2
 80070f6:	f7fe ff04 	bl	8005f02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fe:	4b1b      	ldr	r3, [pc, #108]	@ (800716c <xTaskIncrementTick+0x168>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007104:	429a      	cmp	r2, r3
 8007106:	d3b8      	bcc.n	800707a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007108:	2301      	movs	r3, #1
 800710a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800710c:	e7b5      	b.n	800707a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800710e:	4b17      	ldr	r3, [pc, #92]	@ (800716c <xTaskIncrementTick+0x168>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007114:	4914      	ldr	r1, [pc, #80]	@ (8007168 <xTaskIncrementTick+0x164>)
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	440b      	add	r3, r1
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d901      	bls.n	800712a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007126:	2301      	movs	r3, #1
 8007128:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800712a:	4b11      	ldr	r3, [pc, #68]	@ (8007170 <xTaskIncrementTick+0x16c>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d007      	beq.n	8007142 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007132:	2301      	movs	r3, #1
 8007134:	617b      	str	r3, [r7, #20]
 8007136:	e004      	b.n	8007142 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007138:	4b0e      	ldr	r3, [pc, #56]	@ (8007174 <xTaskIncrementTick+0x170>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3301      	adds	r3, #1
 800713e:	4a0d      	ldr	r2, [pc, #52]	@ (8007174 <xTaskIncrementTick+0x170>)
 8007140:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007142:	697b      	ldr	r3, [r7, #20]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20000ff0 	.word	0x20000ff0
 8007150:	20000fcc 	.word	0x20000fcc
 8007154:	20000f80 	.word	0x20000f80
 8007158:	20000f84 	.word	0x20000f84
 800715c:	20000fe0 	.word	0x20000fe0
 8007160:	20000fe8 	.word	0x20000fe8
 8007164:	20000fd0 	.word	0x20000fd0
 8007168:	20000af8 	.word	0x20000af8
 800716c:	20000af4 	.word	0x20000af4
 8007170:	20000fdc 	.word	0x20000fdc
 8007174:	20000fd8 	.word	0x20000fd8

08007178 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800717e:	4b28      	ldr	r3, [pc, #160]	@ (8007220 <vTaskSwitchContext+0xa8>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d003      	beq.n	800718e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007186:	4b27      	ldr	r3, [pc, #156]	@ (8007224 <vTaskSwitchContext+0xac>)
 8007188:	2201      	movs	r2, #1
 800718a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800718c:	e042      	b.n	8007214 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800718e:	4b25      	ldr	r3, [pc, #148]	@ (8007224 <vTaskSwitchContext+0xac>)
 8007190:	2200      	movs	r2, #0
 8007192:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007194:	4b24      	ldr	r3, [pc, #144]	@ (8007228 <vTaskSwitchContext+0xb0>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60fb      	str	r3, [r7, #12]
 800719a:	e011      	b.n	80071c0 <vTaskSwitchContext+0x48>
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d10b      	bne.n	80071ba <vTaskSwitchContext+0x42>
	__asm volatile
 80071a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a6:	f383 8811 	msr	BASEPRI, r3
 80071aa:	f3bf 8f6f 	isb	sy
 80071ae:	f3bf 8f4f 	dsb	sy
 80071b2:	607b      	str	r3, [r7, #4]
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	e7fd      	b.n	80071b6 <vTaskSwitchContext+0x3e>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	3b01      	subs	r3, #1
 80071be:	60fb      	str	r3, [r7, #12]
 80071c0:	491a      	ldr	r1, [pc, #104]	@ (800722c <vTaskSwitchContext+0xb4>)
 80071c2:	68fa      	ldr	r2, [r7, #12]
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	440b      	add	r3, r1
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0e3      	beq.n	800719c <vTaskSwitchContext+0x24>
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	4613      	mov	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4a13      	ldr	r2, [pc, #76]	@ (800722c <vTaskSwitchContext+0xb4>)
 80071e0:	4413      	add	r3, r2
 80071e2:	60bb      	str	r3, [r7, #8]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	605a      	str	r2, [r3, #4]
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	3308      	adds	r3, #8
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d104      	bne.n	8007204 <vTaskSwitchContext+0x8c>
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	605a      	str	r2, [r3, #4]
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	68db      	ldr	r3, [r3, #12]
 800720a:	4a09      	ldr	r2, [pc, #36]	@ (8007230 <vTaskSwitchContext+0xb8>)
 800720c:	6013      	str	r3, [r2, #0]
 800720e:	4a06      	ldr	r2, [pc, #24]	@ (8007228 <vTaskSwitchContext+0xb0>)
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	6013      	str	r3, [r2, #0]
}
 8007214:	bf00      	nop
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	20000ff0 	.word	0x20000ff0
 8007224:	20000fdc 	.word	0x20000fdc
 8007228:	20000fd0 	.word	0x20000fd0
 800722c:	20000af8 	.word	0x20000af8
 8007230:	20000af4 	.word	0x20000af4

08007234 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b084      	sub	sp, #16
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
 800723c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d10b      	bne.n	800725c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007248:	f383 8811 	msr	BASEPRI, r3
 800724c:	f3bf 8f6f 	isb	sy
 8007250:	f3bf 8f4f 	dsb	sy
 8007254:	60fb      	str	r3, [r7, #12]
}
 8007256:	bf00      	nop
 8007258:	bf00      	nop
 800725a:	e7fd      	b.n	8007258 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800725c:	4b07      	ldr	r3, [pc, #28]	@ (800727c <vTaskPlaceOnEventList+0x48>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3318      	adds	r3, #24
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f7fe fe70 	bl	8005f4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800726a:	2101      	movs	r1, #1
 800726c:	6838      	ldr	r0, [r7, #0]
 800726e:	f000 fa81 	bl	8007774 <prvAddCurrentTaskToDelayedList>
}
 8007272:	bf00      	nop
 8007274:	3710      	adds	r7, #16
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	20000af4 	.word	0x20000af4

08007280 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007280:	b580      	push	{r7, lr}
 8007282:	b086      	sub	sp, #24
 8007284:	af00      	add	r7, sp, #0
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10b      	bne.n	80072aa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	617b      	str	r3, [r7, #20]
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop
 80072a8:	e7fd      	b.n	80072a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80072aa:	4b0a      	ldr	r3, [pc, #40]	@ (80072d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3318      	adds	r3, #24
 80072b0:	4619      	mov	r1, r3
 80072b2:	68f8      	ldr	r0, [r7, #12]
 80072b4:	f7fe fe25 	bl	8005f02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d002      	beq.n	80072c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80072be:	f04f 33ff 	mov.w	r3, #4294967295
 80072c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072c4:	6879      	ldr	r1, [r7, #4]
 80072c6:	68b8      	ldr	r0, [r7, #8]
 80072c8:	f000 fa54 	bl	8007774 <prvAddCurrentTaskToDelayedList>
	}
 80072cc:	bf00      	nop
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	20000af4 	.word	0x20000af4

080072d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d10b      	bne.n	8007306 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	60fb      	str	r3, [r7, #12]
}
 8007300:	bf00      	nop
 8007302:	bf00      	nop
 8007304:	e7fd      	b.n	8007302 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	3318      	adds	r3, #24
 800730a:	4618      	mov	r0, r3
 800730c:	f7fe fe56 	bl	8005fbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007310:	4b1d      	ldr	r3, [pc, #116]	@ (8007388 <xTaskRemoveFromEventList+0xb0>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d11d      	bne.n	8007354 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	3304      	adds	r3, #4
 800731c:	4618      	mov	r0, r3
 800731e:	f7fe fe4d 	bl	8005fbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007326:	4b19      	ldr	r3, [pc, #100]	@ (800738c <xTaskRemoveFromEventList+0xb4>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	429a      	cmp	r2, r3
 800732c:	d903      	bls.n	8007336 <xTaskRemoveFromEventList+0x5e>
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007332:	4a16      	ldr	r2, [pc, #88]	@ (800738c <xTaskRemoveFromEventList+0xb4>)
 8007334:	6013      	str	r3, [r2, #0]
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800733a:	4613      	mov	r3, r2
 800733c:	009b      	lsls	r3, r3, #2
 800733e:	4413      	add	r3, r2
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	4a13      	ldr	r2, [pc, #76]	@ (8007390 <xTaskRemoveFromEventList+0xb8>)
 8007344:	441a      	add	r2, r3
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	3304      	adds	r3, #4
 800734a:	4619      	mov	r1, r3
 800734c:	4610      	mov	r0, r2
 800734e:	f7fe fdd8 	bl	8005f02 <vListInsertEnd>
 8007352:	e005      	b.n	8007360 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	3318      	adds	r3, #24
 8007358:	4619      	mov	r1, r3
 800735a:	480e      	ldr	r0, [pc, #56]	@ (8007394 <xTaskRemoveFromEventList+0xbc>)
 800735c:	f7fe fdd1 	bl	8005f02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007364:	4b0c      	ldr	r3, [pc, #48]	@ (8007398 <xTaskRemoveFromEventList+0xc0>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736a:	429a      	cmp	r2, r3
 800736c:	d905      	bls.n	800737a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800736e:	2301      	movs	r3, #1
 8007370:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007372:	4b0a      	ldr	r3, [pc, #40]	@ (800739c <xTaskRemoveFromEventList+0xc4>)
 8007374:	2201      	movs	r2, #1
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	e001      	b.n	800737e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800737e:	697b      	ldr	r3, [r7, #20]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3718      	adds	r7, #24
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}
 8007388:	20000ff0 	.word	0x20000ff0
 800738c:	20000fd0 	.word	0x20000fd0
 8007390:	20000af8 	.word	0x20000af8
 8007394:	20000f88 	.word	0x20000f88
 8007398:	20000af4 	.word	0x20000af4
 800739c:	20000fdc 	.word	0x20000fdc

080073a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80073a8:	4b06      	ldr	r3, [pc, #24]	@ (80073c4 <vTaskInternalSetTimeOutState+0x24>)
 80073aa:	681a      	ldr	r2, [r3, #0]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80073b0:	4b05      	ldr	r3, [pc, #20]	@ (80073c8 <vTaskInternalSetTimeOutState+0x28>)
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	605a      	str	r2, [r3, #4]
}
 80073b8:	bf00      	nop
 80073ba:	370c      	adds	r7, #12
 80073bc:	46bd      	mov	sp, r7
 80073be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c2:	4770      	bx	lr
 80073c4:	20000fe0 	.word	0x20000fe0
 80073c8:	20000fcc 	.word	0x20000fcc

080073cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b088      	sub	sp, #32
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10b      	bne.n	80073f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80073dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e0:	f383 8811 	msr	BASEPRI, r3
 80073e4:	f3bf 8f6f 	isb	sy
 80073e8:	f3bf 8f4f 	dsb	sy
 80073ec:	613b      	str	r3, [r7, #16]
}
 80073ee:	bf00      	nop
 80073f0:	bf00      	nop
 80073f2:	e7fd      	b.n	80073f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d10b      	bne.n	8007412 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80073fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fe:	f383 8811 	msr	BASEPRI, r3
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	f3bf 8f4f 	dsb	sy
 800740a:	60fb      	str	r3, [r7, #12]
}
 800740c:	bf00      	nop
 800740e:	bf00      	nop
 8007410:	e7fd      	b.n	800740e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007412:	f000 ff51 	bl	80082b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007416:	4b1d      	ldr	r3, [pc, #116]	@ (800748c <xTaskCheckForTimeOut+0xc0>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	1ad3      	subs	r3, r2, r3
 8007424:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742e:	d102      	bne.n	8007436 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007430:	2300      	movs	r3, #0
 8007432:	61fb      	str	r3, [r7, #28]
 8007434:	e023      	b.n	800747e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	4b15      	ldr	r3, [pc, #84]	@ (8007490 <xTaskCheckForTimeOut+0xc4>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	429a      	cmp	r2, r3
 8007440:	d007      	beq.n	8007452 <xTaskCheckForTimeOut+0x86>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	69ba      	ldr	r2, [r7, #24]
 8007448:	429a      	cmp	r2, r3
 800744a:	d302      	bcc.n	8007452 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800744c:	2301      	movs	r3, #1
 800744e:	61fb      	str	r3, [r7, #28]
 8007450:	e015      	b.n	800747e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	429a      	cmp	r2, r3
 800745a:	d20b      	bcs.n	8007474 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	1ad2      	subs	r2, r2, r3
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f7ff ff99 	bl	80073a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800746e:	2300      	movs	r3, #0
 8007470:	61fb      	str	r3, [r7, #28]
 8007472:	e004      	b.n	800747e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800747a:	2301      	movs	r3, #1
 800747c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800747e:	f000 ff4d 	bl	800831c <vPortExitCritical>

	return xReturn;
 8007482:	69fb      	ldr	r3, [r7, #28]
}
 8007484:	4618      	mov	r0, r3
 8007486:	3720      	adds	r7, #32
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	20000fcc 	.word	0x20000fcc
 8007490:	20000fe0 	.word	0x20000fe0

08007494 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007494:	b480      	push	{r7}
 8007496:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007498:	4b03      	ldr	r3, [pc, #12]	@ (80074a8 <vTaskMissedYield+0x14>)
 800749a:	2201      	movs	r2, #1
 800749c:	601a      	str	r2, [r3, #0]
}
 800749e:	bf00      	nop
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	20000fdc 	.word	0x20000fdc

080074ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b082      	sub	sp, #8
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074b4:	f000 f852 	bl	800755c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074b8:	4b06      	ldr	r3, [pc, #24]	@ (80074d4 <prvIdleTask+0x28>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d9f9      	bls.n	80074b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074c0:	4b05      	ldr	r3, [pc, #20]	@ (80074d8 <prvIdleTask+0x2c>)
 80074c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074c6:	601a      	str	r2, [r3, #0]
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074d0:	e7f0      	b.n	80074b4 <prvIdleTask+0x8>
 80074d2:	bf00      	nop
 80074d4:	20000af8 	.word	0x20000af8
 80074d8:	e000ed04 	.word	0xe000ed04

080074dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074e2:	2300      	movs	r3, #0
 80074e4:	607b      	str	r3, [r7, #4]
 80074e6:	e00c      	b.n	8007502 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4a12      	ldr	r2, [pc, #72]	@ (800753c <prvInitialiseTaskLists+0x60>)
 80074f4:	4413      	add	r3, r2
 80074f6:	4618      	mov	r0, r3
 80074f8:	f7fe fcd6 	bl	8005ea8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	3301      	adds	r3, #1
 8007500:	607b      	str	r3, [r7, #4]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2b37      	cmp	r3, #55	@ 0x37
 8007506:	d9ef      	bls.n	80074e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007508:	480d      	ldr	r0, [pc, #52]	@ (8007540 <prvInitialiseTaskLists+0x64>)
 800750a:	f7fe fccd 	bl	8005ea8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800750e:	480d      	ldr	r0, [pc, #52]	@ (8007544 <prvInitialiseTaskLists+0x68>)
 8007510:	f7fe fcca 	bl	8005ea8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007514:	480c      	ldr	r0, [pc, #48]	@ (8007548 <prvInitialiseTaskLists+0x6c>)
 8007516:	f7fe fcc7 	bl	8005ea8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800751a:	480c      	ldr	r0, [pc, #48]	@ (800754c <prvInitialiseTaskLists+0x70>)
 800751c:	f7fe fcc4 	bl	8005ea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007520:	480b      	ldr	r0, [pc, #44]	@ (8007550 <prvInitialiseTaskLists+0x74>)
 8007522:	f7fe fcc1 	bl	8005ea8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007526:	4b0b      	ldr	r3, [pc, #44]	@ (8007554 <prvInitialiseTaskLists+0x78>)
 8007528:	4a05      	ldr	r2, [pc, #20]	@ (8007540 <prvInitialiseTaskLists+0x64>)
 800752a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800752c:	4b0a      	ldr	r3, [pc, #40]	@ (8007558 <prvInitialiseTaskLists+0x7c>)
 800752e:	4a05      	ldr	r2, [pc, #20]	@ (8007544 <prvInitialiseTaskLists+0x68>)
 8007530:	601a      	str	r2, [r3, #0]
}
 8007532:	bf00      	nop
 8007534:	3708      	adds	r7, #8
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	20000af8 	.word	0x20000af8
 8007540:	20000f58 	.word	0x20000f58
 8007544:	20000f6c 	.word	0x20000f6c
 8007548:	20000f88 	.word	0x20000f88
 800754c:	20000f9c 	.word	0x20000f9c
 8007550:	20000fb4 	.word	0x20000fb4
 8007554:	20000f80 	.word	0x20000f80
 8007558:	20000f84 	.word	0x20000f84

0800755c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007562:	e019      	b.n	8007598 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007564:	f000 fea8 	bl	80082b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007568:	4b10      	ldr	r3, [pc, #64]	@ (80075ac <prvCheckTasksWaitingTermination+0x50>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	3304      	adds	r3, #4
 8007574:	4618      	mov	r0, r3
 8007576:	f7fe fd21 	bl	8005fbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800757a:	4b0d      	ldr	r3, [pc, #52]	@ (80075b0 <prvCheckTasksWaitingTermination+0x54>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	3b01      	subs	r3, #1
 8007580:	4a0b      	ldr	r2, [pc, #44]	@ (80075b0 <prvCheckTasksWaitingTermination+0x54>)
 8007582:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007584:	4b0b      	ldr	r3, [pc, #44]	@ (80075b4 <prvCheckTasksWaitingTermination+0x58>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3b01      	subs	r3, #1
 800758a:	4a0a      	ldr	r2, [pc, #40]	@ (80075b4 <prvCheckTasksWaitingTermination+0x58>)
 800758c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800758e:	f000 fec5 	bl	800831c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 f810 	bl	80075b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007598:	4b06      	ldr	r3, [pc, #24]	@ (80075b4 <prvCheckTasksWaitingTermination+0x58>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d1e1      	bne.n	8007564 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000f9c 	.word	0x20000f9c
 80075b0:	20000fc8 	.word	0x20000fc8
 80075b4:	20000fb0 	.word	0x20000fb0

080075b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d108      	bne.n	80075dc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ce:	4618      	mov	r0, r3
 80075d0:	f001 f862 	bl	8008698 <vPortFree>
				vPortFree( pxTCB );
 80075d4:	6878      	ldr	r0, [r7, #4]
 80075d6:	f001 f85f 	bl	8008698 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075da:	e019      	b.n	8007610 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d103      	bne.n	80075ee <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f001 f856 	bl	8008698 <vPortFree>
	}
 80075ec:	e010      	b.n	8007610 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d00b      	beq.n	8007610 <prvDeleteTCB+0x58>
	__asm volatile
 80075f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fc:	f383 8811 	msr	BASEPRI, r3
 8007600:	f3bf 8f6f 	isb	sy
 8007604:	f3bf 8f4f 	dsb	sy
 8007608:	60fb      	str	r3, [r7, #12]
}
 800760a:	bf00      	nop
 800760c:	bf00      	nop
 800760e:	e7fd      	b.n	800760c <prvDeleteTCB+0x54>
	}
 8007610:	bf00      	nop
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800761e:	4b0c      	ldr	r3, [pc, #48]	@ (8007650 <prvResetNextTaskUnblockTime+0x38>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d104      	bne.n	8007632 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007628:	4b0a      	ldr	r3, [pc, #40]	@ (8007654 <prvResetNextTaskUnblockTime+0x3c>)
 800762a:	f04f 32ff 	mov.w	r2, #4294967295
 800762e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007630:	e008      	b.n	8007644 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007632:	4b07      	ldr	r3, [pc, #28]	@ (8007650 <prvResetNextTaskUnblockTime+0x38>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4a04      	ldr	r2, [pc, #16]	@ (8007654 <prvResetNextTaskUnblockTime+0x3c>)
 8007642:	6013      	str	r3, [r2, #0]
}
 8007644:	bf00      	nop
 8007646:	370c      	adds	r7, #12
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	20000f80 	.word	0x20000f80
 8007654:	20000fe8 	.word	0x20000fe8

08007658 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800765e:	4b0b      	ldr	r3, [pc, #44]	@ (800768c <xTaskGetSchedulerState+0x34>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d102      	bne.n	800766c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007666:	2301      	movs	r3, #1
 8007668:	607b      	str	r3, [r7, #4]
 800766a:	e008      	b.n	800767e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800766c:	4b08      	ldr	r3, [pc, #32]	@ (8007690 <xTaskGetSchedulerState+0x38>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007674:	2302      	movs	r3, #2
 8007676:	607b      	str	r3, [r7, #4]
 8007678:	e001      	b.n	800767e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800767a:	2300      	movs	r3, #0
 800767c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800767e:	687b      	ldr	r3, [r7, #4]
	}
 8007680:	4618      	mov	r0, r3
 8007682:	370c      	adds	r7, #12
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	20000fd4 	.word	0x20000fd4
 8007690:	20000ff0 	.word	0x20000ff0

08007694 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d058      	beq.n	800775c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076aa:	4b2f      	ldr	r3, [pc, #188]	@ (8007768 <xTaskPriorityDisinherit+0xd4>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	429a      	cmp	r2, r3
 80076b2:	d00b      	beq.n	80076cc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80076b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b8:	f383 8811 	msr	BASEPRI, r3
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f3bf 8f4f 	dsb	sy
 80076c4:	60fb      	str	r3, [r7, #12]
}
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
 80076ca:	e7fd      	b.n	80076c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10b      	bne.n	80076ec <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	60bb      	str	r3, [r7, #8]
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80076ec:	693b      	ldr	r3, [r7, #16]
 80076ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076f0:	1e5a      	subs	r2, r3, #1
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076fe:	429a      	cmp	r2, r3
 8007700:	d02c      	beq.n	800775c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007706:	2b00      	cmp	r3, #0
 8007708:	d128      	bne.n	800775c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	3304      	adds	r3, #4
 800770e:	4618      	mov	r0, r3
 8007710:	f7fe fc54 	bl	8005fbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007720:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800772c:	4b0f      	ldr	r3, [pc, #60]	@ (800776c <xTaskPriorityDisinherit+0xd8>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	429a      	cmp	r2, r3
 8007732:	d903      	bls.n	800773c <xTaskPriorityDisinherit+0xa8>
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007738:	4a0c      	ldr	r2, [pc, #48]	@ (800776c <xTaskPriorityDisinherit+0xd8>)
 800773a:	6013      	str	r3, [r2, #0]
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007740:	4613      	mov	r3, r2
 8007742:	009b      	lsls	r3, r3, #2
 8007744:	4413      	add	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4a09      	ldr	r2, [pc, #36]	@ (8007770 <xTaskPriorityDisinherit+0xdc>)
 800774a:	441a      	add	r2, r3
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	3304      	adds	r3, #4
 8007750:	4619      	mov	r1, r3
 8007752:	4610      	mov	r0, r2
 8007754:	f7fe fbd5 	bl	8005f02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007758:	2301      	movs	r3, #1
 800775a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800775c:	697b      	ldr	r3, [r7, #20]
	}
 800775e:	4618      	mov	r0, r3
 8007760:	3718      	adds	r7, #24
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20000af4 	.word	0x20000af4
 800776c:	20000fd0 	.word	0x20000fd0
 8007770:	20000af8 	.word	0x20000af8

08007774 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800777e:	4b21      	ldr	r3, [pc, #132]	@ (8007804 <prvAddCurrentTaskToDelayedList+0x90>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007784:	4b20      	ldr	r3, [pc, #128]	@ (8007808 <prvAddCurrentTaskToDelayedList+0x94>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	3304      	adds	r3, #4
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe fc16 	bl	8005fbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007796:	d10a      	bne.n	80077ae <prvAddCurrentTaskToDelayedList+0x3a>
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d007      	beq.n	80077ae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800779e:	4b1a      	ldr	r3, [pc, #104]	@ (8007808 <prvAddCurrentTaskToDelayedList+0x94>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	3304      	adds	r3, #4
 80077a4:	4619      	mov	r1, r3
 80077a6:	4819      	ldr	r0, [pc, #100]	@ (800780c <prvAddCurrentTaskToDelayedList+0x98>)
 80077a8:	f7fe fbab 	bl	8005f02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077ac:	e026      	b.n	80077fc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	4413      	add	r3, r2
 80077b4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077b6:	4b14      	ldr	r3, [pc, #80]	@ (8007808 <prvAddCurrentTaskToDelayedList+0x94>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	68ba      	ldr	r2, [r7, #8]
 80077bc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d209      	bcs.n	80077da <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077c6:	4b12      	ldr	r3, [pc, #72]	@ (8007810 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077c8:	681a      	ldr	r2, [r3, #0]
 80077ca:	4b0f      	ldr	r3, [pc, #60]	@ (8007808 <prvAddCurrentTaskToDelayedList+0x94>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3304      	adds	r3, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	4610      	mov	r0, r2
 80077d4:	f7fe fbb9 	bl	8005f4a <vListInsert>
}
 80077d8:	e010      	b.n	80077fc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077da:	4b0e      	ldr	r3, [pc, #56]	@ (8007814 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	4b0a      	ldr	r3, [pc, #40]	@ (8007808 <prvAddCurrentTaskToDelayedList+0x94>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3304      	adds	r3, #4
 80077e4:	4619      	mov	r1, r3
 80077e6:	4610      	mov	r0, r2
 80077e8:	f7fe fbaf 	bl	8005f4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077ec:	4b0a      	ldr	r3, [pc, #40]	@ (8007818 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d202      	bcs.n	80077fc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077f6:	4a08      	ldr	r2, [pc, #32]	@ (8007818 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	6013      	str	r3, [r2, #0]
}
 80077fc:	bf00      	nop
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	20000fcc 	.word	0x20000fcc
 8007808:	20000af4 	.word	0x20000af4
 800780c:	20000fb4 	.word	0x20000fb4
 8007810:	20000f84 	.word	0x20000f84
 8007814:	20000f80 	.word	0x20000f80
 8007818:	20000fe8 	.word	0x20000fe8

0800781c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08a      	sub	sp, #40	@ 0x28
 8007820:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007822:	2300      	movs	r3, #0
 8007824:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007826:	f000 fbb1 	bl	8007f8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800782a:	4b1d      	ldr	r3, [pc, #116]	@ (80078a0 <xTimerCreateTimerTask+0x84>)
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d021      	beq.n	8007876 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007832:	2300      	movs	r3, #0
 8007834:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800783a:	1d3a      	adds	r2, r7, #4
 800783c:	f107 0108 	add.w	r1, r7, #8
 8007840:	f107 030c 	add.w	r3, r7, #12
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe fb15 	bl	8005e74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800784a:	6879      	ldr	r1, [r7, #4]
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	68fa      	ldr	r2, [r7, #12]
 8007850:	9202      	str	r2, [sp, #8]
 8007852:	9301      	str	r3, [sp, #4]
 8007854:	2302      	movs	r3, #2
 8007856:	9300      	str	r3, [sp, #0]
 8007858:	2300      	movs	r3, #0
 800785a:	460a      	mov	r2, r1
 800785c:	4911      	ldr	r1, [pc, #68]	@ (80078a4 <xTimerCreateTimerTask+0x88>)
 800785e:	4812      	ldr	r0, [pc, #72]	@ (80078a8 <xTimerCreateTimerTask+0x8c>)
 8007860:	f7ff f8d0 	bl	8006a04 <xTaskCreateStatic>
 8007864:	4603      	mov	r3, r0
 8007866:	4a11      	ldr	r2, [pc, #68]	@ (80078ac <xTimerCreateTimerTask+0x90>)
 8007868:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800786a:	4b10      	ldr	r3, [pc, #64]	@ (80078ac <xTimerCreateTimerTask+0x90>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d001      	beq.n	8007876 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007872:	2301      	movs	r3, #1
 8007874:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d10b      	bne.n	8007894 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800787c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007880:	f383 8811 	msr	BASEPRI, r3
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	f3bf 8f4f 	dsb	sy
 800788c:	613b      	str	r3, [r7, #16]
}
 800788e:	bf00      	nop
 8007890:	bf00      	nop
 8007892:	e7fd      	b.n	8007890 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007894:	697b      	ldr	r3, [r7, #20]
}
 8007896:	4618      	mov	r0, r3
 8007898:	3718      	adds	r7, #24
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	20001024 	.word	0x20001024
 80078a4:	08008a34 	.word	0x08008a34
 80078a8:	08007b25 	.word	0x08007b25
 80078ac:	20001028 	.word	0x20001028

080078b0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b088      	sub	sp, #32
 80078b4:	af02      	add	r7, sp, #8
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80078be:	202c      	movs	r0, #44	@ 0x2c
 80078c0:	f000 fe1c 	bl	80084fc <pvPortMalloc>
 80078c4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80078c6:	697b      	ldr	r3, [r7, #20]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00d      	beq.n	80078e8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	9301      	str	r3, [sp, #4]
 80078d8:	6a3b      	ldr	r3, [r7, #32]
 80078da:	9300      	str	r3, [sp, #0]
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	687a      	ldr	r2, [r7, #4]
 80078e0:	68b9      	ldr	r1, [r7, #8]
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f845 	bl	8007972 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80078e8:	697b      	ldr	r3, [r7, #20]
	}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b08a      	sub	sp, #40	@ 0x28
 80078f6:	af02      	add	r7, sp, #8
 80078f8:	60f8      	str	r0, [r7, #12]
 80078fa:	60b9      	str	r1, [r7, #8]
 80078fc:	607a      	str	r2, [r7, #4]
 80078fe:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007900:	232c      	movs	r3, #44	@ 0x2c
 8007902:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	2b2c      	cmp	r3, #44	@ 0x2c
 8007908:	d00b      	beq.n	8007922 <xTimerCreateStatic+0x30>
	__asm volatile
 800790a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800790e:	f383 8811 	msr	BASEPRI, r3
 8007912:	f3bf 8f6f 	isb	sy
 8007916:	f3bf 8f4f 	dsb	sy
 800791a:	61bb      	str	r3, [r7, #24]
}
 800791c:	bf00      	nop
 800791e:	bf00      	nop
 8007920:	e7fd      	b.n	800791e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007922:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d10b      	bne.n	8007942 <xTimerCreateStatic+0x50>
	__asm volatile
 800792a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800792e:	f383 8811 	msr	BASEPRI, r3
 8007932:	f3bf 8f6f 	isb	sy
 8007936:	f3bf 8f4f 	dsb	sy
 800793a:	617b      	str	r3, [r7, #20]
}
 800793c:	bf00      	nop
 800793e:	bf00      	nop
 8007940:	e7fd      	b.n	800793e <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007944:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007946:	69fb      	ldr	r3, [r7, #28]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00d      	beq.n	8007968 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	9301      	str	r3, [sp, #4]
 8007958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795a:	9300      	str	r3, [sp, #0]
 800795c:	683b      	ldr	r3, [r7, #0]
 800795e:	687a      	ldr	r2, [r7, #4]
 8007960:	68b9      	ldr	r1, [r7, #8]
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 f805 	bl	8007972 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007968:	69fb      	ldr	r3, [r7, #28]
	}
 800796a:	4618      	mov	r0, r3
 800796c:	3720      	adds	r7, #32
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b086      	sub	sp, #24
 8007976:	af00      	add	r7, sp, #0
 8007978:	60f8      	str	r0, [r7, #12]
 800797a:	60b9      	str	r1, [r7, #8]
 800797c:	607a      	str	r2, [r7, #4]
 800797e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d10b      	bne.n	800799e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	617b      	str	r3, [r7, #20]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01e      	beq.n	80079e2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80079a4:	f000 faf2 	bl	8007f8c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80079a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079aa:	68fa      	ldr	r2, [r7, #12]
 80079ac:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80079ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80079b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	6a3a      	ldr	r2, [r7, #32]
 80079be:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80079c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c2:	3304      	adds	r3, #4
 80079c4:	4618      	mov	r0, r3
 80079c6:	f7fe fa8f 	bl	8005ee8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d008      	beq.n	80079e2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80079d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079d6:	f043 0304 	orr.w	r3, r3, #4
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80079e2:	bf00      	nop
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
	...

080079ec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b08a      	sub	sp, #40	@ 0x28
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079fa:	2300      	movs	r3, #0
 80079fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d10b      	bne.n	8007a1c <xTimerGenericCommand+0x30>
	__asm volatile
 8007a04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a08:	f383 8811 	msr	BASEPRI, r3
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f3bf 8f4f 	dsb	sy
 8007a14:	623b      	str	r3, [r7, #32]
}
 8007a16:	bf00      	nop
 8007a18:	bf00      	nop
 8007a1a:	e7fd      	b.n	8007a18 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007a1c:	4b19      	ldr	r3, [pc, #100]	@ (8007a84 <xTimerGenericCommand+0x98>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d02a      	beq.n	8007a7a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b05      	cmp	r3, #5
 8007a34:	dc18      	bgt.n	8007a68 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007a36:	f7ff fe0f 	bl	8007658 <xTaskGetSchedulerState>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b02      	cmp	r3, #2
 8007a3e:	d109      	bne.n	8007a54 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007a40:	4b10      	ldr	r3, [pc, #64]	@ (8007a84 <xTimerGenericCommand+0x98>)
 8007a42:	6818      	ldr	r0, [r3, #0]
 8007a44:	f107 0110 	add.w	r1, r7, #16
 8007a48:	2300      	movs	r3, #0
 8007a4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a4c:	f7fe fbea 	bl	8006224 <xQueueGenericSend>
 8007a50:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a52:	e012      	b.n	8007a7a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a54:	4b0b      	ldr	r3, [pc, #44]	@ (8007a84 <xTimerGenericCommand+0x98>)
 8007a56:	6818      	ldr	r0, [r3, #0]
 8007a58:	f107 0110 	add.w	r1, r7, #16
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	2200      	movs	r2, #0
 8007a60:	f7fe fbe0 	bl	8006224 <xQueueGenericSend>
 8007a64:	6278      	str	r0, [r7, #36]	@ 0x24
 8007a66:	e008      	b.n	8007a7a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a68:	4b06      	ldr	r3, [pc, #24]	@ (8007a84 <xTimerGenericCommand+0x98>)
 8007a6a:	6818      	ldr	r0, [r3, #0]
 8007a6c:	f107 0110 	add.w	r1, r7, #16
 8007a70:	2300      	movs	r3, #0
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	f7fe fcd8 	bl	8006428 <xQueueGenericSendFromISR>
 8007a78:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3728      	adds	r7, #40	@ 0x28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	20001024 	.word	0x20001024

08007a88 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b088      	sub	sp, #32
 8007a8c:	af02      	add	r7, sp, #8
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a92:	4b23      	ldr	r3, [pc, #140]	@ (8007b20 <prvProcessExpiredTimer+0x98>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	68db      	ldr	r3, [r3, #12]
 8007a9a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3304      	adds	r3, #4
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f7fe fa8b 	bl	8005fbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d023      	beq.n	8007afc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	699a      	ldr	r2, [r3, #24]
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	18d1      	adds	r1, r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	6978      	ldr	r0, [r7, #20]
 8007ac2:	f000 f8d5 	bl	8007c70 <prvInsertTimerInActiveList>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d020      	beq.n	8007b0e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007acc:	2300      	movs	r3, #0
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	687a      	ldr	r2, [r7, #4]
 8007ad4:	2100      	movs	r1, #0
 8007ad6:	6978      	ldr	r0, [r7, #20]
 8007ad8:	f7ff ff88 	bl	80079ec <xTimerGenericCommand>
 8007adc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d114      	bne.n	8007b0e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007ae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae8:	f383 8811 	msr	BASEPRI, r3
 8007aec:	f3bf 8f6f 	isb	sy
 8007af0:	f3bf 8f4f 	dsb	sy
 8007af4:	60fb      	str	r3, [r7, #12]
}
 8007af6:	bf00      	nop
 8007af8:	bf00      	nop
 8007afa:	e7fd      	b.n	8007af8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b02:	f023 0301 	bic.w	r3, r3, #1
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	697b      	ldr	r3, [r7, #20]
 8007b0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	6978      	ldr	r0, [r7, #20]
 8007b14:	4798      	blx	r3
}
 8007b16:	bf00      	nop
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	2000101c 	.word	0x2000101c

08007b24 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b2c:	f107 0308 	add.w	r3, r7, #8
 8007b30:	4618      	mov	r0, r3
 8007b32:	f000 f859 	bl	8007be8 <prvGetNextExpireTime>
 8007b36:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f000 f805 	bl	8007b4c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007b42:	f000 f8d7 	bl	8007cf4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007b46:	bf00      	nop
 8007b48:	e7f0      	b.n	8007b2c <prvTimerTask+0x8>
	...

08007b4c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b56:	f7ff f999 	bl	8006e8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b5a:	f107 0308 	add.w	r3, r7, #8
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f000 f866 	bl	8007c30 <prvSampleTimeNow>
 8007b64:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d130      	bne.n	8007bce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d10a      	bne.n	8007b88 <prvProcessTimerOrBlockTask+0x3c>
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d806      	bhi.n	8007b88 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b7a:	f7ff f995 	bl	8006ea8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b7e:	68f9      	ldr	r1, [r7, #12]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f7ff ff81 	bl	8007a88 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b86:	e024      	b.n	8007bd2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d008      	beq.n	8007ba0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b8e:	4b13      	ldr	r3, [pc, #76]	@ (8007bdc <prvProcessTimerOrBlockTask+0x90>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d101      	bne.n	8007b9c <prvProcessTimerOrBlockTask+0x50>
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e000      	b.n	8007b9e <prvProcessTimerOrBlockTask+0x52>
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8007be0 <prvProcessTimerOrBlockTask+0x94>)
 8007ba2:	6818      	ldr	r0, [r3, #0]
 8007ba4:	687a      	ldr	r2, [r7, #4]
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	1ad3      	subs	r3, r2, r3
 8007baa:	683a      	ldr	r2, [r7, #0]
 8007bac:	4619      	mov	r1, r3
 8007bae:	f7fe fef5 	bl	800699c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007bb2:	f7ff f979 	bl	8006ea8 <xTaskResumeAll>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007bbc:	4b09      	ldr	r3, [pc, #36]	@ (8007be4 <prvProcessTimerOrBlockTask+0x98>)
 8007bbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	f3bf 8f6f 	isb	sy
}
 8007bcc:	e001      	b.n	8007bd2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007bce:	f7ff f96b 	bl	8006ea8 <xTaskResumeAll>
}
 8007bd2:	bf00      	nop
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20001020 	.word	0x20001020
 8007be0:	20001024 	.word	0x20001024
 8007be4:	e000ed04 	.word	0xe000ed04

08007be8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007be8:	b480      	push	{r7}
 8007bea:	b085      	sub	sp, #20
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8007c2c <prvGetNextExpireTime+0x44>)
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d101      	bne.n	8007bfe <prvGetNextExpireTime+0x16>
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	e000      	b.n	8007c00 <prvGetNextExpireTime+0x18>
 8007bfe:	2200      	movs	r2, #0
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d105      	bne.n	8007c18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007c0c:	4b07      	ldr	r3, [pc, #28]	@ (8007c2c <prvGetNextExpireTime+0x44>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	60fb      	str	r3, [r7, #12]
 8007c16:	e001      	b.n	8007c1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	2000101c 	.word	0x2000101c

08007c30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007c38:	f7ff f9d4 	bl	8006fe4 <xTaskGetTickCount>
 8007c3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007c6c <prvSampleTimeNow+0x3c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d205      	bcs.n	8007c54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007c48:	f000 f93a 	bl	8007ec0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e002      	b.n	8007c5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c5a:	4a04      	ldr	r2, [pc, #16]	@ (8007c6c <prvSampleTimeNow+0x3c>)
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c60:	68fb      	ldr	r3, [r7, #12]
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3710      	adds	r7, #16
 8007c66:	46bd      	mov	sp, r7
 8007c68:	bd80      	pop	{r7, pc}
 8007c6a:	bf00      	nop
 8007c6c:	2000102c 	.word	0x2000102c

08007c70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b086      	sub	sp, #24
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	68ba      	ldr	r2, [r7, #8]
 8007c86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	68fa      	ldr	r2, [r7, #12]
 8007c8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d812      	bhi.n	8007cbc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	1ad2      	subs	r2, r2, r3
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d302      	bcc.n	8007caa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	617b      	str	r3, [r7, #20]
 8007ca8:	e01b      	b.n	8007ce2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007caa:	4b10      	ldr	r3, [pc, #64]	@ (8007cec <prvInsertTimerInActiveList+0x7c>)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	f7fe f948 	bl	8005f4a <vListInsert>
 8007cba:	e012      	b.n	8007ce2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d206      	bcs.n	8007cd2 <prvInsertTimerInActiveList+0x62>
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d302      	bcc.n	8007cd2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	617b      	str	r3, [r7, #20]
 8007cd0:	e007      	b.n	8007ce2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007cd2:	4b07      	ldr	r3, [pc, #28]	@ (8007cf0 <prvInsertTimerInActiveList+0x80>)
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3304      	adds	r3, #4
 8007cda:	4619      	mov	r1, r3
 8007cdc:	4610      	mov	r0, r2
 8007cde:	f7fe f934 	bl	8005f4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ce2:	697b      	ldr	r3, [r7, #20]
}
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	3718      	adds	r7, #24
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}
 8007cec:	20001020 	.word	0x20001020
 8007cf0:	2000101c 	.word	0x2000101c

08007cf4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b08e      	sub	sp, #56	@ 0x38
 8007cf8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cfa:	e0ce      	b.n	8007e9a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	da19      	bge.n	8007d36 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007d02:	1d3b      	adds	r3, r7, #4
 8007d04:	3304      	adds	r3, #4
 8007d06:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10b      	bne.n	8007d26 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	61fb      	str	r3, [r7, #28]
}
 8007d20:	bf00      	nop
 8007d22:	bf00      	nop
 8007d24:	e7fd      	b.n	8007d22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d2c:	6850      	ldr	r0, [r2, #4]
 8007d2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d30:	6892      	ldr	r2, [r2, #8]
 8007d32:	4611      	mov	r1, r2
 8007d34:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	f2c0 80ae 	blt.w	8007e9a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d004      	beq.n	8007d54 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4c:	3304      	adds	r3, #4
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe f934 	bl	8005fbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d54:	463b      	mov	r3, r7
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff ff6a 	bl	8007c30 <prvSampleTimeNow>
 8007d5c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b09      	cmp	r3, #9
 8007d62:	f200 8097 	bhi.w	8007e94 <prvProcessReceivedCommands+0x1a0>
 8007d66:	a201      	add	r2, pc, #4	@ (adr r2, 8007d6c <prvProcessReceivedCommands+0x78>)
 8007d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d6c:	08007d95 	.word	0x08007d95
 8007d70:	08007d95 	.word	0x08007d95
 8007d74:	08007d95 	.word	0x08007d95
 8007d78:	08007e0b 	.word	0x08007e0b
 8007d7c:	08007e1f 	.word	0x08007e1f
 8007d80:	08007e6b 	.word	0x08007e6b
 8007d84:	08007d95 	.word	0x08007d95
 8007d88:	08007d95 	.word	0x08007d95
 8007d8c:	08007e0b 	.word	0x08007e0b
 8007d90:	08007e1f 	.word	0x08007e1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d9a:	f043 0301 	orr.w	r3, r3, #1
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007da2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007daa:	699b      	ldr	r3, [r3, #24]
 8007dac:	18d1      	adds	r1, r2, r3
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007db2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007db4:	f7ff ff5c 	bl	8007c70 <prvInsertTimerInActiveList>
 8007db8:	4603      	mov	r3, r0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d06c      	beq.n	8007e98 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dcc:	f003 0304 	and.w	r3, r3, #4
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d061      	beq.n	8007e98 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	441a      	add	r2, r3
 8007ddc:	2300      	movs	r3, #0
 8007dde:	9300      	str	r3, [sp, #0]
 8007de0:	2300      	movs	r3, #0
 8007de2:	2100      	movs	r1, #0
 8007de4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007de6:	f7ff fe01 	bl	80079ec <xTimerGenericCommand>
 8007dea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d152      	bne.n	8007e98 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df6:	f383 8811 	msr	BASEPRI, r3
 8007dfa:	f3bf 8f6f 	isb	sy
 8007dfe:	f3bf 8f4f 	dsb	sy
 8007e02:	61bb      	str	r3, [r7, #24]
}
 8007e04:	bf00      	nop
 8007e06:	bf00      	nop
 8007e08:	e7fd      	b.n	8007e06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e10:	f023 0301 	bic.w	r3, r3, #1
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e1c:	e03d      	b.n	8007e9a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e24:	f043 0301 	orr.w	r3, r3, #1
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007e30:	68ba      	ldr	r2, [r7, #8]
 8007e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10b      	bne.n	8007e56 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	617b      	str	r3, [r7, #20]
}
 8007e50:	bf00      	nop
 8007e52:	bf00      	nop
 8007e54:	e7fd      	b.n	8007e52 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e58:	699a      	ldr	r2, [r3, #24]
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e5c:	18d1      	adds	r1, r2, r3
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e64:	f7ff ff04 	bl	8007c70 <prvInsertTimerInActiveList>
					break;
 8007e68:	e017      	b.n	8007e9a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d103      	bne.n	8007e80 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007e78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007e7a:	f000 fc0d 	bl	8008698 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e7e:	e00c      	b.n	8007e9a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e86:	f023 0301 	bic.w	r3, r3, #1
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007e92:	e002      	b.n	8007e9a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007e94:	bf00      	nop
 8007e96:	e000      	b.n	8007e9a <prvProcessReceivedCommands+0x1a6>
					break;
 8007e98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e9a:	4b08      	ldr	r3, [pc, #32]	@ (8007ebc <prvProcessReceivedCommands+0x1c8>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	1d39      	adds	r1, r7, #4
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7fe fb5e 	bl	8006564 <xQueueReceive>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f47f af26 	bne.w	8007cfc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007eb0:	bf00      	nop
 8007eb2:	bf00      	nop
 8007eb4:	3730      	adds	r7, #48	@ 0x30
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	20001024 	.word	0x20001024

08007ec0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b088      	sub	sp, #32
 8007ec4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ec6:	e049      	b.n	8007f5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8007f84 <prvSwitchTimerLists+0xc4>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8007f84 <prvSwitchTimerLists+0xc4>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	68db      	ldr	r3, [r3, #12]
 8007eda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	3304      	adds	r3, #4
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f7fe f86b 	bl	8005fbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6a1b      	ldr	r3, [r3, #32]
 8007eea:	68f8      	ldr	r0, [r7, #12]
 8007eec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ef4:	f003 0304 	and.w	r3, r3, #4
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d02f      	beq.n	8007f5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	699b      	ldr	r3, [r3, #24]
 8007f00:	693a      	ldr	r2, [r7, #16]
 8007f02:	4413      	add	r3, r2
 8007f04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007f06:	68ba      	ldr	r2, [r7, #8]
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	d90e      	bls.n	8007f2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f1a:	4b1a      	ldr	r3, [pc, #104]	@ (8007f84 <prvSwitchTimerLists+0xc4>)
 8007f1c:	681a      	ldr	r2, [r3, #0]
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3304      	adds	r3, #4
 8007f22:	4619      	mov	r1, r3
 8007f24:	4610      	mov	r0, r2
 8007f26:	f7fe f810 	bl	8005f4a <vListInsert>
 8007f2a:	e017      	b.n	8007f5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	9300      	str	r3, [sp, #0]
 8007f30:	2300      	movs	r3, #0
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	2100      	movs	r1, #0
 8007f36:	68f8      	ldr	r0, [r7, #12]
 8007f38:	f7ff fd58 	bl	80079ec <xTimerGenericCommand>
 8007f3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10b      	bne.n	8007f5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f48:	f383 8811 	msr	BASEPRI, r3
 8007f4c:	f3bf 8f6f 	isb	sy
 8007f50:	f3bf 8f4f 	dsb	sy
 8007f54:	603b      	str	r3, [r7, #0]
}
 8007f56:	bf00      	nop
 8007f58:	bf00      	nop
 8007f5a:	e7fd      	b.n	8007f58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f5c:	4b09      	ldr	r3, [pc, #36]	@ (8007f84 <prvSwitchTimerLists+0xc4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1b0      	bne.n	8007ec8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f66:	4b07      	ldr	r3, [pc, #28]	@ (8007f84 <prvSwitchTimerLists+0xc4>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f6c:	4b06      	ldr	r3, [pc, #24]	@ (8007f88 <prvSwitchTimerLists+0xc8>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a04      	ldr	r2, [pc, #16]	@ (8007f84 <prvSwitchTimerLists+0xc4>)
 8007f72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f74:	4a04      	ldr	r2, [pc, #16]	@ (8007f88 <prvSwitchTimerLists+0xc8>)
 8007f76:	697b      	ldr	r3, [r7, #20]
 8007f78:	6013      	str	r3, [r2, #0]
}
 8007f7a:	bf00      	nop
 8007f7c:	3718      	adds	r7, #24
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	2000101c 	.word	0x2000101c
 8007f88:	20001020 	.word	0x20001020

08007f8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f92:	f000 f991 	bl	80082b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f96:	4b15      	ldr	r3, [pc, #84]	@ (8007fec <prvCheckForValidListAndQueue+0x60>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d120      	bne.n	8007fe0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f9e:	4814      	ldr	r0, [pc, #80]	@ (8007ff0 <prvCheckForValidListAndQueue+0x64>)
 8007fa0:	f7fd ff82 	bl	8005ea8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007fa4:	4813      	ldr	r0, [pc, #76]	@ (8007ff4 <prvCheckForValidListAndQueue+0x68>)
 8007fa6:	f7fd ff7f 	bl	8005ea8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007faa:	4b13      	ldr	r3, [pc, #76]	@ (8007ff8 <prvCheckForValidListAndQueue+0x6c>)
 8007fac:	4a10      	ldr	r2, [pc, #64]	@ (8007ff0 <prvCheckForValidListAndQueue+0x64>)
 8007fae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007fb0:	4b12      	ldr	r3, [pc, #72]	@ (8007ffc <prvCheckForValidListAndQueue+0x70>)
 8007fb2:	4a10      	ldr	r2, [pc, #64]	@ (8007ff4 <prvCheckForValidListAndQueue+0x68>)
 8007fb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	9300      	str	r3, [sp, #0]
 8007fba:	4b11      	ldr	r3, [pc, #68]	@ (8008000 <prvCheckForValidListAndQueue+0x74>)
 8007fbc:	4a11      	ldr	r2, [pc, #68]	@ (8008004 <prvCheckForValidListAndQueue+0x78>)
 8007fbe:	2110      	movs	r1, #16
 8007fc0:	200a      	movs	r0, #10
 8007fc2:	f7fe f88f 	bl	80060e4 <xQueueGenericCreateStatic>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4a08      	ldr	r2, [pc, #32]	@ (8007fec <prvCheckForValidListAndQueue+0x60>)
 8007fca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007fcc:	4b07      	ldr	r3, [pc, #28]	@ (8007fec <prvCheckForValidListAndQueue+0x60>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d005      	beq.n	8007fe0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007fd4:	4b05      	ldr	r3, [pc, #20]	@ (8007fec <prvCheckForValidListAndQueue+0x60>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	490b      	ldr	r1, [pc, #44]	@ (8008008 <prvCheckForValidListAndQueue+0x7c>)
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fe fcb4 	bl	8006948 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007fe0:	f000 f99c 	bl	800831c <vPortExitCritical>
}
 8007fe4:	bf00      	nop
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	20001024 	.word	0x20001024
 8007ff0:	20000ff4 	.word	0x20000ff4
 8007ff4:	20001008 	.word	0x20001008
 8007ff8:	2000101c 	.word	0x2000101c
 8007ffc:	20001020 	.word	0x20001020
 8008000:	200010d0 	.word	0x200010d0
 8008004:	20001030 	.word	0x20001030
 8008008:	08008a3c 	.word	0x08008a3c

0800800c <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b086      	sub	sp, #24
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d10b      	bne.n	8008036 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800801e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008022:	f383 8811 	msr	BASEPRI, r3
 8008026:	f3bf 8f6f 	isb	sy
 800802a:	f3bf 8f4f 	dsb	sy
 800802e:	60fb      	str	r3, [r7, #12]
}
 8008030:	bf00      	nop
 8008032:	bf00      	nop
 8008034:	e7fd      	b.n	8008032 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8008036:	f000 f93f 	bl	80082b8 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8008040:	f000 f96c 	bl	800831c <vPortExitCritical>

	return pvReturn;
 8008044:	693b      	ldr	r3, [r7, #16]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3718      	adds	r7, #24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3b04      	subs	r3, #4
 8008060:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3b04      	subs	r3, #4
 800806e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f023 0201 	bic.w	r2, r3, #1
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3b04      	subs	r3, #4
 800807e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008080:	4a0c      	ldr	r2, [pc, #48]	@ (80080b4 <pxPortInitialiseStack+0x64>)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3b14      	subs	r3, #20
 800808a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3b04      	subs	r3, #4
 8008096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f06f 0202 	mvn.w	r2, #2
 800809e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3b20      	subs	r3, #32
 80080a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080a6:	68fb      	ldr	r3, [r7, #12]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	080080b9 	.word	0x080080b9

080080b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080c2:	4b13      	ldr	r3, [pc, #76]	@ (8008110 <prvTaskExitError+0x58>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ca:	d00b      	beq.n	80080e4 <prvTaskExitError+0x2c>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60fb      	str	r3, [r7, #12]
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	e7fd      	b.n	80080e0 <prvTaskExitError+0x28>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	60bb      	str	r3, [r7, #8]
}
 80080f6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080f8:	bf00      	nop
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d0fc      	beq.n	80080fa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008100:	bf00      	nop
 8008102:	bf00      	nop
 8008104:	3714      	adds	r7, #20
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
 800810e:	bf00      	nop
 8008110:	20000048 	.word	0x20000048
	...

08008120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008120:	4b07      	ldr	r3, [pc, #28]	@ (8008140 <pxCurrentTCBConst2>)
 8008122:	6819      	ldr	r1, [r3, #0]
 8008124:	6808      	ldr	r0, [r1, #0]
 8008126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812a:	f380 8809 	msr	PSP, r0
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f380 8811 	msr	BASEPRI, r0
 800813a:	4770      	bx	lr
 800813c:	f3af 8000 	nop.w

08008140 <pxCurrentTCBConst2>:
 8008140:	20000af4 	.word	0x20000af4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop

08008148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008148:	4808      	ldr	r0, [pc, #32]	@ (800816c <prvPortStartFirstTask+0x24>)
 800814a:	6800      	ldr	r0, [r0, #0]
 800814c:	6800      	ldr	r0, [r0, #0]
 800814e:	f380 8808 	msr	MSP, r0
 8008152:	f04f 0000 	mov.w	r0, #0
 8008156:	f380 8814 	msr	CONTROL, r0
 800815a:	b662      	cpsie	i
 800815c:	b661      	cpsie	f
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	df00      	svc	0
 8008168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800816a:	bf00      	nop
 800816c:	e000ed08 	.word	0xe000ed08

08008170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008176:	4b47      	ldr	r3, [pc, #284]	@ (8008294 <xPortStartScheduler+0x124>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a47      	ldr	r2, [pc, #284]	@ (8008298 <xPortStartScheduler+0x128>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d10b      	bne.n	8008198 <xPortStartScheduler+0x28>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	60fb      	str	r3, [r7, #12]
}
 8008192:	bf00      	nop
 8008194:	bf00      	nop
 8008196:	e7fd      	b.n	8008194 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008198:	4b3e      	ldr	r3, [pc, #248]	@ (8008294 <xPortStartScheduler+0x124>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a3f      	ldr	r2, [pc, #252]	@ (800829c <xPortStartScheduler+0x12c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d10b      	bne.n	80081ba <xPortStartScheduler+0x4a>
	__asm volatile
 80081a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a6:	f383 8811 	msr	BASEPRI, r3
 80081aa:	f3bf 8f6f 	isb	sy
 80081ae:	f3bf 8f4f 	dsb	sy
 80081b2:	613b      	str	r3, [r7, #16]
}
 80081b4:	bf00      	nop
 80081b6:	bf00      	nop
 80081b8:	e7fd      	b.n	80081b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081ba:	4b39      	ldr	r3, [pc, #228]	@ (80082a0 <xPortStartScheduler+0x130>)
 80081bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	22ff      	movs	r2, #255	@ 0xff
 80081ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	b2db      	uxtb	r3, r3
 80081d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081d4:	78fb      	ldrb	r3, [r7, #3]
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	4b31      	ldr	r3, [pc, #196]	@ (80082a4 <xPortStartScheduler+0x134>)
 80081e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081e2:	4b31      	ldr	r3, [pc, #196]	@ (80082a8 <xPortStartScheduler+0x138>)
 80081e4:	2207      	movs	r2, #7
 80081e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081e8:	e009      	b.n	80081fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80081ea:	4b2f      	ldr	r3, [pc, #188]	@ (80082a8 <xPortStartScheduler+0x138>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	3b01      	subs	r3, #1
 80081f0:	4a2d      	ldr	r2, [pc, #180]	@ (80082a8 <xPortStartScheduler+0x138>)
 80081f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081f4:	78fb      	ldrb	r3, [r7, #3]
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	b2db      	uxtb	r3, r3
 80081fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081fe:	78fb      	ldrb	r3, [r7, #3]
 8008200:	b2db      	uxtb	r3, r3
 8008202:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008206:	2b80      	cmp	r3, #128	@ 0x80
 8008208:	d0ef      	beq.n	80081ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800820a:	4b27      	ldr	r3, [pc, #156]	@ (80082a8 <xPortStartScheduler+0x138>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f1c3 0307 	rsb	r3, r3, #7
 8008212:	2b04      	cmp	r3, #4
 8008214:	d00b      	beq.n	800822e <xPortStartScheduler+0xbe>
	__asm volatile
 8008216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821a:	f383 8811 	msr	BASEPRI, r3
 800821e:	f3bf 8f6f 	isb	sy
 8008222:	f3bf 8f4f 	dsb	sy
 8008226:	60bb      	str	r3, [r7, #8]
}
 8008228:	bf00      	nop
 800822a:	bf00      	nop
 800822c:	e7fd      	b.n	800822a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800822e:	4b1e      	ldr	r3, [pc, #120]	@ (80082a8 <xPortStartScheduler+0x138>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	4a1c      	ldr	r2, [pc, #112]	@ (80082a8 <xPortStartScheduler+0x138>)
 8008236:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008238:	4b1b      	ldr	r3, [pc, #108]	@ (80082a8 <xPortStartScheduler+0x138>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008240:	4a19      	ldr	r2, [pc, #100]	@ (80082a8 <xPortStartScheduler+0x138>)
 8008242:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	b2da      	uxtb	r2, r3
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800824c:	4b17      	ldr	r3, [pc, #92]	@ (80082ac <xPortStartScheduler+0x13c>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a16      	ldr	r2, [pc, #88]	@ (80082ac <xPortStartScheduler+0x13c>)
 8008252:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008256:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008258:	4b14      	ldr	r3, [pc, #80]	@ (80082ac <xPortStartScheduler+0x13c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a13      	ldr	r2, [pc, #76]	@ (80082ac <xPortStartScheduler+0x13c>)
 800825e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008262:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008264:	f000 f8da 	bl	800841c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008268:	4b11      	ldr	r3, [pc, #68]	@ (80082b0 <xPortStartScheduler+0x140>)
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800826e:	f000 f8f9 	bl	8008464 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008272:	4b10      	ldr	r3, [pc, #64]	@ (80082b4 <xPortStartScheduler+0x144>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a0f      	ldr	r2, [pc, #60]	@ (80082b4 <xPortStartScheduler+0x144>)
 8008278:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800827c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800827e:	f7ff ff63 	bl	8008148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008282:	f7fe ff79 	bl	8007178 <vTaskSwitchContext>
	prvTaskExitError();
 8008286:	f7ff ff17 	bl	80080b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	e000ed00 	.word	0xe000ed00
 8008298:	410fc271 	.word	0x410fc271
 800829c:	410fc270 	.word	0x410fc270
 80082a0:	e000e400 	.word	0xe000e400
 80082a4:	20001120 	.word	0x20001120
 80082a8:	20001124 	.word	0x20001124
 80082ac:	e000ed20 	.word	0xe000ed20
 80082b0:	20000048 	.word	0x20000048
 80082b4:	e000ef34 	.word	0xe000ef34

080082b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
	__asm volatile
 80082be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082c2:	f383 8811 	msr	BASEPRI, r3
 80082c6:	f3bf 8f6f 	isb	sy
 80082ca:	f3bf 8f4f 	dsb	sy
 80082ce:	607b      	str	r3, [r7, #4]
}
 80082d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082d2:	4b10      	ldr	r3, [pc, #64]	@ (8008314 <vPortEnterCritical+0x5c>)
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3301      	adds	r3, #1
 80082d8:	4a0e      	ldr	r2, [pc, #56]	@ (8008314 <vPortEnterCritical+0x5c>)
 80082da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008314 <vPortEnterCritical+0x5c>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	2b01      	cmp	r3, #1
 80082e2:	d110      	bne.n	8008306 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008318 <vPortEnterCritical+0x60>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00b      	beq.n	8008306 <vPortEnterCritical+0x4e>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	603b      	str	r3, [r7, #0]
}
 8008300:	bf00      	nop
 8008302:	bf00      	nop
 8008304:	e7fd      	b.n	8008302 <vPortEnterCritical+0x4a>
	}
}
 8008306:	bf00      	nop
 8008308:	370c      	adds	r7, #12
 800830a:	46bd      	mov	sp, r7
 800830c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008310:	4770      	bx	lr
 8008312:	bf00      	nop
 8008314:	20000048 	.word	0x20000048
 8008318:	e000ed04 	.word	0xe000ed04

0800831c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008322:	4b12      	ldr	r3, [pc, #72]	@ (800836c <vPortExitCritical+0x50>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d10b      	bne.n	8008342 <vPortExitCritical+0x26>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	607b      	str	r3, [r7, #4]
}
 800833c:	bf00      	nop
 800833e:	bf00      	nop
 8008340:	e7fd      	b.n	800833e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008342:	4b0a      	ldr	r3, [pc, #40]	@ (800836c <vPortExitCritical+0x50>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	3b01      	subs	r3, #1
 8008348:	4a08      	ldr	r2, [pc, #32]	@ (800836c <vPortExitCritical+0x50>)
 800834a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800834c:	4b07      	ldr	r3, [pc, #28]	@ (800836c <vPortExitCritical+0x50>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d105      	bne.n	8008360 <vPortExitCritical+0x44>
 8008354:	2300      	movs	r3, #0
 8008356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	f383 8811 	msr	BASEPRI, r3
}
 800835e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	20000048 	.word	0x20000048

08008370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008370:	f3ef 8009 	mrs	r0, PSP
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	4b15      	ldr	r3, [pc, #84]	@ (80083d0 <pxCurrentTCBConst>)
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	f01e 0f10 	tst.w	lr, #16
 8008380:	bf08      	it	eq
 8008382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838a:	6010      	str	r0, [r2, #0]
 800838c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008390:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008394:	f380 8811 	msr	BASEPRI, r0
 8008398:	f3bf 8f4f 	dsb	sy
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f7fe feea 	bl	8007178 <vTaskSwitchContext>
 80083a4:	f04f 0000 	mov.w	r0, #0
 80083a8:	f380 8811 	msr	BASEPRI, r0
 80083ac:	bc09      	pop	{r0, r3}
 80083ae:	6819      	ldr	r1, [r3, #0]
 80083b0:	6808      	ldr	r0, [r1, #0]
 80083b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b6:	f01e 0f10 	tst.w	lr, #16
 80083ba:	bf08      	it	eq
 80083bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083c0:	f380 8809 	msr	PSP, r0
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	4770      	bx	lr
 80083ca:	bf00      	nop
 80083cc:	f3af 8000 	nop.w

080083d0 <pxCurrentTCBConst>:
 80083d0:	20000af4 	.word	0x20000af4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop

080083d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b082      	sub	sp, #8
 80083dc:	af00      	add	r7, sp, #0
	__asm volatile
 80083de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e2:	f383 8811 	msr	BASEPRI, r3
 80083e6:	f3bf 8f6f 	isb	sy
 80083ea:	f3bf 8f4f 	dsb	sy
 80083ee:	607b      	str	r3, [r7, #4]
}
 80083f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083f2:	f7fe fe07 	bl	8007004 <xTaskIncrementTick>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083fc:	4b06      	ldr	r3, [pc, #24]	@ (8008418 <xPortSysTickHandler+0x40>)
 80083fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	2300      	movs	r3, #0
 8008406:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	f383 8811 	msr	BASEPRI, r3
}
 800840e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008410:	bf00      	nop
 8008412:	3708      	adds	r7, #8
 8008414:	46bd      	mov	sp, r7
 8008416:	bd80      	pop	{r7, pc}
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800841c:	b480      	push	{r7}
 800841e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008420:	4b0b      	ldr	r3, [pc, #44]	@ (8008450 <vPortSetupTimerInterrupt+0x34>)
 8008422:	2200      	movs	r2, #0
 8008424:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008426:	4b0b      	ldr	r3, [pc, #44]	@ (8008454 <vPortSetupTimerInterrupt+0x38>)
 8008428:	2200      	movs	r2, #0
 800842a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800842c:	4b0a      	ldr	r3, [pc, #40]	@ (8008458 <vPortSetupTimerInterrupt+0x3c>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a0a      	ldr	r2, [pc, #40]	@ (800845c <vPortSetupTimerInterrupt+0x40>)
 8008432:	fba2 2303 	umull	r2, r3, r2, r3
 8008436:	099b      	lsrs	r3, r3, #6
 8008438:	4a09      	ldr	r2, [pc, #36]	@ (8008460 <vPortSetupTimerInterrupt+0x44>)
 800843a:	3b01      	subs	r3, #1
 800843c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800843e:	4b04      	ldr	r3, [pc, #16]	@ (8008450 <vPortSetupTimerInterrupt+0x34>)
 8008440:	2207      	movs	r2, #7
 8008442:	601a      	str	r2, [r3, #0]
}
 8008444:	bf00      	nop
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr
 800844e:	bf00      	nop
 8008450:	e000e010 	.word	0xe000e010
 8008454:	e000e018 	.word	0xe000e018
 8008458:	2000003c 	.word	0x2000003c
 800845c:	10624dd3 	.word	0x10624dd3
 8008460:	e000e014 	.word	0xe000e014

08008464 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008464:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008474 <vPortEnableVFP+0x10>
 8008468:	6801      	ldr	r1, [r0, #0]
 800846a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800846e:	6001      	str	r1, [r0, #0]
 8008470:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008472:	bf00      	nop
 8008474:	e000ed88 	.word	0xe000ed88

08008478 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008478:	b480      	push	{r7}
 800847a:	b085      	sub	sp, #20
 800847c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800847e:	f3ef 8305 	mrs	r3, IPSR
 8008482:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	2b0f      	cmp	r3, #15
 8008488:	d915      	bls.n	80084b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800848a:	4a18      	ldr	r2, [pc, #96]	@ (80084ec <vPortValidateInterruptPriority+0x74>)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	4413      	add	r3, r2
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008494:	4b16      	ldr	r3, [pc, #88]	@ (80084f0 <vPortValidateInterruptPriority+0x78>)
 8008496:	781b      	ldrb	r3, [r3, #0]
 8008498:	7afa      	ldrb	r2, [r7, #11]
 800849a:	429a      	cmp	r2, r3
 800849c:	d20b      	bcs.n	80084b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	607b      	str	r3, [r7, #4]
}
 80084b0:	bf00      	nop
 80084b2:	bf00      	nop
 80084b4:	e7fd      	b.n	80084b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80084b6:	4b0f      	ldr	r3, [pc, #60]	@ (80084f4 <vPortValidateInterruptPriority+0x7c>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80084be:	4b0e      	ldr	r3, [pc, #56]	@ (80084f8 <vPortValidateInterruptPriority+0x80>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	429a      	cmp	r2, r3
 80084c4:	d90b      	bls.n	80084de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80084c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ca:	f383 8811 	msr	BASEPRI, r3
 80084ce:	f3bf 8f6f 	isb	sy
 80084d2:	f3bf 8f4f 	dsb	sy
 80084d6:	603b      	str	r3, [r7, #0]
}
 80084d8:	bf00      	nop
 80084da:	bf00      	nop
 80084dc:	e7fd      	b.n	80084da <vPortValidateInterruptPriority+0x62>
	}
 80084de:	bf00      	nop
 80084e0:	3714      	adds	r7, #20
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	e000e3f0 	.word	0xe000e3f0
 80084f0:	20001120 	.word	0x20001120
 80084f4:	e000ed0c 	.word	0xe000ed0c
 80084f8:	20001124 	.word	0x20001124

080084fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08a      	sub	sp, #40	@ 0x28
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008504:	2300      	movs	r3, #0
 8008506:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008508:	f7fe fcc0 	bl	8006e8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800850c:	4b5c      	ldr	r3, [pc, #368]	@ (8008680 <pvPortMalloc+0x184>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d101      	bne.n	8008518 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008514:	f000 f924 	bl	8008760 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008518:	4b5a      	ldr	r3, [pc, #360]	@ (8008684 <pvPortMalloc+0x188>)
 800851a:	681a      	ldr	r2, [r3, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	4013      	ands	r3, r2
 8008520:	2b00      	cmp	r3, #0
 8008522:	f040 8095 	bne.w	8008650 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d01e      	beq.n	800856a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800852c:	2208      	movs	r2, #8
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	4413      	add	r3, r2
 8008532:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	2b00      	cmp	r3, #0
 800853c:	d015      	beq.n	800856a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f023 0307 	bic.w	r3, r3, #7
 8008544:	3308      	adds	r3, #8
 8008546:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f003 0307 	and.w	r3, r3, #7
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00b      	beq.n	800856a <pvPortMalloc+0x6e>
	__asm volatile
 8008552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008556:	f383 8811 	msr	BASEPRI, r3
 800855a:	f3bf 8f6f 	isb	sy
 800855e:	f3bf 8f4f 	dsb	sy
 8008562:	617b      	str	r3, [r7, #20]
}
 8008564:	bf00      	nop
 8008566:	bf00      	nop
 8008568:	e7fd      	b.n	8008566 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d06f      	beq.n	8008650 <pvPortMalloc+0x154>
 8008570:	4b45      	ldr	r3, [pc, #276]	@ (8008688 <pvPortMalloc+0x18c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	687a      	ldr	r2, [r7, #4]
 8008576:	429a      	cmp	r2, r3
 8008578:	d86a      	bhi.n	8008650 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800857a:	4b44      	ldr	r3, [pc, #272]	@ (800868c <pvPortMalloc+0x190>)
 800857c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800857e:	4b43      	ldr	r3, [pc, #268]	@ (800868c <pvPortMalloc+0x190>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008584:	e004      	b.n	8008590 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008588:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800858a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	429a      	cmp	r2, r3
 8008598:	d903      	bls.n	80085a2 <pvPortMalloc+0xa6>
 800859a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1f1      	bne.n	8008586 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80085a2:	4b37      	ldr	r3, [pc, #220]	@ (8008680 <pvPortMalloc+0x184>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d051      	beq.n	8008650 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80085ac:	6a3b      	ldr	r3, [r7, #32]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2208      	movs	r2, #8
 80085b2:	4413      	add	r3, r2
 80085b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80085b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	6a3b      	ldr	r3, [r7, #32]
 80085bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80085be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085c0:	685a      	ldr	r2, [r3, #4]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	1ad2      	subs	r2, r2, r3
 80085c6:	2308      	movs	r3, #8
 80085c8:	005b      	lsls	r3, r3, #1
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d920      	bls.n	8008610 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4413      	add	r3, r2
 80085d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	f003 0307 	and.w	r3, r3, #7
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00b      	beq.n	80085f8 <pvPortMalloc+0xfc>
	__asm volatile
 80085e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e4:	f383 8811 	msr	BASEPRI, r3
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	613b      	str	r3, [r7, #16]
}
 80085f2:	bf00      	nop
 80085f4:	bf00      	nop
 80085f6:	e7fd      	b.n	80085f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085fa:	685a      	ldr	r2, [r3, #4]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	1ad2      	subs	r2, r2, r3
 8008600:	69bb      	ldr	r3, [r7, #24]
 8008602:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800860a:	69b8      	ldr	r0, [r7, #24]
 800860c:	f000 f90a 	bl	8008824 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008610:	4b1d      	ldr	r3, [pc, #116]	@ (8008688 <pvPortMalloc+0x18c>)
 8008612:	681a      	ldr	r2, [r3, #0]
 8008614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	4a1b      	ldr	r2, [pc, #108]	@ (8008688 <pvPortMalloc+0x18c>)
 800861c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800861e:	4b1a      	ldr	r3, [pc, #104]	@ (8008688 <pvPortMalloc+0x18c>)
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	4b1b      	ldr	r3, [pc, #108]	@ (8008690 <pvPortMalloc+0x194>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	429a      	cmp	r2, r3
 8008628:	d203      	bcs.n	8008632 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800862a:	4b17      	ldr	r3, [pc, #92]	@ (8008688 <pvPortMalloc+0x18c>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a18      	ldr	r2, [pc, #96]	@ (8008690 <pvPortMalloc+0x194>)
 8008630:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008634:	685a      	ldr	r2, [r3, #4]
 8008636:	4b13      	ldr	r3, [pc, #76]	@ (8008684 <pvPortMalloc+0x188>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	431a      	orrs	r2, r3
 800863c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800863e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008646:	4b13      	ldr	r3, [pc, #76]	@ (8008694 <pvPortMalloc+0x198>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3301      	adds	r3, #1
 800864c:	4a11      	ldr	r2, [pc, #68]	@ (8008694 <pvPortMalloc+0x198>)
 800864e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008650:	f7fe fc2a 	bl	8006ea8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00b      	beq.n	8008676 <pvPortMalloc+0x17a>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	f383 8811 	msr	BASEPRI, r3
 8008666:	f3bf 8f6f 	isb	sy
 800866a:	f3bf 8f4f 	dsb	sy
 800866e:	60fb      	str	r3, [r7, #12]
}
 8008670:	bf00      	nop
 8008672:	bf00      	nop
 8008674:	e7fd      	b.n	8008672 <pvPortMalloc+0x176>
	return pvReturn;
 8008676:	69fb      	ldr	r3, [r7, #28]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3728      	adds	r7, #40	@ 0x28
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	20001ce8 	.word	0x20001ce8
 8008684:	20001cfc 	.word	0x20001cfc
 8008688:	20001cec 	.word	0x20001cec
 800868c:	20001ce0 	.word	0x20001ce0
 8008690:	20001cf0 	.word	0x20001cf0
 8008694:	20001cf4 	.word	0x20001cf4

08008698 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d04f      	beq.n	800874a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80086aa:	2308      	movs	r3, #8
 80086ac:	425b      	negs	r3, r3
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	4413      	add	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80086b4:	697b      	ldr	r3, [r7, #20]
 80086b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	4b25      	ldr	r3, [pc, #148]	@ (8008754 <vPortFree+0xbc>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4013      	ands	r3, r2
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10b      	bne.n	80086de <vPortFree+0x46>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	60fb      	str	r3, [r7, #12]
}
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	e7fd      	b.n	80086da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00b      	beq.n	80086fe <vPortFree+0x66>
	__asm volatile
 80086e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ea:	f383 8811 	msr	BASEPRI, r3
 80086ee:	f3bf 8f6f 	isb	sy
 80086f2:	f3bf 8f4f 	dsb	sy
 80086f6:	60bb      	str	r3, [r7, #8]
}
 80086f8:	bf00      	nop
 80086fa:	bf00      	nop
 80086fc:	e7fd      	b.n	80086fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	685a      	ldr	r2, [r3, #4]
 8008702:	4b14      	ldr	r3, [pc, #80]	@ (8008754 <vPortFree+0xbc>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4013      	ands	r3, r2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d01e      	beq.n	800874a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d11a      	bne.n	800874a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008714:	693b      	ldr	r3, [r7, #16]
 8008716:	685a      	ldr	r2, [r3, #4]
 8008718:	4b0e      	ldr	r3, [pc, #56]	@ (8008754 <vPortFree+0xbc>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	43db      	mvns	r3, r3
 800871e:	401a      	ands	r2, r3
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008724:	f7fe fbb2 	bl	8006e8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	685a      	ldr	r2, [r3, #4]
 800872c:	4b0a      	ldr	r3, [pc, #40]	@ (8008758 <vPortFree+0xc0>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4413      	add	r3, r2
 8008732:	4a09      	ldr	r2, [pc, #36]	@ (8008758 <vPortFree+0xc0>)
 8008734:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008736:	6938      	ldr	r0, [r7, #16]
 8008738:	f000 f874 	bl	8008824 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800873c:	4b07      	ldr	r3, [pc, #28]	@ (800875c <vPortFree+0xc4>)
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3301      	adds	r3, #1
 8008742:	4a06      	ldr	r2, [pc, #24]	@ (800875c <vPortFree+0xc4>)
 8008744:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008746:	f7fe fbaf 	bl	8006ea8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800874a:	bf00      	nop
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20001cfc 	.word	0x20001cfc
 8008758:	20001cec 	.word	0x20001cec
 800875c:	20001cf8 	.word	0x20001cf8

08008760 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008766:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800876a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800876c:	4b27      	ldr	r3, [pc, #156]	@ (800880c <prvHeapInit+0xac>)
 800876e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f003 0307 	and.w	r3, r3, #7
 8008776:	2b00      	cmp	r3, #0
 8008778:	d00c      	beq.n	8008794 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	3307      	adds	r3, #7
 800877e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f023 0307 	bic.w	r3, r3, #7
 8008786:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008788:	68ba      	ldr	r2, [r7, #8]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	1ad3      	subs	r3, r2, r3
 800878e:	4a1f      	ldr	r2, [pc, #124]	@ (800880c <prvHeapInit+0xac>)
 8008790:	4413      	add	r3, r2
 8008792:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008798:	4a1d      	ldr	r2, [pc, #116]	@ (8008810 <prvHeapInit+0xb0>)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800879e:	4b1c      	ldr	r3, [pc, #112]	@ (8008810 <prvHeapInit+0xb0>)
 80087a0:	2200      	movs	r2, #0
 80087a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	4413      	add	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80087ac:	2208      	movs	r2, #8
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	1a9b      	subs	r3, r3, r2
 80087b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f023 0307 	bic.w	r3, r3, #7
 80087ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	4a15      	ldr	r2, [pc, #84]	@ (8008814 <prvHeapInit+0xb4>)
 80087c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80087c2:	4b14      	ldr	r3, [pc, #80]	@ (8008814 <prvHeapInit+0xb4>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2200      	movs	r2, #0
 80087c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80087ca:	4b12      	ldr	r3, [pc, #72]	@ (8008814 <prvHeapInit+0xb4>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2200      	movs	r2, #0
 80087d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	68fa      	ldr	r2, [r7, #12]
 80087da:	1ad2      	subs	r2, r2, r3
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008814 <prvHeapInit+0xb4>)
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	685b      	ldr	r3, [r3, #4]
 80087ec:	4a0a      	ldr	r2, [pc, #40]	@ (8008818 <prvHeapInit+0xb8>)
 80087ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	4a09      	ldr	r2, [pc, #36]	@ (800881c <prvHeapInit+0xbc>)
 80087f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087f8:	4b09      	ldr	r3, [pc, #36]	@ (8008820 <prvHeapInit+0xc0>)
 80087fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80087fe:	601a      	str	r2, [r3, #0]
}
 8008800:	bf00      	nop
 8008802:	3714      	adds	r7, #20
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr
 800880c:	20001128 	.word	0x20001128
 8008810:	20001ce0 	.word	0x20001ce0
 8008814:	20001ce8 	.word	0x20001ce8
 8008818:	20001cf0 	.word	0x20001cf0
 800881c:	20001cec 	.word	0x20001cec
 8008820:	20001cfc 	.word	0x20001cfc

08008824 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800882c:	4b28      	ldr	r3, [pc, #160]	@ (80088d0 <prvInsertBlockIntoFreeList+0xac>)
 800882e:	60fb      	str	r3, [r7, #12]
 8008830:	e002      	b.n	8008838 <prvInsertBlockIntoFreeList+0x14>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	687a      	ldr	r2, [r7, #4]
 800883e:	429a      	cmp	r2, r3
 8008840:	d8f7      	bhi.n	8008832 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	68ba      	ldr	r2, [r7, #8]
 800884c:	4413      	add	r3, r2
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	429a      	cmp	r2, r3
 8008852:	d108      	bne.n	8008866 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	441a      	add	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	68ba      	ldr	r2, [r7, #8]
 8008870:	441a      	add	r2, r3
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	429a      	cmp	r2, r3
 8008878:	d118      	bne.n	80088ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	4b15      	ldr	r3, [pc, #84]	@ (80088d4 <prvInsertBlockIntoFreeList+0xb0>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	429a      	cmp	r2, r3
 8008884:	d00d      	beq.n	80088a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	685a      	ldr	r2, [r3, #4]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	441a      	add	r2, r3
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	601a      	str	r2, [r3, #0]
 80088a0:	e008      	b.n	80088b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80088a2:	4b0c      	ldr	r3, [pc, #48]	@ (80088d4 <prvInsertBlockIntoFreeList+0xb0>)
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	e003      	b.n	80088b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681a      	ldr	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d002      	beq.n	80088c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088c2:	bf00      	nop
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	20001ce0 	.word	0x20001ce0
 80088d4:	20001ce8 	.word	0x20001ce8

080088d8 <memset>:
 80088d8:	4402      	add	r2, r0
 80088da:	4603      	mov	r3, r0
 80088dc:	4293      	cmp	r3, r2
 80088de:	d100      	bne.n	80088e2 <memset+0xa>
 80088e0:	4770      	bx	lr
 80088e2:	f803 1b01 	strb.w	r1, [r3], #1
 80088e6:	e7f9      	b.n	80088dc <memset+0x4>

080088e8 <__libc_init_array>:
 80088e8:	b570      	push	{r4, r5, r6, lr}
 80088ea:	4d0d      	ldr	r5, [pc, #52]	@ (8008920 <__libc_init_array+0x38>)
 80088ec:	4c0d      	ldr	r4, [pc, #52]	@ (8008924 <__libc_init_array+0x3c>)
 80088ee:	1b64      	subs	r4, r4, r5
 80088f0:	10a4      	asrs	r4, r4, #2
 80088f2:	2600      	movs	r6, #0
 80088f4:	42a6      	cmp	r6, r4
 80088f6:	d109      	bne.n	800890c <__libc_init_array+0x24>
 80088f8:	4d0b      	ldr	r5, [pc, #44]	@ (8008928 <__libc_init_array+0x40>)
 80088fa:	4c0c      	ldr	r4, [pc, #48]	@ (800892c <__libc_init_array+0x44>)
 80088fc:	f000 f826 	bl	800894c <_init>
 8008900:	1b64      	subs	r4, r4, r5
 8008902:	10a4      	asrs	r4, r4, #2
 8008904:	2600      	movs	r6, #0
 8008906:	42a6      	cmp	r6, r4
 8008908:	d105      	bne.n	8008916 <__libc_init_array+0x2e>
 800890a:	bd70      	pop	{r4, r5, r6, pc}
 800890c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008910:	4798      	blx	r3
 8008912:	3601      	adds	r6, #1
 8008914:	e7ee      	b.n	80088f4 <__libc_init_array+0xc>
 8008916:	f855 3b04 	ldr.w	r3, [r5], #4
 800891a:	4798      	blx	r3
 800891c:	3601      	adds	r6, #1
 800891e:	e7f2      	b.n	8008906 <__libc_init_array+0x1e>
 8008920:	08008b08 	.word	0x08008b08
 8008924:	08008b08 	.word	0x08008b08
 8008928:	08008b08 	.word	0x08008b08
 800892c:	08008b0c 	.word	0x08008b0c

08008930 <memcpy>:
 8008930:	440a      	add	r2, r1
 8008932:	4291      	cmp	r1, r2
 8008934:	f100 33ff 	add.w	r3, r0, #4294967295
 8008938:	d100      	bne.n	800893c <memcpy+0xc>
 800893a:	4770      	bx	lr
 800893c:	b510      	push	{r4, lr}
 800893e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008942:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008946:	4291      	cmp	r1, r2
 8008948:	d1f9      	bne.n	800893e <memcpy+0xe>
 800894a:	bd10      	pop	{r4, pc}

0800894c <_init>:
 800894c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800894e:	bf00      	nop
 8008950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008952:	bc08      	pop	{r3}
 8008954:	469e      	mov	lr, r3
 8008956:	4770      	bx	lr

08008958 <_fini>:
 8008958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800895a:	bf00      	nop
 800895c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800895e:	bc08      	pop	{r3}
 8008960:	469e      	mov	lr, r3
 8008962:	4770      	bx	lr

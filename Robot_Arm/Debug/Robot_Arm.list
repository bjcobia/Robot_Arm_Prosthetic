
Robot_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008734  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000019c  080088c4  080088c4  000098c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a60  08008a60  0000a04c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a60  08008a60  00009a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a68  08008a68  0000a04c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a68  08008a68  00009a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a6c  08008a6c  00009a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08008a70  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bb0  2000004c  08008abc  0000a04c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bfc  08008abc  0000abfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a04c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a940  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b9  00000000  00000000  000249bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001710  00000000  00000000  00027f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011fc  00000000  00000000  00029688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c76  00000000  00000000  0002a884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019338  00000000  00000000  0002e4fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcf85  00000000  00000000  00047832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001447b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b8  00000000  00000000  001447fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0014a9b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000004c 	.word	0x2000004c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080088ac 	.word	0x080088ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000050 	.word	0x20000050
 80001cc:	080088ac 	.word	0x080088ac

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000500:	f001 fcfc 	bl	8001efc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f86e 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 fb1c 	bl	8000b44 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 faea 	bl	8000ae4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000510:	f000 f94a 	bl	80007a8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000514:	f000 f9a2 	bl	800085c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000518:	f000 f8b6 	bl	8000688 <MX_TIM1_Init>
  MX_TIM4_Init();
 800051c:	f000 f9f8 	bl	8000910 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000520:	f000 fa50 	bl	80009c4 <MX_TIM8_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000524:	f005 fa88 	bl	8005a38 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Index_Finger */
  Index_FingerHandle = osTimerNew(Index, osTimerOnce, NULL, &Index_Finger_attributes);
 8000528:	4b1c      	ldr	r3, [pc, #112]	@ (800059c <main+0xa0>)
 800052a:	2200      	movs	r2, #0
 800052c:	2100      	movs	r1, #0
 800052e:	481c      	ldr	r0, [pc, #112]	@ (80005a0 <main+0xa4>)
 8000530:	f005 fb8e 	bl	8005c50 <osTimerNew>
 8000534:	4603      	mov	r3, r0
 8000536:	4a1b      	ldr	r2, [pc, #108]	@ (80005a4 <main+0xa8>)
 8000538:	6013      	str	r3, [r2, #0]

  /* creation of Thumb_Finger */
  Thumb_FingerHandle = osTimerNew(Thumb, osTimerOnce, NULL, &Thumb_Finger_attributes);
 800053a:	4b1b      	ldr	r3, [pc, #108]	@ (80005a8 <main+0xac>)
 800053c:	2200      	movs	r2, #0
 800053e:	2100      	movs	r1, #0
 8000540:	481a      	ldr	r0, [pc, #104]	@ (80005ac <main+0xb0>)
 8000542:	f005 fb85 	bl	8005c50 <osTimerNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a19      	ldr	r2, [pc, #100]	@ (80005b0 <main+0xb4>)
 800054a:	6013      	str	r3, [r2, #0]

  /* creation of Middle_Finger */
  Middle_FingerHandle = osTimerNew(Middle, osTimerOnce, NULL, &Middle_Finger_attributes);
 800054c:	4b19      	ldr	r3, [pc, #100]	@ (80005b4 <main+0xb8>)
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	4819      	ldr	r0, [pc, #100]	@ (80005b8 <main+0xbc>)
 8000554:	f005 fb7c 	bl	8005c50 <osTimerNew>
 8000558:	4603      	mov	r3, r0
 800055a:	4a18      	ldr	r2, [pc, #96]	@ (80005bc <main+0xc0>)
 800055c:	6013      	str	r3, [r2, #0]

  /* creation of Ring_Finger */
  Ring_FingerHandle = osTimerNew(Ring, osTimerOnce, NULL, &Ring_Finger_attributes);
 800055e:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <main+0xc4>)
 8000560:	2200      	movs	r2, #0
 8000562:	2100      	movs	r1, #0
 8000564:	4817      	ldr	r0, [pc, #92]	@ (80005c4 <main+0xc8>)
 8000566:	f005 fb73 	bl	8005c50 <osTimerNew>
 800056a:	4603      	mov	r3, r0
 800056c:	4a16      	ldr	r2, [pc, #88]	@ (80005c8 <main+0xcc>)
 800056e:	6013      	str	r3, [r2, #0]

  /* creation of Pinky_Finger */
  Pinky_FingerHandle = osTimerNew(Pinky, osTimerOnce, NULL, &Pinky_Finger_attributes);
 8000570:	4b16      	ldr	r3, [pc, #88]	@ (80005cc <main+0xd0>)
 8000572:	2200      	movs	r2, #0
 8000574:	2100      	movs	r1, #0
 8000576:	4816      	ldr	r0, [pc, #88]	@ (80005d0 <main+0xd4>)
 8000578:	f005 fb6a 	bl	8005c50 <osTimerNew>
 800057c:	4603      	mov	r3, r0
 800057e:	4a15      	ldr	r2, [pc, #84]	@ (80005d4 <main+0xd8>)
 8000580:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000582:	4a15      	ldr	r2, [pc, #84]	@ (80005d8 <main+0xdc>)
 8000584:	2100      	movs	r1, #0
 8000586:	4815      	ldr	r0, [pc, #84]	@ (80005dc <main+0xe0>)
 8000588:	f005 faa0 	bl	8005acc <osThreadNew>
 800058c:	4603      	mov	r3, r0
 800058e:	4a14      	ldr	r2, [pc, #80]	@ (80005e0 <main+0xe4>)
 8000590:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000592:	f005 fa75 	bl	8005a80 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000596:	bf00      	nop
 8000598:	e7fd      	b.n	8000596 <main+0x9a>
 800059a:	bf00      	nop
 800059c:	080089c8 	.word	0x080089c8
 80005a0:	08001789 	.word	0x08001789
 80005a4:	20000270 	.word	0x20000270
 80005a8:	080089d8 	.word	0x080089d8
 80005ac:	080017b9 	.word	0x080017b9
 80005b0:	20000274 	.word	0x20000274
 80005b4:	080089e8 	.word	0x080089e8
 80005b8:	08001829 	.word	0x08001829
 80005bc:	20000278 	.word	0x20000278
 80005c0:	080089f8 	.word	0x080089f8
 80005c4:	08001899 	.word	0x08001899
 80005c8:	2000027c 	.word	0x2000027c
 80005cc:	08008a08 	.word	0x08008a08
 80005d0:	08001909 	.word	0x08001909
 80005d4:	20000280 	.word	0x20000280
 80005d8:	080089a4 	.word	0x080089a4
 80005dc:	08001767 	.word	0x08001767
 80005e0:	2000026c 	.word	0x2000026c

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b096      	sub	sp, #88	@ 0x58
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	2244      	movs	r2, #68	@ 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f008 f920 	bl	8008838 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	463b      	mov	r3, r7
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000606:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800060a:	f001 ff9b 	bl	8002544 <HAL_PWREx_ControlVoltageScaling>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000614:	f001 f9c2 	bl	800199c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000618:	2302      	movs	r3, #2
 800061a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800061c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000620:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000622:	2310      	movs	r3, #16
 8000624:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000626:	2302      	movs	r3, #2
 8000628:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062a:	2302      	movs	r3, #2
 800062c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062e:	2301      	movs	r3, #1
 8000630:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000632:	230a      	movs	r3, #10
 8000634:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000636:	2307      	movs	r3, #7
 8000638:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000642:	f107 0314 	add.w	r3, r7, #20
 8000646:	4618      	mov	r0, r3
 8000648:	f001 ffd2 	bl	80025f0 <HAL_RCC_OscConfig>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000652:	f001 f9a3 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000656:	230f      	movs	r3, #15
 8000658:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065a:	2303      	movs	r3, #3
 800065c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066a:	463b      	mov	r3, r7
 800066c:	2104      	movs	r1, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f002 fb9a 	bl	8002da8 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800067a:	f001 f98f 	bl	800199c <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3758      	adds	r7, #88	@ 0x58
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b096      	sub	sp, #88	@ 0x58
 800068c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800068e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	605a      	str	r2, [r3, #4]
 8000698:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800069a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
 80006aa:	615a      	str	r2, [r3, #20]
 80006ac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006ae:	1d3b      	adds	r3, r7, #4
 80006b0:	222c      	movs	r2, #44	@ 0x2c
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f008 f8bf 	bl	8008838 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006ba:	4b39      	ldr	r3, [pc, #228]	@ (80007a0 <MX_TIM1_Init+0x118>)
 80006bc:	4a39      	ldr	r2, [pc, #228]	@ (80007a4 <MX_TIM1_Init+0x11c>)
 80006be:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 80006c0:	4b37      	ldr	r3, [pc, #220]	@ (80007a0 <MX_TIM1_Init+0x118>)
 80006c2:	224f      	movs	r2, #79	@ 0x4f
 80006c4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c6:	4b36      	ldr	r3, [pc, #216]	@ (80007a0 <MX_TIM1_Init+0x118>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80006cc:	4b34      	ldr	r3, [pc, #208]	@ (80007a0 <MX_TIM1_Init+0x118>)
 80006ce:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80006d2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d4:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <MX_TIM1_Init+0x118>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006da:	4b31      	ldr	r3, [pc, #196]	@ (80007a0 <MX_TIM1_Init+0x118>)
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e0:	4b2f      	ldr	r3, [pc, #188]	@ (80007a0 <MX_TIM1_Init+0x118>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006e6:	482e      	ldr	r0, [pc, #184]	@ (80007a0 <MX_TIM1_Init+0x118>)
 80006e8:	f003 fb42 	bl	8003d70 <HAL_TIM_PWM_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80006f2:	f001 f953 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006f6:	2300      	movs	r3, #0
 80006f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006fa:	2300      	movs	r3, #0
 80006fc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006fe:	2300      	movs	r3, #0
 8000700:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000702:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000706:	4619      	mov	r1, r3
 8000708:	4825      	ldr	r0, [pc, #148]	@ (80007a0 <MX_TIM1_Init+0x118>)
 800070a:	f004 fb0b 	bl	8004d24 <HAL_TIMEx_MasterConfigSynchronization>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000714:	f001 f942 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000718:	2360      	movs	r3, #96	@ 0x60
 800071a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000724:	2300      	movs	r3, #0
 8000726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000728:	2300      	movs	r3, #0
 800072a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800072c:	2300      	movs	r3, #0
 800072e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000730:	2300      	movs	r3, #0
 8000732:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000734:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	4818      	ldr	r0, [pc, #96]	@ (80007a0 <MX_TIM1_Init+0x118>)
 800073e:	f003 fe13 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000748:	f001 f928 	bl	800199c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000750:	2300      	movs	r3, #0
 8000752:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000754:	2300      	movs	r3, #0
 8000756:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000758:	2300      	movs	r3, #0
 800075a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000760:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000764:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800076a:	2300      	movs	r3, #0
 800076c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800076e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4619      	mov	r1, r3
 8000780:	4807      	ldr	r0, [pc, #28]	@ (80007a0 <MX_TIM1_Init+0x118>)
 8000782:	f004 fb57 	bl	8004e34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800078c:	f001 f906 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000790:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <MX_TIM1_Init+0x118>)
 8000792:	f001 f99f 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8000796:	bf00      	nop
 8000798:	3758      	adds	r7, #88	@ 0x58
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000068 	.word	0x20000068
 80007a4:	40012c00 	.word	0x40012c00

080007a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
 80007c6:	611a      	str	r2, [r3, #16]
 80007c8:	615a      	str	r2, [r3, #20]
 80007ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007cc:	4b22      	ldr	r3, [pc, #136]	@ (8000858 <MX_TIM2_Init+0xb0>)
 80007ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80007d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80007d4:	4b20      	ldr	r3, [pc, #128]	@ (8000858 <MX_TIM2_Init+0xb0>)
 80007d6:	224f      	movs	r2, #79	@ 0x4f
 80007d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007da:	4b1f      	ldr	r3, [pc, #124]	@ (8000858 <MX_TIM2_Init+0xb0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80007e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <MX_TIM2_Init+0xb0>)
 80007e2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <MX_TIM2_Init+0xb0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <MX_TIM2_Init+0xb0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007f4:	4818      	ldr	r0, [pc, #96]	@ (8000858 <MX_TIM2_Init+0xb0>)
 80007f6:	f003 fabb 	bl	8003d70 <HAL_TIM_PWM_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000800:	f001 f8cc 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4811      	ldr	r0, [pc, #68]	@ (8000858 <MX_TIM2_Init+0xb0>)
 8000814:	f004 fa86 	bl	8004d24 <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800081e:	f001 f8bd 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000822:	2360      	movs	r3, #96	@ 0x60
 8000824:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	2200      	movs	r2, #0
 8000836:	4619      	mov	r1, r3
 8000838:	4807      	ldr	r0, [pc, #28]	@ (8000858 <MX_TIM2_Init+0xb0>)
 800083a:	f003 fd95 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000844:	f001 f8aa 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000848:	4803      	ldr	r0, [pc, #12]	@ (8000858 <MX_TIM2_Init+0xb0>)
 800084a:	f001 f943 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 800084e:	bf00      	nop
 8000850:	3728      	adds	r7, #40	@ 0x28
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	200000b4 	.word	0x200000b4

0800085c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	@ 0x28
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000862:	f107 031c 	add.w	r3, r7, #28
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800086e:	463b      	mov	r3, r7
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]
 800087c:	615a      	str	r2, [r3, #20]
 800087e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000880:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <MX_TIM3_Init+0xac>)
 8000882:	4a22      	ldr	r2, [pc, #136]	@ (800090c <MX_TIM3_Init+0xb0>)
 8000884:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000886:	4b20      	ldr	r3, [pc, #128]	@ (8000908 <MX_TIM3_Init+0xac>)
 8000888:	224f      	movs	r2, #79	@ 0x4f
 800088a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800088c:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <MX_TIM3_Init+0xac>)
 800088e:	2200      	movs	r2, #0
 8000890:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000892:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <MX_TIM3_Init+0xac>)
 8000894:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000898:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800089a:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_TIM3_Init+0xac>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_TIM3_Init+0xac>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008a6:	4818      	ldr	r0, [pc, #96]	@ (8000908 <MX_TIM3_Init+0xac>)
 80008a8:	f003 fa62 	bl	8003d70 <HAL_TIM_PWM_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80008b2:	f001 f873 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4810      	ldr	r0, [pc, #64]	@ (8000908 <MX_TIM3_Init+0xac>)
 80008c6:	f004 fa2d 	bl	8004d24 <HAL_TIMEx_MasterConfigSynchronization>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008d0:	f001 f864 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d4:	2360      	movs	r3, #96	@ 0x60
 80008d6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	4619      	mov	r1, r3
 80008ea:	4807      	ldr	r0, [pc, #28]	@ (8000908 <MX_TIM3_Init+0xac>)
 80008ec:	f003 fd3c 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008f6:	f001 f851 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80008fa:	4803      	ldr	r0, [pc, #12]	@ (8000908 <MX_TIM3_Init+0xac>)
 80008fc:	f001 f8ea 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	@ 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000100 	.word	0x20000100
 800090c:	40000400 	.word	0x40000400

08000910 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08a      	sub	sp, #40	@ 0x28
 8000914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000922:	463b      	mov	r3, r7
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000934:	4b21      	ldr	r3, [pc, #132]	@ (80009bc <MX_TIM4_Init+0xac>)
 8000936:	4a22      	ldr	r2, [pc, #136]	@ (80009c0 <MX_TIM4_Init+0xb0>)
 8000938:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 800093a:	4b20      	ldr	r3, [pc, #128]	@ (80009bc <MX_TIM4_Init+0xac>)
 800093c:	224f      	movs	r2, #79	@ 0x4f
 800093e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000940:	4b1e      	ldr	r3, [pc, #120]	@ (80009bc <MX_TIM4_Init+0xac>)
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000946:	4b1d      	ldr	r3, [pc, #116]	@ (80009bc <MX_TIM4_Init+0xac>)
 8000948:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800094c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800094e:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <MX_TIM4_Init+0xac>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000954:	4b19      	ldr	r3, [pc, #100]	@ (80009bc <MX_TIM4_Init+0xac>)
 8000956:	2200      	movs	r2, #0
 8000958:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800095a:	4818      	ldr	r0, [pc, #96]	@ (80009bc <MX_TIM4_Init+0xac>)
 800095c:	f003 fa08 	bl	8003d70 <HAL_TIM_PWM_Init>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000966:	f001 f819 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000972:	f107 031c 	add.w	r3, r7, #28
 8000976:	4619      	mov	r1, r3
 8000978:	4810      	ldr	r0, [pc, #64]	@ (80009bc <MX_TIM4_Init+0xac>)
 800097a:	f004 f9d3 	bl	8004d24 <HAL_TIMEx_MasterConfigSynchronization>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000984:	f001 f80a 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000988:	2360      	movs	r3, #96	@ 0x60
 800098a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800098c:	2300      	movs	r3, #0
 800098e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000994:	2300      	movs	r3, #0
 8000996:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	2200      	movs	r2, #0
 800099c:	4619      	mov	r1, r3
 800099e:	4807      	ldr	r0, [pc, #28]	@ (80009bc <MX_TIM4_Init+0xac>)
 80009a0:	f003 fce2 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80009aa:	f000 fff7 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009ae:	4803      	ldr	r0, [pc, #12]	@ (80009bc <MX_TIM4_Init+0xac>)
 80009b0:	f001 f890 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	@ 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000014c 	.word	0x2000014c
 80009c0:	40000800 	.word	0x40000800

080009c4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b096      	sub	sp, #88	@ 0x58
 80009c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
 80009e6:	615a      	str	r2, [r3, #20]
 80009e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	222c      	movs	r2, #44	@ 0x2c
 80009ee:	2100      	movs	r1, #0
 80009f0:	4618      	mov	r0, r3
 80009f2:	f007 ff21 	bl	8008838 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80009f6:	4b39      	ldr	r3, [pc, #228]	@ (8000adc <MX_TIM8_Init+0x118>)
 80009f8:	4a39      	ldr	r2, [pc, #228]	@ (8000ae0 <MX_TIM8_Init+0x11c>)
 80009fa:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 80009fc:	4b37      	ldr	r3, [pc, #220]	@ (8000adc <MX_TIM8_Init+0x118>)
 80009fe:	224f      	movs	r2, #79	@ 0x4f
 8000a00:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a02:	4b36      	ldr	r3, [pc, #216]	@ (8000adc <MX_TIM8_Init+0x118>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8000a08:	4b34      	ldr	r3, [pc, #208]	@ (8000adc <MX_TIM8_Init+0x118>)
 8000a0a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000a0e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a10:	4b32      	ldr	r3, [pc, #200]	@ (8000adc <MX_TIM8_Init+0x118>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a16:	4b31      	ldr	r3, [pc, #196]	@ (8000adc <MX_TIM8_Init+0x118>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8000adc <MX_TIM8_Init+0x118>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a22:	482e      	ldr	r0, [pc, #184]	@ (8000adc <MX_TIM8_Init+0x118>)
 8000a24:	f003 f9a4 	bl	8003d70 <HAL_TIM_PWM_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000a2e:	f000 ffb5 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a3e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a42:	4619      	mov	r1, r3
 8000a44:	4825      	ldr	r0, [pc, #148]	@ (8000adc <MX_TIM8_Init+0x118>)
 8000a46:	f004 f96d 	bl	8004d24 <HAL_TIMEx_MasterConfigSynchronization>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000a50:	f000 ffa4 	bl	800199c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a54:	2360      	movs	r3, #96	@ 0x60
 8000a56:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a60:	2300      	movs	r3, #0
 8000a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a64:	2300      	movs	r3, #0
 8000a66:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a70:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a74:	2200      	movs	r2, #0
 8000a76:	4619      	mov	r1, r3
 8000a78:	4818      	ldr	r0, [pc, #96]	@ (8000adc <MX_TIM8_Init+0x118>)
 8000a7a:	f003 fc75 	bl	8004368 <HAL_TIM_PWM_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000a84:	f000 ff8a 	bl	800199c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a90:	2300      	movs	r3, #0
 8000a92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a94:	2300      	movs	r3, #0
 8000a96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000aaa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000aae:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000ab8:	1d3b      	adds	r3, r7, #4
 8000aba:	4619      	mov	r1, r3
 8000abc:	4807      	ldr	r0, [pc, #28]	@ (8000adc <MX_TIM8_Init+0x118>)
 8000abe:	f004 f9b9 	bl	8004e34 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000ac8:	f000 ff68 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000acc:	4803      	ldr	r0, [pc, #12]	@ (8000adc <MX_TIM8_Init+0x118>)
 8000ace:	f001 f801 	bl	8001ad4 <HAL_TIM_MspPostInit>

}
 8000ad2:	bf00      	nop
 8000ad4:	3758      	adds	r7, #88	@ 0x58
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000198 	.word	0x20000198
 8000ae0:	40013400 	.word	0x40013400

08000ae4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	@ (8000b3c <MX_USART2_UART_Init+0x58>)
 8000aea:	4a15      	ldr	r2, [pc, #84]	@ (8000b40 <MX_USART2_UART_Init+0x5c>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aee:	4b13      	ldr	r3, [pc, #76]	@ (8000b3c <MX_USART2_UART_Init+0x58>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <MX_USART2_UART_Init+0x58>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b3c <MX_USART2_UART_Init+0x58>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_USART2_UART_Init+0x58>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <MX_USART2_UART_Init+0x58>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b3c <MX_USART2_UART_Init+0x58>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b09      	ldr	r3, [pc, #36]	@ (8000b3c <MX_USART2_UART_Init+0x58>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b1a:	4b08      	ldr	r3, [pc, #32]	@ (8000b3c <MX_USART2_UART_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b20:	4b06      	ldr	r3, [pc, #24]	@ (8000b3c <MX_USART2_UART_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b26:	4805      	ldr	r0, [pc, #20]	@ (8000b3c <MX_USART2_UART_Init+0x58>)
 8000b28:	f004 fa20 	bl	8004f6c <HAL_UART_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b32:	f000 ff33 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200001e4 	.word	0x200001e4
 8000b40:	40004400 	.word	0x40004400

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c18 <MX_GPIO_Init+0xd4>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	4a2e      	ldr	r2, [pc, #184]	@ (8000c18 <MX_GPIO_Init+0xd4>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b66:	4b2c      	ldr	r3, [pc, #176]	@ (8000c18 <MX_GPIO_Init+0xd4>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	4b29      	ldr	r3, [pc, #164]	@ (8000c18 <MX_GPIO_Init+0xd4>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b76:	4a28      	ldr	r2, [pc, #160]	@ (8000c18 <MX_GPIO_Init+0xd4>)
 8000b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b7c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b7e:	4b26      	ldr	r3, [pc, #152]	@ (8000c18 <MX_GPIO_Init+0xd4>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8a:	4b23      	ldr	r3, [pc, #140]	@ (8000c18 <MX_GPIO_Init+0xd4>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b8e:	4a22      	ldr	r2, [pc, #136]	@ (8000c18 <MX_GPIO_Init+0xd4>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b96:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <MX_GPIO_Init+0xd4>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c18 <MX_GPIO_Init+0xd4>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8000c18 <MX_GPIO_Init+0xd4>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <MX_GPIO_Init+0xd4>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2120      	movs	r1, #32
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc2:	f001 fc67 	bl	8002494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bcc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480f      	ldr	r0, [pc, #60]	@ (8000c1c <MX_GPIO_Init+0xd8>)
 8000bde:	f001 faaf 	bl	8002140 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000be2:	2320      	movs	r3, #32
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be6:	2301      	movs	r3, #1
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bfc:	f001 faa0 	bl	8002140 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2105      	movs	r1, #5
 8000c04:	2028      	movs	r0, #40	@ 0x28
 8000c06:	f001 fa71 	bl	80020ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c0a:	2028      	movs	r0, #40	@ 0x28
 8000c0c:	f001 fa8a 	bl	8002124 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c10:	bf00      	nop
 8000c12:	3728      	adds	r7, #40	@ 0x28
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	48000800 	.word	0x48000800

08000c20 <Servo_SetMotion>:
 * @param finger: Which finger (THUMB, INDEX, MIDDLE, RING, PINKY)
 * @param direction: STOP, CLOCKWISE, or COUNTERCLOCKWISE
 * @param speed: Speed percentage (0-100)
 * @retval None
 */
void Servo_SetMotion(Finger finger, Direction direction, int speed) {
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	4603      	mov	r3, r0
 8000c28:	603a      	str	r2, [r7, #0]
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	71bb      	strb	r3, [r7, #6]
    uint32_t pulse;

    // Clamp speed to 0-100%
    if (speed < 0) speed = 0;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	da01      	bge.n	8000c3a <Servo_SetMotion+0x1a>
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
    if (speed > 100) speed = 100;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	2b64      	cmp	r3, #100	@ 0x64
 8000c3e:	dd01      	ble.n	8000c44 <Servo_SetMotion+0x24>
 8000c40:	2364      	movs	r3, #100	@ 0x64
 8000c42:	603b      	str	r3, [r7, #0]

    // Calculate pulse width based on direction and speed
    if (direction == STOP) {
 8000c44:	79bb      	ldrb	r3, [r7, #6]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d103      	bne.n	8000c52 <Servo_SetMotion+0x32>
        pulse = SERVO_STOP;
 8000c4a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	e013      	b.n	8000c7a <Servo_SetMotion+0x5a>
    } else if (direction == CLOCKWISE) {
 8000c52:	79bb      	ldrb	r3, [r7, #6]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d109      	bne.n	8000c6c <Servo_SetMotion+0x4c>
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CW
        pulse = SERVO_STOP - ((SERVO_STOP - SERVO_MAX_CW) * speed / 100);
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	079b      	lsls	r3, r3, #30
 8000c5e:	1a9b      	subs	r3, r3, r2
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	1a9b      	subs	r3, r3, r2
 8000c64:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000c68:	60fb      	str	r3, [r7, #12]
 8000c6a:	e006      	b.n	8000c7a <Servo_SetMotion+0x5a>
    } else { // COUNTERCLOCKWISE
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CCW
        pulse = SERVO_STOP + ((SERVO_MAX_CCW - SERVO_STOP) * speed / 100);
 8000c6c:	683a      	ldr	r2, [r7, #0]
 8000c6e:	4613      	mov	r3, r2
 8000c70:	009b      	lsls	r3, r3, #2
 8000c72:	4413      	add	r3, r2
 8000c74:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000c78:	60fb      	str	r3, [r7, #12]
    }

    // Update servo state
    servoStates[finger].speed = speed;
 8000c7a:	79fa      	ldrb	r2, [r7, #7]
 8000c7c:	4925      	ldr	r1, [pc, #148]	@ (8000d14 <Servo_SetMotion+0xf4>)
 8000c7e:	4613      	mov	r3, r2
 8000c80:	005b      	lsls	r3, r3, #1
 8000c82:	4413      	add	r3, r2
 8000c84:	009b      	lsls	r3, r3, #2
 8000c86:	440b      	add	r3, r1
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	601a      	str	r2, [r3, #0]
    servoStates[finger].dir = direction;
 8000c8c:	79fa      	ldrb	r2, [r7, #7]
 8000c8e:	4921      	ldr	r1, [pc, #132]	@ (8000d14 <Servo_SetMotion+0xf4>)
 8000c90:	4613      	mov	r3, r2
 8000c92:	005b      	lsls	r3, r3, #1
 8000c94:	4413      	add	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	440b      	add	r3, r1
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	79ba      	ldrb	r2, [r7, #6]
 8000c9e:	701a      	strb	r2, [r3, #0]
    servoStates[finger].pulse = pulse;
 8000ca0:	79fa      	ldrb	r2, [r7, #7]
 8000ca2:	491c      	ldr	r1, [pc, #112]	@ (8000d14 <Servo_SetMotion+0xf4>)
 8000ca4:	4613      	mov	r3, r2
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	4413      	add	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	440b      	add	r3, r1
 8000cae:	3308      	adds	r3, #8
 8000cb0:	68fa      	ldr	r2, [r7, #12]
 8000cb2:	601a      	str	r2, [r3, #0]

    // Apply pulse width to the appropriate timer
    switch (finger) {
 8000cb4:	79fb      	ldrb	r3, [r7, #7]
 8000cb6:	2b04      	cmp	r3, #4
 8000cb8:	d825      	bhi.n	8000d06 <Servo_SetMotion+0xe6>
 8000cba:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc0 <Servo_SetMotion+0xa0>)
 8000cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc0:	08000cd5 	.word	0x08000cd5
 8000cc4:	08000cdf 	.word	0x08000cdf
 8000cc8:	08000ce9 	.word	0x08000ce9
 8000ccc:	08000cf3 	.word	0x08000cf3
 8000cd0:	08000cfd 	.word	0x08000cfd
        case THUMB:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8000cd4:	4b10      	ldr	r3, [pc, #64]	@ (8000d18 <Servo_SetMotion+0xf8>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000cdc:	e013      	b.n	8000d06 <Servo_SetMotion+0xe6>
        case INDEX:
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <Servo_SetMotion+0xfc>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000ce6:	e00e      	b.n	8000d06 <Servo_SetMotion+0xe6>
        case MIDDLE:
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8000ce8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d20 <Servo_SetMotion+0x100>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000cf0:	e009      	b.n	8000d06 <Servo_SetMotion+0xe6>
        case RING:
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	@ (8000d24 <Servo_SetMotion+0x104>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	68fa      	ldr	r2, [r7, #12]
 8000cf8:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000cfa:	e004      	b.n	8000d06 <Servo_SetMotion+0xe6>
        case PINKY:
            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pulse);
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <Servo_SetMotion+0x108>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	68fa      	ldr	r2, [r7, #12]
 8000d02:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000d04:	bf00      	nop
    }
	}
 8000d06:	bf00      	nop
 8000d08:	3714      	adds	r7, #20
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr
 8000d12:	bf00      	nop
 8000d14:	20000000 	.word	0x20000000
 8000d18:	20000068 	.word	0x20000068
 8000d1c:	200000b4 	.word	0x200000b4
 8000d20:	20000100 	.word	0x20000100
 8000d24:	2000014c 	.word	0x2000014c
 8000d28:	20000198 	.word	0x20000198

08000d2c <Servo_StopAll>:
	/**
	 * @brief Stops all servos
	 * @param None
	 * @retval None
	 */
	void Servo_StopAll(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
		Servo_SetMotion(THUMB, STOP, 0);
 8000d30:	2200      	movs	r2, #0
 8000d32:	2100      	movs	r1, #0
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff ff73 	bl	8000c20 <Servo_SetMotion>
		Servo_SetMotion(INDEX, STOP, 0);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff ff6e 	bl	8000c20 <Servo_SetMotion>
		Servo_SetMotion(MIDDLE, STOP, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f7ff ff69 	bl	8000c20 <Servo_SetMotion>
		Servo_SetMotion(RING, STOP, 0);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2100      	movs	r1, #0
 8000d52:	2003      	movs	r0, #3
 8000d54:	f7ff ff64 	bl	8000c20 <Servo_SetMotion>
		Servo_SetMotion(PINKY, STOP, 0);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	2004      	movs	r0, #4
 8000d5e:	f7ff ff5f 	bl	8000c20 <Servo_SetMotion>

	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000d62:	2100      	movs	r1, #0
 8000d64:	480a      	ldr	r0, [pc, #40]	@ (8000d90 <Servo_StopAll+0x64>)
 8000d66:	f003 f961 	bl	800402c <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4809      	ldr	r0, [pc, #36]	@ (8000d94 <Servo_StopAll+0x68>)
 8000d6e:	f003 f95d 	bl	800402c <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000d72:	2100      	movs	r1, #0
 8000d74:	4808      	ldr	r0, [pc, #32]	@ (8000d98 <Servo_StopAll+0x6c>)
 8000d76:	f003 f959 	bl	800402c <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4807      	ldr	r0, [pc, #28]	@ (8000d9c <Servo_StopAll+0x70>)
 8000d7e:	f003 f955 	bl	800402c <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8000d82:	2100      	movs	r1, #0
 8000d84:	4806      	ldr	r0, [pc, #24]	@ (8000da0 <Servo_StopAll+0x74>)
 8000d86:	f003 f951 	bl	800402c <HAL_TIM_PWM_Stop>
	}
 8000d8a:	bf00      	nop
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000068 	.word	0x20000068
 8000d94:	200000b4 	.word	0x200000b4
 8000d98:	20000100 	.word	0x20000100
 8000d9c:	2000014c 	.word	0x2000014c
 8000da0:	20000198 	.word	0x20000198

08000da4 <Servo_Init>:
	/**
	 * @brief Initialize all servo timers and start PWM
	 * @param None
	 * @retval None
	 */
	void Servo_Init(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
	    // Start all PWM channels
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000da8:	2100      	movs	r1, #0
 8000daa:	480a      	ldr	r0, [pc, #40]	@ (8000dd4 <Servo_Init+0x30>)
 8000dac:	f003 f838 	bl	8003e20 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000db0:	2100      	movs	r1, #0
 8000db2:	4809      	ldr	r0, [pc, #36]	@ (8000dd8 <Servo_Init+0x34>)
 8000db4:	f003 f834 	bl	8003e20 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000db8:	2100      	movs	r1, #0
 8000dba:	4808      	ldr	r0, [pc, #32]	@ (8000ddc <Servo_Init+0x38>)
 8000dbc:	f003 f830 	bl	8003e20 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <Servo_Init+0x3c>)
 8000dc4:	f003 f82c 	bl	8003e20 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4806      	ldr	r0, [pc, #24]	@ (8000de4 <Servo_Init+0x40>)
 8000dcc:	f003 f828 	bl	8003e20 <HAL_TIM_PWM_Start>

//	    // Initialize all servos to stop position
//	    Servo_StopAll();
	}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000068 	.word	0x20000068
 8000dd8:	200000b4 	.word	0x200000b4
 8000ddc:	20000100 	.word	0x20000100
 8000de0:	2000014c 	.word	0x2000014c
 8000de4:	20000198 	.word	0x20000198

08000de8 <Direction_Decider>:

	int Direction_Decider(int* Desired_Position){
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
		if(*Desired_Position < 0){
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	da06      	bge.n	8000e06 <Direction_Decider+0x1e>
			*Desired_Position = *Desired_Position * -1;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	425a      	negs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	601a      	str	r2, [r3, #0]
			return CLOCKWISE;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e000      	b.n	8000e08 <Direction_Decider+0x20>
		}
		else{
			return COUNTERCLOCKWISE;
 8000e06:	2302      	movs	r3, #2
		}
	}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SignLetter>:
	 * @brief Example function to demonstrate a sign language letter
	 * @param letter: ASCII character (A-Z)
	 * @param duration: How long to hold the position (in ms)
	 * @retval None
	 */
	void SignLetter(char letter) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]
	    // Reset to neutral position
	    Servo_Init();
 8000e1e:	f7ff ffc1 	bl	8000da4 <Servo_Init>


	    // Set finger positions based on the letter
	    switch(letter) {
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	3b41      	subs	r3, #65	@ 0x41
 8000e26:	2b19      	cmp	r3, #25
 8000e28:	f200 8406 	bhi.w	8001638 <SignLetter+0x824>
 8000e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e34 <SignLetter+0x20>)
 8000e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e32:	bf00      	nop
 8000e34:	08000e9d 	.word	0x08000e9d
 8000e38:	08000ee5 	.word	0x08000ee5
 8000e3c:	08000f55 	.word	0x08000f55
 8000e40:	08000f9b 	.word	0x08000f9b
 8000e44:	08000fe1 	.word	0x08000fe1
 8000e48:	08001027 	.word	0x08001027
 8000e4c:	0800106d 	.word	0x0800106d
 8000e50:	080010b3 	.word	0x080010b3
 8000e54:	080010f9 	.word	0x080010f9
 8000e58:	0800113f 	.word	0x0800113f
 8000e5c:	08001185 	.word	0x08001185
 8000e60:	080011cb 	.word	0x080011cb
 8000e64:	08001211 	.word	0x08001211
 8000e68:	08001281 	.word	0x08001281
 8000e6c:	080012c7 	.word	0x080012c7
 8000e70:	0800130d 	.word	0x0800130d
 8000e74:	08001353 	.word	0x08001353
 8000e78:	08001399 	.word	0x08001399
 8000e7c:	080013df 	.word	0x080013df
 8000e80:	08001425 	.word	0x08001425
 8000e84:	0800146b 	.word	0x0800146b
 8000e88:	080014b1 	.word	0x080014b1
 8000e8c:	080014f7 	.word	0x080014f7
 8000e90:	08001567 	.word	0x08001567
 8000e94:	080015ad 	.word	0x080015ad
 8000e98:	080015f3 	.word	0x080015f3
	        case 'A':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8000e9c:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <SignLetter+0x118>)
 8000e9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ea2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000ea6:	4a22      	ldr	r2, [pc, #136]	@ (8000f30 <SignLetter+0x11c>)
 8000ea8:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8000eaa:	4b22      	ldr	r3, [pc, #136]	@ (8000f34 <SignLetter+0x120>)
 8000eac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000eb4:	4a20      	ldr	r2, [pc, #128]	@ (8000f38 <SignLetter+0x124>)
 8000eb6:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8000eb8:	4b20      	ldr	r3, [pc, #128]	@ (8000f3c <SignLetter+0x128>)
 8000eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ebe:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8000f40 <SignLetter+0x12c>)
 8000ec4:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8000ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f44 <SignLetter+0x130>)
 8000ec8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ecc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000ed0:	4a1d      	ldr	r2, [pc, #116]	@ (8000f48 <SignLetter+0x134>)
 8000ed2:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8000ed4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f4c <SignLetter+0x138>)
 8000ed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eda:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000ede:	4a1c      	ldr	r2, [pc, #112]	@ (8000f50 <SignLetter+0x13c>)
 8000ee0:	6013      	str	r3, [r2, #0]
			    break;
 8000ee2:	e3ac      	b.n	800163e <SignLetter+0x82a>

	        case 'B':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	@ (8000f2c <SignLetter+0x118>)
 8000ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eea:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000eee:	4a10      	ldr	r2, [pc, #64]	@ (8000f30 <SignLetter+0x11c>)
 8000ef0:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <SignLetter+0x120>)
 8000ef4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ef8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000efc:	4a0e      	ldr	r2, [pc, #56]	@ (8000f38 <SignLetter+0x124>)
 8000efe:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8000f00:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <SignLetter+0x128>)
 8000f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f06:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <SignLetter+0x12c>)
 8000f0c:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8000f0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <SignLetter+0x130>)
 8000f10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f14:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000f18:	4a0b      	ldr	r2, [pc, #44]	@ (8000f48 <SignLetter+0x134>)
 8000f1a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f4c <SignLetter+0x138>)
 8000f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f22:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000f26:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <SignLetter+0x13c>)
 8000f28:	6013      	str	r3, [r2, #0]
	            break;
 8000f2a:	e388      	b.n	800163e <SignLetter+0x82a>
 8000f2c:	20000284 	.word	0x20000284
 8000f30:	20000290 	.word	0x20000290
 8000f34:	20000286 	.word	0x20000286
 8000f38:	20000294 	.word	0x20000294
 8000f3c:	20000288 	.word	0x20000288
 8000f40:	20000298 	.word	0x20000298
 8000f44:	2000028a 	.word	0x2000028a
 8000f48:	2000029c 	.word	0x2000029c
 8000f4c:	2000028c 	.word	0x2000028c
 8000f50:	200002a0 	.word	0x200002a0

	        case 'C':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8000f54:	4bb1      	ldr	r3, [pc, #708]	@ (800121c <SignLetter+0x408>)
 8000f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f5a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000f5e:	4ab0      	ldr	r2, [pc, #704]	@ (8001220 <SignLetter+0x40c>)
 8000f60:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8000f62:	4bb0      	ldr	r3, [pc, #704]	@ (8001224 <SignLetter+0x410>)
 8000f64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f68:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000f6c:	4aae      	ldr	r2, [pc, #696]	@ (8001228 <SignLetter+0x414>)
 8000f6e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8000f70:	4bae      	ldr	r3, [pc, #696]	@ (800122c <SignLetter+0x418>)
 8000f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f76:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000f7a:	4aad      	ldr	r2, [pc, #692]	@ (8001230 <SignLetter+0x41c>)
 8000f7c:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8000f7e:	4bad      	ldr	r3, [pc, #692]	@ (8001234 <SignLetter+0x420>)
 8000f80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f84:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000f88:	4aab      	ldr	r2, [pc, #684]	@ (8001238 <SignLetter+0x424>)
 8000f8a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8000f8c:	4bab      	ldr	r3, [pc, #684]	@ (800123c <SignLetter+0x428>)
 8000f8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f92:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000f96:	4aaa      	ldr	r2, [pc, #680]	@ (8001240 <SignLetter+0x42c>)
 8000f98:	6013      	str	r3, [r2, #0]

	        case 'D':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8000f9a:	4ba0      	ldr	r3, [pc, #640]	@ (800121c <SignLetter+0x408>)
 8000f9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000fa4:	4a9e      	ldr	r2, [pc, #632]	@ (8001220 <SignLetter+0x40c>)
 8000fa6:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8000fa8:	4b9e      	ldr	r3, [pc, #632]	@ (8001224 <SignLetter+0x410>)
 8000faa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fae:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000fb2:	4a9d      	ldr	r2, [pc, #628]	@ (8001228 <SignLetter+0x414>)
 8000fb4:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8000fb6:	4b9d      	ldr	r3, [pc, #628]	@ (800122c <SignLetter+0x418>)
 8000fb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000fc0:	4a9b      	ldr	r2, [pc, #620]	@ (8001230 <SignLetter+0x41c>)
 8000fc2:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8000fc4:	4b9b      	ldr	r3, [pc, #620]	@ (8001234 <SignLetter+0x420>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000fce:	4a9a      	ldr	r2, [pc, #616]	@ (8001238 <SignLetter+0x424>)
 8000fd0:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8000fd2:	4b9a      	ldr	r3, [pc, #616]	@ (800123c <SignLetter+0x428>)
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000fdc:	4a98      	ldr	r2, [pc, #608]	@ (8001240 <SignLetter+0x42c>)
 8000fde:	6013      	str	r3, [r2, #0]

	        case 'E':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8000fe0:	4b8e      	ldr	r3, [pc, #568]	@ (800121c <SignLetter+0x408>)
 8000fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000fea:	4a8d      	ldr	r2, [pc, #564]	@ (8001220 <SignLetter+0x40c>)
 8000fec:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8000fee:	4b8d      	ldr	r3, [pc, #564]	@ (8001224 <SignLetter+0x410>)
 8000ff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8000ff8:	4a8b      	ldr	r2, [pc, #556]	@ (8001228 <SignLetter+0x414>)
 8000ffa:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8000ffc:	4b8b      	ldr	r3, [pc, #556]	@ (800122c <SignLetter+0x418>)
 8000ffe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001002:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001006:	4a8a      	ldr	r2, [pc, #552]	@ (8001230 <SignLetter+0x41c>)
 8001008:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800100a:	4b8a      	ldr	r3, [pc, #552]	@ (8001234 <SignLetter+0x420>)
 800100c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001010:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001014:	4a88      	ldr	r2, [pc, #544]	@ (8001238 <SignLetter+0x424>)
 8001016:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001018:	4b88      	ldr	r3, [pc, #544]	@ (800123c <SignLetter+0x428>)
 800101a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001022:	4a87      	ldr	r2, [pc, #540]	@ (8001240 <SignLetter+0x42c>)
 8001024:	6013      	str	r3, [r2, #0]

	        case 'F':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001026:	4b7d      	ldr	r3, [pc, #500]	@ (800121c <SignLetter+0x408>)
 8001028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800102c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001030:	4a7b      	ldr	r2, [pc, #492]	@ (8001220 <SignLetter+0x40c>)
 8001032:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001034:	4b7b      	ldr	r3, [pc, #492]	@ (8001224 <SignLetter+0x410>)
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800103e:	4a7a      	ldr	r2, [pc, #488]	@ (8001228 <SignLetter+0x414>)
 8001040:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001042:	4b7a      	ldr	r3, [pc, #488]	@ (800122c <SignLetter+0x418>)
 8001044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001048:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800104c:	4a78      	ldr	r2, [pc, #480]	@ (8001230 <SignLetter+0x41c>)
 800104e:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001050:	4b78      	ldr	r3, [pc, #480]	@ (8001234 <SignLetter+0x420>)
 8001052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001056:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800105a:	4a77      	ldr	r2, [pc, #476]	@ (8001238 <SignLetter+0x424>)
 800105c:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800105e:	4b77      	ldr	r3, [pc, #476]	@ (800123c <SignLetter+0x428>)
 8001060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001064:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001068:	4a75      	ldr	r2, [pc, #468]	@ (8001240 <SignLetter+0x42c>)
 800106a:	6013      	str	r3, [r2, #0]

	        case 'G':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800106c:	4b6b      	ldr	r3, [pc, #428]	@ (800121c <SignLetter+0x408>)
 800106e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001072:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001076:	4a6a      	ldr	r2, [pc, #424]	@ (8001220 <SignLetter+0x40c>)
 8001078:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800107a:	4b6a      	ldr	r3, [pc, #424]	@ (8001224 <SignLetter+0x410>)
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001084:	4a68      	ldr	r2, [pc, #416]	@ (8001228 <SignLetter+0x414>)
 8001086:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001088:	4b68      	ldr	r3, [pc, #416]	@ (800122c <SignLetter+0x418>)
 800108a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800108e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001092:	4a67      	ldr	r2, [pc, #412]	@ (8001230 <SignLetter+0x41c>)
 8001094:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001096:	4b67      	ldr	r3, [pc, #412]	@ (8001234 <SignLetter+0x420>)
 8001098:	f9b3 3000 	ldrsh.w	r3, [r3]
 800109c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010a0:	4a65      	ldr	r2, [pc, #404]	@ (8001238 <SignLetter+0x424>)
 80010a2:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80010a4:	4b65      	ldr	r3, [pc, #404]	@ (800123c <SignLetter+0x428>)
 80010a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010aa:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010ae:	4a64      	ldr	r2, [pc, #400]	@ (8001240 <SignLetter+0x42c>)
 80010b0:	6013      	str	r3, [r2, #0]

	        case 'H':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80010b2:	4b5a      	ldr	r3, [pc, #360]	@ (800121c <SignLetter+0x408>)
 80010b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010bc:	4a58      	ldr	r2, [pc, #352]	@ (8001220 <SignLetter+0x40c>)
 80010be:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80010c0:	4b58      	ldr	r3, [pc, #352]	@ (8001224 <SignLetter+0x410>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010ca:	4a57      	ldr	r2, [pc, #348]	@ (8001228 <SignLetter+0x414>)
 80010cc:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80010ce:	4b57      	ldr	r3, [pc, #348]	@ (800122c <SignLetter+0x418>)
 80010d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010d4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010d8:	4a55      	ldr	r2, [pc, #340]	@ (8001230 <SignLetter+0x41c>)
 80010da:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80010dc:	4b55      	ldr	r3, [pc, #340]	@ (8001234 <SignLetter+0x420>)
 80010de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010e6:	4a54      	ldr	r2, [pc, #336]	@ (8001238 <SignLetter+0x424>)
 80010e8:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80010ea:	4b54      	ldr	r3, [pc, #336]	@ (800123c <SignLetter+0x428>)
 80010ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010f0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80010f4:	4a52      	ldr	r2, [pc, #328]	@ (8001240 <SignLetter+0x42c>)
 80010f6:	6013      	str	r3, [r2, #0]

	        case 'I':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80010f8:	4b48      	ldr	r3, [pc, #288]	@ (800121c <SignLetter+0x408>)
 80010fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fe:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001102:	4a47      	ldr	r2, [pc, #284]	@ (8001220 <SignLetter+0x40c>)
 8001104:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001106:	4b47      	ldr	r3, [pc, #284]	@ (8001224 <SignLetter+0x410>)
 8001108:	f9b3 3000 	ldrsh.w	r3, [r3]
 800110c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001110:	4a45      	ldr	r2, [pc, #276]	@ (8001228 <SignLetter+0x414>)
 8001112:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001114:	4b45      	ldr	r3, [pc, #276]	@ (800122c <SignLetter+0x418>)
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800111e:	4a44      	ldr	r2, [pc, #272]	@ (8001230 <SignLetter+0x41c>)
 8001120:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001122:	4b44      	ldr	r3, [pc, #272]	@ (8001234 <SignLetter+0x420>)
 8001124:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001128:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800112c:	4a42      	ldr	r2, [pc, #264]	@ (8001238 <SignLetter+0x424>)
 800112e:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001130:	4b42      	ldr	r3, [pc, #264]	@ (800123c <SignLetter+0x428>)
 8001132:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001136:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800113a:	4a41      	ldr	r2, [pc, #260]	@ (8001240 <SignLetter+0x42c>)
 800113c:	6013      	str	r3, [r2, #0]

	        case 'J':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800113e:	4b37      	ldr	r3, [pc, #220]	@ (800121c <SignLetter+0x408>)
 8001140:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001144:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001148:	4a35      	ldr	r2, [pc, #212]	@ (8001220 <SignLetter+0x40c>)
 800114a:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800114c:	4b35      	ldr	r3, [pc, #212]	@ (8001224 <SignLetter+0x410>)
 800114e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001152:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001156:	4a34      	ldr	r2, [pc, #208]	@ (8001228 <SignLetter+0x414>)
 8001158:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800115a:	4b34      	ldr	r3, [pc, #208]	@ (800122c <SignLetter+0x418>)
 800115c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001160:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001164:	4a32      	ldr	r2, [pc, #200]	@ (8001230 <SignLetter+0x41c>)
 8001166:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001168:	4b32      	ldr	r3, [pc, #200]	@ (8001234 <SignLetter+0x420>)
 800116a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800116e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001172:	4a31      	ldr	r2, [pc, #196]	@ (8001238 <SignLetter+0x424>)
 8001174:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001176:	4b31      	ldr	r3, [pc, #196]	@ (800123c <SignLetter+0x428>)
 8001178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001180:	4a2f      	ldr	r2, [pc, #188]	@ (8001240 <SignLetter+0x42c>)
 8001182:	6013      	str	r3, [r2, #0]

	        case 'K':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001184:	4b25      	ldr	r3, [pc, #148]	@ (800121c <SignLetter+0x408>)
 8001186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800118a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800118e:	4a24      	ldr	r2, [pc, #144]	@ (8001220 <SignLetter+0x40c>)
 8001190:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001192:	4b24      	ldr	r3, [pc, #144]	@ (8001224 <SignLetter+0x410>)
 8001194:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001198:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800119c:	4a22      	ldr	r2, [pc, #136]	@ (8001228 <SignLetter+0x414>)
 800119e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80011a0:	4b22      	ldr	r3, [pc, #136]	@ (800122c <SignLetter+0x418>)
 80011a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011a6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011aa:	4a21      	ldr	r2, [pc, #132]	@ (8001230 <SignLetter+0x41c>)
 80011ac:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80011ae:	4b21      	ldr	r3, [pc, #132]	@ (8001234 <SignLetter+0x420>)
 80011b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011b4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001238 <SignLetter+0x424>)
 80011ba:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <SignLetter+0x428>)
 80011be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001240 <SignLetter+0x42c>)
 80011c8:	6013      	str	r3, [r2, #0]

	        case 'L':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80011ca:	4b14      	ldr	r3, [pc, #80]	@ (800121c <SignLetter+0x408>)
 80011cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011d0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011d4:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <SignLetter+0x40c>)
 80011d6:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80011d8:	4b12      	ldr	r3, [pc, #72]	@ (8001224 <SignLetter+0x410>)
 80011da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011de:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011e2:	4a11      	ldr	r2, [pc, #68]	@ (8001228 <SignLetter+0x414>)
 80011e4:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80011e6:	4b11      	ldr	r3, [pc, #68]	@ (800122c <SignLetter+0x418>)
 80011e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ec:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001230 <SignLetter+0x41c>)
 80011f2:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <SignLetter+0x420>)
 80011f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011fa:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80011fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001238 <SignLetter+0x424>)
 8001200:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <SignLetter+0x428>)
 8001204:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001208:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800120c:	4a0c      	ldr	r2, [pc, #48]	@ (8001240 <SignLetter+0x42c>)
 800120e:	6013      	str	r3, [r2, #0]

	        case 'M':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001210:	4b02      	ldr	r3, [pc, #8]	@ (800121c <SignLetter+0x408>)
 8001212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001216:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800121a:	e013      	b.n	8001244 <SignLetter+0x430>
 800121c:	20000284 	.word	0x20000284
 8001220:	20000290 	.word	0x20000290
 8001224:	20000286 	.word	0x20000286
 8001228:	20000294 	.word	0x20000294
 800122c:	20000288 	.word	0x20000288
 8001230:	20000298 	.word	0x20000298
 8001234:	2000028a 	.word	0x2000028a
 8001238:	2000029c 	.word	0x2000029c
 800123c:	2000028c 	.word	0x2000028c
 8001240:	200002a0 	.word	0x200002a0
 8001244:	4ab1      	ldr	r2, [pc, #708]	@ (800150c <SignLetter+0x6f8>)
 8001246:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001248:	4bb1      	ldr	r3, [pc, #708]	@ (8001510 <SignLetter+0x6fc>)
 800124a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800124e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001252:	4ab0      	ldr	r2, [pc, #704]	@ (8001514 <SignLetter+0x700>)
 8001254:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001256:	4bb0      	ldr	r3, [pc, #704]	@ (8001518 <SignLetter+0x704>)
 8001258:	f9b3 3000 	ldrsh.w	r3, [r3]
 800125c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001260:	4aae      	ldr	r2, [pc, #696]	@ (800151c <SignLetter+0x708>)
 8001262:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001264:	4bae      	ldr	r3, [pc, #696]	@ (8001520 <SignLetter+0x70c>)
 8001266:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800126e:	4aad      	ldr	r2, [pc, #692]	@ (8001524 <SignLetter+0x710>)
 8001270:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001272:	4bad      	ldr	r3, [pc, #692]	@ (8001528 <SignLetter+0x714>)
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800127c:	4aab      	ldr	r2, [pc, #684]	@ (800152c <SignLetter+0x718>)
 800127e:	6013      	str	r3, [r2, #0]

	        case 'N':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001280:	4bab      	ldr	r3, [pc, #684]	@ (8001530 <SignLetter+0x71c>)
 8001282:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001286:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800128a:	4aa0      	ldr	r2, [pc, #640]	@ (800150c <SignLetter+0x6f8>)
 800128c:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800128e:	4ba0      	ldr	r3, [pc, #640]	@ (8001510 <SignLetter+0x6fc>)
 8001290:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001294:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001298:	4a9e      	ldr	r2, [pc, #632]	@ (8001514 <SignLetter+0x700>)
 800129a:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800129c:	4b9e      	ldr	r3, [pc, #632]	@ (8001518 <SignLetter+0x704>)
 800129e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012a6:	4a9d      	ldr	r2, [pc, #628]	@ (800151c <SignLetter+0x708>)
 80012a8:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80012aa:	4b9d      	ldr	r3, [pc, #628]	@ (8001520 <SignLetter+0x70c>)
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012b4:	4a9b      	ldr	r2, [pc, #620]	@ (8001524 <SignLetter+0x710>)
 80012b6:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80012b8:	4b9b      	ldr	r3, [pc, #620]	@ (8001528 <SignLetter+0x714>)
 80012ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012be:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012c2:	4a9a      	ldr	r2, [pc, #616]	@ (800152c <SignLetter+0x718>)
 80012c4:	6013      	str	r3, [r2, #0]

	        case 'O':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80012c6:	4b9a      	ldr	r3, [pc, #616]	@ (8001530 <SignLetter+0x71c>)
 80012c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012cc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012d0:	4a8e      	ldr	r2, [pc, #568]	@ (800150c <SignLetter+0x6f8>)
 80012d2:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80012d4:	4b8e      	ldr	r3, [pc, #568]	@ (8001510 <SignLetter+0x6fc>)
 80012d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012da:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012de:	4a8d      	ldr	r2, [pc, #564]	@ (8001514 <SignLetter+0x700>)
 80012e0:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80012e2:	4b8d      	ldr	r3, [pc, #564]	@ (8001518 <SignLetter+0x704>)
 80012e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012ec:	4a8b      	ldr	r2, [pc, #556]	@ (800151c <SignLetter+0x708>)
 80012ee:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80012f0:	4b8b      	ldr	r3, [pc, #556]	@ (8001520 <SignLetter+0x70c>)
 80012f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012f6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80012fa:	4a8a      	ldr	r2, [pc, #552]	@ (8001524 <SignLetter+0x710>)
 80012fc:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80012fe:	4b8a      	ldr	r3, [pc, #552]	@ (8001528 <SignLetter+0x714>)
 8001300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001304:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001308:	4a88      	ldr	r2, [pc, #544]	@ (800152c <SignLetter+0x718>)
 800130a:	6013      	str	r3, [r2, #0]

	        case 'P':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800130c:	4b88      	ldr	r3, [pc, #544]	@ (8001530 <SignLetter+0x71c>)
 800130e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001312:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001316:	4a7d      	ldr	r2, [pc, #500]	@ (800150c <SignLetter+0x6f8>)
 8001318:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 800131a:	4b7d      	ldr	r3, [pc, #500]	@ (8001510 <SignLetter+0x6fc>)
 800131c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001320:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001324:	4a7b      	ldr	r2, [pc, #492]	@ (8001514 <SignLetter+0x700>)
 8001326:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001328:	4b7b      	ldr	r3, [pc, #492]	@ (8001518 <SignLetter+0x704>)
 800132a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800132e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001332:	4a7a      	ldr	r2, [pc, #488]	@ (800151c <SignLetter+0x708>)
 8001334:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001336:	4b7a      	ldr	r3, [pc, #488]	@ (8001520 <SignLetter+0x70c>)
 8001338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800133c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001340:	4a78      	ldr	r2, [pc, #480]	@ (8001524 <SignLetter+0x710>)
 8001342:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001344:	4b78      	ldr	r3, [pc, #480]	@ (8001528 <SignLetter+0x714>)
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800134e:	4a77      	ldr	r2, [pc, #476]	@ (800152c <SignLetter+0x718>)
 8001350:	6013      	str	r3, [r2, #0]

	        case 'Q':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001352:	4b77      	ldr	r3, [pc, #476]	@ (8001530 <SignLetter+0x71c>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800135c:	4a6b      	ldr	r2, [pc, #428]	@ (800150c <SignLetter+0x6f8>)
 800135e:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001360:	4b6b      	ldr	r3, [pc, #428]	@ (8001510 <SignLetter+0x6fc>)
 8001362:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001366:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800136a:	4a6a      	ldr	r2, [pc, #424]	@ (8001514 <SignLetter+0x700>)
 800136c:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800136e:	4b6a      	ldr	r3, [pc, #424]	@ (8001518 <SignLetter+0x704>)
 8001370:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001374:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001378:	4a68      	ldr	r2, [pc, #416]	@ (800151c <SignLetter+0x708>)
 800137a:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800137c:	4b68      	ldr	r3, [pc, #416]	@ (8001520 <SignLetter+0x70c>)
 800137e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001382:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001386:	4a67      	ldr	r2, [pc, #412]	@ (8001524 <SignLetter+0x710>)
 8001388:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800138a:	4b67      	ldr	r3, [pc, #412]	@ (8001528 <SignLetter+0x714>)
 800138c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001390:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001394:	4a65      	ldr	r2, [pc, #404]	@ (800152c <SignLetter+0x718>)
 8001396:	6013      	str	r3, [r2, #0]

	        case 'R':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001398:	4b65      	ldr	r3, [pc, #404]	@ (8001530 <SignLetter+0x71c>)
 800139a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800139e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013a2:	4a5a      	ldr	r2, [pc, #360]	@ (800150c <SignLetter+0x6f8>)
 80013a4:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80013a6:	4b5a      	ldr	r3, [pc, #360]	@ (8001510 <SignLetter+0x6fc>)
 80013a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ac:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013b0:	4a58      	ldr	r2, [pc, #352]	@ (8001514 <SignLetter+0x700>)
 80013b2:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80013b4:	4b58      	ldr	r3, [pc, #352]	@ (8001518 <SignLetter+0x704>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013be:	4a57      	ldr	r2, [pc, #348]	@ (800151c <SignLetter+0x708>)
 80013c0:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80013c2:	4b57      	ldr	r3, [pc, #348]	@ (8001520 <SignLetter+0x70c>)
 80013c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013c8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013cc:	4a55      	ldr	r2, [pc, #340]	@ (8001524 <SignLetter+0x710>)
 80013ce:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80013d0:	4b55      	ldr	r3, [pc, #340]	@ (8001528 <SignLetter+0x714>)
 80013d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013da:	4a54      	ldr	r2, [pc, #336]	@ (800152c <SignLetter+0x718>)
 80013dc:	6013      	str	r3, [r2, #0]

	        case 'S':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80013de:	4b54      	ldr	r3, [pc, #336]	@ (8001530 <SignLetter+0x71c>)
 80013e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013e8:	4a48      	ldr	r2, [pc, #288]	@ (800150c <SignLetter+0x6f8>)
 80013ea:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80013ec:	4b48      	ldr	r3, [pc, #288]	@ (8001510 <SignLetter+0x6fc>)
 80013ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013f2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80013f6:	4a47      	ldr	r2, [pc, #284]	@ (8001514 <SignLetter+0x700>)
 80013f8:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80013fa:	4b47      	ldr	r3, [pc, #284]	@ (8001518 <SignLetter+0x704>)
 80013fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001400:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001404:	4a45      	ldr	r2, [pc, #276]	@ (800151c <SignLetter+0x708>)
 8001406:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001408:	4b45      	ldr	r3, [pc, #276]	@ (8001520 <SignLetter+0x70c>)
 800140a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800140e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001412:	4a44      	ldr	r2, [pc, #272]	@ (8001524 <SignLetter+0x710>)
 8001414:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001416:	4b44      	ldr	r3, [pc, #272]	@ (8001528 <SignLetter+0x714>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001420:	4a42      	ldr	r2, [pc, #264]	@ (800152c <SignLetter+0x718>)
 8001422:	6013      	str	r3, [r2, #0]

	        case 'T':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001424:	4b42      	ldr	r3, [pc, #264]	@ (8001530 <SignLetter+0x71c>)
 8001426:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800142e:	4a37      	ldr	r2, [pc, #220]	@ (800150c <SignLetter+0x6f8>)
 8001430:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001432:	4b37      	ldr	r3, [pc, #220]	@ (8001510 <SignLetter+0x6fc>)
 8001434:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001438:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800143c:	4a35      	ldr	r2, [pc, #212]	@ (8001514 <SignLetter+0x700>)
 800143e:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001440:	4b35      	ldr	r3, [pc, #212]	@ (8001518 <SignLetter+0x704>)
 8001442:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001446:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800144a:	4a34      	ldr	r2, [pc, #208]	@ (800151c <SignLetter+0x708>)
 800144c:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800144e:	4b34      	ldr	r3, [pc, #208]	@ (8001520 <SignLetter+0x70c>)
 8001450:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001454:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001458:	4a32      	ldr	r2, [pc, #200]	@ (8001524 <SignLetter+0x710>)
 800145a:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800145c:	4b32      	ldr	r3, [pc, #200]	@ (8001528 <SignLetter+0x714>)
 800145e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001462:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001466:	4a31      	ldr	r2, [pc, #196]	@ (800152c <SignLetter+0x718>)
 8001468:	6013      	str	r3, [r2, #0]

	        case 'U':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 800146a:	4b31      	ldr	r3, [pc, #196]	@ (8001530 <SignLetter+0x71c>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001474:	4a25      	ldr	r2, [pc, #148]	@ (800150c <SignLetter+0x6f8>)
 8001476:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001478:	4b25      	ldr	r3, [pc, #148]	@ (8001510 <SignLetter+0x6fc>)
 800147a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001482:	4a24      	ldr	r2, [pc, #144]	@ (8001514 <SignLetter+0x700>)
 8001484:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001486:	4b24      	ldr	r3, [pc, #144]	@ (8001518 <SignLetter+0x704>)
 8001488:	f9b3 3000 	ldrsh.w	r3, [r3]
 800148c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001490:	4a22      	ldr	r2, [pc, #136]	@ (800151c <SignLetter+0x708>)
 8001492:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001494:	4b22      	ldr	r3, [pc, #136]	@ (8001520 <SignLetter+0x70c>)
 8001496:	f9b3 3000 	ldrsh.w	r3, [r3]
 800149a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800149e:	4a21      	ldr	r2, [pc, #132]	@ (8001524 <SignLetter+0x710>)
 80014a0:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80014a2:	4b21      	ldr	r3, [pc, #132]	@ (8001528 <SignLetter+0x714>)
 80014a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80014ac:	4a1f      	ldr	r2, [pc, #124]	@ (800152c <SignLetter+0x718>)
 80014ae:	6013      	str	r3, [r2, #0]

	        case 'V':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80014b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001530 <SignLetter+0x71c>)
 80014b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014b6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80014ba:	4a14      	ldr	r2, [pc, #80]	@ (800150c <SignLetter+0x6f8>)
 80014bc:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <SignLetter+0x6fc>)
 80014c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014c4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80014c8:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <SignLetter+0x700>)
 80014ca:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <SignLetter+0x704>)
 80014ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014d2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80014d6:	4a11      	ldr	r2, [pc, #68]	@ (800151c <SignLetter+0x708>)
 80014d8:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80014da:	4b11      	ldr	r3, [pc, #68]	@ (8001520 <SignLetter+0x70c>)
 80014dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014e0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80014e4:	4a0f      	ldr	r2, [pc, #60]	@ (8001524 <SignLetter+0x710>)
 80014e6:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	@ (8001528 <SignLetter+0x714>)
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80014f2:	4a0e      	ldr	r2, [pc, #56]	@ (800152c <SignLetter+0x718>)
 80014f4:	6013      	str	r3, [r2, #0]

	        case 'W':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001530 <SignLetter+0x71c>)
 80014f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014fc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001500:	4a02      	ldr	r2, [pc, #8]	@ (800150c <SignLetter+0x6f8>)
 8001502:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001504:	4b02      	ldr	r3, [pc, #8]	@ (8001510 <SignLetter+0x6fc>)
 8001506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800150a:	e013      	b.n	8001534 <SignLetter+0x720>
 800150c:	20000290 	.word	0x20000290
 8001510:	20000286 	.word	0x20000286
 8001514:	20000294 	.word	0x20000294
 8001518:	20000288 	.word	0x20000288
 800151c:	20000298 	.word	0x20000298
 8001520:	2000028a 	.word	0x2000028a
 8001524:	2000029c 	.word	0x2000029c
 8001528:	2000028c 	.word	0x2000028c
 800152c:	200002a0 	.word	0x200002a0
 8001530:	20000284 	.word	0x20000284
 8001534:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001538:	4a71      	ldr	r2, [pc, #452]	@ (8001700 <SignLetter+0x8ec>)
 800153a:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800153c:	4b71      	ldr	r3, [pc, #452]	@ (8001704 <SignLetter+0x8f0>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001546:	4a70      	ldr	r2, [pc, #448]	@ (8001708 <SignLetter+0x8f4>)
 8001548:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800154a:	4b70      	ldr	r3, [pc, #448]	@ (800170c <SignLetter+0x8f8>)
 800154c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001550:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001554:	4a6e      	ldr	r2, [pc, #440]	@ (8001710 <SignLetter+0x8fc>)
 8001556:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001558:	4b6e      	ldr	r3, [pc, #440]	@ (8001714 <SignLetter+0x900>)
 800155a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001562:	4a6d      	ldr	r2, [pc, #436]	@ (8001718 <SignLetter+0x904>)
 8001564:	6013      	str	r3, [r2, #0]

	        case 'X':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001566:	4b6d      	ldr	r3, [pc, #436]	@ (800171c <SignLetter+0x908>)
 8001568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001570:	4a6b      	ldr	r2, [pc, #428]	@ (8001720 <SignLetter+0x90c>)
 8001572:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001574:	4b6b      	ldr	r3, [pc, #428]	@ (8001724 <SignLetter+0x910>)
 8001576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800157e:	4a60      	ldr	r2, [pc, #384]	@ (8001700 <SignLetter+0x8ec>)
 8001580:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001582:	4b60      	ldr	r3, [pc, #384]	@ (8001704 <SignLetter+0x8f0>)
 8001584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001588:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800158c:	4a5e      	ldr	r2, [pc, #376]	@ (8001708 <SignLetter+0x8f4>)
 800158e:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001590:	4b5e      	ldr	r3, [pc, #376]	@ (800170c <SignLetter+0x8f8>)
 8001592:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001596:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800159a:	4a5d      	ldr	r2, [pc, #372]	@ (8001710 <SignLetter+0x8fc>)
 800159c:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800159e:	4b5d      	ldr	r3, [pc, #372]	@ (8001714 <SignLetter+0x900>)
 80015a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015a8:	4a5b      	ldr	r2, [pc, #364]	@ (8001718 <SignLetter+0x904>)
 80015aa:	6013      	str	r3, [r2, #0]

	        case 'Y':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80015ac:	4b5b      	ldr	r3, [pc, #364]	@ (800171c <SignLetter+0x908>)
 80015ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015b6:	4a5a      	ldr	r2, [pc, #360]	@ (8001720 <SignLetter+0x90c>)
 80015b8:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 80015ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001724 <SignLetter+0x910>)
 80015bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015c0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001700 <SignLetter+0x8ec>)
 80015c6:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80015c8:	4b4e      	ldr	r3, [pc, #312]	@ (8001704 <SignLetter+0x8f0>)
 80015ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ce:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001708 <SignLetter+0x8f4>)
 80015d4:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 80015d6:	4b4d      	ldr	r3, [pc, #308]	@ (800170c <SignLetter+0x8f8>)
 80015d8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015dc:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001710 <SignLetter+0x8fc>)
 80015e2:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80015e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001714 <SignLetter+0x900>)
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001718 <SignLetter+0x904>)
 80015f0:	6013      	str	r3, [r2, #0]

	        case 'Z':
	        	thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80015f2:	4b4a      	ldr	r3, [pc, #296]	@ (800171c <SignLetter+0x908>)
 80015f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015f8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80015fc:	4a48      	ldr	r2, [pc, #288]	@ (8001720 <SignLetter+0x90c>)
 80015fe:	6013      	str	r3, [r2, #0]
	        	index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001600:	4b48      	ldr	r3, [pc, #288]	@ (8001724 <SignLetter+0x910>)
 8001602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001606:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800160a:	4a3d      	ldr	r2, [pc, #244]	@ (8001700 <SignLetter+0x8ec>)
 800160c:	6013      	str	r3, [r2, #0]
				middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800160e:	4b3d      	ldr	r3, [pc, #244]	@ (8001704 <SignLetter+0x8f0>)
 8001610:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001614:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001618:	4a3b      	ldr	r2, [pc, #236]	@ (8001708 <SignLetter+0x8f4>)
 800161a:	6013      	str	r3, [r2, #0]
				ring_desired_position = ring_current - 1 * RING_CLOSED;
 800161c:	4b3b      	ldr	r3, [pc, #236]	@ (800170c <SignLetter+0x8f8>)
 800161e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001622:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001626:	4a3a      	ldr	r2, [pc, #232]	@ (8001710 <SignLetter+0x8fc>)
 8001628:	6013      	str	r3, [r2, #0]
			    pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800162a:	4b3a      	ldr	r3, [pc, #232]	@ (8001714 <SignLetter+0x900>)
 800162c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001630:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001634:	4a38      	ldr	r2, [pc, #224]	@ (8001718 <SignLetter+0x904>)
 8001636:	6013      	str	r3, [r2, #0]

	        default:
	            // Default position (rest)
	            Servo_StopAll();
 8001638:	f7ff fb78 	bl	8000d2c <Servo_StopAll>
	            break;
 800163c:	bf00      	nop
	    }

		osTimerStart(Index_FingerHandle, abs(index_desired_position));
 800163e:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <SignLetter+0x914>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	4b2f      	ldr	r3, [pc, #188]	@ (8001700 <SignLetter+0x8ec>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	bfb8      	it	lt
 800164a:	425b      	neglt	r3, r3
 800164c:	4619      	mov	r1, r3
 800164e:	4610      	mov	r0, r2
 8001650:	f004 fb7a 	bl	8005d48 <osTimerStart>
		osTimerStart(Thumb_FingerHandle, thumb_desired_position);
 8001654:	4b35      	ldr	r3, [pc, #212]	@ (800172c <SignLetter+0x918>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a31      	ldr	r2, [pc, #196]	@ (8001720 <SignLetter+0x90c>)
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fb72 	bl	8005d48 <osTimerStart>
		osTimerStart(Middle_FingerHandle, thumb_desired_position);
 8001664:	4b32      	ldr	r3, [pc, #200]	@ (8001730 <SignLetter+0x91c>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2d      	ldr	r2, [pc, #180]	@ (8001720 <SignLetter+0x90c>)
 800166a:	6812      	ldr	r2, [r2, #0]
 800166c:	4611      	mov	r1, r2
 800166e:	4618      	mov	r0, r3
 8001670:	f004 fb6a 	bl	8005d48 <osTimerStart>
		osTimerStart(Ring_FingerHandle, thumb_desired_position);
 8001674:	4b2f      	ldr	r3, [pc, #188]	@ (8001734 <SignLetter+0x920>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a29      	ldr	r2, [pc, #164]	@ (8001720 <SignLetter+0x90c>)
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4611      	mov	r1, r2
 800167e:	4618      	mov	r0, r3
 8001680:	f004 fb62 	bl	8005d48 <osTimerStart>
		osTimerStart(Pinky_FingerHandle, thumb_desired_position);
 8001684:	4b2c      	ldr	r3, [pc, #176]	@ (8001738 <SignLetter+0x924>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a25      	ldr	r2, [pc, #148]	@ (8001720 <SignLetter+0x90c>)
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f004 fb5a 	bl	8005d48 <osTimerStart>

	    Servo_SetMotion(THUMB, Direction_Decider(&thumb_desired_position), 10);
 8001694:	4822      	ldr	r0, [pc, #136]	@ (8001720 <SignLetter+0x90c>)
 8001696:	f7ff fba7 	bl	8000de8 <Direction_Decider>
 800169a:	4603      	mov	r3, r0
 800169c:	b2db      	uxtb	r3, r3
 800169e:	220a      	movs	r2, #10
 80016a0:	4619      	mov	r1, r3
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff fabc 	bl	8000c20 <Servo_SetMotion>
	    Servo_SetMotion(INDEX, Direction_Decider(&index_desired_position), 25);
 80016a8:	4815      	ldr	r0, [pc, #84]	@ (8001700 <SignLetter+0x8ec>)
 80016aa:	f7ff fb9d 	bl	8000de8 <Direction_Decider>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	2219      	movs	r2, #25
 80016b4:	4619      	mov	r1, r3
 80016b6:	2001      	movs	r0, #1
 80016b8:	f7ff fab2 	bl	8000c20 <Servo_SetMotion>
	    Servo_SetMotion(MIDDLE, Direction_Decider(&middle_desired_position), 10);
 80016bc:	4812      	ldr	r0, [pc, #72]	@ (8001708 <SignLetter+0x8f4>)
 80016be:	f7ff fb93 	bl	8000de8 <Direction_Decider>
 80016c2:	4603      	mov	r3, r0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	220a      	movs	r2, #10
 80016c8:	4619      	mov	r1, r3
 80016ca:	2002      	movs	r0, #2
 80016cc:	f7ff faa8 	bl	8000c20 <Servo_SetMotion>
	    Servo_SetMotion(RING, Direction_Decider(&ring_desired_position), 10);
 80016d0:	480f      	ldr	r0, [pc, #60]	@ (8001710 <SignLetter+0x8fc>)
 80016d2:	f7ff fb89 	bl	8000de8 <Direction_Decider>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	220a      	movs	r2, #10
 80016dc:	4619      	mov	r1, r3
 80016de:	2003      	movs	r0, #3
 80016e0:	f7ff fa9e 	bl	8000c20 <Servo_SetMotion>
	    Servo_SetMotion(PINKY, Direction_Decider(&pinky_desired_position), 10);
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <SignLetter+0x904>)
 80016e6:	f7ff fb7f 	bl	8000de8 <Direction_Decider>
 80016ea:	4603      	mov	r3, r0
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	220a      	movs	r2, #10
 80016f0:	4619      	mov	r1, r3
 80016f2:	2004      	movs	r0, #4
 80016f4:	f7ff fa94 	bl	8000c20 <Servo_SetMotion>

	}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000294 	.word	0x20000294
 8001704:	20000288 	.word	0x20000288
 8001708:	20000298 	.word	0x20000298
 800170c:	2000028a 	.word	0x2000028a
 8001710:	2000029c 	.word	0x2000029c
 8001714:	2000028c 	.word	0x2000028c
 8001718:	200002a0 	.word	0x200002a0
 800171c:	20000284 	.word	0x20000284
 8001720:	20000290 	.word	0x20000290
 8001724:	20000286 	.word	0x20000286
 8001728:	20000270 	.word	0x20000270
 800172c:	20000274 	.word	0x20000274
 8001730:	20000278 	.word	0x20000278
 8001734:	2000027c 	.word	0x2000027c
 8001738:	20000280 	.word	0x20000280

0800173c <HAL_GPIO_EXTI_Callback>:
	 * @param None
	 * @retval None
	 */

	void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	4603      	mov	r3, r0
 8001744:	80fb      	strh	r3, [r7, #6]
	    if (GPIO_Pin == B1_Pin) // Check it’s B1 triggering the interrupt
 8001746:	88fb      	ldrh	r3, [r7, #6]
 8001748:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800174c:	d107      	bne.n	800175e <HAL_GPIO_EXTI_Callback+0x22>
	    {
	        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Toggle LED2 as a test
 800174e:	2120      	movs	r1, #32
 8001750:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001754:	f000 feb6 	bl	80024c4 <HAL_GPIO_TogglePin>
	        SignLetter('A');
 8001758:	2041      	movs	r0, #65	@ 0x41
 800175a:	f7ff fb5b 	bl	8000e14 <SignLetter>

	    }
	}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
//	osTimerStart(Thumb_FingerHandle, thumb_current);
//	osTimerStart(Middle_FingerHandle, thumb_current);
//	osTimerStart(Ring_FingerHandle, thumb_current);
//	osTimerStart(Pinky_FingerHandle, thumb_current);

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800176e:	2120      	movs	r1, #32
 8001770:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001774:	f000 fea6 	bl	80024c4 <HAL_GPIO_TogglePin>

	SignLetter('A');
 8001778:	2041      	movs	r0, #65	@ 0x41
 800177a:	f7ff fb4b 	bl	8000e14 <SignLetter>
//	Servo_StopAll();


  for(;;)
  {
    osDelay(1);
 800177e:	2001      	movs	r0, #1
 8001780:	f004 fa36 	bl	8005bf0 <osDelay>
 8001784:	e7fb      	b.n	800177e <StartDefaultTask+0x18>
	...

08001788 <Index>:
  /* USER CODE END 5 */
}

/* Index function */
void Index(void *argument)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Index */

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001790:	2120      	movs	r1, #32
 8001792:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001796:	f000 fe95 	bl	80024c4 <HAL_GPIO_TogglePin>
	Servo_SetMotion(INDEX, STOP, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2100      	movs	r1, #0
 800179e:	2001      	movs	r0, #1
 80017a0:	f7ff fa3e 	bl	8000c20 <Servo_SetMotion>
    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80017a4:	2100      	movs	r1, #0
 80017a6:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <Index+0x2c>)
 80017a8:	f002 fc40 	bl	800402c <HAL_TIM_PWM_Stop>
//    thumb_current = thumb_desired_position;
//	middle_current = middle_desired_position;
//	ring_current = ring_desired_position;
//	pinky_current = pinky_desired_position;
  /* USER CODE END Index */
}
 80017ac:	bf00      	nop
 80017ae:	3708      	adds	r7, #8
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200000b4 	.word	0x200000b4

080017b8 <Thumb>:

/* Thumb function */
void Thumb(void *argument)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thumb */
	Servo_StopAll();
 80017c0:	f7ff fab4 	bl	8000d2c <Servo_StopAll>

    index_current = index_desired_position;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <Thumb+0x48>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	b21a      	sxth	r2, r3
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <Thumb+0x4c>)
 80017cc:	801a      	strh	r2, [r3, #0]
    thumb_current = thumb_desired_position;
 80017ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <Thumb+0x50>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	b21a      	sxth	r2, r3
 80017d4:	4b0d      	ldr	r3, [pc, #52]	@ (800180c <Thumb+0x54>)
 80017d6:	801a      	strh	r2, [r3, #0]
	middle_current = middle_desired_position;
 80017d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <Thumb+0x58>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	b21a      	sxth	r2, r3
 80017de:	4b0d      	ldr	r3, [pc, #52]	@ (8001814 <Thumb+0x5c>)
 80017e0:	801a      	strh	r2, [r3, #0]
	ring_current = ring_desired_position;
 80017e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001818 <Thumb+0x60>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b21a      	sxth	r2, r3
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <Thumb+0x64>)
 80017ea:	801a      	strh	r2, [r3, #0]
	pinky_current = pinky_desired_position;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <Thumb+0x68>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	b21a      	sxth	r2, r3
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <Thumb+0x6c>)
 80017f4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Thumb */
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000294 	.word	0x20000294
 8001804:	20000286 	.word	0x20000286
 8001808:	20000290 	.word	0x20000290
 800180c:	20000284 	.word	0x20000284
 8001810:	20000298 	.word	0x20000298
 8001814:	20000288 	.word	0x20000288
 8001818:	2000029c 	.word	0x2000029c
 800181c:	2000028a 	.word	0x2000028a
 8001820:	200002a0 	.word	0x200002a0
 8001824:	2000028c 	.word	0x2000028c

08001828 <Middle>:

/* Middle function */
void Middle(void *argument)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Middle */
	Servo_StopAll();
 8001830:	f7ff fa7c 	bl	8000d2c <Servo_StopAll>

	index_current = index_desired_position;
 8001834:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <Middle+0x48>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	b21a      	sxth	r2, r3
 800183a:	4b0e      	ldr	r3, [pc, #56]	@ (8001874 <Middle+0x4c>)
 800183c:	801a      	strh	r2, [r3, #0]
    thumb_current = thumb_desired_position;
 800183e:	4b0e      	ldr	r3, [pc, #56]	@ (8001878 <Middle+0x50>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	b21a      	sxth	r2, r3
 8001844:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <Middle+0x54>)
 8001846:	801a      	strh	r2, [r3, #0]
	middle_current = middle_desired_position;
 8001848:	4b0d      	ldr	r3, [pc, #52]	@ (8001880 <Middle+0x58>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b21a      	sxth	r2, r3
 800184e:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <Middle+0x5c>)
 8001850:	801a      	strh	r2, [r3, #0]
	ring_current = ring_desired_position;
 8001852:	4b0d      	ldr	r3, [pc, #52]	@ (8001888 <Middle+0x60>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	b21a      	sxth	r2, r3
 8001858:	4b0c      	ldr	r3, [pc, #48]	@ (800188c <Middle+0x64>)
 800185a:	801a      	strh	r2, [r3, #0]
	pinky_current = pinky_desired_position;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <Middle+0x68>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	b21a      	sxth	r2, r3
 8001862:	4b0c      	ldr	r3, [pc, #48]	@ (8001894 <Middle+0x6c>)
 8001864:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Middle */
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	20000294 	.word	0x20000294
 8001874:	20000286 	.word	0x20000286
 8001878:	20000290 	.word	0x20000290
 800187c:	20000284 	.word	0x20000284
 8001880:	20000298 	.word	0x20000298
 8001884:	20000288 	.word	0x20000288
 8001888:	2000029c 	.word	0x2000029c
 800188c:	2000028a 	.word	0x2000028a
 8001890:	200002a0 	.word	0x200002a0
 8001894:	2000028c 	.word	0x2000028c

08001898 <Ring>:

/* Ring function */
void Ring(void *argument)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ring */
	Servo_StopAll();
 80018a0:	f7ff fa44 	bl	8000d2c <Servo_StopAll>

	index_current = index_desired_position;
 80018a4:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <Ring+0x48>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	b21a      	sxth	r2, r3
 80018aa:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <Ring+0x4c>)
 80018ac:	801a      	strh	r2, [r3, #0]
    thumb_current = thumb_desired_position;
 80018ae:	4b0e      	ldr	r3, [pc, #56]	@ (80018e8 <Ring+0x50>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b21a      	sxth	r2, r3
 80018b4:	4b0d      	ldr	r3, [pc, #52]	@ (80018ec <Ring+0x54>)
 80018b6:	801a      	strh	r2, [r3, #0]
	middle_current = middle_desired_position;
 80018b8:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <Ring+0x58>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	b21a      	sxth	r2, r3
 80018be:	4b0d      	ldr	r3, [pc, #52]	@ (80018f4 <Ring+0x5c>)
 80018c0:	801a      	strh	r2, [r3, #0]
	ring_current = ring_desired_position;
 80018c2:	4b0d      	ldr	r3, [pc, #52]	@ (80018f8 <Ring+0x60>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	b21a      	sxth	r2, r3
 80018c8:	4b0c      	ldr	r3, [pc, #48]	@ (80018fc <Ring+0x64>)
 80018ca:	801a      	strh	r2, [r3, #0]
	pinky_current = pinky_desired_position;
 80018cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001900 <Ring+0x68>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	b21a      	sxth	r2, r3
 80018d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001904 <Ring+0x6c>)
 80018d4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Ring */
}
 80018d6:	bf00      	nop
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000294 	.word	0x20000294
 80018e4:	20000286 	.word	0x20000286
 80018e8:	20000290 	.word	0x20000290
 80018ec:	20000284 	.word	0x20000284
 80018f0:	20000298 	.word	0x20000298
 80018f4:	20000288 	.word	0x20000288
 80018f8:	2000029c 	.word	0x2000029c
 80018fc:	2000028a 	.word	0x2000028a
 8001900:	200002a0 	.word	0x200002a0
 8001904:	2000028c 	.word	0x2000028c

08001908 <Pinky>:

/* Pinky function */
void Pinky(void *argument)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Pinky */
	Servo_StopAll();
 8001910:	f7ff fa0c 	bl	8000d2c <Servo_StopAll>

	index_current = index_desired_position;
 8001914:	4b0e      	ldr	r3, [pc, #56]	@ (8001950 <Pinky+0x48>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	b21a      	sxth	r2, r3
 800191a:	4b0e      	ldr	r3, [pc, #56]	@ (8001954 <Pinky+0x4c>)
 800191c:	801a      	strh	r2, [r3, #0]
    thumb_current = thumb_desired_position;
 800191e:	4b0e      	ldr	r3, [pc, #56]	@ (8001958 <Pinky+0x50>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b21a      	sxth	r2, r3
 8001924:	4b0d      	ldr	r3, [pc, #52]	@ (800195c <Pinky+0x54>)
 8001926:	801a      	strh	r2, [r3, #0]
	middle_current = middle_desired_position;
 8001928:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <Pinky+0x58>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	b21a      	sxth	r2, r3
 800192e:	4b0d      	ldr	r3, [pc, #52]	@ (8001964 <Pinky+0x5c>)
 8001930:	801a      	strh	r2, [r3, #0]
	ring_current = ring_desired_position;
 8001932:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <Pinky+0x60>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	b21a      	sxth	r2, r3
 8001938:	4b0c      	ldr	r3, [pc, #48]	@ (800196c <Pinky+0x64>)
 800193a:	801a      	strh	r2, [r3, #0]
	pinky_current = pinky_desired_position;
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <Pinky+0x68>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	b21a      	sxth	r2, r3
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <Pinky+0x6c>)
 8001944:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Pinky */
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000294 	.word	0x20000294
 8001954:	20000286 	.word	0x20000286
 8001958:	20000290 	.word	0x20000290
 800195c:	20000284 	.word	0x20000284
 8001960:	20000298 	.word	0x20000298
 8001964:	20000288 	.word	0x20000288
 8001968:	2000029c 	.word	0x2000029c
 800196c:	2000028a 	.word	0x2000028a
 8001970:	200002a0 	.word	0x200002a0
 8001974:	2000028c 	.word	0x2000028c

08001978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800198a:	f000 fad7 	bl	8001f3c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40000c00 	.word	0x40000c00

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <Error_Handler+0x8>

080019a8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b11      	ldr	r3, [pc, #68]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019b2:	4a10      	ldr	r2, [pc, #64]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80019ba:	4b0e      	ldr	r3, [pc, #56]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b0b      	ldr	r3, [pc, #44]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019ca:	4a0a      	ldr	r2, [pc, #40]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019d2:	4b08      	ldr	r3, [pc, #32]	@ (80019f4 <HAL_MspInit+0x4c>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019de:	2200      	movs	r2, #0
 80019e0:	210f      	movs	r1, #15
 80019e2:	f06f 0001 	mvn.w	r0, #1
 80019e6:	f000 fb81 	bl	80020ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ea:	bf00      	nop
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40021000 	.word	0x40021000

080019f8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac0 <HAL_TIM_PWM_MspInit+0xc8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d10c      	bne.n	8001a24 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0e:	4a2d      	ldr	r2, [pc, #180]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a14:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a16:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a1e:	61fb      	str	r3, [r7, #28]
 8001a20:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001a22:	e046      	b.n	8001ab2 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a2c:	d10c      	bne.n	8001a48 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a2e:	4b25      	ldr	r3, [pc, #148]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a32:	4a24      	ldr	r2, [pc, #144]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a3a:	4b22      	ldr	r3, [pc, #136]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a3e:	f003 0301 	and.w	r3, r3, #1
 8001a42:	61bb      	str	r3, [r7, #24]
 8001a44:	69bb      	ldr	r3, [r7, #24]
}
 8001a46:	e034      	b.n	8001ab2 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ac8 <HAL_TIM_PWM_MspInit+0xd0>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d10c      	bne.n	8001a6c <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a52:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a56:	4a1b      	ldr	r2, [pc, #108]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a58:	f043 0302 	orr.w	r3, r3, #2
 8001a5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a5e:	4b19      	ldr	r3, [pc, #100]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
}
 8001a6a:	e022      	b.n	8001ab2 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM4)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a16      	ldr	r2, [pc, #88]	@ (8001acc <HAL_TIM_PWM_MspInit+0xd4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d10c      	bne.n	8001a90 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a76:	4b13      	ldr	r3, [pc, #76]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7a:	4a12      	ldr	r2, [pc, #72]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a7c:	f043 0304 	orr.w	r3, r3, #4
 8001a80:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a82:	4b10      	ldr	r3, [pc, #64]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a86:	f003 0304 	and.w	r3, r3, #4
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
}
 8001a8e:	e010      	b.n	8001ab2 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM8)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0e      	ldr	r2, [pc, #56]	@ (8001ad0 <HAL_TIM_PWM_MspInit+0xd8>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10b      	bne.n	8001ab2 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001aa0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001aa4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001aa6:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <HAL_TIM_PWM_MspInit+0xcc>)
 8001aa8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aaa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
}
 8001ab2:	bf00      	nop
 8001ab4:	3724      	adds	r7, #36	@ 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40012c00 	.word	0x40012c00
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	40000400 	.word	0x40000400
 8001acc:	40000800 	.word	0x40000800
 8001ad0:	40013400 	.word	0x40013400

08001ad4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	@ 0x30
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a57      	ldr	r2, [pc, #348]	@ (8001c50 <HAL_TIM_MspPostInit+0x17c>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d11e      	bne.n	8001b34 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	4b57      	ldr	r3, [pc, #348]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001afa:	4a56      	ldr	r2, [pc, #344]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b02:	4b54      	ldr	r3, [pc, #336]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	61bb      	str	r3, [r7, #24]
 8001b0c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001b0e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b14:	2302      	movs	r3, #2
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b20:	2301      	movs	r3, #1
 8001b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b24:	f107 031c 	add.w	r3, r7, #28
 8001b28:	4619      	mov	r1, r3
 8001b2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b2e:	f000 fb07 	bl	8002140 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001b32:	e088      	b.n	8001c46 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM2)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b3c:	d11d      	bne.n	8001b7a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3e:	4b45      	ldr	r3, [pc, #276]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b42:	4a44      	ldr	r2, [pc, #272]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b4a:	4b42      	ldr	r3, [pc, #264]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	617b      	str	r3, [r7, #20]
 8001b54:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	2300      	movs	r3, #0
 8001b64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b66:	2301      	movs	r3, #1
 8001b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b74:	f000 fae4 	bl	8002140 <HAL_GPIO_Init>
}
 8001b78:	e065      	b.n	8001c46 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a36      	ldr	r2, [pc, #216]	@ (8001c58 <HAL_TIM_MspPostInit+0x184>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d11d      	bne.n	8001bc0 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b84:	4b33      	ldr	r3, [pc, #204]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001b86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b88:	4a32      	ldr	r2, [pc, #200]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b90:	4b30      	ldr	r3, [pc, #192]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001b92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b9c:	2340      	movs	r3, #64	@ 0x40
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bac:	2302      	movs	r3, #2
 8001bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb0:	f107 031c 	add.w	r3, r7, #28
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bba:	f000 fac1 	bl	8002140 <HAL_GPIO_Init>
}
 8001bbe:	e042      	b.n	8001c46 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a25      	ldr	r2, [pc, #148]	@ (8001c5c <HAL_TIM_MspPostInit+0x188>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d11c      	bne.n	8001c04 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bca:	4b22      	ldr	r3, [pc, #136]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001bcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bce:	4a21      	ldr	r2, [pc, #132]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001bd6:	4b1f      	ldr	r3, [pc, #124]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001be2:	2340      	movs	r3, #64	@ 0x40
 8001be4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be6:	2302      	movs	r3, #2
 8001be8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bea:	2300      	movs	r3, #0
 8001bec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bf6:	f107 031c 	add.w	r3, r7, #28
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4818      	ldr	r0, [pc, #96]	@ (8001c60 <HAL_TIM_MspPostInit+0x18c>)
 8001bfe:	f000 fa9f 	bl	8002140 <HAL_GPIO_Init>
}
 8001c02:	e020      	b.n	8001c46 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM8)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a16      	ldr	r2, [pc, #88]	@ (8001c64 <HAL_TIM_MspPostInit+0x190>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d11b      	bne.n	8001c46 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	4b11      	ldr	r3, [pc, #68]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c12:	4a10      	ldr	r2, [pc, #64]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001c14:	f043 0304 	orr.w	r3, r3, #4
 8001c18:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001c54 <HAL_TIM_MspPostInit+0x180>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c26:	2340      	movs	r3, #64	@ 0x40
 8001c28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001c36:	2303      	movs	r3, #3
 8001c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3a:	f107 031c 	add.w	r3, r7, #28
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4809      	ldr	r0, [pc, #36]	@ (8001c68 <HAL_TIM_MspPostInit+0x194>)
 8001c42:	f000 fa7d 	bl	8002140 <HAL_GPIO_Init>
}
 8001c46:	bf00      	nop
 8001c48:	3730      	adds	r7, #48	@ 0x30
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40012c00 	.word	0x40012c00
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40000400 	.word	0x40000400
 8001c5c:	40000800 	.word	0x40000800
 8001c60:	48000400 	.word	0x48000400
 8001c64:	40013400 	.word	0x40013400
 8001c68:	48000800 	.word	0x48000800

08001c6c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b0ac      	sub	sp, #176	@ 0xb0
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2288      	movs	r2, #136	@ 0x88
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f006 fdd3 	bl	8008838 <memset>
  if(huart->Instance==USART2)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a25      	ldr	r2, [pc, #148]	@ (8001d2c <HAL_UART_MspInit+0xc0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d143      	bne.n	8001d24 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f001 fad3 	bl	8003254 <HAL_RCCEx_PeriphCLKConfig>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001cb4:	f7ff fe72 	bl	800199c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001cb8:	4b1d      	ldr	r3, [pc, #116]	@ (8001d30 <HAL_UART_MspInit+0xc4>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8001d30 <HAL_UART_MspInit+0xc4>)
 8001cbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <HAL_UART_MspInit+0xc4>)
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd0:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <HAL_UART_MspInit+0xc4>)
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd4:	4a16      	ldr	r2, [pc, #88]	@ (8001d30 <HAL_UART_MspInit+0xc4>)
 8001cd6:	f043 0301 	orr.w	r3, r3, #1
 8001cda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cdc:	4b14      	ldr	r3, [pc, #80]	@ (8001d30 <HAL_UART_MspInit+0xc4>)
 8001cde:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ce8:	230c      	movs	r3, #12
 8001cea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d00:	2307      	movs	r3, #7
 8001d02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d06:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d10:	f000 fa16 	bl	8002140 <HAL_GPIO_Init>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	2026      	movs	r0, #38	@ 0x26
 8001d1a:	f000 f9e7 	bl	80020ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001d1e:	2026      	movs	r0, #38	@ 0x26
 8001d20:	f000 fa00 	bl	8002124 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001d24:	bf00      	nop
 8001d26:	37b0      	adds	r7, #176	@ 0xb0
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40004400 	.word	0x40004400
 8001d30:	40021000 	.word	0x40021000

08001d34 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08e      	sub	sp, #56	@ 0x38
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001d42:	4b34      	ldr	r3, [pc, #208]	@ (8001e14 <HAL_InitTick+0xe0>)
 8001d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d46:	4a33      	ldr	r2, [pc, #204]	@ (8001e14 <HAL_InitTick+0xe0>)
 8001d48:	f043 0308 	orr.w	r3, r3, #8
 8001d4c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d4e:	4b31      	ldr	r3, [pc, #196]	@ (8001e14 <HAL_InitTick+0xe0>)
 8001d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d5a:	f107 0210 	add.w	r2, r7, #16
 8001d5e:	f107 0314 	add.w	r3, r7, #20
 8001d62:	4611      	mov	r1, r2
 8001d64:	4618      	mov	r0, r3
 8001d66:	f001 f9e3 	bl	8003130 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001d6a:	6a3b      	ldr	r3, [r7, #32]
 8001d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d103      	bne.n	8001d7c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d74:	f001 f9b0 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8001d78:	6378      	str	r0, [r7, #52]	@ 0x34
 8001d7a:	e004      	b.n	8001d86 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001d7c:	f001 f9ac 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8001d80:	4603      	mov	r3, r0
 8001d82:	005b      	lsls	r3, r3, #1
 8001d84:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d88:	4a23      	ldr	r2, [pc, #140]	@ (8001e18 <HAL_InitTick+0xe4>)
 8001d8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8e:	0c9b      	lsrs	r3, r3, #18
 8001d90:	3b01      	subs	r3, #1
 8001d92:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001d94:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <HAL_InitTick+0xe8>)
 8001d96:	4a22      	ldr	r2, [pc, #136]	@ (8001e20 <HAL_InitTick+0xec>)
 8001d98:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001d9a:	4b20      	ldr	r3, [pc, #128]	@ (8001e1c <HAL_InitTick+0xe8>)
 8001d9c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001da0:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001da2:	4a1e      	ldr	r2, [pc, #120]	@ (8001e1c <HAL_InitTick+0xe8>)
 8001da4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001da6:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001da8:	4b1c      	ldr	r3, [pc, #112]	@ (8001e1c <HAL_InitTick+0xe8>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dae:	4b1b      	ldr	r3, [pc, #108]	@ (8001e1c <HAL_InitTick+0xe8>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db4:	4b19      	ldr	r3, [pc, #100]	@ (8001e1c <HAL_InitTick+0xe8>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001dba:	4818      	ldr	r0, [pc, #96]	@ (8001e1c <HAL_InitTick+0xe8>)
 8001dbc:	f001 ff06 	bl	8003bcc <HAL_TIM_Base_Init>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001dc6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d11b      	bne.n	8001e06 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001dce:	4813      	ldr	r0, [pc, #76]	@ (8001e1c <HAL_InitTick+0xe8>)
 8001dd0:	f001 ff5e 	bl	8003c90 <HAL_TIM_Base_Start_IT>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001dda:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d111      	bne.n	8001e06 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001de2:	2032      	movs	r0, #50	@ 0x32
 8001de4:	f000 f99e 	bl	8002124 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b0f      	cmp	r3, #15
 8001dec:	d808      	bhi.n	8001e00 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001dee:	2200      	movs	r2, #0
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	2032      	movs	r0, #50	@ 0x32
 8001df4:	f000 f97a 	bl	80020ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001df8:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <HAL_InitTick+0xf0>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
 8001dfe:	e002      	b.n	8001e06 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001e06:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3738      	adds	r7, #56	@ 0x38
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	431bde83 	.word	0x431bde83
 8001e1c:	200002a4 	.word	0x200002a4
 8001e20:	40000c00 	.word	0x40000c00
 8001e24:	20000040 	.word	0x20000040

08001e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e2c:	bf00      	nop
 8001e2e:	e7fd      	b.n	8001e2c <NMI_Handler+0x4>

08001e30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e34:	bf00      	nop
 8001e36:	e7fd      	b.n	8001e34 <HardFault_Handler+0x4>

08001e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e3c:	bf00      	nop
 8001e3e:	e7fd      	b.n	8001e3c <MemManage_Handler+0x4>

08001e40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e44:	bf00      	nop
 8001e46:	e7fd      	b.n	8001e44 <BusFault_Handler+0x4>

08001e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e4c:	bf00      	nop
 8001e4e:	e7fd      	b.n	8001e4c <UsageFault_Handler+0x4>

08001e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e62:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e66:	f000 fb47 	bl	80024f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
	...

08001e70 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <TIM5_IRQHandler+0x10>)
 8001e76:	f002 f96f 	bl	8004158 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200002a4 	.word	0x200002a4

08001e84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <SystemInit+0x20>)
 8001e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <SystemInit+0x20>)
 8001e90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ea8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ee0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eac:	f7ff ffea 	bl	8001e84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb0:	480c      	ldr	r0, [pc, #48]	@ (8001ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eb2:	490d      	ldr	r1, [pc, #52]	@ (8001ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001eec <LoopForever+0xe>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb8:	e002      	b.n	8001ec0 <LoopCopyDataInit>

08001eba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ebc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ebe:	3304      	adds	r3, #4

08001ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ec2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec4:	d3f9      	bcc.n	8001eba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ec8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ef4 <LoopForever+0x16>)
  movs r3, #0
 8001eca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ecc:	e001      	b.n	8001ed2 <LoopFillZerobss>

08001ece <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ece:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed0:	3204      	adds	r2, #4

08001ed2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ed2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed4:	d3fb      	bcc.n	8001ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ed6:	f006 fcb7 	bl	8008848 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eda:	f7fe fb0f 	bl	80004fc <main>

08001ede <LoopForever>:

LoopForever:
    b LoopForever
 8001ede:	e7fe      	b.n	8001ede <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee8:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 8001eec:	08008a70 	.word	0x08008a70
  ldr r2, =_sbss
 8001ef0:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001ef4:	20001bfc 	.word	0x20001bfc

08001ef8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC1_2_IRQHandler>
	...

08001efc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f06:	4b0c      	ldr	r3, [pc, #48]	@ (8001f38 <HAL_Init+0x3c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a0b      	ldr	r2, [pc, #44]	@ (8001f38 <HAL_Init+0x3c>)
 8001f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f10:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f12:	2003      	movs	r0, #3
 8001f14:	f000 f8df 	bl	80020d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f18:	200f      	movs	r0, #15
 8001f1a:	f7ff ff0b 	bl	8001d34 <HAL_InitTick>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d002      	beq.n	8001f2a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	e001      	b.n	8001f2e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f2a:	f7ff fd3d 	bl	80019a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40022000 	.word	0x40022000

08001f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <HAL_IncTick+0x20>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_IncTick+0x24>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	4a04      	ldr	r2, [pc, #16]	@ (8001f60 <HAL_IncTick+0x24>)
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	bf00      	nop
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20000044 	.word	0x20000044
 8001f60:	200002f0 	.word	0x200002f0

08001f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return uwTick;
 8001f68:	4b03      	ldr	r3, [pc, #12]	@ (8001f78 <HAL_GetTick+0x14>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	200002f0 	.word	0x200002f0

08001f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f92:	68ba      	ldr	r2, [r7, #8]
 8001f94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f98:	4013      	ands	r3, r2
 8001f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fae:	4a04      	ldr	r2, [pc, #16]	@ (8001fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	60d3      	str	r3, [r2, #12]
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fc8:	4b04      	ldr	r3, [pc, #16]	@ (8001fdc <__NVIC_GetPriorityGrouping+0x18>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	f003 0307 	and.w	r3, r3, #7
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	db0b      	blt.n	800200a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ff2:	79fb      	ldrb	r3, [r7, #7]
 8001ff4:	f003 021f 	and.w	r2, r3, #31
 8001ff8:	4907      	ldr	r1, [pc, #28]	@ (8002018 <__NVIC_EnableIRQ+0x38>)
 8001ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffe:	095b      	lsrs	r3, r3, #5
 8002000:	2001      	movs	r0, #1
 8002002:	fa00 f202 	lsl.w	r2, r0, r2
 8002006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	e000e100 	.word	0xe000e100

0800201c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	6039      	str	r1, [r7, #0]
 8002026:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002028:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202c:	2b00      	cmp	r3, #0
 800202e:	db0a      	blt.n	8002046 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	490c      	ldr	r1, [pc, #48]	@ (8002068 <__NVIC_SetPriority+0x4c>)
 8002036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203a:	0112      	lsls	r2, r2, #4
 800203c:	b2d2      	uxtb	r2, r2
 800203e:	440b      	add	r3, r1
 8002040:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002044:	e00a      	b.n	800205c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	b2da      	uxtb	r2, r3
 800204a:	4908      	ldr	r1, [pc, #32]	@ (800206c <__NVIC_SetPriority+0x50>)
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	3b04      	subs	r3, #4
 8002054:	0112      	lsls	r2, r2, #4
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	440b      	add	r3, r1
 800205a:	761a      	strb	r2, [r3, #24]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000e100 	.word	0xe000e100
 800206c:	e000ed00 	.word	0xe000ed00

08002070 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002070:	b480      	push	{r7}
 8002072:	b089      	sub	sp, #36	@ 0x24
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	f1c3 0307 	rsb	r3, r3, #7
 800208a:	2b04      	cmp	r3, #4
 800208c:	bf28      	it	cs
 800208e:	2304      	movcs	r3, #4
 8002090:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3304      	adds	r3, #4
 8002096:	2b06      	cmp	r3, #6
 8002098:	d902      	bls.n	80020a0 <NVIC_EncodePriority+0x30>
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	3b03      	subs	r3, #3
 800209e:	e000      	b.n	80020a2 <NVIC_EncodePriority+0x32>
 80020a0:	2300      	movs	r3, #0
 80020a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	f04f 32ff 	mov.w	r2, #4294967295
 80020a8:	69bb      	ldr	r3, [r7, #24]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43da      	mvns	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	401a      	ands	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020b8:	f04f 31ff 	mov.w	r1, #4294967295
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	fa01 f303 	lsl.w	r3, r1, r3
 80020c2:	43d9      	mvns	r1, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c8:	4313      	orrs	r3, r2
         );
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3724      	adds	r7, #36	@ 0x24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b082      	sub	sp, #8
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7ff ff4c 	bl	8001f7c <__NVIC_SetPriorityGrouping>
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
 80020f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80020fe:	f7ff ff61 	bl	8001fc4 <__NVIC_GetPriorityGrouping>
 8002102:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002104:	687a      	ldr	r2, [r7, #4]
 8002106:	68b9      	ldr	r1, [r7, #8]
 8002108:	6978      	ldr	r0, [r7, #20]
 800210a:	f7ff ffb1 	bl	8002070 <NVIC_EncodePriority>
 800210e:	4602      	mov	r2, r0
 8002110:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff ff80 	bl	800201c <__NVIC_SetPriority>
}
 800211c:	bf00      	nop
 800211e:	3718      	adds	r7, #24
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800212e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff54 	bl	8001fe0 <__NVIC_EnableIRQ>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800214e:	e17f      	b.n	8002450 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2101      	movs	r1, #1
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	4013      	ands	r3, r2
 800215e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	f000 8171 	beq.w	800244a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	2b01      	cmp	r3, #1
 8002172:	d005      	beq.n	8002180 <HAL_GPIO_Init+0x40>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d130      	bne.n	80021e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	2203      	movs	r2, #3
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4013      	ands	r3, r2
 8002196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021b6:	2201      	movs	r2, #1
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4013      	ands	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	091b      	lsrs	r3, r3, #4
 80021cc:	f003 0201 	and.w	r2, r3, #1
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d118      	bne.n	8002220 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021f4:	2201      	movs	r2, #1
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	43db      	mvns	r3, r3
 80021fe:	693a      	ldr	r2, [r7, #16]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	08db      	lsrs	r3, r3, #3
 800220a:	f003 0201 	and.w	r2, r3, #1
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4313      	orrs	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b03      	cmp	r3, #3
 800222a:	d017      	beq.n	800225c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	2203      	movs	r2, #3
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	693a      	ldr	r2, [r7, #16]
 800225a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f003 0303 	and.w	r3, r3, #3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d123      	bne.n	80022b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	08da      	lsrs	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3208      	adds	r2, #8
 8002270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002274:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	f003 0307 	and.w	r3, r3, #7
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	220f      	movs	r2, #15
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4013      	ands	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 0307 	and.w	r3, r3, #7
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	08da      	lsrs	r2, r3, #3
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3208      	adds	r2, #8
 80022aa:	6939      	ldr	r1, [r7, #16]
 80022ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	2203      	movs	r2, #3
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	43db      	mvns	r3, r3
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	4013      	ands	r3, r2
 80022c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 0203 	and.w	r2, r3, #3
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80ac 	beq.w	800244a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002470 <HAL_GPIO_Init+0x330>)
 80022f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80022f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002470 <HAL_GPIO_Init+0x330>)
 80022f8:	f043 0301 	orr.w	r3, r3, #1
 80022fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80022fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002470 <HAL_GPIO_Init+0x330>)
 8002300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800230a:	4a5a      	ldr	r2, [pc, #360]	@ (8002474 <HAL_GPIO_Init+0x334>)
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	089b      	lsrs	r3, r3, #2
 8002310:	3302      	adds	r3, #2
 8002312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002316:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	220f      	movs	r2, #15
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4013      	ands	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002334:	d025      	beq.n	8002382 <HAL_GPIO_Init+0x242>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a4f      	ldr	r2, [pc, #316]	@ (8002478 <HAL_GPIO_Init+0x338>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01f      	beq.n	800237e <HAL_GPIO_Init+0x23e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a4e      	ldr	r2, [pc, #312]	@ (800247c <HAL_GPIO_Init+0x33c>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d019      	beq.n	800237a <HAL_GPIO_Init+0x23a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a4d      	ldr	r2, [pc, #308]	@ (8002480 <HAL_GPIO_Init+0x340>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d013      	beq.n	8002376 <HAL_GPIO_Init+0x236>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a4c      	ldr	r2, [pc, #304]	@ (8002484 <HAL_GPIO_Init+0x344>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d00d      	beq.n	8002372 <HAL_GPIO_Init+0x232>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a4b      	ldr	r2, [pc, #300]	@ (8002488 <HAL_GPIO_Init+0x348>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d007      	beq.n	800236e <HAL_GPIO_Init+0x22e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a4a      	ldr	r2, [pc, #296]	@ (800248c <HAL_GPIO_Init+0x34c>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d101      	bne.n	800236a <HAL_GPIO_Init+0x22a>
 8002366:	2306      	movs	r3, #6
 8002368:	e00c      	b.n	8002384 <HAL_GPIO_Init+0x244>
 800236a:	2307      	movs	r3, #7
 800236c:	e00a      	b.n	8002384 <HAL_GPIO_Init+0x244>
 800236e:	2305      	movs	r3, #5
 8002370:	e008      	b.n	8002384 <HAL_GPIO_Init+0x244>
 8002372:	2304      	movs	r3, #4
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x244>
 8002376:	2303      	movs	r3, #3
 8002378:	e004      	b.n	8002384 <HAL_GPIO_Init+0x244>
 800237a:	2302      	movs	r3, #2
 800237c:	e002      	b.n	8002384 <HAL_GPIO_Init+0x244>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_GPIO_Init+0x244>
 8002382:	2300      	movs	r3, #0
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	f002 0203 	and.w	r2, r2, #3
 800238a:	0092      	lsls	r2, r2, #2
 800238c:	4093      	lsls	r3, r2
 800238e:	693a      	ldr	r2, [r7, #16]
 8002390:	4313      	orrs	r3, r2
 8002392:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002394:	4937      	ldr	r1, [pc, #220]	@ (8002474 <HAL_GPIO_Init+0x334>)
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	089b      	lsrs	r3, r3, #2
 800239a:	3302      	adds	r3, #2
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023a2:	4b3b      	ldr	r3, [pc, #236]	@ (8002490 <HAL_GPIO_Init+0x350>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023c6:	4a32      	ldr	r2, [pc, #200]	@ (8002490 <HAL_GPIO_Init+0x350>)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023cc:	4b30      	ldr	r3, [pc, #192]	@ (8002490 <HAL_GPIO_Init+0x350>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023f0:	4a27      	ldr	r2, [pc, #156]	@ (8002490 <HAL_GPIO_Init+0x350>)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023f6:	4b26      	ldr	r3, [pc, #152]	@ (8002490 <HAL_GPIO_Init+0x350>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	43db      	mvns	r3, r3
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4013      	ands	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002412:	693a      	ldr	r2, [r7, #16]
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800241a:	4a1d      	ldr	r2, [pc, #116]	@ (8002490 <HAL_GPIO_Init+0x350>)
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002420:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <HAL_GPIO_Init+0x350>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	43db      	mvns	r3, r3
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800243c:	693a      	ldr	r2, [r7, #16]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	4313      	orrs	r3, r2
 8002442:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002444:	4a12      	ldr	r2, [pc, #72]	@ (8002490 <HAL_GPIO_Init+0x350>)
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	3301      	adds	r3, #1
 800244e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fa22 f303 	lsr.w	r3, r2, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	f47f ae78 	bne.w	8002150 <HAL_GPIO_Init+0x10>
  }
}
 8002460:	bf00      	nop
 8002462:	bf00      	nop
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	40021000 	.word	0x40021000
 8002474:	40010000 	.word	0x40010000
 8002478:	48000400 	.word	0x48000400
 800247c:	48000800 	.word	0x48000800
 8002480:	48000c00 	.word	0x48000c00
 8002484:	48001000 	.word	0x48001000
 8002488:	48001400 	.word	0x48001400
 800248c:	48001800 	.word	0x48001800
 8002490:	40010400 	.word	0x40010400

08002494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	807b      	strh	r3, [r7, #2]
 80024a0:	4613      	mov	r3, r2
 80024a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024a4:	787b      	ldrb	r3, [r7, #1]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024aa:	887a      	ldrh	r2, [r7, #2]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024b2:	887a      	ldrh	r2, [r7, #2]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	4013      	ands	r3, r2
 80024dc:	041a      	lsls	r2, r3, #16
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43d9      	mvns	r1, r3
 80024e2:	887b      	ldrh	r3, [r7, #2]
 80024e4:	400b      	ands	r3, r1
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	619a      	str	r2, [r3, #24]
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b082      	sub	sp, #8
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002502:	4b08      	ldr	r3, [pc, #32]	@ (8002524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002504:	695a      	ldr	r2, [r3, #20]
 8002506:	88fb      	ldrh	r3, [r7, #6]
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d006      	beq.n	800251c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800250e:	4a05      	ldr	r2, [pc, #20]	@ (8002524 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f910 	bl	800173c <HAL_GPIO_EXTI_Callback>
  }
}
 800251c:	bf00      	nop
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40010400 	.word	0x40010400

08002528 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800252c:	4b04      	ldr	r3, [pc, #16]	@ (8002540 <HAL_PWREx_GetVoltageRange+0x18>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40007000 	.word	0x40007000

08002544 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002552:	d130      	bne.n	80025b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002554:	4b23      	ldr	r3, [pc, #140]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800255c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002560:	d038      	beq.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002562:	4b20      	ldr	r3, [pc, #128]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800256a:	4a1e      	ldr	r2, [pc, #120]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800256c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002570:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002572:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2232      	movs	r2, #50	@ 0x32
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	4a1b      	ldr	r2, [pc, #108]	@ (80025ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0c9b      	lsrs	r3, r3, #18
 8002584:	3301      	adds	r3, #1
 8002586:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002588:	e002      	b.n	8002590 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	3b01      	subs	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002590:	4b14      	ldr	r3, [pc, #80]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002598:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800259c:	d102      	bne.n	80025a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f2      	bne.n	800258a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025a4:	4b0f      	ldr	r3, [pc, #60]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025b0:	d110      	bne.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e00f      	b.n	80025d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025b6:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c2:	d007      	beq.n	80025d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80025c4:	4b07      	ldr	r3, [pc, #28]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025cc:	4a05      	ldr	r2, [pc, #20]	@ (80025e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3714      	adds	r7, #20
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	40007000 	.word	0x40007000
 80025e8:	2000003c 	.word	0x2000003c
 80025ec:	431bde83 	.word	0x431bde83

080025f0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e3ca      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002602:	4b97      	ldr	r3, [pc, #604]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800260c:	4b94      	ldr	r3, [pc, #592]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0310 	and.w	r3, r3, #16
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 80e4 	beq.w	80027ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d007      	beq.n	800263a <HAL_RCC_OscConfig+0x4a>
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	2b0c      	cmp	r3, #12
 800262e:	f040 808b 	bne.w	8002748 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	2b01      	cmp	r3, #1
 8002636:	f040 8087 	bne.w	8002748 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800263a:	4b89      	ldr	r3, [pc, #548]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x62>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e3a2      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a1a      	ldr	r2, [r3, #32]
 8002656:	4b82      	ldr	r3, [pc, #520]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0308 	and.w	r3, r3, #8
 800265e:	2b00      	cmp	r3, #0
 8002660:	d004      	beq.n	800266c <HAL_RCC_OscConfig+0x7c>
 8002662:	4b7f      	ldr	r3, [pc, #508]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800266a:	e005      	b.n	8002678 <HAL_RCC_OscConfig+0x88>
 800266c:	4b7c      	ldr	r3, [pc, #496]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800266e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002672:	091b      	lsrs	r3, r3, #4
 8002674:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002678:	4293      	cmp	r3, r2
 800267a:	d223      	bcs.n	80026c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4618      	mov	r0, r3
 8002682:	f000 fd87 	bl	8003194 <RCC_SetFlashLatencyFromMSIRange>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e383      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002690:	4b73      	ldr	r3, [pc, #460]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a72      	ldr	r2, [pc, #456]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002696:	f043 0308 	orr.w	r3, r3, #8
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b70      	ldr	r3, [pc, #448]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	496d      	ldr	r1, [pc, #436]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ae:	4b6c      	ldr	r3, [pc, #432]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	4968      	ldr	r1, [pc, #416]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
 80026c2:	e025      	b.n	8002710 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c4:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a65      	ldr	r2, [pc, #404]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026ca:	f043 0308 	orr.w	r3, r3, #8
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b63      	ldr	r3, [pc, #396]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	4960      	ldr	r1, [pc, #384]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e2:	4b5f      	ldr	r3, [pc, #380]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	495b      	ldr	r1, [pc, #364]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d109      	bne.n	8002710 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a1b      	ldr	r3, [r3, #32]
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fd47 	bl	8003194 <RCC_SetFlashLatencyFromMSIRange>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e343      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002710:	f000 fc4a 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002714:	4602      	mov	r2, r0
 8002716:	4b52      	ldr	r3, [pc, #328]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	f003 030f 	and.w	r3, r3, #15
 8002720:	4950      	ldr	r1, [pc, #320]	@ (8002864 <HAL_RCC_OscConfig+0x274>)
 8002722:	5ccb      	ldrb	r3, [r1, r3]
 8002724:	f003 031f 	and.w	r3, r3, #31
 8002728:	fa22 f303 	lsr.w	r3, r2, r3
 800272c:	4a4e      	ldr	r2, [pc, #312]	@ (8002868 <HAL_RCC_OscConfig+0x278>)
 800272e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002730:	4b4e      	ldr	r3, [pc, #312]	@ (800286c <HAL_RCC_OscConfig+0x27c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fafd 	bl	8001d34 <HAL_InitTick>
 800273a:	4603      	mov	r3, r0
 800273c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d052      	beq.n	80027ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002744:	7bfb      	ldrb	r3, [r7, #15]
 8002746:	e327      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d032      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002750:	4b43      	ldr	r3, [pc, #268]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a42      	ldr	r2, [pc, #264]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800275c:	f7ff fc02 	bl	8001f64 <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002764:	f7ff fbfe 	bl	8001f64 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e310      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002776:	4b3a      	ldr	r3, [pc, #232]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002782:	4b37      	ldr	r3, [pc, #220]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a36      	ldr	r2, [pc, #216]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002788:	f043 0308 	orr.w	r3, r3, #8
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	4b34      	ldr	r3, [pc, #208]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4931      	ldr	r1, [pc, #196]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027a0:	4b2f      	ldr	r3, [pc, #188]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	492c      	ldr	r1, [pc, #176]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e01a      	b.n	80027ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027b6:	4b2a      	ldr	r3, [pc, #168]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a29      	ldr	r2, [pc, #164]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80027c2:	f7ff fbcf 	bl	8001f64 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027ca:	f7ff fbcb 	bl	8001f64 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e2dd      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80027dc:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0302 	and.w	r3, r3, #2
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x1da>
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d074      	beq.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d005      	beq.n	800280a <HAL_RCC_OscConfig+0x21a>
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	2b0c      	cmp	r3, #12
 8002802:	d10e      	bne.n	8002822 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	2b03      	cmp	r3, #3
 8002808:	d10b      	bne.n	8002822 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d064      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2f0>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d160      	bne.n	80028e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800281e:	2301      	movs	r3, #1
 8002820:	e2ba      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800282a:	d106      	bne.n	800283a <HAL_RCC_OscConfig+0x24a>
 800282c:	4b0c      	ldr	r3, [pc, #48]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a0b      	ldr	r2, [pc, #44]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002836:	6013      	str	r3, [r2, #0]
 8002838:	e026      	b.n	8002888 <HAL_RCC_OscConfig+0x298>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002842:	d115      	bne.n	8002870 <HAL_RCC_OscConfig+0x280>
 8002844:	4b06      	ldr	r3, [pc, #24]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a05      	ldr	r2, [pc, #20]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 800284a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800284e:	6013      	str	r3, [r2, #0]
 8002850:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a02      	ldr	r2, [pc, #8]	@ (8002860 <HAL_RCC_OscConfig+0x270>)
 8002856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	e014      	b.n	8002888 <HAL_RCC_OscConfig+0x298>
 800285e:	bf00      	nop
 8002860:	40021000 	.word	0x40021000
 8002864:	08008a18 	.word	0x08008a18
 8002868:	2000003c 	.word	0x2000003c
 800286c:	20000040 	.word	0x20000040
 8002870:	4ba0      	ldr	r3, [pc, #640]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a9f      	ldr	r2, [pc, #636]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b9d      	ldr	r3, [pc, #628]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a9c      	ldr	r2, [pc, #624]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002890:	f7ff fb68 	bl	8001f64 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002898:	f7ff fb64 	bl	8001f64 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	@ 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e276      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028aa:	4b92      	ldr	r3, [pc, #584]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x2a8>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b8:	f7ff fb54 	bl	8001f64 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c0:	f7ff fb50 	bl	8001f64 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	@ 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e262      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028d2:	4b88      	ldr	r3, [pc, #544]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2d0>
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d060      	beq.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	2b04      	cmp	r3, #4
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_OscConfig+0x310>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	2b0c      	cmp	r3, #12
 80028f8:	d119      	bne.n	800292e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d116      	bne.n	800292e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002900:	4b7c      	ldr	r3, [pc, #496]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_OscConfig+0x328>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d101      	bne.n	8002918 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e23f      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002918:	4b76      	ldr	r3, [pc, #472]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	061b      	lsls	r3, r3, #24
 8002926:	4973      	ldr	r1, [pc, #460]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002928:	4313      	orrs	r3, r2
 800292a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800292c:	e040      	b.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d023      	beq.n	800297e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002936:	4b6f      	ldr	r3, [pc, #444]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a6e      	ldr	r2, [pc, #440]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 800293c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002940:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002942:	f7ff fb0f 	bl	8001f64 <HAL_GetTick>
 8002946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002948:	e008      	b.n	800295c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294a:	f7ff fb0b 	bl	8001f64 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d901      	bls.n	800295c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e21d      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800295c:	4b65      	ldr	r3, [pc, #404]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0f0      	beq.n	800294a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002968:	4b62      	ldr	r3, [pc, #392]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	061b      	lsls	r3, r3, #24
 8002976:	495f      	ldr	r1, [pc, #380]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002978:	4313      	orrs	r3, r2
 800297a:	604b      	str	r3, [r1, #4]
 800297c:	e018      	b.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800297e:	4b5d      	ldr	r3, [pc, #372]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a5c      	ldr	r2, [pc, #368]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002988:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7ff faeb 	bl	8001f64 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002992:	f7ff fae7 	bl	8001f64 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1f9      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029a4:	4b53      	ldr	r3, [pc, #332]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1f0      	bne.n	8002992 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0308 	and.w	r3, r3, #8
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d03c      	beq.n	8002a36 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	695b      	ldr	r3, [r3, #20]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d01c      	beq.n	80029fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c4:	4b4b      	ldr	r3, [pc, #300]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029ca:	4a4a      	ldr	r2, [pc, #296]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029cc:	f043 0301 	orr.w	r3, r3, #1
 80029d0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d4:	f7ff fac6 	bl	8001f64 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029dc:	f7ff fac2 	bl	8001f64 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e1d4      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80029ee:	4b41      	ldr	r3, [pc, #260]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 80029f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d0ef      	beq.n	80029dc <HAL_RCC_OscConfig+0x3ec>
 80029fc:	e01b      	b.n	8002a36 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029fe:	4b3d      	ldr	r3, [pc, #244]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a04:	4a3b      	ldr	r2, [pc, #236]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a06:	f023 0301 	bic.w	r3, r3, #1
 8002a0a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0e:	f7ff faa9 	bl	8001f64 <HAL_GetTick>
 8002a12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a14:	e008      	b.n	8002a28 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a16:	f7ff faa5 	bl	8001f64 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e1b7      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a28:	4b32      	ldr	r3, [pc, #200]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1ef      	bne.n	8002a16 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0304 	and.w	r3, r3, #4
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 80a6 	beq.w	8002b90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a44:	2300      	movs	r3, #0
 8002a46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a48:	4b2a      	ldr	r3, [pc, #168]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10d      	bne.n	8002a70 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a54:	4b27      	ldr	r3, [pc, #156]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a58:	4a26      	ldr	r2, [pc, #152]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a60:	4b24      	ldr	r3, [pc, #144]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a70:	4b21      	ldr	r3, [pc, #132]	@ (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d118      	bne.n	8002aae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a1d      	ldr	r2, [pc, #116]	@ (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002a82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a86:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a88:	f7ff fa6c 	bl	8001f64 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a90:	f7ff fa68 	bl	8001f64 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e17a      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aa2:	4b15      	ldr	r3, [pc, #84]	@ (8002af8 <HAL_RCC_OscConfig+0x508>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d108      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4d8>
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002abc:	4a0d      	ldr	r2, [pc, #52]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ac6:	e029      	b.n	8002b1c <HAL_RCC_OscConfig+0x52c>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	2b05      	cmp	r3, #5
 8002ace:	d115      	bne.n	8002afc <HAL_RCC_OscConfig+0x50c>
 8002ad0:	4b08      	ldr	r3, [pc, #32]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ad6:	4a07      	ldr	r2, [pc, #28]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ad8:	f043 0304 	orr.w	r3, r3, #4
 8002adc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae6:	4a03      	ldr	r2, [pc, #12]	@ (8002af4 <HAL_RCC_OscConfig+0x504>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002af0:	e014      	b.n	8002b1c <HAL_RCC_OscConfig+0x52c>
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40007000 	.word	0x40007000
 8002afc:	4b9c      	ldr	r3, [pc, #624]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b02:	4a9b      	ldr	r2, [pc, #620]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b0c:	4b98      	ldr	r3, [pc, #608]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b12:	4a97      	ldr	r2, [pc, #604]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b14:	f023 0304 	bic.w	r3, r3, #4
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d016      	beq.n	8002b52 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7ff fa1e 	bl	8001f64 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7ff fa1a 	bl	8001f64 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e12a      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b42:	4b8b      	ldr	r3, [pc, #556]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0ed      	beq.n	8002b2c <HAL_RCC_OscConfig+0x53c>
 8002b50:	e015      	b.n	8002b7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b52:	f7ff fa07 	bl	8001f64 <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b58:	e00a      	b.n	8002b70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7ff fa03 	bl	8001f64 <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d901      	bls.n	8002b70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e113      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b70:	4b7f      	ldr	r3, [pc, #508]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b76:	f003 0302 	and.w	r3, r3, #2
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1ed      	bne.n	8002b5a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b7e:	7ffb      	ldrb	r3, [r7, #31]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d105      	bne.n	8002b90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b84:	4b7a      	ldr	r3, [pc, #488]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b88:	4a79      	ldr	r2, [pc, #484]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002b8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b8e:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f000 80fe 	beq.w	8002d96 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	f040 80d0 	bne.w	8002d44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002ba4:	4b72      	ldr	r3, [pc, #456]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f003 0203 	and.w	r2, r3, #3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d130      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d127      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d11f      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002be4:	2a07      	cmp	r2, #7
 8002be6:	bf14      	ite	ne
 8002be8:	2201      	movne	r2, #1
 8002bea:	2200      	moveq	r2, #0
 8002bec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d113      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bfc:	085b      	lsrs	r3, r3, #1
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d109      	bne.n	8002c1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	3b01      	subs	r3, #1
 8002c14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d06e      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	2b0c      	cmp	r3, #12
 8002c1e:	d069      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002c20:	4b53      	ldr	r3, [pc, #332]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d105      	bne.n	8002c38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002c2c:	4b50      	ldr	r3, [pc, #320]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e0ad      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002c3c:	4b4c      	ldr	r3, [pc, #304]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a4b      	ldr	r2, [pc, #300]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c48:	f7ff f98c 	bl	8001f64 <HAL_GetTick>
 8002c4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c4e:	e008      	b.n	8002c62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c50:	f7ff f988 	bl	8001f64 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d901      	bls.n	8002c62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	e09a      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c62:	4b43      	ldr	r3, [pc, #268]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1f0      	bne.n	8002c50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6e:	4b40      	ldr	r3, [pc, #256]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	4b40      	ldr	r3, [pc, #256]	@ (8002d74 <HAL_RCC_OscConfig+0x784>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	687a      	ldr	r2, [r7, #4]
 8002c78:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c7e:	3a01      	subs	r2, #1
 8002c80:	0112      	lsls	r2, r2, #4
 8002c82:	4311      	orrs	r1, r2
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c88:	0212      	lsls	r2, r2, #8
 8002c8a:	4311      	orrs	r1, r2
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c90:	0852      	lsrs	r2, r2, #1
 8002c92:	3a01      	subs	r2, #1
 8002c94:	0552      	lsls	r2, r2, #21
 8002c96:	4311      	orrs	r1, r2
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002c9c:	0852      	lsrs	r2, r2, #1
 8002c9e:	3a01      	subs	r2, #1
 8002ca0:	0652      	lsls	r2, r2, #25
 8002ca2:	4311      	orrs	r1, r2
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002ca8:	0912      	lsrs	r2, r2, #4
 8002caa:	0452      	lsls	r2, r2, #17
 8002cac:	430a      	orrs	r2, r1
 8002cae:	4930      	ldr	r1, [pc, #192]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002cb4:	4b2e      	ldr	r3, [pc, #184]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2d      	ldr	r2, [pc, #180]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	4a2a      	ldr	r2, [pc, #168]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002ccc:	f7ff f94a 	bl	8001f64 <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7ff f946 	bl	8001f64 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e058      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce6:	4b22      	ldr	r3, [pc, #136]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cf2:	e050      	b.n	8002d96 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e04f      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d148      	bne.n	8002d96 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002d04:	4b1a      	ldr	r3, [pc, #104]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a19      	ldr	r2, [pc, #100]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d10:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	4a16      	ldr	r2, [pc, #88]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d1c:	f7ff f922 	bl	8001f64 <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d24:	f7ff f91e 	bl	8001f64 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e030      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d36:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0x734>
 8002d42:	e028      	b.n	8002d96 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	2b0c      	cmp	r3, #12
 8002d48:	d023      	beq.n	8002d92 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d4a:	4b09      	ldr	r3, [pc, #36]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a08      	ldr	r2, [pc, #32]	@ (8002d70 <HAL_RCC_OscConfig+0x780>)
 8002d50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d56:	f7ff f905 	bl	8001f64 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	e00c      	b.n	8002d78 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d5e:	f7ff f901 	bl	8001f64 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d905      	bls.n	8002d78 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e013      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
 8002d70:	40021000 	.word	0x40021000
 8002d74:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d78:	4b09      	ldr	r3, [pc, #36]	@ (8002da0 <HAL_RCC_OscConfig+0x7b0>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ec      	bne.n	8002d5e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d84:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_RCC_OscConfig+0x7b0>)
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	4905      	ldr	r1, [pc, #20]	@ (8002da0 <HAL_RCC_OscConfig+0x7b0>)
 8002d8a:	4b06      	ldr	r3, [pc, #24]	@ (8002da4 <HAL_RCC_OscConfig+0x7b4>)
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60cb      	str	r3, [r1, #12]
 8002d90:	e001      	b.n	8002d96 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3720      	adds	r7, #32
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	feeefffc 	.word	0xfeeefffc

08002da8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0e7      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dbc:	4b75      	ldr	r3, [pc, #468]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0307 	and.w	r3, r3, #7
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d910      	bls.n	8002dec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dca:	4b72      	ldr	r3, [pc, #456]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f023 0207 	bic.w	r2, r3, #7
 8002dd2:	4970      	ldr	r1, [pc, #448]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dda:	4b6e      	ldr	r3, [pc, #440]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d001      	beq.n	8002dec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e0cf      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d010      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	4b66      	ldr	r3, [pc, #408]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d908      	bls.n	8002e1a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e08:	4b63      	ldr	r3, [pc, #396]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	4960      	ldr	r1, [pc, #384]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d04c      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	2b03      	cmp	r3, #3
 8002e2c:	d107      	bne.n	8002e3e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e2e:	4b5a      	ldr	r3, [pc, #360]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d121      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e0a6      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d107      	bne.n	8002e56 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e46:	4b54      	ldr	r3, [pc, #336]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d115      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e09a      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e5e:	4b4e      	ldr	r3, [pc, #312]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d109      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e08e      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6e:	4b4a      	ldr	r3, [pc, #296]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e086      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e7e:	4b46      	ldr	r3, [pc, #280]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f023 0203 	bic.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	4943      	ldr	r1, [pc, #268]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e90:	f7ff f868 	bl	8001f64 <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e96:	e00a      	b.n	8002eae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e98:	f7ff f864 	bl	8001f64 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e06e      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	4b3a      	ldr	r3, [pc, #232]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 020c 	and.w	r2, r3, #12
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d1eb      	bne.n	8002e98 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0302 	and.w	r3, r3, #2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	4b31      	ldr	r3, [pc, #196]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d208      	bcs.n	8002eee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b2e      	ldr	r3, [pc, #184]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	492b      	ldr	r1, [pc, #172]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eee:	4b29      	ldr	r3, [pc, #164]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d210      	bcs.n	8002f1e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efc:	4b25      	ldr	r3, [pc, #148]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 0207 	bic.w	r2, r3, #7
 8002f04:	4923      	ldr	r1, [pc, #140]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0c:	4b21      	ldr	r3, [pc, #132]	@ (8002f94 <HAL_RCC_ClockConfig+0x1ec>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d001      	beq.n	8002f1e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e036      	b.n	8002f8c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0304 	and.w	r3, r3, #4
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d008      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	4918      	ldr	r1, [pc, #96]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0308 	and.w	r3, r3, #8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f48:	4b13      	ldr	r3, [pc, #76]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	4910      	ldr	r1, [pc, #64]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f5c:	f000 f824 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8002f60:	4602      	mov	r2, r0
 8002f62:	4b0d      	ldr	r3, [pc, #52]	@ (8002f98 <HAL_RCC_ClockConfig+0x1f0>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	490b      	ldr	r1, [pc, #44]	@ (8002f9c <HAL_RCC_ClockConfig+0x1f4>)
 8002f6e:	5ccb      	ldrb	r3, [r1, r3]
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	4a09      	ldr	r2, [pc, #36]	@ (8002fa0 <HAL_RCC_ClockConfig+0x1f8>)
 8002f7a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f7c:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <HAL_RCC_ClockConfig+0x1fc>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe fed7 	bl	8001d34 <HAL_InitTick>
 8002f86:	4603      	mov	r3, r0
 8002f88:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3710      	adds	r7, #16
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	40022000 	.word	0x40022000
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	08008a18 	.word	0x08008a18
 8002fa0:	2000003c 	.word	0x2000003c
 8002fa4:	20000040 	.word	0x20000040

08002fa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	@ 0x24
 8002fac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61fb      	str	r3, [r7, #28]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fc0:	4b3b      	ldr	r3, [pc, #236]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	f003 0303 	and.w	r3, r3, #3
 8002fc8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d005      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x34>
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	2b0c      	cmp	r3, #12
 8002fd4:	d121      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d11e      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002fdc:	4b34      	ldr	r3, [pc, #208]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d107      	bne.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fe8:	4b31      	ldr	r3, [pc, #196]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	f003 030f 	and.w	r3, r3, #15
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e005      	b.n	8003004 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ff8:	4b2d      	ldr	r3, [pc, #180]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 030f 	and.w	r3, r3, #15
 8003002:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003004:	4a2b      	ldr	r2, [pc, #172]	@ (80030b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800300c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10d      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003018:	e00a      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d102      	bne.n	8003026 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003020:	4b25      	ldr	r3, [pc, #148]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003022:	61bb      	str	r3, [r7, #24]
 8003024:	e004      	b.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	2b08      	cmp	r3, #8
 800302a:	d101      	bne.n	8003030 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800302c:	4b23      	ldr	r3, [pc, #140]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x114>)
 800302e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b0c      	cmp	r3, #12
 8003034:	d134      	bne.n	80030a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003036:	4b1e      	ldr	r3, [pc, #120]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d003      	beq.n	800304e <HAL_RCC_GetSysClockFreq+0xa6>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	2b03      	cmp	r3, #3
 800304a:	d003      	beq.n	8003054 <HAL_RCC_GetSysClockFreq+0xac>
 800304c:	e005      	b.n	800305a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800304e:	4b1a      	ldr	r3, [pc, #104]	@ (80030b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8003050:	617b      	str	r3, [r7, #20]
      break;
 8003052:	e005      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003054:	4b19      	ldr	r3, [pc, #100]	@ (80030bc <HAL_RCC_GetSysClockFreq+0x114>)
 8003056:	617b      	str	r3, [r7, #20]
      break;
 8003058:	e002      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	617b      	str	r3, [r7, #20]
      break;
 800305e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003060:	4b13      	ldr	r3, [pc, #76]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	3301      	adds	r3, #1
 800306c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800306e:	4b10      	ldr	r3, [pc, #64]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	0a1b      	lsrs	r3, r3, #8
 8003074:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003078:	697a      	ldr	r2, [r7, #20]
 800307a:	fb03 f202 	mul.w	r2, r3, r2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	fbb2 f3f3 	udiv	r3, r2, r3
 8003084:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003086:	4b0a      	ldr	r3, [pc, #40]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	0e5b      	lsrs	r3, r3, #25
 800308c:	f003 0303 	and.w	r3, r3, #3
 8003090:	3301      	adds	r3, #1
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	fbb2 f3f3 	udiv	r3, r2, r3
 800309e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030a0:	69bb      	ldr	r3, [r7, #24]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3724      	adds	r7, #36	@ 0x24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40021000 	.word	0x40021000
 80030b4:	08008a30 	.word	0x08008a30
 80030b8:	00f42400 	.word	0x00f42400
 80030bc:	007a1200 	.word	0x007a1200

080030c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030c4:	4b03      	ldr	r3, [pc, #12]	@ (80030d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030c6:	681b      	ldr	r3, [r3, #0]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	2000003c 	.word	0x2000003c

080030d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030dc:	f7ff fff0 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 80030e0:	4602      	mov	r2, r0
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	0a1b      	lsrs	r3, r3, #8
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	4904      	ldr	r1, [pc, #16]	@ (8003100 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030ee:	5ccb      	ldrb	r3, [r1, r3]
 80030f0:	f003 031f 	and.w	r3, r3, #31
 80030f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	08008a28 	.word	0x08008a28

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003108:	f7ff ffda 	bl	80030c0 <HAL_RCC_GetHCLKFreq>
 800310c:	4602      	mov	r2, r0
 800310e:	4b06      	ldr	r3, [pc, #24]	@ (8003128 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	0adb      	lsrs	r3, r3, #11
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	4904      	ldr	r1, [pc, #16]	@ (800312c <HAL_RCC_GetPCLK2Freq+0x28>)
 800311a:	5ccb      	ldrb	r3, [r1, r3]
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003124:	4618      	mov	r0, r3
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	08008a28 	.word	0x08008a28

08003130 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	220f      	movs	r2, #15
 800313e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003140:	4b12      	ldr	r3, [pc, #72]	@ (800318c <HAL_RCC_GetClockConfig+0x5c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800314c:	4b0f      	ldr	r3, [pc, #60]	@ (800318c <HAL_RCC_GetClockConfig+0x5c>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003158:	4b0c      	ldr	r3, [pc, #48]	@ (800318c <HAL_RCC_GetClockConfig+0x5c>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003164:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_RCC_GetClockConfig+0x5c>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003172:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <HAL_RCC_GetClockConfig+0x60>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0207 	and.w	r2, r3, #7
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	601a      	str	r2, [r3, #0]
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	40022000 	.word	0x40022000

08003194 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80031a0:	4b2a      	ldr	r3, [pc, #168]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80031ac:	f7ff f9bc 	bl	8002528 <HAL_PWREx_GetVoltageRange>
 80031b0:	6178      	str	r0, [r7, #20]
 80031b2:	e014      	b.n	80031de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80031b4:	4b25      	ldr	r3, [pc, #148]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b8:	4a24      	ldr	r2, [pc, #144]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031be:	6593      	str	r3, [r2, #88]	@ 0x58
 80031c0:	4b22      	ldr	r3, [pc, #136]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031c8:	60fb      	str	r3, [r7, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031cc:	f7ff f9ac 	bl	8002528 <HAL_PWREx_GetVoltageRange>
 80031d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031d2:	4b1e      	ldr	r3, [pc, #120]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031d6:	4a1d      	ldr	r2, [pc, #116]	@ (800324c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031dc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031e4:	d10b      	bne.n	80031fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b80      	cmp	r3, #128	@ 0x80
 80031ea:	d919      	bls.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2ba0      	cmp	r3, #160	@ 0xa0
 80031f0:	d902      	bls.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031f2:	2302      	movs	r3, #2
 80031f4:	613b      	str	r3, [r7, #16]
 80031f6:	e013      	b.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031f8:	2301      	movs	r3, #1
 80031fa:	613b      	str	r3, [r7, #16]
 80031fc:	e010      	b.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2b80      	cmp	r3, #128	@ 0x80
 8003202:	d902      	bls.n	800320a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003204:	2303      	movs	r3, #3
 8003206:	613b      	str	r3, [r7, #16]
 8003208:	e00a      	b.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2b80      	cmp	r3, #128	@ 0x80
 800320e:	d102      	bne.n	8003216 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003210:	2302      	movs	r3, #2
 8003212:	613b      	str	r3, [r7, #16]
 8003214:	e004      	b.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b70      	cmp	r3, #112	@ 0x70
 800321a:	d101      	bne.n	8003220 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800321c:	2301      	movs	r3, #1
 800321e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003220:	4b0b      	ldr	r3, [pc, #44]	@ (8003250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f023 0207 	bic.w	r2, r3, #7
 8003228:	4909      	ldr	r1, [pc, #36]	@ (8003250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	4313      	orrs	r3, r2
 800322e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003230:	4b07      	ldr	r3, [pc, #28]	@ (8003250 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	429a      	cmp	r2, r3
 800323c:	d001      	beq.n	8003242 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e000      	b.n	8003244 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}
 800324c:	40021000 	.word	0x40021000
 8003250:	40022000 	.word	0x40022000

08003254 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b086      	sub	sp, #24
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800325c:	2300      	movs	r3, #0
 800325e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003260:	2300      	movs	r3, #0
 8003262:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800326c:	2b00      	cmp	r3, #0
 800326e:	d041      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003274:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003278:	d02a      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800327a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800327e:	d824      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003280:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003284:	d008      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003286:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800328a:	d81e      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x76>
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003294:	d010      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003296:	e018      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003298:	4b86      	ldr	r3, [pc, #536]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	4a85      	ldr	r2, [pc, #532]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032a2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032a4:	e015      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3304      	adds	r3, #4
 80032aa:	2100      	movs	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fabb 	bl	8003828 <RCCEx_PLLSAI1_Config>
 80032b2:	4603      	mov	r3, r0
 80032b4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032b6:	e00c      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3320      	adds	r3, #32
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fba6 	bl	8003a10 <RCCEx_PLLSAI2_Config>
 80032c4:	4603      	mov	r3, r0
 80032c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c8:	e003      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	74fb      	strb	r3, [r7, #19]
      break;
 80032ce:	e000      	b.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80032d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032d2:	7cfb      	ldrb	r3, [r7, #19]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032d8:	4b76      	ldr	r3, [pc, #472]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032de:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032e6:	4973      	ldr	r1, [pc, #460]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032ee:	e001      	b.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f0:	7cfb      	ldrb	r3, [r7, #19]
 80032f2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d041      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003304:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003308:	d02a      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800330a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800330e:	d824      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003310:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003314:	d008      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800331a:	d81e      	bhi.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d00a      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003320:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003324:	d010      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003326:	e018      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003328:	4b62      	ldr	r3, [pc, #392]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	4a61      	ldr	r2, [pc, #388]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003332:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003334:	e015      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3304      	adds	r3, #4
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fa73 	bl	8003828 <RCCEx_PLLSAI1_Config>
 8003342:	4603      	mov	r3, r0
 8003344:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003346:	e00c      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	3320      	adds	r3, #32
 800334c:	2100      	movs	r1, #0
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fb5e 	bl	8003a10 <RCCEx_PLLSAI2_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003358:	e003      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	74fb      	strb	r3, [r7, #19]
      break;
 800335e:	e000      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003360:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10b      	bne.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003368:	4b52      	ldr	r3, [pc, #328]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800336a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800336e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003376:	494f      	ldr	r1, [pc, #316]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800337e:	e001      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338c:	2b00      	cmp	r3, #0
 800338e:	f000 80a0 	beq.w	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003392:	2300      	movs	r3, #0
 8003394:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003396:	4b47      	ldr	r3, [pc, #284]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80033a2:	2301      	movs	r3, #1
 80033a4:	e000      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80033a6:	2300      	movs	r3, #0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ac:	4b41      	ldr	r3, [pc, #260]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b0:	4a40      	ldr	r2, [pc, #256]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033b8:	4b3e      	ldr	r3, [pc, #248]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	60bb      	str	r3, [r7, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c4:	2301      	movs	r3, #1
 80033c6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c8:	4b3b      	ldr	r3, [pc, #236]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a3a      	ldr	r2, [pc, #232]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033d4:	f7fe fdc6 	bl	8001f64 <HAL_GetTick>
 80033d8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033da:	e009      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033dc:	f7fe fdc2 	bl	8001f64 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b02      	cmp	r3, #2
 80033e8:	d902      	bls.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	74fb      	strb	r3, [r7, #19]
        break;
 80033ee:	e005      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033f0:	4b31      	ldr	r3, [pc, #196]	@ (80034b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ef      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80033fc:	7cfb      	ldrb	r3, [r7, #19]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d15c      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003402:	4b2c      	ldr	r3, [pc, #176]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003404:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003408:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800340c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01f      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800341a:	697a      	ldr	r2, [r7, #20]
 800341c:	429a      	cmp	r2, r3
 800341e:	d019      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003420:	4b24      	ldr	r3, [pc, #144]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003422:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003426:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800342a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800342c:	4b21      	ldr	r3, [pc, #132]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800342e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003432:	4a20      	ldr	r2, [pc, #128]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800343c:	4b1d      	ldr	r3, [pc, #116]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800343e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003442:	4a1c      	ldr	r2, [pc, #112]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800344c:	4a19      	ldr	r2, [pc, #100]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d016      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800345e:	f7fe fd81 	bl	8001f64 <HAL_GetTick>
 8003462:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003464:	e00b      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003466:	f7fe fd7d 	bl	8001f64 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003474:	4293      	cmp	r3, r2
 8003476:	d902      	bls.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	74fb      	strb	r3, [r7, #19]
            break;
 800347c:	e006      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800347e:	4b0d      	ldr	r3, [pc, #52]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0ec      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10c      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003492:	4b08      	ldr	r3, [pc, #32]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003498:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80034a2:	4904      	ldr	r1, [pc, #16]	@ (80034b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80034aa:	e009      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ac:	7cfb      	ldrb	r3, [r7, #19]
 80034ae:	74bb      	strb	r3, [r7, #18]
 80034b0:	e006      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80034b2:	bf00      	nop
 80034b4:	40021000 	.word	0x40021000
 80034b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034bc:	7cfb      	ldrb	r3, [r7, #19]
 80034be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034c0:	7c7b      	ldrb	r3, [r7, #17]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d105      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034c6:	4b9e      	ldr	r3, [pc, #632]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ca:	4a9d      	ldr	r2, [pc, #628]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034d0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00a      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034de:	4b98      	ldr	r3, [pc, #608]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034e4:	f023 0203 	bic.w	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ec:	4994      	ldr	r1, [pc, #592]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00a      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003500:	4b8f      	ldr	r3, [pc, #572]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003506:	f023 020c 	bic.w	r2, r3, #12
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350e:	498c      	ldr	r1, [pc, #560]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003510:	4313      	orrs	r3, r2
 8003512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00a      	beq.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003522:	4b87      	ldr	r3, [pc, #540]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003528:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003530:	4983      	ldr	r1, [pc, #524]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d00a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003544:	4b7e      	ldr	r3, [pc, #504]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003546:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800354a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003552:	497b      	ldr	r1, [pc, #492]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d00a      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003566:	4b76      	ldr	r3, [pc, #472]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003574:	4972      	ldr	r1, [pc, #456]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003576:	4313      	orrs	r3, r2
 8003578:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00a      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003588:	4b6d      	ldr	r3, [pc, #436]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800358a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800358e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003596:	496a      	ldr	r1, [pc, #424]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003598:	4313      	orrs	r3, r2
 800359a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00a      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035aa:	4b65      	ldr	r3, [pc, #404]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b8:	4961      	ldr	r1, [pc, #388]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035cc:	4b5c      	ldr	r3, [pc, #368]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035da:	4959      	ldr	r1, [pc, #356]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00a      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035ee:	4b54      	ldr	r3, [pc, #336]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035f4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fc:	4950      	ldr	r1, [pc, #320]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00a      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003610:	4b4b      	ldr	r3, [pc, #300]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003616:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361e:	4948      	ldr	r1, [pc, #288]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003620:	4313      	orrs	r3, r2
 8003622:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00a      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003632:	4b43      	ldr	r3, [pc, #268]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003634:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003638:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003640:	493f      	ldr	r1, [pc, #252]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003642:	4313      	orrs	r3, r2
 8003644:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d028      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003654:	4b3a      	ldr	r3, [pc, #232]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800365a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003662:	4937      	ldr	r1, [pc, #220]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003664:	4313      	orrs	r3, r2
 8003666:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800366e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003672:	d106      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003674:	4b32      	ldr	r3, [pc, #200]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	4a31      	ldr	r2, [pc, #196]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800367a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800367e:	60d3      	str	r3, [r2, #12]
 8003680:	e011      	b.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003686:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800368a:	d10c      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3304      	adds	r3, #4
 8003690:	2101      	movs	r1, #1
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f8c8 	bl	8003828 <RCCEx_PLLSAI1_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800369c:	7cfb      	ldrb	r3, [r7, #19]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80036a2:	7cfb      	ldrb	r3, [r7, #19]
 80036a4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d028      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036b2:	4b23      	ldr	r3, [pc, #140]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036b8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036c0:	491f      	ldr	r1, [pc, #124]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036d0:	d106      	bne.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036dc:	60d3      	str	r3, [r2, #12]
 80036de:	e011      	b.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036e8:	d10c      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	2101      	movs	r1, #1
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 f899 	bl	8003828 <RCCEx_PLLSAI1_Config>
 80036f6:	4603      	mov	r3, r0
 80036f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036fa:	7cfb      	ldrb	r3, [r7, #19]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003700:	7cfb      	ldrb	r3, [r7, #19]
 8003702:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d02b      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003710:	4b0b      	ldr	r3, [pc, #44]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003712:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003716:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800371e:	4908      	ldr	r1, [pc, #32]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	4313      	orrs	r3, r2
 8003722:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800372a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800372e:	d109      	bne.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003730:	4b03      	ldr	r3, [pc, #12]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	4a02      	ldr	r2, [pc, #8]	@ (8003740 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003736:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800373a:	60d3      	str	r3, [r2, #12]
 800373c:	e014      	b.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003748:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800374c:	d10c      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3304      	adds	r3, #4
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f000 f867 	bl	8003828 <RCCEx_PLLSAI1_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800375e:	7cfb      	ldrb	r3, [r7, #19]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d02f      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003774:	4b2b      	ldr	r3, [pc, #172]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800377a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003782:	4928      	ldr	r1, [pc, #160]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003784:	4313      	orrs	r3, r2
 8003786:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800378e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003792:	d10d      	bne.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	3304      	adds	r3, #4
 8003798:	2102      	movs	r1, #2
 800379a:	4618      	mov	r0, r3
 800379c:	f000 f844 	bl	8003828 <RCCEx_PLLSAI1_Config>
 80037a0:	4603      	mov	r3, r0
 80037a2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037a4:	7cfb      	ldrb	r3, [r7, #19]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d014      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037aa:	7cfb      	ldrb	r3, [r7, #19]
 80037ac:	74bb      	strb	r3, [r7, #18]
 80037ae:	e011      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037b8:	d10c      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3320      	adds	r3, #32
 80037be:	2102      	movs	r1, #2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 f925 	bl	8003a10 <RCCEx_PLLSAI2_Config>
 80037c6:	4603      	mov	r3, r0
 80037c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ca:	7cfb      	ldrb	r3, [r7, #19]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00a      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037e0:	4b10      	ldr	r3, [pc, #64]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037e6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037ee:	490d      	ldr	r1, [pc, #52]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037f0:	4313      	orrs	r3, r2
 80037f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003802:	4b08      	ldr	r3, [pc, #32]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003808:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003812:	4904      	ldr	r1, [pc, #16]	@ (8003824 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003814:	4313      	orrs	r3, r2
 8003816:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800381a:	7cbb      	ldrb	r3, [r7, #18]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3718      	adds	r7, #24
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	40021000 	.word	0x40021000

08003828 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003832:	2300      	movs	r3, #0
 8003834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003836:	4b75      	ldr	r3, [pc, #468]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d018      	beq.n	8003874 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003842:	4b72      	ldr	r3, [pc, #456]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f003 0203 	and.w	r2, r3, #3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	429a      	cmp	r2, r3
 8003850:	d10d      	bne.n	800386e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
       ||
 8003856:	2b00      	cmp	r3, #0
 8003858:	d009      	beq.n	800386e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800385a:	4b6c      	ldr	r3, [pc, #432]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	091b      	lsrs	r3, r3, #4
 8003860:	f003 0307 	and.w	r3, r3, #7
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
       ||
 800386a:	429a      	cmp	r2, r3
 800386c:	d047      	beq.n	80038fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	e044      	b.n	80038fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b03      	cmp	r3, #3
 800387a:	d018      	beq.n	80038ae <RCCEx_PLLSAI1_Config+0x86>
 800387c:	2b03      	cmp	r3, #3
 800387e:	d825      	bhi.n	80038cc <RCCEx_PLLSAI1_Config+0xa4>
 8003880:	2b01      	cmp	r3, #1
 8003882:	d002      	beq.n	800388a <RCCEx_PLLSAI1_Config+0x62>
 8003884:	2b02      	cmp	r3, #2
 8003886:	d009      	beq.n	800389c <RCCEx_PLLSAI1_Config+0x74>
 8003888:	e020      	b.n	80038cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800388a:	4b60      	ldr	r3, [pc, #384]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d11d      	bne.n	80038d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800389a:	e01a      	b.n	80038d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800389c:	4b5b      	ldr	r3, [pc, #364]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d116      	bne.n	80038d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038ac:	e013      	b.n	80038d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038ae:	4b57      	ldr	r3, [pc, #348]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038ba:	4b54      	ldr	r3, [pc, #336]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038ca:	e006      	b.n	80038da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
      break;
 80038d0:	e004      	b.n	80038dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038d2:	bf00      	nop
 80038d4:	e002      	b.n	80038dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038d6:	bf00      	nop
 80038d8:	e000      	b.n	80038dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038da:	bf00      	nop
    }

    if(status == HAL_OK)
 80038dc:	7bfb      	ldrb	r3, [r7, #15]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10d      	bne.n	80038fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038e2:	4b4a      	ldr	r3, [pc, #296]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6819      	ldr	r1, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	011b      	lsls	r3, r3, #4
 80038f6:	430b      	orrs	r3, r1
 80038f8:	4944      	ldr	r1, [pc, #272]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038fe:	7bfb      	ldrb	r3, [r7, #15]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d17d      	bne.n	8003a00 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003904:	4b41      	ldr	r3, [pc, #260]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a40      	ldr	r2, [pc, #256]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800390a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800390e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003910:	f7fe fb28 	bl	8001f64 <HAL_GetTick>
 8003914:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003916:	e009      	b.n	800392c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003918:	f7fe fb24 	bl	8001f64 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b02      	cmp	r3, #2
 8003924:	d902      	bls.n	800392c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	73fb      	strb	r3, [r7, #15]
        break;
 800392a:	e005      	b.n	8003938 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800392c:	4b37      	ldr	r3, [pc, #220]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1ef      	bne.n	8003918 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003938:	7bfb      	ldrb	r3, [r7, #15]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d160      	bne.n	8003a00 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d111      	bne.n	8003968 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003944:	4b31      	ldr	r3, [pc, #196]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003946:	691b      	ldr	r3, [r3, #16]
 8003948:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800394c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6892      	ldr	r2, [r2, #8]
 8003954:	0211      	lsls	r1, r2, #8
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68d2      	ldr	r2, [r2, #12]
 800395a:	0912      	lsrs	r2, r2, #4
 800395c:	0452      	lsls	r2, r2, #17
 800395e:	430a      	orrs	r2, r1
 8003960:	492a      	ldr	r1, [pc, #168]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003962:	4313      	orrs	r3, r2
 8003964:	610b      	str	r3, [r1, #16]
 8003966:	e027      	b.n	80039b8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d112      	bne.n	8003994 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800396e:	4b27      	ldr	r3, [pc, #156]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003976:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6892      	ldr	r2, [r2, #8]
 800397e:	0211      	lsls	r1, r2, #8
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6912      	ldr	r2, [r2, #16]
 8003984:	0852      	lsrs	r2, r2, #1
 8003986:	3a01      	subs	r2, #1
 8003988:	0552      	lsls	r2, r2, #21
 800398a:	430a      	orrs	r2, r1
 800398c:	491f      	ldr	r1, [pc, #124]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 800398e:	4313      	orrs	r3, r2
 8003990:	610b      	str	r3, [r1, #16]
 8003992:	e011      	b.n	80039b8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003994:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800399c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	6892      	ldr	r2, [r2, #8]
 80039a4:	0211      	lsls	r1, r2, #8
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6952      	ldr	r2, [r2, #20]
 80039aa:	0852      	lsrs	r2, r2, #1
 80039ac:	3a01      	subs	r2, #1
 80039ae:	0652      	lsls	r2, r2, #25
 80039b0:	430a      	orrs	r2, r1
 80039b2:	4916      	ldr	r1, [pc, #88]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039b8:	4b14      	ldr	r3, [pc, #80]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a13      	ldr	r2, [pc, #76]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80039c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c4:	f7fe face 	bl	8001f64 <HAL_GetTick>
 80039c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039ca:	e009      	b.n	80039e0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039cc:	f7fe faca 	bl	8001f64 <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d902      	bls.n	80039e0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	73fb      	strb	r3, [r7, #15]
          break;
 80039de:	e005      	b.n	80039ec <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039e0:	4b0a      	ldr	r3, [pc, #40]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d0ef      	beq.n	80039cc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80039ec:	7bfb      	ldrb	r3, [r7, #15]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d106      	bne.n	8003a00 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039f2:	4b06      	ldr	r3, [pc, #24]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039f4:	691a      	ldr	r2, [r3, #16]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	4904      	ldr	r1, [pc, #16]	@ (8003a0c <RCCEx_PLLSAI1_Config+0x1e4>)
 80039fc:	4313      	orrs	r3, r2
 80039fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40021000 	.word	0x40021000

08003a10 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
 8003a18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a1e:	4b6a      	ldr	r3, [pc, #424]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d018      	beq.n	8003a5c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003a2a:	4b67      	ldr	r3, [pc, #412]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f003 0203 	and.w	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d10d      	bne.n	8003a56 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
       ||
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d009      	beq.n	8003a56 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003a42:	4b61      	ldr	r3, [pc, #388]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	091b      	lsrs	r3, r3, #4
 8003a48:	f003 0307 	and.w	r3, r3, #7
 8003a4c:	1c5a      	adds	r2, r3, #1
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
       ||
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d047      	beq.n	8003ae6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
 8003a5a:	e044      	b.n	8003ae6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2b03      	cmp	r3, #3
 8003a62:	d018      	beq.n	8003a96 <RCCEx_PLLSAI2_Config+0x86>
 8003a64:	2b03      	cmp	r3, #3
 8003a66:	d825      	bhi.n	8003ab4 <RCCEx_PLLSAI2_Config+0xa4>
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d002      	beq.n	8003a72 <RCCEx_PLLSAI2_Config+0x62>
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d009      	beq.n	8003a84 <RCCEx_PLLSAI2_Config+0x74>
 8003a70:	e020      	b.n	8003ab4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a72:	4b55      	ldr	r3, [pc, #340]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d11d      	bne.n	8003aba <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a82:	e01a      	b.n	8003aba <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a84:	4b50      	ldr	r3, [pc, #320]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d116      	bne.n	8003abe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a94:	e013      	b.n	8003abe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a96:	4b4c      	ldr	r3, [pc, #304]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10f      	bne.n	8003ac2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003aa2:	4b49      	ldr	r3, [pc, #292]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d109      	bne.n	8003ac2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003ab2:	e006      	b.n	8003ac2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab8:	e004      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003aba:	bf00      	nop
 8003abc:	e002      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003ac2:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ac4:	7bfb      	ldrb	r3, [r7, #15]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d10d      	bne.n	8003ae6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003aca:	4b3f      	ldr	r3, [pc, #252]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6819      	ldr	r1, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	4939      	ldr	r1, [pc, #228]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d167      	bne.n	8003bbc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003aec:	4b36      	ldr	r3, [pc, #216]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a35      	ldr	r2, [pc, #212]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003af8:	f7fe fa34 	bl	8001f64 <HAL_GetTick>
 8003afc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003afe:	e009      	b.n	8003b14 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b00:	f7fe fa30 	bl	8001f64 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d902      	bls.n	8003b14 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	73fb      	strb	r3, [r7, #15]
        break;
 8003b12:	e005      	b.n	8003b20 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b14:	4b2c      	ldr	r3, [pc, #176]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ef      	bne.n	8003b00 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d14a      	bne.n	8003bbc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d111      	bne.n	8003b50 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b2c:	4b26      	ldr	r3, [pc, #152]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b34:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6892      	ldr	r2, [r2, #8]
 8003b3c:	0211      	lsls	r1, r2, #8
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	68d2      	ldr	r2, [r2, #12]
 8003b42:	0912      	lsrs	r2, r2, #4
 8003b44:	0452      	lsls	r2, r2, #17
 8003b46:	430a      	orrs	r2, r1
 8003b48:	491f      	ldr	r1, [pc, #124]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	614b      	str	r3, [r1, #20]
 8003b4e:	e011      	b.n	8003b74 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b50:	4b1d      	ldr	r3, [pc, #116]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b58:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6892      	ldr	r2, [r2, #8]
 8003b60:	0211      	lsls	r1, r2, #8
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6912      	ldr	r2, [r2, #16]
 8003b66:	0852      	lsrs	r2, r2, #1
 8003b68:	3a01      	subs	r2, #1
 8003b6a:	0652      	lsls	r2, r2, #25
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	4916      	ldr	r1, [pc, #88]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003b74:	4b14      	ldr	r3, [pc, #80]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a13      	ldr	r2, [pc, #76]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b80:	f7fe f9f0 	bl	8001f64 <HAL_GetTick>
 8003b84:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b86:	e009      	b.n	8003b9c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b88:	f7fe f9ec 	bl	8001f64 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d902      	bls.n	8003b9c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	73fb      	strb	r3, [r7, #15]
          break;
 8003b9a:	e005      	b.n	8003ba8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d0ef      	beq.n	8003b88 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003bae:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	4904      	ldr	r1, [pc, #16]	@ (8003bc8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40021000 	.word	0x40021000

08003bcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e049      	b.n	8003c72 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d106      	bne.n	8003bf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f841 	bl	8003c7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3304      	adds	r3, #4
 8003c08:	4619      	mov	r1, r3
 8003c0a:	4610      	mov	r0, r2
 8003c0c:	f000 fce8 	bl	80045e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b083      	sub	sp, #12
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003c82:	bf00      	nop
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
	...

08003c90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d001      	beq.n	8003ca8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e04f      	b.n	8003d48 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a23      	ldr	r2, [pc, #140]	@ (8003d54 <HAL_TIM_Base_Start_IT+0xc4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01d      	beq.n	8003d06 <HAL_TIM_Base_Start_IT+0x76>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd2:	d018      	beq.n	8003d06 <HAL_TIM_Base_Start_IT+0x76>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d58 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d013      	beq.n	8003d06 <HAL_TIM_Base_Start_IT+0x76>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8003d5c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d00e      	beq.n	8003d06 <HAL_TIM_Base_Start_IT+0x76>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a1c      	ldr	r2, [pc, #112]	@ (8003d60 <HAL_TIM_Base_Start_IT+0xd0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d009      	beq.n	8003d06 <HAL_TIM_Base_Start_IT+0x76>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8003d64 <HAL_TIM_Base_Start_IT+0xd4>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d004      	beq.n	8003d06 <HAL_TIM_Base_Start_IT+0x76>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a19      	ldr	r2, [pc, #100]	@ (8003d68 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d115      	bne.n	8003d32 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	4b17      	ldr	r3, [pc, #92]	@ (8003d6c <HAL_TIM_Base_Start_IT+0xdc>)
 8003d0e:	4013      	ands	r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2b06      	cmp	r3, #6
 8003d16:	d015      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0xb4>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d1e:	d011      	beq.n	8003d44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f042 0201 	orr.w	r2, r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d30:	e008      	b.n	8003d44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f042 0201 	orr.w	r2, r2, #1
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e000      	b.n	8003d46 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40012c00 	.word	0x40012c00
 8003d58:	40000400 	.word	0x40000400
 8003d5c:	40000800 	.word	0x40000800
 8003d60:	40000c00 	.word	0x40000c00
 8003d64:	40013400 	.word	0x40013400
 8003d68:	40014000 	.word	0x40014000
 8003d6c:	00010007 	.word	0x00010007

08003d70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d101      	bne.n	8003d82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e049      	b.n	8003e16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d106      	bne.n	8003d9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f7fd fe2e 	bl	80019f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4619      	mov	r1, r3
 8003dae:	4610      	mov	r0, r2
 8003db0:	f000 fc16 	bl	80045e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d109      	bne.n	8003e44 <HAL_TIM_PWM_Start+0x24>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	bf14      	ite	ne
 8003e3c:	2301      	movne	r3, #1
 8003e3e:	2300      	moveq	r3, #0
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	e03c      	b.n	8003ebe <HAL_TIM_PWM_Start+0x9e>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d109      	bne.n	8003e5e <HAL_TIM_PWM_Start+0x3e>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	bf14      	ite	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	2300      	moveq	r3, #0
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	e02f      	b.n	8003ebe <HAL_TIM_PWM_Start+0x9e>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d109      	bne.n	8003e78 <HAL_TIM_PWM_Start+0x58>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	bf14      	ite	ne
 8003e70:	2301      	movne	r3, #1
 8003e72:	2300      	moveq	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	e022      	b.n	8003ebe <HAL_TIM_PWM_Start+0x9e>
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	2b0c      	cmp	r3, #12
 8003e7c:	d109      	bne.n	8003e92 <HAL_TIM_PWM_Start+0x72>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	bf14      	ite	ne
 8003e8a:	2301      	movne	r3, #1
 8003e8c:	2300      	moveq	r3, #0
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	e015      	b.n	8003ebe <HAL_TIM_PWM_Start+0x9e>
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	2b10      	cmp	r3, #16
 8003e96:	d109      	bne.n	8003eac <HAL_TIM_PWM_Start+0x8c>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	bf14      	ite	ne
 8003ea4:	2301      	movne	r3, #1
 8003ea6:	2300      	moveq	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e008      	b.n	8003ebe <HAL_TIM_PWM_Start+0x9e>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	bf14      	ite	ne
 8003eb8:	2301      	movne	r3, #1
 8003eba:	2300      	moveq	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e09c      	b.n	8004000 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d104      	bne.n	8003ed6 <HAL_TIM_PWM_Start+0xb6>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ed4:	e023      	b.n	8003f1e <HAL_TIM_PWM_Start+0xfe>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b04      	cmp	r3, #4
 8003eda:	d104      	bne.n	8003ee6 <HAL_TIM_PWM_Start+0xc6>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ee4:	e01b      	b.n	8003f1e <HAL_TIM_PWM_Start+0xfe>
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d104      	bne.n	8003ef6 <HAL_TIM_PWM_Start+0xd6>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2202      	movs	r2, #2
 8003ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ef4:	e013      	b.n	8003f1e <HAL_TIM_PWM_Start+0xfe>
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	2b0c      	cmp	r3, #12
 8003efa:	d104      	bne.n	8003f06 <HAL_TIM_PWM_Start+0xe6>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003f04:	e00b      	b.n	8003f1e <HAL_TIM_PWM_Start+0xfe>
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b10      	cmp	r3, #16
 8003f0a:	d104      	bne.n	8003f16 <HAL_TIM_PWM_Start+0xf6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2202      	movs	r2, #2
 8003f10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f14:	e003      	b.n	8003f1e <HAL_TIM_PWM_Start+0xfe>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2202      	movs	r2, #2
 8003f1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2201      	movs	r2, #1
 8003f24:	6839      	ldr	r1, [r7, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 fed6 	bl	8004cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a35      	ldr	r2, [pc, #212]	@ (8004008 <HAL_TIM_PWM_Start+0x1e8>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x13e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a34      	ldr	r2, [pc, #208]	@ (800400c <HAL_TIM_PWM_Start+0x1ec>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x13e>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a32      	ldr	r2, [pc, #200]	@ (8004010 <HAL_TIM_PWM_Start+0x1f0>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d009      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x13e>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a31      	ldr	r2, [pc, #196]	@ (8004014 <HAL_TIM_PWM_Start+0x1f4>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_TIM_PWM_Start+0x13e>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a2f      	ldr	r2, [pc, #188]	@ (8004018 <HAL_TIM_PWM_Start+0x1f8>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d101      	bne.n	8003f62 <HAL_TIM_PWM_Start+0x142>
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e000      	b.n	8003f64 <HAL_TIM_PWM_Start+0x144>
 8003f62:	2300      	movs	r3, #0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d007      	beq.n	8003f78 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f76:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a22      	ldr	r2, [pc, #136]	@ (8004008 <HAL_TIM_PWM_Start+0x1e8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d01d      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x19e>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f8a:	d018      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x19e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a22      	ldr	r2, [pc, #136]	@ (800401c <HAL_TIM_PWM_Start+0x1fc>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d013      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x19e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a21      	ldr	r2, [pc, #132]	@ (8004020 <HAL_TIM_PWM_Start+0x200>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00e      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x19e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1f      	ldr	r2, [pc, #124]	@ (8004024 <HAL_TIM_PWM_Start+0x204>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d009      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x19e>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a17      	ldr	r2, [pc, #92]	@ (800400c <HAL_TIM_PWM_Start+0x1ec>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d004      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x19e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a15      	ldr	r2, [pc, #84]	@ (8004010 <HAL_TIM_PWM_Start+0x1f0>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d115      	bne.n	8003fea <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	689a      	ldr	r2, [r3, #8]
 8003fc4:	4b18      	ldr	r3, [pc, #96]	@ (8004028 <HAL_TIM_PWM_Start+0x208>)
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2b06      	cmp	r3, #6
 8003fce:	d015      	beq.n	8003ffc <HAL_TIM_PWM_Start+0x1dc>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003fd6:	d011      	beq.n	8003ffc <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fe8:	e008      	b.n	8003ffc <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f042 0201 	orr.w	r2, r2, #1
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	e000      	b.n	8003ffe <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ffc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3710      	adds	r7, #16
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40012c00 	.word	0x40012c00
 800400c:	40013400 	.word	0x40013400
 8004010:	40014000 	.word	0x40014000
 8004014:	40014400 	.word	0x40014400
 8004018:	40014800 	.word	0x40014800
 800401c:	40000400 	.word	0x40000400
 8004020:	40000800 	.word	0x40000800
 8004024:	40000c00 	.word	0x40000c00
 8004028:	00010007 	.word	0x00010007

0800402c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b082      	sub	sp, #8
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2200      	movs	r2, #0
 800403c:	6839      	ldr	r1, [r7, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f000 fe4a 	bl	8004cd8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a3e      	ldr	r2, [pc, #248]	@ (8004144 <HAL_TIM_PWM_Stop+0x118>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d013      	beq.n	8004076 <HAL_TIM_PWM_Stop+0x4a>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a3d      	ldr	r2, [pc, #244]	@ (8004148 <HAL_TIM_PWM_Stop+0x11c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d00e      	beq.n	8004076 <HAL_TIM_PWM_Stop+0x4a>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a3b      	ldr	r2, [pc, #236]	@ (800414c <HAL_TIM_PWM_Stop+0x120>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d009      	beq.n	8004076 <HAL_TIM_PWM_Stop+0x4a>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a3a      	ldr	r2, [pc, #232]	@ (8004150 <HAL_TIM_PWM_Stop+0x124>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d004      	beq.n	8004076 <HAL_TIM_PWM_Stop+0x4a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a38      	ldr	r2, [pc, #224]	@ (8004154 <HAL_TIM_PWM_Stop+0x128>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d101      	bne.n	800407a <HAL_TIM_PWM_Stop+0x4e>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <HAL_TIM_PWM_Stop+0x50>
 800407a:	2300      	movs	r3, #0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d017      	beq.n	80040b0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6a1a      	ldr	r2, [r3, #32]
 8004086:	f241 1311 	movw	r3, #4369	@ 0x1111
 800408a:	4013      	ands	r3, r2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10f      	bne.n	80040b0 <HAL_TIM_PWM_Stop+0x84>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	f240 4344 	movw	r3, #1092	@ 0x444
 800409a:	4013      	ands	r3, r2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d107      	bne.n	80040b0 <HAL_TIM_PWM_Stop+0x84>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80040ae:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6a1a      	ldr	r2, [r3, #32]
 80040b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10f      	bne.n	80040e0 <HAL_TIM_PWM_Stop+0xb4>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6a1a      	ldr	r2, [r3, #32]
 80040c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80040ca:	4013      	ands	r3, r2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d107      	bne.n	80040e0 <HAL_TIM_PWM_Stop+0xb4>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f022 0201 	bic.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d104      	bne.n	80040f0 <HAL_TIM_PWM_Stop+0xc4>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040ee:	e023      	b.n	8004138 <HAL_TIM_PWM_Stop+0x10c>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	2b04      	cmp	r3, #4
 80040f4:	d104      	bne.n	8004100 <HAL_TIM_PWM_Stop+0xd4>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2201      	movs	r2, #1
 80040fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040fe:	e01b      	b.n	8004138 <HAL_TIM_PWM_Stop+0x10c>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b08      	cmp	r3, #8
 8004104:	d104      	bne.n	8004110 <HAL_TIM_PWM_Stop+0xe4>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800410e:	e013      	b.n	8004138 <HAL_TIM_PWM_Stop+0x10c>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	2b0c      	cmp	r3, #12
 8004114:	d104      	bne.n	8004120 <HAL_TIM_PWM_Stop+0xf4>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2201      	movs	r2, #1
 800411a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800411e:	e00b      	b.n	8004138 <HAL_TIM_PWM_Stop+0x10c>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b10      	cmp	r3, #16
 8004124:	d104      	bne.n	8004130 <HAL_TIM_PWM_Stop+0x104>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800412e:	e003      	b.n	8004138 <HAL_TIM_PWM_Stop+0x10c>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3708      	adds	r7, #8
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40013400 	.word	0x40013400
 800414c:	40014000 	.word	0x40014000
 8004150:	40014400 	.word	0x40014400
 8004154:	40014800 	.word	0x40014800

08004158 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b00      	cmp	r3, #0
 8004178:	d020      	beq.n	80041bc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f003 0302 	and.w	r3, r3, #2
 8004180:	2b00      	cmp	r3, #0
 8004182:	d01b      	beq.n	80041bc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f06f 0202 	mvn.w	r2, #2
 800418c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	f003 0303 	and.w	r3, r3, #3
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f9fe 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 80041a8:	e005      	b.n	80041b6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 f9f0 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b0:	6878      	ldr	r0, [r7, #4]
 80041b2:	f000 fa01 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d020      	beq.n	8004208 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f003 0304 	and.w	r3, r3, #4
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01b      	beq.n	8004208 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f06f 0204 	mvn.w	r2, #4
 80041d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2202      	movs	r2, #2
 80041de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f9d8 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 80041f4:	e005      	b.n	8004202 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f9ca 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f9db 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f003 0308 	and.w	r3, r3, #8
 800420e:	2b00      	cmp	r3, #0
 8004210:	d020      	beq.n	8004254 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f003 0308 	and.w	r3, r3, #8
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01b      	beq.n	8004254 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0208 	mvn.w	r2, #8
 8004224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2204      	movs	r2, #4
 800422a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f003 0303 	and.w	r3, r3, #3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f9b2 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 8004240:	e005      	b.n	800424e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f9a4 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f9b5 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	2b00      	cmp	r3, #0
 800425c:	d020      	beq.n	80042a0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b00      	cmp	r3, #0
 8004266:	d01b      	beq.n	80042a0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f06f 0210 	mvn.w	r2, #16
 8004270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2208      	movs	r2, #8
 8004276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f98c 	bl	80045a4 <HAL_TIM_IC_CaptureCallback>
 800428c:	e005      	b.n	800429a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f97e 	bl	8004590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f98f 	bl	80045b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	f003 0301 	and.w	r3, r3, #1
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00c      	beq.n	80042c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f06f 0201 	mvn.w	r2, #1
 80042bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7fd fb5a 	bl	8001978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d104      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00c      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d007      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80042ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f000 fe29 	bl	8004f44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00c      	beq.n	8004316 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004302:	2b00      	cmp	r3, #0
 8004304:	d007      	beq.n	8004316 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800430e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	f000 fe21 	bl	8004f58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00c      	beq.n	800433a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004326:	2b00      	cmp	r3, #0
 8004328:	d007      	beq.n	800433a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f949 	bl	80045cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f003 0320 	and.w	r3, r3, #32
 8004340:	2b00      	cmp	r3, #0
 8004342:	d00c      	beq.n	800435e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 0320 	and.w	r3, r3, #32
 800434a:	2b00      	cmp	r3, #0
 800434c:	d007      	beq.n	800435e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f06f 0220 	mvn.w	r2, #32
 8004356:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fde9 	bl	8004f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004382:	2302      	movs	r3, #2
 8004384:	e0ff      	b.n	8004586 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b14      	cmp	r3, #20
 8004392:	f200 80f0 	bhi.w	8004576 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004396:	a201      	add	r2, pc, #4	@ (adr r2, 800439c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	080043f1 	.word	0x080043f1
 80043a0:	08004577 	.word	0x08004577
 80043a4:	08004577 	.word	0x08004577
 80043a8:	08004577 	.word	0x08004577
 80043ac:	08004431 	.word	0x08004431
 80043b0:	08004577 	.word	0x08004577
 80043b4:	08004577 	.word	0x08004577
 80043b8:	08004577 	.word	0x08004577
 80043bc:	08004473 	.word	0x08004473
 80043c0:	08004577 	.word	0x08004577
 80043c4:	08004577 	.word	0x08004577
 80043c8:	08004577 	.word	0x08004577
 80043cc:	080044b3 	.word	0x080044b3
 80043d0:	08004577 	.word	0x08004577
 80043d4:	08004577 	.word	0x08004577
 80043d8:	08004577 	.word	0x08004577
 80043dc:	080044f5 	.word	0x080044f5
 80043e0:	08004577 	.word	0x08004577
 80043e4:	08004577 	.word	0x08004577
 80043e8:	08004577 	.word	0x08004577
 80043ec:	08004535 	.word	0x08004535
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 f998 	bl	800472c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0208 	orr.w	r2, r2, #8
 800440a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0204 	bic.w	r2, r2, #4
 800441a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6999      	ldr	r1, [r3, #24]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	619a      	str	r2, [r3, #24]
      break;
 800442e:	e0a5      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 fa08 	bl	800484c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800444a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800445a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6999      	ldr	r1, [r3, #24]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	021a      	lsls	r2, r3, #8
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	619a      	str	r2, [r3, #24]
      break;
 8004470:	e084      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fa71 	bl	8004960 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0208 	orr.w	r2, r2, #8
 800448c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0204 	bic.w	r2, r2, #4
 800449c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69d9      	ldr	r1, [r3, #28]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	61da      	str	r2, [r3, #28]
      break;
 80044b0:	e064      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fad9 	bl	8004a70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80044cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	021a      	lsls	r2, r3, #8
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	61da      	str	r2, [r3, #28]
      break;
 80044f2:	e043      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fb22 	bl	8004b44 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0208 	orr.w	r2, r2, #8
 800450e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0204 	bic.w	r2, r2, #4
 800451e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004532:	e023      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fb66 	bl	8004c0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800454e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800455e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004574:	e002      	b.n	800457c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	75fb      	strb	r3, [r7, #23]
      break;
 800457a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004584:	7dfb      	ldrb	r3, [r7, #23]
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop

08004590 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80045ac:	bf00      	nop
 80045ae:	370c      	adds	r7, #12
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr

080045cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045d4:	bf00      	nop
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a46      	ldr	r2, [pc, #280]	@ (800470c <TIM_Base_SetConfig+0x12c>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d013      	beq.n	8004620 <TIM_Base_SetConfig+0x40>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045fe:	d00f      	beq.n	8004620 <TIM_Base_SetConfig+0x40>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a43      	ldr	r2, [pc, #268]	@ (8004710 <TIM_Base_SetConfig+0x130>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d00b      	beq.n	8004620 <TIM_Base_SetConfig+0x40>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a42      	ldr	r2, [pc, #264]	@ (8004714 <TIM_Base_SetConfig+0x134>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d007      	beq.n	8004620 <TIM_Base_SetConfig+0x40>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a41      	ldr	r2, [pc, #260]	@ (8004718 <TIM_Base_SetConfig+0x138>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_Base_SetConfig+0x40>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a40      	ldr	r2, [pc, #256]	@ (800471c <TIM_Base_SetConfig+0x13c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d108      	bne.n	8004632 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a35      	ldr	r2, [pc, #212]	@ (800470c <TIM_Base_SetConfig+0x12c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d01f      	beq.n	800467a <TIM_Base_SetConfig+0x9a>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004640:	d01b      	beq.n	800467a <TIM_Base_SetConfig+0x9a>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a32      	ldr	r2, [pc, #200]	@ (8004710 <TIM_Base_SetConfig+0x130>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d017      	beq.n	800467a <TIM_Base_SetConfig+0x9a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a31      	ldr	r2, [pc, #196]	@ (8004714 <TIM_Base_SetConfig+0x134>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <TIM_Base_SetConfig+0x9a>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a30      	ldr	r2, [pc, #192]	@ (8004718 <TIM_Base_SetConfig+0x138>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00f      	beq.n	800467a <TIM_Base_SetConfig+0x9a>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a2f      	ldr	r2, [pc, #188]	@ (800471c <TIM_Base_SetConfig+0x13c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d00b      	beq.n	800467a <TIM_Base_SetConfig+0x9a>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a2e      	ldr	r2, [pc, #184]	@ (8004720 <TIM_Base_SetConfig+0x140>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d007      	beq.n	800467a <TIM_Base_SetConfig+0x9a>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a2d      	ldr	r2, [pc, #180]	@ (8004724 <TIM_Base_SetConfig+0x144>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d003      	beq.n	800467a <TIM_Base_SetConfig+0x9a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a2c      	ldr	r2, [pc, #176]	@ (8004728 <TIM_Base_SetConfig+0x148>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d108      	bne.n	800468c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68fa      	ldr	r2, [r7, #12]
 800469e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a16      	ldr	r2, [pc, #88]	@ (800470c <TIM_Base_SetConfig+0x12c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d00f      	beq.n	80046d8 <TIM_Base_SetConfig+0xf8>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a18      	ldr	r2, [pc, #96]	@ (800471c <TIM_Base_SetConfig+0x13c>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00b      	beq.n	80046d8 <TIM_Base_SetConfig+0xf8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a17      	ldr	r2, [pc, #92]	@ (8004720 <TIM_Base_SetConfig+0x140>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <TIM_Base_SetConfig+0xf8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a16      	ldr	r2, [pc, #88]	@ (8004724 <TIM_Base_SetConfig+0x144>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d003      	beq.n	80046d8 <TIM_Base_SetConfig+0xf8>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	4a15      	ldr	r2, [pc, #84]	@ (8004728 <TIM_Base_SetConfig+0x148>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d103      	bne.n	80046e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691a      	ldr	r2, [r3, #16]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d105      	bne.n	80046fe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f023 0201 	bic.w	r2, r3, #1
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	611a      	str	r2, [r3, #16]
  }
}
 80046fe:	bf00      	nop
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40012c00 	.word	0x40012c00
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800
 8004718:	40000c00 	.word	0x40000c00
 800471c:	40013400 	.word	0x40013400
 8004720:	40014000 	.word	0x40014000
 8004724:	40014400 	.word	0x40014400
 8004728:	40014800 	.word	0x40014800

0800472c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800472c:	b480      	push	{r7}
 800472e:	b087      	sub	sp, #28
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a1b      	ldr	r3, [r3, #32]
 800473a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a1b      	ldr	r3, [r3, #32]
 8004740:	f023 0201 	bic.w	r2, r3, #1
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800475a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0303 	bic.w	r3, r3, #3
 8004766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f023 0302 	bic.w	r3, r3, #2
 8004778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a2c      	ldr	r2, [pc, #176]	@ (8004838 <TIM_OC1_SetConfig+0x10c>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00f      	beq.n	80047ac <TIM_OC1_SetConfig+0x80>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a2b      	ldr	r2, [pc, #172]	@ (800483c <TIM_OC1_SetConfig+0x110>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d00b      	beq.n	80047ac <TIM_OC1_SetConfig+0x80>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a2a      	ldr	r2, [pc, #168]	@ (8004840 <TIM_OC1_SetConfig+0x114>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d007      	beq.n	80047ac <TIM_OC1_SetConfig+0x80>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a29      	ldr	r2, [pc, #164]	@ (8004844 <TIM_OC1_SetConfig+0x118>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d003      	beq.n	80047ac <TIM_OC1_SetConfig+0x80>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	4a28      	ldr	r2, [pc, #160]	@ (8004848 <TIM_OC1_SetConfig+0x11c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d10c      	bne.n	80047c6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f023 0308 	bic.w	r3, r3, #8
 80047b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	697a      	ldr	r2, [r7, #20]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f023 0304 	bic.w	r3, r3, #4
 80047c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004838 <TIM_OC1_SetConfig+0x10c>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00f      	beq.n	80047ee <TIM_OC1_SetConfig+0xc2>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1a      	ldr	r2, [pc, #104]	@ (800483c <TIM_OC1_SetConfig+0x110>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d00b      	beq.n	80047ee <TIM_OC1_SetConfig+0xc2>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a19      	ldr	r2, [pc, #100]	@ (8004840 <TIM_OC1_SetConfig+0x114>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d007      	beq.n	80047ee <TIM_OC1_SetConfig+0xc2>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a18      	ldr	r2, [pc, #96]	@ (8004844 <TIM_OC1_SetConfig+0x118>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d003      	beq.n	80047ee <TIM_OC1_SetConfig+0xc2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a17      	ldr	r2, [pc, #92]	@ (8004848 <TIM_OC1_SetConfig+0x11c>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d111      	bne.n	8004812 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80047fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	693a      	ldr	r2, [r7, #16]
 8004804:	4313      	orrs	r3, r2
 8004806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	621a      	str	r2, [r3, #32]
}
 800482c:	bf00      	nop
 800482e:	371c      	adds	r7, #28
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	40012c00 	.word	0x40012c00
 800483c:	40013400 	.word	0x40013400
 8004840:	40014000 	.word	0x40014000
 8004844:	40014400 	.word	0x40014400
 8004848:	40014800 	.word	0x40014800

0800484c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a1b      	ldr	r3, [r3, #32]
 8004860:	f023 0210 	bic.w	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800487a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004886:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	021b      	lsls	r3, r3, #8
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4313      	orrs	r3, r2
 8004892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f023 0320 	bic.w	r3, r3, #32
 800489a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	011b      	lsls	r3, r3, #4
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a28      	ldr	r2, [pc, #160]	@ (800494c <TIM_OC2_SetConfig+0x100>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d003      	beq.n	80048b8 <TIM_OC2_SetConfig+0x6c>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a27      	ldr	r2, [pc, #156]	@ (8004950 <TIM_OC2_SetConfig+0x104>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d10d      	bne.n	80048d4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a1d      	ldr	r2, [pc, #116]	@ (800494c <TIM_OC2_SetConfig+0x100>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d00f      	beq.n	80048fc <TIM_OC2_SetConfig+0xb0>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a1c      	ldr	r2, [pc, #112]	@ (8004950 <TIM_OC2_SetConfig+0x104>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00b      	beq.n	80048fc <TIM_OC2_SetConfig+0xb0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a1b      	ldr	r2, [pc, #108]	@ (8004954 <TIM_OC2_SetConfig+0x108>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <TIM_OC2_SetConfig+0xb0>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004958 <TIM_OC2_SetConfig+0x10c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_OC2_SetConfig+0xb0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a19      	ldr	r2, [pc, #100]	@ (800495c <TIM_OC2_SetConfig+0x110>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d113      	bne.n	8004924 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004902:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800490a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	693a      	ldr	r2, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	693a      	ldr	r2, [r7, #16]
 8004928:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685a      	ldr	r2, [r3, #4]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	621a      	str	r2, [r3, #32]
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40013400 	.word	0x40013400
 8004954:	40014000 	.word	0x40014000
 8004958:	40014400 	.word	0x40014400
 800495c:	40014800 	.word	0x40014800

08004960 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004960:	b480      	push	{r7}
 8004962:	b087      	sub	sp, #28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a1b      	ldr	r3, [r3, #32]
 800496e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	69db      	ldr	r3, [r3, #28]
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800498e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f023 0303 	bic.w	r3, r3, #3
 800499a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80049ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a27      	ldr	r2, [pc, #156]	@ (8004a5c <TIM_OC3_SetConfig+0xfc>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d003      	beq.n	80049ca <TIM_OC3_SetConfig+0x6a>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a26      	ldr	r2, [pc, #152]	@ (8004a60 <TIM_OC3_SetConfig+0x100>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d10d      	bne.n	80049e6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	021b      	lsls	r3, r3, #8
 80049d8:	697a      	ldr	r2, [r7, #20]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a5c <TIM_OC3_SetConfig+0xfc>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d00f      	beq.n	8004a0e <TIM_OC3_SetConfig+0xae>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a60 <TIM_OC3_SetConfig+0x100>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00b      	beq.n	8004a0e <TIM_OC3_SetConfig+0xae>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a1a      	ldr	r2, [pc, #104]	@ (8004a64 <TIM_OC3_SetConfig+0x104>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d007      	beq.n	8004a0e <TIM_OC3_SetConfig+0xae>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a19      	ldr	r2, [pc, #100]	@ (8004a68 <TIM_OC3_SetConfig+0x108>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d003      	beq.n	8004a0e <TIM_OC3_SetConfig+0xae>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a18      	ldr	r2, [pc, #96]	@ (8004a6c <TIM_OC3_SetConfig+0x10c>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d113      	bne.n	8004a36 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	011b      	lsls	r3, r3, #4
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	011b      	lsls	r3, r3, #4
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	685a      	ldr	r2, [r3, #4]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	621a      	str	r2, [r3, #32]
}
 8004a50:	bf00      	nop
 8004a52:	371c      	adds	r7, #28
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr
 8004a5c:	40012c00 	.word	0x40012c00
 8004a60:	40013400 	.word	0x40013400
 8004a64:	40014000 	.word	0x40014000
 8004a68:	40014400 	.word	0x40014400
 8004a6c:	40014800 	.word	0x40014800

08004a70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b087      	sub	sp, #28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a1b      	ldr	r3, [r3, #32]
 8004a7e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004a9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	021b      	lsls	r3, r3, #8
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	031b      	lsls	r3, r3, #12
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a18      	ldr	r2, [pc, #96]	@ (8004b30 <TIM_OC4_SetConfig+0xc0>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d00f      	beq.n	8004af4 <TIM_OC4_SetConfig+0x84>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a17      	ldr	r2, [pc, #92]	@ (8004b34 <TIM_OC4_SetConfig+0xc4>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d00b      	beq.n	8004af4 <TIM_OC4_SetConfig+0x84>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a16      	ldr	r2, [pc, #88]	@ (8004b38 <TIM_OC4_SetConfig+0xc8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d007      	beq.n	8004af4 <TIM_OC4_SetConfig+0x84>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a15      	ldr	r2, [pc, #84]	@ (8004b3c <TIM_OC4_SetConfig+0xcc>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d003      	beq.n	8004af4 <TIM_OC4_SetConfig+0x84>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a14      	ldr	r2, [pc, #80]	@ (8004b40 <TIM_OC4_SetConfig+0xd0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d109      	bne.n	8004b08 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004afa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	019b      	lsls	r3, r3, #6
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	693a      	ldr	r2, [r7, #16]
 8004b20:	621a      	str	r2, [r3, #32]
}
 8004b22:	bf00      	nop
 8004b24:	371c      	adds	r7, #28
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	40012c00 	.word	0x40012c00
 8004b34:	40013400 	.word	0x40013400
 8004b38:	40014000 	.word	0x40014000
 8004b3c:	40014400 	.word	0x40014400
 8004b40:	40014800 	.word	0x40014800

08004b44 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b087      	sub	sp, #28
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
 8004b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
 8004b52:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6a1b      	ldr	r3, [r3, #32]
 8004b58:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004b88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a17      	ldr	r2, [pc, #92]	@ (8004bf8 <TIM_OC5_SetConfig+0xb4>)
 8004b9a:	4293      	cmp	r3, r2
 8004b9c:	d00f      	beq.n	8004bbe <TIM_OC5_SetConfig+0x7a>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a16      	ldr	r2, [pc, #88]	@ (8004bfc <TIM_OC5_SetConfig+0xb8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d00b      	beq.n	8004bbe <TIM_OC5_SetConfig+0x7a>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a15      	ldr	r2, [pc, #84]	@ (8004c00 <TIM_OC5_SetConfig+0xbc>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d007      	beq.n	8004bbe <TIM_OC5_SetConfig+0x7a>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	4a14      	ldr	r2, [pc, #80]	@ (8004c04 <TIM_OC5_SetConfig+0xc0>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d003      	beq.n	8004bbe <TIM_OC5_SetConfig+0x7a>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a13      	ldr	r2, [pc, #76]	@ (8004c08 <TIM_OC5_SetConfig+0xc4>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d109      	bne.n	8004bd2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	697a      	ldr	r2, [r7, #20]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	693a      	ldr	r2, [r7, #16]
 8004bea:	621a      	str	r2, [r3, #32]
}
 8004bec:	bf00      	nop
 8004bee:	371c      	adds	r7, #28
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr
 8004bf8:	40012c00 	.word	0x40012c00
 8004bfc:	40013400 	.word	0x40013400
 8004c00:	40014000 	.word	0x40014000
 8004c04:	40014400 	.word	0x40014400
 8004c08:	40014800 	.word	0x40014800

08004c0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b087      	sub	sp, #28
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a1b      	ldr	r3, [r3, #32]
 8004c1a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	021b      	lsls	r3, r3, #8
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004c52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	051b      	lsls	r3, r3, #20
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a18      	ldr	r2, [pc, #96]	@ (8004cc4 <TIM_OC6_SetConfig+0xb8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d00f      	beq.n	8004c88 <TIM_OC6_SetConfig+0x7c>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a17      	ldr	r2, [pc, #92]	@ (8004cc8 <TIM_OC6_SetConfig+0xbc>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <TIM_OC6_SetConfig+0x7c>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a16      	ldr	r2, [pc, #88]	@ (8004ccc <TIM_OC6_SetConfig+0xc0>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d007      	beq.n	8004c88 <TIM_OC6_SetConfig+0x7c>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a15      	ldr	r2, [pc, #84]	@ (8004cd0 <TIM_OC6_SetConfig+0xc4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_OC6_SetConfig+0x7c>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a14      	ldr	r2, [pc, #80]	@ (8004cd4 <TIM_OC6_SetConfig+0xc8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d109      	bne.n	8004c9c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c8e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	695b      	ldr	r3, [r3, #20]
 8004c94:	029b      	lsls	r3, r3, #10
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	697a      	ldr	r2, [r7, #20]
 8004ca0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	621a      	str	r2, [r3, #32]
}
 8004cb6:	bf00      	nop
 8004cb8:	371c      	adds	r7, #28
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40012c00 	.word	0x40012c00
 8004cc8:	40013400 	.word	0x40013400
 8004ccc:	40014000 	.word	0x40014000
 8004cd0:	40014400 	.word	0x40014400
 8004cd4:	40014800 	.word	0x40014800

08004cd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b087      	sub	sp, #28
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	f003 031f 	and.w	r3, r3, #31
 8004cea:	2201      	movs	r2, #1
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a1a      	ldr	r2, [r3, #32]
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	401a      	ands	r2, r3
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6a1a      	ldr	r2, [r3, #32]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	f003 031f 	and.w	r3, r3, #31
 8004d0a:	6879      	ldr	r1, [r7, #4]
 8004d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d10:	431a      	orrs	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	621a      	str	r2, [r3, #32]
}
 8004d16:	bf00      	nop
 8004d18:	371c      	adds	r7, #28
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d34:	2b01      	cmp	r3, #1
 8004d36:	d101      	bne.n	8004d3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	e068      	b.n	8004e0e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2202      	movs	r2, #2
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a2e      	ldr	r2, [pc, #184]	@ (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d004      	beq.n	8004d70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d108      	bne.n	8004d82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004d76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	4313      	orrs	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a1e      	ldr	r2, [pc, #120]	@ (8004e1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d01d      	beq.n	8004de2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dae:	d018      	beq.n	8004de2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d013      	beq.n	8004de2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8004e28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d00e      	beq.n	8004de2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a18      	ldr	r2, [pc, #96]	@ (8004e2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d009      	beq.n	8004de2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4a13      	ldr	r2, [pc, #76]	@ (8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d004      	beq.n	8004de2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a14      	ldr	r2, [pc, #80]	@ (8004e30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d10c      	bne.n	8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004de8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	68ba      	ldr	r2, [r7, #8]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3714      	adds	r7, #20
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	40012c00 	.word	0x40012c00
 8004e20:	40013400 	.word	0x40013400
 8004e24:	40000400 	.word	0x40000400
 8004e28:	40000800 	.word	0x40000800
 8004e2c:	40000c00 	.word	0x40000c00
 8004e30:	40014000 	.word	0x40014000

08004e34 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b085      	sub	sp, #20
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e065      	b.n	8004f1c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2201      	movs	r2, #1
 8004e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	699b      	ldr	r3, [r3, #24]
 8004ec4:	041b      	lsls	r3, r3, #16
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a16      	ldr	r2, [pc, #88]	@ (8004f28 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d004      	beq.n	8004ede <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a14      	ldr	r2, [pc, #80]	@ (8004f2c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d115      	bne.n	8004f0a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	051b      	lsls	r3, r3, #20
 8004eea:	4313      	orrs	r3, r2
 8004eec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	69db      	ldr	r3, [r3, #28]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3714      	adds	r7, #20
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr
 8004f28:	40012c00 	.word	0x40012c00
 8004f2c:	40013400 	.word	0x40013400

08004f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f38:	bf00      	nop
 8004f3a:	370c      	adds	r7, #12
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f42:	4770      	bx	lr

08004f44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b083      	sub	sp, #12
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b082      	sub	sp, #8
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d101      	bne.n	8004f7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	e040      	b.n	8005000 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fc fe6c 	bl	8001c6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2224      	movs	r2, #36	@ 0x24
 8004f98:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f022 0201 	bic.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fae0 	bl	8005578 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f825 	bl	8005008 <UART_SetConfig>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e01b      	b.n	8005000 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689a      	ldr	r2, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fe6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f042 0201 	orr.w	r2, r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 fb5f 	bl	80056bc <UART_CheckIdleState>
 8004ffe:	4603      	mov	r3, r0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800500c:	b08a      	sub	sp, #40	@ 0x28
 800500e:	af00      	add	r7, sp, #0
 8005010:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005012:	2300      	movs	r3, #0
 8005014:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689a      	ldr	r2, [r3, #8]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	691b      	ldr	r3, [r3, #16]
 8005020:	431a      	orrs	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	431a      	orrs	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	69db      	ldr	r3, [r3, #28]
 800502c:	4313      	orrs	r3, r2
 800502e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681a      	ldr	r2, [r3, #0]
 8005036:	4ba4      	ldr	r3, [pc, #656]	@ (80052c8 <UART_SetConfig+0x2c0>)
 8005038:	4013      	ands	r3, r2
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	6812      	ldr	r2, [r2, #0]
 800503e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005040:	430b      	orrs	r3, r1
 8005042:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	430a      	orrs	r2, r1
 8005058:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a99      	ldr	r2, [pc, #612]	@ (80052cc <UART_SetConfig+0x2c4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d004      	beq.n	8005074 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005070:	4313      	orrs	r3, r2
 8005072:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005084:	430a      	orrs	r2, r1
 8005086:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a90      	ldr	r2, [pc, #576]	@ (80052d0 <UART_SetConfig+0x2c8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d126      	bne.n	80050e0 <UART_SetConfig+0xd8>
 8005092:	4b90      	ldr	r3, [pc, #576]	@ (80052d4 <UART_SetConfig+0x2cc>)
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005098:	f003 0303 	and.w	r3, r3, #3
 800509c:	2b03      	cmp	r3, #3
 800509e:	d81b      	bhi.n	80050d8 <UART_SetConfig+0xd0>
 80050a0:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <UART_SetConfig+0xa0>)
 80050a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a6:	bf00      	nop
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050c9 	.word	0x080050c9
 80050b0:	080050c1 	.word	0x080050c1
 80050b4:	080050d1 	.word	0x080050d1
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050be:	e116      	b.n	80052ee <UART_SetConfig+0x2e6>
 80050c0:	2302      	movs	r3, #2
 80050c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050c6:	e112      	b.n	80052ee <UART_SetConfig+0x2e6>
 80050c8:	2304      	movs	r3, #4
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ce:	e10e      	b.n	80052ee <UART_SetConfig+0x2e6>
 80050d0:	2308      	movs	r3, #8
 80050d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050d6:	e10a      	b.n	80052ee <UART_SetConfig+0x2e6>
 80050d8:	2310      	movs	r3, #16
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050de:	e106      	b.n	80052ee <UART_SetConfig+0x2e6>
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a7c      	ldr	r2, [pc, #496]	@ (80052d8 <UART_SetConfig+0x2d0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d138      	bne.n	800515c <UART_SetConfig+0x154>
 80050ea:	4b7a      	ldr	r3, [pc, #488]	@ (80052d4 <UART_SetConfig+0x2cc>)
 80050ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f0:	f003 030c 	and.w	r3, r3, #12
 80050f4:	2b0c      	cmp	r3, #12
 80050f6:	d82d      	bhi.n	8005154 <UART_SetConfig+0x14c>
 80050f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005100 <UART_SetConfig+0xf8>)
 80050fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050fe:	bf00      	nop
 8005100:	08005135 	.word	0x08005135
 8005104:	08005155 	.word	0x08005155
 8005108:	08005155 	.word	0x08005155
 800510c:	08005155 	.word	0x08005155
 8005110:	08005145 	.word	0x08005145
 8005114:	08005155 	.word	0x08005155
 8005118:	08005155 	.word	0x08005155
 800511c:	08005155 	.word	0x08005155
 8005120:	0800513d 	.word	0x0800513d
 8005124:	08005155 	.word	0x08005155
 8005128:	08005155 	.word	0x08005155
 800512c:	08005155 	.word	0x08005155
 8005130:	0800514d 	.word	0x0800514d
 8005134:	2300      	movs	r3, #0
 8005136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800513a:	e0d8      	b.n	80052ee <UART_SetConfig+0x2e6>
 800513c:	2302      	movs	r3, #2
 800513e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005142:	e0d4      	b.n	80052ee <UART_SetConfig+0x2e6>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800514a:	e0d0      	b.n	80052ee <UART_SetConfig+0x2e6>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005152:	e0cc      	b.n	80052ee <UART_SetConfig+0x2e6>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800515a:	e0c8      	b.n	80052ee <UART_SetConfig+0x2e6>
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a5e      	ldr	r2, [pc, #376]	@ (80052dc <UART_SetConfig+0x2d4>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d125      	bne.n	80051b2 <UART_SetConfig+0x1aa>
 8005166:	4b5b      	ldr	r3, [pc, #364]	@ (80052d4 <UART_SetConfig+0x2cc>)
 8005168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005170:	2b30      	cmp	r3, #48	@ 0x30
 8005172:	d016      	beq.n	80051a2 <UART_SetConfig+0x19a>
 8005174:	2b30      	cmp	r3, #48	@ 0x30
 8005176:	d818      	bhi.n	80051aa <UART_SetConfig+0x1a2>
 8005178:	2b20      	cmp	r3, #32
 800517a:	d00a      	beq.n	8005192 <UART_SetConfig+0x18a>
 800517c:	2b20      	cmp	r3, #32
 800517e:	d814      	bhi.n	80051aa <UART_SetConfig+0x1a2>
 8005180:	2b00      	cmp	r3, #0
 8005182:	d002      	beq.n	800518a <UART_SetConfig+0x182>
 8005184:	2b10      	cmp	r3, #16
 8005186:	d008      	beq.n	800519a <UART_SetConfig+0x192>
 8005188:	e00f      	b.n	80051aa <UART_SetConfig+0x1a2>
 800518a:	2300      	movs	r3, #0
 800518c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005190:	e0ad      	b.n	80052ee <UART_SetConfig+0x2e6>
 8005192:	2302      	movs	r3, #2
 8005194:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005198:	e0a9      	b.n	80052ee <UART_SetConfig+0x2e6>
 800519a:	2304      	movs	r3, #4
 800519c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051a0:	e0a5      	b.n	80052ee <UART_SetConfig+0x2e6>
 80051a2:	2308      	movs	r3, #8
 80051a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051a8:	e0a1      	b.n	80052ee <UART_SetConfig+0x2e6>
 80051aa:	2310      	movs	r3, #16
 80051ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051b0:	e09d      	b.n	80052ee <UART_SetConfig+0x2e6>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a4a      	ldr	r2, [pc, #296]	@ (80052e0 <UART_SetConfig+0x2d8>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d125      	bne.n	8005208 <UART_SetConfig+0x200>
 80051bc:	4b45      	ldr	r3, [pc, #276]	@ (80052d4 <UART_SetConfig+0x2cc>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051c2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80051c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80051c8:	d016      	beq.n	80051f8 <UART_SetConfig+0x1f0>
 80051ca:	2bc0      	cmp	r3, #192	@ 0xc0
 80051cc:	d818      	bhi.n	8005200 <UART_SetConfig+0x1f8>
 80051ce:	2b80      	cmp	r3, #128	@ 0x80
 80051d0:	d00a      	beq.n	80051e8 <UART_SetConfig+0x1e0>
 80051d2:	2b80      	cmp	r3, #128	@ 0x80
 80051d4:	d814      	bhi.n	8005200 <UART_SetConfig+0x1f8>
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d002      	beq.n	80051e0 <UART_SetConfig+0x1d8>
 80051da:	2b40      	cmp	r3, #64	@ 0x40
 80051dc:	d008      	beq.n	80051f0 <UART_SetConfig+0x1e8>
 80051de:	e00f      	b.n	8005200 <UART_SetConfig+0x1f8>
 80051e0:	2300      	movs	r3, #0
 80051e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051e6:	e082      	b.n	80052ee <UART_SetConfig+0x2e6>
 80051e8:	2302      	movs	r3, #2
 80051ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ee:	e07e      	b.n	80052ee <UART_SetConfig+0x2e6>
 80051f0:	2304      	movs	r3, #4
 80051f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051f6:	e07a      	b.n	80052ee <UART_SetConfig+0x2e6>
 80051f8:	2308      	movs	r3, #8
 80051fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051fe:	e076      	b.n	80052ee <UART_SetConfig+0x2e6>
 8005200:	2310      	movs	r3, #16
 8005202:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005206:	e072      	b.n	80052ee <UART_SetConfig+0x2e6>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a35      	ldr	r2, [pc, #212]	@ (80052e4 <UART_SetConfig+0x2dc>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d12a      	bne.n	8005268 <UART_SetConfig+0x260>
 8005212:	4b30      	ldr	r3, [pc, #192]	@ (80052d4 <UART_SetConfig+0x2cc>)
 8005214:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005218:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800521c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005220:	d01a      	beq.n	8005258 <UART_SetConfig+0x250>
 8005222:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005226:	d81b      	bhi.n	8005260 <UART_SetConfig+0x258>
 8005228:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800522c:	d00c      	beq.n	8005248 <UART_SetConfig+0x240>
 800522e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005232:	d815      	bhi.n	8005260 <UART_SetConfig+0x258>
 8005234:	2b00      	cmp	r3, #0
 8005236:	d003      	beq.n	8005240 <UART_SetConfig+0x238>
 8005238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800523c:	d008      	beq.n	8005250 <UART_SetConfig+0x248>
 800523e:	e00f      	b.n	8005260 <UART_SetConfig+0x258>
 8005240:	2300      	movs	r3, #0
 8005242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005246:	e052      	b.n	80052ee <UART_SetConfig+0x2e6>
 8005248:	2302      	movs	r3, #2
 800524a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800524e:	e04e      	b.n	80052ee <UART_SetConfig+0x2e6>
 8005250:	2304      	movs	r3, #4
 8005252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005256:	e04a      	b.n	80052ee <UART_SetConfig+0x2e6>
 8005258:	2308      	movs	r3, #8
 800525a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800525e:	e046      	b.n	80052ee <UART_SetConfig+0x2e6>
 8005260:	2310      	movs	r3, #16
 8005262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005266:	e042      	b.n	80052ee <UART_SetConfig+0x2e6>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a17      	ldr	r2, [pc, #92]	@ (80052cc <UART_SetConfig+0x2c4>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d13a      	bne.n	80052e8 <UART_SetConfig+0x2e0>
 8005272:	4b18      	ldr	r3, [pc, #96]	@ (80052d4 <UART_SetConfig+0x2cc>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005278:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800527c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005280:	d01a      	beq.n	80052b8 <UART_SetConfig+0x2b0>
 8005282:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005286:	d81b      	bhi.n	80052c0 <UART_SetConfig+0x2b8>
 8005288:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800528c:	d00c      	beq.n	80052a8 <UART_SetConfig+0x2a0>
 800528e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005292:	d815      	bhi.n	80052c0 <UART_SetConfig+0x2b8>
 8005294:	2b00      	cmp	r3, #0
 8005296:	d003      	beq.n	80052a0 <UART_SetConfig+0x298>
 8005298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800529c:	d008      	beq.n	80052b0 <UART_SetConfig+0x2a8>
 800529e:	e00f      	b.n	80052c0 <UART_SetConfig+0x2b8>
 80052a0:	2300      	movs	r3, #0
 80052a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052a6:	e022      	b.n	80052ee <UART_SetConfig+0x2e6>
 80052a8:	2302      	movs	r3, #2
 80052aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ae:	e01e      	b.n	80052ee <UART_SetConfig+0x2e6>
 80052b0:	2304      	movs	r3, #4
 80052b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052b6:	e01a      	b.n	80052ee <UART_SetConfig+0x2e6>
 80052b8:	2308      	movs	r3, #8
 80052ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052be:	e016      	b.n	80052ee <UART_SetConfig+0x2e6>
 80052c0:	2310      	movs	r3, #16
 80052c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052c6:	e012      	b.n	80052ee <UART_SetConfig+0x2e6>
 80052c8:	efff69f3 	.word	0xefff69f3
 80052cc:	40008000 	.word	0x40008000
 80052d0:	40013800 	.word	0x40013800
 80052d4:	40021000 	.word	0x40021000
 80052d8:	40004400 	.word	0x40004400
 80052dc:	40004800 	.word	0x40004800
 80052e0:	40004c00 	.word	0x40004c00
 80052e4:	40005000 	.word	0x40005000
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a9f      	ldr	r2, [pc, #636]	@ (8005570 <UART_SetConfig+0x568>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d17a      	bne.n	80053ee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d824      	bhi.n	800534a <UART_SetConfig+0x342>
 8005300:	a201      	add	r2, pc, #4	@ (adr r2, 8005308 <UART_SetConfig+0x300>)
 8005302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005306:	bf00      	nop
 8005308:	0800532d 	.word	0x0800532d
 800530c:	0800534b 	.word	0x0800534b
 8005310:	08005335 	.word	0x08005335
 8005314:	0800534b 	.word	0x0800534b
 8005318:	0800533b 	.word	0x0800533b
 800531c:	0800534b 	.word	0x0800534b
 8005320:	0800534b 	.word	0x0800534b
 8005324:	0800534b 	.word	0x0800534b
 8005328:	08005343 	.word	0x08005343
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800532c:	f7fd fed4 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8005330:	61f8      	str	r0, [r7, #28]
        break;
 8005332:	e010      	b.n	8005356 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005334:	4b8f      	ldr	r3, [pc, #572]	@ (8005574 <UART_SetConfig+0x56c>)
 8005336:	61fb      	str	r3, [r7, #28]
        break;
 8005338:	e00d      	b.n	8005356 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800533a:	f7fd fe35 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 800533e:	61f8      	str	r0, [r7, #28]
        break;
 8005340:	e009      	b.n	8005356 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005346:	61fb      	str	r3, [r7, #28]
        break;
 8005348:	e005      	b.n	8005356 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800534a:	2300      	movs	r3, #0
 800534c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005354:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	2b00      	cmp	r3, #0
 800535a:	f000 80fb 	beq.w	8005554 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	685a      	ldr	r2, [r3, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	005b      	lsls	r3, r3, #1
 8005366:	4413      	add	r3, r2
 8005368:	69fa      	ldr	r2, [r7, #28]
 800536a:	429a      	cmp	r2, r3
 800536c:	d305      	bcc.n	800537a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	429a      	cmp	r2, r3
 8005378:	d903      	bls.n	8005382 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005380:	e0e8      	b.n	8005554 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	2200      	movs	r2, #0
 8005386:	461c      	mov	r4, r3
 8005388:	4615      	mov	r5, r2
 800538a:	f04f 0200 	mov.w	r2, #0
 800538e:	f04f 0300 	mov.w	r3, #0
 8005392:	022b      	lsls	r3, r5, #8
 8005394:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005398:	0222      	lsls	r2, r4, #8
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	6849      	ldr	r1, [r1, #4]
 800539e:	0849      	lsrs	r1, r1, #1
 80053a0:	2000      	movs	r0, #0
 80053a2:	4688      	mov	r8, r1
 80053a4:	4681      	mov	r9, r0
 80053a6:	eb12 0a08 	adds.w	sl, r2, r8
 80053aa:	eb43 0b09 	adc.w	fp, r3, r9
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	603b      	str	r3, [r7, #0]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053bc:	4650      	mov	r0, sl
 80053be:	4659      	mov	r1, fp
 80053c0:	f7fa ff06 	bl	80001d0 <__aeabi_uldivmod>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4613      	mov	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80053d2:	d308      	bcc.n	80053e6 <UART_SetConfig+0x3de>
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053da:	d204      	bcs.n	80053e6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	69ba      	ldr	r2, [r7, #24]
 80053e2:	60da      	str	r2, [r3, #12]
 80053e4:	e0b6      	b.n	8005554 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80053ec:	e0b2      	b.n	8005554 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	69db      	ldr	r3, [r3, #28]
 80053f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80053f6:	d15e      	bne.n	80054b6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80053f8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d828      	bhi.n	8005452 <UART_SetConfig+0x44a>
 8005400:	a201      	add	r2, pc, #4	@ (adr r2, 8005408 <UART_SetConfig+0x400>)
 8005402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005406:	bf00      	nop
 8005408:	0800542d 	.word	0x0800542d
 800540c:	08005435 	.word	0x08005435
 8005410:	0800543d 	.word	0x0800543d
 8005414:	08005453 	.word	0x08005453
 8005418:	08005443 	.word	0x08005443
 800541c:	08005453 	.word	0x08005453
 8005420:	08005453 	.word	0x08005453
 8005424:	08005453 	.word	0x08005453
 8005428:	0800544b 	.word	0x0800544b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800542c:	f7fd fe54 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 8005430:	61f8      	str	r0, [r7, #28]
        break;
 8005432:	e014      	b.n	800545e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005434:	f7fd fe66 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 8005438:	61f8      	str	r0, [r7, #28]
        break;
 800543a:	e010      	b.n	800545e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800543c:	4b4d      	ldr	r3, [pc, #308]	@ (8005574 <UART_SetConfig+0x56c>)
 800543e:	61fb      	str	r3, [r7, #28]
        break;
 8005440:	e00d      	b.n	800545e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005442:	f7fd fdb1 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8005446:	61f8      	str	r0, [r7, #28]
        break;
 8005448:	e009      	b.n	800545e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800544a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800544e:	61fb      	str	r3, [r7, #28]
        break;
 8005450:	e005      	b.n	800545e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800545c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d077      	beq.n	8005554 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	005a      	lsls	r2, r3, #1
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	085b      	lsrs	r3, r3, #1
 800546e:	441a      	add	r2, r3
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	fbb2 f3f3 	udiv	r3, r2, r3
 8005478:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	2b0f      	cmp	r3, #15
 800547e:	d916      	bls.n	80054ae <UART_SetConfig+0x4a6>
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005486:	d212      	bcs.n	80054ae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	b29b      	uxth	r3, r3
 800548c:	f023 030f 	bic.w	r3, r3, #15
 8005490:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	085b      	lsrs	r3, r3, #1
 8005496:	b29b      	uxth	r3, r3
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	b29a      	uxth	r2, r3
 800549e:	8afb      	ldrh	r3, [r7, #22]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	8afa      	ldrh	r2, [r7, #22]
 80054aa:	60da      	str	r2, [r3, #12]
 80054ac:	e052      	b.n	8005554 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80054b4:	e04e      	b.n	8005554 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80054b6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80054ba:	2b08      	cmp	r3, #8
 80054bc:	d827      	bhi.n	800550e <UART_SetConfig+0x506>
 80054be:	a201      	add	r2, pc, #4	@ (adr r2, 80054c4 <UART_SetConfig+0x4bc>)
 80054c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c4:	080054e9 	.word	0x080054e9
 80054c8:	080054f1 	.word	0x080054f1
 80054cc:	080054f9 	.word	0x080054f9
 80054d0:	0800550f 	.word	0x0800550f
 80054d4:	080054ff 	.word	0x080054ff
 80054d8:	0800550f 	.word	0x0800550f
 80054dc:	0800550f 	.word	0x0800550f
 80054e0:	0800550f 	.word	0x0800550f
 80054e4:	08005507 	.word	0x08005507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054e8:	f7fd fdf6 	bl	80030d8 <HAL_RCC_GetPCLK1Freq>
 80054ec:	61f8      	str	r0, [r7, #28]
        break;
 80054ee:	e014      	b.n	800551a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054f0:	f7fd fe08 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 80054f4:	61f8      	str	r0, [r7, #28]
        break;
 80054f6:	e010      	b.n	800551a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005574 <UART_SetConfig+0x56c>)
 80054fa:	61fb      	str	r3, [r7, #28]
        break;
 80054fc:	e00d      	b.n	800551a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054fe:	f7fd fd53 	bl	8002fa8 <HAL_RCC_GetSysClockFreq>
 8005502:	61f8      	str	r0, [r7, #28]
        break;
 8005504:	e009      	b.n	800551a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005506:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800550a:	61fb      	str	r3, [r7, #28]
        break;
 800550c:	e005      	b.n	800551a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005518:	bf00      	nop
    }

    if (pclk != 0U)
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d019      	beq.n	8005554 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	085a      	lsrs	r2, r3, #1
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	441a      	add	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005532:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b0f      	cmp	r3, #15
 8005538:	d909      	bls.n	800554e <UART_SetConfig+0x546>
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005540:	d205      	bcs.n	800554e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60da      	str	r2, [r3, #12]
 800554c:	e002      	b.n	8005554 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2200      	movs	r2, #0
 800555e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005560:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005564:	4618      	mov	r0, r3
 8005566:	3728      	adds	r7, #40	@ 0x28
 8005568:	46bd      	mov	sp, r7
 800556a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800556e:	bf00      	nop
 8005570:	40008000 	.word	0x40008000
 8005574:	00f42400 	.word	0x00f42400

08005578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005584:	f003 0308 	and.w	r3, r3, #8
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00a      	beq.n	80055a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d00a      	beq.n	80055c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	430a      	orrs	r2, r1
 80055c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055c8:	f003 0302 	and.w	r3, r3, #2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ea:	f003 0304 	and.w	r3, r3, #4
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560c:	f003 0310 	and.w	r3, r3, #16
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005654:	2b00      	cmp	r3, #0
 8005656:	d01a      	beq.n	800568e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005676:	d10a      	bne.n	800568e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00a      	beq.n	80056b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	605a      	str	r2, [r3, #4]
  }
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b098      	sub	sp, #96	@ 0x60
 80056c0:	af02      	add	r7, sp, #8
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80056cc:	f7fc fc4a 	bl	8001f64 <HAL_GetTick>
 80056d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f003 0308 	and.w	r3, r3, #8
 80056dc:	2b08      	cmp	r3, #8
 80056de:	d12e      	bne.n	800573e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056e8:	2200      	movs	r2, #0
 80056ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f88c 	bl	800580c <UART_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d021      	beq.n	800573e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005702:	e853 3f00 	ldrex	r3, [r3]
 8005706:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800570e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	461a      	mov	r2, r3
 8005716:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005718:	647b      	str	r3, [r7, #68]	@ 0x44
 800571a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800571e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005720:	e841 2300 	strex	r3, r2, [r1]
 8005724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1e6      	bne.n	80056fa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e062      	b.n	8005804 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b04      	cmp	r3, #4
 800574a:	d149      	bne.n	80057e0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800574c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005750:	9300      	str	r3, [sp, #0]
 8005752:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005754:	2200      	movs	r2, #0
 8005756:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 f856 	bl	800580c <UART_WaitOnFlagUntilTimeout>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d03c      	beq.n	80057e0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	623b      	str	r3, [r7, #32]
   return(result);
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800577a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	461a      	mov	r2, r3
 8005782:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005784:	633b      	str	r3, [r7, #48]	@ 0x30
 8005786:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005788:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800578a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800578c:	e841 2300 	strex	r3, r2, [r1]
 8005790:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1e6      	bne.n	8005766 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3308      	adds	r3, #8
 800579e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	e853 3f00 	ldrex	r3, [r3]
 80057a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	3308      	adds	r3, #8
 80057b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057b8:	61fa      	str	r2, [r7, #28]
 80057ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057bc:	69b9      	ldr	r1, [r7, #24]
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	e841 2300 	strex	r3, r2, [r1]
 80057c4:	617b      	str	r3, [r7, #20]
   return(result);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1e5      	bne.n	8005798 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e011      	b.n	8005804 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2220      	movs	r2, #32
 80057e4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2220      	movs	r2, #32
 80057ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2200      	movs	r2, #0
 80057f2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2200      	movs	r2, #0
 80057fe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3758      	adds	r7, #88	@ 0x58
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800581c:	e04f      	b.n	80058be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800581e:	69bb      	ldr	r3, [r7, #24]
 8005820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005824:	d04b      	beq.n	80058be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005826:	f7fc fb9d 	bl	8001f64 <HAL_GetTick>
 800582a:	4602      	mov	r2, r0
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	69ba      	ldr	r2, [r7, #24]
 8005832:	429a      	cmp	r2, r3
 8005834:	d302      	bcc.n	800583c <UART_WaitOnFlagUntilTimeout+0x30>
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d101      	bne.n	8005840 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e04e      	b.n	80058de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	d037      	beq.n	80058be <UART_WaitOnFlagUntilTimeout+0xb2>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b80      	cmp	r3, #128	@ 0x80
 8005852:	d034      	beq.n	80058be <UART_WaitOnFlagUntilTimeout+0xb2>
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	2b40      	cmp	r3, #64	@ 0x40
 8005858:	d031      	beq.n	80058be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	69db      	ldr	r3, [r3, #28]
 8005860:	f003 0308 	and.w	r3, r3, #8
 8005864:	2b08      	cmp	r3, #8
 8005866:	d110      	bne.n	800588a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	2208      	movs	r2, #8
 800586e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f000 f838 	bl	80058e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2208      	movs	r2, #8
 800587a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e029      	b.n	80058de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69db      	ldr	r3, [r3, #28]
 8005890:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005894:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005898:	d111      	bne.n	80058be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80058a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 f81e 	bl	80058e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2200      	movs	r2, #0
 80058b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e00f      	b.n	80058de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	69da      	ldr	r2, [r3, #28]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4013      	ands	r3, r2
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	429a      	cmp	r2, r3
 80058cc:	bf0c      	ite	eq
 80058ce:	2301      	moveq	r3, #1
 80058d0:	2300      	movne	r3, #0
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	79fb      	ldrb	r3, [r7, #7]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d0a0      	beq.n	800581e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b095      	sub	sp, #84	@ 0x54
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f6:	e853 3f00 	ldrex	r3, [r3]
 80058fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005902:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800590c:	643b      	str	r3, [r7, #64]	@ 0x40
 800590e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005910:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005912:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005914:	e841 2300 	strex	r3, r2, [r1]
 8005918:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800591a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e6      	bne.n	80058ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	3308      	adds	r3, #8
 8005926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005928:	6a3b      	ldr	r3, [r7, #32]
 800592a:	e853 3f00 	ldrex	r3, [r3]
 800592e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	f023 0301 	bic.w	r3, r3, #1
 8005936:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3308      	adds	r3, #8
 800593e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005940:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005948:	e841 2300 	strex	r3, r2, [r1]
 800594c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1e5      	bne.n	8005920 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005958:	2b01      	cmp	r3, #1
 800595a:	d118      	bne.n	800598e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	60bb      	str	r3, [r7, #8]
   return(result);
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	f023 0310 	bic.w	r3, r3, #16
 8005970:	647b      	str	r3, [r7, #68]	@ 0x44
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	461a      	mov	r2, r3
 8005978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800597a:	61bb      	str	r3, [r7, #24]
 800597c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597e:	6979      	ldr	r1, [r7, #20]
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	e841 2300 	strex	r3, r2, [r1]
 8005986:	613b      	str	r3, [r7, #16]
   return(result);
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1e6      	bne.n	800595c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2220      	movs	r2, #32
 8005992:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2200      	movs	r2, #0
 800599a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80059a2:	bf00      	nop
 80059a4:	3754      	adds	r7, #84	@ 0x54
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
	...

080059b0 <__NVIC_SetPriority>:
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	6039      	str	r1, [r7, #0]
 80059ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	db0a      	blt.n	80059da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	b2da      	uxtb	r2, r3
 80059c8:	490c      	ldr	r1, [pc, #48]	@ (80059fc <__NVIC_SetPriority+0x4c>)
 80059ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059ce:	0112      	lsls	r2, r2, #4
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	440b      	add	r3, r1
 80059d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80059d8:	e00a      	b.n	80059f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	b2da      	uxtb	r2, r3
 80059de:	4908      	ldr	r1, [pc, #32]	@ (8005a00 <__NVIC_SetPriority+0x50>)
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	3b04      	subs	r3, #4
 80059e8:	0112      	lsls	r2, r2, #4
 80059ea:	b2d2      	uxtb	r2, r2
 80059ec:	440b      	add	r3, r1
 80059ee:	761a      	strb	r2, [r3, #24]
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr
 80059fc:	e000e100 	.word	0xe000e100
 8005a00:	e000ed00 	.word	0xe000ed00

08005a04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005a04:	b580      	push	{r7, lr}
 8005a06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005a08:	4b05      	ldr	r3, [pc, #20]	@ (8005a20 <SysTick_Handler+0x1c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005a0c:	f001 fdd6 	bl	80075bc <xTaskGetSchedulerState>
 8005a10:	4603      	mov	r3, r0
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d001      	beq.n	8005a1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005a16:	f002 fc8f 	bl	8008338 <xPortSysTickHandler>
  }
}
 8005a1a:	bf00      	nop
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	e000e010 	.word	0xe000e010

08005a24 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a24:	b580      	push	{r7, lr}
 8005a26:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005a28:	2100      	movs	r1, #0
 8005a2a:	f06f 0004 	mvn.w	r0, #4
 8005a2e:	f7ff ffbf 	bl	80059b0 <__NVIC_SetPriority>
#endif
}
 8005a32:	bf00      	nop
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a3e:	f3ef 8305 	mrs	r3, IPSR
 8005a42:	603b      	str	r3, [r7, #0]
  return(result);
 8005a44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005a4a:	f06f 0305 	mvn.w	r3, #5
 8005a4e:	607b      	str	r3, [r7, #4]
 8005a50:	e00c      	b.n	8005a6c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a52:	4b0a      	ldr	r3, [pc, #40]	@ (8005a7c <osKernelInitialize+0x44>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a5a:	4b08      	ldr	r3, [pc, #32]	@ (8005a7c <osKernelInitialize+0x44>)
 8005a5c:	2201      	movs	r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a60:	2300      	movs	r3, #0
 8005a62:	607b      	str	r3, [r7, #4]
 8005a64:	e002      	b.n	8005a6c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005a66:	f04f 33ff 	mov.w	r3, #4294967295
 8005a6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005a6c:	687b      	ldr	r3, [r7, #4]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	200002f4 	.word	0x200002f4

08005a80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a86:	f3ef 8305 	mrs	r3, IPSR
 8005a8a:	603b      	str	r3, [r7, #0]
  return(result);
 8005a8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d003      	beq.n	8005a9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005a92:	f06f 0305 	mvn.w	r3, #5
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	e010      	b.n	8005abc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8005ac8 <osKernelStart+0x48>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d109      	bne.n	8005ab6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005aa2:	f7ff ffbf 	bl	8005a24 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005aa6:	4b08      	ldr	r3, [pc, #32]	@ (8005ac8 <osKernelStart+0x48>)
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005aac:	f001 f938 	bl	8006d20 <vTaskStartScheduler>
      stat = osOK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	607b      	str	r3, [r7, #4]
 8005ab4:	e002      	b.n	8005abc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005ab6:	f04f 33ff 	mov.w	r3, #4294967295
 8005aba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005abc:	687b      	ldr	r3, [r7, #4]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	200002f4 	.word	0x200002f4

08005acc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08e      	sub	sp, #56	@ 0x38
 8005ad0:	af04      	add	r7, sp, #16
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005adc:	f3ef 8305 	mrs	r3, IPSR
 8005ae0:	617b      	str	r3, [r7, #20]
  return(result);
 8005ae2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d17e      	bne.n	8005be6 <osThreadNew+0x11a>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d07b      	beq.n	8005be6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005aee:	2380      	movs	r3, #128	@ 0x80
 8005af0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005af2:	2318      	movs	r3, #24
 8005af4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295
 8005afe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d045      	beq.n	8005b92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d002      	beq.n	8005b14 <osThreadNew+0x48>
        name = attr->name;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d002      	beq.n	8005b22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	699b      	ldr	r3, [r3, #24]
 8005b20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b22:	69fb      	ldr	r3, [r7, #28]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <osThreadNew+0x6e>
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	2b38      	cmp	r3, #56	@ 0x38
 8005b2c:	d805      	bhi.n	8005b3a <osThreadNew+0x6e>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <osThreadNew+0x72>
        return (NULL);
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	e054      	b.n	8005be8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d003      	beq.n	8005b4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	695b      	ldr	r3, [r3, #20]
 8005b4a:	089b      	lsrs	r3, r3, #2
 8005b4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00e      	beq.n	8005b74 <osThreadNew+0xa8>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	2b5b      	cmp	r3, #91	@ 0x5b
 8005b5c:	d90a      	bls.n	8005b74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d006      	beq.n	8005b74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d002      	beq.n	8005b74 <osThreadNew+0xa8>
        mem = 1;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	e010      	b.n	8005b96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10c      	bne.n	8005b96 <osThreadNew+0xca>
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d108      	bne.n	8005b96 <osThreadNew+0xca>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d104      	bne.n	8005b96 <osThreadNew+0xca>
          mem = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	e001      	b.n	8005b96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d110      	bne.n	8005bbe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005ba0:	687a      	ldr	r2, [r7, #4]
 8005ba2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ba4:	9202      	str	r2, [sp, #8]
 8005ba6:	9301      	str	r3, [sp, #4]
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	9300      	str	r3, [sp, #0]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	6a3a      	ldr	r2, [r7, #32]
 8005bb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 fed8 	bl	8006968 <xTaskCreateStatic>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	613b      	str	r3, [r7, #16]
 8005bbc:	e013      	b.n	8005be6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d110      	bne.n	8005be6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	f107 0310 	add.w	r3, r7, #16
 8005bcc:	9301      	str	r3, [sp, #4]
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005bd6:	68f8      	ldr	r0, [r7, #12]
 8005bd8:	f000 ff26 	bl	8006a28 <xTaskCreate>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d001      	beq.n	8005be6 <osThreadNew+0x11a>
            hTask = NULL;
 8005be2:	2300      	movs	r3, #0
 8005be4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005be6:	693b      	ldr	r3, [r7, #16]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3728      	adds	r7, #40	@ 0x28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bf8:	f3ef 8305 	mrs	r3, IPSR
 8005bfc:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d003      	beq.n	8005c0c <osDelay+0x1c>
    stat = osErrorISR;
 8005c04:	f06f 0305 	mvn.w	r3, #5
 8005c08:	60fb      	str	r3, [r7, #12]
 8005c0a:	e007      	b.n	8005c1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d002      	beq.n	8005c1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f001 f84c 	bl	8006cb4 <vTaskDelay>
    }
  }

  return (stat);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}

08005c26 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b084      	sub	sp, #16
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f002 f99e 	bl	8007f70 <pvTimerGetTimerID>
 8005c34:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <TimerCallback+0x22>
    callb->func (callb->arg);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	6852      	ldr	r2, [r2, #4]
 8005c44:	4610      	mov	r0, r2
 8005c46:	4798      	blx	r3
  }
}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b08c      	sub	sp, #48	@ 0x30
 8005c54:	af02      	add	r7, sp, #8
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	607a      	str	r2, [r7, #4]
 8005c5a:	603b      	str	r3, [r7, #0]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8005c60:	2300      	movs	r3, #0
 8005c62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c64:	f3ef 8305 	mrs	r3, IPSR
 8005c68:	613b      	str	r3, [r7, #16]
  return(result);
 8005c6a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d163      	bne.n	8005d38 <osTimerNew+0xe8>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d060      	beq.n	8005d38 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8005c76:	2008      	movs	r0, #8
 8005c78:	f002 fbf0 	bl	800845c <pvPortMalloc>
 8005c7c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d059      	beq.n	8005d38 <osTimerNew+0xe8>
      callb->func = func;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005c90:	7afb      	ldrb	r3, [r7, #11]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d102      	bne.n	8005c9c <osTimerNew+0x4c>
        reload = pdFALSE;
 8005c96:	2300      	movs	r3, #0
 8005c98:	61fb      	str	r3, [r7, #28]
 8005c9a:	e001      	b.n	8005ca0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005ca0:	f04f 33ff 	mov.w	r3, #4294967295
 8005ca4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d01c      	beq.n	8005cea <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <osTimerNew+0x6e>
          name = attr->name;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d006      	beq.n	8005cd4 <osTimerNew+0x84>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	2b2b      	cmp	r3, #43	@ 0x2b
 8005ccc:	d902      	bls.n	8005cd4 <osTimerNew+0x84>
          mem = 1;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	61bb      	str	r3, [r7, #24]
 8005cd2:	e00c      	b.n	8005cee <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d108      	bne.n	8005cee <osTimerNew+0x9e>
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d104      	bne.n	8005cee <osTimerNew+0x9e>
            mem = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61bb      	str	r3, [r7, #24]
 8005ce8:	e001      	b.n	8005cee <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d10c      	bne.n	8005d0e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	689b      	ldr	r3, [r3, #8]
 8005cf8:	9301      	str	r3, [sp, #4]
 8005cfa:	4b12      	ldr	r3, [pc, #72]	@ (8005d44 <osTimerNew+0xf4>)
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	69fa      	ldr	r2, [r7, #28]
 8005d02:	2101      	movs	r1, #1
 8005d04:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d06:	f001 fda6 	bl	8007856 <xTimerCreateStatic>
 8005d0a:	6238      	str	r0, [r7, #32]
 8005d0c:	e00b      	b.n	8005d26 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d108      	bne.n	8005d26 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005d14:	4b0b      	ldr	r3, [pc, #44]	@ (8005d44 <osTimerNew+0xf4>)
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	69fa      	ldr	r2, [r7, #28]
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d20:	f001 fd78 	bl	8007814 <xTimerCreate>
 8005d24:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8005d26:	6a3b      	ldr	r3, [r7, #32]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d105      	bne.n	8005d38 <osTimerNew+0xe8>
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d002      	beq.n	8005d38 <osTimerNew+0xe8>
        vPortFree (callb);
 8005d32:	6978      	ldr	r0, [r7, #20]
 8005d34:	f002 fc60 	bl	80085f8 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8005d38:	6a3b      	ldr	r3, [r7, #32]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3728      	adds	r7, #40	@ 0x28
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	08005c27 	.word	0x08005c27

08005d48 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d56:	f3ef 8305 	mrs	r3, IPSR
 8005d5a:	60fb      	str	r3, [r7, #12]
  return(result);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <osTimerStart+0x22>
    stat = osErrorISR;
 8005d62:	f06f 0305 	mvn.w	r3, #5
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	e017      	b.n	8005d9a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d103      	bne.n	8005d78 <osTimerStart+0x30>
    stat = osErrorParameter;
 8005d70:	f06f 0303 	mvn.w	r3, #3
 8005d74:	617b      	str	r3, [r7, #20]
 8005d76:	e010      	b.n	8005d9a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	2104      	movs	r1, #4
 8005d82:	6938      	ldr	r0, [r7, #16]
 8005d84:	f001 fde4 	bl	8007950 <xTimerGenericCommand>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d102      	bne.n	8005d94 <osTimerStart+0x4c>
      stat = osOK;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	e002      	b.n	8005d9a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8005d94:	f06f 0302 	mvn.w	r3, #2
 8005d98:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005d9a:	697b      	ldr	r3, [r7, #20]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005da4:	b480      	push	{r7}
 8005da6:	b085      	sub	sp, #20
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4a07      	ldr	r2, [pc, #28]	@ (8005dd0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005db4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	4a06      	ldr	r2, [pc, #24]	@ (8005dd4 <vApplicationGetIdleTaskMemory+0x30>)
 8005dba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2280      	movs	r2, #128	@ 0x80
 8005dc0:	601a      	str	r2, [r3, #0]
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	200002f8 	.word	0x200002f8
 8005dd4:	20000354 	.word	0x20000354

08005dd8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	60f8      	str	r0, [r7, #12]
 8005de0:	60b9      	str	r1, [r7, #8]
 8005de2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	4a07      	ldr	r2, [pc, #28]	@ (8005e04 <vApplicationGetTimerTaskMemory+0x2c>)
 8005de8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	4a06      	ldr	r2, [pc, #24]	@ (8005e08 <vApplicationGetTimerTaskMemory+0x30>)
 8005dee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005df6:	601a      	str	r2, [r3, #0]
}
 8005df8:	bf00      	nop
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr
 8005e04:	20000554 	.word	0x20000554
 8005e08:	200005b0 	.word	0x200005b0

08005e0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f103 0208 	add.w	r2, r3, #8
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f04f 32ff 	mov.w	r2, #4294967295
 8005e24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f103 0208 	add.w	r2, r3, #8
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f103 0208 	add.w	r2, r3, #8
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005e5a:	bf00      	nop
 8005e5c:	370c      	adds	r7, #12
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
 8005e6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689a      	ldr	r2, [r3, #8]
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	683a      	ldr	r2, [r7, #0]
 8005e8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	683a      	ldr	r2, [r7, #0]
 8005e90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	1c5a      	adds	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	601a      	str	r2, [r3, #0]
}
 8005ea2:	bf00      	nop
 8005ea4:	3714      	adds	r7, #20
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005eae:	b480      	push	{r7}
 8005eb0:	b085      	sub	sp, #20
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec4:	d103      	bne.n	8005ece <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	e00c      	b.n	8005ee8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	60fb      	str	r3, [r7, #12]
 8005ed4:	e002      	b.n	8005edc <vListInsert+0x2e>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	60fb      	str	r3, [r7, #12]
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d2f6      	bcs.n	8005ed6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	683a      	ldr	r2, [r7, #0]
 8005ef6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	601a      	str	r2, [r3, #0]
}
 8005f14:	bf00      	nop
 8005f16:	3714      	adds	r7, #20
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	685b      	ldr	r3, [r3, #4]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	6892      	ldr	r2, [r2, #8]
 8005f36:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	6852      	ldr	r2, [r2, #4]
 8005f40:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	687a      	ldr	r2, [r7, #4]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d103      	bne.n	8005f54 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689a      	ldr	r2, [r3, #8]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	1e5a      	subs	r2, r3, #1
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3714      	adds	r7, #20
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d10b      	bne.n	8005fa0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8c:	f383 8811 	msr	BASEPRI, r3
 8005f90:	f3bf 8f6f 	isb	sy
 8005f94:	f3bf 8f4f 	dsb	sy
 8005f98:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f9a:	bf00      	nop
 8005f9c:	bf00      	nop
 8005f9e:	e7fd      	b.n	8005f9c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005fa0:	f002 f93a 	bl	8008218 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fac:	68f9      	ldr	r1, [r7, #12]
 8005fae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005fb0:	fb01 f303 	mul.w	r3, r1, r3
 8005fb4:	441a      	add	r2, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fd0:	3b01      	subs	r3, #1
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005fd6:	fb01 f303 	mul.w	r3, r1, r3
 8005fda:	441a      	add	r2, r3
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	22ff      	movs	r2, #255	@ 0xff
 8005fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	22ff      	movs	r2, #255	@ 0xff
 8005fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d114      	bne.n	8006020 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	691b      	ldr	r3, [r3, #16]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01a      	beq.n	8006034 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	3310      	adds	r3, #16
 8006002:	4618      	mov	r0, r3
 8006004:	f001 f91a 	bl	800723c <xTaskRemoveFromEventList>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d012      	beq.n	8006034 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800600e:	4b0d      	ldr	r3, [pc, #52]	@ (8006044 <xQueueGenericReset+0xd0>)
 8006010:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006014:	601a      	str	r2, [r3, #0]
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	e009      	b.n	8006034 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	3310      	adds	r3, #16
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff fef1 	bl	8005e0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3324      	adds	r3, #36	@ 0x24
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff feec 	bl	8005e0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006034:	f002 f922 	bl	800827c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006038:	2301      	movs	r3, #1
}
 800603a:	4618      	mov	r0, r3
 800603c:	3710      	adds	r7, #16
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	e000ed04 	.word	0xe000ed04

08006048 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08e      	sub	sp, #56	@ 0x38
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
 8006054:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10b      	bne.n	8006092 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800607a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607e:	f383 8811 	msr	BASEPRI, r3
 8006082:	f3bf 8f6f 	isb	sy
 8006086:	f3bf 8f4f 	dsb	sy
 800608a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800608c:	bf00      	nop
 800608e:	bf00      	nop
 8006090:	e7fd      	b.n	800608e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d002      	beq.n	800609e <xQueueGenericCreateStatic+0x56>
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <xQueueGenericCreateStatic+0x5a>
 800609e:	2301      	movs	r3, #1
 80060a0:	e000      	b.n	80060a4 <xQueueGenericCreateStatic+0x5c>
 80060a2:	2300      	movs	r3, #0
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d10b      	bne.n	80060c0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	623b      	str	r3, [r7, #32]
}
 80060ba:	bf00      	nop
 80060bc:	bf00      	nop
 80060be:	e7fd      	b.n	80060bc <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d102      	bne.n	80060cc <xQueueGenericCreateStatic+0x84>
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <xQueueGenericCreateStatic+0x88>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e000      	b.n	80060d2 <xQueueGenericCreateStatic+0x8a>
 80060d0:	2300      	movs	r3, #0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10b      	bne.n	80060ee <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	61fb      	str	r3, [r7, #28]
}
 80060e8:	bf00      	nop
 80060ea:	bf00      	nop
 80060ec:	e7fd      	b.n	80060ea <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80060ee:	2350      	movs	r3, #80	@ 0x50
 80060f0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	2b50      	cmp	r3, #80	@ 0x50
 80060f6:	d00b      	beq.n	8006110 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80060f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fc:	f383 8811 	msr	BASEPRI, r3
 8006100:	f3bf 8f6f 	isb	sy
 8006104:	f3bf 8f4f 	dsb	sy
 8006108:	61bb      	str	r3, [r7, #24]
}
 800610a:	bf00      	nop
 800610c:	bf00      	nop
 800610e:	e7fd      	b.n	800610c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006110:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00d      	beq.n	8006138 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800611c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611e:	2201      	movs	r2, #1
 8006120:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006124:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	4613      	mov	r3, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	68b9      	ldr	r1, [r7, #8]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	f000 f805 	bl	8006142 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006138:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800613a:	4618      	mov	r0, r3
 800613c:	3730      	adds	r7, #48	@ 0x30
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b084      	sub	sp, #16
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d103      	bne.n	800615e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	69ba      	ldr	r2, [r7, #24]
 800615a:	601a      	str	r2, [r3, #0]
 800615c:	e002      	b.n	8006164 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006164:	69bb      	ldr	r3, [r7, #24]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006170:	2101      	movs	r1, #1
 8006172:	69b8      	ldr	r0, [r7, #24]
 8006174:	f7ff fefe 	bl	8005f74 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006180:	bf00      	nop
 8006182:	3710      	adds	r7, #16
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b08e      	sub	sp, #56	@ 0x38
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
 8006194:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006196:	2300      	movs	r3, #0
 8006198:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800619e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10b      	bne.n	80061bc <xQueueGenericSend+0x34>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80061b6:	bf00      	nop
 80061b8:	bf00      	nop
 80061ba:	e7fd      	b.n	80061b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d103      	bne.n	80061ca <xQueueGenericSend+0x42>
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <xQueueGenericSend+0x46>
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <xQueueGenericSend+0x48>
 80061ce:	2300      	movs	r3, #0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10b      	bne.n	80061ec <xQueueGenericSend+0x64>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80061e6:	bf00      	nop
 80061e8:	bf00      	nop
 80061ea:	e7fd      	b.n	80061e8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d103      	bne.n	80061fa <xQueueGenericSend+0x72>
 80061f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d101      	bne.n	80061fe <xQueueGenericSend+0x76>
 80061fa:	2301      	movs	r3, #1
 80061fc:	e000      	b.n	8006200 <xQueueGenericSend+0x78>
 80061fe:	2300      	movs	r3, #0
 8006200:	2b00      	cmp	r3, #0
 8006202:	d10b      	bne.n	800621c <xQueueGenericSend+0x94>
	__asm volatile
 8006204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006208:	f383 8811 	msr	BASEPRI, r3
 800620c:	f3bf 8f6f 	isb	sy
 8006210:	f3bf 8f4f 	dsb	sy
 8006214:	623b      	str	r3, [r7, #32]
}
 8006216:	bf00      	nop
 8006218:	bf00      	nop
 800621a:	e7fd      	b.n	8006218 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800621c:	f001 f9ce 	bl	80075bc <xTaskGetSchedulerState>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d102      	bne.n	800622c <xQueueGenericSend+0xa4>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d101      	bne.n	8006230 <xQueueGenericSend+0xa8>
 800622c:	2301      	movs	r3, #1
 800622e:	e000      	b.n	8006232 <xQueueGenericSend+0xaa>
 8006230:	2300      	movs	r3, #0
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10b      	bne.n	800624e <xQueueGenericSend+0xc6>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	61fb      	str	r3, [r7, #28]
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	e7fd      	b.n	800624a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800624e:	f001 ffe3 	bl	8008218 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006254:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800625a:	429a      	cmp	r2, r3
 800625c:	d302      	bcc.n	8006264 <xQueueGenericSend+0xdc>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	2b02      	cmp	r3, #2
 8006262:	d129      	bne.n	80062b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006264:	683a      	ldr	r2, [r7, #0]
 8006266:	68b9      	ldr	r1, [r7, #8]
 8006268:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800626a:	f000 fa0f 	bl	800668c <prvCopyDataToQueue>
 800626e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006274:	2b00      	cmp	r3, #0
 8006276:	d010      	beq.n	800629a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627a:	3324      	adds	r3, #36	@ 0x24
 800627c:	4618      	mov	r0, r3
 800627e:	f000 ffdd 	bl	800723c <xTaskRemoveFromEventList>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d013      	beq.n	80062b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006288:	4b3f      	ldr	r3, [pc, #252]	@ (8006388 <xQueueGenericSend+0x200>)
 800628a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800628e:	601a      	str	r2, [r3, #0]
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	f3bf 8f6f 	isb	sy
 8006298:	e00a      	b.n	80062b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800629a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800629c:	2b00      	cmp	r3, #0
 800629e:	d007      	beq.n	80062b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80062a0:	4b39      	ldr	r3, [pc, #228]	@ (8006388 <xQueueGenericSend+0x200>)
 80062a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062a6:	601a      	str	r2, [r3, #0]
 80062a8:	f3bf 8f4f 	dsb	sy
 80062ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80062b0:	f001 ffe4 	bl	800827c <vPortExitCritical>
				return pdPASS;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e063      	b.n	8006380 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d103      	bne.n	80062c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80062be:	f001 ffdd 	bl	800827c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	e05c      	b.n	8006380 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80062c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d106      	bne.n	80062da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80062cc:	f107 0314 	add.w	r3, r7, #20
 80062d0:	4618      	mov	r0, r3
 80062d2:	f001 f817 	bl	8007304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80062d6:	2301      	movs	r3, #1
 80062d8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80062da:	f001 ffcf 	bl	800827c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80062de:	f000 fd87 	bl	8006df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80062e2:	f001 ff99 	bl	8008218 <vPortEnterCritical>
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062ec:	b25b      	sxtb	r3, r3
 80062ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062f2:	d103      	bne.n	80062fc <xQueueGenericSend+0x174>
 80062f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006302:	b25b      	sxtb	r3, r3
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006308:	d103      	bne.n	8006312 <xQueueGenericSend+0x18a>
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	2200      	movs	r2, #0
 800630e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006312:	f001 ffb3 	bl	800827c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006316:	1d3a      	adds	r2, r7, #4
 8006318:	f107 0314 	add.w	r3, r7, #20
 800631c:	4611      	mov	r1, r2
 800631e:	4618      	mov	r0, r3
 8006320:	f001 f806 	bl	8007330 <xTaskCheckForTimeOut>
 8006324:	4603      	mov	r3, r0
 8006326:	2b00      	cmp	r3, #0
 8006328:	d124      	bne.n	8006374 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800632a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800632c:	f000 faa6 	bl	800687c <prvIsQueueFull>
 8006330:	4603      	mov	r3, r0
 8006332:	2b00      	cmp	r3, #0
 8006334:	d018      	beq.n	8006368 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	3310      	adds	r3, #16
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	4611      	mov	r1, r2
 800633e:	4618      	mov	r0, r3
 8006340:	f000 ff2a 	bl	8007198 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006346:	f000 fa31 	bl	80067ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800634a:	f000 fd5f 	bl	8006e0c <xTaskResumeAll>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	f47f af7c 	bne.w	800624e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006356:	4b0c      	ldr	r3, [pc, #48]	@ (8006388 <xQueueGenericSend+0x200>)
 8006358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	f3bf 8f4f 	dsb	sy
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	e772      	b.n	800624e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006368:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800636a:	f000 fa1f 	bl	80067ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800636e:	f000 fd4d 	bl	8006e0c <xTaskResumeAll>
 8006372:	e76c      	b.n	800624e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006374:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006376:	f000 fa19 	bl	80067ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800637a:	f000 fd47 	bl	8006e0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800637e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006380:	4618      	mov	r0, r3
 8006382:	3738      	adds	r7, #56	@ 0x38
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	e000ed04 	.word	0xe000ed04

0800638c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b090      	sub	sp, #64	@ 0x40
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
 8006398:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800639e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d10b      	bne.n	80063bc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80063b6:	bf00      	nop
 80063b8:	bf00      	nop
 80063ba:	e7fd      	b.n	80063b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d103      	bne.n	80063ca <xQueueGenericSendFromISR+0x3e>
 80063c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <xQueueGenericSendFromISR+0x42>
 80063ca:	2301      	movs	r3, #1
 80063cc:	e000      	b.n	80063d0 <xQueueGenericSendFromISR+0x44>
 80063ce:	2300      	movs	r3, #0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d10b      	bne.n	80063ec <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80063e6:	bf00      	nop
 80063e8:	bf00      	nop
 80063ea:	e7fd      	b.n	80063e8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d103      	bne.n	80063fa <xQueueGenericSendFromISR+0x6e>
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d101      	bne.n	80063fe <xQueueGenericSendFromISR+0x72>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e000      	b.n	8006400 <xQueueGenericSendFromISR+0x74>
 80063fe:	2300      	movs	r3, #0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10b      	bne.n	800641c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	623b      	str	r3, [r7, #32]
}
 8006416:	bf00      	nop
 8006418:	bf00      	nop
 800641a:	e7fd      	b.n	8006418 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800641c:	f001 ffdc 	bl	80083d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006420:	f3ef 8211 	mrs	r2, BASEPRI
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	61fa      	str	r2, [r7, #28]
 8006436:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006438:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800643a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800643c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006444:	429a      	cmp	r2, r3
 8006446:	d302      	bcc.n	800644e <xQueueGenericSendFromISR+0xc2>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d12f      	bne.n	80064ae <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800644e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006450:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006454:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800645a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800645c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800645e:	683a      	ldr	r2, [r7, #0]
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006464:	f000 f912 	bl	800668c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006468:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d112      	bne.n	8006498 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006476:	2b00      	cmp	r3, #0
 8006478:	d016      	beq.n	80064a8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800647a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800647c:	3324      	adds	r3, #36	@ 0x24
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fedc 	bl	800723c <xTaskRemoveFromEventList>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d00e      	beq.n	80064a8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00b      	beq.n	80064a8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	601a      	str	r2, [r3, #0]
 8006496:	e007      	b.n	80064a8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006498:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800649c:	3301      	adds	r3, #1
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	b25a      	sxtb	r2, r3
 80064a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80064a8:	2301      	movs	r3, #1
 80064aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80064ac:	e001      	b.n	80064b2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064b4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80064bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80064be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3740      	adds	r7, #64	@ 0x40
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08c      	sub	sp, #48	@ 0x30
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80064d4:	2300      	movs	r3, #0
 80064d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80064dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10b      	bne.n	80064fa <xQueueReceive+0x32>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	623b      	str	r3, [r7, #32]
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop
 80064f8:	e7fd      	b.n	80064f6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d103      	bne.n	8006508 <xQueueReceive+0x40>
 8006500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006502:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <xQueueReceive+0x44>
 8006508:	2301      	movs	r3, #1
 800650a:	e000      	b.n	800650e <xQueueReceive+0x46>
 800650c:	2300      	movs	r3, #0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d10b      	bne.n	800652a <xQueueReceive+0x62>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	61fb      	str	r3, [r7, #28]
}
 8006524:	bf00      	nop
 8006526:	bf00      	nop
 8006528:	e7fd      	b.n	8006526 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800652a:	f001 f847 	bl	80075bc <xTaskGetSchedulerState>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d102      	bne.n	800653a <xQueueReceive+0x72>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <xQueueReceive+0x76>
 800653a:	2301      	movs	r3, #1
 800653c:	e000      	b.n	8006540 <xQueueReceive+0x78>
 800653e:	2300      	movs	r3, #0
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10b      	bne.n	800655c <xQueueReceive+0x94>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	61bb      	str	r3, [r7, #24]
}
 8006556:	bf00      	nop
 8006558:	bf00      	nop
 800655a:	e7fd      	b.n	8006558 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800655c:	f001 fe5c 	bl	8008218 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006562:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006564:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	2b00      	cmp	r3, #0
 800656a:	d01f      	beq.n	80065ac <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800656c:	68b9      	ldr	r1, [r7, #8]
 800656e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006570:	f000 f8f6 	bl	8006760 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	1e5a      	subs	r2, r3, #1
 8006578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800657c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657e:	691b      	ldr	r3, [r3, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00f      	beq.n	80065a4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006586:	3310      	adds	r3, #16
 8006588:	4618      	mov	r0, r3
 800658a:	f000 fe57 	bl	800723c <xTaskRemoveFromEventList>
 800658e:	4603      	mov	r3, r0
 8006590:	2b00      	cmp	r3, #0
 8006592:	d007      	beq.n	80065a4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006594:	4b3c      	ldr	r3, [pc, #240]	@ (8006688 <xQueueReceive+0x1c0>)
 8006596:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80065a4:	f001 fe6a 	bl	800827c <vPortExitCritical>
				return pdPASS;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e069      	b.n	8006680 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d103      	bne.n	80065ba <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065b2:	f001 fe63 	bl	800827c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80065b6:	2300      	movs	r3, #0
 80065b8:	e062      	b.n	8006680 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d106      	bne.n	80065ce <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065c0:	f107 0310 	add.w	r3, r7, #16
 80065c4:	4618      	mov	r0, r3
 80065c6:	f000 fe9d 	bl	8007304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065ca:	2301      	movs	r3, #1
 80065cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065ce:	f001 fe55 	bl	800827c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065d2:	f000 fc0d 	bl	8006df0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065d6:	f001 fe1f 	bl	8008218 <vPortEnterCritical>
 80065da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065e0:	b25b      	sxtb	r3, r3
 80065e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e6:	d103      	bne.n	80065f0 <xQueueReceive+0x128>
 80065e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065f6:	b25b      	sxtb	r3, r3
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065fc:	d103      	bne.n	8006606 <xQueueReceive+0x13e>
 80065fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006606:	f001 fe39 	bl	800827c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800660a:	1d3a      	adds	r2, r7, #4
 800660c:	f107 0310 	add.w	r3, r7, #16
 8006610:	4611      	mov	r1, r2
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fe8c 	bl	8007330 <xTaskCheckForTimeOut>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d123      	bne.n	8006666 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800661e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006620:	f000 f916 	bl	8006850 <prvIsQueueEmpty>
 8006624:	4603      	mov	r3, r0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d017      	beq.n	800665a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800662a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800662c:	3324      	adds	r3, #36	@ 0x24
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	4611      	mov	r1, r2
 8006632:	4618      	mov	r0, r3
 8006634:	f000 fdb0 	bl	8007198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006638:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800663a:	f000 f8b7 	bl	80067ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800663e:	f000 fbe5 	bl	8006e0c <xTaskResumeAll>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d189      	bne.n	800655c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006648:	4b0f      	ldr	r3, [pc, #60]	@ (8006688 <xQueueReceive+0x1c0>)
 800664a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800664e:	601a      	str	r2, [r3, #0]
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	f3bf 8f6f 	isb	sy
 8006658:	e780      	b.n	800655c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800665a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800665c:	f000 f8a6 	bl	80067ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006660:	f000 fbd4 	bl	8006e0c <xTaskResumeAll>
 8006664:	e77a      	b.n	800655c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006666:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006668:	f000 f8a0 	bl	80067ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800666c:	f000 fbce 	bl	8006e0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006670:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006672:	f000 f8ed 	bl	8006850 <prvIsQueueEmpty>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	f43f af6f 	beq.w	800655c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800667e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006680:	4618      	mov	r0, r3
 8006682:	3730      	adds	r7, #48	@ 0x30
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	e000ed04 	.word	0xe000ed04

0800668c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b086      	sub	sp, #24
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d10d      	bne.n	80066c6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d14d      	bne.n	800674e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 ff9e 	bl	80075f8 <xTaskPriorityDisinherit>
 80066bc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2200      	movs	r2, #0
 80066c2:	609a      	str	r2, [r3, #8]
 80066c4:	e043      	b.n	800674e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d119      	bne.n	8006700 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6858      	ldr	r0, [r3, #4]
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d4:	461a      	mov	r2, r3
 80066d6:	68b9      	ldr	r1, [r7, #8]
 80066d8:	f002 f8da 	bl	8008890 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e4:	441a      	add	r2, r3
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d32b      	bcc.n	800674e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	605a      	str	r2, [r3, #4]
 80066fe:	e026      	b.n	800674e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68d8      	ldr	r0, [r3, #12]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006708:	461a      	mov	r2, r3
 800670a:	68b9      	ldr	r1, [r7, #8]
 800670c:	f002 f8c0 	bl	8008890 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006718:	425b      	negs	r3, r3
 800671a:	441a      	add	r2, r3
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	68da      	ldr	r2, [r3, #12]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	429a      	cmp	r2, r3
 800672a:	d207      	bcs.n	800673c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006734:	425b      	negs	r3, r3
 8006736:	441a      	add	r2, r3
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b02      	cmp	r3, #2
 8006740:	d105      	bne.n	800674e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d002      	beq.n	800674e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	3b01      	subs	r3, #1
 800674c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006756:	697b      	ldr	r3, [r7, #20]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3718      	adds	r7, #24
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676e:	2b00      	cmp	r3, #0
 8006770:	d018      	beq.n	80067a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	68da      	ldr	r2, [r3, #12]
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677a:	441a      	add	r2, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68da      	ldr	r2, [r3, #12]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	429a      	cmp	r2, r3
 800678a:	d303      	bcc.n	8006794 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68d9      	ldr	r1, [r3, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679c:	461a      	mov	r2, r3
 800679e:	6838      	ldr	r0, [r7, #0]
 80067a0:	f002 f876 	bl	8008890 <memcpy>
	}
}
 80067a4:	bf00      	nop
 80067a6:	3708      	adds	r7, #8
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067b4:	f001 fd30 	bl	8008218 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067be:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067c0:	e011      	b.n	80067e6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d012      	beq.n	80067f0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	3324      	adds	r3, #36	@ 0x24
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fd34 	bl	800723c <xTaskRemoveFromEventList>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d001      	beq.n	80067de <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067da:	f000 fe0d 	bl	80073f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067de:	7bfb      	ldrb	r3, [r7, #15]
 80067e0:	3b01      	subs	r3, #1
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	dce9      	bgt.n	80067c2 <prvUnlockQueue+0x16>
 80067ee:	e000      	b.n	80067f2 <prvUnlockQueue+0x46>
					break;
 80067f0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	22ff      	movs	r2, #255	@ 0xff
 80067f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80067fa:	f001 fd3f 	bl	800827c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067fe:	f001 fd0b 	bl	8008218 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006808:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800680a:	e011      	b.n	8006830 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d012      	beq.n	800683a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3310      	adds	r3, #16
 8006818:	4618      	mov	r0, r3
 800681a:	f000 fd0f 	bl	800723c <xTaskRemoveFromEventList>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006824:	f000 fde8 	bl	80073f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	3b01      	subs	r3, #1
 800682c:	b2db      	uxtb	r3, r3
 800682e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006830:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006834:	2b00      	cmp	r3, #0
 8006836:	dce9      	bgt.n	800680c <prvUnlockQueue+0x60>
 8006838:	e000      	b.n	800683c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800683a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	22ff      	movs	r2, #255	@ 0xff
 8006840:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006844:	f001 fd1a 	bl	800827c <vPortExitCritical>
}
 8006848:	bf00      	nop
 800684a:	3710      	adds	r7, #16
 800684c:	46bd      	mov	sp, r7
 800684e:	bd80      	pop	{r7, pc}

08006850 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b084      	sub	sp, #16
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006858:	f001 fcde 	bl	8008218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006860:	2b00      	cmp	r3, #0
 8006862:	d102      	bne.n	800686a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006864:	2301      	movs	r3, #1
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e001      	b.n	800686e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800686e:	f001 fd05 	bl	800827c <vPortExitCritical>

	return xReturn;
 8006872:	68fb      	ldr	r3, [r7, #12]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006884:	f001 fcc8 	bl	8008218 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006890:	429a      	cmp	r2, r3
 8006892:	d102      	bne.n	800689a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006894:	2301      	movs	r3, #1
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	e001      	b.n	800689e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800689a:	2300      	movs	r3, #0
 800689c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800689e:	f001 fced 	bl	800827c <vPortExitCritical>

	return xReturn;
 80068a2:	68fb      	ldr	r3, [r7, #12]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068ac:	b480      	push	{r7}
 80068ae:	b085      	sub	sp, #20
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	e014      	b.n	80068e6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068bc:	4a0f      	ldr	r2, [pc, #60]	@ (80068fc <vQueueAddToRegistry+0x50>)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10b      	bne.n	80068e0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068c8:	490c      	ldr	r1, [pc, #48]	@ (80068fc <vQueueAddToRegistry+0x50>)
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	683a      	ldr	r2, [r7, #0]
 80068ce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068d2:	4a0a      	ldr	r2, [pc, #40]	@ (80068fc <vQueueAddToRegistry+0x50>)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	00db      	lsls	r3, r3, #3
 80068d8:	4413      	add	r3, r2
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068de:	e006      	b.n	80068ee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3301      	adds	r3, #1
 80068e4:	60fb      	str	r3, [r7, #12]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	2b07      	cmp	r3, #7
 80068ea:	d9e7      	bls.n	80068bc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068ec:	bf00      	nop
 80068ee:	bf00      	nop
 80068f0:	3714      	adds	r7, #20
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr
 80068fa:	bf00      	nop
 80068fc:	200009b0 	.word	0x200009b0

08006900 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006900:	b580      	push	{r7, lr}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006910:	f001 fc82 	bl	8008218 <vPortEnterCritical>
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800691a:	b25b      	sxtb	r3, r3
 800691c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006920:	d103      	bne.n	800692a <vQueueWaitForMessageRestricted+0x2a>
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006930:	b25b      	sxtb	r3, r3
 8006932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006936:	d103      	bne.n	8006940 <vQueueWaitForMessageRestricted+0x40>
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	2200      	movs	r2, #0
 800693c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006940:	f001 fc9c 	bl	800827c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006948:	2b00      	cmp	r3, #0
 800694a:	d106      	bne.n	800695a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	3324      	adds	r3, #36	@ 0x24
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	68b9      	ldr	r1, [r7, #8]
 8006954:	4618      	mov	r0, r3
 8006956:	f000 fc45 	bl	80071e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800695a:	6978      	ldr	r0, [r7, #20]
 800695c:	f7ff ff26 	bl	80067ac <prvUnlockQueue>
	}
 8006960:	bf00      	nop
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006968:	b580      	push	{r7, lr}
 800696a:	b08e      	sub	sp, #56	@ 0x38
 800696c:	af04      	add	r7, sp, #16
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
 8006974:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006978:	2b00      	cmp	r3, #0
 800697a:	d10b      	bne.n	8006994 <xTaskCreateStatic+0x2c>
	__asm volatile
 800697c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	623b      	str	r3, [r7, #32]
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10b      	bne.n	80069b2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	61fb      	str	r3, [r7, #28]
}
 80069ac:	bf00      	nop
 80069ae:	bf00      	nop
 80069b0:	e7fd      	b.n	80069ae <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069b2:	235c      	movs	r3, #92	@ 0x5c
 80069b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b5c      	cmp	r3, #92	@ 0x5c
 80069ba:	d00b      	beq.n	80069d4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	61bb      	str	r3, [r7, #24]
}
 80069ce:	bf00      	nop
 80069d0:	bf00      	nop
 80069d2:	e7fd      	b.n	80069d0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069d4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01e      	beq.n	8006a1a <xTaskCreateStatic+0xb2>
 80069dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01b      	beq.n	8006a1a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069ea:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	2202      	movs	r2, #2
 80069f0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069f4:	2300      	movs	r3, #0
 80069f6:	9303      	str	r3, [sp, #12]
 80069f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fa:	9302      	str	r3, [sp, #8]
 80069fc:	f107 0314 	add.w	r3, r7, #20
 8006a00:	9301      	str	r3, [sp, #4]
 8006a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	68b9      	ldr	r1, [r7, #8]
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 f850 	bl	8006ab2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a12:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a14:	f000 f8de 	bl	8006bd4 <prvAddNewTaskToReadyList>
 8006a18:	e001      	b.n	8006a1e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a1e:	697b      	ldr	r3, [r7, #20]
	}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3728      	adds	r7, #40	@ 0x28
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b08c      	sub	sp, #48	@ 0x30
 8006a2c:	af04      	add	r7, sp, #16
 8006a2e:	60f8      	str	r0, [r7, #12]
 8006a30:	60b9      	str	r1, [r7, #8]
 8006a32:	603b      	str	r3, [r7, #0]
 8006a34:	4613      	mov	r3, r2
 8006a36:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a38:	88fb      	ldrh	r3, [r7, #6]
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	f001 fd0d 	bl	800845c <pvPortMalloc>
 8006a42:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00e      	beq.n	8006a68 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a4a:	205c      	movs	r0, #92	@ 0x5c
 8006a4c:	f001 fd06 	bl	800845c <pvPortMalloc>
 8006a50:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a58:	69fb      	ldr	r3, [r7, #28]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a5e:	e005      	b.n	8006a6c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a60:	6978      	ldr	r0, [r7, #20]
 8006a62:	f001 fdc9 	bl	80085f8 <vPortFree>
 8006a66:	e001      	b.n	8006a6c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a68:	2300      	movs	r3, #0
 8006a6a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d017      	beq.n	8006aa2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a7a:	88fa      	ldrh	r2, [r7, #6]
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9303      	str	r3, [sp, #12]
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	9302      	str	r3, [sp, #8]
 8006a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	68b9      	ldr	r1, [r7, #8]
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f000 f80e 	bl	8006ab2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a96:	69f8      	ldr	r0, [r7, #28]
 8006a98:	f000 f89c 	bl	8006bd4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	e002      	b.n	8006aa8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006aa2:	f04f 33ff 	mov.w	r3, #4294967295
 8006aa6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006aa8:	69bb      	ldr	r3, [r7, #24]
	}
 8006aaa:	4618      	mov	r0, r3
 8006aac:	3720      	adds	r7, #32
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}

08006ab2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ab2:	b580      	push	{r7, lr}
 8006ab4:	b088      	sub	sp, #32
 8006ab6:	af00      	add	r7, sp, #0
 8006ab8:	60f8      	str	r0, [r7, #12]
 8006aba:	60b9      	str	r1, [r7, #8]
 8006abc:	607a      	str	r2, [r7, #4]
 8006abe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ac2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	461a      	mov	r2, r3
 8006aca:	21a5      	movs	r1, #165	@ 0xa5
 8006acc:	f001 feb4 	bl	8008838 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ad0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ad2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006ada:	3b01      	subs	r3, #1
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4413      	add	r3, r2
 8006ae0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	f023 0307 	bic.w	r3, r3, #7
 8006ae8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006aea:	69bb      	ldr	r3, [r7, #24]
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d00b      	beq.n	8006b0c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	617b      	str	r3, [r7, #20]
}
 8006b06:	bf00      	nop
 8006b08:	bf00      	nop
 8006b0a:	e7fd      	b.n	8006b08 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d01f      	beq.n	8006b52 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b12:	2300      	movs	r3, #0
 8006b14:	61fb      	str	r3, [r7, #28]
 8006b16:	e012      	b.n	8006b3e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	7819      	ldrb	r1, [r3, #0]
 8006b20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	3334      	adds	r3, #52	@ 0x34
 8006b28:	460a      	mov	r2, r1
 8006b2a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d006      	beq.n	8006b46 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b38:	69fb      	ldr	r3, [r7, #28]
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	2b0f      	cmp	r3, #15
 8006b42:	d9e9      	bls.n	8006b18 <prvInitialiseNewTask+0x66>
 8006b44:	e000      	b.n	8006b48 <prvInitialiseNewTask+0x96>
			{
				break;
 8006b46:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b50:	e003      	b.n	8006b5a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	2200      	movs	r2, #0
 8006b56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5c:	2b37      	cmp	r3, #55	@ 0x37
 8006b5e:	d901      	bls.n	8006b64 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b60:	2337      	movs	r3, #55	@ 0x37
 8006b62:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b68:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b6e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b72:	2200      	movs	r2, #0
 8006b74:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	f7ff f966 	bl	8005e4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b82:	3318      	adds	r3, #24
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff f961 	bl	8005e4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b8e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b92:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b98:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b9e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	68f9      	ldr	r1, [r7, #12]
 8006bb2:	69b8      	ldr	r0, [r7, #24]
 8006bb4:	f001 f9fe 	bl	8007fb4 <pxPortInitialiseStack>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bbc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d002      	beq.n	8006bca <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bca:	bf00      	nop
 8006bcc:	3720      	adds	r7, #32
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bdc:	f001 fb1c 	bl	8008218 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006be0:	4b2d      	ldr	r3, [pc, #180]	@ (8006c98 <prvAddNewTaskToReadyList+0xc4>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	3301      	adds	r3, #1
 8006be6:	4a2c      	ldr	r2, [pc, #176]	@ (8006c98 <prvAddNewTaskToReadyList+0xc4>)
 8006be8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006bea:	4b2c      	ldr	r3, [pc, #176]	@ (8006c9c <prvAddNewTaskToReadyList+0xc8>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d109      	bne.n	8006c06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8006c9c <prvAddNewTaskToReadyList+0xc8>)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006bf8:	4b27      	ldr	r3, [pc, #156]	@ (8006c98 <prvAddNewTaskToReadyList+0xc4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d110      	bne.n	8006c22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c00:	f000 fc1e 	bl	8007440 <prvInitialiseTaskLists>
 8006c04:	e00d      	b.n	8006c22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c06:	4b26      	ldr	r3, [pc, #152]	@ (8006ca0 <prvAddNewTaskToReadyList+0xcc>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c0e:	4b23      	ldr	r3, [pc, #140]	@ (8006c9c <prvAddNewTaskToReadyList+0xc8>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d802      	bhi.n	8006c22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c1c:	4a1f      	ldr	r2, [pc, #124]	@ (8006c9c <prvAddNewTaskToReadyList+0xc8>)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c22:	4b20      	ldr	r3, [pc, #128]	@ (8006ca4 <prvAddNewTaskToReadyList+0xd0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3301      	adds	r3, #1
 8006c28:	4a1e      	ldr	r2, [pc, #120]	@ (8006ca4 <prvAddNewTaskToReadyList+0xd0>)
 8006c2a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c2c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ca4 <prvAddNewTaskToReadyList+0xd0>)
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c38:	4b1b      	ldr	r3, [pc, #108]	@ (8006ca8 <prvAddNewTaskToReadyList+0xd4>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	429a      	cmp	r2, r3
 8006c3e:	d903      	bls.n	8006c48 <prvAddNewTaskToReadyList+0x74>
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c44:	4a18      	ldr	r2, [pc, #96]	@ (8006ca8 <prvAddNewTaskToReadyList+0xd4>)
 8006c46:	6013      	str	r3, [r2, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	4413      	add	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4a15      	ldr	r2, [pc, #84]	@ (8006cac <prvAddNewTaskToReadyList+0xd8>)
 8006c56:	441a      	add	r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	4610      	mov	r0, r2
 8006c60:	f7ff f901 	bl	8005e66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c64:	f001 fb0a 	bl	800827c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c68:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca0 <prvAddNewTaskToReadyList+0xcc>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d00e      	beq.n	8006c8e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c70:	4b0a      	ldr	r3, [pc, #40]	@ (8006c9c <prvAddNewTaskToReadyList+0xc8>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d207      	bcs.n	8006c8e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8006cb0 <prvAddNewTaskToReadyList+0xdc>)
 8006c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c84:	601a      	str	r2, [r3, #0]
 8006c86:	f3bf 8f4f 	dsb	sy
 8006c8a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c8e:	bf00      	nop
 8006c90:	3708      	adds	r7, #8
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
 8006c96:	bf00      	nop
 8006c98:	20000ec4 	.word	0x20000ec4
 8006c9c:	200009f0 	.word	0x200009f0
 8006ca0:	20000ed0 	.word	0x20000ed0
 8006ca4:	20000ee0 	.word	0x20000ee0
 8006ca8:	20000ecc 	.word	0x20000ecc
 8006cac:	200009f4 	.word	0x200009f4
 8006cb0:	e000ed04 	.word	0xe000ed04

08006cb4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d018      	beq.n	8006cf8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006cc6:	4b14      	ldr	r3, [pc, #80]	@ (8006d18 <vTaskDelay+0x64>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00b      	beq.n	8006ce6 <vTaskDelay+0x32>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	60bb      	str	r3, [r7, #8]
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	e7fd      	b.n	8006ce2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006ce6:	f000 f883 	bl	8006df0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006cea:	2100      	movs	r1, #0
 8006cec:	6878      	ldr	r0, [r7, #4]
 8006cee:	f000 fcf3 	bl	80076d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006cf2:	f000 f88b 	bl	8006e0c <xTaskResumeAll>
 8006cf6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d107      	bne.n	8006d0e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006cfe:	4b07      	ldr	r3, [pc, #28]	@ (8006d1c <vTaskDelay+0x68>)
 8006d00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d04:	601a      	str	r2, [r3, #0]
 8006d06:	f3bf 8f4f 	dsb	sy
 8006d0a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d0e:	bf00      	nop
 8006d10:	3710      	adds	r7, #16
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop
 8006d18:	20000eec 	.word	0x20000eec
 8006d1c:	e000ed04 	.word	0xe000ed04

08006d20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	@ 0x28
 8006d24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d2e:	463a      	mov	r2, r7
 8006d30:	1d39      	adds	r1, r7, #4
 8006d32:	f107 0308 	add.w	r3, r7, #8
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7ff f834 	bl	8005da4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d3c:	6839      	ldr	r1, [r7, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68ba      	ldr	r2, [r7, #8]
 8006d42:	9202      	str	r2, [sp, #8]
 8006d44:	9301      	str	r3, [sp, #4]
 8006d46:	2300      	movs	r3, #0
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	460a      	mov	r2, r1
 8006d4e:	4922      	ldr	r1, [pc, #136]	@ (8006dd8 <vTaskStartScheduler+0xb8>)
 8006d50:	4822      	ldr	r0, [pc, #136]	@ (8006ddc <vTaskStartScheduler+0xbc>)
 8006d52:	f7ff fe09 	bl	8006968 <xTaskCreateStatic>
 8006d56:	4603      	mov	r3, r0
 8006d58:	4a21      	ldr	r2, [pc, #132]	@ (8006de0 <vTaskStartScheduler+0xc0>)
 8006d5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d5c:	4b20      	ldr	r3, [pc, #128]	@ (8006de0 <vTaskStartScheduler+0xc0>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d002      	beq.n	8006d6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d64:	2301      	movs	r3, #1
 8006d66:	617b      	str	r3, [r7, #20]
 8006d68:	e001      	b.n	8006d6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d102      	bne.n	8006d7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d74:	f000 fd04 	bl	8007780 <xTimerCreateTimerTask>
 8006d78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d116      	bne.n	8006dae <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d84:	f383 8811 	msr	BASEPRI, r3
 8006d88:	f3bf 8f6f 	isb	sy
 8006d8c:	f3bf 8f4f 	dsb	sy
 8006d90:	613b      	str	r3, [r7, #16]
}
 8006d92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d94:	4b13      	ldr	r3, [pc, #76]	@ (8006de4 <vTaskStartScheduler+0xc4>)
 8006d96:	f04f 32ff 	mov.w	r2, #4294967295
 8006d9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d9c:	4b12      	ldr	r3, [pc, #72]	@ (8006de8 <vTaskStartScheduler+0xc8>)
 8006d9e:	2201      	movs	r2, #1
 8006da0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006da2:	4b12      	ldr	r3, [pc, #72]	@ (8006dec <vTaskStartScheduler+0xcc>)
 8006da4:	2200      	movs	r2, #0
 8006da6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006da8:	f001 f992 	bl	80080d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dac:	e00f      	b.n	8006dce <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db4:	d10b      	bne.n	8006dce <vTaskStartScheduler+0xae>
	__asm volatile
 8006db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dba:	f383 8811 	msr	BASEPRI, r3
 8006dbe:	f3bf 8f6f 	isb	sy
 8006dc2:	f3bf 8f4f 	dsb	sy
 8006dc6:	60fb      	str	r3, [r7, #12]
}
 8006dc8:	bf00      	nop
 8006dca:	bf00      	nop
 8006dcc:	e7fd      	b.n	8006dca <vTaskStartScheduler+0xaa>
}
 8006dce:	bf00      	nop
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
 8006dd6:	bf00      	nop
 8006dd8:	0800898c 	.word	0x0800898c
 8006ddc:	08007411 	.word	0x08007411
 8006de0:	20000ee8 	.word	0x20000ee8
 8006de4:	20000ee4 	.word	0x20000ee4
 8006de8:	20000ed0 	.word	0x20000ed0
 8006dec:	20000ec8 	.word	0x20000ec8

08006df0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006df0:	b480      	push	{r7}
 8006df2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006df4:	4b04      	ldr	r3, [pc, #16]	@ (8006e08 <vTaskSuspendAll+0x18>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	4a03      	ldr	r2, [pc, #12]	@ (8006e08 <vTaskSuspendAll+0x18>)
 8006dfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006dfe:	bf00      	nop
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	20000eec 	.word	0x20000eec

08006e0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e12:	2300      	movs	r3, #0
 8006e14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e16:	2300      	movs	r3, #0
 8006e18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e1a:	4b42      	ldr	r3, [pc, #264]	@ (8006f24 <xTaskResumeAll+0x118>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10b      	bne.n	8006e3a <xTaskResumeAll+0x2e>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	603b      	str	r3, [r7, #0]
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	e7fd      	b.n	8006e36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e3a:	f001 f9ed 	bl	8008218 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e3e:	4b39      	ldr	r3, [pc, #228]	@ (8006f24 <xTaskResumeAll+0x118>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3b01      	subs	r3, #1
 8006e44:	4a37      	ldr	r2, [pc, #220]	@ (8006f24 <xTaskResumeAll+0x118>)
 8006e46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e48:	4b36      	ldr	r3, [pc, #216]	@ (8006f24 <xTaskResumeAll+0x118>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d162      	bne.n	8006f16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006e50:	4b35      	ldr	r3, [pc, #212]	@ (8006f28 <xTaskResumeAll+0x11c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d05e      	beq.n	8006f16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e58:	e02f      	b.n	8006eba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e5a:	4b34      	ldr	r3, [pc, #208]	@ (8006f2c <xTaskResumeAll+0x120>)
 8006e5c:	68db      	ldr	r3, [r3, #12]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	3318      	adds	r3, #24
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff f85a 	bl	8005f20 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3304      	adds	r3, #4
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7ff f855 	bl	8005f20 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8006f30 <xTaskResumeAll+0x124>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d903      	bls.n	8006e8a <xTaskResumeAll+0x7e>
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e86:	4a2a      	ldr	r2, [pc, #168]	@ (8006f30 <xTaskResumeAll+0x124>)
 8006e88:	6013      	str	r3, [r2, #0]
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e8e:	4613      	mov	r3, r2
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	4a27      	ldr	r2, [pc, #156]	@ (8006f34 <xTaskResumeAll+0x128>)
 8006e98:	441a      	add	r2, r3
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4619      	mov	r1, r3
 8006ea0:	4610      	mov	r0, r2
 8006ea2:	f7fe ffe0 	bl	8005e66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eaa:	4b23      	ldr	r3, [pc, #140]	@ (8006f38 <xTaskResumeAll+0x12c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb0:	429a      	cmp	r2, r3
 8006eb2:	d302      	bcc.n	8006eba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006eb4:	4b21      	ldr	r3, [pc, #132]	@ (8006f3c <xTaskResumeAll+0x130>)
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eba:	4b1c      	ldr	r3, [pc, #112]	@ (8006f2c <xTaskResumeAll+0x120>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d1cb      	bne.n	8006e5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d001      	beq.n	8006ecc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006ec8:	f000 fb58 	bl	800757c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006ecc:	4b1c      	ldr	r3, [pc, #112]	@ (8006f40 <xTaskResumeAll+0x134>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d010      	beq.n	8006efa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006ed8:	f000 f846 	bl	8006f68 <xTaskIncrementTick>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d002      	beq.n	8006ee8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006ee2:	4b16      	ldr	r3, [pc, #88]	@ (8006f3c <xTaskResumeAll+0x130>)
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1f1      	bne.n	8006ed8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006ef4:	4b12      	ldr	r3, [pc, #72]	@ (8006f40 <xTaskResumeAll+0x134>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006efa:	4b10      	ldr	r3, [pc, #64]	@ (8006f3c <xTaskResumeAll+0x130>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d009      	beq.n	8006f16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f02:	2301      	movs	r3, #1
 8006f04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f06:	4b0f      	ldr	r3, [pc, #60]	@ (8006f44 <xTaskResumeAll+0x138>)
 8006f08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f16:	f001 f9b1 	bl	800827c <vPortExitCritical>

	return xAlreadyYielded;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3710      	adds	r7, #16
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20000eec 	.word	0x20000eec
 8006f28:	20000ec4 	.word	0x20000ec4
 8006f2c:	20000e84 	.word	0x20000e84
 8006f30:	20000ecc 	.word	0x20000ecc
 8006f34:	200009f4 	.word	0x200009f4
 8006f38:	200009f0 	.word	0x200009f0
 8006f3c:	20000ed8 	.word	0x20000ed8
 8006f40:	20000ed4 	.word	0x20000ed4
 8006f44:	e000ed04 	.word	0xe000ed04

08006f48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006f4e:	4b05      	ldr	r3, [pc, #20]	@ (8006f64 <xTaskGetTickCount+0x1c>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f54:	687b      	ldr	r3, [r7, #4]
}
 8006f56:	4618      	mov	r0, r3
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr
 8006f62:	bf00      	nop
 8006f64:	20000ec8 	.word	0x20000ec8

08006f68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b086      	sub	sp, #24
 8006f6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f72:	4b4f      	ldr	r3, [pc, #316]	@ (80070b0 <xTaskIncrementTick+0x148>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f040 8090 	bne.w	800709c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f7c:	4b4d      	ldr	r3, [pc, #308]	@ (80070b4 <xTaskIncrementTick+0x14c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f84:	4a4b      	ldr	r2, [pc, #300]	@ (80070b4 <xTaskIncrementTick+0x14c>)
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d121      	bne.n	8006fd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f90:	4b49      	ldr	r3, [pc, #292]	@ (80070b8 <xTaskIncrementTick+0x150>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d00b      	beq.n	8006fb2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8006f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f9e:	f383 8811 	msr	BASEPRI, r3
 8006fa2:	f3bf 8f6f 	isb	sy
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	603b      	str	r3, [r7, #0]
}
 8006fac:	bf00      	nop
 8006fae:	bf00      	nop
 8006fb0:	e7fd      	b.n	8006fae <xTaskIncrementTick+0x46>
 8006fb2:	4b41      	ldr	r3, [pc, #260]	@ (80070b8 <xTaskIncrementTick+0x150>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	60fb      	str	r3, [r7, #12]
 8006fb8:	4b40      	ldr	r3, [pc, #256]	@ (80070bc <xTaskIncrementTick+0x154>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a3e      	ldr	r2, [pc, #248]	@ (80070b8 <xTaskIncrementTick+0x150>)
 8006fbe:	6013      	str	r3, [r2, #0]
 8006fc0:	4a3e      	ldr	r2, [pc, #248]	@ (80070bc <xTaskIncrementTick+0x154>)
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	6013      	str	r3, [r2, #0]
 8006fc6:	4b3e      	ldr	r3, [pc, #248]	@ (80070c0 <xTaskIncrementTick+0x158>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3301      	adds	r3, #1
 8006fcc:	4a3c      	ldr	r2, [pc, #240]	@ (80070c0 <xTaskIncrementTick+0x158>)
 8006fce:	6013      	str	r3, [r2, #0]
 8006fd0:	f000 fad4 	bl	800757c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80070c4 <xTaskIncrementTick+0x15c>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	693a      	ldr	r2, [r7, #16]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d349      	bcc.n	8007072 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006fde:	4b36      	ldr	r3, [pc, #216]	@ (80070b8 <xTaskIncrementTick+0x150>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d104      	bne.n	8006ff2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe8:	4b36      	ldr	r3, [pc, #216]	@ (80070c4 <xTaskIncrementTick+0x15c>)
 8006fea:	f04f 32ff 	mov.w	r2, #4294967295
 8006fee:	601a      	str	r2, [r3, #0]
					break;
 8006ff0:	e03f      	b.n	8007072 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ff2:	4b31      	ldr	r3, [pc, #196]	@ (80070b8 <xTaskIncrementTick+0x150>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	68db      	ldr	r3, [r3, #12]
 8006ffa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007002:	693a      	ldr	r2, [r7, #16]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	429a      	cmp	r2, r3
 8007008:	d203      	bcs.n	8007012 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800700a:	4a2e      	ldr	r2, [pc, #184]	@ (80070c4 <xTaskIncrementTick+0x15c>)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007010:	e02f      	b.n	8007072 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	3304      	adds	r3, #4
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe ff82 	bl	8005f20 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007020:	2b00      	cmp	r3, #0
 8007022:	d004      	beq.n	800702e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	3318      	adds	r3, #24
 8007028:	4618      	mov	r0, r3
 800702a:	f7fe ff79 	bl	8005f20 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007032:	4b25      	ldr	r3, [pc, #148]	@ (80070c8 <xTaskIncrementTick+0x160>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	429a      	cmp	r2, r3
 8007038:	d903      	bls.n	8007042 <xTaskIncrementTick+0xda>
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703e:	4a22      	ldr	r2, [pc, #136]	@ (80070c8 <xTaskIncrementTick+0x160>)
 8007040:	6013      	str	r3, [r2, #0]
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007046:	4613      	mov	r3, r2
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4413      	add	r3, r2
 800704c:	009b      	lsls	r3, r3, #2
 800704e:	4a1f      	ldr	r2, [pc, #124]	@ (80070cc <xTaskIncrementTick+0x164>)
 8007050:	441a      	add	r2, r3
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	3304      	adds	r3, #4
 8007056:	4619      	mov	r1, r3
 8007058:	4610      	mov	r0, r2
 800705a:	f7fe ff04 	bl	8005e66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007062:	4b1b      	ldr	r3, [pc, #108]	@ (80070d0 <xTaskIncrementTick+0x168>)
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007068:	429a      	cmp	r2, r3
 800706a:	d3b8      	bcc.n	8006fde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800706c:	2301      	movs	r3, #1
 800706e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007070:	e7b5      	b.n	8006fde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007072:	4b17      	ldr	r3, [pc, #92]	@ (80070d0 <xTaskIncrementTick+0x168>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007078:	4914      	ldr	r1, [pc, #80]	@ (80070cc <xTaskIncrementTick+0x164>)
 800707a:	4613      	mov	r3, r2
 800707c:	009b      	lsls	r3, r3, #2
 800707e:	4413      	add	r3, r2
 8007080:	009b      	lsls	r3, r3, #2
 8007082:	440b      	add	r3, r1
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d901      	bls.n	800708e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800708a:	2301      	movs	r3, #1
 800708c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800708e:	4b11      	ldr	r3, [pc, #68]	@ (80070d4 <xTaskIncrementTick+0x16c>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d007      	beq.n	80070a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007096:	2301      	movs	r3, #1
 8007098:	617b      	str	r3, [r7, #20]
 800709a:	e004      	b.n	80070a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800709c:	4b0e      	ldr	r3, [pc, #56]	@ (80070d8 <xTaskIncrementTick+0x170>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3301      	adds	r3, #1
 80070a2:	4a0d      	ldr	r2, [pc, #52]	@ (80070d8 <xTaskIncrementTick+0x170>)
 80070a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80070a6:	697b      	ldr	r3, [r7, #20]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3718      	adds	r7, #24
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	20000eec 	.word	0x20000eec
 80070b4:	20000ec8 	.word	0x20000ec8
 80070b8:	20000e7c 	.word	0x20000e7c
 80070bc:	20000e80 	.word	0x20000e80
 80070c0:	20000edc 	.word	0x20000edc
 80070c4:	20000ee4 	.word	0x20000ee4
 80070c8:	20000ecc 	.word	0x20000ecc
 80070cc:	200009f4 	.word	0x200009f4
 80070d0:	200009f0 	.word	0x200009f0
 80070d4:	20000ed8 	.word	0x20000ed8
 80070d8:	20000ed4 	.word	0x20000ed4

080070dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80070e2:	4b28      	ldr	r3, [pc, #160]	@ (8007184 <vTaskSwitchContext+0xa8>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80070ea:	4b27      	ldr	r3, [pc, #156]	@ (8007188 <vTaskSwitchContext+0xac>)
 80070ec:	2201      	movs	r2, #1
 80070ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80070f0:	e042      	b.n	8007178 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80070f2:	4b25      	ldr	r3, [pc, #148]	@ (8007188 <vTaskSwitchContext+0xac>)
 80070f4:	2200      	movs	r2, #0
 80070f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070f8:	4b24      	ldr	r3, [pc, #144]	@ (800718c <vTaskSwitchContext+0xb0>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	60fb      	str	r3, [r7, #12]
 80070fe:	e011      	b.n	8007124 <vTaskSwitchContext+0x48>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d10b      	bne.n	800711e <vTaskSwitchContext+0x42>
	__asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	607b      	str	r3, [r7, #4]
}
 8007118:	bf00      	nop
 800711a:	bf00      	nop
 800711c:	e7fd      	b.n	800711a <vTaskSwitchContext+0x3e>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3b01      	subs	r3, #1
 8007122:	60fb      	str	r3, [r7, #12]
 8007124:	491a      	ldr	r1, [pc, #104]	@ (8007190 <vTaskSwitchContext+0xb4>)
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	440b      	add	r3, r1
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0e3      	beq.n	8007100 <vTaskSwitchContext+0x24>
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	4613      	mov	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4413      	add	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4a13      	ldr	r2, [pc, #76]	@ (8007190 <vTaskSwitchContext+0xb4>)
 8007144:	4413      	add	r3, r2
 8007146:	60bb      	str	r3, [r7, #8]
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	685b      	ldr	r3, [r3, #4]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	605a      	str	r2, [r3, #4]
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	685a      	ldr	r2, [r3, #4]
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	3308      	adds	r3, #8
 800715a:	429a      	cmp	r2, r3
 800715c:	d104      	bne.n	8007168 <vTaskSwitchContext+0x8c>
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	685a      	ldr	r2, [r3, #4]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	605a      	str	r2, [r3, #4]
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	68db      	ldr	r3, [r3, #12]
 800716e:	4a09      	ldr	r2, [pc, #36]	@ (8007194 <vTaskSwitchContext+0xb8>)
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	4a06      	ldr	r2, [pc, #24]	@ (800718c <vTaskSwitchContext+0xb0>)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6013      	str	r3, [r2, #0]
}
 8007178:	bf00      	nop
 800717a:	3714      	adds	r7, #20
 800717c:	46bd      	mov	sp, r7
 800717e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007182:	4770      	bx	lr
 8007184:	20000eec 	.word	0x20000eec
 8007188:	20000ed8 	.word	0x20000ed8
 800718c:	20000ecc 	.word	0x20000ecc
 8007190:	200009f4 	.word	0x200009f4
 8007194:	200009f0 	.word	0x200009f0

08007198 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d10b      	bne.n	80071c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80071a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ac:	f383 8811 	msr	BASEPRI, r3
 80071b0:	f3bf 8f6f 	isb	sy
 80071b4:	f3bf 8f4f 	dsb	sy
 80071b8:	60fb      	str	r3, [r7, #12]
}
 80071ba:	bf00      	nop
 80071bc:	bf00      	nop
 80071be:	e7fd      	b.n	80071bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071c0:	4b07      	ldr	r3, [pc, #28]	@ (80071e0 <vTaskPlaceOnEventList+0x48>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	3318      	adds	r3, #24
 80071c6:	4619      	mov	r1, r3
 80071c8:	6878      	ldr	r0, [r7, #4]
 80071ca:	f7fe fe70 	bl	8005eae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80071ce:	2101      	movs	r1, #1
 80071d0:	6838      	ldr	r0, [r7, #0]
 80071d2:	f000 fa81 	bl	80076d8 <prvAddCurrentTaskToDelayedList>
}
 80071d6:	bf00      	nop
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	200009f0 	.word	0x200009f0

080071e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10b      	bne.n	800720e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80071f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fa:	f383 8811 	msr	BASEPRI, r3
 80071fe:	f3bf 8f6f 	isb	sy
 8007202:	f3bf 8f4f 	dsb	sy
 8007206:	617b      	str	r3, [r7, #20]
}
 8007208:	bf00      	nop
 800720a:	bf00      	nop
 800720c:	e7fd      	b.n	800720a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800720e:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <vTaskPlaceOnEventListRestricted+0x54>)
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	3318      	adds	r3, #24
 8007214:	4619      	mov	r1, r3
 8007216:	68f8      	ldr	r0, [r7, #12]
 8007218:	f7fe fe25 	bl	8005e66 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d002      	beq.n	8007228 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007222:	f04f 33ff 	mov.w	r3, #4294967295
 8007226:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007228:	6879      	ldr	r1, [r7, #4]
 800722a:	68b8      	ldr	r0, [r7, #8]
 800722c:	f000 fa54 	bl	80076d8 <prvAddCurrentTaskToDelayedList>
	}
 8007230:	bf00      	nop
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	200009f0 	.word	0x200009f0

0800723c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b086      	sub	sp, #24
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	68db      	ldr	r3, [r3, #12]
 800724a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10b      	bne.n	800726a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007256:	f383 8811 	msr	BASEPRI, r3
 800725a:	f3bf 8f6f 	isb	sy
 800725e:	f3bf 8f4f 	dsb	sy
 8007262:	60fb      	str	r3, [r7, #12]
}
 8007264:	bf00      	nop
 8007266:	bf00      	nop
 8007268:	e7fd      	b.n	8007266 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	3318      	adds	r3, #24
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe fe56 	bl	8005f20 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007274:	4b1d      	ldr	r3, [pc, #116]	@ (80072ec <xTaskRemoveFromEventList+0xb0>)
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d11d      	bne.n	80072b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	3304      	adds	r3, #4
 8007280:	4618      	mov	r0, r3
 8007282:	f7fe fe4d 	bl	8005f20 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800728a:	4b19      	ldr	r3, [pc, #100]	@ (80072f0 <xTaskRemoveFromEventList+0xb4>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	429a      	cmp	r2, r3
 8007290:	d903      	bls.n	800729a <xTaskRemoveFromEventList+0x5e>
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007296:	4a16      	ldr	r2, [pc, #88]	@ (80072f0 <xTaskRemoveFromEventList+0xb4>)
 8007298:	6013      	str	r3, [r2, #0]
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800729e:	4613      	mov	r3, r2
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	4413      	add	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4a13      	ldr	r2, [pc, #76]	@ (80072f4 <xTaskRemoveFromEventList+0xb8>)
 80072a8:	441a      	add	r2, r3
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f7fe fdd8 	bl	8005e66 <vListInsertEnd>
 80072b6:	e005      	b.n	80072c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	3318      	adds	r3, #24
 80072bc:	4619      	mov	r1, r3
 80072be:	480e      	ldr	r0, [pc, #56]	@ (80072f8 <xTaskRemoveFromEventList+0xbc>)
 80072c0:	f7fe fdd1 	bl	8005e66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072c8:	4b0c      	ldr	r3, [pc, #48]	@ (80072fc <xTaskRemoveFromEventList+0xc0>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d905      	bls.n	80072de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80072d2:	2301      	movs	r3, #1
 80072d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80072d6:	4b0a      	ldr	r3, [pc, #40]	@ (8007300 <xTaskRemoveFromEventList+0xc4>)
 80072d8:	2201      	movs	r2, #1
 80072da:	601a      	str	r2, [r3, #0]
 80072dc:	e001      	b.n	80072e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80072de:	2300      	movs	r3, #0
 80072e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80072e2:	697b      	ldr	r3, [r7, #20]
}
 80072e4:	4618      	mov	r0, r3
 80072e6:	3718      	adds	r7, #24
 80072e8:	46bd      	mov	sp, r7
 80072ea:	bd80      	pop	{r7, pc}
 80072ec:	20000eec 	.word	0x20000eec
 80072f0:	20000ecc 	.word	0x20000ecc
 80072f4:	200009f4 	.word	0x200009f4
 80072f8:	20000e84 	.word	0x20000e84
 80072fc:	200009f0 	.word	0x200009f0
 8007300:	20000ed8 	.word	0x20000ed8

08007304 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800730c:	4b06      	ldr	r3, [pc, #24]	@ (8007328 <vTaskInternalSetTimeOutState+0x24>)
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007314:	4b05      	ldr	r3, [pc, #20]	@ (800732c <vTaskInternalSetTimeOutState+0x28>)
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	605a      	str	r2, [r3, #4]
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	20000edc 	.word	0x20000edc
 800732c:	20000ec8 	.word	0x20000ec8

08007330 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10b      	bne.n	8007358 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	613b      	str	r3, [r7, #16]
}
 8007352:	bf00      	nop
 8007354:	bf00      	nop
 8007356:	e7fd      	b.n	8007354 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10b      	bne.n	8007376 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800735e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007362:	f383 8811 	msr	BASEPRI, r3
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	f3bf 8f4f 	dsb	sy
 800736e:	60fb      	str	r3, [r7, #12]
}
 8007370:	bf00      	nop
 8007372:	bf00      	nop
 8007374:	e7fd      	b.n	8007372 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007376:	f000 ff4f 	bl	8008218 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800737a:	4b1d      	ldr	r3, [pc, #116]	@ (80073f0 <xTaskCheckForTimeOut+0xc0>)
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	69ba      	ldr	r2, [r7, #24]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007392:	d102      	bne.n	800739a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007394:	2300      	movs	r3, #0
 8007396:	61fb      	str	r3, [r7, #28]
 8007398:	e023      	b.n	80073e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	4b15      	ldr	r3, [pc, #84]	@ (80073f4 <xTaskCheckForTimeOut+0xc4>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d007      	beq.n	80073b6 <xTaskCheckForTimeOut+0x86>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	69ba      	ldr	r2, [r7, #24]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d302      	bcc.n	80073b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80073b0:	2301      	movs	r3, #1
 80073b2:	61fb      	str	r3, [r7, #28]
 80073b4:	e015      	b.n	80073e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	697a      	ldr	r2, [r7, #20]
 80073bc:	429a      	cmp	r2, r3
 80073be:	d20b      	bcs.n	80073d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	681a      	ldr	r2, [r3, #0]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	1ad2      	subs	r2, r2, r3
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f7ff ff99 	bl	8007304 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	61fb      	str	r3, [r7, #28]
 80073d6:	e004      	b.n	80073e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	2200      	movs	r2, #0
 80073dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80073de:	2301      	movs	r3, #1
 80073e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80073e2:	f000 ff4b 	bl	800827c <vPortExitCritical>

	return xReturn;
 80073e6:	69fb      	ldr	r3, [r7, #28]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3720      	adds	r7, #32
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	20000ec8 	.word	0x20000ec8
 80073f4:	20000edc 	.word	0x20000edc

080073f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073f8:	b480      	push	{r7}
 80073fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073fc:	4b03      	ldr	r3, [pc, #12]	@ (800740c <vTaskMissedYield+0x14>)
 80073fe:	2201      	movs	r2, #1
 8007400:	601a      	str	r2, [r3, #0]
}
 8007402:	bf00      	nop
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr
 800740c:	20000ed8 	.word	0x20000ed8

08007410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007418:	f000 f852 	bl	80074c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800741c:	4b06      	ldr	r3, [pc, #24]	@ (8007438 <prvIdleTask+0x28>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d9f9      	bls.n	8007418 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007424:	4b05      	ldr	r3, [pc, #20]	@ (800743c <prvIdleTask+0x2c>)
 8007426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800742a:	601a      	str	r2, [r3, #0]
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007434:	e7f0      	b.n	8007418 <prvIdleTask+0x8>
 8007436:	bf00      	nop
 8007438:	200009f4 	.word	0x200009f4
 800743c:	e000ed04 	.word	0xe000ed04

08007440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b082      	sub	sp, #8
 8007444:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007446:	2300      	movs	r3, #0
 8007448:	607b      	str	r3, [r7, #4]
 800744a:	e00c      	b.n	8007466 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	4613      	mov	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4413      	add	r3, r2
 8007454:	009b      	lsls	r3, r3, #2
 8007456:	4a12      	ldr	r2, [pc, #72]	@ (80074a0 <prvInitialiseTaskLists+0x60>)
 8007458:	4413      	add	r3, r2
 800745a:	4618      	mov	r0, r3
 800745c:	f7fe fcd6 	bl	8005e0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	3301      	adds	r3, #1
 8007464:	607b      	str	r3, [r7, #4]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b37      	cmp	r3, #55	@ 0x37
 800746a:	d9ef      	bls.n	800744c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800746c:	480d      	ldr	r0, [pc, #52]	@ (80074a4 <prvInitialiseTaskLists+0x64>)
 800746e:	f7fe fccd 	bl	8005e0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007472:	480d      	ldr	r0, [pc, #52]	@ (80074a8 <prvInitialiseTaskLists+0x68>)
 8007474:	f7fe fcca 	bl	8005e0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007478:	480c      	ldr	r0, [pc, #48]	@ (80074ac <prvInitialiseTaskLists+0x6c>)
 800747a:	f7fe fcc7 	bl	8005e0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800747e:	480c      	ldr	r0, [pc, #48]	@ (80074b0 <prvInitialiseTaskLists+0x70>)
 8007480:	f7fe fcc4 	bl	8005e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007484:	480b      	ldr	r0, [pc, #44]	@ (80074b4 <prvInitialiseTaskLists+0x74>)
 8007486:	f7fe fcc1 	bl	8005e0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800748a:	4b0b      	ldr	r3, [pc, #44]	@ (80074b8 <prvInitialiseTaskLists+0x78>)
 800748c:	4a05      	ldr	r2, [pc, #20]	@ (80074a4 <prvInitialiseTaskLists+0x64>)
 800748e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007490:	4b0a      	ldr	r3, [pc, #40]	@ (80074bc <prvInitialiseTaskLists+0x7c>)
 8007492:	4a05      	ldr	r2, [pc, #20]	@ (80074a8 <prvInitialiseTaskLists+0x68>)
 8007494:	601a      	str	r2, [r3, #0]
}
 8007496:	bf00      	nop
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
 800749e:	bf00      	nop
 80074a0:	200009f4 	.word	0x200009f4
 80074a4:	20000e54 	.word	0x20000e54
 80074a8:	20000e68 	.word	0x20000e68
 80074ac:	20000e84 	.word	0x20000e84
 80074b0:	20000e98 	.word	0x20000e98
 80074b4:	20000eb0 	.word	0x20000eb0
 80074b8:	20000e7c 	.word	0x20000e7c
 80074bc:	20000e80 	.word	0x20000e80

080074c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b082      	sub	sp, #8
 80074c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074c6:	e019      	b.n	80074fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80074c8:	f000 fea6 	bl	8008218 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074cc:	4b10      	ldr	r3, [pc, #64]	@ (8007510 <prvCheckTasksWaitingTermination+0x50>)
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	68db      	ldr	r3, [r3, #12]
 80074d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	3304      	adds	r3, #4
 80074d8:	4618      	mov	r0, r3
 80074da:	f7fe fd21 	bl	8005f20 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80074de:	4b0d      	ldr	r3, [pc, #52]	@ (8007514 <prvCheckTasksWaitingTermination+0x54>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	3b01      	subs	r3, #1
 80074e4:	4a0b      	ldr	r2, [pc, #44]	@ (8007514 <prvCheckTasksWaitingTermination+0x54>)
 80074e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80074e8:	4b0b      	ldr	r3, [pc, #44]	@ (8007518 <prvCheckTasksWaitingTermination+0x58>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3b01      	subs	r3, #1
 80074ee:	4a0a      	ldr	r2, [pc, #40]	@ (8007518 <prvCheckTasksWaitingTermination+0x58>)
 80074f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80074f2:	f000 fec3 	bl	800827c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f810 	bl	800751c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074fc:	4b06      	ldr	r3, [pc, #24]	@ (8007518 <prvCheckTasksWaitingTermination+0x58>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e1      	bne.n	80074c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	3708      	adds	r7, #8
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000e98 	.word	0x20000e98
 8007514:	20000ec4 	.word	0x20000ec4
 8007518:	20000eac 	.word	0x20000eac

0800751c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800752a:	2b00      	cmp	r3, #0
 800752c:	d108      	bne.n	8007540 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007532:	4618      	mov	r0, r3
 8007534:	f001 f860 	bl	80085f8 <vPortFree>
				vPortFree( pxTCB );
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 f85d 	bl	80085f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800753e:	e019      	b.n	8007574 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007546:	2b01      	cmp	r3, #1
 8007548:	d103      	bne.n	8007552 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f001 f854 	bl	80085f8 <vPortFree>
	}
 8007550:	e010      	b.n	8007574 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007558:	2b02      	cmp	r3, #2
 800755a:	d00b      	beq.n	8007574 <prvDeleteTCB+0x58>
	__asm volatile
 800755c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007560:	f383 8811 	msr	BASEPRI, r3
 8007564:	f3bf 8f6f 	isb	sy
 8007568:	f3bf 8f4f 	dsb	sy
 800756c:	60fb      	str	r3, [r7, #12]
}
 800756e:	bf00      	nop
 8007570:	bf00      	nop
 8007572:	e7fd      	b.n	8007570 <prvDeleteTCB+0x54>
	}
 8007574:	bf00      	nop
 8007576:	3710      	adds	r7, #16
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007582:	4b0c      	ldr	r3, [pc, #48]	@ (80075b4 <prvResetNextTaskUnblockTime+0x38>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d104      	bne.n	8007596 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800758c:	4b0a      	ldr	r3, [pc, #40]	@ (80075b8 <prvResetNextTaskUnblockTime+0x3c>)
 800758e:	f04f 32ff 	mov.w	r2, #4294967295
 8007592:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007594:	e008      	b.n	80075a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007596:	4b07      	ldr	r3, [pc, #28]	@ (80075b4 <prvResetNextTaskUnblockTime+0x38>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	685b      	ldr	r3, [r3, #4]
 80075a4:	4a04      	ldr	r2, [pc, #16]	@ (80075b8 <prvResetNextTaskUnblockTime+0x3c>)
 80075a6:	6013      	str	r3, [r2, #0]
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr
 80075b4:	20000e7c 	.word	0x20000e7c
 80075b8:	20000ee4 	.word	0x20000ee4

080075bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80075c2:	4b0b      	ldr	r3, [pc, #44]	@ (80075f0 <xTaskGetSchedulerState+0x34>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d102      	bne.n	80075d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80075ca:	2301      	movs	r3, #1
 80075cc:	607b      	str	r3, [r7, #4]
 80075ce:	e008      	b.n	80075e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075d0:	4b08      	ldr	r3, [pc, #32]	@ (80075f4 <xTaskGetSchedulerState+0x38>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d102      	bne.n	80075de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80075d8:	2302      	movs	r3, #2
 80075da:	607b      	str	r3, [r7, #4]
 80075dc:	e001      	b.n	80075e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075de:	2300      	movs	r3, #0
 80075e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075e2:	687b      	ldr	r3, [r7, #4]
	}
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	20000ed0 	.word	0x20000ed0
 80075f4:	20000eec 	.word	0x20000eec

080075f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007604:	2300      	movs	r3, #0
 8007606:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d058      	beq.n	80076c0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800760e:	4b2f      	ldr	r3, [pc, #188]	@ (80076cc <xTaskPriorityDisinherit+0xd4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	693a      	ldr	r2, [r7, #16]
 8007614:	429a      	cmp	r2, r3
 8007616:	d00b      	beq.n	8007630 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007618:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800761c:	f383 8811 	msr	BASEPRI, r3
 8007620:	f3bf 8f6f 	isb	sy
 8007624:	f3bf 8f4f 	dsb	sy
 8007628:	60fb      	str	r3, [r7, #12]
}
 800762a:	bf00      	nop
 800762c:	bf00      	nop
 800762e:	e7fd      	b.n	800762c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10b      	bne.n	8007650 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	60bb      	str	r3, [r7, #8]
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	e7fd      	b.n	800764c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007654:	1e5a      	subs	r2, r3, #1
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007662:	429a      	cmp	r2, r3
 8007664:	d02c      	beq.n	80076c0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800766a:	2b00      	cmp	r3, #0
 800766c:	d128      	bne.n	80076c0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	3304      	adds	r3, #4
 8007672:	4618      	mov	r0, r3
 8007674:	f7fe fc54 	bl	8005f20 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007684:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800768c:	693b      	ldr	r3, [r7, #16]
 800768e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007690:	4b0f      	ldr	r3, [pc, #60]	@ (80076d0 <xTaskPriorityDisinherit+0xd8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	429a      	cmp	r2, r3
 8007696:	d903      	bls.n	80076a0 <xTaskPriorityDisinherit+0xa8>
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769c:	4a0c      	ldr	r2, [pc, #48]	@ (80076d0 <xTaskPriorityDisinherit+0xd8>)
 800769e:	6013      	str	r3, [r2, #0]
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076a4:	4613      	mov	r3, r2
 80076a6:	009b      	lsls	r3, r3, #2
 80076a8:	4413      	add	r3, r2
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4a09      	ldr	r2, [pc, #36]	@ (80076d4 <xTaskPriorityDisinherit+0xdc>)
 80076ae:	441a      	add	r2, r3
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	3304      	adds	r3, #4
 80076b4:	4619      	mov	r1, r3
 80076b6:	4610      	mov	r0, r2
 80076b8:	f7fe fbd5 	bl	8005e66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80076bc:	2301      	movs	r3, #1
 80076be:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80076c0:	697b      	ldr	r3, [r7, #20]
	}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3718      	adds	r7, #24
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	200009f0 	.word	0x200009f0
 80076d0:	20000ecc 	.word	0x20000ecc
 80076d4:	200009f4 	.word	0x200009f4

080076d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b084      	sub	sp, #16
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076e2:	4b21      	ldr	r3, [pc, #132]	@ (8007768 <prvAddCurrentTaskToDelayedList+0x90>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076e8:	4b20      	ldr	r3, [pc, #128]	@ (800776c <prvAddCurrentTaskToDelayedList+0x94>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3304      	adds	r3, #4
 80076ee:	4618      	mov	r0, r3
 80076f0:	f7fe fc16 	bl	8005f20 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fa:	d10a      	bne.n	8007712 <prvAddCurrentTaskToDelayedList+0x3a>
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d007      	beq.n	8007712 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007702:	4b1a      	ldr	r3, [pc, #104]	@ (800776c <prvAddCurrentTaskToDelayedList+0x94>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	3304      	adds	r3, #4
 8007708:	4619      	mov	r1, r3
 800770a:	4819      	ldr	r0, [pc, #100]	@ (8007770 <prvAddCurrentTaskToDelayedList+0x98>)
 800770c:	f7fe fbab 	bl	8005e66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007710:	e026      	b.n	8007760 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007712:	68fa      	ldr	r2, [r7, #12]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4413      	add	r3, r2
 8007718:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800771a:	4b14      	ldr	r3, [pc, #80]	@ (800776c <prvAddCurrentTaskToDelayedList+0x94>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	68ba      	ldr	r2, [r7, #8]
 8007720:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	429a      	cmp	r2, r3
 8007728:	d209      	bcs.n	800773e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800772a:	4b12      	ldr	r3, [pc, #72]	@ (8007774 <prvAddCurrentTaskToDelayedList+0x9c>)
 800772c:	681a      	ldr	r2, [r3, #0]
 800772e:	4b0f      	ldr	r3, [pc, #60]	@ (800776c <prvAddCurrentTaskToDelayedList+0x94>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f7fe fbb9 	bl	8005eae <vListInsert>
}
 800773c:	e010      	b.n	8007760 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800773e:	4b0e      	ldr	r3, [pc, #56]	@ (8007778 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	4b0a      	ldr	r3, [pc, #40]	@ (800776c <prvAddCurrentTaskToDelayedList+0x94>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	3304      	adds	r3, #4
 8007748:	4619      	mov	r1, r3
 800774a:	4610      	mov	r0, r2
 800774c:	f7fe fbaf 	bl	8005eae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007750:	4b0a      	ldr	r3, [pc, #40]	@ (800777c <prvAddCurrentTaskToDelayedList+0xa4>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	429a      	cmp	r2, r3
 8007758:	d202      	bcs.n	8007760 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800775a:	4a08      	ldr	r2, [pc, #32]	@ (800777c <prvAddCurrentTaskToDelayedList+0xa4>)
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6013      	str	r3, [r2, #0]
}
 8007760:	bf00      	nop
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	20000ec8 	.word	0x20000ec8
 800776c:	200009f0 	.word	0x200009f0
 8007770:	20000eb0 	.word	0x20000eb0
 8007774:	20000e80 	.word	0x20000e80
 8007778:	20000e7c 	.word	0x20000e7c
 800777c:	20000ee4 	.word	0x20000ee4

08007780 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b08a      	sub	sp, #40	@ 0x28
 8007784:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007786:	2300      	movs	r3, #0
 8007788:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800778a:	f000 fbb1 	bl	8007ef0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800778e:	4b1d      	ldr	r3, [pc, #116]	@ (8007804 <xTimerCreateTimerTask+0x84>)
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d021      	beq.n	80077da <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007796:	2300      	movs	r3, #0
 8007798:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800779a:	2300      	movs	r3, #0
 800779c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800779e:	1d3a      	adds	r2, r7, #4
 80077a0:	f107 0108 	add.w	r1, r7, #8
 80077a4:	f107 030c 	add.w	r3, r7, #12
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fe fb15 	bl	8005dd8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80077ae:	6879      	ldr	r1, [r7, #4]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	9202      	str	r2, [sp, #8]
 80077b6:	9301      	str	r3, [sp, #4]
 80077b8:	2302      	movs	r3, #2
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	2300      	movs	r3, #0
 80077be:	460a      	mov	r2, r1
 80077c0:	4911      	ldr	r1, [pc, #68]	@ (8007808 <xTimerCreateTimerTask+0x88>)
 80077c2:	4812      	ldr	r0, [pc, #72]	@ (800780c <xTimerCreateTimerTask+0x8c>)
 80077c4:	f7ff f8d0 	bl	8006968 <xTaskCreateStatic>
 80077c8:	4603      	mov	r3, r0
 80077ca:	4a11      	ldr	r2, [pc, #68]	@ (8007810 <xTimerCreateTimerTask+0x90>)
 80077cc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077ce:	4b10      	ldr	r3, [pc, #64]	@ (8007810 <xTimerCreateTimerTask+0x90>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d001      	beq.n	80077da <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077d6:	2301      	movs	r3, #1
 80077d8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d10b      	bne.n	80077f8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	613b      	str	r3, [r7, #16]
}
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	e7fd      	b.n	80077f4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077f8:	697b      	ldr	r3, [r7, #20]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20000f20 	.word	0x20000f20
 8007808:	08008994 	.word	0x08008994
 800780c:	08007a89 	.word	0x08007a89
 8007810:	20000f24 	.word	0x20000f24

08007814 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af02      	add	r7, sp, #8
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007822:	202c      	movs	r0, #44	@ 0x2c
 8007824:	f000 fe1a 	bl	800845c <pvPortMalloc>
 8007828:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00d      	beq.n	800784c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	9301      	str	r3, [sp, #4]
 800783c:	6a3b      	ldr	r3, [r7, #32]
 800783e:	9300      	str	r3, [sp, #0]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	68b9      	ldr	r1, [r7, #8]
 8007846:	68f8      	ldr	r0, [r7, #12]
 8007848:	f000 f845 	bl	80078d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800784c:	697b      	ldr	r3, [r7, #20]
	}
 800784e:	4618      	mov	r0, r3
 8007850:	3718      	adds	r7, #24
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}

08007856 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007856:	b580      	push	{r7, lr}
 8007858:	b08a      	sub	sp, #40	@ 0x28
 800785a:	af02      	add	r7, sp, #8
 800785c:	60f8      	str	r0, [r7, #12]
 800785e:	60b9      	str	r1, [r7, #8]
 8007860:	607a      	str	r2, [r7, #4]
 8007862:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007864:	232c      	movs	r3, #44	@ 0x2c
 8007866:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	2b2c      	cmp	r3, #44	@ 0x2c
 800786c:	d00b      	beq.n	8007886 <xTimerCreateStatic+0x30>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	61bb      	str	r3, [r7, #24]
}
 8007880:	bf00      	nop
 8007882:	bf00      	nop
 8007884:	e7fd      	b.n	8007882 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007886:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788a:	2b00      	cmp	r3, #0
 800788c:	d10b      	bne.n	80078a6 <xTimerCreateStatic+0x50>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	617b      	str	r3, [r7, #20]
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 80078a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078a8:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00d      	beq.n	80078cc <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	2202      	movs	r2, #2
 80078b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	9301      	str	r3, [sp, #4]
 80078bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	68b9      	ldr	r1, [r7, #8]
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 f805 	bl	80078d6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80078cc:	69fb      	ldr	r3, [r7, #28]
	}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3720      	adds	r7, #32
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b086      	sub	sp, #24
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	60b9      	str	r1, [r7, #8]
 80078e0:	607a      	str	r2, [r7, #4]
 80078e2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80078e4:	68bb      	ldr	r3, [r7, #8]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d10b      	bne.n	8007902 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80078ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ee:	f383 8811 	msr	BASEPRI, r3
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	f3bf 8f4f 	dsb	sy
 80078fa:	617b      	str	r3, [r7, #20]
}
 80078fc:	bf00      	nop
 80078fe:	bf00      	nop
 8007900:	e7fd      	b.n	80078fe <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007904:	2b00      	cmp	r3, #0
 8007906:	d01e      	beq.n	8007946 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007908:	f000 faf2 	bl	8007ef0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800790c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791a:	683a      	ldr	r2, [r7, #0]
 800791c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	6a3a      	ldr	r2, [r7, #32]
 8007922:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007926:	3304      	adds	r3, #4
 8007928:	4618      	mov	r0, r3
 800792a:	f7fe fa8f 	bl	8005e4c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d008      	beq.n	8007946 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007936:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800793a:	f043 0304 	orr.w	r3, r3, #4
 800793e:	b2da      	uxtb	r2, r3
 8007940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007942:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8007946:	bf00      	nop
 8007948:	3718      	adds	r7, #24
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
	...

08007950 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08a      	sub	sp, #40	@ 0x28
 8007954:	af00      	add	r7, sp, #0
 8007956:	60f8      	str	r0, [r7, #12]
 8007958:	60b9      	str	r1, [r7, #8]
 800795a:	607a      	str	r2, [r7, #4]
 800795c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800795e:	2300      	movs	r3, #0
 8007960:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d10b      	bne.n	8007980 <xTimerGenericCommand+0x30>
	__asm volatile
 8007968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796c:	f383 8811 	msr	BASEPRI, r3
 8007970:	f3bf 8f6f 	isb	sy
 8007974:	f3bf 8f4f 	dsb	sy
 8007978:	623b      	str	r3, [r7, #32]
}
 800797a:	bf00      	nop
 800797c:	bf00      	nop
 800797e:	e7fd      	b.n	800797c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007980:	4b19      	ldr	r3, [pc, #100]	@ (80079e8 <xTimerGenericCommand+0x98>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d02a      	beq.n	80079de <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2b05      	cmp	r3, #5
 8007998:	dc18      	bgt.n	80079cc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800799a:	f7ff fe0f 	bl	80075bc <xTaskGetSchedulerState>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d109      	bne.n	80079b8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079a4:	4b10      	ldr	r3, [pc, #64]	@ (80079e8 <xTimerGenericCommand+0x98>)
 80079a6:	6818      	ldr	r0, [r3, #0]
 80079a8:	f107 0110 	add.w	r1, r7, #16
 80079ac:	2300      	movs	r3, #0
 80079ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80079b0:	f7fe fbea 	bl	8006188 <xQueueGenericSend>
 80079b4:	6278      	str	r0, [r7, #36]	@ 0x24
 80079b6:	e012      	b.n	80079de <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079b8:	4b0b      	ldr	r3, [pc, #44]	@ (80079e8 <xTimerGenericCommand+0x98>)
 80079ba:	6818      	ldr	r0, [r3, #0]
 80079bc:	f107 0110 	add.w	r1, r7, #16
 80079c0:	2300      	movs	r3, #0
 80079c2:	2200      	movs	r2, #0
 80079c4:	f7fe fbe0 	bl	8006188 <xQueueGenericSend>
 80079c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80079ca:	e008      	b.n	80079de <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079cc:	4b06      	ldr	r3, [pc, #24]	@ (80079e8 <xTimerGenericCommand+0x98>)
 80079ce:	6818      	ldr	r0, [r3, #0]
 80079d0:	f107 0110 	add.w	r1, r7, #16
 80079d4:	2300      	movs	r3, #0
 80079d6:	683a      	ldr	r2, [r7, #0]
 80079d8:	f7fe fcd8 	bl	800638c <xQueueGenericSendFromISR>
 80079dc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80079de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3728      	adds	r7, #40	@ 0x28
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}
 80079e8:	20000f20 	.word	0x20000f20

080079ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b088      	sub	sp, #32
 80079f0:	af02      	add	r7, sp, #8
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079f6:	4b23      	ldr	r3, [pc, #140]	@ (8007a84 <prvProcessExpiredTimer+0x98>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68db      	ldr	r3, [r3, #12]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7fe fa8b 	bl	8005f20 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d023      	beq.n	8007a60 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	699a      	ldr	r2, [r3, #24]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	18d1      	adds	r1, r2, r3
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	683a      	ldr	r2, [r7, #0]
 8007a24:	6978      	ldr	r0, [r7, #20]
 8007a26:	f000 f8d5 	bl	8007bd4 <prvInsertTimerInActiveList>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d020      	beq.n	8007a72 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a30:	2300      	movs	r3, #0
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	2300      	movs	r3, #0
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	2100      	movs	r1, #0
 8007a3a:	6978      	ldr	r0, [r7, #20]
 8007a3c:	f7ff ff88 	bl	8007950 <xTimerGenericCommand>
 8007a40:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d114      	bne.n	8007a72 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4c:	f383 8811 	msr	BASEPRI, r3
 8007a50:	f3bf 8f6f 	isb	sy
 8007a54:	f3bf 8f4f 	dsb	sy
 8007a58:	60fb      	str	r3, [r7, #12]
}
 8007a5a:	bf00      	nop
 8007a5c:	bf00      	nop
 8007a5e:	e7fd      	b.n	8007a5c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a66:	f023 0301 	bic.w	r3, r3, #1
 8007a6a:	b2da      	uxtb	r2, r3
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	6a1b      	ldr	r3, [r3, #32]
 8007a76:	6978      	ldr	r0, [r7, #20]
 8007a78:	4798      	blx	r3
}
 8007a7a:	bf00      	nop
 8007a7c:	3718      	adds	r7, #24
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}
 8007a82:	bf00      	nop
 8007a84:	20000f18 	.word	0x20000f18

08007a88 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a90:	f107 0308 	add.w	r3, r7, #8
 8007a94:	4618      	mov	r0, r3
 8007a96:	f000 f859 	bl	8007b4c <prvGetNextExpireTime>
 8007a9a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f000 f805 	bl	8007ab0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007aa6:	f000 f8d7 	bl	8007c58 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007aaa:	bf00      	nop
 8007aac:	e7f0      	b.n	8007a90 <prvTimerTask+0x8>
	...

08007ab0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007aba:	f7ff f999 	bl	8006df0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007abe:	f107 0308 	add.w	r3, r7, #8
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 f866 	bl	8007b94 <prvSampleTimeNow>
 8007ac8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d130      	bne.n	8007b32 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10a      	bne.n	8007aec <prvProcessTimerOrBlockTask+0x3c>
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d806      	bhi.n	8007aec <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007ade:	f7ff f995 	bl	8006e0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007ae2:	68f9      	ldr	r1, [r7, #12]
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff ff81 	bl	80079ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007aea:	e024      	b.n	8007b36 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d008      	beq.n	8007b04 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007af2:	4b13      	ldr	r3, [pc, #76]	@ (8007b40 <prvProcessTimerOrBlockTask+0x90>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d101      	bne.n	8007b00 <prvProcessTimerOrBlockTask+0x50>
 8007afc:	2301      	movs	r3, #1
 8007afe:	e000      	b.n	8007b02 <prvProcessTimerOrBlockTask+0x52>
 8007b00:	2300      	movs	r3, #0
 8007b02:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b04:	4b0f      	ldr	r3, [pc, #60]	@ (8007b44 <prvProcessTimerOrBlockTask+0x94>)
 8007b06:	6818      	ldr	r0, [r3, #0]
 8007b08:	687a      	ldr	r2, [r7, #4]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	683a      	ldr	r2, [r7, #0]
 8007b10:	4619      	mov	r1, r3
 8007b12:	f7fe fef5 	bl	8006900 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b16:	f7ff f979 	bl	8006e0c <xTaskResumeAll>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10a      	bne.n	8007b36 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b20:	4b09      	ldr	r3, [pc, #36]	@ (8007b48 <prvProcessTimerOrBlockTask+0x98>)
 8007b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b26:	601a      	str	r2, [r3, #0]
 8007b28:	f3bf 8f4f 	dsb	sy
 8007b2c:	f3bf 8f6f 	isb	sy
}
 8007b30:	e001      	b.n	8007b36 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b32:	f7ff f96b 	bl	8006e0c <xTaskResumeAll>
}
 8007b36:	bf00      	nop
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	20000f1c 	.word	0x20000f1c
 8007b44:	20000f20 	.word	0x20000f20
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b085      	sub	sp, #20
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b54:	4b0e      	ldr	r3, [pc, #56]	@ (8007b90 <prvGetNextExpireTime+0x44>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d101      	bne.n	8007b62 <prvGetNextExpireTime+0x16>
 8007b5e:	2201      	movs	r2, #1
 8007b60:	e000      	b.n	8007b64 <prvGetNextExpireTime+0x18>
 8007b62:	2200      	movs	r2, #0
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d105      	bne.n	8007b7c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b70:	4b07      	ldr	r3, [pc, #28]	@ (8007b90 <prvGetNextExpireTime+0x44>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	68db      	ldr	r3, [r3, #12]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	60fb      	str	r3, [r7, #12]
 8007b7a:	e001      	b.n	8007b80 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b80:	68fb      	ldr	r3, [r7, #12]
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	20000f18 	.word	0x20000f18

08007b94 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b084      	sub	sp, #16
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b9c:	f7ff f9d4 	bl	8006f48 <xTaskGetTickCount>
 8007ba0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd0 <prvSampleTimeNow+0x3c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d205      	bcs.n	8007bb8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007bac:	f000 f93a 	bl	8007e24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	e002      	b.n	8007bbe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007bbe:	4a04      	ldr	r2, [pc, #16]	@ (8007bd0 <prvSampleTimeNow+0x3c>)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
 8007bce:	bf00      	nop
 8007bd0:	20000f28 	.word	0x20000f28

08007bd4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b086      	sub	sp, #24
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007be2:	2300      	movs	r3, #0
 8007be4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	68ba      	ldr	r2, [r7, #8]
 8007bea:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007bf2:	68ba      	ldr	r2, [r7, #8]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d812      	bhi.n	8007c20 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007bfa:	687a      	ldr	r2, [r7, #4]
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	1ad2      	subs	r2, r2, r3
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	699b      	ldr	r3, [r3, #24]
 8007c04:	429a      	cmp	r2, r3
 8007c06:	d302      	bcc.n	8007c0e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c08:	2301      	movs	r3, #1
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	e01b      	b.n	8007c46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c0e:	4b10      	ldr	r3, [pc, #64]	@ (8007c50 <prvInsertTimerInActiveList+0x7c>)
 8007c10:	681a      	ldr	r2, [r3, #0]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	3304      	adds	r3, #4
 8007c16:	4619      	mov	r1, r3
 8007c18:	4610      	mov	r0, r2
 8007c1a:	f7fe f948 	bl	8005eae <vListInsert>
 8007c1e:	e012      	b.n	8007c46 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	429a      	cmp	r2, r3
 8007c26:	d206      	bcs.n	8007c36 <prvInsertTimerInActiveList+0x62>
 8007c28:	68ba      	ldr	r2, [r7, #8]
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d302      	bcc.n	8007c36 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c30:	2301      	movs	r3, #1
 8007c32:	617b      	str	r3, [r7, #20]
 8007c34:	e007      	b.n	8007c46 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c36:	4b07      	ldr	r3, [pc, #28]	@ (8007c54 <prvInsertTimerInActiveList+0x80>)
 8007c38:	681a      	ldr	r2, [r3, #0]
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	3304      	adds	r3, #4
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4610      	mov	r0, r2
 8007c42:	f7fe f934 	bl	8005eae <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c46:	697b      	ldr	r3, [r7, #20]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3718      	adds	r7, #24
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	20000f1c 	.word	0x20000f1c
 8007c54:	20000f18 	.word	0x20000f18

08007c58 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b08e      	sub	sp, #56	@ 0x38
 8007c5c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c5e:	e0ce      	b.n	8007dfe <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	da19      	bge.n	8007c9a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c66:	1d3b      	adds	r3, r7, #4
 8007c68:	3304      	adds	r3, #4
 8007c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d10b      	bne.n	8007c8a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c76:	f383 8811 	msr	BASEPRI, r3
 8007c7a:	f3bf 8f6f 	isb	sy
 8007c7e:	f3bf 8f4f 	dsb	sy
 8007c82:	61fb      	str	r3, [r7, #28]
}
 8007c84:	bf00      	nop
 8007c86:	bf00      	nop
 8007c88:	e7fd      	b.n	8007c86 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c90:	6850      	ldr	r0, [r2, #4]
 8007c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c94:	6892      	ldr	r2, [r2, #8]
 8007c96:	4611      	mov	r1, r2
 8007c98:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	f2c0 80ae 	blt.w	8007dfe <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d004      	beq.n	8007cb8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7fe f934 	bl	8005f20 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cb8:	463b      	mov	r3, r7
 8007cba:	4618      	mov	r0, r3
 8007cbc:	f7ff ff6a 	bl	8007b94 <prvSampleTimeNow>
 8007cc0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2b09      	cmp	r3, #9
 8007cc6:	f200 8097 	bhi.w	8007df8 <prvProcessReceivedCommands+0x1a0>
 8007cca:	a201      	add	r2, pc, #4	@ (adr r2, 8007cd0 <prvProcessReceivedCommands+0x78>)
 8007ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd0:	08007cf9 	.word	0x08007cf9
 8007cd4:	08007cf9 	.word	0x08007cf9
 8007cd8:	08007cf9 	.word	0x08007cf9
 8007cdc:	08007d6f 	.word	0x08007d6f
 8007ce0:	08007d83 	.word	0x08007d83
 8007ce4:	08007dcf 	.word	0x08007dcf
 8007ce8:	08007cf9 	.word	0x08007cf9
 8007cec:	08007cf9 	.word	0x08007cf9
 8007cf0:	08007d6f 	.word	0x08007d6f
 8007cf4:	08007d83 	.word	0x08007d83
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cfe:	f043 0301 	orr.w	r3, r3, #1
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d0a:	68ba      	ldr	r2, [r7, #8]
 8007d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d0e:	699b      	ldr	r3, [r3, #24]
 8007d10:	18d1      	adds	r1, r2, r3
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d18:	f7ff ff5c 	bl	8007bd4 <prvInsertTimerInActiveList>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d06c      	beq.n	8007dfc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d28:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d061      	beq.n	8007dfc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	441a      	add	r2, r3
 8007d40:	2300      	movs	r3, #0
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	2300      	movs	r3, #0
 8007d46:	2100      	movs	r1, #0
 8007d48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d4a:	f7ff fe01 	bl	8007950 <xTimerGenericCommand>
 8007d4e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d152      	bne.n	8007dfc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	61bb      	str	r3, [r7, #24]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d74:	f023 0301 	bic.w	r3, r3, #1
 8007d78:	b2da      	uxtb	r2, r3
 8007d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d7c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d80:	e03d      	b.n	8007dfe <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d88:	f043 0301 	orr.w	r3, r3, #1
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d90:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d98:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d9c:	699b      	ldr	r3, [r3, #24]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d10b      	bne.n	8007dba <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da6:	f383 8811 	msr	BASEPRI, r3
 8007daa:	f3bf 8f6f 	isb	sy
 8007dae:	f3bf 8f4f 	dsb	sy
 8007db2:	617b      	str	r3, [r7, #20]
}
 8007db4:	bf00      	nop
 8007db6:	bf00      	nop
 8007db8:	e7fd      	b.n	8007db6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbc:	699a      	ldr	r2, [r3, #24]
 8007dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc0:	18d1      	adds	r1, r2, r3
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007dc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dc8:	f7ff ff04 	bl	8007bd4 <prvInsertTimerInActiveList>
					break;
 8007dcc:	e017      	b.n	8007dfe <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007dce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dd4:	f003 0302 	and.w	r3, r3, #2
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d103      	bne.n	8007de4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007ddc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007dde:	f000 fc0b 	bl	80085f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007de2:	e00c      	b.n	8007dfe <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007de6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dea:	f023 0301 	bic.w	r3, r3, #1
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007df6:	e002      	b.n	8007dfe <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007df8:	bf00      	nop
 8007dfa:	e000      	b.n	8007dfe <prvProcessReceivedCommands+0x1a6>
					break;
 8007dfc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007dfe:	4b08      	ldr	r3, [pc, #32]	@ (8007e20 <prvProcessReceivedCommands+0x1c8>)
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	1d39      	adds	r1, r7, #4
 8007e04:	2200      	movs	r2, #0
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe fb5e 	bl	80064c8 <xQueueReceive>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f47f af26 	bne.w	8007c60 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop
 8007e18:	3730      	adds	r7, #48	@ 0x30
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	20000f20 	.word	0x20000f20

08007e24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e2a:	e049      	b.n	8007ec0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e36:	4b2c      	ldr	r3, [pc, #176]	@ (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	3304      	adds	r3, #4
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe f86b 	bl	8005f20 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007e58:	f003 0304 	and.w	r3, r3, #4
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d02f      	beq.n	8007ec0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	693a      	ldr	r2, [r7, #16]
 8007e66:	4413      	add	r3, r2
 8007e68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d90e      	bls.n	8007e90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007e80:	681a      	ldr	r2, [r3, #0]
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3304      	adds	r3, #4
 8007e86:	4619      	mov	r1, r3
 8007e88:	4610      	mov	r0, r2
 8007e8a:	f7fe f810 	bl	8005eae <vListInsert>
 8007e8e:	e017      	b.n	8007ec0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e90:	2300      	movs	r3, #0
 8007e92:	9300      	str	r3, [sp, #0]
 8007e94:	2300      	movs	r3, #0
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f7ff fd58 	bl	8007950 <xTimerGenericCommand>
 8007ea0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10b      	bne.n	8007ec0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	603b      	str	r3, [r7, #0]
}
 8007eba:	bf00      	nop
 8007ebc:	bf00      	nop
 8007ebe:	e7fd      	b.n	8007ebc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007ec0:	4b09      	ldr	r3, [pc, #36]	@ (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d1b0      	bne.n	8007e2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007eca:	4b07      	ldr	r3, [pc, #28]	@ (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007ed0:	4b06      	ldr	r3, [pc, #24]	@ (8007eec <prvSwitchTimerLists+0xc8>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a04      	ldr	r2, [pc, #16]	@ (8007ee8 <prvSwitchTimerLists+0xc4>)
 8007ed6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007ed8:	4a04      	ldr	r2, [pc, #16]	@ (8007eec <prvSwitchTimerLists+0xc8>)
 8007eda:	697b      	ldr	r3, [r7, #20]
 8007edc:	6013      	str	r3, [r2, #0]
}
 8007ede:	bf00      	nop
 8007ee0:	3718      	adds	r7, #24
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20000f18 	.word	0x20000f18
 8007eec:	20000f1c 	.word	0x20000f1c

08007ef0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ef6:	f000 f98f 	bl	8008218 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007efa:	4b15      	ldr	r3, [pc, #84]	@ (8007f50 <prvCheckForValidListAndQueue+0x60>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d120      	bne.n	8007f44 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f02:	4814      	ldr	r0, [pc, #80]	@ (8007f54 <prvCheckForValidListAndQueue+0x64>)
 8007f04:	f7fd ff82 	bl	8005e0c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f08:	4813      	ldr	r0, [pc, #76]	@ (8007f58 <prvCheckForValidListAndQueue+0x68>)
 8007f0a:	f7fd ff7f 	bl	8005e0c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f0e:	4b13      	ldr	r3, [pc, #76]	@ (8007f5c <prvCheckForValidListAndQueue+0x6c>)
 8007f10:	4a10      	ldr	r2, [pc, #64]	@ (8007f54 <prvCheckForValidListAndQueue+0x64>)
 8007f12:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f14:	4b12      	ldr	r3, [pc, #72]	@ (8007f60 <prvCheckForValidListAndQueue+0x70>)
 8007f16:	4a10      	ldr	r2, [pc, #64]	@ (8007f58 <prvCheckForValidListAndQueue+0x68>)
 8007f18:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	9300      	str	r3, [sp, #0]
 8007f1e:	4b11      	ldr	r3, [pc, #68]	@ (8007f64 <prvCheckForValidListAndQueue+0x74>)
 8007f20:	4a11      	ldr	r2, [pc, #68]	@ (8007f68 <prvCheckForValidListAndQueue+0x78>)
 8007f22:	2110      	movs	r1, #16
 8007f24:	200a      	movs	r0, #10
 8007f26:	f7fe f88f 	bl	8006048 <xQueueGenericCreateStatic>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	4a08      	ldr	r2, [pc, #32]	@ (8007f50 <prvCheckForValidListAndQueue+0x60>)
 8007f2e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f30:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <prvCheckForValidListAndQueue+0x60>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f38:	4b05      	ldr	r3, [pc, #20]	@ (8007f50 <prvCheckForValidListAndQueue+0x60>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	490b      	ldr	r1, [pc, #44]	@ (8007f6c <prvCheckForValidListAndQueue+0x7c>)
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe fcb4 	bl	80068ac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f44:	f000 f99a 	bl	800827c <vPortExitCritical>
}
 8007f48:	bf00      	nop
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	20000f20 	.word	0x20000f20
 8007f54:	20000ef0 	.word	0x20000ef0
 8007f58:	20000f04 	.word	0x20000f04
 8007f5c:	20000f18 	.word	0x20000f18
 8007f60:	20000f1c 	.word	0x20000f1c
 8007f64:	20000fcc 	.word	0x20000fcc
 8007f68:	20000f2c 	.word	0x20000f2c
 8007f6c:	0800899c 	.word	0x0800899c

08007f70 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10b      	bne.n	8007f9a <pvTimerGetTimerID+0x2a>
	__asm volatile
 8007f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f86:	f383 8811 	msr	BASEPRI, r3
 8007f8a:	f3bf 8f6f 	isb	sy
 8007f8e:	f3bf 8f4f 	dsb	sy
 8007f92:	60fb      	str	r3, [r7, #12]
}
 8007f94:	bf00      	nop
 8007f96:	bf00      	nop
 8007f98:	e7fd      	b.n	8007f96 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007f9a:	f000 f93d 	bl	8008218 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007fa4:	f000 f96a 	bl	800827c <vPortExitCritical>

	return pvReturn;
 8007fa8:	693b      	ldr	r3, [r7, #16]
}
 8007faa:	4618      	mov	r0, r3
 8007fac:	3718      	adds	r7, #24
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
	...

08007fb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3b04      	subs	r3, #4
 8007fc4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007fcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	3b04      	subs	r3, #4
 8007fd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	f023 0201 	bic.w	r2, r3, #1
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3b04      	subs	r3, #4
 8007fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8008018 <pxPortInitialiseStack+0x64>)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	3b14      	subs	r3, #20
 8007fee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007ff0:	687a      	ldr	r2, [r7, #4]
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3b04      	subs	r3, #4
 8007ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f06f 0202 	mvn.w	r2, #2
 8008002:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	3b20      	subs	r3, #32
 8008008:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800800a:	68fb      	ldr	r3, [r7, #12]
}
 800800c:	4618      	mov	r0, r3
 800800e:	3714      	adds	r7, #20
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr
 8008018:	0800801d 	.word	0x0800801d

0800801c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800801c:	b480      	push	{r7}
 800801e:	b085      	sub	sp, #20
 8008020:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008022:	2300      	movs	r3, #0
 8008024:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008026:	4b13      	ldr	r3, [pc, #76]	@ (8008074 <prvTaskExitError+0x58>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800802e:	d00b      	beq.n	8008048 <prvTaskExitError+0x2c>
	__asm volatile
 8008030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008034:	f383 8811 	msr	BASEPRI, r3
 8008038:	f3bf 8f6f 	isb	sy
 800803c:	f3bf 8f4f 	dsb	sy
 8008040:	60fb      	str	r3, [r7, #12]
}
 8008042:	bf00      	nop
 8008044:	bf00      	nop
 8008046:	e7fd      	b.n	8008044 <prvTaskExitError+0x28>
	__asm volatile
 8008048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804c:	f383 8811 	msr	BASEPRI, r3
 8008050:	f3bf 8f6f 	isb	sy
 8008054:	f3bf 8f4f 	dsb	sy
 8008058:	60bb      	str	r3, [r7, #8]
}
 800805a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800805c:	bf00      	nop
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d0fc      	beq.n	800805e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008064:	bf00      	nop
 8008066:	bf00      	nop
 8008068:	3714      	adds	r7, #20
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	20000048 	.word	0x20000048
	...

08008080 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008080:	4b07      	ldr	r3, [pc, #28]	@ (80080a0 <pxCurrentTCBConst2>)
 8008082:	6819      	ldr	r1, [r3, #0]
 8008084:	6808      	ldr	r0, [r1, #0]
 8008086:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800808a:	f380 8809 	msr	PSP, r0
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f04f 0000 	mov.w	r0, #0
 8008096:	f380 8811 	msr	BASEPRI, r0
 800809a:	4770      	bx	lr
 800809c:	f3af 8000 	nop.w

080080a0 <pxCurrentTCBConst2>:
 80080a0:	200009f0 	.word	0x200009f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80080a4:	bf00      	nop
 80080a6:	bf00      	nop

080080a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80080a8:	4808      	ldr	r0, [pc, #32]	@ (80080cc <prvPortStartFirstTask+0x24>)
 80080aa:	6800      	ldr	r0, [r0, #0]
 80080ac:	6800      	ldr	r0, [r0, #0]
 80080ae:	f380 8808 	msr	MSP, r0
 80080b2:	f04f 0000 	mov.w	r0, #0
 80080b6:	f380 8814 	msr	CONTROL, r0
 80080ba:	b662      	cpsie	i
 80080bc:	b661      	cpsie	f
 80080be:	f3bf 8f4f 	dsb	sy
 80080c2:	f3bf 8f6f 	isb	sy
 80080c6:	df00      	svc	0
 80080c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080ca:	bf00      	nop
 80080cc:	e000ed08 	.word	0xe000ed08

080080d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080d6:	4b47      	ldr	r3, [pc, #284]	@ (80081f4 <xPortStartScheduler+0x124>)
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	4a47      	ldr	r2, [pc, #284]	@ (80081f8 <xPortStartScheduler+0x128>)
 80080dc:	4293      	cmp	r3, r2
 80080de:	d10b      	bne.n	80080f8 <xPortStartScheduler+0x28>
	__asm volatile
 80080e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e4:	f383 8811 	msr	BASEPRI, r3
 80080e8:	f3bf 8f6f 	isb	sy
 80080ec:	f3bf 8f4f 	dsb	sy
 80080f0:	60fb      	str	r3, [r7, #12]
}
 80080f2:	bf00      	nop
 80080f4:	bf00      	nop
 80080f6:	e7fd      	b.n	80080f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080f8:	4b3e      	ldr	r3, [pc, #248]	@ (80081f4 <xPortStartScheduler+0x124>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a3f      	ldr	r2, [pc, #252]	@ (80081fc <xPortStartScheduler+0x12c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d10b      	bne.n	800811a <xPortStartScheduler+0x4a>
	__asm volatile
 8008102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008106:	f383 8811 	msr	BASEPRI, r3
 800810a:	f3bf 8f6f 	isb	sy
 800810e:	f3bf 8f4f 	dsb	sy
 8008112:	613b      	str	r3, [r7, #16]
}
 8008114:	bf00      	nop
 8008116:	bf00      	nop
 8008118:	e7fd      	b.n	8008116 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800811a:	4b39      	ldr	r3, [pc, #228]	@ (8008200 <xPortStartScheduler+0x130>)
 800811c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	22ff      	movs	r2, #255	@ 0xff
 800812a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800812c:	697b      	ldr	r3, [r7, #20]
 800812e:	781b      	ldrb	r3, [r3, #0]
 8008130:	b2db      	uxtb	r3, r3
 8008132:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008134:	78fb      	ldrb	r3, [r7, #3]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800813c:	b2da      	uxtb	r2, r3
 800813e:	4b31      	ldr	r3, [pc, #196]	@ (8008204 <xPortStartScheduler+0x134>)
 8008140:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008142:	4b31      	ldr	r3, [pc, #196]	@ (8008208 <xPortStartScheduler+0x138>)
 8008144:	2207      	movs	r2, #7
 8008146:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008148:	e009      	b.n	800815e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800814a:	4b2f      	ldr	r3, [pc, #188]	@ (8008208 <xPortStartScheduler+0x138>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	3b01      	subs	r3, #1
 8008150:	4a2d      	ldr	r2, [pc, #180]	@ (8008208 <xPortStartScheduler+0x138>)
 8008152:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008154:	78fb      	ldrb	r3, [r7, #3]
 8008156:	b2db      	uxtb	r3, r3
 8008158:	005b      	lsls	r3, r3, #1
 800815a:	b2db      	uxtb	r3, r3
 800815c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800815e:	78fb      	ldrb	r3, [r7, #3]
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008166:	2b80      	cmp	r3, #128	@ 0x80
 8008168:	d0ef      	beq.n	800814a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800816a:	4b27      	ldr	r3, [pc, #156]	@ (8008208 <xPortStartScheduler+0x138>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f1c3 0307 	rsb	r3, r3, #7
 8008172:	2b04      	cmp	r3, #4
 8008174:	d00b      	beq.n	800818e <xPortStartScheduler+0xbe>
	__asm volatile
 8008176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800817a:	f383 8811 	msr	BASEPRI, r3
 800817e:	f3bf 8f6f 	isb	sy
 8008182:	f3bf 8f4f 	dsb	sy
 8008186:	60bb      	str	r3, [r7, #8]
}
 8008188:	bf00      	nop
 800818a:	bf00      	nop
 800818c:	e7fd      	b.n	800818a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800818e:	4b1e      	ldr	r3, [pc, #120]	@ (8008208 <xPortStartScheduler+0x138>)
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	4a1c      	ldr	r2, [pc, #112]	@ (8008208 <xPortStartScheduler+0x138>)
 8008196:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008198:	4b1b      	ldr	r3, [pc, #108]	@ (8008208 <xPortStartScheduler+0x138>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80081a0:	4a19      	ldr	r2, [pc, #100]	@ (8008208 <xPortStartScheduler+0x138>)
 80081a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80081ac:	4b17      	ldr	r3, [pc, #92]	@ (800820c <xPortStartScheduler+0x13c>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a16      	ldr	r2, [pc, #88]	@ (800820c <xPortStartScheduler+0x13c>)
 80081b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80081b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081b8:	4b14      	ldr	r3, [pc, #80]	@ (800820c <xPortStartScheduler+0x13c>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a13      	ldr	r2, [pc, #76]	@ (800820c <xPortStartScheduler+0x13c>)
 80081be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80081c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081c4:	f000 f8da 	bl	800837c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081c8:	4b11      	ldr	r3, [pc, #68]	@ (8008210 <xPortStartScheduler+0x140>)
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081ce:	f000 f8f9 	bl	80083c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081d2:	4b10      	ldr	r3, [pc, #64]	@ (8008214 <xPortStartScheduler+0x144>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a0f      	ldr	r2, [pc, #60]	@ (8008214 <xPortStartScheduler+0x144>)
 80081d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80081dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081de:	f7ff ff63 	bl	80080a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081e2:	f7fe ff7b 	bl	80070dc <vTaskSwitchContext>
	prvTaskExitError();
 80081e6:	f7ff ff19 	bl	800801c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081ea:	2300      	movs	r3, #0
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3718      	adds	r7, #24
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}
 80081f4:	e000ed00 	.word	0xe000ed00
 80081f8:	410fc271 	.word	0x410fc271
 80081fc:	410fc270 	.word	0x410fc270
 8008200:	e000e400 	.word	0xe000e400
 8008204:	2000101c 	.word	0x2000101c
 8008208:	20001020 	.word	0x20001020
 800820c:	e000ed20 	.word	0xe000ed20
 8008210:	20000048 	.word	0x20000048
 8008214:	e000ef34 	.word	0xe000ef34

08008218 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
	__asm volatile
 800821e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	607b      	str	r3, [r7, #4]
}
 8008230:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008232:	4b10      	ldr	r3, [pc, #64]	@ (8008274 <vPortEnterCritical+0x5c>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	3301      	adds	r3, #1
 8008238:	4a0e      	ldr	r2, [pc, #56]	@ (8008274 <vPortEnterCritical+0x5c>)
 800823a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800823c:	4b0d      	ldr	r3, [pc, #52]	@ (8008274 <vPortEnterCritical+0x5c>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d110      	bne.n	8008266 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008244:	4b0c      	ldr	r3, [pc, #48]	@ (8008278 <vPortEnterCritical+0x60>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	b2db      	uxtb	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00b      	beq.n	8008266 <vPortEnterCritical+0x4e>
	__asm volatile
 800824e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008252:	f383 8811 	msr	BASEPRI, r3
 8008256:	f3bf 8f6f 	isb	sy
 800825a:	f3bf 8f4f 	dsb	sy
 800825e:	603b      	str	r3, [r7, #0]
}
 8008260:	bf00      	nop
 8008262:	bf00      	nop
 8008264:	e7fd      	b.n	8008262 <vPortEnterCritical+0x4a>
	}
}
 8008266:	bf00      	nop
 8008268:	370c      	adds	r7, #12
 800826a:	46bd      	mov	sp, r7
 800826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008270:	4770      	bx	lr
 8008272:	bf00      	nop
 8008274:	20000048 	.word	0x20000048
 8008278:	e000ed04 	.word	0xe000ed04

0800827c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800827c:	b480      	push	{r7}
 800827e:	b083      	sub	sp, #12
 8008280:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008282:	4b12      	ldr	r3, [pc, #72]	@ (80082cc <vPortExitCritical+0x50>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d10b      	bne.n	80082a2 <vPortExitCritical+0x26>
	__asm volatile
 800828a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800828e:	f383 8811 	msr	BASEPRI, r3
 8008292:	f3bf 8f6f 	isb	sy
 8008296:	f3bf 8f4f 	dsb	sy
 800829a:	607b      	str	r3, [r7, #4]
}
 800829c:	bf00      	nop
 800829e:	bf00      	nop
 80082a0:	e7fd      	b.n	800829e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80082a2:	4b0a      	ldr	r3, [pc, #40]	@ (80082cc <vPortExitCritical+0x50>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3b01      	subs	r3, #1
 80082a8:	4a08      	ldr	r2, [pc, #32]	@ (80082cc <vPortExitCritical+0x50>)
 80082aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80082ac:	4b07      	ldr	r3, [pc, #28]	@ (80082cc <vPortExitCritical+0x50>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d105      	bne.n	80082c0 <vPortExitCritical+0x44>
 80082b4:	2300      	movs	r3, #0
 80082b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	f383 8811 	msr	BASEPRI, r3
}
 80082be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	20000048 	.word	0x20000048

080082d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082d0:	f3ef 8009 	mrs	r0, PSP
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	4b15      	ldr	r3, [pc, #84]	@ (8008330 <pxCurrentTCBConst>)
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	f01e 0f10 	tst.w	lr, #16
 80082e0:	bf08      	it	eq
 80082e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082ea:	6010      	str	r0, [r2, #0]
 80082ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80082f4:	f380 8811 	msr	BASEPRI, r0
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	f3bf 8f6f 	isb	sy
 8008300:	f7fe feec 	bl	80070dc <vTaskSwitchContext>
 8008304:	f04f 0000 	mov.w	r0, #0
 8008308:	f380 8811 	msr	BASEPRI, r0
 800830c:	bc09      	pop	{r0, r3}
 800830e:	6819      	ldr	r1, [r3, #0]
 8008310:	6808      	ldr	r0, [r1, #0]
 8008312:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008316:	f01e 0f10 	tst.w	lr, #16
 800831a:	bf08      	it	eq
 800831c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008320:	f380 8809 	msr	PSP, r0
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop
 800832c:	f3af 8000 	nop.w

08008330 <pxCurrentTCBConst>:
 8008330:	200009f0 	.word	0x200009f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008334:	bf00      	nop
 8008336:	bf00      	nop

08008338 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
	__asm volatile
 800833e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008342:	f383 8811 	msr	BASEPRI, r3
 8008346:	f3bf 8f6f 	isb	sy
 800834a:	f3bf 8f4f 	dsb	sy
 800834e:	607b      	str	r3, [r7, #4]
}
 8008350:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008352:	f7fe fe09 	bl	8006f68 <xTaskIncrementTick>
 8008356:	4603      	mov	r3, r0
 8008358:	2b00      	cmp	r3, #0
 800835a:	d003      	beq.n	8008364 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800835c:	4b06      	ldr	r3, [pc, #24]	@ (8008378 <xPortSysTickHandler+0x40>)
 800835e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008362:	601a      	str	r2, [r3, #0]
 8008364:	2300      	movs	r3, #0
 8008366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	f383 8811 	msr	BASEPRI, r3
}
 800836e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}
 8008378:	e000ed04 	.word	0xe000ed04

0800837c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800837c:	b480      	push	{r7}
 800837e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008380:	4b0b      	ldr	r3, [pc, #44]	@ (80083b0 <vPortSetupTimerInterrupt+0x34>)
 8008382:	2200      	movs	r2, #0
 8008384:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008386:	4b0b      	ldr	r3, [pc, #44]	@ (80083b4 <vPortSetupTimerInterrupt+0x38>)
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800838c:	4b0a      	ldr	r3, [pc, #40]	@ (80083b8 <vPortSetupTimerInterrupt+0x3c>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a0a      	ldr	r2, [pc, #40]	@ (80083bc <vPortSetupTimerInterrupt+0x40>)
 8008392:	fba2 2303 	umull	r2, r3, r2, r3
 8008396:	099b      	lsrs	r3, r3, #6
 8008398:	4a09      	ldr	r2, [pc, #36]	@ (80083c0 <vPortSetupTimerInterrupt+0x44>)
 800839a:	3b01      	subs	r3, #1
 800839c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800839e:	4b04      	ldr	r3, [pc, #16]	@ (80083b0 <vPortSetupTimerInterrupt+0x34>)
 80083a0:	2207      	movs	r2, #7
 80083a2:	601a      	str	r2, [r3, #0]
}
 80083a4:	bf00      	nop
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	e000e010 	.word	0xe000e010
 80083b4:	e000e018 	.word	0xe000e018
 80083b8:	2000003c 	.word	0x2000003c
 80083bc:	10624dd3 	.word	0x10624dd3
 80083c0:	e000e014 	.word	0xe000e014

080083c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80083d4 <vPortEnableVFP+0x10>
 80083c8:	6801      	ldr	r1, [r0, #0]
 80083ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80083ce:	6001      	str	r1, [r0, #0]
 80083d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083d2:	bf00      	nop
 80083d4:	e000ed88 	.word	0xe000ed88

080083d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083de:	f3ef 8305 	mrs	r3, IPSR
 80083e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2b0f      	cmp	r3, #15
 80083e8:	d915      	bls.n	8008416 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083ea:	4a18      	ldr	r2, [pc, #96]	@ (800844c <vPortValidateInterruptPriority+0x74>)
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4413      	add	r3, r2
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083f4:	4b16      	ldr	r3, [pc, #88]	@ (8008450 <vPortValidateInterruptPriority+0x78>)
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	7afa      	ldrb	r2, [r7, #11]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d20b      	bcs.n	8008416 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80083fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	607b      	str	r3, [r7, #4]
}
 8008410:	bf00      	nop
 8008412:	bf00      	nop
 8008414:	e7fd      	b.n	8008412 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008416:	4b0f      	ldr	r3, [pc, #60]	@ (8008454 <vPortValidateInterruptPriority+0x7c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800841e:	4b0e      	ldr	r3, [pc, #56]	@ (8008458 <vPortValidateInterruptPriority+0x80>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	429a      	cmp	r2, r3
 8008424:	d90b      	bls.n	800843e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	f383 8811 	msr	BASEPRI, r3
 800842e:	f3bf 8f6f 	isb	sy
 8008432:	f3bf 8f4f 	dsb	sy
 8008436:	603b      	str	r3, [r7, #0]
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop
 800843c:	e7fd      	b.n	800843a <vPortValidateInterruptPriority+0x62>
	}
 800843e:	bf00      	nop
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	e000e3f0 	.word	0xe000e3f0
 8008450:	2000101c 	.word	0x2000101c
 8008454:	e000ed0c 	.word	0xe000ed0c
 8008458:	20001020 	.word	0x20001020

0800845c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b08a      	sub	sp, #40	@ 0x28
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008464:	2300      	movs	r3, #0
 8008466:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008468:	f7fe fcc2 	bl	8006df0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800846c:	4b5c      	ldr	r3, [pc, #368]	@ (80085e0 <pvPortMalloc+0x184>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d101      	bne.n	8008478 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008474:	f000 f924 	bl	80086c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008478:	4b5a      	ldr	r3, [pc, #360]	@ (80085e4 <pvPortMalloc+0x188>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4013      	ands	r3, r2
 8008480:	2b00      	cmp	r3, #0
 8008482:	f040 8095 	bne.w	80085b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01e      	beq.n	80084ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800848c:	2208      	movs	r2, #8
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	4413      	add	r3, r2
 8008492:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	2b00      	cmp	r3, #0
 800849c:	d015      	beq.n	80084ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f023 0307 	bic.w	r3, r3, #7
 80084a4:	3308      	adds	r3, #8
 80084a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	f003 0307 	and.w	r3, r3, #7
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00b      	beq.n	80084ca <pvPortMalloc+0x6e>
	__asm volatile
 80084b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084b6:	f383 8811 	msr	BASEPRI, r3
 80084ba:	f3bf 8f6f 	isb	sy
 80084be:	f3bf 8f4f 	dsb	sy
 80084c2:	617b      	str	r3, [r7, #20]
}
 80084c4:	bf00      	nop
 80084c6:	bf00      	nop
 80084c8:	e7fd      	b.n	80084c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d06f      	beq.n	80085b0 <pvPortMalloc+0x154>
 80084d0:	4b45      	ldr	r3, [pc, #276]	@ (80085e8 <pvPortMalloc+0x18c>)
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	687a      	ldr	r2, [r7, #4]
 80084d6:	429a      	cmp	r2, r3
 80084d8:	d86a      	bhi.n	80085b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084da:	4b44      	ldr	r3, [pc, #272]	@ (80085ec <pvPortMalloc+0x190>)
 80084dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084de:	4b43      	ldr	r3, [pc, #268]	@ (80085ec <pvPortMalloc+0x190>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084e4:	e004      	b.n	80084f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80084e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d903      	bls.n	8008502 <pvPortMalloc+0xa6>
 80084fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1f1      	bne.n	80084e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008502:	4b37      	ldr	r3, [pc, #220]	@ (80085e0 <pvPortMalloc+0x184>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008508:	429a      	cmp	r2, r3
 800850a:	d051      	beq.n	80085b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800850c:	6a3b      	ldr	r3, [r7, #32]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	2208      	movs	r2, #8
 8008512:	4413      	add	r3, r2
 8008514:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008518:	681a      	ldr	r2, [r3, #0]
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800851e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008520:	685a      	ldr	r2, [r3, #4]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	1ad2      	subs	r2, r2, r3
 8008526:	2308      	movs	r3, #8
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	429a      	cmp	r2, r3
 800852c:	d920      	bls.n	8008570 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800852e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	4413      	add	r3, r2
 8008534:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008536:	69bb      	ldr	r3, [r7, #24]
 8008538:	f003 0307 	and.w	r3, r3, #7
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <pvPortMalloc+0xfc>
	__asm volatile
 8008540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008544:	f383 8811 	msr	BASEPRI, r3
 8008548:	f3bf 8f6f 	isb	sy
 800854c:	f3bf 8f4f 	dsb	sy
 8008550:	613b      	str	r3, [r7, #16]
}
 8008552:	bf00      	nop
 8008554:	bf00      	nop
 8008556:	e7fd      	b.n	8008554 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	1ad2      	subs	r2, r2, r3
 8008560:	69bb      	ldr	r3, [r7, #24]
 8008562:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800856a:	69b8      	ldr	r0, [r7, #24]
 800856c:	f000 f90a 	bl	8008784 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008570:	4b1d      	ldr	r3, [pc, #116]	@ (80085e8 <pvPortMalloc+0x18c>)
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	1ad3      	subs	r3, r2, r3
 800857a:	4a1b      	ldr	r2, [pc, #108]	@ (80085e8 <pvPortMalloc+0x18c>)
 800857c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800857e:	4b1a      	ldr	r3, [pc, #104]	@ (80085e8 <pvPortMalloc+0x18c>)
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	4b1b      	ldr	r3, [pc, #108]	@ (80085f0 <pvPortMalloc+0x194>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	429a      	cmp	r2, r3
 8008588:	d203      	bcs.n	8008592 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800858a:	4b17      	ldr	r3, [pc, #92]	@ (80085e8 <pvPortMalloc+0x18c>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a18      	ldr	r2, [pc, #96]	@ (80085f0 <pvPortMalloc+0x194>)
 8008590:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	4b13      	ldr	r3, [pc, #76]	@ (80085e4 <pvPortMalloc+0x188>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	431a      	orrs	r2, r3
 800859c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800859e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80085a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a2:	2200      	movs	r2, #0
 80085a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80085a6:	4b13      	ldr	r3, [pc, #76]	@ (80085f4 <pvPortMalloc+0x198>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	3301      	adds	r3, #1
 80085ac:	4a11      	ldr	r2, [pc, #68]	@ (80085f4 <pvPortMalloc+0x198>)
 80085ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80085b0:	f7fe fc2c 	bl	8006e0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b4:	69fb      	ldr	r3, [r7, #28]
 80085b6:	f003 0307 	and.w	r3, r3, #7
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00b      	beq.n	80085d6 <pvPortMalloc+0x17a>
	__asm volatile
 80085be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085c2:	f383 8811 	msr	BASEPRI, r3
 80085c6:	f3bf 8f6f 	isb	sy
 80085ca:	f3bf 8f4f 	dsb	sy
 80085ce:	60fb      	str	r3, [r7, #12]
}
 80085d0:	bf00      	nop
 80085d2:	bf00      	nop
 80085d4:	e7fd      	b.n	80085d2 <pvPortMalloc+0x176>
	return pvReturn;
 80085d6:	69fb      	ldr	r3, [r7, #28]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3728      	adds	r7, #40	@ 0x28
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	20001be4 	.word	0x20001be4
 80085e4:	20001bf8 	.word	0x20001bf8
 80085e8:	20001be8 	.word	0x20001be8
 80085ec:	20001bdc 	.word	0x20001bdc
 80085f0:	20001bec 	.word	0x20001bec
 80085f4:	20001bf0 	.word	0x20001bf0

080085f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b086      	sub	sp, #24
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d04f      	beq.n	80086aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800860a:	2308      	movs	r3, #8
 800860c:	425b      	negs	r3, r3
 800860e:	697a      	ldr	r2, [r7, #20]
 8008610:	4413      	add	r3, r2
 8008612:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008614:	697b      	ldr	r3, [r7, #20]
 8008616:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	685a      	ldr	r2, [r3, #4]
 800861c:	4b25      	ldr	r3, [pc, #148]	@ (80086b4 <vPortFree+0xbc>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4013      	ands	r3, r2
 8008622:	2b00      	cmp	r3, #0
 8008624:	d10b      	bne.n	800863e <vPortFree+0x46>
	__asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	60fb      	str	r3, [r7, #12]
}
 8008638:	bf00      	nop
 800863a:	bf00      	nop
 800863c:	e7fd      	b.n	800863a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800863e:	693b      	ldr	r3, [r7, #16]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00b      	beq.n	800865e <vPortFree+0x66>
	__asm volatile
 8008646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800864a:	f383 8811 	msr	BASEPRI, r3
 800864e:	f3bf 8f6f 	isb	sy
 8008652:	f3bf 8f4f 	dsb	sy
 8008656:	60bb      	str	r3, [r7, #8]
}
 8008658:	bf00      	nop
 800865a:	bf00      	nop
 800865c:	e7fd      	b.n	800865a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	685a      	ldr	r2, [r3, #4]
 8008662:	4b14      	ldr	r3, [pc, #80]	@ (80086b4 <vPortFree+0xbc>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4013      	ands	r3, r2
 8008668:	2b00      	cmp	r3, #0
 800866a:	d01e      	beq.n	80086aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d11a      	bne.n	80086aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	685a      	ldr	r2, [r3, #4]
 8008678:	4b0e      	ldr	r3, [pc, #56]	@ (80086b4 <vPortFree+0xbc>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	43db      	mvns	r3, r3
 800867e:	401a      	ands	r2, r3
 8008680:	693b      	ldr	r3, [r7, #16]
 8008682:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008684:	f7fe fbb4 	bl	8006df0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	685a      	ldr	r2, [r3, #4]
 800868c:	4b0a      	ldr	r3, [pc, #40]	@ (80086b8 <vPortFree+0xc0>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4413      	add	r3, r2
 8008692:	4a09      	ldr	r2, [pc, #36]	@ (80086b8 <vPortFree+0xc0>)
 8008694:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008696:	6938      	ldr	r0, [r7, #16]
 8008698:	f000 f874 	bl	8008784 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800869c:	4b07      	ldr	r3, [pc, #28]	@ (80086bc <vPortFree+0xc4>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	3301      	adds	r3, #1
 80086a2:	4a06      	ldr	r2, [pc, #24]	@ (80086bc <vPortFree+0xc4>)
 80086a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80086a6:	f7fe fbb1 	bl	8006e0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80086aa:	bf00      	nop
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20001bf8 	.word	0x20001bf8
 80086b8:	20001be8 	.word	0x20001be8
 80086bc:	20001bf4 	.word	0x20001bf4

080086c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086c6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80086ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086cc:	4b27      	ldr	r3, [pc, #156]	@ (800876c <prvHeapInit+0xac>)
 80086ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f003 0307 	and.w	r3, r3, #7
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00c      	beq.n	80086f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	3307      	adds	r3, #7
 80086de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 0307 	bic.w	r3, r3, #7
 80086e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086e8:	68ba      	ldr	r2, [r7, #8]
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	4a1f      	ldr	r2, [pc, #124]	@ (800876c <prvHeapInit+0xac>)
 80086f0:	4413      	add	r3, r2
 80086f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086f8:	4a1d      	ldr	r2, [pc, #116]	@ (8008770 <prvHeapInit+0xb0>)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086fe:	4b1c      	ldr	r3, [pc, #112]	@ (8008770 <prvHeapInit+0xb0>)
 8008700:	2200      	movs	r2, #0
 8008702:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	4413      	add	r3, r2
 800870a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800870c:	2208      	movs	r2, #8
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	1a9b      	subs	r3, r3, r2
 8008712:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0307 	bic.w	r3, r3, #7
 800871a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4a15      	ldr	r2, [pc, #84]	@ (8008774 <prvHeapInit+0xb4>)
 8008720:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008722:	4b14      	ldr	r3, [pc, #80]	@ (8008774 <prvHeapInit+0xb4>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2200      	movs	r2, #0
 8008728:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800872a:	4b12      	ldr	r3, [pc, #72]	@ (8008774 <prvHeapInit+0xb4>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2200      	movs	r2, #0
 8008730:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	1ad2      	subs	r2, r2, r3
 800873c:	683b      	ldr	r3, [r7, #0]
 800873e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008740:	4b0c      	ldr	r3, [pc, #48]	@ (8008774 <prvHeapInit+0xb4>)
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	683b      	ldr	r3, [r7, #0]
 8008746:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008748:	683b      	ldr	r3, [r7, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	4a0a      	ldr	r2, [pc, #40]	@ (8008778 <prvHeapInit+0xb8>)
 800874e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	4a09      	ldr	r2, [pc, #36]	@ (800877c <prvHeapInit+0xbc>)
 8008756:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008758:	4b09      	ldr	r3, [pc, #36]	@ (8008780 <prvHeapInit+0xc0>)
 800875a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800875e:	601a      	str	r2, [r3, #0]
}
 8008760:	bf00      	nop
 8008762:	3714      	adds	r7, #20
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr
 800876c:	20001024 	.word	0x20001024
 8008770:	20001bdc 	.word	0x20001bdc
 8008774:	20001be4 	.word	0x20001be4
 8008778:	20001bec 	.word	0x20001bec
 800877c:	20001be8 	.word	0x20001be8
 8008780:	20001bf8 	.word	0x20001bf8

08008784 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008784:	b480      	push	{r7}
 8008786:	b085      	sub	sp, #20
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800878c:	4b28      	ldr	r3, [pc, #160]	@ (8008830 <prvInsertBlockIntoFreeList+0xac>)
 800878e:	60fb      	str	r3, [r7, #12]
 8008790:	e002      	b.n	8008798 <prvInsertBlockIntoFreeList+0x14>
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d8f7      	bhi.n	8008792 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	4413      	add	r3, r2
 80087ae:	687a      	ldr	r2, [r7, #4]
 80087b0:	429a      	cmp	r2, r3
 80087b2:	d108      	bne.n	80087c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	685a      	ldr	r2, [r3, #4]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	685b      	ldr	r3, [r3, #4]
 80087bc:	441a      	add	r2, r3
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	68ba      	ldr	r2, [r7, #8]
 80087d0:	441a      	add	r2, r3
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d118      	bne.n	800880c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	4b15      	ldr	r3, [pc, #84]	@ (8008834 <prvInsertBlockIntoFreeList+0xb0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d00d      	beq.n	8008802 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	685a      	ldr	r2, [r3, #4]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	441a      	add	r2, r3
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	681a      	ldr	r2, [r3, #0]
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	601a      	str	r2, [r3, #0]
 8008800:	e008      	b.n	8008814 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008802:	4b0c      	ldr	r3, [pc, #48]	@ (8008834 <prvInsertBlockIntoFreeList+0xb0>)
 8008804:	681a      	ldr	r2, [r3, #0]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	601a      	str	r2, [r3, #0]
 800880a:	e003      	b.n	8008814 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681a      	ldr	r2, [r3, #0]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	429a      	cmp	r2, r3
 800881a:	d002      	beq.n	8008822 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008822:	bf00      	nop
 8008824:	3714      	adds	r7, #20
 8008826:	46bd      	mov	sp, r7
 8008828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882c:	4770      	bx	lr
 800882e:	bf00      	nop
 8008830:	20001bdc 	.word	0x20001bdc
 8008834:	20001be4 	.word	0x20001be4

08008838 <memset>:
 8008838:	4402      	add	r2, r0
 800883a:	4603      	mov	r3, r0
 800883c:	4293      	cmp	r3, r2
 800883e:	d100      	bne.n	8008842 <memset+0xa>
 8008840:	4770      	bx	lr
 8008842:	f803 1b01 	strb.w	r1, [r3], #1
 8008846:	e7f9      	b.n	800883c <memset+0x4>

08008848 <__libc_init_array>:
 8008848:	b570      	push	{r4, r5, r6, lr}
 800884a:	4d0d      	ldr	r5, [pc, #52]	@ (8008880 <__libc_init_array+0x38>)
 800884c:	4c0d      	ldr	r4, [pc, #52]	@ (8008884 <__libc_init_array+0x3c>)
 800884e:	1b64      	subs	r4, r4, r5
 8008850:	10a4      	asrs	r4, r4, #2
 8008852:	2600      	movs	r6, #0
 8008854:	42a6      	cmp	r6, r4
 8008856:	d109      	bne.n	800886c <__libc_init_array+0x24>
 8008858:	4d0b      	ldr	r5, [pc, #44]	@ (8008888 <__libc_init_array+0x40>)
 800885a:	4c0c      	ldr	r4, [pc, #48]	@ (800888c <__libc_init_array+0x44>)
 800885c:	f000 f826 	bl	80088ac <_init>
 8008860:	1b64      	subs	r4, r4, r5
 8008862:	10a4      	asrs	r4, r4, #2
 8008864:	2600      	movs	r6, #0
 8008866:	42a6      	cmp	r6, r4
 8008868:	d105      	bne.n	8008876 <__libc_init_array+0x2e>
 800886a:	bd70      	pop	{r4, r5, r6, pc}
 800886c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008870:	4798      	blx	r3
 8008872:	3601      	adds	r6, #1
 8008874:	e7ee      	b.n	8008854 <__libc_init_array+0xc>
 8008876:	f855 3b04 	ldr.w	r3, [r5], #4
 800887a:	4798      	blx	r3
 800887c:	3601      	adds	r6, #1
 800887e:	e7f2      	b.n	8008866 <__libc_init_array+0x1e>
 8008880:	08008a68 	.word	0x08008a68
 8008884:	08008a68 	.word	0x08008a68
 8008888:	08008a68 	.word	0x08008a68
 800888c:	08008a6c 	.word	0x08008a6c

08008890 <memcpy>:
 8008890:	440a      	add	r2, r1
 8008892:	4291      	cmp	r1, r2
 8008894:	f100 33ff 	add.w	r3, r0, #4294967295
 8008898:	d100      	bne.n	800889c <memcpy+0xc>
 800889a:	4770      	bx	lr
 800889c:	b510      	push	{r4, lr}
 800889e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088a6:	4291      	cmp	r1, r2
 80088a8:	d1f9      	bne.n	800889e <memcpy+0xe>
 80088aa:	bd10      	pop	{r4, pc}

080088ac <_init>:
 80088ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ae:	bf00      	nop
 80088b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088b2:	bc08      	pop	{r3}
 80088b4:	469e      	mov	lr, r3
 80088b6:	4770      	bx	lr

080088b8 <_fini>:
 80088b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ba:	bf00      	nop
 80088bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088be:	bc08      	pop	{r3}
 80088c0:	469e      	mov	lr, r3
 80088c2:	4770      	bx	lr

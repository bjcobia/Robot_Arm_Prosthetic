
Robot_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d44  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08009ed4  08009ed4  0000aed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a0ac  0800a0ac  0000c064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a0ac  0800a0ac  0000b0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a0b4  0800a0b4  0000c064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a0b4  0800a0b4  0000b0b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a0b8  0800a0b8  0000b0b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800a0bc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c94  20000064  0800a120  0000c064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001cf8  0800a120  0000ccf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acc3  00000000  00000000  0000c094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035e2  00000000  00000000  00026d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  0002a340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001226  00000000  00000000  0002ba80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c88  00000000  00000000  0002cca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000198a8  00000000  00000000  0003092e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd1f0  00000000  00000000  0004a1d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001473c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000639c  00000000  00000000  0014740c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  0014d7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ebc 	.word	0x08009ebc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08009ebc 	.word	0x08009ebc

080001d0 <__aeabi_dmul>:
 80001d0:	b570      	push	{r4, r5, r6, lr}
 80001d2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80001d6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80001da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001de:	bf1d      	ittte	ne
 80001e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001e4:	ea94 0f0c 	teqne	r4, ip
 80001e8:	ea95 0f0c 	teqne	r5, ip
 80001ec:	f000 f8de 	bleq	80003ac <__aeabi_dmul+0x1dc>
 80001f0:	442c      	add	r4, r5
 80001f2:	ea81 0603 	eor.w	r6, r1, r3
 80001f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000202:	bf18      	it	ne
 8000204:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000208:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800020c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000210:	d038      	beq.n	8000284 <__aeabi_dmul+0xb4>
 8000212:	fba0 ce02 	umull	ip, lr, r0, r2
 8000216:	f04f 0500 	mov.w	r5, #0
 800021a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800021e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000222:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000226:	f04f 0600 	mov.w	r6, #0
 800022a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800022e:	f09c 0f00 	teq	ip, #0
 8000232:	bf18      	it	ne
 8000234:	f04e 0e01 	orrne.w	lr, lr, #1
 8000238:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800023c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000240:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000244:	d204      	bcs.n	8000250 <__aeabi_dmul+0x80>
 8000246:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800024a:	416d      	adcs	r5, r5
 800024c:	eb46 0606 	adc.w	r6, r6, r6
 8000250:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000254:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000258:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800025c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000260:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000264:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000268:	bf88      	it	hi
 800026a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800026e:	d81e      	bhi.n	80002ae <__aeabi_dmul+0xde>
 8000270:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000274:	bf08      	it	eq
 8000276:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800027a:	f150 0000 	adcs.w	r0, r0, #0
 800027e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000288:	ea46 0101 	orr.w	r1, r6, r1
 800028c:	ea40 0002 	orr.w	r0, r0, r2
 8000290:	ea81 0103 	eor.w	r1, r1, r3
 8000294:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000298:	bfc2      	ittt	gt
 800029a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800029e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	popgt	{r4, r5, r6, pc}
 80002a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002a8:	f04f 0e00 	mov.w	lr, #0
 80002ac:	3c01      	subs	r4, #1
 80002ae:	f300 80ab 	bgt.w	8000408 <__aeabi_dmul+0x238>
 80002b2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002b6:	bfde      	ittt	le
 80002b8:	2000      	movle	r0, #0
 80002ba:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80002be:	bd70      	pople	{r4, r5, r6, pc}
 80002c0:	f1c4 0400 	rsb	r4, r4, #0
 80002c4:	3c20      	subs	r4, #32
 80002c6:	da35      	bge.n	8000334 <__aeabi_dmul+0x164>
 80002c8:	340c      	adds	r4, #12
 80002ca:	dc1b      	bgt.n	8000304 <__aeabi_dmul+0x134>
 80002cc:	f104 0414 	add.w	r4, r4, #20
 80002d0:	f1c4 0520 	rsb	r5, r4, #32
 80002d4:	fa00 f305 	lsl.w	r3, r0, r5
 80002d8:	fa20 f004 	lsr.w	r0, r0, r4
 80002dc:	fa01 f205 	lsl.w	r2, r1, r5
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80002e8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80002ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f0:	fa21 f604 	lsr.w	r6, r1, r4
 80002f4:	eb42 0106 	adc.w	r1, r2, r6
 80002f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002fc:	bf08      	it	eq
 80002fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000302:	bd70      	pop	{r4, r5, r6, pc}
 8000304:	f1c4 040c 	rsb	r4, r4, #12
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f304 	lsl.w	r3, r0, r4
 8000310:	fa20 f005 	lsr.w	r0, r0, r5
 8000314:	fa01 f204 	lsl.w	r2, r1, r4
 8000318:	ea40 0002 	orr.w	r0, r0, r2
 800031c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000320:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000324:	f141 0100 	adc.w	r1, r1, #0
 8000328:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800032c:	bf08      	it	eq
 800032e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f1c4 0520 	rsb	r5, r4, #32
 8000338:	fa00 f205 	lsl.w	r2, r0, r5
 800033c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000340:	fa20 f304 	lsr.w	r3, r0, r4
 8000344:	fa01 f205 	lsl.w	r2, r1, r5
 8000348:	ea43 0302 	orr.w	r3, r3, r2
 800034c:	fa21 f004 	lsr.w	r0, r1, r4
 8000350:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000354:	fa21 f204 	lsr.w	r2, r1, r4
 8000358:	ea20 0002 	bic.w	r0, r0, r2
 800035c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000360:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000364:	bf08      	it	eq
 8000366:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800036a:	bd70      	pop	{r4, r5, r6, pc}
 800036c:	f094 0f00 	teq	r4, #0
 8000370:	d10f      	bne.n	8000392 <__aeabi_dmul+0x1c2>
 8000372:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000376:	0040      	lsls	r0, r0, #1
 8000378:	eb41 0101 	adc.w	r1, r1, r1
 800037c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000380:	bf08      	it	eq
 8000382:	3c01      	subeq	r4, #1
 8000384:	d0f7      	beq.n	8000376 <__aeabi_dmul+0x1a6>
 8000386:	ea41 0106 	orr.w	r1, r1, r6
 800038a:	f095 0f00 	teq	r5, #0
 800038e:	bf18      	it	ne
 8000390:	4770      	bxne	lr
 8000392:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000396:	0052      	lsls	r2, r2, #1
 8000398:	eb43 0303 	adc.w	r3, r3, r3
 800039c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3d01      	subeq	r5, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1c6>
 80003a6:	ea43 0306 	orr.w	r3, r3, r6
 80003aa:	4770      	bx	lr
 80003ac:	ea94 0f0c 	teq	r4, ip
 80003b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003b4:	bf18      	it	ne
 80003b6:	ea95 0f0c 	teqne	r5, ip
 80003ba:	d00c      	beq.n	80003d6 <__aeabi_dmul+0x206>
 80003bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c0:	bf18      	it	ne
 80003c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003c6:	d1d1      	bne.n	800036c <__aeabi_dmul+0x19c>
 80003c8:	ea81 0103 	eor.w	r1, r1, r3
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd70      	pop	{r4, r5, r6, pc}
 80003d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003da:	bf06      	itte	eq
 80003dc:	4610      	moveq	r0, r2
 80003de:	4619      	moveq	r1, r3
 80003e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e4:	d019      	beq.n	800041a <__aeabi_dmul+0x24a>
 80003e6:	ea94 0f0c 	teq	r4, ip
 80003ea:	d102      	bne.n	80003f2 <__aeabi_dmul+0x222>
 80003ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f0:	d113      	bne.n	800041a <__aeabi_dmul+0x24a>
 80003f2:	ea95 0f0c 	teq	r5, ip
 80003f6:	d105      	bne.n	8000404 <__aeabi_dmul+0x234>
 80003f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003fc:	bf1c      	itt	ne
 80003fe:	4610      	movne	r0, r2
 8000400:	4619      	movne	r1, r3
 8000402:	d10a      	bne.n	800041a <__aeabi_dmul+0x24a>
 8000404:	ea81 0103 	eor.w	r1, r1, r3
 8000408:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800040c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000410:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000414:	f04f 0000 	mov.w	r0, #0
 8000418:	bd70      	pop	{r4, r5, r6, pc}
 800041a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800041e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000422:	bd70      	pop	{r4, r5, r6, pc}

08000424 <__aeabi_drsub>:
 8000424:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000428:	e002      	b.n	8000430 <__adddf3>
 800042a:	bf00      	nop

0800042c <__aeabi_dsub>:
 800042c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000430 <__adddf3>:
 8000430:	b530      	push	{r4, r5, lr}
 8000432:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000436:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800043a:	ea94 0f05 	teq	r4, r5
 800043e:	bf08      	it	eq
 8000440:	ea90 0f02 	teqeq	r0, r2
 8000444:	bf1f      	itttt	ne
 8000446:	ea54 0c00 	orrsne.w	ip, r4, r0
 800044a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800044e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000452:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000456:	f000 80e2 	beq.w	800061e <__adddf3+0x1ee>
 800045a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800045e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000462:	bfb8      	it	lt
 8000464:	426d      	neglt	r5, r5
 8000466:	dd0c      	ble.n	8000482 <__adddf3+0x52>
 8000468:	442c      	add	r4, r5
 800046a:	ea80 0202 	eor.w	r2, r0, r2
 800046e:	ea81 0303 	eor.w	r3, r1, r3
 8000472:	ea82 0000 	eor.w	r0, r2, r0
 8000476:	ea83 0101 	eor.w	r1, r3, r1
 800047a:	ea80 0202 	eor.w	r2, r0, r2
 800047e:	ea81 0303 	eor.w	r3, r1, r3
 8000482:	2d36      	cmp	r5, #54	@ 0x36
 8000484:	bf88      	it	hi
 8000486:	bd30      	pophi	{r4, r5, pc}
 8000488:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800048c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000490:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000494:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000498:	d002      	beq.n	80004a0 <__adddf3+0x70>
 800049a:	4240      	negs	r0, r0
 800049c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004ac:	d002      	beq.n	80004b4 <__adddf3+0x84>
 80004ae:	4252      	negs	r2, r2
 80004b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004b4:	ea94 0f05 	teq	r4, r5
 80004b8:	f000 80a7 	beq.w	800060a <__adddf3+0x1da>
 80004bc:	f1a4 0401 	sub.w	r4, r4, #1
 80004c0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004c4:	db0d      	blt.n	80004e2 <__adddf3+0xb2>
 80004c6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ca:	fa22 f205 	lsr.w	r2, r2, r5
 80004ce:	1880      	adds	r0, r0, r2
 80004d0:	f141 0100 	adc.w	r1, r1, #0
 80004d4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d8:	1880      	adds	r0, r0, r2
 80004da:	fa43 f305 	asr.w	r3, r3, r5
 80004de:	4159      	adcs	r1, r3
 80004e0:	e00e      	b.n	8000500 <__adddf3+0xd0>
 80004e2:	f1a5 0520 	sub.w	r5, r5, #32
 80004e6:	f10e 0e20 	add.w	lr, lr, #32
 80004ea:	2a01      	cmp	r2, #1
 80004ec:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f0:	bf28      	it	cs
 80004f2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004f6:	fa43 f305 	asr.w	r3, r3, r5
 80004fa:	18c0      	adds	r0, r0, r3
 80004fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000500:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000504:	d507      	bpl.n	8000516 <__adddf3+0xe6>
 8000506:	f04f 0e00 	mov.w	lr, #0
 800050a:	f1dc 0c00 	rsbs	ip, ip, #0
 800050e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000512:	eb6e 0101 	sbc.w	r1, lr, r1
 8000516:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800051a:	d31b      	bcc.n	8000554 <__adddf3+0x124>
 800051c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000520:	d30c      	bcc.n	800053c <__adddf3+0x10c>
 8000522:	0849      	lsrs	r1, r1, #1
 8000524:	ea5f 0030 	movs.w	r0, r0, rrx
 8000528:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800052c:	f104 0401 	add.w	r4, r4, #1
 8000530:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000534:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000538:	f080 809a 	bcs.w	8000670 <__adddf3+0x240>
 800053c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000540:	bf08      	it	eq
 8000542:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000546:	f150 0000 	adcs.w	r0, r0, #0
 800054a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800054e:	ea41 0105 	orr.w	r1, r1, r5
 8000552:	bd30      	pop	{r4, r5, pc}
 8000554:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000558:	4140      	adcs	r0, r0
 800055a:	eb41 0101 	adc.w	r1, r1, r1
 800055e:	3c01      	subs	r4, #1
 8000560:	bf28      	it	cs
 8000562:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000566:	d2e9      	bcs.n	800053c <__adddf3+0x10c>
 8000568:	f091 0f00 	teq	r1, #0
 800056c:	bf04      	itt	eq
 800056e:	4601      	moveq	r1, r0
 8000570:	2000      	moveq	r0, #0
 8000572:	fab1 f381 	clz	r3, r1
 8000576:	bf08      	it	eq
 8000578:	3320      	addeq	r3, #32
 800057a:	f1a3 030b 	sub.w	r3, r3, #11
 800057e:	f1b3 0220 	subs.w	r2, r3, #32
 8000582:	da0c      	bge.n	800059e <__adddf3+0x16e>
 8000584:	320c      	adds	r2, #12
 8000586:	dd08      	ble.n	800059a <__adddf3+0x16a>
 8000588:	f102 0c14 	add.w	ip, r2, #20
 800058c:	f1c2 020c 	rsb	r2, r2, #12
 8000590:	fa01 f00c 	lsl.w	r0, r1, ip
 8000594:	fa21 f102 	lsr.w	r1, r1, r2
 8000598:	e00c      	b.n	80005b4 <__adddf3+0x184>
 800059a:	f102 0214 	add.w	r2, r2, #20
 800059e:	bfd8      	it	le
 80005a0:	f1c2 0c20 	rsble	ip, r2, #32
 80005a4:	fa01 f102 	lsl.w	r1, r1, r2
 80005a8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005ac:	bfdc      	itt	le
 80005ae:	ea41 010c 	orrle.w	r1, r1, ip
 80005b2:	4090      	lslle	r0, r2
 80005b4:	1ae4      	subs	r4, r4, r3
 80005b6:	bfa2      	ittt	ge
 80005b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005bc:	4329      	orrge	r1, r5
 80005be:	bd30      	popge	{r4, r5, pc}
 80005c0:	ea6f 0404 	mvn.w	r4, r4
 80005c4:	3c1f      	subs	r4, #31
 80005c6:	da1c      	bge.n	8000602 <__adddf3+0x1d2>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc0e      	bgt.n	80005ea <__adddf3+0x1ba>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0220 	rsb	r2, r4, #32
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f302 	lsl.w	r3, r1, r2
 80005dc:	ea40 0003 	orr.w	r0, r0, r3
 80005e0:	fa21 f304 	lsr.w	r3, r1, r4
 80005e4:	ea45 0103 	orr.w	r1, r5, r3
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	f1c4 040c 	rsb	r4, r4, #12
 80005ee:	f1c4 0220 	rsb	r2, r4, #32
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 f304 	lsl.w	r3, r1, r4
 80005fa:	ea40 0003 	orr.w	r0, r0, r3
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	fa21 f004 	lsr.w	r0, r1, r4
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f094 0f00 	teq	r4, #0
 800060e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000612:	bf06      	itte	eq
 8000614:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000618:	3401      	addeq	r4, #1
 800061a:	3d01      	subne	r5, #1
 800061c:	e74e      	b.n	80004bc <__adddf3+0x8c>
 800061e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000622:	bf18      	it	ne
 8000624:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000628:	d029      	beq.n	800067e <__adddf3+0x24e>
 800062a:	ea94 0f05 	teq	r4, r5
 800062e:	bf08      	it	eq
 8000630:	ea90 0f02 	teqeq	r0, r2
 8000634:	d005      	beq.n	8000642 <__adddf3+0x212>
 8000636:	ea54 0c00 	orrs.w	ip, r4, r0
 800063a:	bf04      	itt	eq
 800063c:	4619      	moveq	r1, r3
 800063e:	4610      	moveq	r0, r2
 8000640:	bd30      	pop	{r4, r5, pc}
 8000642:	ea91 0f03 	teq	r1, r3
 8000646:	bf1e      	ittt	ne
 8000648:	2100      	movne	r1, #0
 800064a:	2000      	movne	r0, #0
 800064c:	bd30      	popne	{r4, r5, pc}
 800064e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000652:	d105      	bne.n	8000660 <__adddf3+0x230>
 8000654:	0040      	lsls	r0, r0, #1
 8000656:	4149      	adcs	r1, r1
 8000658:	bf28      	it	cs
 800065a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800065e:	bd30      	pop	{r4, r5, pc}
 8000660:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000664:	bf3c      	itt	cc
 8000666:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800066a:	bd30      	popcc	{r4, r5, pc}
 800066c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000670:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000674:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000678:	f04f 0000 	mov.w	r0, #0
 800067c:	bd30      	pop	{r4, r5, pc}
 800067e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000682:	bf1a      	itte	ne
 8000684:	4619      	movne	r1, r3
 8000686:	4610      	movne	r0, r2
 8000688:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800068c:	bf1c      	itt	ne
 800068e:	460b      	movne	r3, r1
 8000690:	4602      	movne	r2, r0
 8000692:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000696:	bf06      	itte	eq
 8000698:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800069c:	ea91 0f03 	teqeq	r1, r3
 80006a0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006a4:	bd30      	pop	{r4, r5, pc}
 80006a6:	bf00      	nop

080006a8 <__aeabi_ui2d>:
 80006a8:	f090 0f00 	teq	r0, #0
 80006ac:	bf04      	itt	eq
 80006ae:	2100      	moveq	r1, #0
 80006b0:	4770      	bxeq	lr
 80006b2:	b530      	push	{r4, r5, lr}
 80006b4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006bc:	f04f 0500 	mov.w	r5, #0
 80006c0:	f04f 0100 	mov.w	r1, #0
 80006c4:	e750      	b.n	8000568 <__adddf3+0x138>
 80006c6:	bf00      	nop

080006c8 <__aeabi_i2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006dc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80006e0:	bf48      	it	mi
 80006e2:	4240      	negmi	r0, r0
 80006e4:	f04f 0100 	mov.w	r1, #0
 80006e8:	e73e      	b.n	8000568 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_f2d>:
 80006ec:	0042      	lsls	r2, r0, #1
 80006ee:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006fa:	bf1f      	itttt	ne
 80006fc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000700:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000704:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000708:	4770      	bxne	lr
 800070a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800070e:	bf08      	it	eq
 8000710:	4770      	bxeq	lr
 8000712:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000716:	bf04      	itt	eq
 8000718:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000724:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000728:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800072c:	e71c      	b.n	8000568 <__adddf3+0x138>
 800072e:	bf00      	nop

08000730 <__aeabi_ul2d>:
 8000730:	ea50 0201 	orrs.w	r2, r0, r1
 8000734:	bf08      	it	eq
 8000736:	4770      	bxeq	lr
 8000738:	b530      	push	{r4, r5, lr}
 800073a:	f04f 0500 	mov.w	r5, #0
 800073e:	e00a      	b.n	8000756 <__aeabi_l2d+0x16>

08000740 <__aeabi_l2d>:
 8000740:	ea50 0201 	orrs.w	r2, r0, r1
 8000744:	bf08      	it	eq
 8000746:	4770      	bxeq	lr
 8000748:	b530      	push	{r4, r5, lr}
 800074a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800074e:	d502      	bpl.n	8000756 <__aeabi_l2d+0x16>
 8000750:	4240      	negs	r0, r0
 8000752:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000756:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800075a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000762:	f43f aed8 	beq.w	8000516 <__adddf3+0xe6>
 8000766:	f04f 0203 	mov.w	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800077e:	f1c2 0320 	rsb	r3, r2, #32
 8000782:	fa00 fc03 	lsl.w	ip, r0, r3
 8000786:	fa20 f002 	lsr.w	r0, r0, r2
 800078a:	fa01 fe03 	lsl.w	lr, r1, r3
 800078e:	ea40 000e 	orr.w	r0, r0, lr
 8000792:	fa21 f102 	lsr.w	r1, r1, r2
 8000796:	4414      	add	r4, r2
 8000798:	e6bd      	b.n	8000516 <__adddf3+0xe6>
 800079a:	bf00      	nop

0800079c <__aeabi_d2iz>:
 800079c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80007a4:	d215      	bcs.n	80007d2 <__aeabi_d2iz+0x36>
 80007a6:	d511      	bpl.n	80007cc <__aeabi_d2iz+0x30>
 80007a8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80007ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b0:	d912      	bls.n	80007d8 <__aeabi_d2iz+0x3c>
 80007b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80007ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007be:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007c2:	fa23 f002 	lsr.w	r0, r3, r2
 80007c6:	bf18      	it	ne
 80007c8:	4240      	negne	r0, r0
 80007ca:	4770      	bx	lr
 80007cc:	f04f 0000 	mov.w	r0, #0
 80007d0:	4770      	bx	lr
 80007d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007d6:	d105      	bne.n	80007e4 <__aeabi_d2iz+0x48>
 80007d8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80007dc:	bf08      	it	eq
 80007de:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80007e2:	4770      	bx	lr
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop

080007ec <__aeabi_uldivmod>:
 80007ec:	b953      	cbnz	r3, 8000804 <__aeabi_uldivmod+0x18>
 80007ee:	b94a      	cbnz	r2, 8000804 <__aeabi_uldivmod+0x18>
 80007f0:	2900      	cmp	r1, #0
 80007f2:	bf08      	it	eq
 80007f4:	2800      	cmpeq	r0, #0
 80007f6:	bf1c      	itt	ne
 80007f8:	f04f 31ff 	movne.w	r1, #4294967295
 80007fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000800:	f000 b988 	b.w	8000b14 <__aeabi_idiv0>
 8000804:	f1ad 0c08 	sub.w	ip, sp, #8
 8000808:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800080c:	f000 f806 	bl	800081c <__udivmoddi4>
 8000810:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000814:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr

0800081c <__udivmoddi4>:
 800081c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000820:	9d08      	ldr	r5, [sp, #32]
 8000822:	468e      	mov	lr, r1
 8000824:	4604      	mov	r4, r0
 8000826:	4688      	mov	r8, r1
 8000828:	2b00      	cmp	r3, #0
 800082a:	d14a      	bne.n	80008c2 <__udivmoddi4+0xa6>
 800082c:	428a      	cmp	r2, r1
 800082e:	4617      	mov	r7, r2
 8000830:	d962      	bls.n	80008f8 <__udivmoddi4+0xdc>
 8000832:	fab2 f682 	clz	r6, r2
 8000836:	b14e      	cbz	r6, 800084c <__udivmoddi4+0x30>
 8000838:	f1c6 0320 	rsb	r3, r6, #32
 800083c:	fa01 f806 	lsl.w	r8, r1, r6
 8000840:	fa20 f303 	lsr.w	r3, r0, r3
 8000844:	40b7      	lsls	r7, r6
 8000846:	ea43 0808 	orr.w	r8, r3, r8
 800084a:	40b4      	lsls	r4, r6
 800084c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000850:	fa1f fc87 	uxth.w	ip, r7
 8000854:	fbb8 f1fe 	udiv	r1, r8, lr
 8000858:	0c23      	lsrs	r3, r4, #16
 800085a:	fb0e 8811 	mls	r8, lr, r1, r8
 800085e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000862:	fb01 f20c 	mul.w	r2, r1, ip
 8000866:	429a      	cmp	r2, r3
 8000868:	d909      	bls.n	800087e <__udivmoddi4+0x62>
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000870:	f080 80ea 	bcs.w	8000a48 <__udivmoddi4+0x22c>
 8000874:	429a      	cmp	r2, r3
 8000876:	f240 80e7 	bls.w	8000a48 <__udivmoddi4+0x22c>
 800087a:	3902      	subs	r1, #2
 800087c:	443b      	add	r3, r7
 800087e:	1a9a      	subs	r2, r3, r2
 8000880:	b2a3      	uxth	r3, r4
 8000882:	fbb2 f0fe 	udiv	r0, r2, lr
 8000886:	fb0e 2210 	mls	r2, lr, r0, r2
 800088a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800088e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000892:	459c      	cmp	ip, r3
 8000894:	d909      	bls.n	80008aa <__udivmoddi4+0x8e>
 8000896:	18fb      	adds	r3, r7, r3
 8000898:	f100 32ff 	add.w	r2, r0, #4294967295
 800089c:	f080 80d6 	bcs.w	8000a4c <__udivmoddi4+0x230>
 80008a0:	459c      	cmp	ip, r3
 80008a2:	f240 80d3 	bls.w	8000a4c <__udivmoddi4+0x230>
 80008a6:	443b      	add	r3, r7
 80008a8:	3802      	subs	r0, #2
 80008aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008ae:	eba3 030c 	sub.w	r3, r3, ip
 80008b2:	2100      	movs	r1, #0
 80008b4:	b11d      	cbz	r5, 80008be <__udivmoddi4+0xa2>
 80008b6:	40f3      	lsrs	r3, r6
 80008b8:	2200      	movs	r2, #0
 80008ba:	e9c5 3200 	strd	r3, r2, [r5]
 80008be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008c2:	428b      	cmp	r3, r1
 80008c4:	d905      	bls.n	80008d2 <__udivmoddi4+0xb6>
 80008c6:	b10d      	cbz	r5, 80008cc <__udivmoddi4+0xb0>
 80008c8:	e9c5 0100 	strd	r0, r1, [r5]
 80008cc:	2100      	movs	r1, #0
 80008ce:	4608      	mov	r0, r1
 80008d0:	e7f5      	b.n	80008be <__udivmoddi4+0xa2>
 80008d2:	fab3 f183 	clz	r1, r3
 80008d6:	2900      	cmp	r1, #0
 80008d8:	d146      	bne.n	8000968 <__udivmoddi4+0x14c>
 80008da:	4573      	cmp	r3, lr
 80008dc:	d302      	bcc.n	80008e4 <__udivmoddi4+0xc8>
 80008de:	4282      	cmp	r2, r0
 80008e0:	f200 8105 	bhi.w	8000aee <__udivmoddi4+0x2d2>
 80008e4:	1a84      	subs	r4, r0, r2
 80008e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80008ea:	2001      	movs	r0, #1
 80008ec:	4690      	mov	r8, r2
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d0e5      	beq.n	80008be <__udivmoddi4+0xa2>
 80008f2:	e9c5 4800 	strd	r4, r8, [r5]
 80008f6:	e7e2      	b.n	80008be <__udivmoddi4+0xa2>
 80008f8:	2a00      	cmp	r2, #0
 80008fa:	f000 8090 	beq.w	8000a1e <__udivmoddi4+0x202>
 80008fe:	fab2 f682 	clz	r6, r2
 8000902:	2e00      	cmp	r6, #0
 8000904:	f040 80a4 	bne.w	8000a50 <__udivmoddi4+0x234>
 8000908:	1a8a      	subs	r2, r1, r2
 800090a:	0c03      	lsrs	r3, r0, #16
 800090c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000910:	b280      	uxth	r0, r0
 8000912:	b2bc      	uxth	r4, r7
 8000914:	2101      	movs	r1, #1
 8000916:	fbb2 fcfe 	udiv	ip, r2, lr
 800091a:	fb0e 221c 	mls	r2, lr, ip, r2
 800091e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000922:	fb04 f20c 	mul.w	r2, r4, ip
 8000926:	429a      	cmp	r2, r3
 8000928:	d907      	bls.n	800093a <__udivmoddi4+0x11e>
 800092a:	18fb      	adds	r3, r7, r3
 800092c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000930:	d202      	bcs.n	8000938 <__udivmoddi4+0x11c>
 8000932:	429a      	cmp	r2, r3
 8000934:	f200 80e0 	bhi.w	8000af8 <__udivmoddi4+0x2dc>
 8000938:	46c4      	mov	ip, r8
 800093a:	1a9b      	subs	r3, r3, r2
 800093c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000940:	fb0e 3312 	mls	r3, lr, r2, r3
 8000944:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000948:	fb02 f404 	mul.w	r4, r2, r4
 800094c:	429c      	cmp	r4, r3
 800094e:	d907      	bls.n	8000960 <__udivmoddi4+0x144>
 8000950:	18fb      	adds	r3, r7, r3
 8000952:	f102 30ff 	add.w	r0, r2, #4294967295
 8000956:	d202      	bcs.n	800095e <__udivmoddi4+0x142>
 8000958:	429c      	cmp	r4, r3
 800095a:	f200 80ca 	bhi.w	8000af2 <__udivmoddi4+0x2d6>
 800095e:	4602      	mov	r2, r0
 8000960:	1b1b      	subs	r3, r3, r4
 8000962:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000966:	e7a5      	b.n	80008b4 <__udivmoddi4+0x98>
 8000968:	f1c1 0620 	rsb	r6, r1, #32
 800096c:	408b      	lsls	r3, r1
 800096e:	fa22 f706 	lsr.w	r7, r2, r6
 8000972:	431f      	orrs	r7, r3
 8000974:	fa0e f401 	lsl.w	r4, lr, r1
 8000978:	fa20 f306 	lsr.w	r3, r0, r6
 800097c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000980:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000984:	4323      	orrs	r3, r4
 8000986:	fa00 f801 	lsl.w	r8, r0, r1
 800098a:	fa1f fc87 	uxth.w	ip, r7
 800098e:	fbbe f0f9 	udiv	r0, lr, r9
 8000992:	0c1c      	lsrs	r4, r3, #16
 8000994:	fb09 ee10 	mls	lr, r9, r0, lr
 8000998:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800099c:	fb00 fe0c 	mul.w	lr, r0, ip
 80009a0:	45a6      	cmp	lr, r4
 80009a2:	fa02 f201 	lsl.w	r2, r2, r1
 80009a6:	d909      	bls.n	80009bc <__udivmoddi4+0x1a0>
 80009a8:	193c      	adds	r4, r7, r4
 80009aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80009ae:	f080 809c 	bcs.w	8000aea <__udivmoddi4+0x2ce>
 80009b2:	45a6      	cmp	lr, r4
 80009b4:	f240 8099 	bls.w	8000aea <__udivmoddi4+0x2ce>
 80009b8:	3802      	subs	r0, #2
 80009ba:	443c      	add	r4, r7
 80009bc:	eba4 040e 	sub.w	r4, r4, lr
 80009c0:	fa1f fe83 	uxth.w	lr, r3
 80009c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80009c8:	fb09 4413 	mls	r4, r9, r3, r4
 80009cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80009d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80009d4:	45a4      	cmp	ip, r4
 80009d6:	d908      	bls.n	80009ea <__udivmoddi4+0x1ce>
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	f103 3eff 	add.w	lr, r3, #4294967295
 80009de:	f080 8082 	bcs.w	8000ae6 <__udivmoddi4+0x2ca>
 80009e2:	45a4      	cmp	ip, r4
 80009e4:	d97f      	bls.n	8000ae6 <__udivmoddi4+0x2ca>
 80009e6:	3b02      	subs	r3, #2
 80009e8:	443c      	add	r4, r7
 80009ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80009ee:	eba4 040c 	sub.w	r4, r4, ip
 80009f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80009f6:	4564      	cmp	r4, ip
 80009f8:	4673      	mov	r3, lr
 80009fa:	46e1      	mov	r9, ip
 80009fc:	d362      	bcc.n	8000ac4 <__udivmoddi4+0x2a8>
 80009fe:	d05f      	beq.n	8000ac0 <__udivmoddi4+0x2a4>
 8000a00:	b15d      	cbz	r5, 8000a1a <__udivmoddi4+0x1fe>
 8000a02:	ebb8 0203 	subs.w	r2, r8, r3
 8000a06:	eb64 0409 	sbc.w	r4, r4, r9
 8000a0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000a0e:	fa22 f301 	lsr.w	r3, r2, r1
 8000a12:	431e      	orrs	r6, r3
 8000a14:	40cc      	lsrs	r4, r1
 8000a16:	e9c5 6400 	strd	r6, r4, [r5]
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	e74f      	b.n	80008be <__udivmoddi4+0xa2>
 8000a1e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000a22:	0c01      	lsrs	r1, r0, #16
 8000a24:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000a28:	b280      	uxth	r0, r0
 8000a2a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000a2e:	463b      	mov	r3, r7
 8000a30:	4638      	mov	r0, r7
 8000a32:	463c      	mov	r4, r7
 8000a34:	46b8      	mov	r8, r7
 8000a36:	46be      	mov	lr, r7
 8000a38:	2620      	movs	r6, #32
 8000a3a:	fbb1 f1f7 	udiv	r1, r1, r7
 8000a3e:	eba2 0208 	sub.w	r2, r2, r8
 8000a42:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000a46:	e766      	b.n	8000916 <__udivmoddi4+0xfa>
 8000a48:	4601      	mov	r1, r0
 8000a4a:	e718      	b.n	800087e <__udivmoddi4+0x62>
 8000a4c:	4610      	mov	r0, r2
 8000a4e:	e72c      	b.n	80008aa <__udivmoddi4+0x8e>
 8000a50:	f1c6 0220 	rsb	r2, r6, #32
 8000a54:	fa2e f302 	lsr.w	r3, lr, r2
 8000a58:	40b7      	lsls	r7, r6
 8000a5a:	40b1      	lsls	r1, r6
 8000a5c:	fa20 f202 	lsr.w	r2, r0, r2
 8000a60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a64:	430a      	orrs	r2, r1
 8000a66:	fbb3 f8fe 	udiv	r8, r3, lr
 8000a6a:	b2bc      	uxth	r4, r7
 8000a6c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a70:	0c11      	lsrs	r1, r2, #16
 8000a72:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a76:	fb08 f904 	mul.w	r9, r8, r4
 8000a7a:	40b0      	lsls	r0, r6
 8000a7c:	4589      	cmp	r9, r1
 8000a7e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a82:	b280      	uxth	r0, r0
 8000a84:	d93e      	bls.n	8000b04 <__udivmoddi4+0x2e8>
 8000a86:	1879      	adds	r1, r7, r1
 8000a88:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a8c:	d201      	bcs.n	8000a92 <__udivmoddi4+0x276>
 8000a8e:	4589      	cmp	r9, r1
 8000a90:	d81f      	bhi.n	8000ad2 <__udivmoddi4+0x2b6>
 8000a92:	eba1 0109 	sub.w	r1, r1, r9
 8000a96:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a9a:	fb09 f804 	mul.w	r8, r9, r4
 8000a9e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000aa2:	b292      	uxth	r2, r2
 8000aa4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000aa8:	4542      	cmp	r2, r8
 8000aaa:	d229      	bcs.n	8000b00 <__udivmoddi4+0x2e4>
 8000aac:	18ba      	adds	r2, r7, r2
 8000aae:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ab2:	d2c4      	bcs.n	8000a3e <__udivmoddi4+0x222>
 8000ab4:	4542      	cmp	r2, r8
 8000ab6:	d2c2      	bcs.n	8000a3e <__udivmoddi4+0x222>
 8000ab8:	f1a9 0102 	sub.w	r1, r9, #2
 8000abc:	443a      	add	r2, r7
 8000abe:	e7be      	b.n	8000a3e <__udivmoddi4+0x222>
 8000ac0:	45f0      	cmp	r8, lr
 8000ac2:	d29d      	bcs.n	8000a00 <__udivmoddi4+0x1e4>
 8000ac4:	ebbe 0302 	subs.w	r3, lr, r2
 8000ac8:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000acc:	3801      	subs	r0, #1
 8000ace:	46e1      	mov	r9, ip
 8000ad0:	e796      	b.n	8000a00 <__udivmoddi4+0x1e4>
 8000ad2:	eba7 0909 	sub.w	r9, r7, r9
 8000ad6:	4449      	add	r1, r9
 8000ad8:	f1a8 0c02 	sub.w	ip, r8, #2
 8000adc:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ae0:	fb09 f804 	mul.w	r8, r9, r4
 8000ae4:	e7db      	b.n	8000a9e <__udivmoddi4+0x282>
 8000ae6:	4673      	mov	r3, lr
 8000ae8:	e77f      	b.n	80009ea <__udivmoddi4+0x1ce>
 8000aea:	4650      	mov	r0, sl
 8000aec:	e766      	b.n	80009bc <__udivmoddi4+0x1a0>
 8000aee:	4608      	mov	r0, r1
 8000af0:	e6fd      	b.n	80008ee <__udivmoddi4+0xd2>
 8000af2:	443b      	add	r3, r7
 8000af4:	3a02      	subs	r2, #2
 8000af6:	e733      	b.n	8000960 <__udivmoddi4+0x144>
 8000af8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	e71c      	b.n	800093a <__udivmoddi4+0x11e>
 8000b00:	4649      	mov	r1, r9
 8000b02:	e79c      	b.n	8000a3e <__udivmoddi4+0x222>
 8000b04:	eba1 0109 	sub.w	r1, r1, r9
 8000b08:	46c4      	mov	ip, r8
 8000b0a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b0e:	fb09 f804 	mul.w	r8, r9, r4
 8000b12:	e7c4      	b.n	8000a9e <__udivmoddi4+0x282>

08000b14 <__aeabi_idiv0>:
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b1c:	f002 fd8a 	bl	8003634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b20:	f000 f892 	bl	8000c48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b24:	f000 fc3c 	bl	80013a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b28:	f000 fc0a 	bl	8001340 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b2c:	f000 f96e 	bl	8000e0c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b30:	f000 f9c6 	bl	8000ec0 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000b34:	f000 f8da 	bl	8000cec <MX_TIM1_Init>
  MX_TIM4_Init();
 8000b38:	f000 fa1c 	bl	8000f74 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000b3c:	f000 fa74 	bl	8001028 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000b40:	f000 fb02 	bl	8001148 <MX_TIM15_Init>
  MX_TIM17_Init();
 8000b44:	f000 fb84 	bl	8001250 <MX_TIM17_Init>
//	index_desired_position = 0;
//	middle_desired_position = 0;
//	ring_desired_position = 0;
//	pinky_desired_position = 900;

  SignLetter('A');
 8000b48:	2041      	movs	r0, #65	@ 0x41
 8000b4a:	f000 fd9d 	bl	8001688 <SignLetter>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000b4e:	f006 fa0b 	bl	8006f68 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Index_Finger */
  Index_FingerHandle = osTimerNew(Index, osTimerOnce, NULL, &Index_Finger_attributes);
 8000b52:	4b25      	ldr	r3, [pc, #148]	@ (8000be8 <main+0xd0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	2100      	movs	r1, #0
 8000b58:	4824      	ldr	r0, [pc, #144]	@ (8000bec <main+0xd4>)
 8000b5a:	f006 fb11 	bl	8007180 <osTimerNew>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	4a23      	ldr	r2, [pc, #140]	@ (8000bf0 <main+0xd8>)
 8000b62:	6013      	str	r3, [r2, #0]

  /* creation of Thumb_Finger */
  Thumb_FingerHandle = osTimerNew(Thumb, osTimerOnce, NULL, &Thumb_Finger_attributes);
 8000b64:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <main+0xdc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4823      	ldr	r0, [pc, #140]	@ (8000bf8 <main+0xe0>)
 8000b6c:	f006 fb08 	bl	8007180 <osTimerNew>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4a22      	ldr	r2, [pc, #136]	@ (8000bfc <main+0xe4>)
 8000b74:	6013      	str	r3, [r2, #0]

  /* creation of Middle_Finger */
  Middle_FingerHandle = osTimerNew(Middle, osTimerOnce, NULL, &Middle_Finger_attributes);
 8000b76:	4b22      	ldr	r3, [pc, #136]	@ (8000c00 <main+0xe8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4821      	ldr	r0, [pc, #132]	@ (8000c04 <main+0xec>)
 8000b7e:	f006 faff 	bl	8007180 <osTimerNew>
 8000b82:	4603      	mov	r3, r0
 8000b84:	4a20      	ldr	r2, [pc, #128]	@ (8000c08 <main+0xf0>)
 8000b86:	6013      	str	r3, [r2, #0]

  /* creation of Ring_Finger */
  Ring_FingerHandle = osTimerNew(Ring, osTimerOnce, NULL, &Ring_Finger_attributes);
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <main+0xf4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4820      	ldr	r0, [pc, #128]	@ (8000c10 <main+0xf8>)
 8000b90:	f006 faf6 	bl	8007180 <osTimerNew>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a1f      	ldr	r2, [pc, #124]	@ (8000c14 <main+0xfc>)
 8000b98:	6013      	str	r3, [r2, #0]

  /* creation of Pinky_Finger */
  Pinky_FingerHandle = osTimerNew(Pinky, osTimerOnce, NULL, &Pinky_Finger_attributes);
 8000b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <main+0x100>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	481e      	ldr	r0, [pc, #120]	@ (8000c1c <main+0x104>)
 8000ba2:	f006 faed 	bl	8007180 <osTimerNew>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8000c20 <main+0x108>)
 8000baa:	6013      	str	r3, [r2, #0]

  /* creation of Wrist_Bend */
  Wrist_BendHandle = osTimerNew(wrist_bend, osTimerOnce, NULL, &Wrist_Bend_attributes);
 8000bac:	4b1d      	ldr	r3, [pc, #116]	@ (8000c24 <main+0x10c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	481d      	ldr	r0, [pc, #116]	@ (8000c28 <main+0x110>)
 8000bb4:	f006 fae4 	bl	8007180 <osTimerNew>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	4a1c      	ldr	r2, [pc, #112]	@ (8000c2c <main+0x114>)
 8000bbc:	6013      	str	r3, [r2, #0]

  /* creation of Wrist_Rotate */
  Wrist_RotateHandle = osTimerNew(wrist_rotate, osTimerPeriodic, NULL, &Wrist_Rotate_attributes);
 8000bbe:	4b1c      	ldr	r3, [pc, #112]	@ (8000c30 <main+0x118>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	481b      	ldr	r0, [pc, #108]	@ (8000c34 <main+0x11c>)
 8000bc6:	f006 fadb 	bl	8007180 <osTimerNew>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8000c38 <main+0x120>)
 8000bce:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8000c3c <main+0x124>)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	481a      	ldr	r0, [pc, #104]	@ (8000c40 <main+0x128>)
 8000bd6:	f006 fa11 	bl	8006ffc <osThreadNew>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4a19      	ldr	r2, [pc, #100]	@ (8000c44 <main+0x12c>)
 8000bde:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000be0:	f006 f9e6 	bl	8006fb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <main+0xcc>
 8000be8:	08009ff4 	.word	0x08009ff4
 8000bec:	08002e21 	.word	0x08002e21
 8000bf0:	20000320 	.word	0x20000320
 8000bf4:	0800a004 	.word	0x0800a004
 8000bf8:	08002e59 	.word	0x08002e59
 8000bfc:	20000324 	.word	0x20000324
 8000c00:	0800a014 	.word	0x0800a014
 8000c04:	08002e9d 	.word	0x08002e9d
 8000c08:	20000328 	.word	0x20000328
 8000c0c:	0800a024 	.word	0x0800a024
 8000c10:	08002ed5 	.word	0x08002ed5
 8000c14:	2000032c 	.word	0x2000032c
 8000c18:	0800a034 	.word	0x0800a034
 8000c1c:	08002f0d 	.word	0x08002f0d
 8000c20:	20000330 	.word	0x20000330
 8000c24:	0800a044 	.word	0x0800a044
 8000c28:	08002f45 	.word	0x08002f45
 8000c2c:	20000334 	.word	0x20000334
 8000c30:	0800a054 	.word	0x0800a054
 8000c34:	08002f7d 	.word	0x08002f7d
 8000c38:	20000338 	.word	0x20000338
 8000c3c:	08009fd0 	.word	0x08009fd0
 8000c40:	08002af1 	.word	0x08002af1
 8000c44:	2000031c 	.word	0x2000031c

08000c48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b096      	sub	sp, #88	@ 0x58
 8000c4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	2244      	movs	r2, #68	@ 0x44
 8000c54:	2100      	movs	r1, #0
 8000c56:	4618      	mov	r0, r3
 8000c58:	f009 f8f6 	bl	8009e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	609a      	str	r2, [r3, #8]
 8000c66:	60da      	str	r2, [r3, #12]
 8000c68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c6a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000c6e:	f003 f811 	bl	8003c94 <HAL_PWREx_ControlVoltageScaling>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c78:	f002 f9ae 	bl	8002fd8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c80:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c86:	2310      	movs	r3, #16
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000c96:	230a      	movs	r3, #10
 8000c98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4618      	mov	r0, r3
 8000cac:	f003 f848 	bl	8003d40 <HAL_RCC_OscConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000cb6:	f002 f98f 	bl	8002fd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cba:	230f      	movs	r3, #15
 8000cbc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2104      	movs	r1, #4
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f003 fc10 	bl	80044f8 <HAL_RCC_ClockConfig>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cde:	f002 f97b 	bl	8002fd8 <Error_Handler>
  }
}
 8000ce2:	bf00      	nop
 8000ce4:	3758      	adds	r7, #88	@ 0x58
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
	...

08000cec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b096      	sub	sp, #88	@ 0x58
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
 8000cfc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfe:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
 8000d0e:	615a      	str	r2, [r3, #20]
 8000d10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	222c      	movs	r2, #44	@ 0x2c
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f009 f895 	bl	8009e48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d1e:	4b39      	ldr	r3, [pc, #228]	@ (8000e04 <MX_TIM1_Init+0x118>)
 8000d20:	4a39      	ldr	r2, [pc, #228]	@ (8000e08 <MX_TIM1_Init+0x11c>)
 8000d22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000d24:	4b37      	ldr	r3, [pc, #220]	@ (8000e04 <MX_TIM1_Init+0x118>)
 8000d26:	224f      	movs	r2, #79	@ 0x4f
 8000d28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b36      	ldr	r3, [pc, #216]	@ (8000e04 <MX_TIM1_Init+0x118>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000d30:	4b34      	ldr	r3, [pc, #208]	@ (8000e04 <MX_TIM1_Init+0x118>)
 8000d32:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000d36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b32      	ldr	r3, [pc, #200]	@ (8000e04 <MX_TIM1_Init+0x118>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d3e:	4b31      	ldr	r3, [pc, #196]	@ (8000e04 <MX_TIM1_Init+0x118>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d44:	4b2f      	ldr	r3, [pc, #188]	@ (8000e04 <MX_TIM1_Init+0x118>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d4a:	482e      	ldr	r0, [pc, #184]	@ (8000e04 <MX_TIM1_Init+0x118>)
 8000d4c:	f004 fbae 	bl	80054ac <HAL_TIM_PWM_Init>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d56:	f002 f93f 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d66:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4825      	ldr	r0, [pc, #148]	@ (8000e04 <MX_TIM1_Init+0x118>)
 8000d6e:	f005 fa71 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d78:	f002 f92e 	bl	8002fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d7c:	2360      	movs	r3, #96	@ 0x60
 8000d7e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d84:	2300      	movs	r3, #0
 8000d86:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d90:	2300      	movs	r3, #0
 8000d92:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d94:	2300      	movs	r3, #0
 8000d96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4619      	mov	r1, r3
 8000da0:	4818      	ldr	r0, [pc, #96]	@ (8000e04 <MX_TIM1_Init+0x118>)
 8000da2:	f004 fd79 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000dac:	f002 f914 	bl	8002fd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dc4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dc8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000dd2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000de0:	1d3b      	adds	r3, r7, #4
 8000de2:	4619      	mov	r1, r3
 8000de4:	4807      	ldr	r0, [pc, #28]	@ (8000e04 <MX_TIM1_Init+0x118>)
 8000de6:	f005 fabd 	bl	8006364 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000df0:	f002 f8f2 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000df4:	4803      	ldr	r0, [pc, #12]	@ (8000e04 <MX_TIM1_Init+0x118>)
 8000df6:	f002 f9bf 	bl	8003178 <HAL_TIM_MspPostInit>

}
 8000dfa:	bf00      	nop
 8000dfc:	3758      	adds	r7, #88	@ 0x58
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000080 	.word	0x20000080
 8000e08:	40012c00 	.word	0x40012c00

08000e0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	@ 0x28
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1e:	463b      	mov	r3, r7
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
 8000e2c:	615a      	str	r2, [r3, #20]
 8000e2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e30:	4b22      	ldr	r3, [pc, #136]	@ (8000ebc <MX_TIM2_Init+0xb0>)
 8000e32:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e36:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000e38:	4b20      	ldr	r3, [pc, #128]	@ (8000ebc <MX_TIM2_Init+0xb0>)
 8000e3a:	224f      	movs	r2, #79	@ 0x4f
 8000e3c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <MX_TIM2_Init+0xb0>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000e44:	4b1d      	ldr	r3, [pc, #116]	@ (8000ebc <MX_TIM2_Init+0xb0>)
 8000e46:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000e4a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8000ebc <MX_TIM2_Init+0xb0>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e52:	4b1a      	ldr	r3, [pc, #104]	@ (8000ebc <MX_TIM2_Init+0xb0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e58:	4818      	ldr	r0, [pc, #96]	@ (8000ebc <MX_TIM2_Init+0xb0>)
 8000e5a:	f004 fb27 	bl	80054ac <HAL_TIM_PWM_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000e64:	f002 f8b8 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4811      	ldr	r0, [pc, #68]	@ (8000ebc <MX_TIM2_Init+0xb0>)
 8000e78:	f005 f9ec 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000e82:	f002 f8a9 	bl	8002fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e86:	2360      	movs	r3, #96	@ 0x60
 8000e88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4807      	ldr	r0, [pc, #28]	@ (8000ebc <MX_TIM2_Init+0xb0>)
 8000e9e:	f004 fcfb 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ea8:	f002 f896 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000eac:	4803      	ldr	r0, [pc, #12]	@ (8000ebc <MX_TIM2_Init+0xb0>)
 8000eae:	f002 f963 	bl	8003178 <HAL_TIM_MspPostInit>

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	@ 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200000cc 	.word	0x200000cc

08000ec0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	@ 0x28
 8000ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec6:	f107 031c 	add.w	r3, r7, #28
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]
 8000ee2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ee4:	4b21      	ldr	r3, [pc, #132]	@ (8000f6c <MX_TIM3_Init+0xac>)
 8000ee6:	4a22      	ldr	r2, [pc, #136]	@ (8000f70 <MX_TIM3_Init+0xb0>)
 8000ee8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000eea:	4b20      	ldr	r3, [pc, #128]	@ (8000f6c <MX_TIM3_Init+0xac>)
 8000eec:	224f      	movs	r2, #79	@ 0x4f
 8000eee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f6c <MX_TIM3_Init+0xac>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f6c <MX_TIM3_Init+0xac>)
 8000ef8:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000efc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efe:	4b1b      	ldr	r3, [pc, #108]	@ (8000f6c <MX_TIM3_Init+0xac>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f04:	4b19      	ldr	r3, [pc, #100]	@ (8000f6c <MX_TIM3_Init+0xac>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f0a:	4818      	ldr	r0, [pc, #96]	@ (8000f6c <MX_TIM3_Init+0xac>)
 8000f0c:	f004 face 	bl	80054ac <HAL_TIM_PWM_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f16:	f002 f85f 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	4810      	ldr	r0, [pc, #64]	@ (8000f6c <MX_TIM3_Init+0xac>)
 8000f2a:	f005 f993 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f34:	f002 f850 	bl	8002fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f38:	2360      	movs	r3, #96	@ 0x60
 8000f3a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f40:	2300      	movs	r3, #0
 8000f42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f48:	463b      	mov	r3, r7
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4807      	ldr	r0, [pc, #28]	@ (8000f6c <MX_TIM3_Init+0xac>)
 8000f50:	f004 fca2 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000f5a:	f002 f83d 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f5e:	4803      	ldr	r0, [pc, #12]	@ (8000f6c <MX_TIM3_Init+0xac>)
 8000f60:	f002 f90a 	bl	8003178 <HAL_TIM_MspPostInit>

}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	@ 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000118 	.word	0x20000118
 8000f70:	40000400 	.word	0x40000400

08000f74 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	@ 0x28
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f7a:	f107 031c 	add.w	r3, r7, #28
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
 8000f94:	615a      	str	r2, [r3, #20]
 8000f96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f98:	4b21      	ldr	r3, [pc, #132]	@ (8001020 <MX_TIM4_Init+0xac>)
 8000f9a:	4a22      	ldr	r2, [pc, #136]	@ (8001024 <MX_TIM4_Init+0xb0>)
 8000f9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 8000f9e:	4b20      	ldr	r3, [pc, #128]	@ (8001020 <MX_TIM4_Init+0xac>)
 8000fa0:	224f      	movs	r2, #79	@ 0x4f
 8000fa2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <MX_TIM4_Init+0xac>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	@ (8001020 <MX_TIM4_Init+0xac>)
 8000fac:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000fb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <MX_TIM4_Init+0xac>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb8:	4b19      	ldr	r3, [pc, #100]	@ (8001020 <MX_TIM4_Init+0xac>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fbe:	4818      	ldr	r0, [pc, #96]	@ (8001020 <MX_TIM4_Init+0xac>)
 8000fc0:	f004 fa74 	bl	80054ac <HAL_TIM_PWM_Init>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000fca:	f002 f805 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4810      	ldr	r0, [pc, #64]	@ (8001020 <MX_TIM4_Init+0xac>)
 8000fde:	f005 f939 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000fe8:	f001 fff6 	bl	8002fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fec:	2360      	movs	r3, #96	@ 0x60
 8000fee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	2200      	movs	r2, #0
 8001000:	4619      	mov	r1, r3
 8001002:	4807      	ldr	r0, [pc, #28]	@ (8001020 <MX_TIM4_Init+0xac>)
 8001004:	f004 fc48 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800100e:	f001 ffe3 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001012:	4803      	ldr	r0, [pc, #12]	@ (8001020 <MX_TIM4_Init+0xac>)
 8001014:	f002 f8b0 	bl	8003178 <HAL_TIM_MspPostInit>

}
 8001018:	bf00      	nop
 800101a:	3728      	adds	r7, #40	@ 0x28
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000164 	.word	0x20000164
 8001024:	40000800 	.word	0x40000800

08001028 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b096      	sub	sp, #88	@ 0x58
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800102e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800103a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
 8001046:	60da      	str	r2, [r3, #12]
 8001048:	611a      	str	r2, [r3, #16]
 800104a:	615a      	str	r2, [r3, #20]
 800104c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	222c      	movs	r2, #44	@ 0x2c
 8001052:	2100      	movs	r1, #0
 8001054:	4618      	mov	r0, r3
 8001056:	f008 fef7 	bl	8009e48 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800105a:	4b39      	ldr	r3, [pc, #228]	@ (8001140 <MX_TIM8_Init+0x118>)
 800105c:	4a39      	ldr	r2, [pc, #228]	@ (8001144 <MX_TIM8_Init+0x11c>)
 800105e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8001060:	4b37      	ldr	r3, [pc, #220]	@ (8001140 <MX_TIM8_Init+0x118>)
 8001062:	224f      	movs	r2, #79	@ 0x4f
 8001064:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b36      	ldr	r3, [pc, #216]	@ (8001140 <MX_TIM8_Init+0x118>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 800106c:	4b34      	ldr	r3, [pc, #208]	@ (8001140 <MX_TIM8_Init+0x118>)
 800106e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001072:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001074:	4b32      	ldr	r3, [pc, #200]	@ (8001140 <MX_TIM8_Init+0x118>)
 8001076:	2200      	movs	r2, #0
 8001078:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800107a:	4b31      	ldr	r3, [pc, #196]	@ (8001140 <MX_TIM8_Init+0x118>)
 800107c:	2200      	movs	r2, #0
 800107e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001080:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <MX_TIM8_Init+0x118>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001086:	482e      	ldr	r0, [pc, #184]	@ (8001140 <MX_TIM8_Init+0x118>)
 8001088:	f004 fa10 	bl	80054ac <HAL_TIM_PWM_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001092:	f001 ffa1 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010a2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010a6:	4619      	mov	r1, r3
 80010a8:	4825      	ldr	r0, [pc, #148]	@ (8001140 <MX_TIM8_Init+0x118>)
 80010aa:	f005 f8d3 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80010b4:	f001 ff90 	bl	8002fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b8:	2360      	movs	r3, #96	@ 0x60
 80010ba:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010c0:	2300      	movs	r3, #0
 80010c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010c4:	2300      	movs	r3, #0
 80010c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010d0:	2300      	movs	r3, #0
 80010d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010d4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010d8:	2200      	movs	r2, #0
 80010da:	4619      	mov	r1, r3
 80010dc:	4818      	ldr	r0, [pc, #96]	@ (8001140 <MX_TIM8_Init+0x118>)
 80010de:	f004 fbdb 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80010e8:	f001 ff76 	bl	8002fd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001100:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001104:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800110e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001118:	2300      	movs	r3, #0
 800111a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800111c:	1d3b      	adds	r3, r7, #4
 800111e:	4619      	mov	r1, r3
 8001120:	4807      	ldr	r0, [pc, #28]	@ (8001140 <MX_TIM8_Init+0x118>)
 8001122:	f005 f91f 	bl	8006364 <HAL_TIMEx_ConfigBreakDeadTime>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 800112c:	f001 ff54 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001130:	4803      	ldr	r0, [pc, #12]	@ (8001140 <MX_TIM8_Init+0x118>)
 8001132:	f002 f821 	bl	8003178 <HAL_TIM_MspPostInit>

}
 8001136:	bf00      	nop
 8001138:	3758      	adds	r7, #88	@ 0x58
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	200001b0 	.word	0x200001b0
 8001144:	40013400 	.word	0x40013400

08001148 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b096      	sub	sp, #88	@ 0x58
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800114e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800115a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
 800116a:	615a      	str	r2, [r3, #20]
 800116c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	222c      	movs	r2, #44	@ 0x2c
 8001172:	2100      	movs	r1, #0
 8001174:	4618      	mov	r0, r3
 8001176:	f008 fe67 	bl	8009e48 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800117a:	4b33      	ldr	r3, [pc, #204]	@ (8001248 <MX_TIM15_Init+0x100>)
 800117c:	4a33      	ldr	r2, [pc, #204]	@ (800124c <MX_TIM15_Init+0x104>)
 800117e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 79;
 8001180:	4b31      	ldr	r3, [pc, #196]	@ (8001248 <MX_TIM15_Init+0x100>)
 8001182:	224f      	movs	r2, #79	@ 0x4f
 8001184:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001186:	4b30      	ldr	r3, [pc, #192]	@ (8001248 <MX_TIM15_Init+0x100>)
 8001188:	2200      	movs	r2, #0
 800118a:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 19999;
 800118c:	4b2e      	ldr	r3, [pc, #184]	@ (8001248 <MX_TIM15_Init+0x100>)
 800118e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001192:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001194:	4b2c      	ldr	r3, [pc, #176]	@ (8001248 <MX_TIM15_Init+0x100>)
 8001196:	2200      	movs	r2, #0
 8001198:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800119a:	4b2b      	ldr	r3, [pc, #172]	@ (8001248 <MX_TIM15_Init+0x100>)
 800119c:	2200      	movs	r2, #0
 800119e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011a0:	4b29      	ldr	r3, [pc, #164]	@ (8001248 <MX_TIM15_Init+0x100>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 80011a6:	4828      	ldr	r0, [pc, #160]	@ (8001248 <MX_TIM15_Init+0x100>)
 80011a8:	f004 f980 	bl	80054ac <HAL_TIM_PWM_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 80011b2:	f001 ff11 	bl	8002fd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80011be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80011c2:	4619      	mov	r1, r3
 80011c4:	4820      	ldr	r0, [pc, #128]	@ (8001248 <MX_TIM15_Init+0x100>)
 80011c6:	f005 f845 	bl	8006254 <HAL_TIMEx_MasterConfigSynchronization>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 80011d0:	f001 ff02 	bl	8002fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d4:	2360      	movs	r3, #96	@ 0x60
 80011d6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80011d8:	2300      	movs	r3, #0
 80011da:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011dc:	2300      	movs	r3, #0
 80011de:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011e0:	2300      	movs	r3, #0
 80011e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011e8:	2300      	movs	r3, #0
 80011ea:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011f4:	2200      	movs	r2, #0
 80011f6:	4619      	mov	r1, r3
 80011f8:	4813      	ldr	r0, [pc, #76]	@ (8001248 <MX_TIM15_Init+0x100>)
 80011fa:	f004 fb4d 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8001204:	f001 fee8 	bl	8002fd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800121c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001220:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	4619      	mov	r1, r3
 800122a:	4807      	ldr	r0, [pc, #28]	@ (8001248 <MX_TIM15_Init+0x100>)
 800122c:	f005 f89a 	bl	8006364 <HAL_TIMEx_ConfigBreakDeadTime>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM15_Init+0xf2>
  {
    Error_Handler();
 8001236:	f001 fecf 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800123a:	4803      	ldr	r0, [pc, #12]	@ (8001248 <MX_TIM15_Init+0x100>)
 800123c:	f001 ff9c 	bl	8003178 <HAL_TIM_MspPostInit>

}
 8001240:	bf00      	nop
 8001242:	3758      	adds	r7, #88	@ 0x58
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200001fc 	.word	0x200001fc
 800124c:	40014000 	.word	0x40014000

08001250 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b092      	sub	sp, #72	@ 0x48
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001256:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	615a      	str	r2, [r3, #20]
 8001268:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800126a:	463b      	mov	r3, r7
 800126c:	222c      	movs	r2, #44	@ 0x2c
 800126e:	2100      	movs	r1, #0
 8001270:	4618      	mov	r0, r3
 8001272:	f008 fde9 	bl	8009e48 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001276:	4b30      	ldr	r3, [pc, #192]	@ (8001338 <MX_TIM17_Init+0xe8>)
 8001278:	4a30      	ldr	r2, [pc, #192]	@ (800133c <MX_TIM17_Init+0xec>)
 800127a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 800127c:	4b2e      	ldr	r3, [pc, #184]	@ (8001338 <MX_TIM17_Init+0xe8>)
 800127e:	2200      	movs	r2, #0
 8001280:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001282:	4b2d      	ldr	r3, [pc, #180]	@ (8001338 <MX_TIM17_Init+0xe8>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001288:	4b2b      	ldr	r3, [pc, #172]	@ (8001338 <MX_TIM17_Init+0xe8>)
 800128a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800128e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001290:	4b29      	ldr	r3, [pc, #164]	@ (8001338 <MX_TIM17_Init+0xe8>)
 8001292:	2200      	movs	r2, #0
 8001294:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001296:	4b28      	ldr	r3, [pc, #160]	@ (8001338 <MX_TIM17_Init+0xe8>)
 8001298:	2200      	movs	r2, #0
 800129a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b26      	ldr	r3, [pc, #152]	@ (8001338 <MX_TIM17_Init+0xe8>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80012a2:	4825      	ldr	r0, [pc, #148]	@ (8001338 <MX_TIM17_Init+0xe8>)
 80012a4:	f004 f83a 	bl	800531c <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80012ae:	f001 fe93 	bl	8002fd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80012b2:	4821      	ldr	r0, [pc, #132]	@ (8001338 <MX_TIM17_Init+0xe8>)
 80012b4:	f004 f8fa 	bl	80054ac <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80012be:	f001 fe8b 	bl	8002fd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c2:	2360      	movs	r3, #96	@ 0x60
 80012c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ca:	2300      	movs	r3, #0
 80012cc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ce:	2300      	movs	r3, #0
 80012d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012de:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012e2:	2200      	movs	r2, #0
 80012e4:	4619      	mov	r1, r3
 80012e6:	4814      	ldr	r0, [pc, #80]	@ (8001338 <MX_TIM17_Init+0xe8>)
 80012e8:	f004 fad6 	bl	8005898 <HAL_TIM_PWM_ConfigChannel>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 80012f2:	f001 fe71 	bl	8002fd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012fe:	2300      	movs	r3, #0
 8001300:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800130a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800130e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001314:	463b      	mov	r3, r7
 8001316:	4619      	mov	r1, r3
 8001318:	4807      	ldr	r0, [pc, #28]	@ (8001338 <MX_TIM17_Init+0xe8>)
 800131a:	f005 f823 	bl	8006364 <HAL_TIMEx_ConfigBreakDeadTime>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_TIM17_Init+0xd8>
  {
    Error_Handler();
 8001324:	f001 fe58 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001328:	4803      	ldr	r0, [pc, #12]	@ (8001338 <MX_TIM17_Init+0xe8>)
 800132a:	f001 ff25 	bl	8003178 <HAL_TIM_MspPostInit>

}
 800132e:	bf00      	nop
 8001330:	3748      	adds	r7, #72	@ 0x48
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000248 	.word	0x20000248
 800133c:	40014800 	.word	0x40014800

08001340 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001344:	4b14      	ldr	r3, [pc, #80]	@ (8001398 <MX_USART2_UART_Init+0x58>)
 8001346:	4a15      	ldr	r2, [pc, #84]	@ (800139c <MX_USART2_UART_Init+0x5c>)
 8001348:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134a:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <MX_USART2_UART_Init+0x58>)
 800134c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001350:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <MX_USART2_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <MX_USART2_UART_Init+0x58>)
 800135a:	2200      	movs	r2, #0
 800135c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800135e:	4b0e      	ldr	r3, [pc, #56]	@ (8001398 <MX_USART2_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <MX_USART2_UART_Init+0x58>)
 8001366:	220c      	movs	r2, #12
 8001368:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136a:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <MX_USART2_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001370:	4b09      	ldr	r3, [pc, #36]	@ (8001398 <MX_USART2_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001376:	4b08      	ldr	r3, [pc, #32]	@ (8001398 <MX_USART2_UART_Init+0x58>)
 8001378:	2200      	movs	r2, #0
 800137a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800137c:	4b06      	ldr	r3, [pc, #24]	@ (8001398 <MX_USART2_UART_Init+0x58>)
 800137e:	2200      	movs	r2, #0
 8001380:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001382:	4805      	ldr	r0, [pc, #20]	@ (8001398 <MX_USART2_UART_Init+0x58>)
 8001384:	f005 f88a 	bl	800649c <HAL_UART_Init>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800138e:	f001 fe23 	bl	8002fd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	20000294 	.word	0x20000294
 800139c:	40004400 	.word	0x40004400

080013a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	@ 0x28
 80013a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
 80013b4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001474 <MX_GPIO_Init+0xd4>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ba:	4a2e      	ldr	r2, [pc, #184]	@ (8001474 <MX_GPIO_Init+0xd4>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001474 <MX_GPIO_Init+0xd4>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	613b      	str	r3, [r7, #16]
 80013cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ce:	4b29      	ldr	r3, [pc, #164]	@ (8001474 <MX_GPIO_Init+0xd4>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013d2:	4a28      	ldr	r2, [pc, #160]	@ (8001474 <MX_GPIO_Init+0xd4>)
 80013d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013da:	4b26      	ldr	r3, [pc, #152]	@ (8001474 <MX_GPIO_Init+0xd4>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b23      	ldr	r3, [pc, #140]	@ (8001474 <MX_GPIO_Init+0xd4>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	4a22      	ldr	r2, [pc, #136]	@ (8001474 <MX_GPIO_Init+0xd4>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f2:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <MX_GPIO_Init+0xd4>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001474 <MX_GPIO_Init+0xd4>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001402:	4a1c      	ldr	r2, [pc, #112]	@ (8001474 <MX_GPIO_Init+0xd4>)
 8001404:	f043 0302 	orr.w	r3, r3, #2
 8001408:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800140a:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <MX_GPIO_Init+0xd4>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140e:	f003 0302 	and.w	r3, r3, #2
 8001412:	607b      	str	r3, [r7, #4]
 8001414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001416:	2200      	movs	r2, #0
 8001418:	2120      	movs	r1, #32
 800141a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800141e:	f002 fbd5 	bl	8003bcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001422:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001428:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800142c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142e:	2300      	movs	r3, #0
 8001430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	480f      	ldr	r0, [pc, #60]	@ (8001478 <MX_GPIO_Init+0xd8>)
 800143a:	f002 fa1d 	bl	8003878 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800143e:	2320      	movs	r3, #32
 8001440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001458:	f002 fa0e 	bl	8003878 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800145c:	2200      	movs	r2, #0
 800145e:	2105      	movs	r1, #5
 8001460:	2028      	movs	r0, #40	@ 0x28
 8001462:	f002 f9df 	bl	8003824 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001466:	2028      	movs	r0, #40	@ 0x28
 8001468:	f002 f9f8 	bl	800385c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800146c:	bf00      	nop
 800146e:	3728      	adds	r7, #40	@ 0x28
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000
 8001478:	48000800 	.word	0x48000800

0800147c <Servo_SetMotion>:
 * @param finger: Which finger (THUMB, INDEX, MIDDLE, RING, PINKY)
 * @param direction: STOP, CLOCKWISE, or COUNTERCLOCKWISE
 * @param speed: Speed percentage (0-100)
 * @retval None
 */
void Servo_SetMotion(Finger finger, Direction direction, int speed) {
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	603a      	str	r2, [r7, #0]
 8001486:	71fb      	strb	r3, [r7, #7]
 8001488:	460b      	mov	r3, r1
 800148a:	71bb      	strb	r3, [r7, #6]
    uint32_t pulse;

    // Clamp speed to 0-100%
    if (speed < 0) speed = 0;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	da01      	bge.n	8001496 <Servo_SetMotion+0x1a>
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
    if (speed > 100) speed = 100;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2b64      	cmp	r3, #100	@ 0x64
 800149a:	dd01      	ble.n	80014a0 <Servo_SetMotion+0x24>
 800149c:	2364      	movs	r3, #100	@ 0x64
 800149e:	603b      	str	r3, [r7, #0]

    // Calculate pulse width based on direction and speed
    if (direction == STOP) {
 80014a0:	79bb      	ldrb	r3, [r7, #6]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d103      	bne.n	80014ae <Servo_SetMotion+0x32>
        pulse = SERVO_STOP;
 80014a6:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e013      	b.n	80014d6 <Servo_SetMotion+0x5a>
    } else if (direction == CLOCKWISE) {
 80014ae:	79bb      	ldrb	r3, [r7, #6]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d109      	bne.n	80014c8 <Servo_SetMotion+0x4c>
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CW
        pulse = SERVO_STOP - ((SERVO_STOP - SERVO_MAX_CW) * speed / 100);
 80014b4:	683a      	ldr	r2, [r7, #0]
 80014b6:	4613      	mov	r3, r2
 80014b8:	079b      	lsls	r3, r3, #30
 80014ba:	1a9b      	subs	r3, r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	1a9b      	subs	r3, r3, r2
 80014c0:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	e006      	b.n	80014d6 <Servo_SetMotion+0x5a>
    } else { // COUNTERCLOCKWISE
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CCW
        pulse = SERVO_STOP + ((SERVO_MAX_CCW - SERVO_STOP) * speed / 100);
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4613      	mov	r3, r2
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 80014d4:	60fb      	str	r3, [r7, #12]
    }

    // Update servo state
    servoStates[finger].speed = speed;
 80014d6:	79fa      	ldrb	r2, [r7, #7]
 80014d8:	492c      	ldr	r1, [pc, #176]	@ (800158c <Servo_SetMotion+0x110>)
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	601a      	str	r2, [r3, #0]
    servoStates[finger].dir = direction;
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	4928      	ldr	r1, [pc, #160]	@ (800158c <Servo_SetMotion+0x110>)
 80014ec:	4613      	mov	r3, r2
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4413      	add	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	440b      	add	r3, r1
 80014f6:	3304      	adds	r3, #4
 80014f8:	79ba      	ldrb	r2, [r7, #6]
 80014fa:	701a      	strb	r2, [r3, #0]
    servoStates[finger].pulse = pulse;
 80014fc:	79fa      	ldrb	r2, [r7, #7]
 80014fe:	4923      	ldr	r1, [pc, #140]	@ (800158c <Servo_SetMotion+0x110>)
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3308      	adds	r3, #8
 800150c:	68fa      	ldr	r2, [r7, #12]
 800150e:	601a      	str	r2, [r3, #0]

    // Apply pulse width to the appropriate timer
    switch (finger) {
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b06      	cmp	r3, #6
 8001514:	d833      	bhi.n	800157e <Servo_SetMotion+0x102>
 8001516:	a201      	add	r2, pc, #4	@ (adr r2, 800151c <Servo_SetMotion+0xa0>)
 8001518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800151c:	08001539 	.word	0x08001539
 8001520:	08001543 	.word	0x08001543
 8001524:	0800154d 	.word	0x0800154d
 8001528:	08001557 	.word	0x08001557
 800152c:	08001561 	.word	0x08001561
 8001530:	0800156b 	.word	0x0800156b
 8001534:	08001575 	.word	0x08001575
        case THUMB:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8001538:	4b15      	ldr	r3, [pc, #84]	@ (8001590 <Servo_SetMotion+0x114>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8001540:	e01d      	b.n	800157e <Servo_SetMotion+0x102>
        case INDEX:
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <Servo_SetMotion+0x118>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 800154a:	e018      	b.n	800157e <Servo_SetMotion+0x102>
        case MIDDLE:
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 800154c:	4b12      	ldr	r3, [pc, #72]	@ (8001598 <Servo_SetMotion+0x11c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8001554:	e013      	b.n	800157e <Servo_SetMotion+0x102>
        case RING:
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8001556:	4b11      	ldr	r3, [pc, #68]	@ (800159c <Servo_SetMotion+0x120>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68fa      	ldr	r2, [r7, #12]
 800155c:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 800155e:	e00e      	b.n	800157e <Servo_SetMotion+0x102>
        case PINKY:
            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pulse);
 8001560:	4b0f      	ldr	r3, [pc, #60]	@ (80015a0 <Servo_SetMotion+0x124>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8001568:	e009      	b.n	800157e <Servo_SetMotion+0x102>
        case WRIST_BEND:
        	__HAL_TIM_SET_COMPARE(&htim15, TIM_CHANNEL_1, pulse);
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <Servo_SetMotion+0x128>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68fa      	ldr	r2, [r7, #12]
 8001570:	635a      	str	r2, [r3, #52]	@ 0x34
        	break;
 8001572:	e004      	b.n	800157e <Servo_SetMotion+0x102>
        case WRIST_ROTATE:
        	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, pulse);
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <Servo_SetMotion+0x12c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	635a      	str	r2, [r3, #52]	@ 0x34
        	break;
 800157c:	bf00      	nop
    	}
	}
 800157e:	bf00      	nop
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	20000000 	.word	0x20000000
 8001590:	20000080 	.word	0x20000080
 8001594:	200000cc 	.word	0x200000cc
 8001598:	20000118 	.word	0x20000118
 800159c:	20000164 	.word	0x20000164
 80015a0:	200001b0 	.word	0x200001b0
 80015a4:	200001fc 	.word	0x200001fc
 80015a8:	20000248 	.word	0x20000248

080015ac <Servo_StopAll>:
	/**
	 * @brief Stops all servos
	 * @param None
	 * @retval None
	 */
	void Servo_StopAll(void) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
		Servo_SetMotion(THUMB, STOP, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2000      	movs	r0, #0
 80015b6:	f7ff ff61 	bl	800147c <Servo_SetMotion>
		Servo_SetMotion(INDEX, STOP, 0);
 80015ba:	2200      	movs	r2, #0
 80015bc:	2100      	movs	r1, #0
 80015be:	2001      	movs	r0, #1
 80015c0:	f7ff ff5c 	bl	800147c <Servo_SetMotion>
		Servo_SetMotion(MIDDLE, STOP, 0);
 80015c4:	2200      	movs	r2, #0
 80015c6:	2100      	movs	r1, #0
 80015c8:	2002      	movs	r0, #2
 80015ca:	f7ff ff57 	bl	800147c <Servo_SetMotion>
		Servo_SetMotion(RING, STOP, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2100      	movs	r1, #0
 80015d2:	2003      	movs	r0, #3
 80015d4:	f7ff ff52 	bl	800147c <Servo_SetMotion>
		Servo_SetMotion(PINKY, STOP, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2004      	movs	r0, #4
 80015de:	f7ff ff4d 	bl	800147c <Servo_SetMotion>
		Servo_SetMotion(WRIST_BEND, STOP, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2005      	movs	r0, #5
 80015e8:	f7ff ff48 	bl	800147c <Servo_SetMotion>
		Servo_SetMotion(WRIST_ROTATE, STOP, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2006      	movs	r0, #6
 80015f2:	f7ff ff43 	bl	800147c <Servo_SetMotion>

	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80015f6:	2100      	movs	r1, #0
 80015f8:	480e      	ldr	r0, [pc, #56]	@ (8001634 <Servo_StopAll+0x88>)
 80015fa:	f003 ffaf 	bl	800555c <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80015fe:	2100      	movs	r1, #0
 8001600:	480d      	ldr	r0, [pc, #52]	@ (8001638 <Servo_StopAll+0x8c>)
 8001602:	f003 ffab 	bl	800555c <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001606:	2100      	movs	r1, #0
 8001608:	480c      	ldr	r0, [pc, #48]	@ (800163c <Servo_StopAll+0x90>)
 800160a:	f003 ffa7 	bl	800555c <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 800160e:	2100      	movs	r1, #0
 8001610:	480b      	ldr	r0, [pc, #44]	@ (8001640 <Servo_StopAll+0x94>)
 8001612:	f003 ffa3 	bl	800555c <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8001616:	2100      	movs	r1, #0
 8001618:	480a      	ldr	r0, [pc, #40]	@ (8001644 <Servo_StopAll+0x98>)
 800161a:	f003 ff9f 	bl	800555c <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 800161e:	2100      	movs	r1, #0
 8001620:	4809      	ldr	r0, [pc, #36]	@ (8001648 <Servo_StopAll+0x9c>)
 8001622:	f003 ff9b 	bl	800555c <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8001626:	2100      	movs	r1, #0
 8001628:	4808      	ldr	r0, [pc, #32]	@ (800164c <Servo_StopAll+0xa0>)
 800162a:	f003 ff97 	bl	800555c <HAL_TIM_PWM_Stop>
	}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000080 	.word	0x20000080
 8001638:	200000cc 	.word	0x200000cc
 800163c:	20000118 	.word	0x20000118
 8001640:	20000164 	.word	0x20000164
 8001644:	200001b0 	.word	0x200001b0
 8001648:	200001fc 	.word	0x200001fc
 800164c:	20000248 	.word	0x20000248

08001650 <Direction_Decider>:

//	    // Initialize all servos to stop position
//	    Servo_StopAll();
	}

	int Direction_Decider(int* Desired_Position){
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
		if(*Desired_Position < 0){
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	da06      	bge.n	800166e <Direction_Decider+0x1e>
			*Desired_Position = *Desired_Position * -1;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	425a      	negs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	601a      	str	r2, [r3, #0]
			return CLOCKWISE;
 800166a:	2301      	movs	r3, #1
 800166c:	e006      	b.n	800167c <Direction_Decider+0x2c>
		}
		else if(*Desired_Position > 0){
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	dd01      	ble.n	800167a <Direction_Decider+0x2a>
			return COUNTERCLOCKWISE;
 8001676:	2302      	movs	r3, #2
 8001678:	e000      	b.n	800167c <Direction_Decider+0x2c>
		}
		else{
			return STOP;
 800167a:	2300      	movs	r3, #0
		}
	}
 800167c:	4618      	mov	r0, r3
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <SignLetter>:
	 * @brief Example function to demonstrate a sign language letter
	 * @param letter: ASCII character (A-Z)
	 * @param duration: How long to hold the position (in ms)
	 * @retval None
	 */
	void SignLetter(char letter) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	4603      	mov	r3, r0
 8001690:	71fb      	strb	r3, [r7, #7]
//	    Servo_Init



	    // Set finger positions based on the letter
	    switch(letter) {
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	3b30      	subs	r3, #48	@ 0x30
 8001696:	2b2a      	cmp	r3, #42	@ 0x2a
 8001698:	f201 805c 	bhi.w	8002754 <SignLetter+0x10cc>
 800169c:	a201      	add	r2, pc, #4	@ (adr r2, 80016a4 <SignLetter+0x1c>)
 800169e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a2:	bf00      	nop
 80016a4:	080026fb 	.word	0x080026fb
 80016a8:	08002755 	.word	0x08002755
 80016ac:	08002755 	.word	0x08002755
 80016b0:	08002755 	.word	0x08002755
 80016b4:	08002755 	.word	0x08002755
 80016b8:	08002755 	.word	0x08002755
 80016bc:	08002755 	.word	0x08002755
 80016c0:	08002755 	.word	0x08002755
 80016c4:	08002755 	.word	0x08002755
 80016c8:	08002755 	.word	0x08002755
 80016cc:	08002755 	.word	0x08002755
 80016d0:	08002755 	.word	0x08002755
 80016d4:	08002755 	.word	0x08002755
 80016d8:	08002755 	.word	0x08002755
 80016dc:	08002755 	.word	0x08002755
 80016e0:	08002755 	.word	0x08002755
 80016e4:	08002755 	.word	0x08002755
 80016e8:	08001751 	.word	0x08001751
 80016ec:	080017d1 	.word	0x080017d1
 80016f0:	0800182f 	.word	0x0800182f
 80016f4:	08001965 	.word	0x08001965
 80016f8:	08001a2d 	.word	0x08001a2d
 80016fc:	08001afb 	.word	0x08001afb
 8001700:	08001b8f 	.word	0x08001b8f
 8001704:	08001c61 	.word	0x08001c61
 8001708:	08001cdd 	.word	0x08001cdd
 800170c:	08001d41 	.word	0x08001d41
 8001710:	08001da5 	.word	0x08001da5
 8001714:	08001e21 	.word	0x08001e21
 8001718:	08001e83 	.word	0x08001e83
 800171c:	08001f85 	.word	0x08001f85
 8001720:	0800201d 	.word	0x0800201d
 8001724:	08002103 	.word	0x08002103
 8001728:	080021b5 	.word	0x080021b5
 800172c:	080022b1 	.word	0x080022b1
 8001730:	08002315 	.word	0x08002315
 8001734:	08002393 	.word	0x08002393
 8001738:	080023f7 	.word	0x080023f7
 800173c:	08002457 	.word	0x08002457
 8001740:	080024b7 	.word	0x080024b7
 8001744:	08002551 	.word	0x08002551
 8001748:	08002637 	.word	0x08002637
 800174c:	08002697 	.word	0x08002697
		 case 'A':
			thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001750:	4b75      	ldr	r3, [pc, #468]	@ (8001928 <SignLetter+0x2a0>)
 8001752:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001756:	4618      	mov	r0, r3
 8001758:	f7fe ffb6 	bl	80006c8 <__aeabi_i2d>
 800175c:	a36e      	add	r3, pc, #440	@ (adr r3, 8001918 <SignLetter+0x290>)
 800175e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001762:	f7fe fe63 	bl	800042c <__aeabi_dsub>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f815 	bl	800079c <__aeabi_d2iz>
 8001772:	4603      	mov	r3, r0
 8001774:	4a6d      	ldr	r2, [pc, #436]	@ (800192c <SignLetter+0x2a4>)
 8001776:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001778:	4b6d      	ldr	r3, [pc, #436]	@ (8001930 <SignLetter+0x2a8>)
 800177a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001782:	4a6c      	ldr	r2, [pc, #432]	@ (8001934 <SignLetter+0x2ac>)
 8001784:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001786:	4b6c      	ldr	r3, [pc, #432]	@ (8001938 <SignLetter+0x2b0>)
 8001788:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001790:	4a6a      	ldr	r2, [pc, #424]	@ (800193c <SignLetter+0x2b4>)
 8001792:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001794:	4b6a      	ldr	r3, [pc, #424]	@ (8001940 <SignLetter+0x2b8>)
 8001796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800179e:	4a69      	ldr	r2, [pc, #420]	@ (8001944 <SignLetter+0x2bc>)
 80017a0:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80017a2:	4b69      	ldr	r3, [pc, #420]	@ (8001948 <SignLetter+0x2c0>)
 80017a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a8:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 80017ac:	4a67      	ldr	r2, [pc, #412]	@ (800194c <SignLetter+0x2c4>)
 80017ae:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 80017b0:	4b67      	ldr	r3, [pc, #412]	@ (8001950 <SignLetter+0x2c8>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80017ba:	4a66      	ldr	r2, [pc, #408]	@ (8001954 <SignLetter+0x2cc>)
 80017bc:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 80017be:	4b66      	ldr	r3, [pc, #408]	@ (8001958 <SignLetter+0x2d0>)
 80017c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c4:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80017c8:	4a64      	ldr	r2, [pc, #400]	@ (800195c <SignLetter+0x2d4>)
 80017ca:	6013      	str	r3, [r2, #0]
			break;
 80017cc:	f000 bfc5 	b.w	800275a <SignLetter+0x10d2>

		 case 'B':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80017d0:	4b55      	ldr	r3, [pc, #340]	@ (8001928 <SignLetter+0x2a0>)
 80017d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d6:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80017da:	4a54      	ldr	r2, [pc, #336]	@ (800192c <SignLetter+0x2a4>)
 80017dc:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 80017de:	4b54      	ldr	r3, [pc, #336]	@ (8001930 <SignLetter+0x2a8>)
 80017e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017e4:	461a      	mov	r2, r3
 80017e6:	4b53      	ldr	r3, [pc, #332]	@ (8001934 <SignLetter+0x2ac>)
 80017e8:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 80017ea:	4b53      	ldr	r3, [pc, #332]	@ (8001938 <SignLetter+0x2b0>)
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b52      	ldr	r3, [pc, #328]	@ (800193c <SignLetter+0x2b4>)
 80017f4:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 0 * RING_CLOSED;
 80017f6:	4b52      	ldr	r3, [pc, #328]	@ (8001940 <SignLetter+0x2b8>)
 80017f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b51      	ldr	r3, [pc, #324]	@ (8001944 <SignLetter+0x2bc>)
 8001800:	601a      	str	r2, [r3, #0]
			pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8001802:	4b51      	ldr	r3, [pc, #324]	@ (8001948 <SignLetter+0x2c0>)
 8001804:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001808:	461a      	mov	r2, r3
 800180a:	4b50      	ldr	r3, [pc, #320]	@ (800194c <SignLetter+0x2c4>)
 800180c:	601a      	str	r2, [r3, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 800180e:	4b50      	ldr	r3, [pc, #320]	@ (8001950 <SignLetter+0x2c8>)
 8001810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001814:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001818:	4a4e      	ldr	r2, [pc, #312]	@ (8001954 <SignLetter+0x2cc>)
 800181a:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 800181c:	4b4e      	ldr	r3, [pc, #312]	@ (8001958 <SignLetter+0x2d0>)
 800181e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001822:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001826:	4a4d      	ldr	r2, [pc, #308]	@ (800195c <SignLetter+0x2d4>)
 8001828:	6013      	str	r3, [r2, #0]
			break;
 800182a:	f000 bf96 	b.w	800275a <SignLetter+0x10d2>

		case 'C':
			thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 800182e:	4b3e      	ldr	r3, [pc, #248]	@ (8001928 <SignLetter+0x2a0>)
 8001830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001834:	4618      	mov	r0, r3
 8001836:	f7fe ff47 	bl	80006c8 <__aeabi_i2d>
 800183a:	a337      	add	r3, pc, #220	@ (adr r3, 8001918 <SignLetter+0x290>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7fe fdf4 	bl	800042c <__aeabi_dsub>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4610      	mov	r0, r2
 800184a:	4619      	mov	r1, r3
 800184c:	f7fe ffa6 	bl	800079c <__aeabi_d2iz>
 8001850:	4603      	mov	r3, r0
 8001852:	4a36      	ldr	r2, [pc, #216]	@ (800192c <SignLetter+0x2a4>)
 8001854:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.5 * INDEX_CLOSED;
 8001856:	4b36      	ldr	r3, [pc, #216]	@ (8001930 <SignLetter+0x2a8>)
 8001858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800185c:	4618      	mov	r0, r3
 800185e:	f7fe ff33 	bl	80006c8 <__aeabi_i2d>
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	4b3e      	ldr	r3, [pc, #248]	@ (8001960 <SignLetter+0x2d8>)
 8001868:	f7fe fde0 	bl	800042c <__aeabi_dsub>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	f7fe ff92 	bl	800079c <__aeabi_d2iz>
 8001878:	4603      	mov	r3, r0
 800187a:	4a2e      	ldr	r2, [pc, #184]	@ (8001934 <SignLetter+0x2ac>)
 800187c:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.5 * MIDDLE_CLOSED;
 800187e:	4b2e      	ldr	r3, [pc, #184]	@ (8001938 <SignLetter+0x2b0>)
 8001880:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001884:	4618      	mov	r0, r3
 8001886:	f7fe ff1f 	bl	80006c8 <__aeabi_i2d>
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	4b34      	ldr	r3, [pc, #208]	@ (8001960 <SignLetter+0x2d8>)
 8001890:	f7fe fdcc 	bl	800042c <__aeabi_dsub>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7fe ff7e 	bl	800079c <__aeabi_d2iz>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a26      	ldr	r2, [pc, #152]	@ (800193c <SignLetter+0x2b4>)
 80018a4:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 0.5 * RING_CLOSED;
 80018a6:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <SignLetter+0x2b8>)
 80018a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7fe ff0b 	bl	80006c8 <__aeabi_i2d>
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	4b2a      	ldr	r3, [pc, #168]	@ (8001960 <SignLetter+0x2d8>)
 80018b8:	f7fe fdb8 	bl	800042c <__aeabi_dsub>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4610      	mov	r0, r2
 80018c2:	4619      	mov	r1, r3
 80018c4:	f7fe ff6a 	bl	800079c <__aeabi_d2iz>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4a1e      	ldr	r2, [pc, #120]	@ (8001944 <SignLetter+0x2bc>)
 80018cc:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0.5 * PINKY_CLOSED;
 80018ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001948 <SignLetter+0x2c0>)
 80018d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fef7 	bl	80006c8 <__aeabi_i2d>
 80018da:	a311      	add	r3, pc, #68	@ (adr r3, 8001920 <SignLetter+0x298>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fda4 	bl	800042c <__aeabi_dsub>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7fe ff56 	bl	800079c <__aeabi_d2iz>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a16      	ldr	r2, [pc, #88]	@ (800194c <SignLetter+0x2c4>)
 80018f4:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 80018f6:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <SignLetter+0x2c8>)
 80018f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018fc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001900:	4a14      	ldr	r2, [pc, #80]	@ (8001954 <SignLetter+0x2cc>)
 8001902:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8001904:	4b14      	ldr	r3, [pc, #80]	@ (8001958 <SignLetter+0x2d0>)
 8001906:	f9b3 3000 	ldrsh.w	r3, [r3]
 800190a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800190e:	4a13      	ldr	r2, [pc, #76]	@ (800195c <SignLetter+0x2d4>)
 8001910:	6013      	str	r3, [r2, #0]
			break;
 8001912:	f000 bf22 	b.w	800275a <SignLetter+0x10d2>
 8001916:	bf00      	nop
 8001918:	00000000 	.word	0x00000000
 800191c:	4062c000 	.word	0x4062c000
 8001920:	00000000 	.word	0x00000000
 8001924:	407c2000 	.word	0x407c2000
 8001928:	20000358 	.word	0x20000358
 800192c:	20000384 	.word	0x20000384
 8001930:	2000035a 	.word	0x2000035a
 8001934:	20000388 	.word	0x20000388
 8001938:	2000035c 	.word	0x2000035c
 800193c:	2000038c 	.word	0x2000038c
 8001940:	2000035e 	.word	0x2000035e
 8001944:	20000390 	.word	0x20000390
 8001948:	20000360 	.word	0x20000360
 800194c:	20000394 	.word	0x20000394
 8001950:	20000362 	.word	0x20000362
 8001954:	20000398 	.word	0x20000398
 8001958:	20000364 	.word	0x20000364
 800195c:	2000039c 	.word	0x2000039c
 8001960:	407f4000 	.word	0x407f4000

		case 'D':
			thumb_desired_position = thumb_current - 0.5 * THUMB_CLOSED;
 8001964:	4bae      	ldr	r3, [pc, #696]	@ (8001c20 <SignLetter+0x598>)
 8001966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe feac 	bl	80006c8 <__aeabi_i2d>
 8001970:	a3a7      	add	r3, pc, #668	@ (adr r3, 8001c10 <SignLetter+0x588>)
 8001972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001976:	f7fe fd59 	bl	800042c <__aeabi_dsub>
 800197a:	4602      	mov	r2, r0
 800197c:	460b      	mov	r3, r1
 800197e:	4610      	mov	r0, r2
 8001980:	4619      	mov	r1, r3
 8001982:	f7fe ff0b 	bl	800079c <__aeabi_d2iz>
 8001986:	4603      	mov	r3, r0
 8001988:	4aa6      	ldr	r2, [pc, #664]	@ (8001c24 <SignLetter+0x59c>)
 800198a:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 800198c:	4ba6      	ldr	r3, [pc, #664]	@ (8001c28 <SignLetter+0x5a0>)
 800198e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001992:	461a      	mov	r2, r3
 8001994:	4ba5      	ldr	r3, [pc, #660]	@ (8001c2c <SignLetter+0x5a4>)
 8001996:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0.75 * MIDDLE_CLOSED;
 8001998:	4ba5      	ldr	r3, [pc, #660]	@ (8001c30 <SignLetter+0x5a8>)
 800199a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7fe fe92 	bl	80006c8 <__aeabi_i2d>
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	4ba2      	ldr	r3, [pc, #648]	@ (8001c34 <SignLetter+0x5ac>)
 80019aa:	f7fe fd3f 	bl	800042c <__aeabi_dsub>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4610      	mov	r0, r2
 80019b4:	4619      	mov	r1, r3
 80019b6:	f7fe fef1 	bl	800079c <__aeabi_d2iz>
 80019ba:	4603      	mov	r3, r0
 80019bc:	4a9e      	ldr	r2, [pc, #632]	@ (8001c38 <SignLetter+0x5b0>)
 80019be:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 0.75 * RING_CLOSED;
 80019c0:	4b9e      	ldr	r3, [pc, #632]	@ (8001c3c <SignLetter+0x5b4>)
 80019c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fe7e 	bl	80006c8 <__aeabi_i2d>
 80019cc:	f04f 0200 	mov.w	r2, #0
 80019d0:	4b98      	ldr	r3, [pc, #608]	@ (8001c34 <SignLetter+0x5ac>)
 80019d2:	f7fe fd2b 	bl	800042c <__aeabi_dsub>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4610      	mov	r0, r2
 80019dc:	4619      	mov	r1, r3
 80019de:	f7fe fedd 	bl	800079c <__aeabi_d2iz>
 80019e2:	4603      	mov	r3, r0
 80019e4:	4a96      	ldr	r2, [pc, #600]	@ (8001c40 <SignLetter+0x5b8>)
 80019e6:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0.75 * PINKY_CLOSED;
 80019e8:	4b96      	ldr	r3, [pc, #600]	@ (8001c44 <SignLetter+0x5bc>)
 80019ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fe6a 	bl	80006c8 <__aeabi_i2d>
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	4b93      	ldr	r3, [pc, #588]	@ (8001c48 <SignLetter+0x5c0>)
 80019fa:	f7fe fd17 	bl	800042c <__aeabi_dsub>
 80019fe:	4602      	mov	r2, r0
 8001a00:	460b      	mov	r3, r1
 8001a02:	4610      	mov	r0, r2
 8001a04:	4619      	mov	r1, r3
 8001a06:	f7fe fec9 	bl	800079c <__aeabi_d2iz>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4a8f      	ldr	r2, [pc, #572]	@ (8001c4c <SignLetter+0x5c4>)
 8001a0e:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8001a10:	4b8f      	ldr	r3, [pc, #572]	@ (8001c50 <SignLetter+0x5c8>)
 8001a12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a16:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001a1a:	4a8e      	ldr	r2, [pc, #568]	@ (8001c54 <SignLetter+0x5cc>)
 8001a1c:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8001a1e:	4b8e      	ldr	r3, [pc, #568]	@ (8001c58 <SignLetter+0x5d0>)
 8001a20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a24:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001a28:	4a8c      	ldr	r2, [pc, #560]	@ (8001c5c <SignLetter+0x5d4>)
 8001a2a:	6013      	str	r3, [r2, #0]

		case 'E':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001a2c:	4b7c      	ldr	r3, [pc, #496]	@ (8001c20 <SignLetter+0x598>)
 8001a2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a32:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001a36:	4a7b      	ldr	r2, [pc, #492]	@ (8001c24 <SignLetter+0x59c>)
 8001a38:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.75 * INDEX_CLOSED;
 8001a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8001c28 <SignLetter+0x5a0>)
 8001a3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fe41 	bl	80006c8 <__aeabi_i2d>
 8001a46:	f04f 0200 	mov.w	r2, #0
 8001a4a:	4b7a      	ldr	r3, [pc, #488]	@ (8001c34 <SignLetter+0x5ac>)
 8001a4c:	f7fe fcee 	bl	800042c <__aeabi_dsub>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4619      	mov	r1, r3
 8001a58:	f7fe fea0 	bl	800079c <__aeabi_d2iz>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	4a73      	ldr	r2, [pc, #460]	@ (8001c2c <SignLetter+0x5a4>)
 8001a60:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.75 * MIDDLE_CLOSED;
 8001a62:	4b73      	ldr	r3, [pc, #460]	@ (8001c30 <SignLetter+0x5a8>)
 8001a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fe2d 	bl	80006c8 <__aeabi_i2d>
 8001a6e:	f04f 0200 	mov.w	r2, #0
 8001a72:	4b70      	ldr	r3, [pc, #448]	@ (8001c34 <SignLetter+0x5ac>)
 8001a74:	f7fe fcda 	bl	800042c <__aeabi_dsub>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7fe fe8c 	bl	800079c <__aeabi_d2iz>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a6c      	ldr	r2, [pc, #432]	@ (8001c38 <SignLetter+0x5b0>)
 8001a88:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 0.75 * RING_CLOSED;
 8001a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001c3c <SignLetter+0x5b4>)
 8001a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fe19 	bl	80006c8 <__aeabi_i2d>
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	4b66      	ldr	r3, [pc, #408]	@ (8001c34 <SignLetter+0x5ac>)
 8001a9c:	f7fe fcc6 	bl	800042c <__aeabi_dsub>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	f7fe fe78 	bl	800079c <__aeabi_d2iz>
 8001aac:	4603      	mov	r3, r0
 8001aae:	4a64      	ldr	r2, [pc, #400]	@ (8001c40 <SignLetter+0x5b8>)
 8001ab0:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0.75 * PINKY_CLOSED;
 8001ab2:	4b64      	ldr	r3, [pc, #400]	@ (8001c44 <SignLetter+0x5bc>)
 8001ab4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7fe fe05 	bl	80006c8 <__aeabi_i2d>
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	4b61      	ldr	r3, [pc, #388]	@ (8001c48 <SignLetter+0x5c0>)
 8001ac4:	f7fe fcb2 	bl	800042c <__aeabi_dsub>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4610      	mov	r0, r2
 8001ace:	4619      	mov	r1, r3
 8001ad0:	f7fe fe64 	bl	800079c <__aeabi_d2iz>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	4a5d      	ldr	r2, [pc, #372]	@ (8001c4c <SignLetter+0x5c4>)
 8001ad8:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8001ada:	4b5d      	ldr	r3, [pc, #372]	@ (8001c50 <SignLetter+0x5c8>)
 8001adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001ae4:	4a5b      	ldr	r2, [pc, #364]	@ (8001c54 <SignLetter+0x5cc>)
 8001ae6:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8001ae8:	4b5b      	ldr	r3, [pc, #364]	@ (8001c58 <SignLetter+0x5d0>)
 8001aea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aee:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001af2:	4a5a      	ldr	r2, [pc, #360]	@ (8001c5c <SignLetter+0x5d4>)
 8001af4:	6013      	str	r3, [r2, #0]
			break;
 8001af6:	f000 be30 	b.w	800275a <SignLetter+0x10d2>

		case 'F':
			thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001afa:	4b49      	ldr	r3, [pc, #292]	@ (8001c20 <SignLetter+0x598>)
 8001afc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fde1 	bl	80006c8 <__aeabi_i2d>
 8001b06:	a344      	add	r3, pc, #272	@ (adr r3, 8001c18 <SignLetter+0x590>)
 8001b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b0c:	f7fe fc8e 	bl	800042c <__aeabi_dsub>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	f7fe fe40 	bl	800079c <__aeabi_d2iz>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	4a41      	ldr	r2, [pc, #260]	@ (8001c24 <SignLetter+0x59c>)
 8001b20:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.75 * INDEX_CLOSED;
 8001b22:	4b41      	ldr	r3, [pc, #260]	@ (8001c28 <SignLetter+0x5a0>)
 8001b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fdcd 	bl	80006c8 <__aeabi_i2d>
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b40      	ldr	r3, [pc, #256]	@ (8001c34 <SignLetter+0x5ac>)
 8001b34:	f7fe fc7a 	bl	800042c <__aeabi_dsub>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7fe fe2c 	bl	800079c <__aeabi_d2iz>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a39      	ldr	r2, [pc, #228]	@ (8001c2c <SignLetter+0x5a4>)
 8001b48:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001b4a:	4b39      	ldr	r3, [pc, #228]	@ (8001c30 <SignLetter+0x5a8>)
 8001b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b39      	ldr	r3, [pc, #228]	@ (8001c38 <SignLetter+0x5b0>)
 8001b54:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 0 * RING_CLOSED;
 8001b56:	4b39      	ldr	r3, [pc, #228]	@ (8001c3c <SignLetter+0x5b4>)
 8001b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b38      	ldr	r3, [pc, #224]	@ (8001c40 <SignLetter+0x5b8>)
 8001b60:	601a      	str	r2, [r3, #0]
			pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8001b62:	4b38      	ldr	r3, [pc, #224]	@ (8001c44 <SignLetter+0x5bc>)
 8001b64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4b38      	ldr	r3, [pc, #224]	@ (8001c4c <SignLetter+0x5c4>)
 8001b6c:	601a      	str	r2, [r3, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8001b6e:	4b38      	ldr	r3, [pc, #224]	@ (8001c50 <SignLetter+0x5c8>)
 8001b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b74:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001b78:	4a36      	ldr	r2, [pc, #216]	@ (8001c54 <SignLetter+0x5cc>)
 8001b7a:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8001b7c:	4b36      	ldr	r3, [pc, #216]	@ (8001c58 <SignLetter+0x5d0>)
 8001b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b82:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001b86:	4a35      	ldr	r2, [pc, #212]	@ (8001c5c <SignLetter+0x5d4>)
 8001b88:	6013      	str	r3, [r2, #0]
			break;
 8001b8a:	f000 bde6 	b.w	800275a <SignLetter+0x10d2>

		case 'G':
			thumb_desired_position = thumb_current - 0.5 * THUMB_CLOSED;
 8001b8e:	4b24      	ldr	r3, [pc, #144]	@ (8001c20 <SignLetter+0x598>)
 8001b90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fd97 	bl	80006c8 <__aeabi_i2d>
 8001b9a:	a31d      	add	r3, pc, #116	@ (adr r3, 8001c10 <SignLetter+0x588>)
 8001b9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba0:	f7fe fc44 	bl	800042c <__aeabi_dsub>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7fe fdf6 	bl	800079c <__aeabi_d2iz>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8001c24 <SignLetter+0x59c>)
 8001bb4:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c28 <SignLetter+0x5a0>)
 8001bb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8001c2c <SignLetter+0x5a4>)
 8001bc0:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c30 <SignLetter+0x5a8>)
 8001bc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8001c38 <SignLetter+0x5b0>)
 8001bce:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c3c <SignLetter+0x5b4>)
 8001bd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bd6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001bda:	4a19      	ldr	r2, [pc, #100]	@ (8001c40 <SignLetter+0x5b8>)
 8001bdc:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001bde:	4b19      	ldr	r3, [pc, #100]	@ (8001c44 <SignLetter+0x5bc>)
 8001be0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be4:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001be8:	4a18      	ldr	r2, [pc, #96]	@ (8001c4c <SignLetter+0x5c4>)
 8001bea:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8001bec:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <SignLetter+0x5c8>)
 8001bee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bf2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001bf6:	4a17      	ldr	r2, [pc, #92]	@ (8001c54 <SignLetter+0x5cc>)
 8001bf8:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8001bfa:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <SignLetter+0x5d0>)
 8001bfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c00:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001c04:	4a15      	ldr	r2, [pc, #84]	@ (8001c5c <SignLetter+0x5d4>)
 8001c06:	6013      	str	r3, [r2, #0]
			break;
 8001c08:	f000 bda7 	b.w	800275a <SignLetter+0x10d2>
 8001c0c:	f3af 8000 	nop.w
 8001c10:	00000000 	.word	0x00000000
 8001c14:	4072c000 	.word	0x4072c000
 8001c18:	00000000 	.word	0x00000000
 8001c1c:	4062c000 	.word	0x4062c000
 8001c20:	20000358 	.word	0x20000358
 8001c24:	20000384 	.word	0x20000384
 8001c28:	2000035a 	.word	0x2000035a
 8001c2c:	20000388 	.word	0x20000388
 8001c30:	2000035c 	.word	0x2000035c
 8001c34:	40877000 	.word	0x40877000
 8001c38:	2000038c 	.word	0x2000038c
 8001c3c:	2000035e 	.word	0x2000035e
 8001c40:	20000390 	.word	0x20000390
 8001c44:	20000360 	.word	0x20000360
 8001c48:	40851800 	.word	0x40851800
 8001c4c:	20000394 	.word	0x20000394
 8001c50:	20000362 	.word	0x20000362
 8001c54:	20000398 	.word	0x20000398
 8001c58:	20000364 	.word	0x20000364
 8001c5c:	2000039c 	.word	0x2000039c

		case 'H':
			thumb_desired_position = thumb_current - 0.75 * THUMB_CLOSED;
 8001c60:	4bb9      	ldr	r3, [pc, #740]	@ (8001f48 <SignLetter+0x8c0>)
 8001c62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fd2e 	bl	80006c8 <__aeabi_i2d>
 8001c6c:	a3b2      	add	r3, pc, #712	@ (adr r3, 8001f38 <SignLetter+0x8b0>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fbdb 	bl	800042c <__aeabi_dsub>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe fd8d 	bl	800079c <__aeabi_d2iz>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4ab1      	ldr	r2, [pc, #708]	@ (8001f4c <SignLetter+0x8c4>)
 8001c86:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001c88:	4bb1      	ldr	r3, [pc, #708]	@ (8001f50 <SignLetter+0x8c8>)
 8001c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c8e:	461a      	mov	r2, r3
 8001c90:	4bb0      	ldr	r3, [pc, #704]	@ (8001f54 <SignLetter+0x8cc>)
 8001c92:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001c94:	4bb0      	ldr	r3, [pc, #704]	@ (8001f58 <SignLetter+0x8d0>)
 8001c96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4baf      	ldr	r3, [pc, #700]	@ (8001f5c <SignLetter+0x8d4>)
 8001c9e:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001ca0:	4baf      	ldr	r3, [pc, #700]	@ (8001f60 <SignLetter+0x8d8>)
 8001ca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ca6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001caa:	4aae      	ldr	r2, [pc, #696]	@ (8001f64 <SignLetter+0x8dc>)
 8001cac:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001cae:	4bae      	ldr	r3, [pc, #696]	@ (8001f68 <SignLetter+0x8e0>)
 8001cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cb4:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001cb8:	4aac      	ldr	r2, [pc, #688]	@ (8001f6c <SignLetter+0x8e4>)
 8001cba:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8001cbc:	4bac      	ldr	r3, [pc, #688]	@ (8001f70 <SignLetter+0x8e8>)
 8001cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cc2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001cc6:	4aab      	ldr	r2, [pc, #684]	@ (8001f74 <SignLetter+0x8ec>)
 8001cc8:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8001cca:	4bab      	ldr	r3, [pc, #684]	@ (8001f78 <SignLetter+0x8f0>)
 8001ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001cd4:	4aa9      	ldr	r2, [pc, #676]	@ (8001f7c <SignLetter+0x8f4>)
 8001cd6:	6013      	str	r3, [r2, #0]
			break;
 8001cd8:	f000 bd3f 	b.w	800275a <SignLetter+0x10d2>

		case 'I':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001cdc:	4b9a      	ldr	r3, [pc, #616]	@ (8001f48 <SignLetter+0x8c0>)
 8001cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ce2:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001ce6:	4a99      	ldr	r2, [pc, #612]	@ (8001f4c <SignLetter+0x8c4>)
 8001ce8:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001cea:	4b99      	ldr	r3, [pc, #612]	@ (8001f50 <SignLetter+0x8c8>)
 8001cec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001cf4:	4a97      	ldr	r2, [pc, #604]	@ (8001f54 <SignLetter+0x8cc>)
 8001cf6:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001cf8:	4b97      	ldr	r3, [pc, #604]	@ (8001f58 <SignLetter+0x8d0>)
 8001cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfe:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001d02:	4a96      	ldr	r2, [pc, #600]	@ (8001f5c <SignLetter+0x8d4>)
 8001d04:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001d06:	4b96      	ldr	r3, [pc, #600]	@ (8001f60 <SignLetter+0x8d8>)
 8001d08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001d10:	4a94      	ldr	r2, [pc, #592]	@ (8001f64 <SignLetter+0x8dc>)
 8001d12:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8001d14:	4b94      	ldr	r3, [pc, #592]	@ (8001f68 <SignLetter+0x8e0>)
 8001d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	4b93      	ldr	r3, [pc, #588]	@ (8001f6c <SignLetter+0x8e4>)
 8001d1e:	601a      	str	r2, [r3, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8001d20:	4b93      	ldr	r3, [pc, #588]	@ (8001f70 <SignLetter+0x8e8>)
 8001d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d26:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001d2a:	4a92      	ldr	r2, [pc, #584]	@ (8001f74 <SignLetter+0x8ec>)
 8001d2c:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8001d2e:	4b92      	ldr	r3, [pc, #584]	@ (8001f78 <SignLetter+0x8f0>)
 8001d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d34:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001d38:	4a90      	ldr	r2, [pc, #576]	@ (8001f7c <SignLetter+0x8f4>)
 8001d3a:	6013      	str	r3, [r2, #0]
			break;
 8001d3c:	f000 bd0d 	b.w	800275a <SignLetter+0x10d2>

		case 'J':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8001d40:	4b81      	ldr	r3, [pc, #516]	@ (8001f48 <SignLetter+0x8c0>)
 8001d42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d46:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001d4a:	4a80      	ldr	r2, [pc, #512]	@ (8001f4c <SignLetter+0x8c4>)
 8001d4c:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 8001d4e:	4b80      	ldr	r3, [pc, #512]	@ (8001f50 <SignLetter+0x8c8>)
 8001d50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d54:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001d58:	4a7e      	ldr	r2, [pc, #504]	@ (8001f54 <SignLetter+0x8cc>)
 8001d5a:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001d5c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f58 <SignLetter+0x8d0>)
 8001d5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d62:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001d66:	4a7d      	ldr	r2, [pc, #500]	@ (8001f5c <SignLetter+0x8d4>)
 8001d68:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001d6a:	4b7d      	ldr	r3, [pc, #500]	@ (8001f60 <SignLetter+0x8d8>)
 8001d6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d70:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001d74:	4a7b      	ldr	r2, [pc, #492]	@ (8001f64 <SignLetter+0x8dc>)
 8001d76:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 8001d78:	4b7b      	ldr	r3, [pc, #492]	@ (8001f68 <SignLetter+0x8e0>)
 8001d7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4b7a      	ldr	r3, [pc, #488]	@ (8001f6c <SignLetter+0x8e4>)
 8001d82:	601a      	str	r2, [r3, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8001d84:	4b7a      	ldr	r3, [pc, #488]	@ (8001f70 <SignLetter+0x8e8>)
 8001d86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d8a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001d8e:	4a79      	ldr	r2, [pc, #484]	@ (8001f74 <SignLetter+0x8ec>)
 8001d90:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8001d92:	4b79      	ldr	r3, [pc, #484]	@ (8001f78 <SignLetter+0x8f0>)
 8001d94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d98:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001d9c:	4a77      	ldr	r2, [pc, #476]	@ (8001f7c <SignLetter+0x8f4>)
 8001d9e:	6013      	str	r3, [r2, #0]
			break;
 8001da0:	f000 bcdb 	b.w	800275a <SignLetter+0x10d2>

		case 'K':
			thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8001da4:	4b68      	ldr	r3, [pc, #416]	@ (8001f48 <SignLetter+0x8c0>)
 8001da6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7fe fc8c 	bl	80006c8 <__aeabi_i2d>
 8001db0:	a363      	add	r3, pc, #396	@ (adr r3, 8001f40 <SignLetter+0x8b8>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fb39 	bl	800042c <__aeabi_dsub>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f7fe fceb 	bl	800079c <__aeabi_d2iz>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	4a60      	ldr	r2, [pc, #384]	@ (8001f4c <SignLetter+0x8c4>)
 8001dca:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001dcc:	4b60      	ldr	r3, [pc, #384]	@ (8001f50 <SignLetter+0x8c8>)
 8001dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	4b5f      	ldr	r3, [pc, #380]	@ (8001f54 <SignLetter+0x8cc>)
 8001dd6:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8001dd8:	4b5f      	ldr	r3, [pc, #380]	@ (8001f58 <SignLetter+0x8d0>)
 8001dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dde:	461a      	mov	r2, r3
 8001de0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f5c <SignLetter+0x8d4>)
 8001de2:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001de4:	4b5e      	ldr	r3, [pc, #376]	@ (8001f60 <SignLetter+0x8d8>)
 8001de6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dea:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001dee:	4a5d      	ldr	r2, [pc, #372]	@ (8001f64 <SignLetter+0x8dc>)
 8001df0:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001df2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f68 <SignLetter+0x8e0>)
 8001df4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df8:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001dfc:	4a5b      	ldr	r2, [pc, #364]	@ (8001f6c <SignLetter+0x8e4>)
 8001dfe:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8001e00:	4b5b      	ldr	r3, [pc, #364]	@ (8001f70 <SignLetter+0x8e8>)
 8001e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e06:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001e0a:	4a5a      	ldr	r2, [pc, #360]	@ (8001f74 <SignLetter+0x8ec>)
 8001e0c:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8001e0e:	4b5a      	ldr	r3, [pc, #360]	@ (8001f78 <SignLetter+0x8f0>)
 8001e10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e14:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001e18:	4a58      	ldr	r2, [pc, #352]	@ (8001f7c <SignLetter+0x8f4>)
 8001e1a:	6013      	str	r3, [r2, #0]
			break;
 8001e1c:	f000 bc9d 	b.w	800275a <SignLetter+0x10d2>

		case 'L':
			thumb_desired_position = thumb_current - 0 * THUMB_CLOSED;
 8001e20:	4b49      	ldr	r3, [pc, #292]	@ (8001f48 <SignLetter+0x8c0>)
 8001e22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e26:	461a      	mov	r2, r3
 8001e28:	4b48      	ldr	r3, [pc, #288]	@ (8001f4c <SignLetter+0x8c4>)
 8001e2a:	601a      	str	r2, [r3, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8001e2c:	4b48      	ldr	r3, [pc, #288]	@ (8001f50 <SignLetter+0x8c8>)
 8001e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b47      	ldr	r3, [pc, #284]	@ (8001f54 <SignLetter+0x8cc>)
 8001e36:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8001e38:	4b47      	ldr	r3, [pc, #284]	@ (8001f58 <SignLetter+0x8d0>)
 8001e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001e42:	4a46      	ldr	r2, [pc, #280]	@ (8001f5c <SignLetter+0x8d4>)
 8001e44:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001e46:	4b46      	ldr	r3, [pc, #280]	@ (8001f60 <SignLetter+0x8d8>)
 8001e48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4c:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001e50:	4a44      	ldr	r2, [pc, #272]	@ (8001f64 <SignLetter+0x8dc>)
 8001e52:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001e54:	4b44      	ldr	r3, [pc, #272]	@ (8001f68 <SignLetter+0x8e0>)
 8001e56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5a:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001e5e:	4a43      	ldr	r2, [pc, #268]	@ (8001f6c <SignLetter+0x8e4>)
 8001e60:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8001e62:	4b43      	ldr	r3, [pc, #268]	@ (8001f70 <SignLetter+0x8e8>)
 8001e64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e68:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001e6c:	4a41      	ldr	r2, [pc, #260]	@ (8001f74 <SignLetter+0x8ec>)
 8001e6e:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8001e70:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <SignLetter+0x8f0>)
 8001e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e76:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001e7a:	4a40      	ldr	r2, [pc, #256]	@ (8001f7c <SignLetter+0x8f4>)
 8001e7c:	6013      	str	r3, [r2, #0]
			break;
 8001e7e:	f000 bc6c 	b.w	800275a <SignLetter+0x10d2>

		case 'M':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //Make speed faster so thumb closes first or the speed of the other 4 fingers slower.
 8001e82:	4b31      	ldr	r3, [pc, #196]	@ (8001f48 <SignLetter+0x8c0>)
 8001e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e88:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001e8c:	4a2f      	ldr	r2, [pc, #188]	@ (8001f4c <SignLetter+0x8c4>)
 8001e8e:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.9 * INDEX_CLOSED;
 8001e90:	4b2f      	ldr	r3, [pc, #188]	@ (8001f50 <SignLetter+0x8c8>)
 8001e92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe fc16 	bl	80006c8 <__aeabi_i2d>
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	4b37      	ldr	r3, [pc, #220]	@ (8001f80 <SignLetter+0x8f8>)
 8001ea2:	f7fe fac3 	bl	800042c <__aeabi_dsub>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	4610      	mov	r0, r2
 8001eac:	4619      	mov	r1, r3
 8001eae:	f7fe fc75 	bl	800079c <__aeabi_d2iz>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a27      	ldr	r2, [pc, #156]	@ (8001f54 <SignLetter+0x8cc>)
 8001eb6:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.9 * MIDDLE_CLOSED;
 8001eb8:	4b27      	ldr	r3, [pc, #156]	@ (8001f58 <SignLetter+0x8d0>)
 8001eba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fc02 	bl	80006c8 <__aeabi_i2d>
 8001ec4:	f04f 0200 	mov.w	r2, #0
 8001ec8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f80 <SignLetter+0x8f8>)
 8001eca:	f7fe faaf 	bl	800042c <__aeabi_dsub>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f7fe fc61 	bl	800079c <__aeabi_d2iz>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f5c <SignLetter+0x8d4>)
 8001ede:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 0.9 * RING_CLOSED;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <SignLetter+0x8d8>)
 8001ee2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fbee 	bl	80006c8 <__aeabi_i2d>
 8001eec:	f04f 0200 	mov.w	r2, #0
 8001ef0:	4b23      	ldr	r3, [pc, #140]	@ (8001f80 <SignLetter+0x8f8>)
 8001ef2:	f7fe fa9b 	bl	800042c <__aeabi_dsub>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	460b      	mov	r3, r1
 8001efa:	4610      	mov	r0, r2
 8001efc:	4619      	mov	r1, r3
 8001efe:	f7fe fc4d 	bl	800079c <__aeabi_d2iz>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4a17      	ldr	r2, [pc, #92]	@ (8001f64 <SignLetter+0x8dc>)
 8001f06:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001f08:	4b17      	ldr	r3, [pc, #92]	@ (8001f68 <SignLetter+0x8e0>)
 8001f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0e:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001f12:	4a16      	ldr	r2, [pc, #88]	@ (8001f6c <SignLetter+0x8e4>)
 8001f14:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8001f16:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <SignLetter+0x8e8>)
 8001f18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001f20:	4a14      	ldr	r2, [pc, #80]	@ (8001f74 <SignLetter+0x8ec>)
 8001f22:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8001f24:	4b14      	ldr	r3, [pc, #80]	@ (8001f78 <SignLetter+0x8f0>)
 8001f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8001f2e:	4a13      	ldr	r2, [pc, #76]	@ (8001f7c <SignLetter+0x8f4>)
 8001f30:	6013      	str	r3, [r2, #0]
			break;
 8001f32:	f000 bc12 	b.w	800275a <SignLetter+0x10d2>
 8001f36:	bf00      	nop
 8001f38:	00000000 	.word	0x00000000
 8001f3c:	407c2000 	.word	0x407c2000
 8001f40:	00000000 	.word	0x00000000
 8001f44:	4062c000 	.word	0x4062c000
 8001f48:	20000358 	.word	0x20000358
 8001f4c:	20000384 	.word	0x20000384
 8001f50:	2000035a 	.word	0x2000035a
 8001f54:	20000388 	.word	0x20000388
 8001f58:	2000035c 	.word	0x2000035c
 8001f5c:	2000038c 	.word	0x2000038c
 8001f60:	2000035e 	.word	0x2000035e
 8001f64:	20000390 	.word	0x20000390
 8001f68:	20000360 	.word	0x20000360
 8001f6c:	20000394 	.word	0x20000394
 8001f70:	20000362 	.word	0x20000362
 8001f74:	20000398 	.word	0x20000398
 8001f78:	20000364 	.word	0x20000364
 8001f7c:	2000039c 	.word	0x2000039c
 8001f80:	408c2000 	.word	0x408c2000

		case 'N':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //Also change the speeds on this one
 8001f84:	4bb8      	ldr	r3, [pc, #736]	@ (8002268 <SignLetter+0xbe0>)
 8001f86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8a:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8001f8e:	4ab7      	ldr	r2, [pc, #732]	@ (800226c <SignLetter+0xbe4>)
 8001f90:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.9 * INDEX_CLOSED;
 8001f92:	4bb7      	ldr	r3, [pc, #732]	@ (8002270 <SignLetter+0xbe8>)
 8001f94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fb95 	bl	80006c8 <__aeabi_i2d>
 8001f9e:	f04f 0200 	mov.w	r2, #0
 8001fa2:	4bb4      	ldr	r3, [pc, #720]	@ (8002274 <SignLetter+0xbec>)
 8001fa4:	f7fe fa42 	bl	800042c <__aeabi_dsub>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4610      	mov	r0, r2
 8001fae:	4619      	mov	r1, r3
 8001fb0:	f7fe fbf4 	bl	800079c <__aeabi_d2iz>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	4ab0      	ldr	r2, [pc, #704]	@ (8002278 <SignLetter+0xbf0>)
 8001fb8:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.9 * MIDDLE_CLOSED;
 8001fba:	4bb0      	ldr	r3, [pc, #704]	@ (800227c <SignLetter+0xbf4>)
 8001fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fb81 	bl	80006c8 <__aeabi_i2d>
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	4baa      	ldr	r3, [pc, #680]	@ (8002274 <SignLetter+0xbec>)
 8001fcc:	f7fe fa2e 	bl	800042c <__aeabi_dsub>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	f7fe fbe0 	bl	800079c <__aeabi_d2iz>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	4aa8      	ldr	r2, [pc, #672]	@ (8002280 <SignLetter+0xbf8>)
 8001fe0:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8001fe2:	4ba8      	ldr	r3, [pc, #672]	@ (8002284 <SignLetter+0xbfc>)
 8001fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fe8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8001fec:	4aa6      	ldr	r2, [pc, #664]	@ (8002288 <SignLetter+0xc00>)
 8001fee:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8001ff0:	4ba6      	ldr	r3, [pc, #664]	@ (800228c <SignLetter+0xc04>)
 8001ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff6:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8001ffa:	4aa5      	ldr	r2, [pc, #660]	@ (8002290 <SignLetter+0xc08>)
 8001ffc:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8001ffe:	4ba5      	ldr	r3, [pc, #660]	@ (8002294 <SignLetter+0xc0c>)
 8002000:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002004:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002008:	4aa3      	ldr	r2, [pc, #652]	@ (8002298 <SignLetter+0xc10>)
 800200a:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 800200c:	4ba3      	ldr	r3, [pc, #652]	@ (800229c <SignLetter+0xc14>)
 800200e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002012:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002016:	4aa2      	ldr	r2, [pc, #648]	@ (80022a0 <SignLetter+0xc18>)
 8002018:	6013      	str	r3, [r2, #0]
			break;
 800201a:	e39e      	b.n	800275a <SignLetter+0x10d2>

		case 'O':
			thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 800201c:	4b92      	ldr	r3, [pc, #584]	@ (8002268 <SignLetter+0xbe0>)
 800201e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002022:	4618      	mov	r0, r3
 8002024:	f7fe fb50 	bl	80006c8 <__aeabi_i2d>
 8002028:	a389      	add	r3, pc, #548	@ (adr r3, 8002250 <SignLetter+0xbc8>)
 800202a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800202e:	f7fe f9fd 	bl	800042c <__aeabi_dsub>
 8002032:	4602      	mov	r2, r0
 8002034:	460b      	mov	r3, r1
 8002036:	4610      	mov	r0, r2
 8002038:	4619      	mov	r1, r3
 800203a:	f7fe fbaf 	bl	800079c <__aeabi_d2iz>
 800203e:	4603      	mov	r3, r0
 8002040:	4a8a      	ldr	r2, [pc, #552]	@ (800226c <SignLetter+0xbe4>)
 8002042:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.5 * INDEX_CLOSED;
 8002044:	4b8a      	ldr	r3, [pc, #552]	@ (8002270 <SignLetter+0xbe8>)
 8002046:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe fb3c 	bl	80006c8 <__aeabi_i2d>
 8002050:	f04f 0200 	mov.w	r2, #0
 8002054:	4b93      	ldr	r3, [pc, #588]	@ (80022a4 <SignLetter+0xc1c>)
 8002056:	f7fe f9e9 	bl	800042c <__aeabi_dsub>
 800205a:	4602      	mov	r2, r0
 800205c:	460b      	mov	r3, r1
 800205e:	4610      	mov	r0, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f7fe fb9b 	bl	800079c <__aeabi_d2iz>
 8002066:	4603      	mov	r3, r0
 8002068:	4a83      	ldr	r2, [pc, #524]	@ (8002278 <SignLetter+0xbf0>)
 800206a:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.5 * MIDDLE_CLOSED;
 800206c:	4b83      	ldr	r3, [pc, #524]	@ (800227c <SignLetter+0xbf4>)
 800206e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002072:	4618      	mov	r0, r3
 8002074:	f7fe fb28 	bl	80006c8 <__aeabi_i2d>
 8002078:	f04f 0200 	mov.w	r2, #0
 800207c:	4b89      	ldr	r3, [pc, #548]	@ (80022a4 <SignLetter+0xc1c>)
 800207e:	f7fe f9d5 	bl	800042c <__aeabi_dsub>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4610      	mov	r0, r2
 8002088:	4619      	mov	r1, r3
 800208a:	f7fe fb87 	bl	800079c <__aeabi_d2iz>
 800208e:	4603      	mov	r3, r0
 8002090:	4a7b      	ldr	r2, [pc, #492]	@ (8002280 <SignLetter+0xbf8>)
 8002092:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 0.5 * RING_CLOSED;
 8002094:	4b7b      	ldr	r3, [pc, #492]	@ (8002284 <SignLetter+0xbfc>)
 8002096:	f9b3 3000 	ldrsh.w	r3, [r3]
 800209a:	4618      	mov	r0, r3
 800209c:	f7fe fb14 	bl	80006c8 <__aeabi_i2d>
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	4b7f      	ldr	r3, [pc, #508]	@ (80022a4 <SignLetter+0xc1c>)
 80020a6:	f7fe f9c1 	bl	800042c <__aeabi_dsub>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4610      	mov	r0, r2
 80020b0:	4619      	mov	r1, r3
 80020b2:	f7fe fb73 	bl	800079c <__aeabi_d2iz>
 80020b6:	4603      	mov	r3, r0
 80020b8:	4a73      	ldr	r2, [pc, #460]	@ (8002288 <SignLetter+0xc00>)
 80020ba:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0.5 * PINKY_CLOSED;
 80020bc:	4b73      	ldr	r3, [pc, #460]	@ (800228c <SignLetter+0xc04>)
 80020be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fb00 	bl	80006c8 <__aeabi_i2d>
 80020c8:	a363      	add	r3, pc, #396	@ (adr r3, 8002258 <SignLetter+0xbd0>)
 80020ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ce:	f7fe f9ad 	bl	800042c <__aeabi_dsub>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4610      	mov	r0, r2
 80020d8:	4619      	mov	r1, r3
 80020da:	f7fe fb5f 	bl	800079c <__aeabi_d2iz>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a6b      	ldr	r2, [pc, #428]	@ (8002290 <SignLetter+0xc08>)
 80020e2:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 80020e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002294 <SignLetter+0xc0c>)
 80020e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ea:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80020ee:	4a6a      	ldr	r2, [pc, #424]	@ (8002298 <SignLetter+0xc10>)
 80020f0:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 80020f2:	4b6a      	ldr	r3, [pc, #424]	@ (800229c <SignLetter+0xc14>)
 80020f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020f8:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80020fc:	4a68      	ldr	r2, [pc, #416]	@ (80022a0 <SignLetter+0xc18>)
 80020fe:	6013      	str	r3, [r2, #0]
			break;
 8002100:	e32b      	b.n	800275a <SignLetter+0x10d2>

		case 'P':
			thumb_desired_position = thumb_current - 0.25 * THUMB_CLOSED;
 8002102:	4b59      	ldr	r3, [pc, #356]	@ (8002268 <SignLetter+0xbe0>)
 8002104:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fadd 	bl	80006c8 <__aeabi_i2d>
 800210e:	a350      	add	r3, pc, #320	@ (adr r3, 8002250 <SignLetter+0xbc8>)
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	f7fe f98a 	bl	800042c <__aeabi_dsub>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	f7fe fb3c 	bl	800079c <__aeabi_d2iz>
 8002124:	4603      	mov	r3, r0
 8002126:	4a51      	ldr	r2, [pc, #324]	@ (800226c <SignLetter+0xbe4>)
 8002128:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.25 * INDEX_CLOSED;
 800212a:	4b51      	ldr	r3, [pc, #324]	@ (8002270 <SignLetter+0xbe8>)
 800212c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002130:	4618      	mov	r0, r3
 8002132:	f7fe fac9 	bl	80006c8 <__aeabi_i2d>
 8002136:	f04f 0200 	mov.w	r2, #0
 800213a:	4b5b      	ldr	r3, [pc, #364]	@ (80022a8 <SignLetter+0xc20>)
 800213c:	f7fe f976 	bl	800042c <__aeabi_dsub>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4610      	mov	r0, r2
 8002146:	4619      	mov	r1, r3
 8002148:	f7fe fb28 	bl	800079c <__aeabi_d2iz>
 800214c:	4603      	mov	r3, r0
 800214e:	4a4a      	ldr	r2, [pc, #296]	@ (8002278 <SignLetter+0xbf0>)
 8002150:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.5 * MIDDLE_CLOSED;
 8002152:	4b4a      	ldr	r3, [pc, #296]	@ (800227c <SignLetter+0xbf4>)
 8002154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fab5 	bl	80006c8 <__aeabi_i2d>
 800215e:	f04f 0200 	mov.w	r2, #0
 8002162:	4b50      	ldr	r3, [pc, #320]	@ (80022a4 <SignLetter+0xc1c>)
 8002164:	f7fe f962 	bl	800042c <__aeabi_dsub>
 8002168:	4602      	mov	r2, r0
 800216a:	460b      	mov	r3, r1
 800216c:	4610      	mov	r0, r2
 800216e:	4619      	mov	r1, r3
 8002170:	f7fe fb14 	bl	800079c <__aeabi_d2iz>
 8002174:	4603      	mov	r3, r0
 8002176:	4a42      	ldr	r2, [pc, #264]	@ (8002280 <SignLetter+0xbf8>)
 8002178:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 800217a:	4b42      	ldr	r3, [pc, #264]	@ (8002284 <SignLetter+0xbfc>)
 800217c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002180:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002184:	4a40      	ldr	r2, [pc, #256]	@ (8002288 <SignLetter+0xc00>)
 8002186:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8002188:	4b40      	ldr	r3, [pc, #256]	@ (800228c <SignLetter+0xc04>)
 800218a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800218e:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8002192:	4a3f      	ldr	r2, [pc, #252]	@ (8002290 <SignLetter+0xc08>)
 8002194:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8002196:	4b3f      	ldr	r3, [pc, #252]	@ (8002294 <SignLetter+0xc0c>)
 8002198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800219c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80021a0:	4a3d      	ldr	r2, [pc, #244]	@ (8002298 <SignLetter+0xc10>)
 80021a2:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 80021a4:	4b3d      	ldr	r3, [pc, #244]	@ (800229c <SignLetter+0xc14>)
 80021a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021aa:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80021ae:	4a3c      	ldr	r2, [pc, #240]	@ (80022a0 <SignLetter+0xc18>)
 80021b0:	6013      	str	r3, [r2, #0]
			break;
 80021b2:	e2d2      	b.n	800275a <SignLetter+0x10d2>

		case 'Q':
			thumb_desired_position = thumb_current - 0.1 * THUMB_CLOSED;
 80021b4:	4b2c      	ldr	r3, [pc, #176]	@ (8002268 <SignLetter+0xbe0>)
 80021b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe fa84 	bl	80006c8 <__aeabi_i2d>
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	4b39      	ldr	r3, [pc, #228]	@ (80022ac <SignLetter+0xc24>)
 80021c6:	f7fe f931 	bl	800042c <__aeabi_dsub>
 80021ca:	4602      	mov	r2, r0
 80021cc:	460b      	mov	r3, r1
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	f7fe fae3 	bl	800079c <__aeabi_d2iz>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4a24      	ldr	r2, [pc, #144]	@ (800226c <SignLetter+0xbe4>)
 80021da:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.3 * INDEX_CLOSED;
 80021dc:	4b24      	ldr	r3, [pc, #144]	@ (8002270 <SignLetter+0xbe8>)
 80021de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fa70 	bl	80006c8 <__aeabi_i2d>
 80021e8:	a31d      	add	r3, pc, #116	@ (adr r3, 8002260 <SignLetter+0xbd8>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe f91d 	bl	800042c <__aeabi_dsub>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4610      	mov	r0, r2
 80021f8:	4619      	mov	r1, r3
 80021fa:	f7fe facf 	bl	800079c <__aeabi_d2iz>
 80021fe:	4603      	mov	r3, r0
 8002200:	4a1d      	ldr	r2, [pc, #116]	@ (8002278 <SignLetter+0xbf0>)
 8002202:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8002204:	4b1d      	ldr	r3, [pc, #116]	@ (800227c <SignLetter+0xbf4>)
 8002206:	f9b3 3000 	ldrsh.w	r3, [r3]
 800220a:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800220e:	4a1c      	ldr	r2, [pc, #112]	@ (8002280 <SignLetter+0xbf8>)
 8002210:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8002212:	4b1c      	ldr	r3, [pc, #112]	@ (8002284 <SignLetter+0xbfc>)
 8002214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002218:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800221c:	4a1a      	ldr	r2, [pc, #104]	@ (8002288 <SignLetter+0xc00>)
 800221e:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8002220:	4b1a      	ldr	r3, [pc, #104]	@ (800228c <SignLetter+0xc04>)
 8002222:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002226:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 800222a:	4a19      	ldr	r2, [pc, #100]	@ (8002290 <SignLetter+0xc08>)
 800222c:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 800222e:	4b19      	ldr	r3, [pc, #100]	@ (8002294 <SignLetter+0xc0c>)
 8002230:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002234:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002238:	4a17      	ldr	r2, [pc, #92]	@ (8002298 <SignLetter+0xc10>)
 800223a:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 800223c:	4b17      	ldr	r3, [pc, #92]	@ (800229c <SignLetter+0xc14>)
 800223e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002242:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002246:	4a16      	ldr	r2, [pc, #88]	@ (80022a0 <SignLetter+0xc18>)
 8002248:	6013      	str	r3, [r2, #0]
			break;
 800224a:	e286      	b.n	800275a <SignLetter+0x10d2>
 800224c:	f3af 8000 	nop.w
 8002250:	00000000 	.word	0x00000000
 8002254:	4062c000 	.word	0x4062c000
 8002258:	00000000 	.word	0x00000000
 800225c:	407c2000 	.word	0x407c2000
 8002260:	00000000 	.word	0x00000000
 8002264:	4072c000 	.word	0x4072c000
 8002268:	20000358 	.word	0x20000358
 800226c:	20000384 	.word	0x20000384
 8002270:	2000035a 	.word	0x2000035a
 8002274:	408c2000 	.word	0x408c2000
 8002278:	20000388 	.word	0x20000388
 800227c:	2000035c 	.word	0x2000035c
 8002280:	2000038c 	.word	0x2000038c
 8002284:	2000035e 	.word	0x2000035e
 8002288:	20000390 	.word	0x20000390
 800228c:	20000360 	.word	0x20000360
 8002290:	20000394 	.word	0x20000394
 8002294:	20000362 	.word	0x20000362
 8002298:	20000398 	.word	0x20000398
 800229c:	20000364 	.word	0x20000364
 80022a0:	2000039c 	.word	0x2000039c
 80022a4:	407f4000 	.word	0x407f4000
 80022a8:	406f4000 	.word	0x406f4000
 80022ac:	404e0000 	.word	0x404e0000

		case 'R':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //TBD
 80022b0:	4b98      	ldr	r3, [pc, #608]	@ (8002514 <SignLetter+0xe8c>)
 80022b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022b6:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80022ba:	4a97      	ldr	r2, [pc, #604]	@ (8002518 <SignLetter+0xe90>)
 80022bc:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 80022be:	4b97      	ldr	r3, [pc, #604]	@ (800251c <SignLetter+0xe94>)
 80022c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022c4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80022c8:	4a95      	ldr	r2, [pc, #596]	@ (8002520 <SignLetter+0xe98>)
 80022ca:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80022cc:	4b95      	ldr	r3, [pc, #596]	@ (8002524 <SignLetter+0xe9c>)
 80022ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022d2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80022d6:	4a94      	ldr	r2, [pc, #592]	@ (8002528 <SignLetter+0xea0>)
 80022d8:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 80022da:	4b94      	ldr	r3, [pc, #592]	@ (800252c <SignLetter+0xea4>)
 80022dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022e0:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80022e4:	4a92      	ldr	r2, [pc, #584]	@ (8002530 <SignLetter+0xea8>)
 80022e6:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80022e8:	4b92      	ldr	r3, [pc, #584]	@ (8002534 <SignLetter+0xeac>)
 80022ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ee:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 80022f2:	4a91      	ldr	r2, [pc, #580]	@ (8002538 <SignLetter+0xeb0>)
 80022f4:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 80022f6:	4b91      	ldr	r3, [pc, #580]	@ (800253c <SignLetter+0xeb4>)
 80022f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022fc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002300:	4a8f      	ldr	r2, [pc, #572]	@ (8002540 <SignLetter+0xeb8>)
 8002302:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8002304:	4b8f      	ldr	r3, [pc, #572]	@ (8002544 <SignLetter+0xebc>)
 8002306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800230e:	4a8e      	ldr	r2, [pc, #568]	@ (8002548 <SignLetter+0xec0>)
 8002310:	6013      	str	r3, [r2, #0]
			break;
 8002312:	e222      	b.n	800275a <SignLetter+0x10d2>

		case 'S':
			thumb_desired_position = thumb_current - 0.8 * THUMB_CLOSED;//Make thumb slower so it ends on top of the other fingers
 8002314:	4b7f      	ldr	r3, [pc, #508]	@ (8002514 <SignLetter+0xe8c>)
 8002316:	f9b3 3000 	ldrsh.w	r3, [r3]
 800231a:	4618      	mov	r0, r3
 800231c:	f7fe f9d4 	bl	80006c8 <__aeabi_i2d>
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	4b89      	ldr	r3, [pc, #548]	@ (800254c <SignLetter+0xec4>)
 8002326:	f7fe f881 	bl	800042c <__aeabi_dsub>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f7fe fa33 	bl	800079c <__aeabi_d2iz>
 8002336:	4603      	mov	r3, r0
 8002338:	4a77      	ldr	r2, [pc, #476]	@ (8002518 <SignLetter+0xe90>)
 800233a:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 800233c:	4b77      	ldr	r3, [pc, #476]	@ (800251c <SignLetter+0xe94>)
 800233e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002342:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002346:	4a76      	ldr	r2, [pc, #472]	@ (8002520 <SignLetter+0xe98>)
 8002348:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 800234a:	4b76      	ldr	r3, [pc, #472]	@ (8002524 <SignLetter+0xe9c>)
 800234c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002350:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002354:	4a74      	ldr	r2, [pc, #464]	@ (8002528 <SignLetter+0xea0>)
 8002356:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 8002358:	4b74      	ldr	r3, [pc, #464]	@ (800252c <SignLetter+0xea4>)
 800235a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800235e:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002362:	4a73      	ldr	r2, [pc, #460]	@ (8002530 <SignLetter+0xea8>)
 8002364:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 8002366:	4b73      	ldr	r3, [pc, #460]	@ (8002534 <SignLetter+0xeac>)
 8002368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800236c:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8002370:	4a71      	ldr	r2, [pc, #452]	@ (8002538 <SignLetter+0xeb0>)
 8002372:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8002374:	4b71      	ldr	r3, [pc, #452]	@ (800253c <SignLetter+0xeb4>)
 8002376:	f9b3 3000 	ldrsh.w	r3, [r3]
 800237a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800237e:	4a70      	ldr	r2, [pc, #448]	@ (8002540 <SignLetter+0xeb8>)
 8002380:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8002382:	4b70      	ldr	r3, [pc, #448]	@ (8002544 <SignLetter+0xebc>)
 8002384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002388:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800238c:	4a6e      	ldr	r2, [pc, #440]	@ (8002548 <SignLetter+0xec0>)
 800238e:	6013      	str	r3, [r2, #0]
			break;
 8002390:	e1e3      	b.n	800275a <SignLetter+0x10d2>

		case 'T':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //TBD
 8002392:	4b60      	ldr	r3, [pc, #384]	@ (8002514 <SignLetter+0xe8c>)
 8002394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002398:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 800239c:	4a5e      	ldr	r2, [pc, #376]	@ (8002518 <SignLetter+0xe90>)
 800239e:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 80023a0:	4b5e      	ldr	r3, [pc, #376]	@ (800251c <SignLetter+0xe94>)
 80023a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023a6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80023aa:	4a5d      	ldr	r2, [pc, #372]	@ (8002520 <SignLetter+0xe98>)
 80023ac:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80023ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002524 <SignLetter+0xe9c>)
 80023b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023b4:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80023b8:	4a5b      	ldr	r2, [pc, #364]	@ (8002528 <SignLetter+0xea0>)
 80023ba:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 80023bc:	4b5b      	ldr	r3, [pc, #364]	@ (800252c <SignLetter+0xea4>)
 80023be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023c2:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80023c6:	4a5a      	ldr	r2, [pc, #360]	@ (8002530 <SignLetter+0xea8>)
 80023c8:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80023ca:	4b5a      	ldr	r3, [pc, #360]	@ (8002534 <SignLetter+0xeac>)
 80023cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d0:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 80023d4:	4a58      	ldr	r2, [pc, #352]	@ (8002538 <SignLetter+0xeb0>)
 80023d6:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 80023d8:	4b58      	ldr	r3, [pc, #352]	@ (800253c <SignLetter+0xeb4>)
 80023da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023de:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80023e2:	4a57      	ldr	r2, [pc, #348]	@ (8002540 <SignLetter+0xeb8>)
 80023e4:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 80023e6:	4b57      	ldr	r3, [pc, #348]	@ (8002544 <SignLetter+0xebc>)
 80023e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023ec:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80023f0:	4a55      	ldr	r2, [pc, #340]	@ (8002548 <SignLetter+0xec0>)
 80023f2:	6013      	str	r3, [r2, #0]
			break;
 80023f4:	e1b1      	b.n	800275a <SignLetter+0x10d2>

		case 'U':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80023f6:	4b47      	ldr	r3, [pc, #284]	@ (8002514 <SignLetter+0xe8c>)
 80023f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023fc:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002400:	4a45      	ldr	r2, [pc, #276]	@ (8002518 <SignLetter+0xe90>)
 8002402:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8002404:	4b45      	ldr	r3, [pc, #276]	@ (800251c <SignLetter+0xe94>)
 8002406:	f9b3 3000 	ldrsh.w	r3, [r3]
 800240a:	461a      	mov	r2, r3
 800240c:	4b44      	ldr	r3, [pc, #272]	@ (8002520 <SignLetter+0xe98>)
 800240e:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8002410:	4b44      	ldr	r3, [pc, #272]	@ (8002524 <SignLetter+0xe9c>)
 8002412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002416:	461a      	mov	r2, r3
 8002418:	4b43      	ldr	r3, [pc, #268]	@ (8002528 <SignLetter+0xea0>)
 800241a:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 800241c:	4b43      	ldr	r3, [pc, #268]	@ (800252c <SignLetter+0xea4>)
 800241e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002422:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002426:	4a42      	ldr	r2, [pc, #264]	@ (8002530 <SignLetter+0xea8>)
 8002428:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800242a:	4b42      	ldr	r3, [pc, #264]	@ (8002534 <SignLetter+0xeac>)
 800242c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002430:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8002434:	4a40      	ldr	r2, [pc, #256]	@ (8002538 <SignLetter+0xeb0>)
 8002436:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8002438:	4b40      	ldr	r3, [pc, #256]	@ (800253c <SignLetter+0xeb4>)
 800243a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800243e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002442:	4a3f      	ldr	r2, [pc, #252]	@ (8002540 <SignLetter+0xeb8>)
 8002444:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8002446:	4b3f      	ldr	r3, [pc, #252]	@ (8002544 <SignLetter+0xebc>)
 8002448:	f9b3 3000 	ldrsh.w	r3, [r3]
 800244c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002450:	4a3d      	ldr	r2, [pc, #244]	@ (8002548 <SignLetter+0xec0>)
 8002452:	6013      	str	r3, [r2, #0]
			break;
 8002454:	e181      	b.n	800275a <SignLetter+0x10d2>

		case 'V':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 8002456:	4b2f      	ldr	r3, [pc, #188]	@ (8002514 <SignLetter+0xe8c>)
 8002458:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 8002460:	4a2d      	ldr	r2, [pc, #180]	@ (8002518 <SignLetter+0xe90>)
 8002462:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8002464:	4b2d      	ldr	r3, [pc, #180]	@ (800251c <SignLetter+0xe94>)
 8002466:	f9b3 3000 	ldrsh.w	r3, [r3]
 800246a:	461a      	mov	r2, r3
 800246c:	4b2c      	ldr	r3, [pc, #176]	@ (8002520 <SignLetter+0xe98>)
 800246e:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8002470:	4b2c      	ldr	r3, [pc, #176]	@ (8002524 <SignLetter+0xe9c>)
 8002472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002476:	461a      	mov	r2, r3
 8002478:	4b2b      	ldr	r3, [pc, #172]	@ (8002528 <SignLetter+0xea0>)
 800247a:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 800247c:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <SignLetter+0xea4>)
 800247e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002482:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002486:	4a2a      	ldr	r2, [pc, #168]	@ (8002530 <SignLetter+0xea8>)
 8002488:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 800248a:	4b2a      	ldr	r3, [pc, #168]	@ (8002534 <SignLetter+0xeac>)
 800248c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002490:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 8002494:	4a28      	ldr	r2, [pc, #160]	@ (8002538 <SignLetter+0xeb0>)
 8002496:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8002498:	4b28      	ldr	r3, [pc, #160]	@ (800253c <SignLetter+0xeb4>)
 800249a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800249e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80024a2:	4a27      	ldr	r2, [pc, #156]	@ (8002540 <SignLetter+0xeb8>)
 80024a4:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 80024a6:	4b27      	ldr	r3, [pc, #156]	@ (8002544 <SignLetter+0xebc>)
 80024a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ac:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80024b0:	4a25      	ldr	r2, [pc, #148]	@ (8002548 <SignLetter+0xec0>)
 80024b2:	6013      	str	r3, [r2, #0]
			break;
 80024b4:	e151      	b.n	800275a <SignLetter+0x10d2>

		case 'W':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED;
 80024b6:	4b17      	ldr	r3, [pc, #92]	@ (8002514 <SignLetter+0xe8c>)
 80024b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024bc:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80024c0:	4a15      	ldr	r2, [pc, #84]	@ (8002518 <SignLetter+0xe90>)
 80024c2:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 80024c4:	4b15      	ldr	r3, [pc, #84]	@ (800251c <SignLetter+0xe94>)
 80024c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ca:	461a      	mov	r2, r3
 80024cc:	4b14      	ldr	r3, [pc, #80]	@ (8002520 <SignLetter+0xe98>)
 80024ce:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 80024d0:	4b14      	ldr	r3, [pc, #80]	@ (8002524 <SignLetter+0xe9c>)
 80024d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d6:	461a      	mov	r2, r3
 80024d8:	4b13      	ldr	r3, [pc, #76]	@ (8002528 <SignLetter+0xea0>)
 80024da:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 0 * RING_CLOSED;
 80024dc:	4b13      	ldr	r3, [pc, #76]	@ (800252c <SignLetter+0xea4>)
 80024de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e2:	461a      	mov	r2, r3
 80024e4:	4b12      	ldr	r3, [pc, #72]	@ (8002530 <SignLetter+0xea8>)
 80024e6:	601a      	str	r2, [r3, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80024e8:	4b12      	ldr	r3, [pc, #72]	@ (8002534 <SignLetter+0xeac>)
 80024ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ee:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 80024f2:	4a11      	ldr	r2, [pc, #68]	@ (8002538 <SignLetter+0xeb0>)
 80024f4:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 80024f6:	4b11      	ldr	r3, [pc, #68]	@ (800253c <SignLetter+0xeb4>)
 80024f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024fc:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002500:	4a0f      	ldr	r2, [pc, #60]	@ (8002540 <SignLetter+0xeb8>)
 8002502:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8002504:	4b0f      	ldr	r3, [pc, #60]	@ (8002544 <SignLetter+0xebc>)
 8002506:	f9b3 3000 	ldrsh.w	r3, [r3]
 800250a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800250e:	4a0e      	ldr	r2, [pc, #56]	@ (8002548 <SignLetter+0xec0>)
 8002510:	6013      	str	r3, [r2, #0]
			break;
 8002512:	e122      	b.n	800275a <SignLetter+0x10d2>
 8002514:	20000358 	.word	0x20000358
 8002518:	20000384 	.word	0x20000384
 800251c:	2000035a 	.word	0x2000035a
 8002520:	20000388 	.word	0x20000388
 8002524:	2000035c 	.word	0x2000035c
 8002528:	2000038c 	.word	0x2000038c
 800252c:	2000035e 	.word	0x2000035e
 8002530:	20000390 	.word	0x20000390
 8002534:	20000360 	.word	0x20000360
 8002538:	20000394 	.word	0x20000394
 800253c:	20000362 	.word	0x20000362
 8002540:	20000398 	.word	0x20000398
 8002544:	20000364 	.word	0x20000364
 8002548:	2000039c 	.word	0x2000039c
 800254c:	407e0000 	.word	0x407e0000

		case 'X':
			thumb_desired_position = thumb_current - 0.5 * THUMB_CLOSED;
 8002550:	4b87      	ldr	r3, [pc, #540]	@ (8002770 <SignLetter+0x10e8>)
 8002552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe f8b6 	bl	80006c8 <__aeabi_i2d>
 800255c:	a382      	add	r3, pc, #520	@ (adr r3, 8002768 <SignLetter+0x10e0>)
 800255e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002562:	f7fd ff63 	bl	800042c <__aeabi_dsub>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4610      	mov	r0, r2
 800256c:	4619      	mov	r1, r3
 800256e:	f7fe f915 	bl	800079c <__aeabi_d2iz>
 8002572:	4603      	mov	r3, r0
 8002574:	4a7f      	ldr	r2, [pc, #508]	@ (8002774 <SignLetter+0x10ec>)
 8002576:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 0.25 * INDEX_CLOSED;
 8002578:	4b7f      	ldr	r3, [pc, #508]	@ (8002778 <SignLetter+0x10f0>)
 800257a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800257e:	4618      	mov	r0, r3
 8002580:	f7fe f8a2 	bl	80006c8 <__aeabi_i2d>
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	4b7c      	ldr	r3, [pc, #496]	@ (800277c <SignLetter+0x10f4>)
 800258a:	f7fd ff4f 	bl	800042c <__aeabi_dsub>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4610      	mov	r0, r2
 8002594:	4619      	mov	r1, r3
 8002596:	f7fe f901 	bl	800079c <__aeabi_d2iz>
 800259a:	4603      	mov	r3, r0
 800259c:	4a78      	ldr	r2, [pc, #480]	@ (8002780 <SignLetter+0x10f8>)
 800259e:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 0.75 * MIDDLE_CLOSED;
 80025a0:	4b78      	ldr	r3, [pc, #480]	@ (8002784 <SignLetter+0x10fc>)
 80025a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7fe f88e 	bl	80006c8 <__aeabi_i2d>
 80025ac:	f04f 0200 	mov.w	r2, #0
 80025b0:	4b75      	ldr	r3, [pc, #468]	@ (8002788 <SignLetter+0x1100>)
 80025b2:	f7fd ff3b 	bl	800042c <__aeabi_dsub>
 80025b6:	4602      	mov	r2, r0
 80025b8:	460b      	mov	r3, r1
 80025ba:	4610      	mov	r0, r2
 80025bc:	4619      	mov	r1, r3
 80025be:	f7fe f8ed 	bl	800079c <__aeabi_d2iz>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4a71      	ldr	r2, [pc, #452]	@ (800278c <SignLetter+0x1104>)
 80025c6:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 0.9 * RING_CLOSED;
 80025c8:	4b71      	ldr	r3, [pc, #452]	@ (8002790 <SignLetter+0x1108>)
 80025ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe f87a 	bl	80006c8 <__aeabi_i2d>
 80025d4:	f04f 0200 	mov.w	r2, #0
 80025d8:	4b6e      	ldr	r3, [pc, #440]	@ (8002794 <SignLetter+0x110c>)
 80025da:	f7fd ff27 	bl	800042c <__aeabi_dsub>
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4610      	mov	r0, r2
 80025e4:	4619      	mov	r1, r3
 80025e6:	f7fe f8d9 	bl	800079c <__aeabi_d2iz>
 80025ea:	4603      	mov	r3, r0
 80025ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002798 <SignLetter+0x1110>)
 80025ee:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0.9 * PINKY_CLOSED;
 80025f0:	4b6a      	ldr	r3, [pc, #424]	@ (800279c <SignLetter+0x1114>)
 80025f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe f866 	bl	80006c8 <__aeabi_i2d>
 80025fc:	f04f 0200 	mov.w	r2, #0
 8002600:	4b67      	ldr	r3, [pc, #412]	@ (80027a0 <SignLetter+0x1118>)
 8002602:	f7fd ff13 	bl	800042c <__aeabi_dsub>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	f7fe f8c5 	bl	800079c <__aeabi_d2iz>
 8002612:	4603      	mov	r3, r0
 8002614:	4a63      	ldr	r2, [pc, #396]	@ (80027a4 <SignLetter+0x111c>)
 8002616:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8002618:	4b63      	ldr	r3, [pc, #396]	@ (80027a8 <SignLetter+0x1120>)
 800261a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800261e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002622:	4a62      	ldr	r2, [pc, #392]	@ (80027ac <SignLetter+0x1124>)
 8002624:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8002626:	4b62      	ldr	r3, [pc, #392]	@ (80027b0 <SignLetter+0x1128>)
 8002628:	f9b3 3000 	ldrsh.w	r3, [r3]
 800262c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002630:	4a60      	ldr	r2, [pc, #384]	@ (80027b4 <SignLetter+0x112c>)
 8002632:	6013      	str	r3, [r2, #0]
			break;
 8002634:	e091      	b.n	800275a <SignLetter+0x10d2>

		case 'Y':
			thumb_desired_position = thumb_current - 0 * THUMB_CLOSED;
 8002636:	4b4e      	ldr	r3, [pc, #312]	@ (8002770 <SignLetter+0x10e8>)
 8002638:	f9b3 3000 	ldrsh.w	r3, [r3]
 800263c:	461a      	mov	r2, r3
 800263e:	4b4d      	ldr	r3, [pc, #308]	@ (8002774 <SignLetter+0x10ec>)
 8002640:	601a      	str	r2, [r3, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 8002642:	4b4d      	ldr	r3, [pc, #308]	@ (8002778 <SignLetter+0x10f0>)
 8002644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002648:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800264c:	4a4c      	ldr	r2, [pc, #304]	@ (8002780 <SignLetter+0x10f8>)
 800264e:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 8002650:	4b4c      	ldr	r3, [pc, #304]	@ (8002784 <SignLetter+0x10fc>)
 8002652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002656:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 800265a:	4a4c      	ldr	r2, [pc, #304]	@ (800278c <SignLetter+0x1104>)
 800265c:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 800265e:	4b4c      	ldr	r3, [pc, #304]	@ (8002790 <SignLetter+0x1108>)
 8002660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002664:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 8002668:	4a4b      	ldr	r2, [pc, #300]	@ (8002798 <SignLetter+0x1110>)
 800266a:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 800266c:	4b4b      	ldr	r3, [pc, #300]	@ (800279c <SignLetter+0x1114>)
 800266e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002672:	461a      	mov	r2, r3
 8002674:	4b4b      	ldr	r3, [pc, #300]	@ (80027a4 <SignLetter+0x111c>)
 8002676:	601a      	str	r2, [r3, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8002678:	4b4b      	ldr	r3, [pc, #300]	@ (80027a8 <SignLetter+0x1120>)
 800267a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800267e:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002682:	4a4a      	ldr	r2, [pc, #296]	@ (80027ac <SignLetter+0x1124>)
 8002684:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8002686:	4b4a      	ldr	r3, [pc, #296]	@ (80027b0 <SignLetter+0x1128>)
 8002688:	f9b3 3000 	ldrsh.w	r3, [r3]
 800268c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002690:	4a48      	ldr	r2, [pc, #288]	@ (80027b4 <SignLetter+0x112c>)
 8002692:	6013      	str	r3, [r2, #0]
			break;
 8002694:	e061      	b.n	800275a <SignLetter+0x10d2>

		case 'Z':
			thumb_desired_position = thumb_current - 1 * THUMB_CLOSED; //TDB
 8002696:	4b36      	ldr	r3, [pc, #216]	@ (8002770 <SignLetter+0x10e8>)
 8002698:	f9b3 3000 	ldrsh.w	r3, [r3]
 800269c:	f5a3 7316 	sub.w	r3, r3, #600	@ 0x258
 80026a0:	4a34      	ldr	r2, [pc, #208]	@ (8002774 <SignLetter+0x10ec>)
 80026a2:	6013      	str	r3, [r2, #0]
			index_desired_position = index_current - 1 * INDEX_CLOSED;
 80026a4:	4b34      	ldr	r3, [pc, #208]	@ (8002778 <SignLetter+0x10f0>)
 80026a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026aa:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80026ae:	4a34      	ldr	r2, [pc, #208]	@ (8002780 <SignLetter+0x10f8>)
 80026b0:	6013      	str	r3, [r2, #0]
			middle_desired_position = middle_current - 1 * MIDDLE_CLOSED;
 80026b2:	4b34      	ldr	r3, [pc, #208]	@ (8002784 <SignLetter+0x10fc>)
 80026b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026b8:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80026bc:	4a33      	ldr	r2, [pc, #204]	@ (800278c <SignLetter+0x1104>)
 80026be:	6013      	str	r3, [r2, #0]
			ring_desired_position = ring_current - 1 * RING_CLOSED;
 80026c0:	4b33      	ldr	r3, [pc, #204]	@ (8002790 <SignLetter+0x1108>)
 80026c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026c6:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 80026ca:	4a33      	ldr	r2, [pc, #204]	@ (8002798 <SignLetter+0x1110>)
 80026cc:	6013      	str	r3, [r2, #0]
			pinky_desired_position = pinky_current - 1 * PINKY_CLOSED;
 80026ce:	4b33      	ldr	r3, [pc, #204]	@ (800279c <SignLetter+0x1114>)
 80026d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026d4:	f5a3 7361 	sub.w	r3, r3, #900	@ 0x384
 80026d8:	4a32      	ldr	r2, [pc, #200]	@ (80027a4 <SignLetter+0x111c>)
 80026da:	6013      	str	r3, [r2, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 80026dc:	4b32      	ldr	r3, [pc, #200]	@ (80027a8 <SignLetter+0x1120>)
 80026de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026e2:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80026e6:	4a31      	ldr	r2, [pc, #196]	@ (80027ac <SignLetter+0x1124>)
 80026e8:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 80026ea:	4b31      	ldr	r3, [pc, #196]	@ (80027b0 <SignLetter+0x1128>)
 80026ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026f0:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 80026f4:	4a2f      	ldr	r2, [pc, #188]	@ (80027b4 <SignLetter+0x112c>)
 80026f6:	6013      	str	r3, [r2, #0]
			break;
 80026f8:	e02f      	b.n	800275a <SignLetter+0x10d2>

		case '0':
			thumb_desired_position = thumb_current - 0 * THUMB_CLOSED;
 80026fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002770 <SignLetter+0x10e8>)
 80026fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002700:	461a      	mov	r2, r3
 8002702:	4b1c      	ldr	r3, [pc, #112]	@ (8002774 <SignLetter+0x10ec>)
 8002704:	601a      	str	r2, [r3, #0]
			index_desired_position = index_current - 0 * INDEX_CLOSED;
 8002706:	4b1c      	ldr	r3, [pc, #112]	@ (8002778 <SignLetter+0x10f0>)
 8002708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270c:	461a      	mov	r2, r3
 800270e:	4b1c      	ldr	r3, [pc, #112]	@ (8002780 <SignLetter+0x10f8>)
 8002710:	601a      	str	r2, [r3, #0]
			middle_desired_position = middle_current - 0 * MIDDLE_CLOSED;
 8002712:	4b1c      	ldr	r3, [pc, #112]	@ (8002784 <SignLetter+0x10fc>)
 8002714:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002718:	461a      	mov	r2, r3
 800271a:	4b1c      	ldr	r3, [pc, #112]	@ (800278c <SignLetter+0x1104>)
 800271c:	601a      	str	r2, [r3, #0]
			ring_desired_position = ring_current - 0 * RING_CLOSED;
 800271e:	4b1c      	ldr	r3, [pc, #112]	@ (8002790 <SignLetter+0x1108>)
 8002720:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002724:	461a      	mov	r2, r3
 8002726:	4b1c      	ldr	r3, [pc, #112]	@ (8002798 <SignLetter+0x1110>)
 8002728:	601a      	str	r2, [r3, #0]
			pinky_desired_position = pinky_current - 0 * PINKY_CLOSED;
 800272a:	4b1c      	ldr	r3, [pc, #112]	@ (800279c <SignLetter+0x1114>)
 800272c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002730:	461a      	mov	r2, r3
 8002732:	4b1c      	ldr	r3, [pc, #112]	@ (80027a4 <SignLetter+0x111c>)
 8002734:	601a      	str	r2, [r3, #0]
			wrist_bend_desired_position = wrist_bend_current - 1 * WRIST_CLOSED;
 8002736:	4b1c      	ldr	r3, [pc, #112]	@ (80027a8 <SignLetter+0x1120>)
 8002738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800273c:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 8002740:	4a1a      	ldr	r2, [pc, #104]	@ (80027ac <SignLetter+0x1124>)
 8002742:	6013      	str	r3, [r2, #0]
			wrist_rotate_desired_position = wrist_rotate_current - 1 * WRIST_CLOSED;
 8002744:	4b1a      	ldr	r3, [pc, #104]	@ (80027b0 <SignLetter+0x1128>)
 8002746:	f9b3 3000 	ldrsh.w	r3, [r3]
 800274a:	f5a3 73fa 	sub.w	r3, r3, #500	@ 0x1f4
 800274e:	4a19      	ldr	r2, [pc, #100]	@ (80027b4 <SignLetter+0x112c>)
 8002750:	6013      	str	r3, [r2, #0]
			break;
 8002752:	e002      	b.n	800275a <SignLetter+0x10d2>

	        default:
	            // Default position (rest)
	            Servo_StopAll();
 8002754:	f7fe ff2a 	bl	80015ac <Servo_StopAll>
	            break;
 8002758:	bf00      	nop

	    }
	}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	f3af 8000 	nop.w
 8002768:	00000000 	.word	0x00000000
 800276c:	4072c000 	.word	0x4072c000
 8002770:	20000358 	.word	0x20000358
 8002774:	20000384 	.word	0x20000384
 8002778:	2000035a 	.word	0x2000035a
 800277c:	406f4000 	.word	0x406f4000
 8002780:	20000388 	.word	0x20000388
 8002784:	2000035c 	.word	0x2000035c
 8002788:	40877000 	.word	0x40877000
 800278c:	2000038c 	.word	0x2000038c
 8002790:	2000035e 	.word	0x2000035e
 8002794:	408c2000 	.word	0x408c2000
 8002798:	20000390 	.word	0x20000390
 800279c:	20000360 	.word	0x20000360
 80027a0:	40895000 	.word	0x40895000
 80027a4:	20000394 	.word	0x20000394
 80027a8:	20000362 	.word	0x20000362
 80027ac:	20000398 	.word	0x20000398
 80027b0:	20000364 	.word	0x20000364
 80027b4:	2000039c 	.word	0x2000039c

080027b8 <TimeVariation>:
	}

	/*Parameters: Which finger is being moved, and the desired position
	 * Returns: integer of calculated time to move finger that far
	 * This program calculated how long the finger must move to reach the desired position based off of observations. */
	int TimeVariation(Finger finger, int desired_position){
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	6039      	str	r1, [r7, #0]
 80027c2:	71fb      	strb	r3, [r7, #7]
		// Checks if the finger is moving down, if it is no variation required
		if(desired_position < 0){
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	da04      	bge.n	80027d4 <TimeVariation+0x1c>
			desired_position *= -1;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	425b      	negs	r3, r3
 80027ce:	603b      	str	r3, [r7, #0]
			return desired_position;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	e172      	b.n	8002aba <TimeVariation+0x302>
		}
		else if(desired_position == 0)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <TimeVariation+0x26>
			return 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	e16d      	b.n	8002aba <TimeVariation+0x302>
		// Actual time variation calculations based on testing
		switch(finger){
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	2b06      	cmp	r3, #6
 80027e2:	f200 816a 	bhi.w	8002aba <TimeVariation+0x302>
 80027e6:	a201      	add	r2, pc, #4	@ (adr r2, 80027ec <TimeVariation+0x34>)
 80027e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ec:	08002809 	.word	0x08002809
 80027f0:	08002897 	.word	0x08002897
 80027f4:	080028f3 	.word	0x080028f3
 80027f8:	0800294f 	.word	0x0800294f
 80027fc:	080029ab 	.word	0x080029ab
 8002800:	08002a07 	.word	0x08002a07
 8002804:	08002a61 	.word	0x08002a61
			case(THUMB):
				switch(desired_position){
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800280e:	d00c      	beq.n	800282a <TimeVariation+0x72>
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8002816:	dc3c      	bgt.n	8002892 <TimeVariation+0xda>
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800281e:	d016      	beq.n	800284e <TimeVariation+0x96>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8002826:	d024      	beq.n	8002872 <TimeVariation+0xba>
 8002828:	e033      	b.n	8002892 <TimeVariation+0xda>
					case THUMB_CLOSED:
						desired_position *= 0.5;
 800282a:	6838      	ldr	r0, [r7, #0]
 800282c:	f7fd ff4c 	bl	80006c8 <__aeabi_i2d>
 8002830:	f04f 0200 	mov.w	r2, #0
 8002834:	4bac      	ldr	r3, [pc, #688]	@ (8002ae8 <TimeVariation+0x330>)
 8002836:	f7fd fccb 	bl	80001d0 <__aeabi_dmul>
 800283a:	4602      	mov	r2, r0
 800283c:	460b      	mov	r3, r1
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fd ffab 	bl	800079c <__aeabi_d2iz>
 8002846:	4603      	mov	r3, r0
 8002848:	603b      	str	r3, [r7, #0]
						return desired_position;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	e135      	b.n	8002aba <TimeVariation+0x302>

					case THUMB_CLOSED/2:
						desired_position *= 0.25;
 800284e:	6838      	ldr	r0, [r7, #0]
 8002850:	f7fd ff3a 	bl	80006c8 <__aeabi_i2d>
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	4ba4      	ldr	r3, [pc, #656]	@ (8002aec <TimeVariation+0x334>)
 800285a:	f7fd fcb9 	bl	80001d0 <__aeabi_dmul>
 800285e:	4602      	mov	r2, r0
 8002860:	460b      	mov	r3, r1
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f7fd ff99 	bl	800079c <__aeabi_d2iz>
 800286a:	4603      	mov	r3, r0
 800286c:	603b      	str	r3, [r7, #0]
						return desired_position;
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	e123      	b.n	8002aba <TimeVariation+0x302>

					case (THUMB_CLOSED * 3 + 2) / 4:
						desired_position *= 0.38;
 8002872:	6838      	ldr	r0, [r7, #0]
 8002874:	f7fd ff28 	bl	80006c8 <__aeabi_i2d>
 8002878:	a393      	add	r3, pc, #588	@ (adr r3, 8002ac8 <TimeVariation+0x310>)
 800287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287e:	f7fd fca7 	bl	80001d0 <__aeabi_dmul>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4610      	mov	r0, r2
 8002888:	4619      	mov	r1, r3
 800288a:	f7fd ff87 	bl	800079c <__aeabi_d2iz>
 800288e:	4603      	mov	r3, r0
 8002890:	603b      	str	r3, [r7, #0]

					default:
						return desired_position;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	e111      	b.n	8002aba <TimeVariation+0x302>
				}
			case(INDEX):
				switch(desired_position){
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800289c:	d015      	beq.n	80028ca <TimeVariation+0x112>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80028a4:	d123      	bne.n	80028ee <TimeVariation+0x136>
					case INDEX_CLOSED:
						desired_position *= 0.5;
 80028a6:	6838      	ldr	r0, [r7, #0]
 80028a8:	f7fd ff0e 	bl	80006c8 <__aeabi_i2d>
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	4b8d      	ldr	r3, [pc, #564]	@ (8002ae8 <TimeVariation+0x330>)
 80028b2:	f7fd fc8d 	bl	80001d0 <__aeabi_dmul>
 80028b6:	4602      	mov	r2, r0
 80028b8:	460b      	mov	r3, r1
 80028ba:	4610      	mov	r0, r2
 80028bc:	4619      	mov	r1, r3
 80028be:	f7fd ff6d 	bl	800079c <__aeabi_d2iz>
 80028c2:	4603      	mov	r3, r0
 80028c4:	603b      	str	r3, [r7, #0]
						return desired_position;
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	e0f7      	b.n	8002aba <TimeVariation+0x302>

					case (INDEX_CLOSED/2):
						desired_position *= 0.25;
 80028ca:	6838      	ldr	r0, [r7, #0]
 80028cc:	f7fd fefc 	bl	80006c8 <__aeabi_i2d>
 80028d0:	f04f 0200 	mov.w	r2, #0
 80028d4:	4b85      	ldr	r3, [pc, #532]	@ (8002aec <TimeVariation+0x334>)
 80028d6:	f7fd fc7b 	bl	80001d0 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fd ff5b 	bl	800079c <__aeabi_d2iz>
 80028e6:	4603      	mov	r3, r0
 80028e8:	603b      	str	r3, [r7, #0]
						return desired_position;
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	e0e5      	b.n	8002aba <TimeVariation+0x302>

					default:
						return desired_position;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	e0e3      	b.n	8002aba <TimeVariation+0x302>
				}
			case(MIDDLE):
				switch(desired_position){
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80028f8:	d015      	beq.n	8002926 <TimeVariation+0x16e>
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002900:	d123      	bne.n	800294a <TimeVariation+0x192>
					case MIDDLE_CLOSED:
						desired_position *= 0.5;
 8002902:	6838      	ldr	r0, [r7, #0]
 8002904:	f7fd fee0 	bl	80006c8 <__aeabi_i2d>
 8002908:	f04f 0200 	mov.w	r2, #0
 800290c:	4b76      	ldr	r3, [pc, #472]	@ (8002ae8 <TimeVariation+0x330>)
 800290e:	f7fd fc5f 	bl	80001d0 <__aeabi_dmul>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4610      	mov	r0, r2
 8002918:	4619      	mov	r1, r3
 800291a:	f7fd ff3f 	bl	800079c <__aeabi_d2iz>
 800291e:	4603      	mov	r3, r0
 8002920:	603b      	str	r3, [r7, #0]
						return desired_position;
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	e0c9      	b.n	8002aba <TimeVariation+0x302>

					case MIDDLE_CLOSED/2:
						desired_position *= 0.25;
 8002926:	6838      	ldr	r0, [r7, #0]
 8002928:	f7fd fece 	bl	80006c8 <__aeabi_i2d>
 800292c:	f04f 0200 	mov.w	r2, #0
 8002930:	4b6e      	ldr	r3, [pc, #440]	@ (8002aec <TimeVariation+0x334>)
 8002932:	f7fd fc4d 	bl	80001d0 <__aeabi_dmul>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4610      	mov	r0, r2
 800293c:	4619      	mov	r1, r3
 800293e:	f7fd ff2d 	bl	800079c <__aeabi_d2iz>
 8002942:	4603      	mov	r3, r0
 8002944:	603b      	str	r3, [r7, #0]
						return desired_position;
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	e0b7      	b.n	8002aba <TimeVariation+0x302>

					default:
						return desired_position;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	e0b5      	b.n	8002aba <TimeVariation+0x302>
				}
			case(RING):
				switch(desired_position){
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002954:	d015      	beq.n	8002982 <TimeVariation+0x1ca>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800295c:	d123      	bne.n	80029a6 <TimeVariation+0x1ee>
					case RING_CLOSED:
						desired_position *= 0.6;
 800295e:	6838      	ldr	r0, [r7, #0]
 8002960:	f7fd feb2 	bl	80006c8 <__aeabi_i2d>
 8002964:	a35a      	add	r3, pc, #360	@ (adr r3, 8002ad0 <TimeVariation+0x318>)
 8002966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296a:	f7fd fc31 	bl	80001d0 <__aeabi_dmul>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
 8002976:	f7fd ff11 	bl	800079c <__aeabi_d2iz>
 800297a:	4603      	mov	r3, r0
 800297c:	603b      	str	r3, [r7, #0]
						return desired_position;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	e09b      	b.n	8002aba <TimeVariation+0x302>

					case RING_CLOSED/2:
						desired_position *= 0.25;
 8002982:	6838      	ldr	r0, [r7, #0]
 8002984:	f7fd fea0 	bl	80006c8 <__aeabi_i2d>
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	4b57      	ldr	r3, [pc, #348]	@ (8002aec <TimeVariation+0x334>)
 800298e:	f7fd fc1f 	bl	80001d0 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4610      	mov	r0, r2
 8002998:	4619      	mov	r1, r3
 800299a:	f7fd feff 	bl	800079c <__aeabi_d2iz>
 800299e:	4603      	mov	r3, r0
 80029a0:	603b      	str	r3, [r7, #0]
						return desired_position;
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	e089      	b.n	8002aba <TimeVariation+0x302>

					default:
						return desired_position;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	e087      	b.n	8002aba <TimeVariation+0x302>
				}
				case(PINKY):
					switch(desired_position){
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 80029b0:	d015      	beq.n	80029de <TimeVariation+0x226>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80029b8:	d123      	bne.n	8002a02 <TimeVariation+0x24a>
						case PINKY_CLOSED:
							desired_position *= 0.3;
 80029ba:	6838      	ldr	r0, [r7, #0]
 80029bc:	f7fd fe84 	bl	80006c8 <__aeabi_i2d>
 80029c0:	a345      	add	r3, pc, #276	@ (adr r3, 8002ad8 <TimeVariation+0x320>)
 80029c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c6:	f7fd fc03 	bl	80001d0 <__aeabi_dmul>
 80029ca:	4602      	mov	r2, r0
 80029cc:	460b      	mov	r3, r1
 80029ce:	4610      	mov	r0, r2
 80029d0:	4619      	mov	r1, r3
 80029d2:	f7fd fee3 	bl	800079c <__aeabi_d2iz>
 80029d6:	4603      	mov	r3, r0
 80029d8:	603b      	str	r3, [r7, #0]
							return desired_position;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	e06d      	b.n	8002aba <TimeVariation+0x302>

						case PINKY_CLOSED/2:
							desired_position *= 0.15;
 80029de:	6838      	ldr	r0, [r7, #0]
 80029e0:	f7fd fe72 	bl	80006c8 <__aeabi_i2d>
 80029e4:	a33e      	add	r3, pc, #248	@ (adr r3, 8002ae0 <TimeVariation+0x328>)
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f7fd fbf1 	bl	80001d0 <__aeabi_dmul>
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	4610      	mov	r0, r2
 80029f4:	4619      	mov	r1, r3
 80029f6:	f7fd fed1 	bl	800079c <__aeabi_d2iz>
 80029fa:	4603      	mov	r3, r0
 80029fc:	603b      	str	r3, [r7, #0]
							return desired_position;
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	e05b      	b.n	8002aba <TimeVariation+0x302>

						default:
							return desired_position;
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	e059      	b.n	8002aba <TimeVariation+0x302>
					}
					case(WRIST_BEND):
						switch(desired_position){
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	2bfa      	cmp	r3, #250	@ 0xfa
 8002a0a:	d015      	beq.n	8002a38 <TimeVariation+0x280>
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a12:	d123      	bne.n	8002a5c <TimeVariation+0x2a4>
							case WRIST_CLOSED:
								desired_position *= 0.3;
 8002a14:	6838      	ldr	r0, [r7, #0]
 8002a16:	f7fd fe57 	bl	80006c8 <__aeabi_i2d>
 8002a1a:	a32f      	add	r3, pc, #188	@ (adr r3, 8002ad8 <TimeVariation+0x320>)
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	f7fd fbd6 	bl	80001d0 <__aeabi_dmul>
 8002a24:	4602      	mov	r2, r0
 8002a26:	460b      	mov	r3, r1
 8002a28:	4610      	mov	r0, r2
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	f7fd feb6 	bl	800079c <__aeabi_d2iz>
 8002a30:	4603      	mov	r3, r0
 8002a32:	603b      	str	r3, [r7, #0]
								return desired_position;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	e040      	b.n	8002aba <TimeVariation+0x302>

							case WRIST_CLOSED/2:
								desired_position *= 0.15;
 8002a38:	6838      	ldr	r0, [r7, #0]
 8002a3a:	f7fd fe45 	bl	80006c8 <__aeabi_i2d>
 8002a3e:	a328      	add	r3, pc, #160	@ (adr r3, 8002ae0 <TimeVariation+0x328>)
 8002a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a44:	f7fd fbc4 	bl	80001d0 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f7fd fea4 	bl	800079c <__aeabi_d2iz>
 8002a54:	4603      	mov	r3, r0
 8002a56:	603b      	str	r3, [r7, #0]
								return desired_position;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	e02e      	b.n	8002aba <TimeVariation+0x302>

							default:
								return desired_position;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	e02c      	b.n	8002aba <TimeVariation+0x302>
						}
						case(WRIST_ROTATE):
							switch(desired_position){
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	2bfa      	cmp	r3, #250	@ 0xfa
 8002a64:	d015      	beq.n	8002a92 <TimeVariation+0x2da>
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002a6c:	d123      	bne.n	8002ab6 <TimeVariation+0x2fe>
								case WRIST_CLOSED:
									desired_position *= 0.3;
 8002a6e:	6838      	ldr	r0, [r7, #0]
 8002a70:	f7fd fe2a 	bl	80006c8 <__aeabi_i2d>
 8002a74:	a318      	add	r3, pc, #96	@ (adr r3, 8002ad8 <TimeVariation+0x320>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f7fd fba9 	bl	80001d0 <__aeabi_dmul>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4610      	mov	r0, r2
 8002a84:	4619      	mov	r1, r3
 8002a86:	f7fd fe89 	bl	800079c <__aeabi_d2iz>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	603b      	str	r3, [r7, #0]
									return desired_position;
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	e013      	b.n	8002aba <TimeVariation+0x302>

								case WRIST_CLOSED/2:
									desired_position *= 0.15;
 8002a92:	6838      	ldr	r0, [r7, #0]
 8002a94:	f7fd fe18 	bl	80006c8 <__aeabi_i2d>
 8002a98:	a311      	add	r3, pc, #68	@ (adr r3, 8002ae0 <TimeVariation+0x328>)
 8002a9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a9e:	f7fd fb97 	bl	80001d0 <__aeabi_dmul>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4610      	mov	r0, r2
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	f7fd fe77 	bl	800079c <__aeabi_d2iz>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	603b      	str	r3, [r7, #0]
									return desired_position;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	e001      	b.n	8002aba <TimeVariation+0x302>

								default:
									return desired_position;
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	e7ff      	b.n	8002aba <TimeVariation+0x302>
							}
		}
	}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	f3af 8000 	nop.w
 8002ac8:	851eb852 	.word	0x851eb852
 8002acc:	3fd851eb 	.word	0x3fd851eb
 8002ad0:	33333333 	.word	0x33333333
 8002ad4:	3fe33333 	.word	0x3fe33333
 8002ad8:	33333333 	.word	0x33333333
 8002adc:	3fd33333 	.word	0x3fd33333
 8002ae0:	33333333 	.word	0x33333333
 8002ae4:	3fc33333 	.word	0x3fc33333
 8002ae8:	3fe00000 	.word	0x3fe00000
 8002aec:	3fd00000 	.word	0x3fd00000

08002af0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

//	SignLetter('A');

    thumb_TravelTime = TimeVariation(THUMB, thumb_desired_position);
 8002af8:	4b8c      	ldr	r3, [pc, #560]	@ (8002d2c <StartDefaultTask+0x23c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4619      	mov	r1, r3
 8002afe:	2000      	movs	r0, #0
 8002b00:	f7ff fe5a 	bl	80027b8 <TimeVariation>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4a8a      	ldr	r2, [pc, #552]	@ (8002d30 <StartDefaultTask+0x240>)
 8002b08:	6013      	str	r3, [r2, #0]
    index_TravelTime = TimeVariation(INDEX, index_desired_position);
 8002b0a:	4b8a      	ldr	r3, [pc, #552]	@ (8002d34 <StartDefaultTask+0x244>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	2001      	movs	r0, #1
 8002b12:	f7ff fe51 	bl	80027b8 <TimeVariation>
 8002b16:	4603      	mov	r3, r0
 8002b18:	4a87      	ldr	r2, [pc, #540]	@ (8002d38 <StartDefaultTask+0x248>)
 8002b1a:	6013      	str	r3, [r2, #0]
    middle_TravelTime = TimeVariation(MIDDLE, middle_desired_position);
 8002b1c:	4b87      	ldr	r3, [pc, #540]	@ (8002d3c <StartDefaultTask+0x24c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4619      	mov	r1, r3
 8002b22:	2002      	movs	r0, #2
 8002b24:	f7ff fe48 	bl	80027b8 <TimeVariation>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	4a85      	ldr	r2, [pc, #532]	@ (8002d40 <StartDefaultTask+0x250>)
 8002b2c:	6013      	str	r3, [r2, #0]
    ring_TravelTime = TimeVariation(RING, ring_desired_position);
 8002b2e:	4b85      	ldr	r3, [pc, #532]	@ (8002d44 <StartDefaultTask+0x254>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4619      	mov	r1, r3
 8002b34:	2003      	movs	r0, #3
 8002b36:	f7ff fe3f 	bl	80027b8 <TimeVariation>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	4a82      	ldr	r2, [pc, #520]	@ (8002d48 <StartDefaultTask+0x258>)
 8002b3e:	6013      	str	r3, [r2, #0]
    pinky_TravelTime = TimeVariation(PINKY, pinky_desired_position);
 8002b40:	4b82      	ldr	r3, [pc, #520]	@ (8002d4c <StartDefaultTask+0x25c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4619      	mov	r1, r3
 8002b46:	2004      	movs	r0, #4
 8002b48:	f7ff fe36 	bl	80027b8 <TimeVariation>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	4a80      	ldr	r2, [pc, #512]	@ (8002d50 <StartDefaultTask+0x260>)
 8002b50:	6013      	str	r3, [r2, #0]
    wrist_bend_TravelTime = TimeVariation(WRIST_BEND, wrist_bend_desired_position);
 8002b52:	4b80      	ldr	r3, [pc, #512]	@ (8002d54 <StartDefaultTask+0x264>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4619      	mov	r1, r3
 8002b58:	2005      	movs	r0, #5
 8002b5a:	f7ff fe2d 	bl	80027b8 <TimeVariation>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4a7d      	ldr	r2, [pc, #500]	@ (8002d58 <StartDefaultTask+0x268>)
 8002b62:	6013      	str	r3, [r2, #0]
    wrist_rotate_TravelTime = TimeVariation(WRIST_ROTATE, wrist_rotate_desired_position);
 8002b64:	4b7d      	ldr	r3, [pc, #500]	@ (8002d5c <StartDefaultTask+0x26c>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4619      	mov	r1, r3
 8002b6a:	2006      	movs	r0, #6
 8002b6c:	f7ff fe24 	bl	80027b8 <TimeVariation>
 8002b70:	4603      	mov	r3, r0
 8002b72:	4a7b      	ldr	r2, [pc, #492]	@ (8002d60 <StartDefaultTask+0x270>)
 8002b74:	6013      	str	r3, [r2, #0]

//    osDelay(100);
//    Servo_Init();

	if(thumb_TravelTime != 0){
 8002b76:	4b6e      	ldr	r3, [pc, #440]	@ (8002d30 <StartDefaultTask+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d012      	beq.n	8002ba4 <StartDefaultTask+0xb4>
//		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	  Servo_SetMotion(THUMB, Direction_Decider(&thumb_desired_position), 100);
 8002b7e:	486b      	ldr	r0, [pc, #428]	@ (8002d2c <StartDefaultTask+0x23c>)
 8002b80:	f7fe fd66 	bl	8001650 <Direction_Decider>
 8002b84:	4603      	mov	r3, r0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	2264      	movs	r2, #100	@ 0x64
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	2000      	movs	r0, #0
 8002b8e:	f7fe fc75 	bl	800147c <Servo_SetMotion>
		osTimerStart(Thumb_FingerHandle, thumb_TravelTime);
 8002b92:	4b74      	ldr	r3, [pc, #464]	@ (8002d64 <StartDefaultTask+0x274>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a66      	ldr	r2, [pc, #408]	@ (8002d30 <StartDefaultTask+0x240>)
 8002b98:	6812      	ldr	r2, [r2, #0]
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f004 fb6b 	bl	8007278 <osTimerStart>
 8002ba2:	e006      	b.n	8002bb2 <StartDefaultTask+0xc2>
	}
    else if(thumb_TravelTime == 0){
 8002ba4:	4b62      	ldr	r3, [pc, #392]	@ (8002d30 <StartDefaultTask+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <StartDefaultTask+0xc2>
    	thumbDone = pdTRUE;
 8002bac:	4b6e      	ldr	r3, [pc, #440]	@ (8002d68 <StartDefaultTask+0x278>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	601a      	str	r2, [r3, #0]
    }

	osDelay(50);
 8002bb2:	2032      	movs	r0, #50	@ 0x32
 8002bb4:	f004 fab4 	bl	8007120 <osDelay>

	if(index_TravelTime != 0){
 8002bb8:	4b5f      	ldr	r3, [pc, #380]	@ (8002d38 <StartDefaultTask+0x248>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d012      	beq.n	8002be6 <StartDefaultTask+0xf6>
//		HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
	  Servo_SetMotion(INDEX, Direction_Decider(&index_desired_position), 100);
 8002bc0:	485c      	ldr	r0, [pc, #368]	@ (8002d34 <StartDefaultTask+0x244>)
 8002bc2:	f7fe fd45 	bl	8001650 <Direction_Decider>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2264      	movs	r2, #100	@ 0x64
 8002bcc:	4619      	mov	r1, r3
 8002bce:	2001      	movs	r0, #1
 8002bd0:	f7fe fc54 	bl	800147c <Servo_SetMotion>
		osTimerStart(Index_FingerHandle, index_TravelTime);
 8002bd4:	4b65      	ldr	r3, [pc, #404]	@ (8002d6c <StartDefaultTask+0x27c>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a57      	ldr	r2, [pc, #348]	@ (8002d38 <StartDefaultTask+0x248>)
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f004 fb4a 	bl	8007278 <osTimerStart>
 8002be4:	e006      	b.n	8002bf4 <StartDefaultTask+0x104>
	}
    else if(index_TravelTime == 0){
 8002be6:	4b54      	ldr	r3, [pc, #336]	@ (8002d38 <StartDefaultTask+0x248>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d102      	bne.n	8002bf4 <StartDefaultTask+0x104>
    	indexDone = pdTRUE;
 8002bee:	4b60      	ldr	r3, [pc, #384]	@ (8002d70 <StartDefaultTask+0x280>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
    }

	osDelay(50);
 8002bf4:	2032      	movs	r0, #50	@ 0x32
 8002bf6:	f004 fa93 	bl	8007120 <osDelay>

    if(middle_TravelTime != 0){
 8002bfa:	4b51      	ldr	r3, [pc, #324]	@ (8002d40 <StartDefaultTask+0x250>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d012      	beq.n	8002c28 <StartDefaultTask+0x138>
//    	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
		Servo_SetMotion(MIDDLE, Direction_Decider(&middle_desired_position), 100);
 8002c02:	484e      	ldr	r0, [pc, #312]	@ (8002d3c <StartDefaultTask+0x24c>)
 8002c04:	f7fe fd24 	bl	8001650 <Direction_Decider>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2264      	movs	r2, #100	@ 0x64
 8002c0e:	4619      	mov	r1, r3
 8002c10:	2002      	movs	r0, #2
 8002c12:	f7fe fc33 	bl	800147c <Servo_SetMotion>
		osTimerStart(Middle_FingerHandle, middle_TravelTime);
 8002c16:	4b57      	ldr	r3, [pc, #348]	@ (8002d74 <StartDefaultTask+0x284>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a49      	ldr	r2, [pc, #292]	@ (8002d40 <StartDefaultTask+0x250>)
 8002c1c:	6812      	ldr	r2, [r2, #0]
 8002c1e:	4611      	mov	r1, r2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f004 fb29 	bl	8007278 <osTimerStart>
 8002c26:	e006      	b.n	8002c36 <StartDefaultTask+0x146>
	}
    else if(middle_TravelTime == 0){
 8002c28:	4b45      	ldr	r3, [pc, #276]	@ (8002d40 <StartDefaultTask+0x250>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d102      	bne.n	8002c36 <StartDefaultTask+0x146>
    	middleDone = pdTRUE;
 8002c30:	4b51      	ldr	r3, [pc, #324]	@ (8002d78 <StartDefaultTask+0x288>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
    }

	osDelay(50);
 8002c36:	2032      	movs	r0, #50	@ 0x32
 8002c38:	f004 fa72 	bl	8007120 <osDelay>

	if(ring_TravelTime != 0){
 8002c3c:	4b42      	ldr	r3, [pc, #264]	@ (8002d48 <StartDefaultTask+0x258>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d012      	beq.n	8002c6a <StartDefaultTask+0x17a>
//		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
	  Servo_SetMotion(RING, Direction_Decider(&ring_desired_position), 100);
 8002c44:	483f      	ldr	r0, [pc, #252]	@ (8002d44 <StartDefaultTask+0x254>)
 8002c46:	f7fe fd03 	bl	8001650 <Direction_Decider>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2264      	movs	r2, #100	@ 0x64
 8002c50:	4619      	mov	r1, r3
 8002c52:	2003      	movs	r0, #3
 8002c54:	f7fe fc12 	bl	800147c <Servo_SetMotion>
		osTimerStart(Ring_FingerHandle, ring_TravelTime);
 8002c58:	4b48      	ldr	r3, [pc, #288]	@ (8002d7c <StartDefaultTask+0x28c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d48 <StartDefaultTask+0x258>)
 8002c5e:	6812      	ldr	r2, [r2, #0]
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f004 fb08 	bl	8007278 <osTimerStart>
 8002c68:	e006      	b.n	8002c78 <StartDefaultTask+0x188>
	}
    else if(ring_TravelTime == 0){
 8002c6a:	4b37      	ldr	r3, [pc, #220]	@ (8002d48 <StartDefaultTask+0x258>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d102      	bne.n	8002c78 <StartDefaultTask+0x188>
    	ringDone = pdTRUE;
 8002c72:	4b43      	ldr	r3, [pc, #268]	@ (8002d80 <StartDefaultTask+0x290>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]
    }

	osDelay(50);
 8002c78:	2032      	movs	r0, #50	@ 0x32
 8002c7a:	f004 fa51 	bl	8007120 <osDelay>

	if(pinky_TravelTime != 0){
 8002c7e:	4b34      	ldr	r3, [pc, #208]	@ (8002d50 <StartDefaultTask+0x260>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d012      	beq.n	8002cac <StartDefaultTask+0x1bc>
//		HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
	    Servo_SetMotion(PINKY, Direction_Decider(&pinky_desired_position), 100);
 8002c86:	4831      	ldr	r0, [pc, #196]	@ (8002d4c <StartDefaultTask+0x25c>)
 8002c88:	f7fe fce2 	bl	8001650 <Direction_Decider>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2264      	movs	r2, #100	@ 0x64
 8002c92:	4619      	mov	r1, r3
 8002c94:	2004      	movs	r0, #4
 8002c96:	f7fe fbf1 	bl	800147c <Servo_SetMotion>
		osTimerStart(Pinky_FingerHandle, pinky_TravelTime);
 8002c9a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d84 <StartDefaultTask+0x294>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d50 <StartDefaultTask+0x260>)
 8002ca0:	6812      	ldr	r2, [r2, #0]
 8002ca2:	4611      	mov	r1, r2
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f004 fae7 	bl	8007278 <osTimerStart>
 8002caa:	e006      	b.n	8002cba <StartDefaultTask+0x1ca>
	}
    else if(pinky_TravelTime == 0){
 8002cac:	4b28      	ldr	r3, [pc, #160]	@ (8002d50 <StartDefaultTask+0x260>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d102      	bne.n	8002cba <StartDefaultTask+0x1ca>
    	pinkyDone = pdTRUE;
 8002cb4:	4b34      	ldr	r3, [pc, #208]	@ (8002d88 <StartDefaultTask+0x298>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
    }

	if(wrist_bend_TravelTime != 0){
 8002cba:	4b27      	ldr	r3, [pc, #156]	@ (8002d58 <StartDefaultTask+0x268>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d012      	beq.n	8002ce8 <StartDefaultTask+0x1f8>
//		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	  Servo_SetMotion(WRIST_BEND, Direction_Decider(&wrist_bend_desired_position), 100);
 8002cc2:	4824      	ldr	r0, [pc, #144]	@ (8002d54 <StartDefaultTask+0x264>)
 8002cc4:	f7fe fcc4 	bl	8001650 <Direction_Decider>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	2264      	movs	r2, #100	@ 0x64
 8002cce:	4619      	mov	r1, r3
 8002cd0:	2005      	movs	r0, #5
 8002cd2:	f7fe fbd3 	bl	800147c <Servo_SetMotion>
		osTimerStart(Wrist_BendHandle, wrist_bend_TravelTime);
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002d8c <StartDefaultTask+0x29c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4a1f      	ldr	r2, [pc, #124]	@ (8002d58 <StartDefaultTask+0x268>)
 8002cdc:	6812      	ldr	r2, [r2, #0]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f004 fac9 	bl	8007278 <osTimerStart>
 8002ce6:	e006      	b.n	8002cf6 <StartDefaultTask+0x206>
	}
    else if(thumb_TravelTime == 0){
 8002ce8:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <StartDefaultTask+0x240>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d102      	bne.n	8002cf6 <StartDefaultTask+0x206>
    	thumbDone = pdTRUE;
 8002cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8002d68 <StartDefaultTask+0x278>)
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
    }

	osDelay(50);
 8002cf6:	2032      	movs	r0, #50	@ 0x32
 8002cf8:	f004 fa12 	bl	8007120 <osDelay>

	if(wrist_rotate_TravelTime != 0){
 8002cfc:	4b18      	ldr	r3, [pc, #96]	@ (8002d60 <StartDefaultTask+0x270>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d047      	beq.n	8002d94 <StartDefaultTask+0x2a4>
//		HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	  Servo_SetMotion(WRIST_ROTATE, Direction_Decider(&wrist_rotate_desired_position), 100);
 8002d04:	4815      	ldr	r0, [pc, #84]	@ (8002d5c <StartDefaultTask+0x26c>)
 8002d06:	f7fe fca3 	bl	8001650 <Direction_Decider>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2264      	movs	r2, #100	@ 0x64
 8002d10:	4619      	mov	r1, r3
 8002d12:	2006      	movs	r0, #6
 8002d14:	f7fe fbb2 	bl	800147c <Servo_SetMotion>
		osTimerStart(Wrist_RotateHandle, wrist_rotate_TravelTime);
 8002d18:	4b1d      	ldr	r3, [pc, #116]	@ (8002d90 <StartDefaultTask+0x2a0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a10      	ldr	r2, [pc, #64]	@ (8002d60 <StartDefaultTask+0x270>)
 8002d1e:	6812      	ldr	r2, [r2, #0]
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f004 faa8 	bl	8007278 <osTimerStart>
 8002d28:	e03b      	b.n	8002da2 <StartDefaultTask+0x2b2>
 8002d2a:	bf00      	nop
 8002d2c:	20000384 	.word	0x20000384
 8002d30:	20000368 	.word	0x20000368
 8002d34:	20000388 	.word	0x20000388
 8002d38:	2000036c 	.word	0x2000036c
 8002d3c:	2000038c 	.word	0x2000038c
 8002d40:	20000370 	.word	0x20000370
 8002d44:	20000390 	.word	0x20000390
 8002d48:	20000374 	.word	0x20000374
 8002d4c:	20000394 	.word	0x20000394
 8002d50:	20000378 	.word	0x20000378
 8002d54:	20000398 	.word	0x20000398
 8002d58:	2000037c 	.word	0x2000037c
 8002d5c:	2000039c 	.word	0x2000039c
 8002d60:	20000380 	.word	0x20000380
 8002d64:	20000324 	.word	0x20000324
 8002d68:	20000340 	.word	0x20000340
 8002d6c:	20000320 	.word	0x20000320
 8002d70:	2000033c 	.word	0x2000033c
 8002d74:	20000328 	.word	0x20000328
 8002d78:	20000344 	.word	0x20000344
 8002d7c:	2000032c 	.word	0x2000032c
 8002d80:	20000348 	.word	0x20000348
 8002d84:	20000330 	.word	0x20000330
 8002d88:	2000034c 	.word	0x2000034c
 8002d8c:	20000334 	.word	0x20000334
 8002d90:	20000338 	.word	0x20000338
	}
    else if(thumb_TravelTime == 0){
 8002d94:	4b1a      	ldr	r3, [pc, #104]	@ (8002e00 <StartDefaultTask+0x310>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <StartDefaultTask+0x2b2>
    	thumbDone = pdTRUE;
 8002d9c:	4b19      	ldr	r3, [pc, #100]	@ (8002e04 <StartDefaultTask+0x314>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	601a      	str	r2, [r3, #0]
    }

	osDelay(50);
 8002da2:	2032      	movs	r0, #50	@ 0x32
 8002da4:	f004 f9bc 	bl	8007120 <osDelay>

	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002da8:	2120      	movs	r1, #32
 8002daa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dae:	f000 ff25 	bl	8003bfc <HAL_GPIO_TogglePin>
  for(;;)
  {

	  // Checks if all timers have completed, and then deletes main task if it has
	  if(indexDone && thumbDone && middleDone && ringDone && pinkyDone && wrist_BendDone && wrist_RotateDone){
 8002db2:	4b15      	ldr	r3, [pc, #84]	@ (8002e08 <StartDefaultTask+0x318>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d01e      	beq.n	8002df8 <StartDefaultTask+0x308>
 8002dba:	4b12      	ldr	r3, [pc, #72]	@ (8002e04 <StartDefaultTask+0x314>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d01a      	beq.n	8002df8 <StartDefaultTask+0x308>
 8002dc2:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <StartDefaultTask+0x31c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d016      	beq.n	8002df8 <StartDefaultTask+0x308>
 8002dca:	4b11      	ldr	r3, [pc, #68]	@ (8002e10 <StartDefaultTask+0x320>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d012      	beq.n	8002df8 <StartDefaultTask+0x308>
 8002dd2:	4b10      	ldr	r3, [pc, #64]	@ (8002e14 <StartDefaultTask+0x324>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00e      	beq.n	8002df8 <StartDefaultTask+0x308>
 8002dda:	4b0f      	ldr	r3, [pc, #60]	@ (8002e18 <StartDefaultTask+0x328>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00a      	beq.n	8002df8 <StartDefaultTask+0x308>
 8002de2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e1c <StartDefaultTask+0x32c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d006      	beq.n	8002df8 <StartDefaultTask+0x308>
		  osDelay(1000);
 8002dea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002dee:	f004 f997 	bl	8007120 <osDelay>
		  vTaskDelete(NULL);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f005 f9f6 	bl	80081e4 <vTaskDelete>
	  }

	  osDelay(1);
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f004 f991 	bl	8007120 <osDelay>
	  if(indexDone && thumbDone && middleDone && ringDone && pinkyDone && wrist_BendDone && wrist_RotateDone){
 8002dfe:	e7d8      	b.n	8002db2 <StartDefaultTask+0x2c2>
 8002e00:	20000368 	.word	0x20000368
 8002e04:	20000340 	.word	0x20000340
 8002e08:	2000033c 	.word	0x2000033c
 8002e0c:	20000344 	.word	0x20000344
 8002e10:	20000348 	.word	0x20000348
 8002e14:	2000034c 	.word	0x2000034c
 8002e18:	20000350 	.word	0x20000350
 8002e1c:	20000354 	.word	0x20000354

08002e20 <Index>:
  /* USER CODE END 5 */
}

/* Index function */
void Index(void *argument)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Index */
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002e28:	2100      	movs	r1, #0
 8002e2a:	4807      	ldr	r0, [pc, #28]	@ (8002e48 <Index+0x28>)
 8002e2c:	f002 fb96 	bl	800555c <HAL_TIM_PWM_Stop>
//	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1500);
	indexDone = pdTRUE;
 8002e30:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <Index+0x2c>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]
	index_current = index_desired_position;
 8002e36:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <Index+0x30>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	b21a      	sxth	r2, r3
 8002e3c:	4b05      	ldr	r3, [pc, #20]	@ (8002e54 <Index+0x34>)
 8002e3e:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Index */
}
 8002e40:	bf00      	nop
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	200000cc 	.word	0x200000cc
 8002e4c:	2000033c 	.word	0x2000033c
 8002e50:	20000388 	.word	0x20000388
 8002e54:	2000035a 	.word	0x2000035a

08002e58 <Thumb>:

/* Thumb function */
void Thumb(void *argument)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Thumb */
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8002e60:	2120      	movs	r1, #32
 8002e62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e66:	f000 fec9 	bl	8003bfc <HAL_GPIO_TogglePin>
//	Servo_SetMotion(THUMB, STOP, 0);
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	4807      	ldr	r0, [pc, #28]	@ (8002e8c <Thumb+0x34>)
 8002e6e:	f002 fb75 	bl	800555c <HAL_TIM_PWM_Stop>
//	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1500);
	thumbDone = pdTRUE;
 8002e72:	4b07      	ldr	r3, [pc, #28]	@ (8002e90 <Thumb+0x38>)
 8002e74:	2201      	movs	r2, #1
 8002e76:	601a      	str	r2, [r3, #0]
	thumb_current = thumb_desired_position;
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <Thumb+0x3c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	b21a      	sxth	r2, r3
 8002e7e:	4b06      	ldr	r3, [pc, #24]	@ (8002e98 <Thumb+0x40>)
 8002e80:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Thumb */
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000080 	.word	0x20000080
 8002e90:	20000340 	.word	0x20000340
 8002e94:	20000384 	.word	0x20000384
 8002e98:	20000358 	.word	0x20000358

08002e9c <Middle>:

/* Middle function */
void Middle(void *argument)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Middle */
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	4807      	ldr	r0, [pc, #28]	@ (8002ec4 <Middle+0x28>)
 8002ea8:	f002 fb58 	bl	800555c <HAL_TIM_PWM_Stop>
//	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1500);
	middleDone = pdTRUE;
 8002eac:	4b06      	ldr	r3, [pc, #24]	@ (8002ec8 <Middle+0x2c>)
 8002eae:	2201      	movs	r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
	middle_current = middle_desired_position;
 8002eb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <Middle+0x30>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	b21a      	sxth	r2, r3
 8002eb8:	4b05      	ldr	r3, [pc, #20]	@ (8002ed0 <Middle+0x34>)
 8002eba:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Middle */
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000118 	.word	0x20000118
 8002ec8:	20000344 	.word	0x20000344
 8002ecc:	2000038c 	.word	0x2000038c
 8002ed0:	2000035c 	.word	0x2000035c

08002ed4 <Ring>:

/* Ring function */
void Ring(void *argument)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Ring */
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8002edc:	2100      	movs	r1, #0
 8002ede:	4807      	ldr	r0, [pc, #28]	@ (8002efc <Ring+0x28>)
 8002ee0:	f002 fb3c 	bl	800555c <HAL_TIM_PWM_Stop>
//	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 1500);
	ringDone = pdTRUE;
 8002ee4:	4b06      	ldr	r3, [pc, #24]	@ (8002f00 <Ring+0x2c>)
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	601a      	str	r2, [r3, #0]
	ring_current = ring_desired_position;
 8002eea:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <Ring+0x30>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	b21a      	sxth	r2, r3
 8002ef0:	4b05      	ldr	r3, [pc, #20]	@ (8002f08 <Ring+0x34>)
 8002ef2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Ring */
}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	20000164 	.word	0x20000164
 8002f00:	20000348 	.word	0x20000348
 8002f04:	20000390 	.word	0x20000390
 8002f08:	2000035e 	.word	0x2000035e

08002f0c <Pinky>:

/* Pinky function */
void Pinky(void *argument)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Pinky */
//	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
	HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8002f14:	2100      	movs	r1, #0
 8002f16:	4807      	ldr	r0, [pc, #28]	@ (8002f34 <Pinky+0x28>)
 8002f18:	f002 fb20 	bl	800555c <HAL_TIM_PWM_Stop>
//	__HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, 1500);
	pinkyDone = pdTRUE;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <Pinky+0x2c>)
 8002f1e:	2201      	movs	r2, #1
 8002f20:	601a      	str	r2, [r3, #0]
	pinky_current = pinky_desired_position;
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <Pinky+0x30>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	b21a      	sxth	r2, r3
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <Pinky+0x34>)
 8002f2a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END Pinky */
}
 8002f2c:	bf00      	nop
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	200001b0 	.word	0x200001b0
 8002f38:	2000034c 	.word	0x2000034c
 8002f3c:	20000394 	.word	0x20000394
 8002f40:	20000360 	.word	0x20000360

08002f44 <wrist_bend>:

/* wrist_bend function */
void wrist_bend(void *argument)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wrist_bend */
		HAL_TIM_PWM_Stop(&htim15, TIM_CHANNEL_1);
 8002f4c:	2100      	movs	r1, #0
 8002f4e:	4807      	ldr	r0, [pc, #28]	@ (8002f6c <wrist_bend+0x28>)
 8002f50:	f002 fb04 	bl	800555c <HAL_TIM_PWM_Stop>
		wrist_BendDone = pdTRUE;
 8002f54:	4b06      	ldr	r3, [pc, #24]	@ (8002f70 <wrist_bend+0x2c>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]
		wrist_bend_current = wrist_bend_desired_position;
 8002f5a:	4b06      	ldr	r3, [pc, #24]	@ (8002f74 <wrist_bend+0x30>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b21a      	sxth	r2, r3
 8002f60:	4b05      	ldr	r3, [pc, #20]	@ (8002f78 <wrist_bend+0x34>)
 8002f62:	801a      	strh	r2, [r3, #0]
  /* USER CODE END wrist_bend */
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	200001fc 	.word	0x200001fc
 8002f70:	20000350 	.word	0x20000350
 8002f74:	20000398 	.word	0x20000398
 8002f78:	20000362 	.word	0x20000362

08002f7c <wrist_rotate>:

/* wrist_rotate function */
void wrist_rotate(void *argument)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN wrist_rotate */
	HAL_TIM_PWM_Stop(&htim17, TIM_CHANNEL_1);
 8002f84:	2100      	movs	r1, #0
 8002f86:	4807      	ldr	r0, [pc, #28]	@ (8002fa4 <wrist_rotate+0x28>)
 8002f88:	f002 fae8 	bl	800555c <HAL_TIM_PWM_Stop>
	wrist_RotateDone = pdTRUE;
 8002f8c:	4b06      	ldr	r3, [pc, #24]	@ (8002fa8 <wrist_rotate+0x2c>)
 8002f8e:	2201      	movs	r2, #1
 8002f90:	601a      	str	r2, [r3, #0]
	wrist_rotate_current = wrist_rotate_desired_position;
 8002f92:	4b06      	ldr	r3, [pc, #24]	@ (8002fac <wrist_rotate+0x30>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	b21a      	sxth	r2, r3
 8002f98:	4b05      	ldr	r3, [pc, #20]	@ (8002fb0 <wrist_rotate+0x34>)
 8002f9a:	801a      	strh	r2, [r3, #0]
  /* USER CODE END wrist_rotate */
}
 8002f9c:	bf00      	nop
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	20000248 	.word	0x20000248
 8002fa8:	20000354 	.word	0x20000354
 8002fac:	2000039c 	.word	0x2000039c
 8002fb0:	20000364 	.word	0x20000364

08002fb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a04      	ldr	r2, [pc, #16]	@ (8002fd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d101      	bne.n	8002fca <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8002fc6:	f000 fb55 	bl	8003674 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40000c00 	.word	0x40000c00

08002fd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fdc:	b672      	cpsid	i
}
 8002fde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <Error_Handler+0x8>

08002fe4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b082      	sub	sp, #8
 8002fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fea:	4b11      	ldr	r3, [pc, #68]	@ (8003030 <HAL_MspInit+0x4c>)
 8002fec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fee:	4a10      	ldr	r2, [pc, #64]	@ (8003030 <HAL_MspInit+0x4c>)
 8002ff0:	f043 0301 	orr.w	r3, r3, #1
 8002ff4:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8003030 <HAL_MspInit+0x4c>)
 8002ff8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003002:	4b0b      	ldr	r3, [pc, #44]	@ (8003030 <HAL_MspInit+0x4c>)
 8003004:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003006:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <HAL_MspInit+0x4c>)
 8003008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800300c:	6593      	str	r3, [r2, #88]	@ 0x58
 800300e:	4b08      	ldr	r3, [pc, #32]	@ (8003030 <HAL_MspInit+0x4c>)
 8003010:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	210f      	movs	r1, #15
 800301e:	f06f 0001 	mvn.w	r0, #1
 8003022:	f000 fbff 	bl	8003824 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003026:	bf00      	nop
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40021000 	.word	0x40021000

08003034 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003034:	b480      	push	{r7}
 8003036:	b089      	sub	sp, #36	@ 0x24
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a37      	ldr	r2, [pc, #220]	@ (8003120 <HAL_TIM_PWM_MspInit+0xec>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10c      	bne.n	8003060 <HAL_TIM_PWM_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003046:	4b37      	ldr	r3, [pc, #220]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 8003048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800304a:	4a36      	ldr	r2, [pc, #216]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 800304c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003050:	6613      	str	r3, [r2, #96]	@ 0x60
 8003052:	4b34      	ldr	r3, [pc, #208]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 8003054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003056:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800305a:	61fb      	str	r3, [r7, #28]
 800305c:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM15_MspInit 1 */

    /* USER CODE END TIM15_MspInit 1 */
  }

}
 800305e:	e058      	b.n	8003112 <HAL_TIM_PWM_MspInit+0xde>
  else if(htim_pwm->Instance==TIM2)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003068:	d10c      	bne.n	8003084 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800306a:	4b2e      	ldr	r3, [pc, #184]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800306e:	4a2d      	ldr	r2, [pc, #180]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 8003070:	f043 0301 	orr.w	r3, r3, #1
 8003074:	6593      	str	r3, [r2, #88]	@ 0x58
 8003076:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800307a:	f003 0301 	and.w	r3, r3, #1
 800307e:	61bb      	str	r3, [r7, #24]
 8003080:	69bb      	ldr	r3, [r7, #24]
}
 8003082:	e046      	b.n	8003112 <HAL_TIM_PWM_MspInit+0xde>
  else if(htim_pwm->Instance==TIM3)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a27      	ldr	r2, [pc, #156]	@ (8003128 <HAL_TIM_PWM_MspInit+0xf4>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d10c      	bne.n	80030a8 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800308e:	4b25      	ldr	r3, [pc, #148]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	4a24      	ldr	r2, [pc, #144]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	6593      	str	r3, [r2, #88]	@ 0x58
 800309a:	4b22      	ldr	r3, [pc, #136]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	697b      	ldr	r3, [r7, #20]
}
 80030a6:	e034      	b.n	8003112 <HAL_TIM_PWM_MspInit+0xde>
  else if(htim_pwm->Instance==TIM4)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a1f      	ldr	r2, [pc, #124]	@ (800312c <HAL_TIM_PWM_MspInit+0xf8>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10c      	bne.n	80030cc <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	4a1b      	ldr	r2, [pc, #108]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80030be:	4b19      	ldr	r3, [pc, #100]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 80030c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
}
 80030ca:	e022      	b.n	8003112 <HAL_TIM_PWM_MspInit+0xde>
  else if(htim_pwm->Instance==TIM8)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a17      	ldr	r2, [pc, #92]	@ (8003130 <HAL_TIM_PWM_MspInit+0xfc>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10c      	bne.n	80030f0 <HAL_TIM_PWM_MspInit+0xbc>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030d6:	4b13      	ldr	r3, [pc, #76]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 80030d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030da:	4a12      	ldr	r2, [pc, #72]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 80030dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80030e2:	4b10      	ldr	r3, [pc, #64]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 80030e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]
}
 80030ee:	e010      	b.n	8003112 <HAL_TIM_PWM_MspInit+0xde>
  else if(htim_pwm->Instance==TIM15)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003134 <HAL_TIM_PWM_MspInit+0x100>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10b      	bne.n	8003112 <HAL_TIM_PWM_MspInit+0xde>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80030fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 80030fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030fe:	4a09      	ldr	r2, [pc, #36]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 8003100:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003104:	6613      	str	r3, [r2, #96]	@ 0x60
 8003106:	4b07      	ldr	r3, [pc, #28]	@ (8003124 <HAL_TIM_PWM_MspInit+0xf0>)
 8003108:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800310a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	68bb      	ldr	r3, [r7, #8]
}
 8003112:	bf00      	nop
 8003114:	3724      	adds	r7, #36	@ 0x24
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40012c00 	.word	0x40012c00
 8003124:	40021000 	.word	0x40021000
 8003128:	40000400 	.word	0x40000400
 800312c:	40000800 	.word	0x40000800
 8003130:	40013400 	.word	0x40013400
 8003134:	40014000 	.word	0x40014000

08003138 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a0a      	ldr	r2, [pc, #40]	@ (8003170 <HAL_TIM_Base_MspInit+0x38>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10b      	bne.n	8003162 <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM17_MspInit 0 */

    /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800314a:	4b0a      	ldr	r3, [pc, #40]	@ (8003174 <HAL_TIM_Base_MspInit+0x3c>)
 800314c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800314e:	4a09      	ldr	r2, [pc, #36]	@ (8003174 <HAL_TIM_Base_MspInit+0x3c>)
 8003150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003154:	6613      	str	r3, [r2, #96]	@ 0x60
 8003156:	4b07      	ldr	r3, [pc, #28]	@ (8003174 <HAL_TIM_Base_MspInit+0x3c>)
 8003158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM17_MspInit 1 */

  }

}
 8003162:	bf00      	nop
 8003164:	3714      	adds	r7, #20
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	40014800 	.word	0x40014800
 8003174:	40021000 	.word	0x40021000

08003178 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b08e      	sub	sp, #56	@ 0x38
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a7a      	ldr	r2, [pc, #488]	@ (8003380 <HAL_TIM_MspPostInit+0x208>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d11e      	bne.n	80031d8 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319a:	4b7a      	ldr	r3, [pc, #488]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 800319c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800319e:	4a79      	ldr	r2, [pc, #484]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031a6:	4b77      	ldr	r3, [pc, #476]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 80031a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	623b      	str	r3, [r7, #32]
 80031b0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80031b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b8:	2302      	movs	r3, #2
 80031ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031bc:	2300      	movs	r3, #0
 80031be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c0:	2300      	movs	r3, #0
 80031c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80031c4:	2301      	movs	r3, #1
 80031c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031cc:	4619      	mov	r1, r3
 80031ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80031d2:	f000 fb51 	bl	8003878 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM17_MspPostInit 1 */

    /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80031d6:	e0ce      	b.n	8003376 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e0:	d11d      	bne.n	800321e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e2:	4b68      	ldr	r3, [pc, #416]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 80031e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031e6:	4a67      	ldr	r2, [pc, #412]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80031ee:	4b65      	ldr	r3, [pc, #404]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 80031f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	61fb      	str	r3, [r7, #28]
 80031f8:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80031fa:	2301      	movs	r3, #1
 80031fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fe:	2302      	movs	r3, #2
 8003200:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003202:	2300      	movs	r3, #0
 8003204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003206:	2300      	movs	r3, #0
 8003208:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800320a:	2301      	movs	r3, #1
 800320c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800320e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003212:	4619      	mov	r1, r3
 8003214:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003218:	f000 fb2e 	bl	8003878 <HAL_GPIO_Init>
}
 800321c:	e0ab      	b.n	8003376 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM3)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a59      	ldr	r2, [pc, #356]	@ (8003388 <HAL_TIM_MspPostInit+0x210>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d11d      	bne.n	8003264 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003228:	4b56      	ldr	r3, [pc, #344]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 800322a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322c:	4a55      	ldr	r2, [pc, #340]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003234:	4b53      	ldr	r3, [pc, #332]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 8003236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003240:	2340      	movs	r3, #64	@ 0x40
 8003242:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003244:	2302      	movs	r3, #2
 8003246:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324c:	2300      	movs	r3, #0
 800324e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003250:	2302      	movs	r3, #2
 8003252:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003254:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003258:	4619      	mov	r1, r3
 800325a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800325e:	f000 fb0b 	bl	8003878 <HAL_GPIO_Init>
}
 8003262:	e088      	b.n	8003376 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM4)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a48      	ldr	r2, [pc, #288]	@ (800338c <HAL_TIM_MspPostInit+0x214>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d11c      	bne.n	80032a8 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800326e:	4b45      	ldr	r3, [pc, #276]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 8003270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003272:	4a44      	ldr	r2, [pc, #272]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 8003274:	f043 0302 	orr.w	r3, r3, #2
 8003278:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800327a:	4b42      	ldr	r3, [pc, #264]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 800327c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003286:	2340      	movs	r3, #64	@ 0x40
 8003288:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800328a:	2302      	movs	r3, #2
 800328c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328e:	2300      	movs	r3, #0
 8003290:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003292:	2300      	movs	r3, #0
 8003294:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003296:	2302      	movs	r3, #2
 8003298:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800329a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800329e:	4619      	mov	r1, r3
 80032a0:	483b      	ldr	r0, [pc, #236]	@ (8003390 <HAL_TIM_MspPostInit+0x218>)
 80032a2:	f000 fae9 	bl	8003878 <HAL_GPIO_Init>
}
 80032a6:	e066      	b.n	8003376 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM8)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a39      	ldr	r2, [pc, #228]	@ (8003394 <HAL_TIM_MspPostInit+0x21c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d11c      	bne.n	80032ec <HAL_TIM_MspPostInit+0x174>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80032b2:	4b34      	ldr	r3, [pc, #208]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032b6:	4a33      	ldr	r2, [pc, #204]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 80032b8:	f043 0304 	orr.w	r3, r3, #4
 80032bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80032be:	4b31      	ldr	r3, [pc, #196]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 80032c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032c2:	f003 0304 	and.w	r3, r3, #4
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80032ca:	2340      	movs	r3, #64	@ 0x40
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032ce:	2302      	movs	r3, #2
 80032d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d6:	2300      	movs	r3, #0
 80032d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80032da:	2303      	movs	r3, #3
 80032dc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032e2:	4619      	mov	r1, r3
 80032e4:	482c      	ldr	r0, [pc, #176]	@ (8003398 <HAL_TIM_MspPostInit+0x220>)
 80032e6:	f000 fac7 	bl	8003878 <HAL_GPIO_Init>
}
 80032ea:	e044      	b.n	8003376 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM15)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a2a      	ldr	r2, [pc, #168]	@ (800339c <HAL_TIM_MspPostInit+0x224>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d11d      	bne.n	8003332 <HAL_TIM_MspPostInit+0x1ba>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f6:	4b23      	ldr	r3, [pc, #140]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 80032f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fa:	4a22      	ldr	r2, [pc, #136]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003302:	4b20      	ldr	r3, [pc, #128]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 8003304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800330e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003314:	2302      	movs	r3, #2
 8003316:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003318:	2300      	movs	r3, #0
 800331a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800331c:	2300      	movs	r3, #0
 800331e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8003320:	230e      	movs	r3, #14
 8003322:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003324:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003328:	4619      	mov	r1, r3
 800332a:	4819      	ldr	r0, [pc, #100]	@ (8003390 <HAL_TIM_MspPostInit+0x218>)
 800332c:	f000 faa4 	bl	8003878 <HAL_GPIO_Init>
}
 8003330:	e021      	b.n	8003376 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM17)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a1a      	ldr	r2, [pc, #104]	@ (80033a0 <HAL_TIM_MspPostInit+0x228>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d11c      	bne.n	8003376 <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 800333e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003340:	4a10      	ldr	r2, [pc, #64]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003348:	4b0e      	ldr	r3, [pc, #56]	@ (8003384 <HAL_TIM_MspPostInit+0x20c>)
 800334a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003354:	2380      	movs	r3, #128	@ 0x80
 8003356:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003358:	2302      	movs	r3, #2
 800335a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335c:	2300      	movs	r3, #0
 800335e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003360:	2300      	movs	r3, #0
 8003362:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8003364:	230e      	movs	r3, #14
 8003366:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800336c:	4619      	mov	r1, r3
 800336e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003372:	f000 fa81 	bl	8003878 <HAL_GPIO_Init>
}
 8003376:	bf00      	nop
 8003378:	3738      	adds	r7, #56	@ 0x38
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40021000 	.word	0x40021000
 8003388:	40000400 	.word	0x40000400
 800338c:	40000800 	.word	0x40000800
 8003390:	48000400 	.word	0x48000400
 8003394:	40013400 	.word	0x40013400
 8003398:	48000800 	.word	0x48000800
 800339c:	40014000 	.word	0x40014000
 80033a0:	40014800 	.word	0x40014800

080033a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b0ac      	sub	sp, #176	@ 0xb0
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033bc:	f107 0314 	add.w	r3, r7, #20
 80033c0:	2288      	movs	r2, #136	@ 0x88
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f006 fd3f 	bl	8009e48 <memset>
  if(huart->Instance==USART2)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a25      	ldr	r2, [pc, #148]	@ (8003464 <HAL_UART_MspInit+0xc0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d143      	bne.n	800345c <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80033d4:	2302      	movs	r3, #2
 80033d6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80033d8:	2300      	movs	r3, #0
 80033da:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033dc:	f107 0314 	add.w	r3, r7, #20
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 fadf 	bl	80049a4 <HAL_RCCEx_PeriphCLKConfig>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80033ec:	f7ff fdf4 	bl	8002fd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003468 <HAL_UART_MspInit+0xc4>)
 80033f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003468 <HAL_UART_MspInit+0xc4>)
 80033f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80033fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003468 <HAL_UART_MspInit+0xc4>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003400:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003408:	4b17      	ldr	r3, [pc, #92]	@ (8003468 <HAL_UART_MspInit+0xc4>)
 800340a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340c:	4a16      	ldr	r2, [pc, #88]	@ (8003468 <HAL_UART_MspInit+0xc4>)
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003414:	4b14      	ldr	r3, [pc, #80]	@ (8003468 <HAL_UART_MspInit+0xc4>)
 8003416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003420:	230c      	movs	r3, #12
 8003422:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003426:	2302      	movs	r3, #2
 8003428:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003432:	2303      	movs	r3, #3
 8003434:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003438:	2307      	movs	r3, #7
 800343a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8003442:	4619      	mov	r1, r3
 8003444:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003448:	f000 fa16 	bl	8003878 <HAL_GPIO_Init>

    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800344c:	2200      	movs	r2, #0
 800344e:	2100      	movs	r1, #0
 8003450:	2026      	movs	r0, #38	@ 0x26
 8003452:	f000 f9e7 	bl	8003824 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003456:	2026      	movs	r0, #38	@ 0x26
 8003458:	f000 fa00 	bl	800385c <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800345c:	bf00      	nop
 800345e:	37b0      	adds	r7, #176	@ 0xb0
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40004400 	.word	0x40004400
 8003468:	40021000 	.word	0x40021000

0800346c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08e      	sub	sp, #56	@ 0x38
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 800347a:	4b34      	ldr	r3, [pc, #208]	@ (800354c <HAL_InitTick+0xe0>)
 800347c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800347e:	4a33      	ldr	r2, [pc, #204]	@ (800354c <HAL_InitTick+0xe0>)
 8003480:	f043 0308 	orr.w	r3, r3, #8
 8003484:	6593      	str	r3, [r2, #88]	@ 0x58
 8003486:	4b31      	ldr	r3, [pc, #196]	@ (800354c <HAL_InitTick+0xe0>)
 8003488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	60fb      	str	r3, [r7, #12]
 8003490:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003492:	f107 0210 	add.w	r2, r7, #16
 8003496:	f107 0314 	add.w	r3, r7, #20
 800349a:	4611      	mov	r1, r2
 800349c:	4618      	mov	r0, r3
 800349e:	f001 f9ef 	bl	8004880 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80034a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d103      	bne.n	80034b4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80034ac:	f001 f9bc 	bl	8004828 <HAL_RCC_GetPCLK1Freq>
 80034b0:	6378      	str	r0, [r7, #52]	@ 0x34
 80034b2:	e004      	b.n	80034be <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80034b4:	f001 f9b8 	bl	8004828 <HAL_RCC_GetPCLK1Freq>
 80034b8:	4603      	mov	r3, r0
 80034ba:	005b      	lsls	r3, r3, #1
 80034bc:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034c0:	4a23      	ldr	r2, [pc, #140]	@ (8003550 <HAL_InitTick+0xe4>)
 80034c2:	fba2 2303 	umull	r2, r3, r2, r3
 80034c6:	0c9b      	lsrs	r3, r3, #18
 80034c8:	3b01      	subs	r3, #1
 80034ca:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80034cc:	4b21      	ldr	r3, [pc, #132]	@ (8003554 <HAL_InitTick+0xe8>)
 80034ce:	4a22      	ldr	r2, [pc, #136]	@ (8003558 <HAL_InitTick+0xec>)
 80034d0:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80034d2:	4b20      	ldr	r3, [pc, #128]	@ (8003554 <HAL_InitTick+0xe8>)
 80034d4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80034d8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80034da:	4a1e      	ldr	r2, [pc, #120]	@ (8003554 <HAL_InitTick+0xe8>)
 80034dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034de:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80034e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003554 <HAL_InitTick+0xe8>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003554 <HAL_InitTick+0xe8>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ec:	4b19      	ldr	r3, [pc, #100]	@ (8003554 <HAL_InitTick+0xe8>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80034f2:	4818      	ldr	r0, [pc, #96]	@ (8003554 <HAL_InitTick+0xe8>)
 80034f4:	f001 ff12 	bl	800531c <HAL_TIM_Base_Init>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80034fe:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003502:	2b00      	cmp	r3, #0
 8003504:	d11b      	bne.n	800353e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8003506:	4813      	ldr	r0, [pc, #76]	@ (8003554 <HAL_InitTick+0xe8>)
 8003508:	f001 ff60 	bl	80053cc <HAL_TIM_Base_Start_IT>
 800350c:	4603      	mov	r3, r0
 800350e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003512:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003516:	2b00      	cmp	r3, #0
 8003518:	d111      	bne.n	800353e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800351a:	2032      	movs	r0, #50	@ 0x32
 800351c:	f000 f99e 	bl	800385c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b0f      	cmp	r3, #15
 8003524:	d808      	bhi.n	8003538 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8003526:	2200      	movs	r2, #0
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	2032      	movs	r0, #50	@ 0x32
 800352c:	f000 f97a 	bl	8003824 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003530:	4a0a      	ldr	r2, [pc, #40]	@ (800355c <HAL_InitTick+0xf0>)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	e002      	b.n	800353e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800353e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003542:	4618      	mov	r0, r3
 8003544:	3738      	adds	r7, #56	@ 0x38
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	40021000 	.word	0x40021000
 8003550:	431bde83 	.word	0x431bde83
 8003554:	200003a0 	.word	0x200003a0
 8003558:	40000c00 	.word	0x40000c00
 800355c:	20000058 	.word	0x20000058

08003560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <NMI_Handler+0x4>

08003568 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <HardFault_Handler+0x4>

08003570 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <MemManage_Handler+0x4>

08003578 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <BusFault_Handler+0x4>

08003580 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <UsageFault_Handler+0x4>

08003588 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800358c:	bf00      	nop
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800359a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800359e:	f000 fb47 	bl	8003c30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035ac:	4802      	ldr	r0, [pc, #8]	@ (80035b8 <TIM5_IRQHandler+0x10>)
 80035ae:	f002 f86b 	bl	8005688 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	200003a0 	.word	0x200003a0

080035bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80035c0:	4b06      	ldr	r3, [pc, #24]	@ (80035dc <SystemInit+0x20>)
 80035c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c6:	4a05      	ldr	r2, [pc, #20]	@ (80035dc <SystemInit+0x20>)
 80035c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	e000ed00 	.word	0xe000ed00

080035e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80035e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003618 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80035e4:	f7ff ffea 	bl	80035bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035e8:	480c      	ldr	r0, [pc, #48]	@ (800361c <LoopForever+0x6>)
  ldr r1, =_edata
 80035ea:	490d      	ldr	r1, [pc, #52]	@ (8003620 <LoopForever+0xa>)
  ldr r2, =_sidata
 80035ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003624 <LoopForever+0xe>)
  movs r3, #0
 80035ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035f0:	e002      	b.n	80035f8 <LoopCopyDataInit>

080035f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035f6:	3304      	adds	r3, #4

080035f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035fc:	d3f9      	bcc.n	80035f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003628 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003600:	4c0a      	ldr	r4, [pc, #40]	@ (800362c <LoopForever+0x16>)
  movs r3, #0
 8003602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003604:	e001      	b.n	800360a <LoopFillZerobss>

08003606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003608:	3204      	adds	r2, #4

0800360a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800360a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800360c:	d3fb      	bcc.n	8003606 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800360e:	f006 fc23 	bl	8009e58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003612:	f7fd fa81 	bl	8000b18 <main>

08003616 <LoopForever>:

LoopForever:
    b LoopForever
 8003616:	e7fe      	b.n	8003616 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003618:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800361c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003620:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8003624:	0800a0bc 	.word	0x0800a0bc
  ldr r2, =_sbss
 8003628:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800362c:	20001cf8 	.word	0x20001cf8

08003630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003630:	e7fe      	b.n	8003630 <ADC1_2_IRQHandler>
	...

08003634 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800363e:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <HAL_Init+0x3c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a0b      	ldr	r2, [pc, #44]	@ (8003670 <HAL_Init+0x3c>)
 8003644:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003648:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800364a:	2003      	movs	r0, #3
 800364c:	f000 f8df 	bl	800380e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003650:	200f      	movs	r0, #15
 8003652:	f7ff ff0b 	bl	800346c <HAL_InitTick>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d002      	beq.n	8003662 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	71fb      	strb	r3, [r7, #7]
 8003660:	e001      	b.n	8003666 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003662:	f7ff fcbf 	bl	8002fe4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003666:	79fb      	ldrb	r3, [r7, #7]
}
 8003668:	4618      	mov	r0, r3
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40022000 	.word	0x40022000

08003674 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003678:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <HAL_IncTick+0x20>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	461a      	mov	r2, r3
 800367e:	4b06      	ldr	r3, [pc, #24]	@ (8003698 <HAL_IncTick+0x24>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4413      	add	r3, r2
 8003684:	4a04      	ldr	r2, [pc, #16]	@ (8003698 <HAL_IncTick+0x24>)
 8003686:	6013      	str	r3, [r2, #0]
}
 8003688:	bf00      	nop
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	2000005c 	.word	0x2000005c
 8003698:	200003ec 	.word	0x200003ec

0800369c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  return uwTick;
 80036a0:	4b03      	ldr	r3, [pc, #12]	@ (80036b0 <HAL_GetTick+0x14>)
 80036a2:	681b      	ldr	r3, [r3, #0]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	200003ec 	.word	0x200003ec

080036b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f003 0307 	and.w	r3, r3, #7
 80036c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c4:	4b0c      	ldr	r3, [pc, #48]	@ (80036f8 <__NVIC_SetPriorityGrouping+0x44>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036ca:	68ba      	ldr	r2, [r7, #8]
 80036cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036d0:	4013      	ands	r3, r2
 80036d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036e6:	4a04      	ldr	r2, [pc, #16]	@ (80036f8 <__NVIC_SetPriorityGrouping+0x44>)
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	60d3      	str	r3, [r2, #12]
}
 80036ec:	bf00      	nop
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003700:	4b04      	ldr	r3, [pc, #16]	@ (8003714 <__NVIC_GetPriorityGrouping+0x18>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	f003 0307 	and.w	r3, r3, #7
}
 800370a:	4618      	mov	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	4603      	mov	r3, r0
 8003720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	2b00      	cmp	r3, #0
 8003728:	db0b      	blt.n	8003742 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	f003 021f 	and.w	r2, r3, #31
 8003730:	4907      	ldr	r1, [pc, #28]	@ (8003750 <__NVIC_EnableIRQ+0x38>)
 8003732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	2001      	movs	r0, #1
 800373a:	fa00 f202 	lsl.w	r2, r0, r2
 800373e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop
 8003750:	e000e100 	.word	0xe000e100

08003754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	6039      	str	r1, [r7, #0]
 800375e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003764:	2b00      	cmp	r3, #0
 8003766:	db0a      	blt.n	800377e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	b2da      	uxtb	r2, r3
 800376c:	490c      	ldr	r1, [pc, #48]	@ (80037a0 <__NVIC_SetPriority+0x4c>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	0112      	lsls	r2, r2, #4
 8003774:	b2d2      	uxtb	r2, r2
 8003776:	440b      	add	r3, r1
 8003778:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800377c:	e00a      	b.n	8003794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	4908      	ldr	r1, [pc, #32]	@ (80037a4 <__NVIC_SetPriority+0x50>)
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	f003 030f 	and.w	r3, r3, #15
 800378a:	3b04      	subs	r3, #4
 800378c:	0112      	lsls	r2, r2, #4
 800378e:	b2d2      	uxtb	r2, r2
 8003790:	440b      	add	r3, r1
 8003792:	761a      	strb	r2, [r3, #24]
}
 8003794:	bf00      	nop
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000e100 	.word	0xe000e100
 80037a4:	e000ed00 	.word	0xe000ed00

080037a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b089      	sub	sp, #36	@ 0x24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	f1c3 0307 	rsb	r3, r3, #7
 80037c2:	2b04      	cmp	r3, #4
 80037c4:	bf28      	it	cs
 80037c6:	2304      	movcs	r3, #4
 80037c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	3304      	adds	r3, #4
 80037ce:	2b06      	cmp	r3, #6
 80037d0:	d902      	bls.n	80037d8 <NVIC_EncodePriority+0x30>
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	3b03      	subs	r3, #3
 80037d6:	e000      	b.n	80037da <NVIC_EncodePriority+0x32>
 80037d8:	2300      	movs	r3, #0
 80037da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	f04f 32ff 	mov.w	r2, #4294967295
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43da      	mvns	r2, r3
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	401a      	ands	r2, r3
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037f0:	f04f 31ff 	mov.w	r1, #4294967295
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	fa01 f303 	lsl.w	r3, r1, r3
 80037fa:	43d9      	mvns	r1, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	4313      	orrs	r3, r2
         );
}
 8003802:	4618      	mov	r0, r3
 8003804:	3724      	adds	r7, #36	@ 0x24
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800380e:	b580      	push	{r7, lr}
 8003810:	b082      	sub	sp, #8
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ff4c 	bl	80036b4 <__NVIC_SetPriorityGrouping>
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
 8003830:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003832:	2300      	movs	r3, #0
 8003834:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003836:	f7ff ff61 	bl	80036fc <__NVIC_GetPriorityGrouping>
 800383a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	6978      	ldr	r0, [r7, #20]
 8003842:	f7ff ffb1 	bl	80037a8 <NVIC_EncodePriority>
 8003846:	4602      	mov	r2, r0
 8003848:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f7ff ff80 	bl	8003754 <__NVIC_SetPriority>
}
 8003854:	bf00      	nop
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff ff54 	bl	8003718 <__NVIC_EnableIRQ>
}
 8003870:	bf00      	nop
 8003872:	3708      	adds	r7, #8
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003878:	b480      	push	{r7}
 800387a:	b087      	sub	sp, #28
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003882:	2300      	movs	r3, #0
 8003884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003886:	e17f      	b.n	8003b88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	fa01 f303 	lsl.w	r3, r1, r3
 8003894:	4013      	ands	r3, r2
 8003896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 8171 	beq.w	8003b82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0303 	and.w	r3, r3, #3
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d005      	beq.n	80038b8 <HAL_GPIO_Init+0x40>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d130      	bne.n	800391a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	2203      	movs	r2, #3
 80038c4:	fa02 f303 	lsl.w	r3, r2, r3
 80038c8:	43db      	mvns	r3, r3
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4013      	ands	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68da      	ldr	r2, [r3, #12]
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	693a      	ldr	r2, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038ee:	2201      	movs	r2, #1
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	fa02 f303 	lsl.w	r3, r2, r3
 80038f6:	43db      	mvns	r3, r3
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4013      	ands	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	f003 0201 	and.w	r2, r3, #1
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	fa02 f303 	lsl.w	r3, r2, r3
 800390e:	693a      	ldr	r2, [r7, #16]
 8003910:	4313      	orrs	r3, r2
 8003912:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	2b03      	cmp	r3, #3
 8003924:	d118      	bne.n	8003958 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800392c:	2201      	movs	r2, #1
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	43db      	mvns	r3, r3
 8003936:	693a      	ldr	r2, [r7, #16]
 8003938:	4013      	ands	r3, r2
 800393a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	08db      	lsrs	r3, r3, #3
 8003942:	f003 0201 	and.w	r2, r3, #1
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	fa02 f303 	lsl.w	r3, r2, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b03      	cmp	r3, #3
 8003962:	d017      	beq.n	8003994 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	005b      	lsls	r3, r3, #1
 800396e:	2203      	movs	r2, #3
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43db      	mvns	r3, r3
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4013      	ands	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	2b02      	cmp	r3, #2
 800399e:	d123      	bne.n	80039e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	08da      	lsrs	r2, r3, #3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	3208      	adds	r2, #8
 80039a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	220f      	movs	r2, #15
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	43db      	mvns	r3, r3
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	4013      	ands	r3, r2
 80039c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	691a      	ldr	r2, [r3, #16]
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	08da      	lsrs	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	3208      	adds	r2, #8
 80039e2:	6939      	ldr	r1, [r7, #16]
 80039e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	2203      	movs	r2, #3
 80039f4:	fa02 f303 	lsl.w	r3, r2, r3
 80039f8:	43db      	mvns	r3, r3
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	4013      	ands	r3, r2
 80039fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f003 0203 	and.w	r2, r3, #3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80ac 	beq.w	8003b82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a2a:	4b5f      	ldr	r3, [pc, #380]	@ (8003ba8 <HAL_GPIO_Init+0x330>)
 8003a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ba8 <HAL_GPIO_Init+0x330>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a36:	4b5c      	ldr	r3, [pc, #368]	@ (8003ba8 <HAL_GPIO_Init+0x330>)
 8003a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a42:	4a5a      	ldr	r2, [pc, #360]	@ (8003bac <HAL_GPIO_Init+0x334>)
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	3302      	adds	r3, #2
 8003a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	220f      	movs	r2, #15
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	693a      	ldr	r2, [r7, #16]
 8003a62:	4013      	ands	r3, r2
 8003a64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a6c:	d025      	beq.n	8003aba <HAL_GPIO_Init+0x242>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a4f      	ldr	r2, [pc, #316]	@ (8003bb0 <HAL_GPIO_Init+0x338>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d01f      	beq.n	8003ab6 <HAL_GPIO_Init+0x23e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a4e      	ldr	r2, [pc, #312]	@ (8003bb4 <HAL_GPIO_Init+0x33c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d019      	beq.n	8003ab2 <HAL_GPIO_Init+0x23a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a4d      	ldr	r2, [pc, #308]	@ (8003bb8 <HAL_GPIO_Init+0x340>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_GPIO_Init+0x236>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a4c      	ldr	r2, [pc, #304]	@ (8003bbc <HAL_GPIO_Init+0x344>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00d      	beq.n	8003aaa <HAL_GPIO_Init+0x232>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a4b      	ldr	r2, [pc, #300]	@ (8003bc0 <HAL_GPIO_Init+0x348>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <HAL_GPIO_Init+0x22e>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a4a      	ldr	r2, [pc, #296]	@ (8003bc4 <HAL_GPIO_Init+0x34c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_GPIO_Init+0x22a>
 8003a9e:	2306      	movs	r3, #6
 8003aa0:	e00c      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003aa2:	2307      	movs	r3, #7
 8003aa4:	e00a      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003aa6:	2305      	movs	r3, #5
 8003aa8:	e008      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003aaa:	2304      	movs	r3, #4
 8003aac:	e006      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e004      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e002      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_GPIO_Init+0x244>
 8003aba:	2300      	movs	r3, #0
 8003abc:	697a      	ldr	r2, [r7, #20]
 8003abe:	f002 0203 	and.w	r2, r2, #3
 8003ac2:	0092      	lsls	r2, r2, #2
 8003ac4:	4093      	lsls	r3, r2
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003acc:	4937      	ldr	r1, [pc, #220]	@ (8003bac <HAL_GPIO_Init+0x334>)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	089b      	lsrs	r3, r3, #2
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	693a      	ldr	r2, [r7, #16]
 8003ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ada:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003afe:	4a32      	ldr	r2, [pc, #200]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b04:	4b30      	ldr	r3, [pc, #192]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	693a      	ldr	r2, [r7, #16]
 8003b10:	4013      	ands	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b28:	4a27      	ldr	r2, [pc, #156]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b2e:	4b26      	ldr	r3, [pc, #152]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003b4a:	693a      	ldr	r2, [r7, #16]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b52:	4a1d      	ldr	r2, [pc, #116]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b54:	693b      	ldr	r3, [r7, #16]
 8003b56:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b58:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4013      	ands	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b7c:	4a12      	ldr	r2, [pc, #72]	@ (8003bc8 <HAL_GPIO_Init+0x350>)
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	3301      	adds	r3, #1
 8003b86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f47f ae78 	bne.w	8003888 <HAL_GPIO_Init+0x10>
  }
}
 8003b98:	bf00      	nop
 8003b9a:	bf00      	nop
 8003b9c:	371c      	adds	r7, #28
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	40010000 	.word	0x40010000
 8003bb0:	48000400 	.word	0x48000400
 8003bb4:	48000800 	.word	0x48000800
 8003bb8:	48000c00 	.word	0x48000c00
 8003bbc:	48001000 	.word	0x48001000
 8003bc0:	48001400 	.word	0x48001400
 8003bc4:	48001800 	.word	0x48001800
 8003bc8:	40010400 	.word	0x40010400

08003bcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	807b      	strh	r3, [r7, #2]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bdc:	787b      	ldrb	r3, [r7, #1]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003be8:	e002      	b.n	8003bf0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	695b      	ldr	r3, [r3, #20]
 8003c0c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003c0e:	887a      	ldrh	r2, [r7, #2]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4013      	ands	r3, r2
 8003c14:	041a      	lsls	r2, r3, #16
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	43d9      	mvns	r1, r3
 8003c1a:	887b      	ldrh	r3, [r7, #2]
 8003c1c:	400b      	ands	r3, r1
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	619a      	str	r2, [r3, #24]
}
 8003c24:	bf00      	nop
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b082      	sub	sp, #8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	4603      	mov	r3, r0
 8003c38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003c3a:	4b08      	ldr	r3, [pc, #32]	@ (8003c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	88fb      	ldrh	r3, [r7, #6]
 8003c40:	4013      	ands	r3, r2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d006      	beq.n	8003c54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003c46:	4a05      	ldr	r2, [pc, #20]	@ (8003c5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c48:	88fb      	ldrh	r3, [r7, #6]
 8003c4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c4c:	88fb      	ldrh	r3, [r7, #6]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 f806 	bl	8003c60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c54:	bf00      	nop
 8003c56:	3708      	adds	r7, #8
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	40010400 	.word	0x40010400

08003c60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	4603      	mov	r3, r0
 8003c68:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c7c:	4b04      	ldr	r3, [pc, #16]	@ (8003c90 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40007000 	.word	0x40007000

08003c94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ca2:	d130      	bne.n	8003d06 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ca4:	4b23      	ldr	r3, [pc, #140]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb0:	d038      	beq.n	8003d24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cb2:	4b20      	ldr	r3, [pc, #128]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cba:	4a1e      	ldr	r2, [pc, #120]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003cc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003d38 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2232      	movs	r2, #50	@ 0x32
 8003cc8:	fb02 f303 	mul.w	r3, r2, r3
 8003ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8003d3c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cce:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd2:	0c9b      	lsrs	r3, r3, #18
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cd8:	e002      	b.n	8003ce0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ce0:	4b14      	ldr	r3, [pc, #80]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cec:	d102      	bne.n	8003cf4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f2      	bne.n	8003cda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d00:	d110      	bne.n	8003d24 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e00f      	b.n	8003d26 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d06:	4b0b      	ldr	r3, [pc, #44]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003d0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d12:	d007      	beq.n	8003d24 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d14:	4b07      	ldr	r3, [pc, #28]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d1c:	4a05      	ldr	r2, [pc, #20]	@ (8003d34 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d22:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	40007000 	.word	0x40007000
 8003d38:	20000054 	.word	0x20000054
 8003d3c:	431bde83 	.word	0x431bde83

08003d40 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e3ca      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d52:	4b97      	ldr	r3, [pc, #604]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 030c 	and.w	r3, r3, #12
 8003d5a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d5c:	4b94      	ldr	r3, [pc, #592]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0310 	and.w	r3, r3, #16
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 80e4 	beq.w	8003f3c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d007      	beq.n	8003d8a <HAL_RCC_OscConfig+0x4a>
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	2b0c      	cmp	r3, #12
 8003d7e:	f040 808b 	bne.w	8003e98 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	f040 8087 	bne.w	8003e98 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d8a:	4b89      	ldr	r3, [pc, #548]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_RCC_OscConfig+0x62>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e3a2      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1a      	ldr	r2, [r3, #32]
 8003da6:	4b82      	ldr	r3, [pc, #520]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d004      	beq.n	8003dbc <HAL_RCC_OscConfig+0x7c>
 8003db2:	4b7f      	ldr	r3, [pc, #508]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dba:	e005      	b.n	8003dc8 <HAL_RCC_OscConfig+0x88>
 8003dbc:	4b7c      	ldr	r3, [pc, #496]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc2:	091b      	lsrs	r3, r3, #4
 8003dc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d223      	bcs.n	8003e14 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a1b      	ldr	r3, [r3, #32]
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fd87 	bl	80048e4 <RCC_SetFlashLatencyFromMSIRange>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e383      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003de0:	4b73      	ldr	r3, [pc, #460]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a72      	ldr	r2, [pc, #456]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003de6:	f043 0308 	orr.w	r3, r3, #8
 8003dea:	6013      	str	r3, [r2, #0]
 8003dec:	4b70      	ldr	r3, [pc, #448]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	496d      	ldr	r1, [pc, #436]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	4968      	ldr	r1, [pc, #416]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	604b      	str	r3, [r1, #4]
 8003e12:	e025      	b.n	8003e60 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e14:	4b66      	ldr	r3, [pc, #408]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a65      	ldr	r2, [pc, #404]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e1a:	f043 0308 	orr.w	r3, r3, #8
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4b63      	ldr	r3, [pc, #396]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4960      	ldr	r1, [pc, #384]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e32:	4b5f      	ldr	r3, [pc, #380]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	495b      	ldr	r1, [pc, #364]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d109      	bne.n	8003e60 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fd47 	bl	80048e4 <RCC_SetFlashLatencyFromMSIRange>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d001      	beq.n	8003e60 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e343      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e60:	f000 fc4a 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8003e64:	4602      	mov	r2, r0
 8003e66:	4b52      	ldr	r3, [pc, #328]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	4950      	ldr	r1, [pc, #320]	@ (8003fb4 <HAL_RCC_OscConfig+0x274>)
 8003e72:	5ccb      	ldrb	r3, [r1, r3]
 8003e74:	f003 031f 	and.w	r3, r3, #31
 8003e78:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7c:	4a4e      	ldr	r2, [pc, #312]	@ (8003fb8 <HAL_RCC_OscConfig+0x278>)
 8003e7e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e80:	4b4e      	ldr	r3, [pc, #312]	@ (8003fbc <HAL_RCC_OscConfig+0x27c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff faf1 	bl	800346c <HAL_InitTick>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d052      	beq.n	8003f3a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	e327      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d032      	beq.n	8003f06 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ea0:	4b43      	ldr	r3, [pc, #268]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a42      	ldr	r2, [pc, #264]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ea6:	f043 0301 	orr.w	r3, r3, #1
 8003eaa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003eac:	f7ff fbf6 	bl	800369c <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003eb4:	f7ff fbf2 	bl	800369c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b02      	cmp	r3, #2
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e310      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f003 0302 	and.w	r3, r3, #2
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed2:	4b37      	ldr	r3, [pc, #220]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a36      	ldr	r2, [pc, #216]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	f043 0308 	orr.w	r3, r3, #8
 8003edc:	6013      	str	r3, [r2, #0]
 8003ede:	4b34      	ldr	r3, [pc, #208]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	4931      	ldr	r1, [pc, #196]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef0:	4b2f      	ldr	r3, [pc, #188]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	69db      	ldr	r3, [r3, #28]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	492c      	ldr	r1, [pc, #176]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
 8003f04:	e01a      	b.n	8003f3c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f06:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a29      	ldr	r2, [pc, #164]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f0c:	f023 0301 	bic.w	r3, r3, #1
 8003f10:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f12:	f7ff fbc3 	bl	800369c <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f1a:	f7ff fbbf 	bl	800369c <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e2dd      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f2c:	4b20      	ldr	r3, [pc, #128]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x1da>
 8003f38:	e000      	b.n	8003f3c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f3a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d074      	beq.n	8004032 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	d005      	beq.n	8003f5a <HAL_RCC_OscConfig+0x21a>
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d10e      	bne.n	8003f72 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d10b      	bne.n	8003f72 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f5a:	4b15      	ldr	r3, [pc, #84]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d064      	beq.n	8004030 <HAL_RCC_OscConfig+0x2f0>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d160      	bne.n	8004030 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e2ba      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f7a:	d106      	bne.n	8003f8a <HAL_RCC_OscConfig+0x24a>
 8003f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0b      	ldr	r2, [pc, #44]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	e026      	b.n	8003fd8 <HAL_RCC_OscConfig+0x298>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003f92:	d115      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x280>
 8003f94:	4b06      	ldr	r3, [pc, #24]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a05      	ldr	r2, [pc, #20]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003f9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003f9e:	6013      	str	r3, [r2, #0]
 8003fa0:	4b03      	ldr	r3, [pc, #12]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a02      	ldr	r2, [pc, #8]	@ (8003fb0 <HAL_RCC_OscConfig+0x270>)
 8003fa6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	e014      	b.n	8003fd8 <HAL_RCC_OscConfig+0x298>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	0800a064 	.word	0x0800a064
 8003fb8:	20000054 	.word	0x20000054
 8003fbc:	20000058 	.word	0x20000058
 8003fc0:	4ba0      	ldr	r3, [pc, #640]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a9f      	ldr	r2, [pc, #636]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8003fc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	4b9d      	ldr	r3, [pc, #628]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a9c      	ldr	r2, [pc, #624]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8003fd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d013      	beq.n	8004008 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7ff fb5c 	bl	800369c <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fe8:	f7ff fb58 	bl	800369c <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	@ 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e276      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ffa:	4b92      	ldr	r3, [pc, #584]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d0f0      	beq.n	8003fe8 <HAL_RCC_OscConfig+0x2a8>
 8004006:	e014      	b.n	8004032 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7ff fb48 	bl	800369c <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004010:	f7ff fb44 	bl	800369c <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b64      	cmp	r3, #100	@ 0x64
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e262      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004022:	4b88      	ldr	r3, [pc, #544]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x2d0>
 800402e:	e000      	b.n	8004032 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0302 	and.w	r3, r3, #2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d060      	beq.n	8004100 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b04      	cmp	r3, #4
 8004042:	d005      	beq.n	8004050 <HAL_RCC_OscConfig+0x310>
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	2b0c      	cmp	r3, #12
 8004048:	d119      	bne.n	800407e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d116      	bne.n	800407e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004050:	4b7c      	ldr	r3, [pc, #496]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004058:	2b00      	cmp	r3, #0
 800405a:	d005      	beq.n	8004068 <HAL_RCC_OscConfig+0x328>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d101      	bne.n	8004068 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e23f      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004068:	4b76      	ldr	r3, [pc, #472]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	061b      	lsls	r3, r3, #24
 8004076:	4973      	ldr	r1, [pc, #460]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004078:	4313      	orrs	r3, r2
 800407a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800407c:	e040      	b.n	8004100 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d023      	beq.n	80040ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004086:	4b6f      	ldr	r3, [pc, #444]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a6e      	ldr	r2, [pc, #440]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 800408c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7ff fb03 	bl	800369c <HAL_GetTick>
 8004096:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004098:	e008      	b.n	80040ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800409a:	f7ff faff 	bl	800369c <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e21d      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040ac:	4b65      	ldr	r3, [pc, #404]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0f0      	beq.n	800409a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b8:	4b62      	ldr	r3, [pc, #392]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	061b      	lsls	r3, r3, #24
 80040c6:	495f      	ldr	r1, [pc, #380]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
 80040cc:	e018      	b.n	8004100 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ce:	4b5d      	ldr	r3, [pc, #372]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80040d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040da:	f7ff fadf 	bl	800369c <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040e0:	e008      	b.n	80040f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040e2:	f7ff fadb 	bl	800369c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	d901      	bls.n	80040f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e1f9      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040f4:	4b53      	ldr	r3, [pc, #332]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f0      	bne.n	80040e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0308 	and.w	r3, r3, #8
 8004108:	2b00      	cmp	r3, #0
 800410a:	d03c      	beq.n	8004186 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d01c      	beq.n	800414e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004114:	4b4b      	ldr	r3, [pc, #300]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004116:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800411a:	4a4a      	ldr	r2, [pc, #296]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 800411c:	f043 0301 	orr.w	r3, r3, #1
 8004120:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004124:	f7ff faba 	bl	800369c <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412c:	f7ff fab6 	bl	800369c <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e1d4      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800413e:	4b41      	ldr	r3, [pc, #260]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004140:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b00      	cmp	r3, #0
 800414a:	d0ef      	beq.n	800412c <HAL_RCC_OscConfig+0x3ec>
 800414c:	e01b      	b.n	8004186 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800414e:	4b3d      	ldr	r3, [pc, #244]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004150:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004154:	4a3b      	ldr	r2, [pc, #236]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004156:	f023 0301 	bic.w	r3, r3, #1
 800415a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800415e:	f7ff fa9d 	bl	800369c <HAL_GetTick>
 8004162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004164:	e008      	b.n	8004178 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004166:	f7ff fa99 	bl	800369c <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b02      	cmp	r3, #2
 8004172:	d901      	bls.n	8004178 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e1b7      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004178:	4b32      	ldr	r3, [pc, #200]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 800417a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1ef      	bne.n	8004166 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 80a6 	beq.w	80042e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004194:	2300      	movs	r3, #0
 8004196:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004198:	4b2a      	ldr	r3, [pc, #168]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800419c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10d      	bne.n	80041c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041a4:	4b27      	ldr	r3, [pc, #156]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80041a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a8:	4a26      	ldr	r2, [pc, #152]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80041aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80041b0:	4b24      	ldr	r3, [pc, #144]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 80041b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	60bb      	str	r3, [r7, #8]
 80041ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041bc:	2301      	movs	r3, #1
 80041be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c0:	4b21      	ldr	r3, [pc, #132]	@ (8004248 <HAL_RCC_OscConfig+0x508>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d118      	bne.n	80041fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041cc:	4b1e      	ldr	r3, [pc, #120]	@ (8004248 <HAL_RCC_OscConfig+0x508>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004248 <HAL_RCC_OscConfig+0x508>)
 80041d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041d8:	f7ff fa60 	bl	800369c <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041e0:	f7ff fa5c 	bl	800369c <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e17a      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f2:	4b15      	ldr	r3, [pc, #84]	@ (8004248 <HAL_RCC_OscConfig+0x508>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d0f0      	beq.n	80041e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d108      	bne.n	8004218 <HAL_RCC_OscConfig+0x4d8>
 8004206:	4b0f      	ldr	r3, [pc, #60]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004208:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800420c:	4a0d      	ldr	r2, [pc, #52]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 800420e:	f043 0301 	orr.w	r3, r3, #1
 8004212:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004216:	e029      	b.n	800426c <HAL_RCC_OscConfig+0x52c>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	2b05      	cmp	r3, #5
 800421e:	d115      	bne.n	800424c <HAL_RCC_OscConfig+0x50c>
 8004220:	4b08      	ldr	r3, [pc, #32]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004226:	4a07      	ldr	r2, [pc, #28]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004228:	f043 0304 	orr.w	r3, r3, #4
 800422c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004230:	4b04      	ldr	r3, [pc, #16]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004236:	4a03      	ldr	r2, [pc, #12]	@ (8004244 <HAL_RCC_OscConfig+0x504>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004240:	e014      	b.n	800426c <HAL_RCC_OscConfig+0x52c>
 8004242:	bf00      	nop
 8004244:	40021000 	.word	0x40021000
 8004248:	40007000 	.word	0x40007000
 800424c:	4b9c      	ldr	r3, [pc, #624]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800424e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004252:	4a9b      	ldr	r2, [pc, #620]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004254:	f023 0301 	bic.w	r3, r3, #1
 8004258:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800425c:	4b98      	ldr	r3, [pc, #608]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800425e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004262:	4a97      	ldr	r2, [pc, #604]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004264:	f023 0304 	bic.w	r3, r3, #4
 8004268:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d016      	beq.n	80042a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7ff fa12 	bl	800369c <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800427a:	e00a      	b.n	8004292 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7ff fa0e 	bl	800369c <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	@ 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e12a      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004292:	4b8b      	ldr	r3, [pc, #556]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004294:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004298:	f003 0302 	and.w	r3, r3, #2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0ed      	beq.n	800427c <HAL_RCC_OscConfig+0x53c>
 80042a0:	e015      	b.n	80042ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a2:	f7ff f9fb 	bl	800369c <HAL_GetTick>
 80042a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a8:	e00a      	b.n	80042c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042aa:	f7ff f9f7 	bl	800369c <HAL_GetTick>
 80042ae:	4602      	mov	r2, r0
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	1ad3      	subs	r3, r2, r3
 80042b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d901      	bls.n	80042c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e113      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042c0:	4b7f      	ldr	r3, [pc, #508]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80042c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1ed      	bne.n	80042aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ce:	7ffb      	ldrb	r3, [r7, #31]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d105      	bne.n	80042e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d4:	4b7a      	ldr	r3, [pc, #488]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80042d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d8:	4a79      	ldr	r2, [pc, #484]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80042da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042de:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80fe 	beq.w	80044e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	f040 80d0 	bne.w	8004494 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042f4:	4b72      	ldr	r3, [pc, #456]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	f003 0203 	and.w	r2, r3, #3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004304:	429a      	cmp	r2, r3
 8004306:	d130      	bne.n	800436a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004312:	3b01      	subs	r3, #1
 8004314:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d127      	bne.n	800436a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004324:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004326:	429a      	cmp	r2, r3
 8004328:	d11f      	bne.n	800436a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004334:	2a07      	cmp	r2, #7
 8004336:	bf14      	ite	ne
 8004338:	2201      	movne	r2, #1
 800433a:	2200      	moveq	r2, #0
 800433c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800433e:	4293      	cmp	r3, r2
 8004340:	d113      	bne.n	800436a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434c:	085b      	lsrs	r3, r3, #1
 800434e:	3b01      	subs	r3, #1
 8004350:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004352:	429a      	cmp	r2, r3
 8004354:	d109      	bne.n	800436a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004360:	085b      	lsrs	r3, r3, #1
 8004362:	3b01      	subs	r3, #1
 8004364:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004366:	429a      	cmp	r2, r3
 8004368:	d06e      	beq.n	8004448 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b0c      	cmp	r3, #12
 800436e:	d069      	beq.n	8004444 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004370:	4b53      	ldr	r3, [pc, #332]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800437c:	4b50      	ldr	r3, [pc, #320]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d001      	beq.n	800438c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0ad      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800438c:	4b4c      	ldr	r3, [pc, #304]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a4b      	ldr	r2, [pc, #300]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004392:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004396:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004398:	f7ff f980 	bl	800369c <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a0:	f7ff f97c 	bl	800369c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e09a      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043b2:	4b43      	ldr	r3, [pc, #268]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f0      	bne.n	80043a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043be:	4b40      	ldr	r3, [pc, #256]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	4b40      	ldr	r3, [pc, #256]	@ (80044c4 <HAL_RCC_OscConfig+0x784>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80043ce:	3a01      	subs	r2, #1
 80043d0:	0112      	lsls	r2, r2, #4
 80043d2:	4311      	orrs	r1, r2
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80043d8:	0212      	lsls	r2, r2, #8
 80043da:	4311      	orrs	r1, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80043e0:	0852      	lsrs	r2, r2, #1
 80043e2:	3a01      	subs	r2, #1
 80043e4:	0552      	lsls	r2, r2, #21
 80043e6:	4311      	orrs	r1, r2
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80043ec:	0852      	lsrs	r2, r2, #1
 80043ee:	3a01      	subs	r2, #1
 80043f0:	0652      	lsls	r2, r2, #25
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80043f8:	0912      	lsrs	r2, r2, #4
 80043fa:	0452      	lsls	r2, r2, #17
 80043fc:	430a      	orrs	r2, r1
 80043fe:	4930      	ldr	r1, [pc, #192]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004400:	4313      	orrs	r3, r2
 8004402:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004404:	4b2e      	ldr	r3, [pc, #184]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a2d      	ldr	r2, [pc, #180]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800440a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800440e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004410:	4b2b      	ldr	r3, [pc, #172]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004412:	68db      	ldr	r3, [r3, #12]
 8004414:	4a2a      	ldr	r2, [pc, #168]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004416:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800441a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800441c:	f7ff f93e 	bl	800369c <HAL_GetTick>
 8004420:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004422:	e008      	b.n	8004436 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004424:	f7ff f93a 	bl	800369c <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	2b02      	cmp	r3, #2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e058      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004436:	4b22      	ldr	r3, [pc, #136]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d0f0      	beq.n	8004424 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004442:	e050      	b.n	80044e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e04f      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004448:	4b1d      	ldr	r3, [pc, #116]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d148      	bne.n	80044e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004454:	4b1a      	ldr	r3, [pc, #104]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a19      	ldr	r2, [pc, #100]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800445a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800445e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004460:	4b17      	ldr	r3, [pc, #92]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	4a16      	ldr	r2, [pc, #88]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004466:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800446a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800446c:	f7ff f916 	bl	800369c <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004474:	f7ff f912 	bl	800369c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e030      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004486:	4b0e      	ldr	r3, [pc, #56]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x734>
 8004492:	e028      	b.n	80044e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b0c      	cmp	r3, #12
 8004498:	d023      	beq.n	80044e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800449a:	4b09      	ldr	r3, [pc, #36]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a08      	ldr	r2, [pc, #32]	@ (80044c0 <HAL_RCC_OscConfig+0x780>)
 80044a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80044a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a6:	f7ff f8f9 	bl	800369c <HAL_GetTick>
 80044aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ac:	e00c      	b.n	80044c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044ae:	f7ff f8f5 	bl	800369c <HAL_GetTick>
 80044b2:	4602      	mov	r2, r0
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d905      	bls.n	80044c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e013      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
 80044c0:	40021000 	.word	0x40021000
 80044c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044c8:	4b09      	ldr	r3, [pc, #36]	@ (80044f0 <HAL_RCC_OscConfig+0x7b0>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1ec      	bne.n	80044ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044d4:	4b06      	ldr	r3, [pc, #24]	@ (80044f0 <HAL_RCC_OscConfig+0x7b0>)
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	4905      	ldr	r1, [pc, #20]	@ (80044f0 <HAL_RCC_OscConfig+0x7b0>)
 80044da:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_RCC_OscConfig+0x7b4>)
 80044dc:	4013      	ands	r3, r2
 80044de:	60cb      	str	r3, [r1, #12]
 80044e0:	e001      	b.n	80044e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e000      	b.n	80044e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80044e6:	2300      	movs	r3, #0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3720      	adds	r7, #32
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40021000 	.word	0x40021000
 80044f4:	feeefffc 	.word	0xfeeefffc

080044f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
 8004500:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e0e7      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800450c:	4b75      	ldr	r3, [pc, #468]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d910      	bls.n	800453c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800451a:	4b72      	ldr	r3, [pc, #456]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 0207 	bic.w	r2, r3, #7
 8004522:	4970      	ldr	r1, [pc, #448]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	4313      	orrs	r3, r2
 8004528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452a:	4b6e      	ldr	r3, [pc, #440]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0307 	and.w	r3, r3, #7
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	429a      	cmp	r2, r3
 8004536:	d001      	beq.n	800453c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e0cf      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0302 	and.w	r3, r3, #2
 8004544:	2b00      	cmp	r3, #0
 8004546:	d010      	beq.n	800456a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	4b66      	ldr	r3, [pc, #408]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004554:	429a      	cmp	r2, r3
 8004556:	d908      	bls.n	800456a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004558:	4b63      	ldr	r3, [pc, #396]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4960      	ldr	r1, [pc, #384]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004566:	4313      	orrs	r3, r2
 8004568:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d04c      	beq.n	8004610 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b03      	cmp	r3, #3
 800457c:	d107      	bne.n	800458e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800457e:	4b5a      	ldr	r3, [pc, #360]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d121      	bne.n	80045ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e0a6      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	2b02      	cmp	r3, #2
 8004594:	d107      	bne.n	80045a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004596:	4b54      	ldr	r3, [pc, #336]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d115      	bne.n	80045ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e09a      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045ae:	4b4e      	ldr	r3, [pc, #312]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d109      	bne.n	80045ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e08e      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045be:	4b4a      	ldr	r3, [pc, #296]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e086      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045ce:	4b46      	ldr	r3, [pc, #280]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f023 0203 	bic.w	r2, r3, #3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	4943      	ldr	r1, [pc, #268]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	4313      	orrs	r3, r2
 80045de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e0:	f7ff f85c 	bl	800369c <HAL_GetTick>
 80045e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045e8:	f7ff f858 	bl	800369c <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e06e      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fe:	4b3a      	ldr	r3, [pc, #232]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f003 020c 	and.w	r2, r3, #12
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	429a      	cmp	r2, r3
 800460e:	d1eb      	bne.n	80045e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b00      	cmp	r3, #0
 800461a:	d010      	beq.n	800463e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	4b31      	ldr	r3, [pc, #196]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004628:	429a      	cmp	r2, r3
 800462a:	d208      	bcs.n	800463e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800462c:	4b2e      	ldr	r3, [pc, #184]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	492b      	ldr	r1, [pc, #172]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 800463a:	4313      	orrs	r3, r2
 800463c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800463e:	4b29      	ldr	r3, [pc, #164]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	429a      	cmp	r2, r3
 800464a:	d210      	bcs.n	800466e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464c:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f023 0207 	bic.w	r2, r3, #7
 8004654:	4923      	ldr	r1, [pc, #140]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	4313      	orrs	r3, r2
 800465a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800465c:	4b21      	ldr	r3, [pc, #132]	@ (80046e4 <HAL_RCC_ClockConfig+0x1ec>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	683a      	ldr	r2, [r7, #0]
 8004666:	429a      	cmp	r2, r3
 8004668:	d001      	beq.n	800466e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e036      	b.n	80046dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b00      	cmp	r3, #0
 8004678:	d008      	beq.n	800468c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800467a:	4b1b      	ldr	r3, [pc, #108]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	4918      	ldr	r1, [pc, #96]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 8004688:	4313      	orrs	r3, r2
 800468a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d009      	beq.n	80046ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004698:	4b13      	ldr	r3, [pc, #76]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	00db      	lsls	r3, r3, #3
 80046a6:	4910      	ldr	r1, [pc, #64]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046ac:	f000 f824 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b0d      	ldr	r3, [pc, #52]	@ (80046e8 <HAL_RCC_ClockConfig+0x1f0>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	091b      	lsrs	r3, r3, #4
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	490b      	ldr	r1, [pc, #44]	@ (80046ec <HAL_RCC_ClockConfig+0x1f4>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	f003 031f 	and.w	r3, r3, #31
 80046c4:	fa22 f303 	lsr.w	r3, r2, r3
 80046c8:	4a09      	ldr	r2, [pc, #36]	@ (80046f0 <HAL_RCC_ClockConfig+0x1f8>)
 80046ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046cc:	4b09      	ldr	r3, [pc, #36]	@ (80046f4 <HAL_RCC_ClockConfig+0x1fc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f7fe fecb 	bl	800346c <HAL_InitTick>
 80046d6:	4603      	mov	r3, r0
 80046d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80046da:	7afb      	ldrb	r3, [r7, #11]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}
 80046e4:	40022000 	.word	0x40022000
 80046e8:	40021000 	.word	0x40021000
 80046ec:	0800a064 	.word	0x0800a064
 80046f0:	20000054 	.word	0x20000054
 80046f4:	20000058 	.word	0x20000058

080046f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b089      	sub	sp, #36	@ 0x24
 80046fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
 8004702:	2300      	movs	r3, #0
 8004704:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004706:	4b3e      	ldr	r3, [pc, #248]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004710:	4b3b      	ldr	r3, [pc, #236]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x34>
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	2b0c      	cmp	r3, #12
 8004724:	d121      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d11e      	bne.n	800476a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800472c:	4b34      	ldr	r3, [pc, #208]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0308 	and.w	r3, r3, #8
 8004734:	2b00      	cmp	r3, #0
 8004736:	d107      	bne.n	8004748 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004738:	4b31      	ldr	r3, [pc, #196]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 800473a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800473e:	0a1b      	lsrs	r3, r3, #8
 8004740:	f003 030f 	and.w	r3, r3, #15
 8004744:	61fb      	str	r3, [r7, #28]
 8004746:	e005      	b.n	8004754 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004748:	4b2d      	ldr	r3, [pc, #180]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004754:	4a2b      	ldr	r2, [pc, #172]	@ (8004804 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800475c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10d      	bne.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004768:	e00a      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d102      	bne.n	8004776 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004770:	4b25      	ldr	r3, [pc, #148]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x110>)
 8004772:	61bb      	str	r3, [r7, #24]
 8004774:	e004      	b.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b08      	cmp	r3, #8
 800477a:	d101      	bne.n	8004780 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800477c:	4b23      	ldr	r3, [pc, #140]	@ (800480c <HAL_RCC_GetSysClockFreq+0x114>)
 800477e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d134      	bne.n	80047f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004786:	4b1e      	ldr	r3, [pc, #120]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	f003 0303 	and.w	r3, r3, #3
 800478e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b02      	cmp	r3, #2
 8004794:	d003      	beq.n	800479e <HAL_RCC_GetSysClockFreq+0xa6>
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b03      	cmp	r3, #3
 800479a:	d003      	beq.n	80047a4 <HAL_RCC_GetSysClockFreq+0xac>
 800479c:	e005      	b.n	80047aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800479e:	4b1a      	ldr	r3, [pc, #104]	@ (8004808 <HAL_RCC_GetSysClockFreq+0x110>)
 80047a0:	617b      	str	r3, [r7, #20]
      break;
 80047a2:	e005      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80047a4:	4b19      	ldr	r3, [pc, #100]	@ (800480c <HAL_RCC_GetSysClockFreq+0x114>)
 80047a6:	617b      	str	r3, [r7, #20]
      break;
 80047a8:	e002      	b.n	80047b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047aa:	69fb      	ldr	r3, [r7, #28]
 80047ac:	617b      	str	r3, [r7, #20]
      break;
 80047ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047b0:	4b13      	ldr	r3, [pc, #76]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	091b      	lsrs	r3, r3, #4
 80047b6:	f003 0307 	and.w	r3, r3, #7
 80047ba:	3301      	adds	r3, #1
 80047bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047be:	4b10      	ldr	r3, [pc, #64]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c0:	68db      	ldr	r3, [r3, #12]
 80047c2:	0a1b      	lsrs	r3, r3, #8
 80047c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	fb03 f202 	mul.w	r2, r3, r2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047d6:	4b0a      	ldr	r3, [pc, #40]	@ (8004800 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	0e5b      	lsrs	r3, r3, #25
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	3301      	adds	r3, #1
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047f0:	69bb      	ldr	r3, [r7, #24]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3724      	adds	r7, #36	@ 0x24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000
 8004804:	0800a07c 	.word	0x0800a07c
 8004808:	00f42400 	.word	0x00f42400
 800480c:	007a1200 	.word	0x007a1200

08004810 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004814:	4b03      	ldr	r3, [pc, #12]	@ (8004824 <HAL_RCC_GetHCLKFreq+0x14>)
 8004816:	681b      	ldr	r3, [r3, #0]
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20000054 	.word	0x20000054

08004828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800482c:	f7ff fff0 	bl	8004810 <HAL_RCC_GetHCLKFreq>
 8004830:	4602      	mov	r2, r0
 8004832:	4b06      	ldr	r3, [pc, #24]	@ (800484c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	0a1b      	lsrs	r3, r3, #8
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	4904      	ldr	r1, [pc, #16]	@ (8004850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800483e:	5ccb      	ldrb	r3, [r1, r3]
 8004840:	f003 031f 	and.w	r3, r3, #31
 8004844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004848:	4618      	mov	r0, r3
 800484a:	bd80      	pop	{r7, pc}
 800484c:	40021000 	.word	0x40021000
 8004850:	0800a074 	.word	0x0800a074

08004854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004858:	f7ff ffda 	bl	8004810 <HAL_RCC_GetHCLKFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b06      	ldr	r3, [pc, #24]	@ (8004878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0adb      	lsrs	r3, r3, #11
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4904      	ldr	r1, [pc, #16]	@ (800487c <HAL_RCC_GetPCLK2Freq+0x28>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	f003 031f 	and.w	r3, r3, #31
 8004870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004874:	4618      	mov	r0, r3
 8004876:	bd80      	pop	{r7, pc}
 8004878:	40021000 	.word	0x40021000
 800487c:	0800a074 	.word	0x0800a074

08004880 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	220f      	movs	r2, #15
 800488e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004890:	4b12      	ldr	r3, [pc, #72]	@ (80048dc <HAL_RCC_GetClockConfig+0x5c>)
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f003 0203 	and.w	r2, r3, #3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800489c:	4b0f      	ldr	r3, [pc, #60]	@ (80048dc <HAL_RCC_GetClockConfig+0x5c>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80048a8:	4b0c      	ldr	r3, [pc, #48]	@ (80048dc <HAL_RCC_GetClockConfig+0x5c>)
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80048b4:	4b09      	ldr	r3, [pc, #36]	@ (80048dc <HAL_RCC_GetClockConfig+0x5c>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	08db      	lsrs	r3, r3, #3
 80048ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80048c2:	4b07      	ldr	r3, [pc, #28]	@ (80048e0 <HAL_RCC_GetClockConfig+0x60>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0207 	and.w	r2, r3, #7
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	601a      	str	r2, [r3, #0]
}
 80048ce:	bf00      	nop
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40022000 	.word	0x40022000

080048e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048ec:	2300      	movs	r3, #0
 80048ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048f0:	4b2a      	ldr	r3, [pc, #168]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048fc:	f7ff f9bc 	bl	8003c78 <HAL_PWREx_GetVoltageRange>
 8004900:	6178      	str	r0, [r7, #20]
 8004902:	e014      	b.n	800492e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004904:	4b25      	ldr	r3, [pc, #148]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004908:	4a24      	ldr	r2, [pc, #144]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800490a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800490e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004910:	4b22      	ldr	r3, [pc, #136]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004914:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004918:	60fb      	str	r3, [r7, #12]
 800491a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800491c:	f7ff f9ac 	bl	8003c78 <HAL_PWREx_GetVoltageRange>
 8004920:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004922:	4b1e      	ldr	r3, [pc, #120]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004926:	4a1d      	ldr	r2, [pc, #116]	@ (800499c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004928:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800492c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004934:	d10b      	bne.n	800494e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2b80      	cmp	r3, #128	@ 0x80
 800493a:	d919      	bls.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2ba0      	cmp	r3, #160	@ 0xa0
 8004940:	d902      	bls.n	8004948 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004942:	2302      	movs	r3, #2
 8004944:	613b      	str	r3, [r7, #16]
 8004946:	e013      	b.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004948:	2301      	movs	r3, #1
 800494a:	613b      	str	r3, [r7, #16]
 800494c:	e010      	b.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b80      	cmp	r3, #128	@ 0x80
 8004952:	d902      	bls.n	800495a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004954:	2303      	movs	r3, #3
 8004956:	613b      	str	r3, [r7, #16]
 8004958:	e00a      	b.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2b80      	cmp	r3, #128	@ 0x80
 800495e:	d102      	bne.n	8004966 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004960:	2302      	movs	r3, #2
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	e004      	b.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2b70      	cmp	r3, #112	@ 0x70
 800496a:	d101      	bne.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800496c:	2301      	movs	r3, #1
 800496e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004970:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f023 0207 	bic.w	r2, r3, #7
 8004978:	4909      	ldr	r1, [pc, #36]	@ (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4313      	orrs	r3, r2
 800497e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004980:	4b07      	ldr	r3, [pc, #28]	@ (80049a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	429a      	cmp	r2, r3
 800498c:	d001      	beq.n	8004992 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004992:	2300      	movs	r3, #0
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	40021000 	.word	0x40021000
 80049a0:	40022000 	.word	0x40022000

080049a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80049ac:	2300      	movs	r3, #0
 80049ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80049b0:	2300      	movs	r3, #0
 80049b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d041      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80049c4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049c8:	d02a      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80049ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80049ce:	d824      	bhi.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049d0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049d4:	d008      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80049d6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80049da:	d81e      	bhi.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00a      	beq.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049e0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049e4:	d010      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049e6:	e018      	b.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049e8:	4b86      	ldr	r3, [pc, #536]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	4a85      	ldr	r2, [pc, #532]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049f4:	e015      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3304      	adds	r3, #4
 80049fa:	2100      	movs	r1, #0
 80049fc:	4618      	mov	r0, r3
 80049fe:	f000 fabb 	bl	8004f78 <RCCEx_PLLSAI1_Config>
 8004a02:	4603      	mov	r3, r0
 8004a04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a06:	e00c      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3320      	adds	r3, #32
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fba6 	bl	8005160 <RCCEx_PLLSAI2_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a18:	e003      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a1e:	e000      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004a20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a22:	7cfb      	ldrb	r3, [r7, #19]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10b      	bne.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004a28:	4b76      	ldr	r3, [pc, #472]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a36:	4973      	ldr	r1, [pc, #460]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004a3e:	e001      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a40:	7cfb      	ldrb	r3, [r7, #19]
 8004a42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d041      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004a54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a58:	d02a      	beq.n	8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004a5e:	d824      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a64:	d008      	beq.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a6a:	d81e      	bhi.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d00a      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a74:	d010      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a76:	e018      	b.n	8004aaa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a78:	4b62      	ldr	r3, [pc, #392]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	4a61      	ldr	r2, [pc, #388]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a84:	e015      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 fa73 	bl	8004f78 <RCCEx_PLLSAI1_Config>
 8004a92:	4603      	mov	r3, r0
 8004a94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a96:	e00c      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	3320      	adds	r3, #32
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fb5e 	bl	8005160 <RCCEx_PLLSAI2_Config>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004aa8:	e003      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	74fb      	strb	r3, [r7, #19]
      break;
 8004aae:	e000      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004ab0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ab2:	7cfb      	ldrb	r3, [r7, #19]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10b      	bne.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004ab8:	4b52      	ldr	r3, [pc, #328]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004abe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ac6:	494f      	ldr	r1, [pc, #316]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004ace:	e001      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad0:	7cfb      	ldrb	r3, [r7, #19]
 8004ad2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 80a0 	beq.w	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ae6:	4b47      	ldr	r3, [pc, #284]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004aea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e000      	b.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004af6:	2300      	movs	r3, #0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00d      	beq.n	8004b18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afc:	4b41      	ldr	r3, [pc, #260]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b00:	4a40      	ldr	r2, [pc, #256]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b08:	4b3e      	ldr	r3, [pc, #248]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b10:	60bb      	str	r3, [r7, #8]
 8004b12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b14:	2301      	movs	r3, #1
 8004b16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b18:	4b3b      	ldr	r3, [pc, #236]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a3a      	ldr	r2, [pc, #232]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b24:	f7fe fdba 	bl	800369c <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b2a:	e009      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2c:	f7fe fdb6 	bl	800369c <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d902      	bls.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	74fb      	strb	r3, [r7, #19]
        break;
 8004b3e:	e005      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b40:	4b31      	ldr	r3, [pc, #196]	@ (8004c08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d0ef      	beq.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b4c:	7cfb      	ldrb	r3, [r7, #19]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d15c      	bne.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b52:	4b2c      	ldr	r3, [pc, #176]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d01f      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d019      	beq.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b70:	4b24      	ldr	r3, [pc, #144]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b7c:	4b21      	ldr	r3, [pc, #132]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b82:	4a20      	ldr	r2, [pc, #128]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b92:	4a1c      	ldr	r2, [pc, #112]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b9c:	4a19      	ldr	r2, [pc, #100]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d016      	beq.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bae:	f7fe fd75 	bl	800369c <HAL_GetTick>
 8004bb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bb4:	e00b      	b.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bb6:	f7fe fd71 	bl	800369c <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d902      	bls.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	74fb      	strb	r3, [r7, #19]
            break;
 8004bcc:	e006      	b.n	8004bdc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bce:	4b0d      	ldr	r3, [pc, #52]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0ec      	beq.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004bdc:	7cfb      	ldrb	r3, [r7, #19]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d10c      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004be2:	4b08      	ldr	r3, [pc, #32]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004be8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004bf2:	4904      	ldr	r1, [pc, #16]	@ (8004c04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004bfa:	e009      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	74bb      	strb	r3, [r7, #18]
 8004c00:	e006      	b.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c02:	bf00      	nop
 8004c04:	40021000 	.word	0x40021000
 8004c08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c0c:	7cfb      	ldrb	r3, [r7, #19]
 8004c0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c10:	7c7b      	ldrb	r3, [r7, #17]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d105      	bne.n	8004c22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c16:	4b9e      	ldr	r3, [pc, #632]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c1a:	4a9d      	ldr	r2, [pc, #628]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0301 	and.w	r3, r3, #1
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00a      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c2e:	4b98      	ldr	r3, [pc, #608]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c34:	f023 0203 	bic.w	r2, r3, #3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3c:	4994      	ldr	r1, [pc, #592]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 0302 	and.w	r3, r3, #2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00a      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c50:	4b8f      	ldr	r3, [pc, #572]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c56:	f023 020c 	bic.w	r2, r3, #12
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c5e:	498c      	ldr	r1, [pc, #560]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00a      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c72:	4b87      	ldr	r3, [pc, #540]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c80:	4983      	ldr	r1, [pc, #524]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c82:	4313      	orrs	r3, r2
 8004c84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0308 	and.w	r3, r3, #8
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00a      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c94:	4b7e      	ldr	r3, [pc, #504]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca2:	497b      	ldr	r1, [pc, #492]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004cb6:	4b76      	ldr	r3, [pc, #472]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cc4:	4972      	ldr	r1, [pc, #456]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0320 	and.w	r3, r3, #32
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d00a      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004cd8:	4b6d      	ldr	r3, [pc, #436]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ce6:	496a      	ldr	r1, [pc, #424]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00a      	beq.n	8004d10 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cfa:	4b65      	ldr	r3, [pc, #404]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d08:	4961      	ldr	r1, [pc, #388]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00a      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004d1c:	4b5c      	ldr	r3, [pc, #368]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d2a:	4959      	ldr	r1, [pc, #356]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d3e:	4b54      	ldr	r3, [pc, #336]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d44:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004d4c:	4950      	ldr	r1, [pc, #320]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d00a      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d60:	4b4b      	ldr	r3, [pc, #300]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d66:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6e:	4948      	ldr	r1, [pc, #288]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00a      	beq.n	8004d98 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d82:	4b43      	ldr	r3, [pc, #268]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d88:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d90:	493f      	ldr	r1, [pc, #252]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d92:	4313      	orrs	r3, r2
 8004d94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d028      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004da4:	4b3a      	ldr	r3, [pc, #232]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004daa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004db2:	4937      	ldr	r1, [pc, #220]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db4:	4313      	orrs	r3, r2
 8004db6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004dc2:	d106      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004dc4:	4b32      	ldr	r3, [pc, #200]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	4a31      	ldr	r2, [pc, #196]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dce:	60d3      	str	r3, [r2, #12]
 8004dd0:	e011      	b.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004dd6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dda:	d10c      	bne.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	2101      	movs	r1, #1
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f8c8 	bl	8004f78 <RCCEx_PLLSAI1_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dec:	7cfb      	ldrb	r3, [r7, #19]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004df2:	7cfb      	ldrb	r3, [r7, #19]
 8004df4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d028      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e02:	4b23      	ldr	r3, [pc, #140]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e08:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e10:	491f      	ldr	r1, [pc, #124]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e1c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e20:	d106      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e22:	4b1b      	ldr	r3, [pc, #108]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	4a1a      	ldr	r2, [pc, #104]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e28:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e2c:	60d3      	str	r3, [r2, #12]
 8004e2e:	e011      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e34:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e38:	d10c      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	2101      	movs	r1, #1
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 f899 	bl	8004f78 <RCCEx_PLLSAI1_Config>
 8004e46:	4603      	mov	r3, r0
 8004e48:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e4a:	7cfb      	ldrb	r3, [r7, #19]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d001      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e50:	7cfb      	ldrb	r3, [r7, #19]
 8004e52:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d02b      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e60:	4b0b      	ldr	r3, [pc, #44]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e66:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e6e:	4908      	ldr	r1, [pc, #32]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e7e:	d109      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e80:	4b03      	ldr	r3, [pc, #12]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a02      	ldr	r2, [pc, #8]	@ (8004e90 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e86:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e8a:	60d3      	str	r3, [r2, #12]
 8004e8c:	e014      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e8e:	bf00      	nop
 8004e90:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f867 	bl	8004f78 <RCCEx_PLLSAI1_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eae:	7cfb      	ldrb	r3, [r7, #19]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d02f      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004eca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ed2:	4928      	ldr	r1, [pc, #160]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ede:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ee2:	d10d      	bne.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	2102      	movs	r1, #2
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 f844 	bl	8004f78 <RCCEx_PLLSAI1_Config>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d014      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004efa:	7cfb      	ldrb	r3, [r7, #19]
 8004efc:	74bb      	strb	r3, [r7, #18]
 8004efe:	e011      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f08:	d10c      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3320      	adds	r3, #32
 8004f0e:	2102      	movs	r1, #2
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f925 	bl	8005160 <RCCEx_PLLSAI2_Config>
 8004f16:	4603      	mov	r3, r0
 8004f18:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f1a:	7cfb      	ldrb	r3, [r7, #19]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d001      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f20:	7cfb      	ldrb	r3, [r7, #19]
 8004f22:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00a      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f30:	4b10      	ldr	r3, [pc, #64]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f36:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f3e:	490d      	ldr	r1, [pc, #52]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00b      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f52:	4b08      	ldr	r3, [pc, #32]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f58:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f62:	4904      	ldr	r1, [pc, #16]	@ (8004f74 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f6a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}
 8004f74:	40021000 	.word	0x40021000

08004f78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f86:	4b75      	ldr	r3, [pc, #468]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0303 	and.w	r3, r3, #3
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d018      	beq.n	8004fc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f92:	4b72      	ldr	r3, [pc, #456]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f003 0203 	and.w	r2, r3, #3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d10d      	bne.n	8004fbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
       ||
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004faa:	4b6c      	ldr	r3, [pc, #432]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	1c5a      	adds	r2, r3, #1
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
       ||
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d047      	beq.n	800504e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	73fb      	strb	r3, [r7, #15]
 8004fc2:	e044      	b.n	800504e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d018      	beq.n	8004ffe <RCCEx_PLLSAI1_Config+0x86>
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d825      	bhi.n	800501c <RCCEx_PLLSAI1_Config+0xa4>
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d002      	beq.n	8004fda <RCCEx_PLLSAI1_Config+0x62>
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d009      	beq.n	8004fec <RCCEx_PLLSAI1_Config+0x74>
 8004fd8:	e020      	b.n	800501c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004fda:	4b60      	ldr	r3, [pc, #384]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d11d      	bne.n	8005022 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fea:	e01a      	b.n	8005022 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fec:	4b5b      	ldr	r3, [pc, #364]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d116      	bne.n	8005026 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ffc:	e013      	b.n	8005026 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004ffe:	4b57      	ldr	r3, [pc, #348]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d10f      	bne.n	800502a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800500a:	4b54      	ldr	r3, [pc, #336]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d109      	bne.n	800502a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800501a:	e006      	b.n	800502a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	73fb      	strb	r3, [r7, #15]
      break;
 8005020:	e004      	b.n	800502c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005022:	bf00      	nop
 8005024:	e002      	b.n	800502c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005026:	bf00      	nop
 8005028:	e000      	b.n	800502c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800502a:	bf00      	nop
    }

    if(status == HAL_OK)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10d      	bne.n	800504e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005032:	4b4a      	ldr	r3, [pc, #296]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6819      	ldr	r1, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	3b01      	subs	r3, #1
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	430b      	orrs	r3, r1
 8005048:	4944      	ldr	r1, [pc, #272]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800504a:	4313      	orrs	r3, r2
 800504c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d17d      	bne.n	8005150 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005054:	4b41      	ldr	r3, [pc, #260]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a40      	ldr	r2, [pc, #256]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800505a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800505e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005060:	f7fe fb1c 	bl	800369c <HAL_GetTick>
 8005064:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005066:	e009      	b.n	800507c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005068:	f7fe fb18 	bl	800369c <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d902      	bls.n	800507c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	73fb      	strb	r3, [r7, #15]
        break;
 800507a:	e005      	b.n	8005088 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800507c:	4b37      	ldr	r3, [pc, #220]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d1ef      	bne.n	8005068 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d160      	bne.n	8005150 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d111      	bne.n	80050b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005094:	4b31      	ldr	r3, [pc, #196]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800509c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050a0:	687a      	ldr	r2, [r7, #4]
 80050a2:	6892      	ldr	r2, [r2, #8]
 80050a4:	0211      	lsls	r1, r2, #8
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	68d2      	ldr	r2, [r2, #12]
 80050aa:	0912      	lsrs	r2, r2, #4
 80050ac:	0452      	lsls	r2, r2, #17
 80050ae:	430a      	orrs	r2, r1
 80050b0:	492a      	ldr	r1, [pc, #168]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	610b      	str	r3, [r1, #16]
 80050b6:	e027      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d112      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050be:	4b27      	ldr	r3, [pc, #156]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80050c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	6892      	ldr	r2, [r2, #8]
 80050ce:	0211      	lsls	r1, r2, #8
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	6912      	ldr	r2, [r2, #16]
 80050d4:	0852      	lsrs	r2, r2, #1
 80050d6:	3a01      	subs	r2, #1
 80050d8:	0552      	lsls	r2, r2, #21
 80050da:	430a      	orrs	r2, r1
 80050dc:	491f      	ldr	r1, [pc, #124]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	610b      	str	r3, [r1, #16]
 80050e2:	e011      	b.n	8005108 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050e4:	4b1d      	ldr	r3, [pc, #116]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80050ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6892      	ldr	r2, [r2, #8]
 80050f4:	0211      	lsls	r1, r2, #8
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	6952      	ldr	r2, [r2, #20]
 80050fa:	0852      	lsrs	r2, r2, #1
 80050fc:	3a01      	subs	r2, #1
 80050fe:	0652      	lsls	r2, r2, #25
 8005100:	430a      	orrs	r2, r1
 8005102:	4916      	ldr	r1, [pc, #88]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005104:	4313      	orrs	r3, r2
 8005106:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005108:	4b14      	ldr	r3, [pc, #80]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a13      	ldr	r2, [pc, #76]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800510e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005112:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005114:	f7fe fac2 	bl	800369c <HAL_GetTick>
 8005118:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800511a:	e009      	b.n	8005130 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800511c:	f7fe fabe 	bl	800369c <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	2b02      	cmp	r3, #2
 8005128:	d902      	bls.n	8005130 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	73fb      	strb	r3, [r7, #15]
          break;
 800512e:	e005      	b.n	800513c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005130:	4b0a      	ldr	r3, [pc, #40]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d0ef      	beq.n	800511c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800513c:	7bfb      	ldrb	r3, [r7, #15]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005142:	4b06      	ldr	r3, [pc, #24]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005144:	691a      	ldr	r2, [r3, #16]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	4904      	ldr	r1, [pc, #16]	@ (800515c <RCCEx_PLLSAI1_Config+0x1e4>)
 800514c:	4313      	orrs	r3, r2
 800514e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005150:	7bfb      	ldrb	r3, [r7, #15]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40021000 	.word	0x40021000

08005160 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800516e:	4b6a      	ldr	r3, [pc, #424]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	2b00      	cmp	r3, #0
 8005178:	d018      	beq.n	80051ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800517a:	4b67      	ldr	r3, [pc, #412]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0203 	and.w	r2, r3, #3
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d10d      	bne.n	80051a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
       ||
 800518e:	2b00      	cmp	r3, #0
 8005190:	d009      	beq.n	80051a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005192:	4b61      	ldr	r3, [pc, #388]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	f003 0307 	and.w	r3, r3, #7
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
       ||
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d047      	beq.n	8005236 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
 80051aa:	e044      	b.n	8005236 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d018      	beq.n	80051e6 <RCCEx_PLLSAI2_Config+0x86>
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d825      	bhi.n	8005204 <RCCEx_PLLSAI2_Config+0xa4>
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d002      	beq.n	80051c2 <RCCEx_PLLSAI2_Config+0x62>
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d009      	beq.n	80051d4 <RCCEx_PLLSAI2_Config+0x74>
 80051c0:	e020      	b.n	8005204 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80051c2:	4b55      	ldr	r3, [pc, #340]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d11d      	bne.n	800520a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80051ce:	2301      	movs	r3, #1
 80051d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d2:	e01a      	b.n	800520a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80051d4:	4b50      	ldr	r3, [pc, #320]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d116      	bne.n	800520e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051e4:	e013      	b.n	800520e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051e6:	4b4c      	ldr	r3, [pc, #304]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10f      	bne.n	8005212 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051f2:	4b49      	ldr	r3, [pc, #292]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d109      	bne.n	8005212 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005202:	e006      	b.n	8005212 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005204:	2301      	movs	r3, #1
 8005206:	73fb      	strb	r3, [r7, #15]
      break;
 8005208:	e004      	b.n	8005214 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800520a:	bf00      	nop
 800520c:	e002      	b.n	8005214 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800520e:	bf00      	nop
 8005210:	e000      	b.n	8005214 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005212:	bf00      	nop
    }

    if(status == HAL_OK)
 8005214:	7bfb      	ldrb	r3, [r7, #15]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10d      	bne.n	8005236 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800521a:	4b3f      	ldr	r3, [pc, #252]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6819      	ldr	r1, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	3b01      	subs	r3, #1
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	430b      	orrs	r3, r1
 8005230:	4939      	ldr	r1, [pc, #228]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005232:	4313      	orrs	r3, r2
 8005234:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d167      	bne.n	800530c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800523c:	4b36      	ldr	r3, [pc, #216]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a35      	ldr	r2, [pc, #212]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005242:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005248:	f7fe fa28 	bl	800369c <HAL_GetTick>
 800524c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800524e:	e009      	b.n	8005264 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005250:	f7fe fa24 	bl	800369c <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d902      	bls.n	8005264 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	73fb      	strb	r3, [r7, #15]
        break;
 8005262:	e005      	b.n	8005270 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005264:	4b2c      	ldr	r3, [pc, #176]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d1ef      	bne.n	8005250 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005270:	7bfb      	ldrb	r3, [r7, #15]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d14a      	bne.n	800530c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d111      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800527c:	4b26      	ldr	r3, [pc, #152]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005284:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	6892      	ldr	r2, [r2, #8]
 800528c:	0211      	lsls	r1, r2, #8
 800528e:	687a      	ldr	r2, [r7, #4]
 8005290:	68d2      	ldr	r2, [r2, #12]
 8005292:	0912      	lsrs	r2, r2, #4
 8005294:	0452      	lsls	r2, r2, #17
 8005296:	430a      	orrs	r2, r1
 8005298:	491f      	ldr	r1, [pc, #124]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 800529a:	4313      	orrs	r3, r2
 800529c:	614b      	str	r3, [r1, #20]
 800529e:	e011      	b.n	80052c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80052a0:	4b1d      	ldr	r3, [pc, #116]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80052a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	6892      	ldr	r2, [r2, #8]
 80052b0:	0211      	lsls	r1, r2, #8
 80052b2:	687a      	ldr	r2, [r7, #4]
 80052b4:	6912      	ldr	r2, [r2, #16]
 80052b6:	0852      	lsrs	r2, r2, #1
 80052b8:	3a01      	subs	r2, #1
 80052ba:	0652      	lsls	r2, r2, #25
 80052bc:	430a      	orrs	r2, r1
 80052be:	4916      	ldr	r1, [pc, #88]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80052c4:	4b14      	ldr	r3, [pc, #80]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a13      	ldr	r2, [pc, #76]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80052ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d0:	f7fe f9e4 	bl	800369c <HAL_GetTick>
 80052d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052d6:	e009      	b.n	80052ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052d8:	f7fe f9e0 	bl	800369c <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	d902      	bls.n	80052ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	73fb      	strb	r3, [r7, #15]
          break;
 80052ea:	e005      	b.n	80052f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052ec:	4b0a      	ldr	r3, [pc, #40]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d0ef      	beq.n	80052d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052f8:	7bfb      	ldrb	r3, [r7, #15]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d106      	bne.n	800530c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052fe:	4b06      	ldr	r3, [pc, #24]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	4904      	ldr	r1, [pc, #16]	@ (8005318 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005308:	4313      	orrs	r3, r2
 800530a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3710      	adds	r7, #16
 8005312:	46bd      	mov	sp, r7
 8005314:	bd80      	pop	{r7, pc}
 8005316:	bf00      	nop
 8005318:	40021000 	.word	0x40021000

0800531c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e049      	b.n	80053c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	d106      	bne.n	8005348 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f7fd fef8 	bl	8003138 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3304      	adds	r3, #4
 8005358:	4619      	mov	r1, r3
 800535a:	4610      	mov	r0, r2
 800535c:	f000 fbd8 	bl	8005b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3708      	adds	r7, #8
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
	...

080053cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d001      	beq.n	80053e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e04f      	b.n	8005484 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2202      	movs	r2, #2
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f042 0201 	orr.w	r2, r2, #1
 80053fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a23      	ldr	r2, [pc, #140]	@ (8005490 <HAL_TIM_Base_Start_IT+0xc4>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d01d      	beq.n	8005442 <HAL_TIM_Base_Start_IT+0x76>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800540e:	d018      	beq.n	8005442 <HAL_TIM_Base_Start_IT+0x76>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a1f      	ldr	r2, [pc, #124]	@ (8005494 <HAL_TIM_Base_Start_IT+0xc8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d013      	beq.n	8005442 <HAL_TIM_Base_Start_IT+0x76>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a1e      	ldr	r2, [pc, #120]	@ (8005498 <HAL_TIM_Base_Start_IT+0xcc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00e      	beq.n	8005442 <HAL_TIM_Base_Start_IT+0x76>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a1c      	ldr	r2, [pc, #112]	@ (800549c <HAL_TIM_Base_Start_IT+0xd0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d009      	beq.n	8005442 <HAL_TIM_Base_Start_IT+0x76>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a1b      	ldr	r2, [pc, #108]	@ (80054a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d004      	beq.n	8005442 <HAL_TIM_Base_Start_IT+0x76>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a19      	ldr	r2, [pc, #100]	@ (80054a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d115      	bne.n	800546e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	689a      	ldr	r2, [r3, #8]
 8005448:	4b17      	ldr	r3, [pc, #92]	@ (80054a8 <HAL_TIM_Base_Start_IT+0xdc>)
 800544a:	4013      	ands	r3, r2
 800544c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	2b06      	cmp	r3, #6
 8005452:	d015      	beq.n	8005480 <HAL_TIM_Base_Start_IT+0xb4>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800545a:	d011      	beq.n	8005480 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681a      	ldr	r2, [r3, #0]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f042 0201 	orr.w	r2, r2, #1
 800546a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800546c:	e008      	b.n	8005480 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681a      	ldr	r2, [r3, #0]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f042 0201 	orr.w	r2, r2, #1
 800547c:	601a      	str	r2, [r3, #0]
 800547e:	e000      	b.n	8005482 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005480:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005482:	2300      	movs	r3, #0
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	40012c00 	.word	0x40012c00
 8005494:	40000400 	.word	0x40000400
 8005498:	40000800 	.word	0x40000800
 800549c:	40000c00 	.word	0x40000c00
 80054a0:	40013400 	.word	0x40013400
 80054a4:	40014000 	.word	0x40014000
 80054a8:	00010007 	.word	0x00010007

080054ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e049      	b.n	8005552 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fd fdae 	bl	8003034 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4619      	mov	r1, r3
 80054ea:	4610      	mov	r0, r2
 80054ec:	f000 fb10 	bl	8005b10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3708      	adds	r7, #8
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b082      	sub	sp, #8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	6839      	ldr	r1, [r7, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 fe4a 	bl	8006208 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a3e      	ldr	r2, [pc, #248]	@ (8005674 <HAL_TIM_PWM_Stop+0x118>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d013      	beq.n	80055a6 <HAL_TIM_PWM_Stop+0x4a>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a3d      	ldr	r2, [pc, #244]	@ (8005678 <HAL_TIM_PWM_Stop+0x11c>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00e      	beq.n	80055a6 <HAL_TIM_PWM_Stop+0x4a>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a3b      	ldr	r2, [pc, #236]	@ (800567c <HAL_TIM_PWM_Stop+0x120>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d009      	beq.n	80055a6 <HAL_TIM_PWM_Stop+0x4a>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a3a      	ldr	r2, [pc, #232]	@ (8005680 <HAL_TIM_PWM_Stop+0x124>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d004      	beq.n	80055a6 <HAL_TIM_PWM_Stop+0x4a>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a38      	ldr	r2, [pc, #224]	@ (8005684 <HAL_TIM_PWM_Stop+0x128>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d101      	bne.n	80055aa <HAL_TIM_PWM_Stop+0x4e>
 80055a6:	2301      	movs	r3, #1
 80055a8:	e000      	b.n	80055ac <HAL_TIM_PWM_Stop+0x50>
 80055aa:	2300      	movs	r3, #0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d017      	beq.n	80055e0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6a1a      	ldr	r2, [r3, #32]
 80055b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10f      	bne.n	80055e0 <HAL_TIM_PWM_Stop+0x84>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6a1a      	ldr	r2, [r3, #32]
 80055c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80055ca:	4013      	ands	r3, r2
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d107      	bne.n	80055e0 <HAL_TIM_PWM_Stop+0x84>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80055de:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	6a1a      	ldr	r2, [r3, #32]
 80055e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80055ea:	4013      	ands	r3, r2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10f      	bne.n	8005610 <HAL_TIM_PWM_Stop+0xb4>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6a1a      	ldr	r2, [r3, #32]
 80055f6:	f240 4344 	movw	r3, #1092	@ 0x444
 80055fa:	4013      	ands	r3, r2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d107      	bne.n	8005610 <HAL_TIM_PWM_Stop+0xb4>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0201 	bic.w	r2, r2, #1
 800560e:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d104      	bne.n	8005620 <HAL_TIM_PWM_Stop+0xc4>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2201      	movs	r2, #1
 800561a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800561e:	e023      	b.n	8005668 <HAL_TIM_PWM_Stop+0x10c>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b04      	cmp	r3, #4
 8005624:	d104      	bne.n	8005630 <HAL_TIM_PWM_Stop+0xd4>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800562e:	e01b      	b.n	8005668 <HAL_TIM_PWM_Stop+0x10c>
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2b08      	cmp	r3, #8
 8005634:	d104      	bne.n	8005640 <HAL_TIM_PWM_Stop+0xe4>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2201      	movs	r2, #1
 800563a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800563e:	e013      	b.n	8005668 <HAL_TIM_PWM_Stop+0x10c>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b0c      	cmp	r3, #12
 8005644:	d104      	bne.n	8005650 <HAL_TIM_PWM_Stop+0xf4>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800564e:	e00b      	b.n	8005668 <HAL_TIM_PWM_Stop+0x10c>
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b10      	cmp	r3, #16
 8005654:	d104      	bne.n	8005660 <HAL_TIM_PWM_Stop+0x104>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800565e:	e003      	b.n	8005668 <HAL_TIM_PWM_Stop+0x10c>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
 8005672:	bf00      	nop
 8005674:	40012c00 	.word	0x40012c00
 8005678:	40013400 	.word	0x40013400
 800567c:	40014000 	.word	0x40014000
 8005680:	40014400 	.word	0x40014400
 8005684:	40014800 	.word	0x40014800

08005688 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d020      	beq.n	80056ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01b      	beq.n	80056ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f06f 0202 	mvn.w	r2, #2
 80056bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2201      	movs	r2, #1
 80056c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	f003 0303 	and.w	r3, r3, #3
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d003      	beq.n	80056da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f9fe 	bl	8005ad4 <HAL_TIM_IC_CaptureCallback>
 80056d8:	e005      	b.n	80056e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f9f0 	bl	8005ac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f000 fa01 	bl	8005ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 0304 	and.w	r3, r3, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d020      	beq.n	8005738 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f003 0304 	and.w	r3, r3, #4
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d01b      	beq.n	8005738 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0204 	mvn.w	r2, #4
 8005708:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2202      	movs	r2, #2
 800570e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800571a:	2b00      	cmp	r3, #0
 800571c:	d003      	beq.n	8005726 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f9d8 	bl	8005ad4 <HAL_TIM_IC_CaptureCallback>
 8005724:	e005      	b.n	8005732 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 f9ca 	bl	8005ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800572c:	6878      	ldr	r0, [r7, #4]
 800572e:	f000 f9db 	bl	8005ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	f003 0308 	and.w	r3, r3, #8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d020      	beq.n	8005784 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d01b      	beq.n	8005784 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0208 	mvn.w	r2, #8
 8005754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2204      	movs	r2, #4
 800575a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	69db      	ldr	r3, [r3, #28]
 8005762:	f003 0303 	and.w	r3, r3, #3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f9b2 	bl	8005ad4 <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f9a4 	bl	8005ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f9b5 	bl	8005ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b00      	cmp	r3, #0
 800578c:	d020      	beq.n	80057d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	d01b      	beq.n	80057d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f06f 0210 	mvn.w	r2, #16
 80057a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2208      	movs	r2, #8
 80057a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 f98c 	bl	8005ad4 <HAL_TIM_IC_CaptureCallback>
 80057bc:	e005      	b.n	80057ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f97e 	bl	8005ac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f98f 	bl	8005ae8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00c      	beq.n	80057f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f003 0301 	and.w	r3, r3, #1
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d007      	beq.n	80057f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f06f 0201 	mvn.w	r2, #1
 80057ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fd fbe0 	bl	8002fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00c      	beq.n	8005822 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800581a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 fe29 	bl	8006474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00c      	beq.n	8005846 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800583e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f000 fe21 	bl	8006488 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00c      	beq.n	800586a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d007      	beq.n	800586a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f949 	bl	8005afc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	f003 0320 	and.w	r3, r3, #32
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00c      	beq.n	800588e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 0320 	and.w	r3, r3, #32
 800587a:	2b00      	cmp	r3, #0
 800587c:	d007      	beq.n	800588e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f06f 0220 	mvn.w	r2, #32
 8005886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fde9 	bl	8006460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800588e:	bf00      	nop
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b086      	sub	sp, #24
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d101      	bne.n	80058b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80058b2:	2302      	movs	r3, #2
 80058b4:	e0ff      	b.n	8005ab6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b14      	cmp	r3, #20
 80058c2:	f200 80f0 	bhi.w	8005aa6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80058c6:	a201      	add	r2, pc, #4	@ (adr r2, 80058cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80058c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058cc:	08005921 	.word	0x08005921
 80058d0:	08005aa7 	.word	0x08005aa7
 80058d4:	08005aa7 	.word	0x08005aa7
 80058d8:	08005aa7 	.word	0x08005aa7
 80058dc:	08005961 	.word	0x08005961
 80058e0:	08005aa7 	.word	0x08005aa7
 80058e4:	08005aa7 	.word	0x08005aa7
 80058e8:	08005aa7 	.word	0x08005aa7
 80058ec:	080059a3 	.word	0x080059a3
 80058f0:	08005aa7 	.word	0x08005aa7
 80058f4:	08005aa7 	.word	0x08005aa7
 80058f8:	08005aa7 	.word	0x08005aa7
 80058fc:	080059e3 	.word	0x080059e3
 8005900:	08005aa7 	.word	0x08005aa7
 8005904:	08005aa7 	.word	0x08005aa7
 8005908:	08005aa7 	.word	0x08005aa7
 800590c:	08005a25 	.word	0x08005a25
 8005910:	08005aa7 	.word	0x08005aa7
 8005914:	08005aa7 	.word	0x08005aa7
 8005918:	08005aa7 	.word	0x08005aa7
 800591c:	08005a65 	.word	0x08005a65
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68b9      	ldr	r1, [r7, #8]
 8005926:	4618      	mov	r0, r3
 8005928:	f000 f998 	bl	8005c5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0208 	orr.w	r2, r2, #8
 800593a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0204 	bic.w	r2, r2, #4
 800594a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6999      	ldr	r1, [r3, #24]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	619a      	str	r2, [r3, #24]
      break;
 800595e:	e0a5      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68b9      	ldr	r1, [r7, #8]
 8005966:	4618      	mov	r0, r3
 8005968:	f000 fa08 	bl	8005d7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699a      	ldr	r2, [r3, #24]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800597a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	699a      	ldr	r2, [r3, #24]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800598a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	6999      	ldr	r1, [r3, #24]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	021a      	lsls	r2, r3, #8
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	430a      	orrs	r2, r1
 800599e:	619a      	str	r2, [r3, #24]
      break;
 80059a0:	e084      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	68b9      	ldr	r1, [r7, #8]
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fa71 	bl	8005e90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	69da      	ldr	r2, [r3, #28]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f042 0208 	orr.w	r2, r2, #8
 80059bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	69da      	ldr	r2, [r3, #28]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0204 	bic.w	r2, r2, #4
 80059cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	69d9      	ldr	r1, [r3, #28]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	430a      	orrs	r2, r1
 80059de:	61da      	str	r2, [r3, #28]
      break;
 80059e0:	e064      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	68b9      	ldr	r1, [r7, #8]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f000 fad9 	bl	8005fa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	69da      	ldr	r2, [r3, #28]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80059fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69da      	ldr	r2, [r3, #28]
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	69d9      	ldr	r1, [r3, #28]
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	021a      	lsls	r2, r3, #8
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	61da      	str	r2, [r3, #28]
      break;
 8005a22:	e043      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	68b9      	ldr	r1, [r7, #8]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fb22 	bl	8006074 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f042 0208 	orr.w	r2, r2, #8
 8005a3e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f022 0204 	bic.w	r2, r2, #4
 8005a4e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005a62:	e023      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68b9      	ldr	r1, [r7, #8]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 fb66 	bl	800613c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a7e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a8e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	021a      	lsls	r2, r3, #8
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005aa4:	e002      	b.n	8005aac <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	75fb      	strb	r3, [r7, #23]
      break;
 8005aaa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop

08005ac0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a46      	ldr	r2, [pc, #280]	@ (8005c3c <TIM_Base_SetConfig+0x12c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d013      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b2e:	d00f      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a43      	ldr	r2, [pc, #268]	@ (8005c40 <TIM_Base_SetConfig+0x130>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d00b      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a42      	ldr	r2, [pc, #264]	@ (8005c44 <TIM_Base_SetConfig+0x134>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d007      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a41      	ldr	r2, [pc, #260]	@ (8005c48 <TIM_Base_SetConfig+0x138>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d003      	beq.n	8005b50 <TIM_Base_SetConfig+0x40>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a40      	ldr	r2, [pc, #256]	@ (8005c4c <TIM_Base_SetConfig+0x13c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d108      	bne.n	8005b62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4a35      	ldr	r2, [pc, #212]	@ (8005c3c <TIM_Base_SetConfig+0x12c>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d01f      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b70:	d01b      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a32      	ldr	r2, [pc, #200]	@ (8005c40 <TIM_Base_SetConfig+0x130>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d017      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a31      	ldr	r2, [pc, #196]	@ (8005c44 <TIM_Base_SetConfig+0x134>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a30      	ldr	r2, [pc, #192]	@ (8005c48 <TIM_Base_SetConfig+0x138>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00f      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8005c4c <TIM_Base_SetConfig+0x13c>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00b      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2e      	ldr	r2, [pc, #184]	@ (8005c50 <TIM_Base_SetConfig+0x140>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d007      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8005c54 <TIM_Base_SetConfig+0x144>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <TIM_Base_SetConfig+0x9a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8005c58 <TIM_Base_SetConfig+0x148>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d108      	bne.n	8005bbc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a16      	ldr	r2, [pc, #88]	@ (8005c3c <TIM_Base_SetConfig+0x12c>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d00f      	beq.n	8005c08 <TIM_Base_SetConfig+0xf8>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a18      	ldr	r2, [pc, #96]	@ (8005c4c <TIM_Base_SetConfig+0x13c>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d00b      	beq.n	8005c08 <TIM_Base_SetConfig+0xf8>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a17      	ldr	r2, [pc, #92]	@ (8005c50 <TIM_Base_SetConfig+0x140>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d007      	beq.n	8005c08 <TIM_Base_SetConfig+0xf8>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a16      	ldr	r2, [pc, #88]	@ (8005c54 <TIM_Base_SetConfig+0x144>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d003      	beq.n	8005c08 <TIM_Base_SetConfig+0xf8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a15      	ldr	r2, [pc, #84]	@ (8005c58 <TIM_Base_SetConfig+0x148>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d103      	bne.n	8005c10 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	691a      	ldr	r2, [r3, #16]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	691b      	ldr	r3, [r3, #16]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d105      	bne.n	8005c2e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	f023 0201 	bic.w	r2, r3, #1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	611a      	str	r2, [r3, #16]
  }
}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40012c00 	.word	0x40012c00
 8005c40:	40000400 	.word	0x40000400
 8005c44:	40000800 	.word	0x40000800
 8005c48:	40000c00 	.word	0x40000c00
 8005c4c:	40013400 	.word	0x40013400
 8005c50:	40014000 	.word	0x40014000
 8005c54:	40014400 	.word	0x40014400
 8005c58:	40014800 	.word	0x40014800

08005c5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f023 0201 	bic.w	r2, r3, #1
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	699b      	ldr	r3, [r3, #24]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f023 0303 	bic.w	r3, r3, #3
 8005c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f023 0302 	bic.w	r3, r3, #2
 8005ca8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8005d68 <TIM_OC1_SetConfig+0x10c>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d00f      	beq.n	8005cdc <TIM_OC1_SetConfig+0x80>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a2b      	ldr	r2, [pc, #172]	@ (8005d6c <TIM_OC1_SetConfig+0x110>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d00b      	beq.n	8005cdc <TIM_OC1_SetConfig+0x80>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8005d70 <TIM_OC1_SetConfig+0x114>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d007      	beq.n	8005cdc <TIM_OC1_SetConfig+0x80>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	4a29      	ldr	r2, [pc, #164]	@ (8005d74 <TIM_OC1_SetConfig+0x118>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d003      	beq.n	8005cdc <TIM_OC1_SetConfig+0x80>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a28      	ldr	r2, [pc, #160]	@ (8005d78 <TIM_OC1_SetConfig+0x11c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d10c      	bne.n	8005cf6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	f023 0308 	bic.w	r3, r3, #8
 8005ce2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	f023 0304 	bic.w	r3, r3, #4
 8005cf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a1b      	ldr	r2, [pc, #108]	@ (8005d68 <TIM_OC1_SetConfig+0x10c>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00f      	beq.n	8005d1e <TIM_OC1_SetConfig+0xc2>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a1a      	ldr	r2, [pc, #104]	@ (8005d6c <TIM_OC1_SetConfig+0x110>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d00b      	beq.n	8005d1e <TIM_OC1_SetConfig+0xc2>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	4a19      	ldr	r2, [pc, #100]	@ (8005d70 <TIM_OC1_SetConfig+0x114>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d007      	beq.n	8005d1e <TIM_OC1_SetConfig+0xc2>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4a18      	ldr	r2, [pc, #96]	@ (8005d74 <TIM_OC1_SetConfig+0x118>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d003      	beq.n	8005d1e <TIM_OC1_SetConfig+0xc2>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	4a17      	ldr	r2, [pc, #92]	@ (8005d78 <TIM_OC1_SetConfig+0x11c>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d111      	bne.n	8005d42 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	695b      	ldr	r3, [r3, #20]
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685a      	ldr	r2, [r3, #4]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	697a      	ldr	r2, [r7, #20]
 8005d5a:	621a      	str	r2, [r3, #32]
}
 8005d5c:	bf00      	nop
 8005d5e:	371c      	adds	r7, #28
 8005d60:	46bd      	mov	sp, r7
 8005d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d66:	4770      	bx	lr
 8005d68:	40012c00 	.word	0x40012c00
 8005d6c:	40013400 	.word	0x40013400
 8005d70:	40014000 	.word	0x40014000
 8005d74:	40014400 	.word	0x40014400
 8005d78:	40014800 	.word	0x40014800

08005d7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f023 0210 	bic.w	r2, r3, #16
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005daa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	021b      	lsls	r3, r3, #8
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005dc4:	697b      	ldr	r3, [r7, #20]
 8005dc6:	f023 0320 	bic.w	r3, r3, #32
 8005dca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	697a      	ldr	r2, [r7, #20]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a28      	ldr	r2, [pc, #160]	@ (8005e7c <TIM_OC2_SetConfig+0x100>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d003      	beq.n	8005de8 <TIM_OC2_SetConfig+0x6c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	4a27      	ldr	r2, [pc, #156]	@ (8005e80 <TIM_OC2_SetConfig+0x104>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d10d      	bne.n	8005e04 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	011b      	lsls	r3, r3, #4
 8005df6:	697a      	ldr	r2, [r7, #20]
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e02:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a1d      	ldr	r2, [pc, #116]	@ (8005e7c <TIM_OC2_SetConfig+0x100>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00f      	beq.n	8005e2c <TIM_OC2_SetConfig+0xb0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005e80 <TIM_OC2_SetConfig+0x104>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d00b      	beq.n	8005e2c <TIM_OC2_SetConfig+0xb0>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a1b      	ldr	r2, [pc, #108]	@ (8005e84 <TIM_OC2_SetConfig+0x108>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d007      	beq.n	8005e2c <TIM_OC2_SetConfig+0xb0>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a1a      	ldr	r2, [pc, #104]	@ (8005e88 <TIM_OC2_SetConfig+0x10c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d003      	beq.n	8005e2c <TIM_OC2_SetConfig+0xb0>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a19      	ldr	r2, [pc, #100]	@ (8005e8c <TIM_OC2_SetConfig+0x110>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d113      	bne.n	8005e54 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	693a      	ldr	r2, [r7, #16]
 8005e50:	4313      	orrs	r3, r2
 8005e52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	693a      	ldr	r2, [r7, #16]
 8005e58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	685a      	ldr	r2, [r3, #4]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	621a      	str	r2, [r3, #32]
}
 8005e6e:	bf00      	nop
 8005e70:	371c      	adds	r7, #28
 8005e72:	46bd      	mov	sp, r7
 8005e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	40012c00 	.word	0x40012c00
 8005e80:	40013400 	.word	0x40013400
 8005e84:	40014000 	.word	0x40014000
 8005e88:	40014400 	.word	0x40014400
 8005e8c:	40014800 	.word	0x40014800

08005e90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b087      	sub	sp, #28
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a1b      	ldr	r3, [r3, #32]
 8005ea4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ebe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	f023 0303 	bic.w	r3, r3, #3
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005edc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	021b      	lsls	r3, r3, #8
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a27      	ldr	r2, [pc, #156]	@ (8005f8c <TIM_OC3_SetConfig+0xfc>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_OC3_SetConfig+0x6a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a26      	ldr	r2, [pc, #152]	@ (8005f90 <TIM_OC3_SetConfig+0x100>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d10d      	bne.n	8005f16 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005f00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a1c      	ldr	r2, [pc, #112]	@ (8005f8c <TIM_OC3_SetConfig+0xfc>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00f      	beq.n	8005f3e <TIM_OC3_SetConfig+0xae>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a1b      	ldr	r2, [pc, #108]	@ (8005f90 <TIM_OC3_SetConfig+0x100>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d00b      	beq.n	8005f3e <TIM_OC3_SetConfig+0xae>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a1a      	ldr	r2, [pc, #104]	@ (8005f94 <TIM_OC3_SetConfig+0x104>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d007      	beq.n	8005f3e <TIM_OC3_SetConfig+0xae>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a19      	ldr	r2, [pc, #100]	@ (8005f98 <TIM_OC3_SetConfig+0x108>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d003      	beq.n	8005f3e <TIM_OC3_SetConfig+0xae>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a18      	ldr	r2, [pc, #96]	@ (8005f9c <TIM_OC3_SetConfig+0x10c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d113      	bne.n	8005f66 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	695b      	ldr	r3, [r3, #20]
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	621a      	str	r2, [r3, #32]
}
 8005f80:	bf00      	nop
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40013400 	.word	0x40013400
 8005f94:	40014000 	.word	0x40014000
 8005f98:	40014400 	.word	0x40014400
 8005f9c:	40014800 	.word	0x40014800

08005fa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b087      	sub	sp, #28
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6a1b      	ldr	r3, [r3, #32]
 8005fb4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	021b      	lsls	r3, r3, #8
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	031b      	lsls	r3, r3, #12
 8005ff6:	693a      	ldr	r2, [r7, #16]
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	4a18      	ldr	r2, [pc, #96]	@ (8006060 <TIM_OC4_SetConfig+0xc0>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d00f      	beq.n	8006024 <TIM_OC4_SetConfig+0x84>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a17      	ldr	r2, [pc, #92]	@ (8006064 <TIM_OC4_SetConfig+0xc4>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d00b      	beq.n	8006024 <TIM_OC4_SetConfig+0x84>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a16      	ldr	r2, [pc, #88]	@ (8006068 <TIM_OC4_SetConfig+0xc8>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d007      	beq.n	8006024 <TIM_OC4_SetConfig+0x84>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a15      	ldr	r2, [pc, #84]	@ (800606c <TIM_OC4_SetConfig+0xcc>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d003      	beq.n	8006024 <TIM_OC4_SetConfig+0x84>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a14      	ldr	r2, [pc, #80]	@ (8006070 <TIM_OC4_SetConfig+0xd0>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d109      	bne.n	8006038 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800602a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	695b      	ldr	r3, [r3, #20]
 8006030:	019b      	lsls	r3, r3, #6
 8006032:	697a      	ldr	r2, [r7, #20]
 8006034:	4313      	orrs	r3, r2
 8006036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	693a      	ldr	r2, [r7, #16]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40012c00 	.word	0x40012c00
 8006064:	40013400 	.word	0x40013400
 8006068:	40014000 	.word	0x40014000
 800606c:	40014400 	.word	0x40014400
 8006070:	40014800 	.word	0x40014800

08006074 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006074:	b480      	push	{r7}
 8006076:	b087      	sub	sp, #28
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a1b      	ldr	r3, [r3, #32]
 8006082:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800609a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4313      	orrs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80060b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	041b      	lsls	r3, r3, #16
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a17      	ldr	r2, [pc, #92]	@ (8006128 <TIM_OC5_SetConfig+0xb4>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d00f      	beq.n	80060ee <TIM_OC5_SetConfig+0x7a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a16      	ldr	r2, [pc, #88]	@ (800612c <TIM_OC5_SetConfig+0xb8>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d00b      	beq.n	80060ee <TIM_OC5_SetConfig+0x7a>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a15      	ldr	r2, [pc, #84]	@ (8006130 <TIM_OC5_SetConfig+0xbc>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d007      	beq.n	80060ee <TIM_OC5_SetConfig+0x7a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a14      	ldr	r2, [pc, #80]	@ (8006134 <TIM_OC5_SetConfig+0xc0>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d003      	beq.n	80060ee <TIM_OC5_SetConfig+0x7a>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a13      	ldr	r2, [pc, #76]	@ (8006138 <TIM_OC5_SetConfig+0xc4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d109      	bne.n	8006102 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68fa      	ldr	r2, [r7, #12]
 800610c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	693a      	ldr	r2, [r7, #16]
 800611a:	621a      	str	r2, [r3, #32]
}
 800611c:	bf00      	nop
 800611e:	371c      	adds	r7, #28
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	40012c00 	.word	0x40012c00
 800612c:	40013400 	.word	0x40013400
 8006130:	40014000 	.word	0x40014000
 8006134:	40014400 	.word	0x40014400
 8006138:	40014800 	.word	0x40014800

0800613c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800613c:	b480      	push	{r7}
 800613e:	b087      	sub	sp, #28
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a1b      	ldr	r3, [r3, #32]
 8006150:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800616a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800616e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	021b      	lsls	r3, r3, #8
 8006176:	68fa      	ldr	r2, [r7, #12]
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	051b      	lsls	r3, r3, #20
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	4313      	orrs	r3, r2
 800618e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	4a18      	ldr	r2, [pc, #96]	@ (80061f4 <TIM_OC6_SetConfig+0xb8>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d00f      	beq.n	80061b8 <TIM_OC6_SetConfig+0x7c>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a17      	ldr	r2, [pc, #92]	@ (80061f8 <TIM_OC6_SetConfig+0xbc>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00b      	beq.n	80061b8 <TIM_OC6_SetConfig+0x7c>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a16      	ldr	r2, [pc, #88]	@ (80061fc <TIM_OC6_SetConfig+0xc0>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d007      	beq.n	80061b8 <TIM_OC6_SetConfig+0x7c>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a15      	ldr	r2, [pc, #84]	@ (8006200 <TIM_OC6_SetConfig+0xc4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_OC6_SetConfig+0x7c>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a14      	ldr	r2, [pc, #80]	@ (8006204 <TIM_OC6_SetConfig+0xc8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d109      	bne.n	80061cc <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061be:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	695b      	ldr	r3, [r3, #20]
 80061c4:	029b      	lsls	r3, r3, #10
 80061c6:	697a      	ldr	r2, [r7, #20]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	693a      	ldr	r2, [r7, #16]
 80061e4:	621a      	str	r2, [r3, #32]
}
 80061e6:	bf00      	nop
 80061e8:	371c      	adds	r7, #28
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	40012c00 	.word	0x40012c00
 80061f8:	40013400 	.word	0x40013400
 80061fc:	40014000 	.word	0x40014000
 8006200:	40014400 	.word	0x40014400
 8006204:	40014800 	.word	0x40014800

08006208 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	f003 031f 	and.w	r3, r3, #31
 800621a:	2201      	movs	r2, #1
 800621c:	fa02 f303 	lsl.w	r3, r2, r3
 8006220:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a1a      	ldr	r2, [r3, #32]
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	43db      	mvns	r3, r3
 800622a:	401a      	ands	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6a1a      	ldr	r2, [r3, #32]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	f003 031f 	and.w	r3, r3, #31
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	fa01 f303 	lsl.w	r3, r1, r3
 8006240:	431a      	orrs	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
	...

08006254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006264:	2b01      	cmp	r3, #1
 8006266:	d101      	bne.n	800626c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006268:	2302      	movs	r3, #2
 800626a:	e068      	b.n	800633e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2202      	movs	r2, #2
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	689b      	ldr	r3, [r3, #8]
 800628a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a2e      	ldr	r2, [pc, #184]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a2d      	ldr	r2, [pc, #180]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d108      	bne.n	80062b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80062a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68fa      	ldr	r2, [r7, #12]
 80062ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a1e      	ldr	r2, [pc, #120]	@ (800634c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d01d      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062de:	d018      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006354 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d013      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a1a      	ldr	r2, [pc, #104]	@ (8006358 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d00e      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a18      	ldr	r2, [pc, #96]	@ (800635c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d009      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a13      	ldr	r2, [pc, #76]	@ (8006350 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006304:	4293      	cmp	r3, r2
 8006306:	d004      	beq.n	8006312 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a14      	ldr	r2, [pc, #80]	@ (8006360 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d10c      	bne.n	800632c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006318:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	68ba      	ldr	r2, [r7, #8]
 8006320:	4313      	orrs	r3, r2
 8006322:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3714      	adds	r7, #20
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr
 800634a:	bf00      	nop
 800634c:	40012c00 	.word	0x40012c00
 8006350:	40013400 	.word	0x40013400
 8006354:	40000400 	.word	0x40000400
 8006358:	40000800 	.word	0x40000800
 800635c:	40000c00 	.word	0x40000c00
 8006360:	40014000 	.word	0x40014000

08006364 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800636e:	2300      	movs	r3, #0
 8006370:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006378:	2b01      	cmp	r3, #1
 800637a:	d101      	bne.n	8006380 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800637c:	2302      	movs	r3, #2
 800637e:	e065      	b.n	800644c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4313      	orrs	r3, r2
 80063be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	4313      	orrs	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	695b      	ldr	r3, [r3, #20]
 80063d8:	4313      	orrs	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063e6:	4313      	orrs	r3, r2
 80063e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	041b      	lsls	r3, r3, #16
 80063f6:	4313      	orrs	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a16      	ldr	r2, [pc, #88]	@ (8006458 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d004      	beq.n	800640e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a14      	ldr	r2, [pc, #80]	@ (800645c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d115      	bne.n	800643a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006418:	051b      	lsls	r3, r3, #20
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	4313      	orrs	r3, r2
 800642a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	4313      	orrs	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2200      	movs	r2, #0
 8006446:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3714      	adds	r7, #20
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr
 8006458:	40012c00 	.word	0x40012c00
 800645c:	40013400 	.word	0x40013400

08006460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b082      	sub	sp, #8
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d101      	bne.n	80064ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e040      	b.n	8006530 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fc ff70 	bl	80033a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2224      	movs	r2, #36	@ 0x24
 80064c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	681a      	ldr	r2, [r3, #0]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f022 0201 	bic.w	r2, r2, #1
 80064d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f000 fae0 	bl	8006aa8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f825 	bl	8006538 <UART_SetConfig>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d101      	bne.n	80064f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e01b      	b.n	8006530 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685a      	ldr	r2, [r3, #4]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	689a      	ldr	r2, [r3, #8]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006516:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f042 0201 	orr.w	r2, r2, #1
 8006526:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006528:	6878      	ldr	r0, [r7, #4]
 800652a:	f000 fb5f 	bl	8006bec <UART_CheckIdleState>
 800652e:	4603      	mov	r3, r0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800653c:	b08a      	sub	sp, #40	@ 0x28
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	691b      	ldr	r3, [r3, #16]
 8006550:	431a      	orrs	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	431a      	orrs	r2, r3
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	4313      	orrs	r3, r2
 800655e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	4ba4      	ldr	r3, [pc, #656]	@ (80067f8 <UART_SetConfig+0x2c0>)
 8006568:	4013      	ands	r3, r2
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006570:	430b      	orrs	r3, r1
 8006572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a99      	ldr	r2, [pc, #612]	@ (80067fc <UART_SetConfig+0x2c4>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d004      	beq.n	80065a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	6a1b      	ldr	r3, [r3, #32]
 800659e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a0:	4313      	orrs	r3, r2
 80065a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b4:	430a      	orrs	r2, r1
 80065b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a90      	ldr	r2, [pc, #576]	@ (8006800 <UART_SetConfig+0x2c8>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d126      	bne.n	8006610 <UART_SetConfig+0xd8>
 80065c2:	4b90      	ldr	r3, [pc, #576]	@ (8006804 <UART_SetConfig+0x2cc>)
 80065c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d81b      	bhi.n	8006608 <UART_SetConfig+0xd0>
 80065d0:	a201      	add	r2, pc, #4	@ (adr r2, 80065d8 <UART_SetConfig+0xa0>)
 80065d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d6:	bf00      	nop
 80065d8:	080065e9 	.word	0x080065e9
 80065dc:	080065f9 	.word	0x080065f9
 80065e0:	080065f1 	.word	0x080065f1
 80065e4:	08006601 	.word	0x08006601
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ee:	e116      	b.n	800681e <UART_SetConfig+0x2e6>
 80065f0:	2302      	movs	r3, #2
 80065f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f6:	e112      	b.n	800681e <UART_SetConfig+0x2e6>
 80065f8:	2304      	movs	r3, #4
 80065fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065fe:	e10e      	b.n	800681e <UART_SetConfig+0x2e6>
 8006600:	2308      	movs	r3, #8
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006606:	e10a      	b.n	800681e <UART_SetConfig+0x2e6>
 8006608:	2310      	movs	r3, #16
 800660a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800660e:	e106      	b.n	800681e <UART_SetConfig+0x2e6>
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a7c      	ldr	r2, [pc, #496]	@ (8006808 <UART_SetConfig+0x2d0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d138      	bne.n	800668c <UART_SetConfig+0x154>
 800661a:	4b7a      	ldr	r3, [pc, #488]	@ (8006804 <UART_SetConfig+0x2cc>)
 800661c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006620:	f003 030c 	and.w	r3, r3, #12
 8006624:	2b0c      	cmp	r3, #12
 8006626:	d82d      	bhi.n	8006684 <UART_SetConfig+0x14c>
 8006628:	a201      	add	r2, pc, #4	@ (adr r2, 8006630 <UART_SetConfig+0xf8>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006665 	.word	0x08006665
 8006634:	08006685 	.word	0x08006685
 8006638:	08006685 	.word	0x08006685
 800663c:	08006685 	.word	0x08006685
 8006640:	08006675 	.word	0x08006675
 8006644:	08006685 	.word	0x08006685
 8006648:	08006685 	.word	0x08006685
 800664c:	08006685 	.word	0x08006685
 8006650:	0800666d 	.word	0x0800666d
 8006654:	08006685 	.word	0x08006685
 8006658:	08006685 	.word	0x08006685
 800665c:	08006685 	.word	0x08006685
 8006660:	0800667d 	.word	0x0800667d
 8006664:	2300      	movs	r3, #0
 8006666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800666a:	e0d8      	b.n	800681e <UART_SetConfig+0x2e6>
 800666c:	2302      	movs	r3, #2
 800666e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006672:	e0d4      	b.n	800681e <UART_SetConfig+0x2e6>
 8006674:	2304      	movs	r3, #4
 8006676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800667a:	e0d0      	b.n	800681e <UART_SetConfig+0x2e6>
 800667c:	2308      	movs	r3, #8
 800667e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006682:	e0cc      	b.n	800681e <UART_SetConfig+0x2e6>
 8006684:	2310      	movs	r3, #16
 8006686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800668a:	e0c8      	b.n	800681e <UART_SetConfig+0x2e6>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a5e      	ldr	r2, [pc, #376]	@ (800680c <UART_SetConfig+0x2d4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d125      	bne.n	80066e2 <UART_SetConfig+0x1aa>
 8006696:	4b5b      	ldr	r3, [pc, #364]	@ (8006804 <UART_SetConfig+0x2cc>)
 8006698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800669c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80066a0:	2b30      	cmp	r3, #48	@ 0x30
 80066a2:	d016      	beq.n	80066d2 <UART_SetConfig+0x19a>
 80066a4:	2b30      	cmp	r3, #48	@ 0x30
 80066a6:	d818      	bhi.n	80066da <UART_SetConfig+0x1a2>
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	d00a      	beq.n	80066c2 <UART_SetConfig+0x18a>
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d814      	bhi.n	80066da <UART_SetConfig+0x1a2>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d002      	beq.n	80066ba <UART_SetConfig+0x182>
 80066b4:	2b10      	cmp	r3, #16
 80066b6:	d008      	beq.n	80066ca <UART_SetConfig+0x192>
 80066b8:	e00f      	b.n	80066da <UART_SetConfig+0x1a2>
 80066ba:	2300      	movs	r3, #0
 80066bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c0:	e0ad      	b.n	800681e <UART_SetConfig+0x2e6>
 80066c2:	2302      	movs	r3, #2
 80066c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066c8:	e0a9      	b.n	800681e <UART_SetConfig+0x2e6>
 80066ca:	2304      	movs	r3, #4
 80066cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066d0:	e0a5      	b.n	800681e <UART_SetConfig+0x2e6>
 80066d2:	2308      	movs	r3, #8
 80066d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066d8:	e0a1      	b.n	800681e <UART_SetConfig+0x2e6>
 80066da:	2310      	movs	r3, #16
 80066dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80066e0:	e09d      	b.n	800681e <UART_SetConfig+0x2e6>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a4a      	ldr	r2, [pc, #296]	@ (8006810 <UART_SetConfig+0x2d8>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d125      	bne.n	8006738 <UART_SetConfig+0x200>
 80066ec:	4b45      	ldr	r3, [pc, #276]	@ (8006804 <UART_SetConfig+0x2cc>)
 80066ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80066f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80066f8:	d016      	beq.n	8006728 <UART_SetConfig+0x1f0>
 80066fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80066fc:	d818      	bhi.n	8006730 <UART_SetConfig+0x1f8>
 80066fe:	2b80      	cmp	r3, #128	@ 0x80
 8006700:	d00a      	beq.n	8006718 <UART_SetConfig+0x1e0>
 8006702:	2b80      	cmp	r3, #128	@ 0x80
 8006704:	d814      	bhi.n	8006730 <UART_SetConfig+0x1f8>
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <UART_SetConfig+0x1d8>
 800670a:	2b40      	cmp	r3, #64	@ 0x40
 800670c:	d008      	beq.n	8006720 <UART_SetConfig+0x1e8>
 800670e:	e00f      	b.n	8006730 <UART_SetConfig+0x1f8>
 8006710:	2300      	movs	r3, #0
 8006712:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006716:	e082      	b.n	800681e <UART_SetConfig+0x2e6>
 8006718:	2302      	movs	r3, #2
 800671a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800671e:	e07e      	b.n	800681e <UART_SetConfig+0x2e6>
 8006720:	2304      	movs	r3, #4
 8006722:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006726:	e07a      	b.n	800681e <UART_SetConfig+0x2e6>
 8006728:	2308      	movs	r3, #8
 800672a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800672e:	e076      	b.n	800681e <UART_SetConfig+0x2e6>
 8006730:	2310      	movs	r3, #16
 8006732:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006736:	e072      	b.n	800681e <UART_SetConfig+0x2e6>
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	4a35      	ldr	r2, [pc, #212]	@ (8006814 <UART_SetConfig+0x2dc>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d12a      	bne.n	8006798 <UART_SetConfig+0x260>
 8006742:	4b30      	ldr	r3, [pc, #192]	@ (8006804 <UART_SetConfig+0x2cc>)
 8006744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006748:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800674c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006750:	d01a      	beq.n	8006788 <UART_SetConfig+0x250>
 8006752:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006756:	d81b      	bhi.n	8006790 <UART_SetConfig+0x258>
 8006758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800675c:	d00c      	beq.n	8006778 <UART_SetConfig+0x240>
 800675e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006762:	d815      	bhi.n	8006790 <UART_SetConfig+0x258>
 8006764:	2b00      	cmp	r3, #0
 8006766:	d003      	beq.n	8006770 <UART_SetConfig+0x238>
 8006768:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800676c:	d008      	beq.n	8006780 <UART_SetConfig+0x248>
 800676e:	e00f      	b.n	8006790 <UART_SetConfig+0x258>
 8006770:	2300      	movs	r3, #0
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006776:	e052      	b.n	800681e <UART_SetConfig+0x2e6>
 8006778:	2302      	movs	r3, #2
 800677a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800677e:	e04e      	b.n	800681e <UART_SetConfig+0x2e6>
 8006780:	2304      	movs	r3, #4
 8006782:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006786:	e04a      	b.n	800681e <UART_SetConfig+0x2e6>
 8006788:	2308      	movs	r3, #8
 800678a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800678e:	e046      	b.n	800681e <UART_SetConfig+0x2e6>
 8006790:	2310      	movs	r3, #16
 8006792:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006796:	e042      	b.n	800681e <UART_SetConfig+0x2e6>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a17      	ldr	r2, [pc, #92]	@ (80067fc <UART_SetConfig+0x2c4>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d13a      	bne.n	8006818 <UART_SetConfig+0x2e0>
 80067a2:	4b18      	ldr	r3, [pc, #96]	@ (8006804 <UART_SetConfig+0x2cc>)
 80067a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067b0:	d01a      	beq.n	80067e8 <UART_SetConfig+0x2b0>
 80067b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067b6:	d81b      	bhi.n	80067f0 <UART_SetConfig+0x2b8>
 80067b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067bc:	d00c      	beq.n	80067d8 <UART_SetConfig+0x2a0>
 80067be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067c2:	d815      	bhi.n	80067f0 <UART_SetConfig+0x2b8>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <UART_SetConfig+0x298>
 80067c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067cc:	d008      	beq.n	80067e0 <UART_SetConfig+0x2a8>
 80067ce:	e00f      	b.n	80067f0 <UART_SetConfig+0x2b8>
 80067d0:	2300      	movs	r3, #0
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d6:	e022      	b.n	800681e <UART_SetConfig+0x2e6>
 80067d8:	2302      	movs	r3, #2
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067de:	e01e      	b.n	800681e <UART_SetConfig+0x2e6>
 80067e0:	2304      	movs	r3, #4
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e6:	e01a      	b.n	800681e <UART_SetConfig+0x2e6>
 80067e8:	2308      	movs	r3, #8
 80067ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ee:	e016      	b.n	800681e <UART_SetConfig+0x2e6>
 80067f0:	2310      	movs	r3, #16
 80067f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067f6:	e012      	b.n	800681e <UART_SetConfig+0x2e6>
 80067f8:	efff69f3 	.word	0xefff69f3
 80067fc:	40008000 	.word	0x40008000
 8006800:	40013800 	.word	0x40013800
 8006804:	40021000 	.word	0x40021000
 8006808:	40004400 	.word	0x40004400
 800680c:	40004800 	.word	0x40004800
 8006810:	40004c00 	.word	0x40004c00
 8006814:	40005000 	.word	0x40005000
 8006818:	2310      	movs	r3, #16
 800681a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a9f      	ldr	r2, [pc, #636]	@ (8006aa0 <UART_SetConfig+0x568>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d17a      	bne.n	800691e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006828:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800682c:	2b08      	cmp	r3, #8
 800682e:	d824      	bhi.n	800687a <UART_SetConfig+0x342>
 8006830:	a201      	add	r2, pc, #4	@ (adr r2, 8006838 <UART_SetConfig+0x300>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	0800685d 	.word	0x0800685d
 800683c:	0800687b 	.word	0x0800687b
 8006840:	08006865 	.word	0x08006865
 8006844:	0800687b 	.word	0x0800687b
 8006848:	0800686b 	.word	0x0800686b
 800684c:	0800687b 	.word	0x0800687b
 8006850:	0800687b 	.word	0x0800687b
 8006854:	0800687b 	.word	0x0800687b
 8006858:	08006873 	.word	0x08006873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800685c:	f7fd ffe4 	bl	8004828 <HAL_RCC_GetPCLK1Freq>
 8006860:	61f8      	str	r0, [r7, #28]
        break;
 8006862:	e010      	b.n	8006886 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006864:	4b8f      	ldr	r3, [pc, #572]	@ (8006aa4 <UART_SetConfig+0x56c>)
 8006866:	61fb      	str	r3, [r7, #28]
        break;
 8006868:	e00d      	b.n	8006886 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800686a:	f7fd ff45 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 800686e:	61f8      	str	r0, [r7, #28]
        break;
 8006870:	e009      	b.n	8006886 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006872:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006876:	61fb      	str	r3, [r7, #28]
        break;
 8006878:	e005      	b.n	8006886 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006884:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 80fb 	beq.w	8006a84 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	685a      	ldr	r2, [r3, #4]
 8006892:	4613      	mov	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	4413      	add	r3, r2
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	429a      	cmp	r2, r3
 800689c:	d305      	bcc.n	80068aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d903      	bls.n	80068b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80068b0:	e0e8      	b.n	8006a84 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80068b2:	69fb      	ldr	r3, [r7, #28]
 80068b4:	2200      	movs	r2, #0
 80068b6:	461c      	mov	r4, r3
 80068b8:	4615      	mov	r5, r2
 80068ba:	f04f 0200 	mov.w	r2, #0
 80068be:	f04f 0300 	mov.w	r3, #0
 80068c2:	022b      	lsls	r3, r5, #8
 80068c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80068c8:	0222      	lsls	r2, r4, #8
 80068ca:	68f9      	ldr	r1, [r7, #12]
 80068cc:	6849      	ldr	r1, [r1, #4]
 80068ce:	0849      	lsrs	r1, r1, #1
 80068d0:	2000      	movs	r0, #0
 80068d2:	4688      	mov	r8, r1
 80068d4:	4681      	mov	r9, r0
 80068d6:	eb12 0a08 	adds.w	sl, r2, r8
 80068da:	eb43 0b09 	adc.w	fp, r3, r9
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	603b      	str	r3, [r7, #0]
 80068e6:	607a      	str	r2, [r7, #4]
 80068e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068ec:	4650      	mov	r0, sl
 80068ee:	4659      	mov	r1, fp
 80068f0:	f7f9 ff7c 	bl	80007ec <__aeabi_uldivmod>
 80068f4:	4602      	mov	r2, r0
 80068f6:	460b      	mov	r3, r1
 80068f8:	4613      	mov	r3, r2
 80068fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006902:	d308      	bcc.n	8006916 <UART_SetConfig+0x3de>
 8006904:	69bb      	ldr	r3, [r7, #24]
 8006906:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800690a:	d204      	bcs.n	8006916 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	69ba      	ldr	r2, [r7, #24]
 8006912:	60da      	str	r2, [r3, #12]
 8006914:	e0b6      	b.n	8006a84 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800691c:	e0b2      	b.n	8006a84 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	69db      	ldr	r3, [r3, #28]
 8006922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006926:	d15e      	bne.n	80069e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006928:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800692c:	2b08      	cmp	r3, #8
 800692e:	d828      	bhi.n	8006982 <UART_SetConfig+0x44a>
 8006930:	a201      	add	r2, pc, #4	@ (adr r2, 8006938 <UART_SetConfig+0x400>)
 8006932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006936:	bf00      	nop
 8006938:	0800695d 	.word	0x0800695d
 800693c:	08006965 	.word	0x08006965
 8006940:	0800696d 	.word	0x0800696d
 8006944:	08006983 	.word	0x08006983
 8006948:	08006973 	.word	0x08006973
 800694c:	08006983 	.word	0x08006983
 8006950:	08006983 	.word	0x08006983
 8006954:	08006983 	.word	0x08006983
 8006958:	0800697b 	.word	0x0800697b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800695c:	f7fd ff64 	bl	8004828 <HAL_RCC_GetPCLK1Freq>
 8006960:	61f8      	str	r0, [r7, #28]
        break;
 8006962:	e014      	b.n	800698e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006964:	f7fd ff76 	bl	8004854 <HAL_RCC_GetPCLK2Freq>
 8006968:	61f8      	str	r0, [r7, #28]
        break;
 800696a:	e010      	b.n	800698e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800696c:	4b4d      	ldr	r3, [pc, #308]	@ (8006aa4 <UART_SetConfig+0x56c>)
 800696e:	61fb      	str	r3, [r7, #28]
        break;
 8006970:	e00d      	b.n	800698e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006972:	f7fd fec1 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8006976:	61f8      	str	r0, [r7, #28]
        break;
 8006978:	e009      	b.n	800698e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800697a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800697e:	61fb      	str	r3, [r7, #28]
        break;
 8006980:	e005      	b.n	800698e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800698c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d077      	beq.n	8006a84 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006994:	69fb      	ldr	r3, [r7, #28]
 8006996:	005a      	lsls	r2, r3, #1
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	685b      	ldr	r3, [r3, #4]
 800699c:	085b      	lsrs	r3, r3, #1
 800699e:	441a      	add	r2, r3
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	2b0f      	cmp	r3, #15
 80069ae:	d916      	bls.n	80069de <UART_SetConfig+0x4a6>
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80069b6:	d212      	bcs.n	80069de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	b29b      	uxth	r3, r3
 80069bc:	f023 030f 	bic.w	r3, r3, #15
 80069c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	085b      	lsrs	r3, r3, #1
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	8afb      	ldrh	r3, [r7, #22]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	8afa      	ldrh	r2, [r7, #22]
 80069da:	60da      	str	r2, [r3, #12]
 80069dc:	e052      	b.n	8006a84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80069e4:	e04e      	b.n	8006a84 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d827      	bhi.n	8006a3e <UART_SetConfig+0x506>
 80069ee:	a201      	add	r2, pc, #4	@ (adr r2, 80069f4 <UART_SetConfig+0x4bc>)
 80069f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f4:	08006a19 	.word	0x08006a19
 80069f8:	08006a21 	.word	0x08006a21
 80069fc:	08006a29 	.word	0x08006a29
 8006a00:	08006a3f 	.word	0x08006a3f
 8006a04:	08006a2f 	.word	0x08006a2f
 8006a08:	08006a3f 	.word	0x08006a3f
 8006a0c:	08006a3f 	.word	0x08006a3f
 8006a10:	08006a3f 	.word	0x08006a3f
 8006a14:	08006a37 	.word	0x08006a37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a18:	f7fd ff06 	bl	8004828 <HAL_RCC_GetPCLK1Freq>
 8006a1c:	61f8      	str	r0, [r7, #28]
        break;
 8006a1e:	e014      	b.n	8006a4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a20:	f7fd ff18 	bl	8004854 <HAL_RCC_GetPCLK2Freq>
 8006a24:	61f8      	str	r0, [r7, #28]
        break;
 8006a26:	e010      	b.n	8006a4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a28:	4b1e      	ldr	r3, [pc, #120]	@ (8006aa4 <UART_SetConfig+0x56c>)
 8006a2a:	61fb      	str	r3, [r7, #28]
        break;
 8006a2c:	e00d      	b.n	8006a4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a2e:	f7fd fe63 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 8006a32:	61f8      	str	r0, [r7, #28]
        break;
 8006a34:	e009      	b.n	8006a4a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a3a:	61fb      	str	r3, [r7, #28]
        break;
 8006a3c:	e005      	b.n	8006a4a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006a48:	bf00      	nop
    }

    if (pclk != 0U)
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d019      	beq.n	8006a84 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	085a      	lsrs	r2, r3, #1
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	441a      	add	r2, r3
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a62:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	2b0f      	cmp	r3, #15
 8006a68:	d909      	bls.n	8006a7e <UART_SetConfig+0x546>
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a70:	d205      	bcs.n	8006a7e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60da      	str	r2, [r3, #12]
 8006a7c:	e002      	b.n	8006a84 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006a90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3728      	adds	r7, #40	@ 0x28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a9e:	bf00      	nop
 8006aa0:	40008000 	.word	0x40008000
 8006aa4:	00f42400 	.word	0x00f42400

08006aa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b083      	sub	sp, #12
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab4:	f003 0308 	and.w	r3, r3, #8
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af8:	f003 0302 	and.w	r3, r3, #2
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00a      	beq.n	8006b16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1a:	f003 0304 	and.w	r3, r3, #4
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b3c:	f003 0310 	and.w	r3, r3, #16
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00a      	beq.n	8006b5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b5e:	f003 0320 	and.w	r3, r3, #32
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d01a      	beq.n	8006bbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ba2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ba6:	d10a      	bne.n	8006bbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	430a      	orrs	r2, r1
 8006bbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00a      	beq.n	8006be0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	430a      	orrs	r2, r1
 8006bde:	605a      	str	r2, [r3, #4]
  }
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b098      	sub	sp, #96	@ 0x60
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006bfc:	f7fc fd4e 	bl	800369c <HAL_GetTick>
 8006c00:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0308 	and.w	r3, r3, #8
 8006c0c:	2b08      	cmp	r3, #8
 8006c0e:	d12e      	bne.n	8006c6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c10:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f88c 	bl	8006d3c <UART_WaitOnFlagUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d021      	beq.n	8006c6e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	e853 3f00 	ldrex	r3, [r3]
 8006c36:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c3e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	461a      	mov	r2, r3
 8006c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c48:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c4a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006c4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006c50:	e841 2300 	strex	r3, r2, [r1]
 8006c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1e6      	bne.n	8006c2a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2220      	movs	r2, #32
 8006c60:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e062      	b.n	8006d34 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d149      	bne.n	8006d10 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006c84:	2200      	movs	r2, #0
 8006c86:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f856 	bl	8006d3c <UART_WaitOnFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d03c      	beq.n	8006d10 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8006cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006cba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e6      	bne.n	8006c96 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	e853 3f00 	ldrex	r3, [r3]
 8006cd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f023 0301 	bic.w	r3, r3, #1
 8006cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ce8:	61fa      	str	r2, [r7, #28]
 8006cea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cec:	69b9      	ldr	r1, [r7, #24]
 8006cee:	69fa      	ldr	r2, [r7, #28]
 8006cf0:	e841 2300 	strex	r3, r2, [r1]
 8006cf4:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d1e5      	bne.n	8006cc8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2220      	movs	r2, #32
 8006d00:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e011      	b.n	8006d34 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2220      	movs	r2, #32
 8006d1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	3758      	adds	r7, #88	@ 0x58
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}

08006d3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	603b      	str	r3, [r7, #0]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d4c:	e04f      	b.n	8006dee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d4e:	69bb      	ldr	r3, [r7, #24]
 8006d50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d54:	d04b      	beq.n	8006dee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d56:	f7fc fca1 	bl	800369c <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	1ad3      	subs	r3, r2, r3
 8006d60:	69ba      	ldr	r2, [r7, #24]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d302      	bcc.n	8006d6c <UART_WaitOnFlagUntilTimeout+0x30>
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d101      	bne.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e04e      	b.n	8006e0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0304 	and.w	r3, r3, #4
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d037      	beq.n	8006dee <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2b80      	cmp	r3, #128	@ 0x80
 8006d82:	d034      	beq.n	8006dee <UART_WaitOnFlagUntilTimeout+0xb2>
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	2b40      	cmp	r3, #64	@ 0x40
 8006d88:	d031      	beq.n	8006dee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	69db      	ldr	r3, [r3, #28]
 8006d90:	f003 0308 	and.w	r3, r3, #8
 8006d94:	2b08      	cmp	r3, #8
 8006d96:	d110      	bne.n	8006dba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2208      	movs	r2, #8
 8006d9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f838 	bl	8006e16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2208      	movs	r2, #8
 8006daa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	e029      	b.n	8006e0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	69db      	ldr	r3, [r3, #28]
 8006dc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dc8:	d111      	bne.n	8006dee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006dd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f000 f81e 	bl	8006e16 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e00f      	b.n	8006e0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	69da      	ldr	r2, [r3, #28]
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	4013      	ands	r3, r2
 8006df8:	68ba      	ldr	r2, [r7, #8]
 8006dfa:	429a      	cmp	r2, r3
 8006dfc:	bf0c      	ite	eq
 8006dfe:	2301      	moveq	r3, #1
 8006e00:	2300      	movne	r3, #0
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	79fb      	ldrb	r3, [r7, #7]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d0a0      	beq.n	8006d4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e0c:	2300      	movs	r3, #0
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}

08006e16 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b095      	sub	sp, #84	@ 0x54
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e26:	e853 3f00 	ldrex	r3, [r3]
 8006e2a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	461a      	mov	r2, r3
 8006e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e3e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e40:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006e42:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e44:	e841 2300 	strex	r3, r2, [r1]
 8006e48:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e6      	bne.n	8006e1e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3308      	adds	r3, #8
 8006e56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	6a3b      	ldr	r3, [r7, #32]
 8006e5a:	e853 3f00 	ldrex	r3, [r3]
 8006e5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f023 0301 	bic.w	r3, r3, #1
 8006e66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006e72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e78:	e841 2300 	strex	r3, r2, [r1]
 8006e7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1e5      	bne.n	8006e50 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d118      	bne.n	8006ebe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	e853 3f00 	ldrex	r3, [r3]
 8006e98:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e9a:	68bb      	ldr	r3, [r7, #8]
 8006e9c:	f023 0310 	bic.w	r3, r3, #16
 8006ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eaa:	61bb      	str	r3, [r7, #24]
 8006eac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eae:	6979      	ldr	r1, [r7, #20]
 8006eb0:	69ba      	ldr	r2, [r7, #24]
 8006eb2:	e841 2300 	strex	r3, r2, [r1]
 8006eb6:	613b      	str	r3, [r7, #16]
   return(result);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1e6      	bne.n	8006e8c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2220      	movs	r2, #32
 8006ec2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006ed2:	bf00      	nop
 8006ed4:	3754      	adds	r7, #84	@ 0x54
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
	...

08006ee0 <__NVIC_SetPriority>:
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	6039      	str	r1, [r7, #0]
 8006eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	db0a      	blt.n	8006f0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	b2da      	uxtb	r2, r3
 8006ef8:	490c      	ldr	r1, [pc, #48]	@ (8006f2c <__NVIC_SetPriority+0x4c>)
 8006efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006efe:	0112      	lsls	r2, r2, #4
 8006f00:	b2d2      	uxtb	r2, r2
 8006f02:	440b      	add	r3, r1
 8006f04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006f08:	e00a      	b.n	8006f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	4908      	ldr	r1, [pc, #32]	@ (8006f30 <__NVIC_SetPriority+0x50>)
 8006f10:	79fb      	ldrb	r3, [r7, #7]
 8006f12:	f003 030f 	and.w	r3, r3, #15
 8006f16:	3b04      	subs	r3, #4
 8006f18:	0112      	lsls	r2, r2, #4
 8006f1a:	b2d2      	uxtb	r2, r2
 8006f1c:	440b      	add	r3, r1
 8006f1e:	761a      	strb	r2, [r3, #24]
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr
 8006f2c:	e000e100 	.word	0xe000e100
 8006f30:	e000ed00 	.word	0xe000ed00

08006f34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006f34:	b580      	push	{r7, lr}
 8006f36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006f38:	4b05      	ldr	r3, [pc, #20]	@ (8006f50 <SysTick_Handler+0x1c>)
 8006f3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006f3c:	f001 fe4a 	bl	8008bd4 <xTaskGetSchedulerState>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d001      	beq.n	8006f4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006f46:	f002 fcff 	bl	8009948 <xPortSysTickHandler>
  }
}
 8006f4a:	bf00      	nop
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	e000e010 	.word	0xe000e010

08006f54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006f58:	2100      	movs	r1, #0
 8006f5a:	f06f 0004 	mvn.w	r0, #4
 8006f5e:	f7ff ffbf 	bl	8006ee0 <__NVIC_SetPriority>
#endif
}
 8006f62:	bf00      	nop
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f6e:	f3ef 8305 	mrs	r3, IPSR
 8006f72:	603b      	str	r3, [r7, #0]
  return(result);
 8006f74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006f7a:	f06f 0305 	mvn.w	r3, #5
 8006f7e:	607b      	str	r3, [r7, #4]
 8006f80:	e00c      	b.n	8006f9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f82:	4b0a      	ldr	r3, [pc, #40]	@ (8006fac <osKernelInitialize+0x44>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d105      	bne.n	8006f96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f8a:	4b08      	ldr	r3, [pc, #32]	@ (8006fac <osKernelInitialize+0x44>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f90:	2300      	movs	r3, #0
 8006f92:	607b      	str	r3, [r7, #4]
 8006f94:	e002      	b.n	8006f9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006f96:	f04f 33ff 	mov.w	r3, #4294967295
 8006f9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f9c:	687b      	ldr	r3, [r7, #4]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	370c      	adds	r7, #12
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	200003f0 	.word	0x200003f0

08006fb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b082      	sub	sp, #8
 8006fb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fb6:	f3ef 8305 	mrs	r3, IPSR
 8006fba:	603b      	str	r3, [r7, #0]
  return(result);
 8006fbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <osKernelStart+0x1a>
    stat = osErrorISR;
 8006fc2:	f06f 0305 	mvn.w	r3, #5
 8006fc6:	607b      	str	r3, [r7, #4]
 8006fc8:	e010      	b.n	8006fec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006fca:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff8 <osKernelStart+0x48>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d109      	bne.n	8006fe6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006fd2:	f7ff ffbf 	bl	8006f54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006fd6:	4b08      	ldr	r3, [pc, #32]	@ (8006ff8 <osKernelStart+0x48>)
 8006fd8:	2202      	movs	r2, #2
 8006fda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006fdc:	f001 f9ac 	bl	8008338 <vTaskStartScheduler>
      stat = osOK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	607b      	str	r3, [r7, #4]
 8006fe4:	e002      	b.n	8006fec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8006fea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006fec:	687b      	ldr	r3, [r7, #4]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	200003f0 	.word	0x200003f0

08006ffc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08e      	sub	sp, #56	@ 0x38
 8007000:	af04      	add	r7, sp, #16
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007008:	2300      	movs	r3, #0
 800700a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800700c:	f3ef 8305 	mrs	r3, IPSR
 8007010:	617b      	str	r3, [r7, #20]
  return(result);
 8007012:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007014:	2b00      	cmp	r3, #0
 8007016:	d17e      	bne.n	8007116 <osThreadNew+0x11a>
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d07b      	beq.n	8007116 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800701e:	2380      	movs	r3, #128	@ 0x80
 8007020:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007022:	2318      	movs	r3, #24
 8007024:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007026:	2300      	movs	r3, #0
 8007028:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800702a:	f04f 33ff 	mov.w	r3, #4294967295
 800702e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d045      	beq.n	80070c2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d002      	beq.n	8007044 <osThreadNew+0x48>
        name = attr->name;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	699b      	ldr	r3, [r3, #24]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d002      	beq.n	8007052 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d008      	beq.n	800706a <osThreadNew+0x6e>
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	2b38      	cmp	r3, #56	@ 0x38
 800705c:	d805      	bhi.n	800706a <osThreadNew+0x6e>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <osThreadNew+0x72>
        return (NULL);
 800706a:	2300      	movs	r3, #0
 800706c:	e054      	b.n	8007118 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	695b      	ldr	r3, [r3, #20]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d003      	beq.n	800707e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	089b      	lsrs	r3, r3, #2
 800707c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d00e      	beq.n	80070a4 <osThreadNew+0xa8>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	2b5b      	cmp	r3, #91	@ 0x5b
 800708c:	d90a      	bls.n	80070a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007092:	2b00      	cmp	r3, #0
 8007094:	d006      	beq.n	80070a4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <osThreadNew+0xa8>
        mem = 1;
 800709e:	2301      	movs	r3, #1
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	e010      	b.n	80070c6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d10c      	bne.n	80070c6 <osThreadNew+0xca>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d108      	bne.n	80070c6 <osThreadNew+0xca>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d104      	bne.n	80070c6 <osThreadNew+0xca>
          mem = 0;
 80070bc:	2300      	movs	r3, #0
 80070be:	61bb      	str	r3, [r7, #24]
 80070c0:	e001      	b.n	80070c6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d110      	bne.n	80070ee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80070d4:	9202      	str	r2, [sp, #8]
 80070d6:	9301      	str	r3, [sp, #4]
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	6a3a      	ldr	r2, [r7, #32]
 80070e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 fed8 	bl	8007e98 <xTaskCreateStatic>
 80070e8:	4603      	mov	r3, r0
 80070ea:	613b      	str	r3, [r7, #16]
 80070ec:	e013      	b.n	8007116 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d110      	bne.n	8007116 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80070f4:	6a3b      	ldr	r3, [r7, #32]
 80070f6:	b29a      	uxth	r2, r3
 80070f8:	f107 0310 	add.w	r3, r7, #16
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 ff26 	bl	8007f58 <xTaskCreate>
 800710c:	4603      	mov	r3, r0
 800710e:	2b01      	cmp	r3, #1
 8007110:	d001      	beq.n	8007116 <osThreadNew+0x11a>
            hTask = NULL;
 8007112:	2300      	movs	r3, #0
 8007114:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007116:	693b      	ldr	r3, [r7, #16]
}
 8007118:	4618      	mov	r0, r3
 800711a:	3728      	adds	r7, #40	@ 0x28
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007128:	f3ef 8305 	mrs	r3, IPSR
 800712c:	60bb      	str	r3, [r7, #8]
  return(result);
 800712e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007130:	2b00      	cmp	r3, #0
 8007132:	d003      	beq.n	800713c <osDelay+0x1c>
    stat = osErrorISR;
 8007134:	f06f 0305 	mvn.w	r3, #5
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	e007      	b.n	800714c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d002      	beq.n	800714c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f001 f8c0 	bl	80082cc <vTaskDelay>
    }
  }

  return (stat);
 800714c:	68fb      	ldr	r3, [r7, #12]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3710      	adds	r7, #16
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}

08007156 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f002 fa12 	bl	8009588 <pvTimerGetTimerID>
 8007164:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <TimerCallback+0x22>
    callb->func (callb->arg);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68fa      	ldr	r2, [r7, #12]
 8007172:	6852      	ldr	r2, [r2, #4]
 8007174:	4610      	mov	r0, r2
 8007176:	4798      	blx	r3
  }
}
 8007178:	bf00      	nop
 800717a:	3710      	adds	r7, #16
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b08c      	sub	sp, #48	@ 0x30
 8007184:	af02      	add	r7, sp, #8
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	607a      	str	r2, [r7, #4]
 800718a:	603b      	str	r3, [r7, #0]
 800718c:	460b      	mov	r3, r1
 800718e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8007190:	2300      	movs	r3, #0
 8007192:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007194:	f3ef 8305 	mrs	r3, IPSR
 8007198:	613b      	str	r3, [r7, #16]
  return(result);
 800719a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800719c:	2b00      	cmp	r3, #0
 800719e:	d163      	bne.n	8007268 <osTimerNew+0xe8>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d060      	beq.n	8007268 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80071a6:	2008      	movs	r0, #8
 80071a8:	f002 fc60 	bl	8009a6c <pvPortMalloc>
 80071ac:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d059      	beq.n	8007268 <osTimerNew+0xe8>
      callb->func = func;
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	68fa      	ldr	r2, [r7, #12]
 80071b8:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80071c0:	7afb      	ldrb	r3, [r7, #11]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d102      	bne.n	80071cc <osTimerNew+0x4c>
        reload = pdFALSE;
 80071c6:	2300      	movs	r3, #0
 80071c8:	61fb      	str	r3, [r7, #28]
 80071ca:	e001      	b.n	80071d0 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80071cc:	2301      	movs	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80071d0:	f04f 33ff 	mov.w	r3, #4294967295
 80071d4:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d01c      	beq.n	800721a <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <osTimerNew+0x6e>
          name = attr->name;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80071ee:	683b      	ldr	r3, [r7, #0]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d006      	beq.n	8007204 <osTimerNew+0x84>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	2b2b      	cmp	r3, #43	@ 0x2b
 80071fc:	d902      	bls.n	8007204 <osTimerNew+0x84>
          mem = 1;
 80071fe:	2301      	movs	r3, #1
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	e00c      	b.n	800721e <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	689b      	ldr	r3, [r3, #8]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d108      	bne.n	800721e <osTimerNew+0x9e>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	68db      	ldr	r3, [r3, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <osTimerNew+0x9e>
            mem = 0;
 8007214:	2300      	movs	r3, #0
 8007216:	61bb      	str	r3, [r7, #24]
 8007218:	e001      	b.n	800721e <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800721a:	2300      	movs	r3, #0
 800721c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	2b01      	cmp	r3, #1
 8007222:	d10c      	bne.n	800723e <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	9301      	str	r3, [sp, #4]
 800722a:	4b12      	ldr	r3, [pc, #72]	@ (8007274 <osTimerNew+0xf4>)
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	69fa      	ldr	r2, [r7, #28]
 8007232:	2101      	movs	r1, #1
 8007234:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007236:	f001 fe1a 	bl	8008e6e <xTimerCreateStatic>
 800723a:	6238      	str	r0, [r7, #32]
 800723c:	e00b      	b.n	8007256 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d108      	bne.n	8007256 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8007244:	4b0b      	ldr	r3, [pc, #44]	@ (8007274 <osTimerNew+0xf4>)
 8007246:	9300      	str	r3, [sp, #0]
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	2101      	movs	r1, #1
 800724e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007250:	f001 fdec 	bl	8008e2c <xTimerCreate>
 8007254:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8007256:	6a3b      	ldr	r3, [r7, #32]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d105      	bne.n	8007268 <osTimerNew+0xe8>
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d002      	beq.n	8007268 <osTimerNew+0xe8>
        vPortFree (callb);
 8007262:	6978      	ldr	r0, [r7, #20]
 8007264:	f002 fcd0 	bl	8009c08 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8007268:	6a3b      	ldr	r3, [r7, #32]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3728      	adds	r7, #40	@ 0x28
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	08007157 	.word	0x08007157

08007278 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8007278:	b580      	push	{r7, lr}
 800727a:	b088      	sub	sp, #32
 800727c:	af02      	add	r7, sp, #8
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007286:	f3ef 8305 	mrs	r3, IPSR
 800728a:	60fb      	str	r3, [r7, #12]
  return(result);
 800728c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <osTimerStart+0x22>
    stat = osErrorISR;
 8007292:	f06f 0305 	mvn.w	r3, #5
 8007296:	617b      	str	r3, [r7, #20]
 8007298:	e017      	b.n	80072ca <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d103      	bne.n	80072a8 <osTimerStart+0x30>
    stat = osErrorParameter;
 80072a0:	f06f 0303 	mvn.w	r3, #3
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	e010      	b.n	80072ca <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80072a8:	2300      	movs	r3, #0
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	2300      	movs	r3, #0
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	2104      	movs	r1, #4
 80072b2:	6938      	ldr	r0, [r7, #16]
 80072b4:	f001 fe58 	bl	8008f68 <xTimerGenericCommand>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d102      	bne.n	80072c4 <osTimerStart+0x4c>
      stat = osOK;
 80072be:	2300      	movs	r3, #0
 80072c0:	617b      	str	r3, [r7, #20]
 80072c2:	e002      	b.n	80072ca <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80072c4:	f06f 0302 	mvn.w	r3, #2
 80072c8:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80072ca:	697b      	ldr	r3, [r7, #20]
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3718      	adds	r7, #24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80072d4:	b480      	push	{r7}
 80072d6:	b085      	sub	sp, #20
 80072d8:	af00      	add	r7, sp, #0
 80072da:	60f8      	str	r0, [r7, #12]
 80072dc:	60b9      	str	r1, [r7, #8]
 80072de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4a07      	ldr	r2, [pc, #28]	@ (8007300 <vApplicationGetIdleTaskMemory+0x2c>)
 80072e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	4a06      	ldr	r2, [pc, #24]	@ (8007304 <vApplicationGetIdleTaskMemory+0x30>)
 80072ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2280      	movs	r2, #128	@ 0x80
 80072f0:	601a      	str	r2, [r3, #0]
}
 80072f2:	bf00      	nop
 80072f4:	3714      	adds	r7, #20
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr
 80072fe:	bf00      	nop
 8007300:	200003f4 	.word	0x200003f4
 8007304:	20000450 	.word	0x20000450

08007308 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	4a07      	ldr	r2, [pc, #28]	@ (8007334 <vApplicationGetTimerTaskMemory+0x2c>)
 8007318:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	4a06      	ldr	r2, [pc, #24]	@ (8007338 <vApplicationGetTimerTaskMemory+0x30>)
 800731e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007326:	601a      	str	r2, [r3, #0]
}
 8007328:	bf00      	nop
 800732a:	3714      	adds	r7, #20
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	20000650 	.word	0x20000650
 8007338:	200006ac 	.word	0x200006ac

0800733c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f103 0208 	add.w	r2, r3, #8
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f04f 32ff 	mov.w	r2, #4294967295
 8007354:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f103 0208 	add.w	r2, r3, #8
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f103 0208 	add.w	r2, r3, #8
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800738a:	bf00      	nop
 800738c:	370c      	adds	r7, #12
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr

08007396 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007396:	b480      	push	{r7}
 8007398:	b085      	sub	sp, #20
 800739a:	af00      	add	r7, sp, #0
 800739c:	6078      	str	r0, [r7, #4]
 800739e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	689a      	ldr	r2, [r3, #8]
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	683a      	ldr	r2, [r7, #0]
 80073c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	1c5a      	adds	r2, r3, #1
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	601a      	str	r2, [r3, #0]
}
 80073d2:	bf00      	nop
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073de:	b480      	push	{r7}
 80073e0:	b085      	sub	sp, #20
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f4:	d103      	bne.n	80073fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	691b      	ldr	r3, [r3, #16]
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	e00c      	b.n	8007418 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3308      	adds	r3, #8
 8007402:	60fb      	str	r3, [r7, #12]
 8007404:	e002      	b.n	800740c <vListInsert+0x2e>
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	60fb      	str	r3, [r7, #12]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	429a      	cmp	r2, r3
 8007416:	d2f6      	bcs.n	8007406 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	683a      	ldr	r2, [r7, #0]
 8007426:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	683a      	ldr	r2, [r7, #0]
 8007432:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	1c5a      	adds	r2, r3, #1
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	601a      	str	r2, [r3, #0]
}
 8007444:	bf00      	nop
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	691b      	ldr	r3, [r3, #16]
 800745c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6892      	ldr	r2, [r2, #8]
 8007466:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	6852      	ldr	r2, [r2, #4]
 8007470:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	687a      	ldr	r2, [r7, #4]
 8007478:	429a      	cmp	r2, r3
 800747a:	d103      	bne.n	8007484 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	689a      	ldr	r2, [r3, #8]
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	1e5a      	subs	r2, r3, #1
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	681b      	ldr	r3, [r3, #0]
}
 8007498:	4618      	mov	r0, r3
 800749a:	3714      	adds	r7, #20
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b084      	sub	sp, #16
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10b      	bne.n	80074d0 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	e7fd      	b.n	80074cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80074d0:	f002 f9aa 	bl	8009828 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681a      	ldr	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074dc:	68f9      	ldr	r1, [r7, #12]
 80074de:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80074e0:	fb01 f303 	mul.w	r3, r1, r3
 80074e4:	441a      	add	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2200      	movs	r2, #0
 80074ee:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007500:	3b01      	subs	r3, #1
 8007502:	68f9      	ldr	r1, [r7, #12]
 8007504:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007506:	fb01 f303 	mul.w	r3, r1, r3
 800750a:	441a      	add	r2, r3
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	22ff      	movs	r2, #255	@ 0xff
 8007514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	22ff      	movs	r2, #255	@ 0xff
 800751c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d114      	bne.n	8007550 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d01a      	beq.n	8007564 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3310      	adds	r3, #16
 8007532:	4618      	mov	r0, r3
 8007534:	f001 f98e 	bl	8008854 <xTaskRemoveFromEventList>
 8007538:	4603      	mov	r3, r0
 800753a:	2b00      	cmp	r3, #0
 800753c:	d012      	beq.n	8007564 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800753e:	4b0d      	ldr	r3, [pc, #52]	@ (8007574 <xQueueGenericReset+0xd0>)
 8007540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007544:	601a      	str	r2, [r3, #0]
 8007546:	f3bf 8f4f 	dsb	sy
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	e009      	b.n	8007564 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	3310      	adds	r3, #16
 8007554:	4618      	mov	r0, r3
 8007556:	f7ff fef1 	bl	800733c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3324      	adds	r3, #36	@ 0x24
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff feec 	bl	800733c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007564:	f002 f992 	bl	800988c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007568:	2301      	movs	r3, #1
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	e000ed04 	.word	0xe000ed04

08007578 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08e      	sub	sp, #56	@ 0x38
 800757c:	af02      	add	r7, sp, #8
 800757e:	60f8      	str	r0, [r7, #12]
 8007580:	60b9      	str	r1, [r7, #8]
 8007582:	607a      	str	r2, [r7, #4]
 8007584:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d10b      	bne.n	80075a4 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800758c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007590:	f383 8811 	msr	BASEPRI, r3
 8007594:	f3bf 8f6f 	isb	sy
 8007598:	f3bf 8f4f 	dsb	sy
 800759c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800759e:	bf00      	nop
 80075a0:	bf00      	nop
 80075a2:	e7fd      	b.n	80075a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d10b      	bne.n	80075c2 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80075aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ae:	f383 8811 	msr	BASEPRI, r3
 80075b2:	f3bf 8f6f 	isb	sy
 80075b6:	f3bf 8f4f 	dsb	sy
 80075ba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80075bc:	bf00      	nop
 80075be:	bf00      	nop
 80075c0:	e7fd      	b.n	80075be <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d002      	beq.n	80075ce <xQueueGenericCreateStatic+0x56>
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d001      	beq.n	80075d2 <xQueueGenericCreateStatic+0x5a>
 80075ce:	2301      	movs	r3, #1
 80075d0:	e000      	b.n	80075d4 <xQueueGenericCreateStatic+0x5c>
 80075d2:	2300      	movs	r3, #0
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10b      	bne.n	80075f0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	623b      	str	r3, [r7, #32]
}
 80075ea:	bf00      	nop
 80075ec:	bf00      	nop
 80075ee:	e7fd      	b.n	80075ec <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <xQueueGenericCreateStatic+0x84>
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d101      	bne.n	8007600 <xQueueGenericCreateStatic+0x88>
 80075fc:	2301      	movs	r3, #1
 80075fe:	e000      	b.n	8007602 <xQueueGenericCreateStatic+0x8a>
 8007600:	2300      	movs	r3, #0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d10b      	bne.n	800761e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760a:	f383 8811 	msr	BASEPRI, r3
 800760e:	f3bf 8f6f 	isb	sy
 8007612:	f3bf 8f4f 	dsb	sy
 8007616:	61fb      	str	r3, [r7, #28]
}
 8007618:	bf00      	nop
 800761a:	bf00      	nop
 800761c:	e7fd      	b.n	800761a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800761e:	2350      	movs	r3, #80	@ 0x50
 8007620:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2b50      	cmp	r3, #80	@ 0x50
 8007626:	d00b      	beq.n	8007640 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	61bb      	str	r3, [r7, #24]
}
 800763a:	bf00      	nop
 800763c:	bf00      	nop
 800763e:	e7fd      	b.n	800763c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007640:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007648:	2b00      	cmp	r3, #0
 800764a:	d00d      	beq.n	8007668 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800764c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800764e:	2201      	movs	r2, #1
 8007650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007654:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	4613      	mov	r3, r2
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 f805 	bl	8007672 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007668:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800766a:	4618      	mov	r0, r3
 800766c:	3730      	adds	r7, #48	@ 0x30
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
 800767e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d103      	bne.n	800768e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	69ba      	ldr	r2, [r7, #24]
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	e002      	b.n	8007694 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800768e:	69bb      	ldr	r3, [r7, #24]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800769a:	69bb      	ldr	r3, [r7, #24]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80076a0:	2101      	movs	r1, #1
 80076a2:	69b8      	ldr	r0, [r7, #24]
 80076a4:	f7ff fefe 	bl	80074a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	78fa      	ldrb	r2, [r7, #3]
 80076ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80076b0:	bf00      	nop
 80076b2:	3710      	adds	r7, #16
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}

080076b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b08e      	sub	sp, #56	@ 0x38
 80076bc:	af00      	add	r7, sp, #0
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
 80076c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80076c6:	2300      	movs	r3, #0
 80076c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80076ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10b      	bne.n	80076ec <xQueueGenericSend+0x34>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d8:	f383 8811 	msr	BASEPRI, r3
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80076e6:	bf00      	nop
 80076e8:	bf00      	nop
 80076ea:	e7fd      	b.n	80076e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <xQueueGenericSend+0x42>
 80076f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <xQueueGenericSend+0x46>
 80076fa:	2301      	movs	r3, #1
 80076fc:	e000      	b.n	8007700 <xQueueGenericSend+0x48>
 80076fe:	2300      	movs	r3, #0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10b      	bne.n	800771c <xQueueGenericSend+0x64>
	__asm volatile
 8007704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007708:	f383 8811 	msr	BASEPRI, r3
 800770c:	f3bf 8f6f 	isb	sy
 8007710:	f3bf 8f4f 	dsb	sy
 8007714:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007716:	bf00      	nop
 8007718:	bf00      	nop
 800771a:	e7fd      	b.n	8007718 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d103      	bne.n	800772a <xQueueGenericSend+0x72>
 8007722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007726:	2b01      	cmp	r3, #1
 8007728:	d101      	bne.n	800772e <xQueueGenericSend+0x76>
 800772a:	2301      	movs	r3, #1
 800772c:	e000      	b.n	8007730 <xQueueGenericSend+0x78>
 800772e:	2300      	movs	r3, #0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10b      	bne.n	800774c <xQueueGenericSend+0x94>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	623b      	str	r3, [r7, #32]
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	e7fd      	b.n	8007748 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800774c:	f001 fa42 	bl	8008bd4 <xTaskGetSchedulerState>
 8007750:	4603      	mov	r3, r0
 8007752:	2b00      	cmp	r3, #0
 8007754:	d102      	bne.n	800775c <xQueueGenericSend+0xa4>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d101      	bne.n	8007760 <xQueueGenericSend+0xa8>
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <xQueueGenericSend+0xaa>
 8007760:	2300      	movs	r3, #0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d10b      	bne.n	800777e <xQueueGenericSend+0xc6>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	61fb      	str	r3, [r7, #28]
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	e7fd      	b.n	800777a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800777e:	f002 f853 	bl	8009828 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007784:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007788:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800778a:	429a      	cmp	r2, r3
 800778c:	d302      	bcc.n	8007794 <xQueueGenericSend+0xdc>
 800778e:	683b      	ldr	r3, [r7, #0]
 8007790:	2b02      	cmp	r3, #2
 8007792:	d129      	bne.n	80077e8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	68b9      	ldr	r1, [r7, #8]
 8007798:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800779a:	f000 fa0f 	bl	8007bbc <prvCopyDataToQueue>
 800779e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d010      	beq.n	80077ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077aa:	3324      	adds	r3, #36	@ 0x24
 80077ac:	4618      	mov	r0, r3
 80077ae:	f001 f851 	bl	8008854 <xTaskRemoveFromEventList>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d013      	beq.n	80077e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80077b8:	4b3f      	ldr	r3, [pc, #252]	@ (80078b8 <xQueueGenericSend+0x200>)
 80077ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	f3bf 8f4f 	dsb	sy
 80077c4:	f3bf 8f6f 	isb	sy
 80077c8:	e00a      	b.n	80077e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80077ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d007      	beq.n	80077e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80077d0:	4b39      	ldr	r3, [pc, #228]	@ (80078b8 <xQueueGenericSend+0x200>)
 80077d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80077e0:	f002 f854 	bl	800988c <vPortExitCritical>
				return pdPASS;
 80077e4:	2301      	movs	r3, #1
 80077e6:	e063      	b.n	80078b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d103      	bne.n	80077f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80077ee:	f002 f84d 	bl	800988c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80077f2:	2300      	movs	r3, #0
 80077f4:	e05c      	b.n	80078b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80077f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d106      	bne.n	800780a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80077fc:	f107 0314 	add.w	r3, r7, #20
 8007800:	4618      	mov	r0, r3
 8007802:	f001 f88b 	bl	800891c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007806:	2301      	movs	r3, #1
 8007808:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800780a:	f002 f83f 	bl	800988c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800780e:	f000 fdfb 	bl	8008408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007812:	f002 f809 	bl	8009828 <vPortEnterCritical>
 8007816:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007818:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800781c:	b25b      	sxtb	r3, r3
 800781e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007822:	d103      	bne.n	800782c <xQueueGenericSend+0x174>
 8007824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800782c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800782e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007832:	b25b      	sxtb	r3, r3
 8007834:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007838:	d103      	bne.n	8007842 <xQueueGenericSend+0x18a>
 800783a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800783c:	2200      	movs	r2, #0
 800783e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007842:	f002 f823 	bl	800988c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007846:	1d3a      	adds	r2, r7, #4
 8007848:	f107 0314 	add.w	r3, r7, #20
 800784c:	4611      	mov	r1, r2
 800784e:	4618      	mov	r0, r3
 8007850:	f001 f87a 	bl	8008948 <xTaskCheckForTimeOut>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d124      	bne.n	80078a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800785a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800785c:	f000 faa6 	bl	8007dac <prvIsQueueFull>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d018      	beq.n	8007898 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007868:	3310      	adds	r3, #16
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	4611      	mov	r1, r2
 800786e:	4618      	mov	r0, r3
 8007870:	f000 ff9e 	bl	80087b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007874:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007876:	f000 fa31 	bl	8007cdc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800787a:	f000 fdd3 	bl	8008424 <xTaskResumeAll>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	f47f af7c 	bne.w	800777e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007886:	4b0c      	ldr	r3, [pc, #48]	@ (80078b8 <xQueueGenericSend+0x200>)
 8007888:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	e772      	b.n	800777e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800789a:	f000 fa1f 	bl	8007cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800789e:	f000 fdc1 	bl	8008424 <xTaskResumeAll>
 80078a2:	e76c      	b.n	800777e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80078a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078a6:	f000 fa19 	bl	8007cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80078aa:	f000 fdbb 	bl	8008424 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80078ae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3738      	adds	r7, #56	@ 0x38
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	e000ed04 	.word	0xe000ed04

080078bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b090      	sub	sp, #64	@ 0x40
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
 80078c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80078ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d10b      	bne.n	80078ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80078d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d8:	f383 8811 	msr	BASEPRI, r3
 80078dc:	f3bf 8f6f 	isb	sy
 80078e0:	f3bf 8f4f 	dsb	sy
 80078e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80078e6:	bf00      	nop
 80078e8:	bf00      	nop
 80078ea:	e7fd      	b.n	80078e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d103      	bne.n	80078fa <xQueueGenericSendFromISR+0x3e>
 80078f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d101      	bne.n	80078fe <xQueueGenericSendFromISR+0x42>
 80078fa:	2301      	movs	r3, #1
 80078fc:	e000      	b.n	8007900 <xQueueGenericSendFromISR+0x44>
 80078fe:	2300      	movs	r3, #0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d10b      	bne.n	800791c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007908:	f383 8811 	msr	BASEPRI, r3
 800790c:	f3bf 8f6f 	isb	sy
 8007910:	f3bf 8f4f 	dsb	sy
 8007914:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007916:	bf00      	nop
 8007918:	bf00      	nop
 800791a:	e7fd      	b.n	8007918 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2b02      	cmp	r3, #2
 8007920:	d103      	bne.n	800792a <xQueueGenericSendFromISR+0x6e>
 8007922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <xQueueGenericSendFromISR+0x72>
 800792a:	2301      	movs	r3, #1
 800792c:	e000      	b.n	8007930 <xQueueGenericSendFromISR+0x74>
 800792e:	2300      	movs	r3, #0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10b      	bne.n	800794c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	623b      	str	r3, [r7, #32]
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	e7fd      	b.n	8007948 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800794c:	f002 f84c 	bl	80099e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007950:	f3ef 8211 	mrs	r2, BASEPRI
 8007954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	61fa      	str	r2, [r7, #28]
 8007966:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007968:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800796a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800796c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800796e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007974:	429a      	cmp	r2, r3
 8007976:	d302      	bcc.n	800797e <xQueueGenericSendFromISR+0xc2>
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	2b02      	cmp	r3, #2
 800797c:	d12f      	bne.n	80079de <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800797e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007980:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007984:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800798a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	68b9      	ldr	r1, [r7, #8]
 8007992:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007994:	f000 f912 	bl	8007bbc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007998:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800799c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079a0:	d112      	bne.n	80079c8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80079a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d016      	beq.n	80079d8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ac:	3324      	adds	r3, #36	@ 0x24
 80079ae:	4618      	mov	r0, r3
 80079b0:	f000 ff50 	bl	8008854 <xTaskRemoveFromEventList>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00e      	beq.n	80079d8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00b      	beq.n	80079d8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	e007      	b.n	80079d8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80079cc:	3301      	adds	r3, #1
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	b25a      	sxtb	r2, r3
 80079d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80079d8:	2301      	movs	r3, #1
 80079da:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80079dc:	e001      	b.n	80079e2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079de:	2300      	movs	r3, #0
 80079e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80079e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079e4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80079ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3740      	adds	r7, #64	@ 0x40
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}

080079f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b08c      	sub	sp, #48	@ 0x30
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	60f8      	str	r0, [r7, #12]
 8007a00:	60b9      	str	r1, [r7, #8]
 8007a02:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a04:	2300      	movs	r3, #0
 8007a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10b      	bne.n	8007a2a <xQueueReceive+0x32>
	__asm volatile
 8007a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a16:	f383 8811 	msr	BASEPRI, r3
 8007a1a:	f3bf 8f6f 	isb	sy
 8007a1e:	f3bf 8f4f 	dsb	sy
 8007a22:	623b      	str	r3, [r7, #32]
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop
 8007a28:	e7fd      	b.n	8007a26 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d103      	bne.n	8007a38 <xQueueReceive+0x40>
 8007a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <xQueueReceive+0x44>
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e000      	b.n	8007a3e <xQueueReceive+0x46>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d10b      	bne.n	8007a5a <xQueueReceive+0x62>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	61fb      	str	r3, [r7, #28]
}
 8007a54:	bf00      	nop
 8007a56:	bf00      	nop
 8007a58:	e7fd      	b.n	8007a56 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a5a:	f001 f8bb 	bl	8008bd4 <xTaskGetSchedulerState>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <xQueueReceive+0x72>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <xQueueReceive+0x76>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <xQueueReceive+0x78>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10b      	bne.n	8007a8c <xQueueReceive+0x94>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	61bb      	str	r3, [r7, #24]
}
 8007a86:	bf00      	nop
 8007a88:	bf00      	nop
 8007a8a:	e7fd      	b.n	8007a88 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a8c:	f001 fecc 	bl	8009828 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a94:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d01f      	beq.n	8007adc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a9c:	68b9      	ldr	r1, [r7, #8]
 8007a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007aa0:	f000 f8f6 	bl	8007c90 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aa6:	1e5a      	subs	r2, r3, #1
 8007aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aaa:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aae:	691b      	ldr	r3, [r3, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d00f      	beq.n	8007ad4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab6:	3310      	adds	r3, #16
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 fecb 	bl	8008854 <xTaskRemoveFromEventList>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d007      	beq.n	8007ad4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ac4:	4b3c      	ldr	r3, [pc, #240]	@ (8007bb8 <xQueueReceive+0x1c0>)
 8007ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007aca:	601a      	str	r2, [r3, #0]
 8007acc:	f3bf 8f4f 	dsb	sy
 8007ad0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ad4:	f001 feda 	bl	800988c <vPortExitCritical>
				return pdPASS;
 8007ad8:	2301      	movs	r3, #1
 8007ada:	e069      	b.n	8007bb0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d103      	bne.n	8007aea <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ae2:	f001 fed3 	bl	800988c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	e062      	b.n	8007bb0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d106      	bne.n	8007afe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007af0:	f107 0310 	add.w	r3, r7, #16
 8007af4:	4618      	mov	r0, r3
 8007af6:	f000 ff11 	bl	800891c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007afa:	2301      	movs	r3, #1
 8007afc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007afe:	f001 fec5 	bl	800988c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b02:	f000 fc81 	bl	8008408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b06:	f001 fe8f 	bl	8009828 <vPortEnterCritical>
 8007b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b10:	b25b      	sxtb	r3, r3
 8007b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b16:	d103      	bne.n	8007b20 <xQueueReceive+0x128>
 8007b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b26:	b25b      	sxtb	r3, r3
 8007b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2c:	d103      	bne.n	8007b36 <xQueueReceive+0x13e>
 8007b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b36:	f001 fea9 	bl	800988c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b3a:	1d3a      	adds	r2, r7, #4
 8007b3c:	f107 0310 	add.w	r3, r7, #16
 8007b40:	4611      	mov	r1, r2
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 ff00 	bl	8008948 <xTaskCheckForTimeOut>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d123      	bne.n	8007b96 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b50:	f000 f916 	bl	8007d80 <prvIsQueueEmpty>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d017      	beq.n	8007b8a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b5c:	3324      	adds	r3, #36	@ 0x24
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	4611      	mov	r1, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f000 fe24 	bl	80087b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b6a:	f000 f8b7 	bl	8007cdc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b6e:	f000 fc59 	bl	8008424 <xTaskResumeAll>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d189      	bne.n	8007a8c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007b78:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb8 <xQueueReceive+0x1c0>)
 8007b7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b7e:	601a      	str	r2, [r3, #0]
 8007b80:	f3bf 8f4f 	dsb	sy
 8007b84:	f3bf 8f6f 	isb	sy
 8007b88:	e780      	b.n	8007a8c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b8c:	f000 f8a6 	bl	8007cdc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b90:	f000 fc48 	bl	8008424 <xTaskResumeAll>
 8007b94:	e77a      	b.n	8007a8c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b98:	f000 f8a0 	bl	8007cdc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b9c:	f000 fc42 	bl	8008424 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ba0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ba2:	f000 f8ed 	bl	8007d80 <prvIsQueueEmpty>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f43f af6f 	beq.w	8007a8c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007bae:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3730      	adds	r7, #48	@ 0x30
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	e000ed04 	.word	0xe000ed04

08007bbc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b086      	sub	sp, #24
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d10d      	bne.n	8007bf6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d14d      	bne.n	8007c7e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	4618      	mov	r0, r3
 8007be8:	f001 f812 	bl	8008c10 <xTaskPriorityDisinherit>
 8007bec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	609a      	str	r2, [r3, #8]
 8007bf4:	e043      	b.n	8007c7e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d119      	bne.n	8007c30 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	6858      	ldr	r0, [r3, #4]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c04:	461a      	mov	r2, r3
 8007c06:	68b9      	ldr	r1, [r7, #8]
 8007c08:	f002 f94a 	bl	8009ea0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	685a      	ldr	r2, [r3, #4]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c14:	441a      	add	r2, r3
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	429a      	cmp	r2, r3
 8007c24:	d32b      	bcc.n	8007c7e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	605a      	str	r2, [r3, #4]
 8007c2e:	e026      	b.n	8007c7e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	68d8      	ldr	r0, [r3, #12]
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c38:	461a      	mov	r2, r3
 8007c3a:	68b9      	ldr	r1, [r7, #8]
 8007c3c:	f002 f930 	bl	8009ea0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	68da      	ldr	r2, [r3, #12]
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c48:	425b      	negs	r3, r3
 8007c4a:	441a      	add	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	68da      	ldr	r2, [r3, #12]
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d207      	bcs.n	8007c6c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	689a      	ldr	r2, [r3, #8]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c64:	425b      	negs	r3, r3
 8007c66:	441a      	add	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d105      	bne.n	8007c7e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	3b01      	subs	r3, #1
 8007c7c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007c86:	697b      	ldr	r3, [r7, #20]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3718      	adds	r7, #24
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
 8007c98:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d018      	beq.n	8007cd4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007caa:	441a      	add	r2, r3
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	68da      	ldr	r2, [r3, #12]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d303      	bcc.n	8007cc4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68d9      	ldr	r1, [r3, #12]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ccc:	461a      	mov	r2, r3
 8007cce:	6838      	ldr	r0, [r7, #0]
 8007cd0:	f002 f8e6 	bl	8009ea0 <memcpy>
	}
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ce4:	f001 fda0 	bl	8009828 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007cf0:	e011      	b.n	8007d16 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d012      	beq.n	8007d20 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	3324      	adds	r3, #36	@ 0x24
 8007cfe:	4618      	mov	r0, r3
 8007d00:	f000 fda8 	bl	8008854 <xTaskRemoveFromEventList>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d001      	beq.n	8007d0e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d0a:	f000 fe81 	bl	8008a10 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d0e:	7bfb      	ldrb	r3, [r7, #15]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b2db      	uxtb	r3, r3
 8007d14:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dce9      	bgt.n	8007cf2 <prvUnlockQueue+0x16>
 8007d1e:	e000      	b.n	8007d22 <prvUnlockQueue+0x46>
					break;
 8007d20:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	22ff      	movs	r2, #255	@ 0xff
 8007d26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d2a:	f001 fdaf 	bl	800988c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d2e:	f001 fd7b 	bl	8009828 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d38:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d3a:	e011      	b.n	8007d60 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d012      	beq.n	8007d6a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	3310      	adds	r3, #16
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f000 fd83 	bl	8008854 <xTaskRemoveFromEventList>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007d54:	f000 fe5c 	bl	8008a10 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007d58:	7bbb      	ldrb	r3, [r7, #14]
 8007d5a:	3b01      	subs	r3, #1
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	dce9      	bgt.n	8007d3c <prvUnlockQueue+0x60>
 8007d68:	e000      	b.n	8007d6c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007d6a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	22ff      	movs	r2, #255	@ 0xff
 8007d70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007d74:	f001 fd8a 	bl	800988c <vPortExitCritical>
}
 8007d78:	bf00      	nop
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007d88:	f001 fd4e 	bl	8009828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007d94:	2301      	movs	r3, #1
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	e001      	b.n	8007d9e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007d9e:	f001 fd75 	bl	800988c <vPortExitCritical>

	return xReturn;
 8007da2:	68fb      	ldr	r3, [r7, #12]
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3710      	adds	r7, #16
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b084      	sub	sp, #16
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007db4:	f001 fd38 	bl	8009828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d102      	bne.n	8007dca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e001      	b.n	8007dce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007dca:	2300      	movs	r3, #0
 8007dcc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dce:	f001 fd5d 	bl	800988c <vPortExitCritical>

	return xReturn;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007de6:	2300      	movs	r3, #0
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	e014      	b.n	8007e16 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007dec:	4a0f      	ldr	r2, [pc, #60]	@ (8007e2c <vQueueAddToRegistry+0x50>)
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10b      	bne.n	8007e10 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007df8:	490c      	ldr	r1, [pc, #48]	@ (8007e2c <vQueueAddToRegistry+0x50>)
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e02:	4a0a      	ldr	r2, [pc, #40]	@ (8007e2c <vQueueAddToRegistry+0x50>)
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	4413      	add	r3, r2
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e0e:	e006      	b.n	8007e1e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	3301      	adds	r3, #1
 8007e14:	60fb      	str	r3, [r7, #12]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2b07      	cmp	r3, #7
 8007e1a:	d9e7      	bls.n	8007dec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e1c:	bf00      	nop
 8007e1e:	bf00      	nop
 8007e20:	3714      	adds	r7, #20
 8007e22:	46bd      	mov	sp, r7
 8007e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e28:	4770      	bx	lr
 8007e2a:	bf00      	nop
 8007e2c:	20000aac 	.word	0x20000aac

08007e30 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b086      	sub	sp, #24
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	60f8      	str	r0, [r7, #12]
 8007e38:	60b9      	str	r1, [r7, #8]
 8007e3a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007e40:	f001 fcf2 	bl	8009828 <vPortEnterCritical>
 8007e44:	697b      	ldr	r3, [r7, #20]
 8007e46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007e4a:	b25b      	sxtb	r3, r3
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e50:	d103      	bne.n	8007e5a <vQueueWaitForMessageRestricted+0x2a>
 8007e52:	697b      	ldr	r3, [r7, #20]
 8007e54:	2200      	movs	r2, #0
 8007e56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007e60:	b25b      	sxtb	r3, r3
 8007e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e66:	d103      	bne.n	8007e70 <vQueueWaitForMessageRestricted+0x40>
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007e70:	f001 fd0c 	bl	800988c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d106      	bne.n	8007e8a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	3324      	adds	r3, #36	@ 0x24
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	68b9      	ldr	r1, [r7, #8]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f000 fcb9 	bl	80087fc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007e8a:	6978      	ldr	r0, [r7, #20]
 8007e8c:	f7ff ff26 	bl	8007cdc <prvUnlockQueue>
	}
 8007e90:	bf00      	nop
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08e      	sub	sp, #56	@ 0x38
 8007e9c:	af04      	add	r7, sp, #16
 8007e9e:	60f8      	str	r0, [r7, #12]
 8007ea0:	60b9      	str	r1, [r7, #8]
 8007ea2:	607a      	str	r2, [r7, #4]
 8007ea4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10b      	bne.n	8007ec4 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb0:	f383 8811 	msr	BASEPRI, r3
 8007eb4:	f3bf 8f6f 	isb	sy
 8007eb8:	f3bf 8f4f 	dsb	sy
 8007ebc:	623b      	str	r3, [r7, #32]
}
 8007ebe:	bf00      	nop
 8007ec0:	bf00      	nop
 8007ec2:	e7fd      	b.n	8007ec0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d10b      	bne.n	8007ee2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ece:	f383 8811 	msr	BASEPRI, r3
 8007ed2:	f3bf 8f6f 	isb	sy
 8007ed6:	f3bf 8f4f 	dsb	sy
 8007eda:	61fb      	str	r3, [r7, #28]
}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	e7fd      	b.n	8007ede <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007ee2:	235c      	movs	r3, #92	@ 0x5c
 8007ee4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	2b5c      	cmp	r3, #92	@ 0x5c
 8007eea:	d00b      	beq.n	8007f04 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	61bb      	str	r3, [r7, #24]
}
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f04:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d01e      	beq.n	8007f4a <xTaskCreateStatic+0xb2>
 8007f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d01b      	beq.n	8007f4a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f14:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f1a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1e:	2202      	movs	r2, #2
 8007f20:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f24:	2300      	movs	r3, #0
 8007f26:	9303      	str	r3, [sp, #12]
 8007f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2a:	9302      	str	r3, [sp, #8]
 8007f2c:	f107 0314 	add.w	r3, r7, #20
 8007f30:	9301      	str	r3, [sp, #4]
 8007f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f34:	9300      	str	r3, [sp, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	687a      	ldr	r2, [r7, #4]
 8007f3a:	68b9      	ldr	r1, [r7, #8]
 8007f3c:	68f8      	ldr	r0, [r7, #12]
 8007f3e:	f000 f850 	bl	8007fe2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007f42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f44:	f000 f8de 	bl	8008104 <prvAddNewTaskToReadyList>
 8007f48:	e001      	b.n	8007f4e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007f4e:	697b      	ldr	r3, [r7, #20]
	}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3728      	adds	r7, #40	@ 0x28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08c      	sub	sp, #48	@ 0x30
 8007f5c:	af04      	add	r7, sp, #16
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	603b      	str	r3, [r7, #0]
 8007f64:	4613      	mov	r3, r2
 8007f66:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007f68:	88fb      	ldrh	r3, [r7, #6]
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 fd7d 	bl	8009a6c <pvPortMalloc>
 8007f72:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d00e      	beq.n	8007f98 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007f7a:	205c      	movs	r0, #92	@ 0x5c
 8007f7c:	f001 fd76 	bl	8009a6c <pvPortMalloc>
 8007f80:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d003      	beq.n	8007f90 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007f8e:	e005      	b.n	8007f9c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007f90:	6978      	ldr	r0, [r7, #20]
 8007f92:	f001 fe39 	bl	8009c08 <vPortFree>
 8007f96:	e001      	b.n	8007f9c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d017      	beq.n	8007fd2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007faa:	88fa      	ldrh	r2, [r7, #6]
 8007fac:	2300      	movs	r3, #0
 8007fae:	9303      	str	r3, [sp, #12]
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	9302      	str	r3, [sp, #8]
 8007fb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fba:	9300      	str	r3, [sp, #0]
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	68b9      	ldr	r1, [r7, #8]
 8007fc0:	68f8      	ldr	r0, [r7, #12]
 8007fc2:	f000 f80e 	bl	8007fe2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fc6:	69f8      	ldr	r0, [r7, #28]
 8007fc8:	f000 f89c 	bl	8008104 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	61bb      	str	r3, [r7, #24]
 8007fd0:	e002      	b.n	8007fd8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8007fd6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007fd8:	69bb      	ldr	r3, [r7, #24]
	}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3720      	adds	r7, #32
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b088      	sub	sp, #32
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	60f8      	str	r0, [r7, #12]
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	607a      	str	r2, [r7, #4]
 8007fee:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007ff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	009b      	lsls	r3, r3, #2
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	21a5      	movs	r1, #165	@ 0xa5
 8007ffc:	f001 ff24 	bl	8009e48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008002:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800800a:	3b01      	subs	r3, #1
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	4413      	add	r3, r2
 8008010:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	f023 0307 	bic.w	r3, r3, #7
 8008018:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800801a:	69bb      	ldr	r3, [r7, #24]
 800801c:	f003 0307 	and.w	r3, r3, #7
 8008020:	2b00      	cmp	r3, #0
 8008022:	d00b      	beq.n	800803c <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	617b      	str	r3, [r7, #20]
}
 8008036:	bf00      	nop
 8008038:	bf00      	nop
 800803a:	e7fd      	b.n	8008038 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d01f      	beq.n	8008082 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008042:	2300      	movs	r3, #0
 8008044:	61fb      	str	r3, [r7, #28]
 8008046:	e012      	b.n	800806e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008048:	68ba      	ldr	r2, [r7, #8]
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	4413      	add	r3, r2
 800804e:	7819      	ldrb	r1, [r3, #0]
 8008050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008052:	69fb      	ldr	r3, [r7, #28]
 8008054:	4413      	add	r3, r2
 8008056:	3334      	adds	r3, #52	@ 0x34
 8008058:	460a      	mov	r2, r1
 800805a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800805c:	68ba      	ldr	r2, [r7, #8]
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	4413      	add	r3, r2
 8008062:	781b      	ldrb	r3, [r3, #0]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d006      	beq.n	8008076 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	3301      	adds	r3, #1
 800806c:	61fb      	str	r3, [r7, #28]
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	2b0f      	cmp	r3, #15
 8008072:	d9e9      	bls.n	8008048 <prvInitialiseNewTask+0x66>
 8008074:	e000      	b.n	8008078 <prvInitialiseNewTask+0x96>
			{
				break;
 8008076:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800807a:	2200      	movs	r2, #0
 800807c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008080:	e003      	b.n	800808a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008084:	2200      	movs	r2, #0
 8008086:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800808a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800808c:	2b37      	cmp	r3, #55	@ 0x37
 800808e:	d901      	bls.n	8008094 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008090:	2337      	movs	r3, #55	@ 0x37
 8008092:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008096:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008098:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800809a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800809c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800809e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80080a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a2:	2200      	movs	r2, #0
 80080a4:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080a8:	3304      	adds	r3, #4
 80080aa:	4618      	mov	r0, r3
 80080ac:	f7ff f966 	bl	800737c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b2:	3318      	adds	r3, #24
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7ff f961 	bl	800737c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80080c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080ce:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d2:	2200      	movs	r2, #0
 80080d4:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080d8:	2200      	movs	r2, #0
 80080da:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80080de:	683a      	ldr	r2, [r7, #0]
 80080e0:	68f9      	ldr	r1, [r7, #12]
 80080e2:	69b8      	ldr	r0, [r7, #24]
 80080e4:	f001 fa72 	bl	80095cc <pxPortInitialiseStack>
 80080e8:	4602      	mov	r2, r0
 80080ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80080ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d002      	beq.n	80080fa <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80080f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080fa:	bf00      	nop
 80080fc:	3720      	adds	r7, #32
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800810c:	f001 fb8c 	bl	8009828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008110:	4b2d      	ldr	r3, [pc, #180]	@ (80081c8 <prvAddNewTaskToReadyList+0xc4>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3301      	adds	r3, #1
 8008116:	4a2c      	ldr	r2, [pc, #176]	@ (80081c8 <prvAddNewTaskToReadyList+0xc4>)
 8008118:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800811a:	4b2c      	ldr	r3, [pc, #176]	@ (80081cc <prvAddNewTaskToReadyList+0xc8>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d109      	bne.n	8008136 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008122:	4a2a      	ldr	r2, [pc, #168]	@ (80081cc <prvAddNewTaskToReadyList+0xc8>)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008128:	4b27      	ldr	r3, [pc, #156]	@ (80081c8 <prvAddNewTaskToReadyList+0xc4>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b01      	cmp	r3, #1
 800812e:	d110      	bne.n	8008152 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008130:	f000 fc92 	bl	8008a58 <prvInitialiseTaskLists>
 8008134:	e00d      	b.n	8008152 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008136:	4b26      	ldr	r3, [pc, #152]	@ (80081d0 <prvAddNewTaskToReadyList+0xcc>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d109      	bne.n	8008152 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800813e:	4b23      	ldr	r3, [pc, #140]	@ (80081cc <prvAddNewTaskToReadyList+0xc8>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008148:	429a      	cmp	r2, r3
 800814a:	d802      	bhi.n	8008152 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800814c:	4a1f      	ldr	r2, [pc, #124]	@ (80081cc <prvAddNewTaskToReadyList+0xc8>)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008152:	4b20      	ldr	r3, [pc, #128]	@ (80081d4 <prvAddNewTaskToReadyList+0xd0>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	3301      	adds	r3, #1
 8008158:	4a1e      	ldr	r2, [pc, #120]	@ (80081d4 <prvAddNewTaskToReadyList+0xd0>)
 800815a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800815c:	4b1d      	ldr	r3, [pc, #116]	@ (80081d4 <prvAddNewTaskToReadyList+0xd0>)
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008168:	4b1b      	ldr	r3, [pc, #108]	@ (80081d8 <prvAddNewTaskToReadyList+0xd4>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d903      	bls.n	8008178 <prvAddNewTaskToReadyList+0x74>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008174:	4a18      	ldr	r2, [pc, #96]	@ (80081d8 <prvAddNewTaskToReadyList+0xd4>)
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800817c:	4613      	mov	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4a15      	ldr	r2, [pc, #84]	@ (80081dc <prvAddNewTaskToReadyList+0xd8>)
 8008186:	441a      	add	r2, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	3304      	adds	r3, #4
 800818c:	4619      	mov	r1, r3
 800818e:	4610      	mov	r0, r2
 8008190:	f7ff f901 	bl	8007396 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008194:	f001 fb7a 	bl	800988c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008198:	4b0d      	ldr	r3, [pc, #52]	@ (80081d0 <prvAddNewTaskToReadyList+0xcc>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d00e      	beq.n	80081be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081a0:	4b0a      	ldr	r3, [pc, #40]	@ (80081cc <prvAddNewTaskToReadyList+0xc8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d207      	bcs.n	80081be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081ae:	4b0c      	ldr	r3, [pc, #48]	@ (80081e0 <prvAddNewTaskToReadyList+0xdc>)
 80081b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081b4:	601a      	str	r2, [r3, #0]
 80081b6:	f3bf 8f4f 	dsb	sy
 80081ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081be:	bf00      	nop
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	20000fc0 	.word	0x20000fc0
 80081cc:	20000aec 	.word	0x20000aec
 80081d0:	20000fcc 	.word	0x20000fcc
 80081d4:	20000fdc 	.word	0x20000fdc
 80081d8:	20000fc8 	.word	0x20000fc8
 80081dc:	20000af0 	.word	0x20000af0
 80081e0:	e000ed04 	.word	0xe000ed04

080081e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80081ec:	f001 fb1c 	bl	8009828 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d102      	bne.n	80081fc <vTaskDelete+0x18>
 80081f6:	4b2d      	ldr	r3, [pc, #180]	@ (80082ac <vTaskDelete+0xc8>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	e000      	b.n	80081fe <vTaskDelete+0x1a>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	3304      	adds	r3, #4
 8008204:	4618      	mov	r0, r3
 8008206:	f7ff f923 	bl	8007450 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800820e:	2b00      	cmp	r3, #0
 8008210:	d004      	beq.n	800821c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	3318      	adds	r3, #24
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff f91a 	bl	8007450 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800821c:	4b24      	ldr	r3, [pc, #144]	@ (80082b0 <vTaskDelete+0xcc>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3301      	adds	r3, #1
 8008222:	4a23      	ldr	r2, [pc, #140]	@ (80082b0 <vTaskDelete+0xcc>)
 8008224:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008226:	4b21      	ldr	r3, [pc, #132]	@ (80082ac <vTaskDelete+0xc8>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	429a      	cmp	r2, r3
 800822e:	d10b      	bne.n	8008248 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3304      	adds	r3, #4
 8008234:	4619      	mov	r1, r3
 8008236:	481f      	ldr	r0, [pc, #124]	@ (80082b4 <vTaskDelete+0xd0>)
 8008238:	f7ff f8ad 	bl	8007396 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800823c:	4b1e      	ldr	r3, [pc, #120]	@ (80082b8 <vTaskDelete+0xd4>)
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	3301      	adds	r3, #1
 8008242:	4a1d      	ldr	r2, [pc, #116]	@ (80082b8 <vTaskDelete+0xd4>)
 8008244:	6013      	str	r3, [r2, #0]
 8008246:	e009      	b.n	800825c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008248:	4b1c      	ldr	r3, [pc, #112]	@ (80082bc <vTaskDelete+0xd8>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3b01      	subs	r3, #1
 800824e:	4a1b      	ldr	r2, [pc, #108]	@ (80082bc <vTaskDelete+0xd8>)
 8008250:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8008252:	68f8      	ldr	r0, [r7, #12]
 8008254:	f000 fc6e 	bl	8008b34 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008258:	f000 fc9c 	bl	8008b94 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800825c:	f001 fb16 	bl	800988c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8008260:	4b17      	ldr	r3, [pc, #92]	@ (80082c0 <vTaskDelete+0xdc>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d01c      	beq.n	80082a2 <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8008268:	4b10      	ldr	r3, [pc, #64]	@ (80082ac <vTaskDelete+0xc8>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	429a      	cmp	r2, r3
 8008270:	d117      	bne.n	80082a2 <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8008272:	4b14      	ldr	r3, [pc, #80]	@ (80082c4 <vTaskDelete+0xe0>)
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00b      	beq.n	8008292 <vTaskDelete+0xae>
	__asm volatile
 800827a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800827e:	f383 8811 	msr	BASEPRI, r3
 8008282:	f3bf 8f6f 	isb	sy
 8008286:	f3bf 8f4f 	dsb	sy
 800828a:	60bb      	str	r3, [r7, #8]
}
 800828c:	bf00      	nop
 800828e:	bf00      	nop
 8008290:	e7fd      	b.n	800828e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8008292:	4b0d      	ldr	r3, [pc, #52]	@ (80082c8 <vTaskDelete+0xe4>)
 8008294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80082a2:	bf00      	nop
 80082a4:	3710      	adds	r7, #16
 80082a6:	46bd      	mov	sp, r7
 80082a8:	bd80      	pop	{r7, pc}
 80082aa:	bf00      	nop
 80082ac:	20000aec 	.word	0x20000aec
 80082b0:	20000fdc 	.word	0x20000fdc
 80082b4:	20000f94 	.word	0x20000f94
 80082b8:	20000fa8 	.word	0x20000fa8
 80082bc:	20000fc0 	.word	0x20000fc0
 80082c0:	20000fcc 	.word	0x20000fcc
 80082c4:	20000fe8 	.word	0x20000fe8
 80082c8:	e000ed04 	.word	0xe000ed04

080082cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b084      	sub	sp, #16
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082d4:	2300      	movs	r3, #0
 80082d6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d018      	beq.n	8008310 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082de:	4b14      	ldr	r3, [pc, #80]	@ (8008330 <vTaskDelay+0x64>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00b      	beq.n	80082fe <vTaskDelay+0x32>
	__asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	60bb      	str	r3, [r7, #8]
}
 80082f8:	bf00      	nop
 80082fa:	bf00      	nop
 80082fc:	e7fd      	b.n	80082fa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082fe:	f000 f883 	bl	8008408 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008302:	2100      	movs	r1, #0
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fcf3 	bl	8008cf0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800830a:	f000 f88b 	bl	8008424 <xTaskResumeAll>
 800830e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d107      	bne.n	8008326 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008316:	4b07      	ldr	r3, [pc, #28]	@ (8008334 <vTaskDelay+0x68>)
 8008318:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800831c:	601a      	str	r2, [r3, #0]
 800831e:	f3bf 8f4f 	dsb	sy
 8008322:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008326:	bf00      	nop
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
 800832e:	bf00      	nop
 8008330:	20000fe8 	.word	0x20000fe8
 8008334:	e000ed04 	.word	0xe000ed04

08008338 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b08a      	sub	sp, #40	@ 0x28
 800833c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008342:	2300      	movs	r3, #0
 8008344:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008346:	463a      	mov	r2, r7
 8008348:	1d39      	adds	r1, r7, #4
 800834a:	f107 0308 	add.w	r3, r7, #8
 800834e:	4618      	mov	r0, r3
 8008350:	f7fe ffc0 	bl	80072d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008354:	6839      	ldr	r1, [r7, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	68ba      	ldr	r2, [r7, #8]
 800835a:	9202      	str	r2, [sp, #8]
 800835c:	9301      	str	r3, [sp, #4]
 800835e:	2300      	movs	r3, #0
 8008360:	9300      	str	r3, [sp, #0]
 8008362:	2300      	movs	r3, #0
 8008364:	460a      	mov	r2, r1
 8008366:	4922      	ldr	r1, [pc, #136]	@ (80083f0 <vTaskStartScheduler+0xb8>)
 8008368:	4822      	ldr	r0, [pc, #136]	@ (80083f4 <vTaskStartScheduler+0xbc>)
 800836a:	f7ff fd95 	bl	8007e98 <xTaskCreateStatic>
 800836e:	4603      	mov	r3, r0
 8008370:	4a21      	ldr	r2, [pc, #132]	@ (80083f8 <vTaskStartScheduler+0xc0>)
 8008372:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008374:	4b20      	ldr	r3, [pc, #128]	@ (80083f8 <vTaskStartScheduler+0xc0>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800837c:	2301      	movs	r3, #1
 800837e:	617b      	str	r3, [r7, #20]
 8008380:	e001      	b.n	8008386 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008382:	2300      	movs	r3, #0
 8008384:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	2b01      	cmp	r3, #1
 800838a:	d102      	bne.n	8008392 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800838c:	f000 fd04 	bl	8008d98 <xTimerCreateTimerTask>
 8008390:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2b01      	cmp	r3, #1
 8008396:	d116      	bne.n	80083c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8008398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800839c:	f383 8811 	msr	BASEPRI, r3
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	f3bf 8f4f 	dsb	sy
 80083a8:	613b      	str	r3, [r7, #16]
}
 80083aa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083ac:	4b13      	ldr	r3, [pc, #76]	@ (80083fc <vTaskStartScheduler+0xc4>)
 80083ae:	f04f 32ff 	mov.w	r2, #4294967295
 80083b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083b4:	4b12      	ldr	r3, [pc, #72]	@ (8008400 <vTaskStartScheduler+0xc8>)
 80083b6:	2201      	movs	r2, #1
 80083b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083ba:	4b12      	ldr	r3, [pc, #72]	@ (8008404 <vTaskStartScheduler+0xcc>)
 80083bc:	2200      	movs	r2, #0
 80083be:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083c0:	f001 f98e 	bl	80096e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083c4:	e00f      	b.n	80083e6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083cc:	d10b      	bne.n	80083e6 <vTaskStartScheduler+0xae>
	__asm volatile
 80083ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d2:	f383 8811 	msr	BASEPRI, r3
 80083d6:	f3bf 8f6f 	isb	sy
 80083da:	f3bf 8f4f 	dsb	sy
 80083de:	60fb      	str	r3, [r7, #12]
}
 80083e0:	bf00      	nop
 80083e2:	bf00      	nop
 80083e4:	e7fd      	b.n	80083e2 <vTaskStartScheduler+0xaa>
}
 80083e6:	bf00      	nop
 80083e8:	3718      	adds	r7, #24
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	08009fb8 	.word	0x08009fb8
 80083f4:	08008a29 	.word	0x08008a29
 80083f8:	20000fe4 	.word	0x20000fe4
 80083fc:	20000fe0 	.word	0x20000fe0
 8008400:	20000fcc 	.word	0x20000fcc
 8008404:	20000fc4 	.word	0x20000fc4

08008408 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800840c:	4b04      	ldr	r3, [pc, #16]	@ (8008420 <vTaskSuspendAll+0x18>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	3301      	adds	r3, #1
 8008412:	4a03      	ldr	r2, [pc, #12]	@ (8008420 <vTaskSuspendAll+0x18>)
 8008414:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008416:	bf00      	nop
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	20000fe8 	.word	0x20000fe8

08008424 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800842a:	2300      	movs	r3, #0
 800842c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800842e:	2300      	movs	r3, #0
 8008430:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008432:	4b42      	ldr	r3, [pc, #264]	@ (800853c <xTaskResumeAll+0x118>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d10b      	bne.n	8008452 <xTaskResumeAll+0x2e>
	__asm volatile
 800843a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800843e:	f383 8811 	msr	BASEPRI, r3
 8008442:	f3bf 8f6f 	isb	sy
 8008446:	f3bf 8f4f 	dsb	sy
 800844a:	603b      	str	r3, [r7, #0]
}
 800844c:	bf00      	nop
 800844e:	bf00      	nop
 8008450:	e7fd      	b.n	800844e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008452:	f001 f9e9 	bl	8009828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008456:	4b39      	ldr	r3, [pc, #228]	@ (800853c <xTaskResumeAll+0x118>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	3b01      	subs	r3, #1
 800845c:	4a37      	ldr	r2, [pc, #220]	@ (800853c <xTaskResumeAll+0x118>)
 800845e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008460:	4b36      	ldr	r3, [pc, #216]	@ (800853c <xTaskResumeAll+0x118>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d162      	bne.n	800852e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008468:	4b35      	ldr	r3, [pc, #212]	@ (8008540 <xTaskResumeAll+0x11c>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d05e      	beq.n	800852e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008470:	e02f      	b.n	80084d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008472:	4b34      	ldr	r3, [pc, #208]	@ (8008544 <xTaskResumeAll+0x120>)
 8008474:	68db      	ldr	r3, [r3, #12]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	3318      	adds	r3, #24
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe ffe6 	bl	8007450 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	3304      	adds	r3, #4
 8008488:	4618      	mov	r0, r3
 800848a:	f7fe ffe1 	bl	8007450 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008492:	4b2d      	ldr	r3, [pc, #180]	@ (8008548 <xTaskResumeAll+0x124>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	429a      	cmp	r2, r3
 8008498:	d903      	bls.n	80084a2 <xTaskResumeAll+0x7e>
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800849e:	4a2a      	ldr	r2, [pc, #168]	@ (8008548 <xTaskResumeAll+0x124>)
 80084a0:	6013      	str	r3, [r2, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084a6:	4613      	mov	r3, r2
 80084a8:	009b      	lsls	r3, r3, #2
 80084aa:	4413      	add	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4a27      	ldr	r2, [pc, #156]	@ (800854c <xTaskResumeAll+0x128>)
 80084b0:	441a      	add	r2, r3
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	3304      	adds	r3, #4
 80084b6:	4619      	mov	r1, r3
 80084b8:	4610      	mov	r0, r2
 80084ba:	f7fe ff6c 	bl	8007396 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084c2:	4b23      	ldr	r3, [pc, #140]	@ (8008550 <xTaskResumeAll+0x12c>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d302      	bcc.n	80084d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80084cc:	4b21      	ldr	r3, [pc, #132]	@ (8008554 <xTaskResumeAll+0x130>)
 80084ce:	2201      	movs	r2, #1
 80084d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084d2:	4b1c      	ldr	r3, [pc, #112]	@ (8008544 <xTaskResumeAll+0x120>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d1cb      	bne.n	8008472 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d001      	beq.n	80084e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084e0:	f000 fb58 	bl	8008b94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008558 <xTaskResumeAll+0x134>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d010      	beq.n	8008512 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084f0:	f000 f846 	bl	8008580 <xTaskIncrementTick>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d002      	beq.n	8008500 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80084fa:	4b16      	ldr	r3, [pc, #88]	@ (8008554 <xTaskResumeAll+0x130>)
 80084fc:	2201      	movs	r2, #1
 80084fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3b01      	subs	r3, #1
 8008504:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1f1      	bne.n	80084f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800850c:	4b12      	ldr	r3, [pc, #72]	@ (8008558 <xTaskResumeAll+0x134>)
 800850e:	2200      	movs	r2, #0
 8008510:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008512:	4b10      	ldr	r3, [pc, #64]	@ (8008554 <xTaskResumeAll+0x130>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d009      	beq.n	800852e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800851a:	2301      	movs	r3, #1
 800851c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800851e:	4b0f      	ldr	r3, [pc, #60]	@ (800855c <xTaskResumeAll+0x138>)
 8008520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008524:	601a      	str	r2, [r3, #0]
 8008526:	f3bf 8f4f 	dsb	sy
 800852a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800852e:	f001 f9ad 	bl	800988c <vPortExitCritical>

	return xAlreadyYielded;
 8008532:	68bb      	ldr	r3, [r7, #8]
}
 8008534:	4618      	mov	r0, r3
 8008536:	3710      	adds	r7, #16
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	20000fe8 	.word	0x20000fe8
 8008540:	20000fc0 	.word	0x20000fc0
 8008544:	20000f80 	.word	0x20000f80
 8008548:	20000fc8 	.word	0x20000fc8
 800854c:	20000af0 	.word	0x20000af0
 8008550:	20000aec 	.word	0x20000aec
 8008554:	20000fd4 	.word	0x20000fd4
 8008558:	20000fd0 	.word	0x20000fd0
 800855c:	e000ed04 	.word	0xe000ed04

08008560 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008566:	4b05      	ldr	r3, [pc, #20]	@ (800857c <xTaskGetTickCount+0x1c>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800856c:	687b      	ldr	r3, [r7, #4]
}
 800856e:	4618      	mov	r0, r3
 8008570:	370c      	adds	r7, #12
 8008572:	46bd      	mov	sp, r7
 8008574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008578:	4770      	bx	lr
 800857a:	bf00      	nop
 800857c:	20000fc4 	.word	0x20000fc4

08008580 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008586:	2300      	movs	r3, #0
 8008588:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800858a:	4b4f      	ldr	r3, [pc, #316]	@ (80086c8 <xTaskIncrementTick+0x148>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b00      	cmp	r3, #0
 8008590:	f040 8090 	bne.w	80086b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008594:	4b4d      	ldr	r3, [pc, #308]	@ (80086cc <xTaskIncrementTick+0x14c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3301      	adds	r3, #1
 800859a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800859c:	4a4b      	ldr	r2, [pc, #300]	@ (80086cc <xTaskIncrementTick+0x14c>)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d121      	bne.n	80085ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80085a8:	4b49      	ldr	r3, [pc, #292]	@ (80086d0 <xTaskIncrementTick+0x150>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d00b      	beq.n	80085ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	603b      	str	r3, [r7, #0]
}
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
 80085c8:	e7fd      	b.n	80085c6 <xTaskIncrementTick+0x46>
 80085ca:	4b41      	ldr	r3, [pc, #260]	@ (80086d0 <xTaskIncrementTick+0x150>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	60fb      	str	r3, [r7, #12]
 80085d0:	4b40      	ldr	r3, [pc, #256]	@ (80086d4 <xTaskIncrementTick+0x154>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	4a3e      	ldr	r2, [pc, #248]	@ (80086d0 <xTaskIncrementTick+0x150>)
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	4a3e      	ldr	r2, [pc, #248]	@ (80086d4 <xTaskIncrementTick+0x154>)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	4b3e      	ldr	r3, [pc, #248]	@ (80086d8 <xTaskIncrementTick+0x158>)
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	3301      	adds	r3, #1
 80085e4:	4a3c      	ldr	r2, [pc, #240]	@ (80086d8 <xTaskIncrementTick+0x158>)
 80085e6:	6013      	str	r3, [r2, #0]
 80085e8:	f000 fad4 	bl	8008b94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085ec:	4b3b      	ldr	r3, [pc, #236]	@ (80086dc <xTaskIncrementTick+0x15c>)
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	693a      	ldr	r2, [r7, #16]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d349      	bcc.n	800868a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085f6:	4b36      	ldr	r3, [pc, #216]	@ (80086d0 <xTaskIncrementTick+0x150>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d104      	bne.n	800860a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008600:	4b36      	ldr	r3, [pc, #216]	@ (80086dc <xTaskIncrementTick+0x15c>)
 8008602:	f04f 32ff 	mov.w	r2, #4294967295
 8008606:	601a      	str	r2, [r3, #0]
					break;
 8008608:	e03f      	b.n	800868a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800860a:	4b31      	ldr	r3, [pc, #196]	@ (80086d0 <xTaskIncrementTick+0x150>)
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800861a:	693a      	ldr	r2, [r7, #16]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	429a      	cmp	r2, r3
 8008620:	d203      	bcs.n	800862a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008622:	4a2e      	ldr	r2, [pc, #184]	@ (80086dc <xTaskIncrementTick+0x15c>)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008628:	e02f      	b.n	800868a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	3304      	adds	r3, #4
 800862e:	4618      	mov	r0, r3
 8008630:	f7fe ff0e 	bl	8007450 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008638:	2b00      	cmp	r3, #0
 800863a:	d004      	beq.n	8008646 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	3318      	adds	r3, #24
 8008640:	4618      	mov	r0, r3
 8008642:	f7fe ff05 	bl	8007450 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800864a:	4b25      	ldr	r3, [pc, #148]	@ (80086e0 <xTaskIncrementTick+0x160>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	429a      	cmp	r2, r3
 8008650:	d903      	bls.n	800865a <xTaskIncrementTick+0xda>
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008656:	4a22      	ldr	r2, [pc, #136]	@ (80086e0 <xTaskIncrementTick+0x160>)
 8008658:	6013      	str	r3, [r2, #0]
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800865e:	4613      	mov	r3, r2
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	4413      	add	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	4a1f      	ldr	r2, [pc, #124]	@ (80086e4 <xTaskIncrementTick+0x164>)
 8008668:	441a      	add	r2, r3
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	3304      	adds	r3, #4
 800866e:	4619      	mov	r1, r3
 8008670:	4610      	mov	r0, r2
 8008672:	f7fe fe90 	bl	8007396 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800867a:	4b1b      	ldr	r3, [pc, #108]	@ (80086e8 <xTaskIncrementTick+0x168>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008680:	429a      	cmp	r2, r3
 8008682:	d3b8      	bcc.n	80085f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8008684:	2301      	movs	r3, #1
 8008686:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008688:	e7b5      	b.n	80085f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800868a:	4b17      	ldr	r3, [pc, #92]	@ (80086e8 <xTaskIncrementTick+0x168>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008690:	4914      	ldr	r1, [pc, #80]	@ (80086e4 <xTaskIncrementTick+0x164>)
 8008692:	4613      	mov	r3, r2
 8008694:	009b      	lsls	r3, r3, #2
 8008696:	4413      	add	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	440b      	add	r3, r1
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d901      	bls.n	80086a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80086a2:	2301      	movs	r3, #1
 80086a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086a6:	4b11      	ldr	r3, [pc, #68]	@ (80086ec <xTaskIncrementTick+0x16c>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d007      	beq.n	80086be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80086ae:	2301      	movs	r3, #1
 80086b0:	617b      	str	r3, [r7, #20]
 80086b2:	e004      	b.n	80086be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086b4:	4b0e      	ldr	r3, [pc, #56]	@ (80086f0 <xTaskIncrementTick+0x170>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	3301      	adds	r3, #1
 80086ba:	4a0d      	ldr	r2, [pc, #52]	@ (80086f0 <xTaskIncrementTick+0x170>)
 80086bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80086be:	697b      	ldr	r3, [r7, #20]
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3718      	adds	r7, #24
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000fe8 	.word	0x20000fe8
 80086cc:	20000fc4 	.word	0x20000fc4
 80086d0:	20000f78 	.word	0x20000f78
 80086d4:	20000f7c 	.word	0x20000f7c
 80086d8:	20000fd8 	.word	0x20000fd8
 80086dc:	20000fe0 	.word	0x20000fe0
 80086e0:	20000fc8 	.word	0x20000fc8
 80086e4:	20000af0 	.word	0x20000af0
 80086e8:	20000aec 	.word	0x20000aec
 80086ec:	20000fd4 	.word	0x20000fd4
 80086f0:	20000fd0 	.word	0x20000fd0

080086f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086f4:	b480      	push	{r7}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086fa:	4b28      	ldr	r3, [pc, #160]	@ (800879c <vTaskSwitchContext+0xa8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d003      	beq.n	800870a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008702:	4b27      	ldr	r3, [pc, #156]	@ (80087a0 <vTaskSwitchContext+0xac>)
 8008704:	2201      	movs	r2, #1
 8008706:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008708:	e042      	b.n	8008790 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800870a:	4b25      	ldr	r3, [pc, #148]	@ (80087a0 <vTaskSwitchContext+0xac>)
 800870c:	2200      	movs	r2, #0
 800870e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008710:	4b24      	ldr	r3, [pc, #144]	@ (80087a4 <vTaskSwitchContext+0xb0>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	e011      	b.n	800873c <vTaskSwitchContext+0x48>
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d10b      	bne.n	8008736 <vTaskSwitchContext+0x42>
	__asm volatile
 800871e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008722:	f383 8811 	msr	BASEPRI, r3
 8008726:	f3bf 8f6f 	isb	sy
 800872a:	f3bf 8f4f 	dsb	sy
 800872e:	607b      	str	r3, [r7, #4]
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	e7fd      	b.n	8008732 <vTaskSwitchContext+0x3e>
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	3b01      	subs	r3, #1
 800873a:	60fb      	str	r3, [r7, #12]
 800873c:	491a      	ldr	r1, [pc, #104]	@ (80087a8 <vTaskSwitchContext+0xb4>)
 800873e:	68fa      	ldr	r2, [r7, #12]
 8008740:	4613      	mov	r3, r2
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	4413      	add	r3, r2
 8008746:	009b      	lsls	r3, r3, #2
 8008748:	440b      	add	r3, r1
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d0e3      	beq.n	8008718 <vTaskSwitchContext+0x24>
 8008750:	68fa      	ldr	r2, [r7, #12]
 8008752:	4613      	mov	r3, r2
 8008754:	009b      	lsls	r3, r3, #2
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	4a13      	ldr	r2, [pc, #76]	@ (80087a8 <vTaskSwitchContext+0xb4>)
 800875c:	4413      	add	r3, r2
 800875e:	60bb      	str	r3, [r7, #8]
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	685b      	ldr	r3, [r3, #4]
 8008764:	685a      	ldr	r2, [r3, #4]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	605a      	str	r2, [r3, #4]
 800876a:	68bb      	ldr	r3, [r7, #8]
 800876c:	685a      	ldr	r2, [r3, #4]
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	3308      	adds	r3, #8
 8008772:	429a      	cmp	r2, r3
 8008774:	d104      	bne.n	8008780 <vTaskSwitchContext+0x8c>
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	685a      	ldr	r2, [r3, #4]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	605a      	str	r2, [r3, #4]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	4a09      	ldr	r2, [pc, #36]	@ (80087ac <vTaskSwitchContext+0xb8>)
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	4a06      	ldr	r2, [pc, #24]	@ (80087a4 <vTaskSwitchContext+0xb0>)
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	6013      	str	r3, [r2, #0]
}
 8008790:	bf00      	nop
 8008792:	3714      	adds	r7, #20
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	20000fe8 	.word	0x20000fe8
 80087a0:	20000fd4 	.word	0x20000fd4
 80087a4:	20000fc8 	.word	0x20000fc8
 80087a8:	20000af0 	.word	0x20000af0
 80087ac:	20000aec 	.word	0x20000aec

080087b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d10b      	bne.n	80087d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	60fb      	str	r3, [r7, #12]
}
 80087d2:	bf00      	nop
 80087d4:	bf00      	nop
 80087d6:	e7fd      	b.n	80087d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087d8:	4b07      	ldr	r3, [pc, #28]	@ (80087f8 <vTaskPlaceOnEventList+0x48>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	3318      	adds	r3, #24
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f7fe fdfc 	bl	80073de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087e6:	2101      	movs	r1, #1
 80087e8:	6838      	ldr	r0, [r7, #0]
 80087ea:	f000 fa81 	bl	8008cf0 <prvAddCurrentTaskToDelayedList>
}
 80087ee:	bf00      	nop
 80087f0:	3710      	adds	r7, #16
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}
 80087f6:	bf00      	nop
 80087f8:	20000aec 	.word	0x20000aec

080087fc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b086      	sub	sp, #24
 8008800:	af00      	add	r7, sp, #0
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10b      	bne.n	8008826 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800880e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008812:	f383 8811 	msr	BASEPRI, r3
 8008816:	f3bf 8f6f 	isb	sy
 800881a:	f3bf 8f4f 	dsb	sy
 800881e:	617b      	str	r3, [r7, #20]
}
 8008820:	bf00      	nop
 8008822:	bf00      	nop
 8008824:	e7fd      	b.n	8008822 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008826:	4b0a      	ldr	r3, [pc, #40]	@ (8008850 <vTaskPlaceOnEventListRestricted+0x54>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	3318      	adds	r3, #24
 800882c:	4619      	mov	r1, r3
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f7fe fdb1 	bl	8007396 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d002      	beq.n	8008840 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800883a:	f04f 33ff 	mov.w	r3, #4294967295
 800883e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008840:	6879      	ldr	r1, [r7, #4]
 8008842:	68b8      	ldr	r0, [r7, #8]
 8008844:	f000 fa54 	bl	8008cf0 <prvAddCurrentTaskToDelayedList>
	}
 8008848:	bf00      	nop
 800884a:	3718      	adds	r7, #24
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	20000aec 	.word	0x20000aec

08008854 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008864:	693b      	ldr	r3, [r7, #16]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10b      	bne.n	8008882 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800886a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800886e:	f383 8811 	msr	BASEPRI, r3
 8008872:	f3bf 8f6f 	isb	sy
 8008876:	f3bf 8f4f 	dsb	sy
 800887a:	60fb      	str	r3, [r7, #12]
}
 800887c:	bf00      	nop
 800887e:	bf00      	nop
 8008880:	e7fd      	b.n	800887e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	3318      	adds	r3, #24
 8008886:	4618      	mov	r0, r3
 8008888:	f7fe fde2 	bl	8007450 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800888c:	4b1d      	ldr	r3, [pc, #116]	@ (8008904 <xTaskRemoveFromEventList+0xb0>)
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d11d      	bne.n	80088d0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	3304      	adds	r3, #4
 8008898:	4618      	mov	r0, r3
 800889a:	f7fe fdd9 	bl	8007450 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a2:	4b19      	ldr	r3, [pc, #100]	@ (8008908 <xTaskRemoveFromEventList+0xb4>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	429a      	cmp	r2, r3
 80088a8:	d903      	bls.n	80088b2 <xTaskRemoveFromEventList+0x5e>
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ae:	4a16      	ldr	r2, [pc, #88]	@ (8008908 <xTaskRemoveFromEventList+0xb4>)
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088b6:	4613      	mov	r3, r2
 80088b8:	009b      	lsls	r3, r3, #2
 80088ba:	4413      	add	r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	4a13      	ldr	r2, [pc, #76]	@ (800890c <xTaskRemoveFromEventList+0xb8>)
 80088c0:	441a      	add	r2, r3
 80088c2:	693b      	ldr	r3, [r7, #16]
 80088c4:	3304      	adds	r3, #4
 80088c6:	4619      	mov	r1, r3
 80088c8:	4610      	mov	r0, r2
 80088ca:	f7fe fd64 	bl	8007396 <vListInsertEnd>
 80088ce:	e005      	b.n	80088dc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	3318      	adds	r3, #24
 80088d4:	4619      	mov	r1, r3
 80088d6:	480e      	ldr	r0, [pc, #56]	@ (8008910 <xTaskRemoveFromEventList+0xbc>)
 80088d8:	f7fe fd5d 	bl	8007396 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e0:	4b0c      	ldr	r3, [pc, #48]	@ (8008914 <xTaskRemoveFromEventList+0xc0>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d905      	bls.n	80088f6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088ea:	2301      	movs	r3, #1
 80088ec:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008918 <xTaskRemoveFromEventList+0xc4>)
 80088f0:	2201      	movs	r2, #1
 80088f2:	601a      	str	r2, [r3, #0]
 80088f4:	e001      	b.n	80088fa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80088f6:	2300      	movs	r3, #0
 80088f8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088fa:	697b      	ldr	r3, [r7, #20]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3718      	adds	r7, #24
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	20000fe8 	.word	0x20000fe8
 8008908:	20000fc8 	.word	0x20000fc8
 800890c:	20000af0 	.word	0x20000af0
 8008910:	20000f80 	.word	0x20000f80
 8008914:	20000aec 	.word	0x20000aec
 8008918:	20000fd4 	.word	0x20000fd4

0800891c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008924:	4b06      	ldr	r3, [pc, #24]	@ (8008940 <vTaskInternalSetTimeOutState+0x24>)
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800892c:	4b05      	ldr	r3, [pc, #20]	@ (8008944 <vTaskInternalSetTimeOutState+0x28>)
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	605a      	str	r2, [r3, #4]
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr
 8008940:	20000fd8 	.word	0x20000fd8
 8008944:	20000fc4 	.word	0x20000fc4

08008948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
 8008950:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10b      	bne.n	8008970 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895c:	f383 8811 	msr	BASEPRI, r3
 8008960:	f3bf 8f6f 	isb	sy
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	613b      	str	r3, [r7, #16]
}
 800896a:	bf00      	nop
 800896c:	bf00      	nop
 800896e:	e7fd      	b.n	800896c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10b      	bne.n	800898e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8008976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800897a:	f383 8811 	msr	BASEPRI, r3
 800897e:	f3bf 8f6f 	isb	sy
 8008982:	f3bf 8f4f 	dsb	sy
 8008986:	60fb      	str	r3, [r7, #12]
}
 8008988:	bf00      	nop
 800898a:	bf00      	nop
 800898c:	e7fd      	b.n	800898a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800898e:	f000 ff4b 	bl	8009828 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008992:	4b1d      	ldr	r3, [pc, #116]	@ (8008a08 <xTaskCheckForTimeOut+0xc0>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	69ba      	ldr	r2, [r7, #24]
 800899e:	1ad3      	subs	r3, r2, r3
 80089a0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089aa:	d102      	bne.n	80089b2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089ac:	2300      	movs	r3, #0
 80089ae:	61fb      	str	r3, [r7, #28]
 80089b0:	e023      	b.n	80089fa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	4b15      	ldr	r3, [pc, #84]	@ (8008a0c <xTaskCheckForTimeOut+0xc4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d007      	beq.n	80089ce <xTaskCheckForTimeOut+0x86>
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	69ba      	ldr	r2, [r7, #24]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d302      	bcc.n	80089ce <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089c8:	2301      	movs	r3, #1
 80089ca:	61fb      	str	r3, [r7, #28]
 80089cc:	e015      	b.n	80089fa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	697a      	ldr	r2, [r7, #20]
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d20b      	bcs.n	80089f0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7ff ff99 	bl	800891c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089ea:	2300      	movs	r3, #0
 80089ec:	61fb      	str	r3, [r7, #28]
 80089ee:	e004      	b.n	80089fa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089f6:	2301      	movs	r3, #1
 80089f8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089fa:	f000 ff47 	bl	800988c <vPortExitCritical>

	return xReturn;
 80089fe:	69fb      	ldr	r3, [r7, #28]
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3720      	adds	r7, #32
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	20000fc4 	.word	0x20000fc4
 8008a0c:	20000fd8 	.word	0x20000fd8

08008a10 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a14:	4b03      	ldr	r3, [pc, #12]	@ (8008a24 <vTaskMissedYield+0x14>)
 8008a16:	2201      	movs	r2, #1
 8008a18:	601a      	str	r2, [r3, #0]
}
 8008a1a:	bf00      	nop
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	20000fd4 	.word	0x20000fd4

08008a28 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a30:	f000 f852 	bl	8008ad8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a34:	4b06      	ldr	r3, [pc, #24]	@ (8008a50 <prvIdleTask+0x28>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d9f9      	bls.n	8008a30 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a3c:	4b05      	ldr	r3, [pc, #20]	@ (8008a54 <prvIdleTask+0x2c>)
 8008a3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a42:	601a      	str	r2, [r3, #0]
 8008a44:	f3bf 8f4f 	dsb	sy
 8008a48:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a4c:	e7f0      	b.n	8008a30 <prvIdleTask+0x8>
 8008a4e:	bf00      	nop
 8008a50:	20000af0 	.word	0x20000af0
 8008a54:	e000ed04 	.word	0xe000ed04

08008a58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b082      	sub	sp, #8
 8008a5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a5e:	2300      	movs	r3, #0
 8008a60:	607b      	str	r3, [r7, #4]
 8008a62:	e00c      	b.n	8008a7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	4613      	mov	r3, r2
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	4413      	add	r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4a12      	ldr	r2, [pc, #72]	@ (8008ab8 <prvInitialiseTaskLists+0x60>)
 8008a70:	4413      	add	r3, r2
 8008a72:	4618      	mov	r0, r3
 8008a74:	f7fe fc62 	bl	800733c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	607b      	str	r3, [r7, #4]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2b37      	cmp	r3, #55	@ 0x37
 8008a82:	d9ef      	bls.n	8008a64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a84:	480d      	ldr	r0, [pc, #52]	@ (8008abc <prvInitialiseTaskLists+0x64>)
 8008a86:	f7fe fc59 	bl	800733c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a8a:	480d      	ldr	r0, [pc, #52]	@ (8008ac0 <prvInitialiseTaskLists+0x68>)
 8008a8c:	f7fe fc56 	bl	800733c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a90:	480c      	ldr	r0, [pc, #48]	@ (8008ac4 <prvInitialiseTaskLists+0x6c>)
 8008a92:	f7fe fc53 	bl	800733c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a96:	480c      	ldr	r0, [pc, #48]	@ (8008ac8 <prvInitialiseTaskLists+0x70>)
 8008a98:	f7fe fc50 	bl	800733c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a9c:	480b      	ldr	r0, [pc, #44]	@ (8008acc <prvInitialiseTaskLists+0x74>)
 8008a9e:	f7fe fc4d 	bl	800733c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8008ad0 <prvInitialiseTaskLists+0x78>)
 8008aa4:	4a05      	ldr	r2, [pc, #20]	@ (8008abc <prvInitialiseTaskLists+0x64>)
 8008aa6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad4 <prvInitialiseTaskLists+0x7c>)
 8008aaa:	4a05      	ldr	r2, [pc, #20]	@ (8008ac0 <prvInitialiseTaskLists+0x68>)
 8008aac:	601a      	str	r2, [r3, #0]
}
 8008aae:	bf00      	nop
 8008ab0:	3708      	adds	r7, #8
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
 8008ab6:	bf00      	nop
 8008ab8:	20000af0 	.word	0x20000af0
 8008abc:	20000f50 	.word	0x20000f50
 8008ac0:	20000f64 	.word	0x20000f64
 8008ac4:	20000f80 	.word	0x20000f80
 8008ac8:	20000f94 	.word	0x20000f94
 8008acc:	20000fac 	.word	0x20000fac
 8008ad0:	20000f78 	.word	0x20000f78
 8008ad4:	20000f7c 	.word	0x20000f7c

08008ad8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	b082      	sub	sp, #8
 8008adc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ade:	e019      	b.n	8008b14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008ae0:	f000 fea2 	bl	8009828 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ae4:	4b10      	ldr	r3, [pc, #64]	@ (8008b28 <prvCheckTasksWaitingTermination+0x50>)
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	3304      	adds	r3, #4
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fe fcad 	bl	8007450 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008af6:	4b0d      	ldr	r3, [pc, #52]	@ (8008b2c <prvCheckTasksWaitingTermination+0x54>)
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	3b01      	subs	r3, #1
 8008afc:	4a0b      	ldr	r2, [pc, #44]	@ (8008b2c <prvCheckTasksWaitingTermination+0x54>)
 8008afe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b00:	4b0b      	ldr	r3, [pc, #44]	@ (8008b30 <prvCheckTasksWaitingTermination+0x58>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	3b01      	subs	r3, #1
 8008b06:	4a0a      	ldr	r2, [pc, #40]	@ (8008b30 <prvCheckTasksWaitingTermination+0x58>)
 8008b08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b0a:	f000 febf 	bl	800988c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 f810 	bl	8008b34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b14:	4b06      	ldr	r3, [pc, #24]	@ (8008b30 <prvCheckTasksWaitingTermination+0x58>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e1      	bne.n	8008ae0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b1c:	bf00      	nop
 8008b1e:	bf00      	nop
 8008b20:	3708      	adds	r7, #8
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}
 8008b26:	bf00      	nop
 8008b28:	20000f94 	.word	0x20000f94
 8008b2c:	20000fc0 	.word	0x20000fc0
 8008b30:	20000fa8 	.word	0x20000fa8

08008b34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d108      	bne.n	8008b58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f001 f85c 	bl	8009c08 <vPortFree>
				vPortFree( pxTCB );
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f001 f859 	bl	8009c08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b56:	e019      	b.n	8008b8c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	d103      	bne.n	8008b6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f001 f850 	bl	8009c08 <vPortFree>
	}
 8008b68:	e010      	b.n	8008b8c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d00b      	beq.n	8008b8c <prvDeleteTCB+0x58>
	__asm volatile
 8008b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b78:	f383 8811 	msr	BASEPRI, r3
 8008b7c:	f3bf 8f6f 	isb	sy
 8008b80:	f3bf 8f4f 	dsb	sy
 8008b84:	60fb      	str	r3, [r7, #12]
}
 8008b86:	bf00      	nop
 8008b88:	bf00      	nop
 8008b8a:	e7fd      	b.n	8008b88 <prvDeleteTCB+0x54>
	}
 8008b8c:	bf00      	nop
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8008bcc <prvResetNextTaskUnblockTime+0x38>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d104      	bne.n	8008bae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8008bd0 <prvResetNextTaskUnblockTime+0x3c>)
 8008ba6:	f04f 32ff 	mov.w	r2, #4294967295
 8008baa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bac:	e008      	b.n	8008bc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bae:	4b07      	ldr	r3, [pc, #28]	@ (8008bcc <prvResetNextTaskUnblockTime+0x38>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68db      	ldr	r3, [r3, #12]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	4a04      	ldr	r2, [pc, #16]	@ (8008bd0 <prvResetNextTaskUnblockTime+0x3c>)
 8008bbe:	6013      	str	r3, [r2, #0]
}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr
 8008bcc:	20000f78 	.word	0x20000f78
 8008bd0:	20000fe0 	.word	0x20000fe0

08008bd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bda:	4b0b      	ldr	r3, [pc, #44]	@ (8008c08 <xTaskGetSchedulerState+0x34>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d102      	bne.n	8008be8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008be2:	2301      	movs	r3, #1
 8008be4:	607b      	str	r3, [r7, #4]
 8008be6:	e008      	b.n	8008bfa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008be8:	4b08      	ldr	r3, [pc, #32]	@ (8008c0c <xTaskGetSchedulerState+0x38>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	607b      	str	r3, [r7, #4]
 8008bf4:	e001      	b.n	8008bfa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bfa:	687b      	ldr	r3, [r7, #4]
	}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr
 8008c08:	20000fcc 	.word	0x20000fcc
 8008c0c:	20000fe8 	.word	0x20000fe8

08008c10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d058      	beq.n	8008cd8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c26:	4b2f      	ldr	r3, [pc, #188]	@ (8008ce4 <xTaskPriorityDisinherit+0xd4>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	693a      	ldr	r2, [r7, #16]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d00b      	beq.n	8008c48 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	60fb      	str	r3, [r7, #12]
}
 8008c42:	bf00      	nop
 8008c44:	bf00      	nop
 8008c46:	e7fd      	b.n	8008c44 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10b      	bne.n	8008c68 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c54:	f383 8811 	msr	BASEPRI, r3
 8008c58:	f3bf 8f6f 	isb	sy
 8008c5c:	f3bf 8f4f 	dsb	sy
 8008c60:	60bb      	str	r3, [r7, #8]
}
 8008c62:	bf00      	nop
 8008c64:	bf00      	nop
 8008c66:	e7fd      	b.n	8008c64 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c6c:	1e5a      	subs	r2, r3, #1
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c7a:	429a      	cmp	r2, r3
 8008c7c:	d02c      	beq.n	8008cd8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c7e:	693b      	ldr	r3, [r7, #16]
 8008c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d128      	bne.n	8008cd8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	3304      	adds	r3, #4
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fe fbe0 	bl	8007450 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ca4:	693b      	ldr	r3, [r7, #16]
 8008ca6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8008ce8 <xTaskPriorityDisinherit+0xd8>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	d903      	bls.n	8008cb8 <xTaskPriorityDisinherit+0xa8>
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8008ce8 <xTaskPriorityDisinherit+0xd8>)
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	4a09      	ldr	r2, [pc, #36]	@ (8008cec <xTaskPriorityDisinherit+0xdc>)
 8008cc6:	441a      	add	r2, r3
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	3304      	adds	r3, #4
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4610      	mov	r0, r2
 8008cd0:	f7fe fb61 	bl	8007396 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008cd4:	2301      	movs	r3, #1
 8008cd6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cd8:	697b      	ldr	r3, [r7, #20]
	}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3718      	adds	r7, #24
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}
 8008ce2:	bf00      	nop
 8008ce4:	20000aec 	.word	0x20000aec
 8008ce8:	20000fc8 	.word	0x20000fc8
 8008cec:	20000af0 	.word	0x20000af0

08008cf0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b084      	sub	sp, #16
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cfa:	4b21      	ldr	r3, [pc, #132]	@ (8008d80 <prvAddCurrentTaskToDelayedList+0x90>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d00:	4b20      	ldr	r3, [pc, #128]	@ (8008d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	3304      	adds	r3, #4
 8008d06:	4618      	mov	r0, r3
 8008d08:	f7fe fba2 	bl	8007450 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d12:	d10a      	bne.n	8008d2a <prvAddCurrentTaskToDelayedList+0x3a>
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d007      	beq.n	8008d2a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8008d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4619      	mov	r1, r3
 8008d22:	4819      	ldr	r0, [pc, #100]	@ (8008d88 <prvAddCurrentTaskToDelayedList+0x98>)
 8008d24:	f7fe fb37 	bl	8007396 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d28:	e026      	b.n	8008d78 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d2a:	68fa      	ldr	r2, [r7, #12]
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4413      	add	r3, r2
 8008d30:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d32:	4b14      	ldr	r3, [pc, #80]	@ (8008d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68ba      	ldr	r2, [r7, #8]
 8008d38:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d3a:	68ba      	ldr	r2, [r7, #8]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d209      	bcs.n	8008d56 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d42:	4b12      	ldr	r3, [pc, #72]	@ (8008d8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d44:	681a      	ldr	r2, [r3, #0]
 8008d46:	4b0f      	ldr	r3, [pc, #60]	@ (8008d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3304      	adds	r3, #4
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	4610      	mov	r0, r2
 8008d50:	f7fe fb45 	bl	80073de <vListInsert>
}
 8008d54:	e010      	b.n	8008d78 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d56:	4b0e      	ldr	r3, [pc, #56]	@ (8008d90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	4b0a      	ldr	r3, [pc, #40]	@ (8008d84 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	3304      	adds	r3, #4
 8008d60:	4619      	mov	r1, r3
 8008d62:	4610      	mov	r0, r2
 8008d64:	f7fe fb3b 	bl	80073de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d68:	4b0a      	ldr	r3, [pc, #40]	@ (8008d94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	68ba      	ldr	r2, [r7, #8]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d202      	bcs.n	8008d78 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d72:	4a08      	ldr	r2, [pc, #32]	@ (8008d94 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	6013      	str	r3, [r2, #0]
}
 8008d78:	bf00      	nop
 8008d7a:	3710      	adds	r7, #16
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	20000fc4 	.word	0x20000fc4
 8008d84:	20000aec 	.word	0x20000aec
 8008d88:	20000fac 	.word	0x20000fac
 8008d8c:	20000f7c 	.word	0x20000f7c
 8008d90:	20000f78 	.word	0x20000f78
 8008d94:	20000fe0 	.word	0x20000fe0

08008d98 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08a      	sub	sp, #40	@ 0x28
 8008d9c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d9e:	2300      	movs	r3, #0
 8008da0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008da2:	f000 fbb1 	bl	8009508 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008da6:	4b1d      	ldr	r3, [pc, #116]	@ (8008e1c <xTimerCreateTimerTask+0x84>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d021      	beq.n	8008df2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008dae:	2300      	movs	r3, #0
 8008db0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008db6:	1d3a      	adds	r2, r7, #4
 8008db8:	f107 0108 	add.w	r1, r7, #8
 8008dbc:	f107 030c 	add.w	r3, r7, #12
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	f7fe faa1 	bl	8007308 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008dc6:	6879      	ldr	r1, [r7, #4]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	68fa      	ldr	r2, [r7, #12]
 8008dcc:	9202      	str	r2, [sp, #8]
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	2302      	movs	r3, #2
 8008dd2:	9300      	str	r3, [sp, #0]
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	460a      	mov	r2, r1
 8008dd8:	4911      	ldr	r1, [pc, #68]	@ (8008e20 <xTimerCreateTimerTask+0x88>)
 8008dda:	4812      	ldr	r0, [pc, #72]	@ (8008e24 <xTimerCreateTimerTask+0x8c>)
 8008ddc:	f7ff f85c 	bl	8007e98 <xTaskCreateStatic>
 8008de0:	4603      	mov	r3, r0
 8008de2:	4a11      	ldr	r2, [pc, #68]	@ (8008e28 <xTimerCreateTimerTask+0x90>)
 8008de4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008de6:	4b10      	ldr	r3, [pc, #64]	@ (8008e28 <xTimerCreateTimerTask+0x90>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d001      	beq.n	8008df2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dee:	2301      	movs	r3, #1
 8008df0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d10b      	bne.n	8008e10 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008df8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dfc:	f383 8811 	msr	BASEPRI, r3
 8008e00:	f3bf 8f6f 	isb	sy
 8008e04:	f3bf 8f4f 	dsb	sy
 8008e08:	613b      	str	r3, [r7, #16]
}
 8008e0a:	bf00      	nop
 8008e0c:	bf00      	nop
 8008e0e:	e7fd      	b.n	8008e0c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e10:	697b      	ldr	r3, [r7, #20]
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3718      	adds	r7, #24
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
 8008e1a:	bf00      	nop
 8008e1c:	2000101c 	.word	0x2000101c
 8008e20:	08009fc0 	.word	0x08009fc0
 8008e24:	080090a1 	.word	0x080090a1
 8008e28:	20001020 	.word	0x20001020

08008e2c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b088      	sub	sp, #32
 8008e30:	af02      	add	r7, sp, #8
 8008e32:	60f8      	str	r0, [r7, #12]
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8008e3a:	202c      	movs	r0, #44	@ 0x2c
 8008e3c:	f000 fe16 	bl	8009a6c <pvPortMalloc>
 8008e40:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8008e42:	697b      	ldr	r3, [r7, #20]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00d      	beq.n	8008e64 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	6a3b      	ldr	r3, [r7, #32]
 8008e56:	9300      	str	r3, [sp, #0]
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	687a      	ldr	r2, [r7, #4]
 8008e5c:	68b9      	ldr	r1, [r7, #8]
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 f845 	bl	8008eee <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008e64:	697b      	ldr	r3, [r7, #20]
	}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b08a      	sub	sp, #40	@ 0x28
 8008e72:	af02      	add	r7, sp, #8
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	607a      	str	r2, [r7, #4]
 8008e7a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8008e7c:	232c      	movs	r3, #44	@ 0x2c
 8008e7e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	2b2c      	cmp	r3, #44	@ 0x2c
 8008e84:	d00b      	beq.n	8008e9e <xTimerCreateStatic+0x30>
	__asm volatile
 8008e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e8a:	f383 8811 	msr	BASEPRI, r3
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f3bf 8f4f 	dsb	sy
 8008e96:	61bb      	str	r3, [r7, #24]
}
 8008e98:	bf00      	nop
 8008e9a:	bf00      	nop
 8008e9c:	e7fd      	b.n	8008e9a <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8008ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d10b      	bne.n	8008ebe <xTimerCreateStatic+0x50>
	__asm volatile
 8008ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008eaa:	f383 8811 	msr	BASEPRI, r3
 8008eae:	f3bf 8f6f 	isb	sy
 8008eb2:	f3bf 8f4f 	dsb	sy
 8008eb6:	617b      	str	r3, [r7, #20]
}
 8008eb8:	bf00      	nop
 8008eba:	bf00      	nop
 8008ebc:	e7fd      	b.n	8008eba <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8008ebe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ec0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8008ec2:	69fb      	ldr	r3, [r7, #28]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d00d      	beq.n	8008ee4 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	2202      	movs	r2, #2
 8008ecc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008ed0:	69fb      	ldr	r3, [r7, #28]
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	68b9      	ldr	r1, [r7, #8]
 8008ede:	68f8      	ldr	r0, [r7, #12]
 8008ee0:	f000 f805 	bl	8008eee <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8008ee4:	69fb      	ldr	r3, [r7, #28]
	}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3720      	adds	r7, #32
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b086      	sub	sp, #24
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	60f8      	str	r0, [r7, #12]
 8008ef6:	60b9      	str	r1, [r7, #8]
 8008ef8:	607a      	str	r2, [r7, #4]
 8008efa:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10b      	bne.n	8008f1a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8008f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	617b      	str	r3, [r7, #20]
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop
 8008f18:	e7fd      	b.n	8008f16 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8008f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d01e      	beq.n	8008f5e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8008f20:	f000 faf2 	bl	8009508 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8008f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f26:	68fa      	ldr	r2, [r7, #12]
 8008f28:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8008f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f38:	6a3a      	ldr	r2, [r7, #32]
 8008f3a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3e:	3304      	adds	r3, #4
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fe fa1b 	bl	800737c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d008      	beq.n	8008f5e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f52:	f043 0304 	orr.w	r3, r3, #4
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8008f5e:	bf00      	nop
 8008f60:	3718      	adds	r7, #24
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08a      	sub	sp, #40	@ 0x28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	607a      	str	r2, [r7, #4]
 8008f74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10b      	bne.n	8008f98 <xTimerGenericCommand+0x30>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	623b      	str	r3, [r7, #32]
}
 8008f92:	bf00      	nop
 8008f94:	bf00      	nop
 8008f96:	e7fd      	b.n	8008f94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008f98:	4b19      	ldr	r3, [pc, #100]	@ (8009000 <xTimerGenericCommand+0x98>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d02a      	beq.n	8008ff6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	2b05      	cmp	r3, #5
 8008fb0:	dc18      	bgt.n	8008fe4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008fb2:	f7ff fe0f 	bl	8008bd4 <xTaskGetSchedulerState>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d109      	bne.n	8008fd0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008fbc:	4b10      	ldr	r3, [pc, #64]	@ (8009000 <xTimerGenericCommand+0x98>)
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	f107 0110 	add.w	r1, r7, #16
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc8:	f7fe fb76 	bl	80076b8 <xQueueGenericSend>
 8008fcc:	6278      	str	r0, [r7, #36]	@ 0x24
 8008fce:	e012      	b.n	8008ff6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8009000 <xTimerGenericCommand+0x98>)
 8008fd2:	6818      	ldr	r0, [r3, #0]
 8008fd4:	f107 0110 	add.w	r1, r7, #16
 8008fd8:	2300      	movs	r3, #0
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f7fe fb6c 	bl	80076b8 <xQueueGenericSend>
 8008fe0:	6278      	str	r0, [r7, #36]	@ 0x24
 8008fe2:	e008      	b.n	8008ff6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008fe4:	4b06      	ldr	r3, [pc, #24]	@ (8009000 <xTimerGenericCommand+0x98>)
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	f107 0110 	add.w	r1, r7, #16
 8008fec:	2300      	movs	r3, #0
 8008fee:	683a      	ldr	r2, [r7, #0]
 8008ff0:	f7fe fc64 	bl	80078bc <xQueueGenericSendFromISR>
 8008ff4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	3728      	adds	r7, #40	@ 0x28
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	2000101c 	.word	0x2000101c

08009004 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b088      	sub	sp, #32
 8009008:	af02      	add	r7, sp, #8
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800900e:	4b23      	ldr	r3, [pc, #140]	@ (800909c <prvProcessExpiredTimer+0x98>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009018:	697b      	ldr	r3, [r7, #20]
 800901a:	3304      	adds	r3, #4
 800901c:	4618      	mov	r0, r3
 800901e:	f7fe fa17 	bl	8007450 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009028:	f003 0304 	and.w	r3, r3, #4
 800902c:	2b00      	cmp	r3, #0
 800902e:	d023      	beq.n	8009078 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009030:	697b      	ldr	r3, [r7, #20]
 8009032:	699a      	ldr	r2, [r3, #24]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	18d1      	adds	r1, r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	683a      	ldr	r2, [r7, #0]
 800903c:	6978      	ldr	r0, [r7, #20]
 800903e:	f000 f8d5 	bl	80091ec <prvInsertTimerInActiveList>
 8009042:	4603      	mov	r3, r0
 8009044:	2b00      	cmp	r3, #0
 8009046:	d020      	beq.n	800908a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009048:	2300      	movs	r3, #0
 800904a:	9300      	str	r3, [sp, #0]
 800904c:	2300      	movs	r3, #0
 800904e:	687a      	ldr	r2, [r7, #4]
 8009050:	2100      	movs	r1, #0
 8009052:	6978      	ldr	r0, [r7, #20]
 8009054:	f7ff ff88 	bl	8008f68 <xTimerGenericCommand>
 8009058:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800905a:	693b      	ldr	r3, [r7, #16]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d114      	bne.n	800908a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009064:	f383 8811 	msr	BASEPRI, r3
 8009068:	f3bf 8f6f 	isb	sy
 800906c:	f3bf 8f4f 	dsb	sy
 8009070:	60fb      	str	r3, [r7, #12]
}
 8009072:	bf00      	nop
 8009074:	bf00      	nop
 8009076:	e7fd      	b.n	8009074 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800907e:	f023 0301 	bic.w	r3, r3, #1
 8009082:	b2da      	uxtb	r2, r3
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	6a1b      	ldr	r3, [r3, #32]
 800908e:	6978      	ldr	r0, [r7, #20]
 8009090:	4798      	blx	r3
}
 8009092:	bf00      	nop
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	20001014 	.word	0x20001014

080090a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090a8:	f107 0308 	add.w	r3, r7, #8
 80090ac:	4618      	mov	r0, r3
 80090ae:	f000 f859 	bl	8009164 <prvGetNextExpireTime>
 80090b2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4619      	mov	r1, r3
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 f805 	bl	80090c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80090be:	f000 f8d7 	bl	8009270 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80090c2:	bf00      	nop
 80090c4:	e7f0      	b.n	80090a8 <prvTimerTask+0x8>
	...

080090c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80090d2:	f7ff f999 	bl	8008408 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80090d6:	f107 0308 	add.w	r3, r7, #8
 80090da:	4618      	mov	r0, r3
 80090dc:	f000 f866 	bl	80091ac <prvSampleTimeNow>
 80090e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d130      	bne.n	800914a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d10a      	bne.n	8009104 <prvProcessTimerOrBlockTask+0x3c>
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d806      	bhi.n	8009104 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80090f6:	f7ff f995 	bl	8008424 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80090fa:	68f9      	ldr	r1, [r7, #12]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff ff81 	bl	8009004 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009102:	e024      	b.n	800914e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d008      	beq.n	800911c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800910a:	4b13      	ldr	r3, [pc, #76]	@ (8009158 <prvProcessTimerOrBlockTask+0x90>)
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d101      	bne.n	8009118 <prvProcessTimerOrBlockTask+0x50>
 8009114:	2301      	movs	r3, #1
 8009116:	e000      	b.n	800911a <prvProcessTimerOrBlockTask+0x52>
 8009118:	2300      	movs	r3, #0
 800911a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800911c:	4b0f      	ldr	r3, [pc, #60]	@ (800915c <prvProcessTimerOrBlockTask+0x94>)
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	687a      	ldr	r2, [r7, #4]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	4619      	mov	r1, r3
 800912a:	f7fe fe81 	bl	8007e30 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800912e:	f7ff f979 	bl	8008424 <xTaskResumeAll>
 8009132:	4603      	mov	r3, r0
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10a      	bne.n	800914e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009138:	4b09      	ldr	r3, [pc, #36]	@ (8009160 <prvProcessTimerOrBlockTask+0x98>)
 800913a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800913e:	601a      	str	r2, [r3, #0]
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	f3bf 8f6f 	isb	sy
}
 8009148:	e001      	b.n	800914e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800914a:	f7ff f96b 	bl	8008424 <xTaskResumeAll>
}
 800914e:	bf00      	nop
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	20001018 	.word	0x20001018
 800915c:	2000101c 	.word	0x2000101c
 8009160:	e000ed04 	.word	0xe000ed04

08009164 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009164:	b480      	push	{r7}
 8009166:	b085      	sub	sp, #20
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800916c:	4b0e      	ldr	r3, [pc, #56]	@ (80091a8 <prvGetNextExpireTime+0x44>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d101      	bne.n	800917a <prvGetNextExpireTime+0x16>
 8009176:	2201      	movs	r2, #1
 8009178:	e000      	b.n	800917c <prvGetNextExpireTime+0x18>
 800917a:	2200      	movs	r2, #0
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d105      	bne.n	8009194 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009188:	4b07      	ldr	r3, [pc, #28]	@ (80091a8 <prvGetNextExpireTime+0x44>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	60fb      	str	r3, [r7, #12]
 8009192:	e001      	b.n	8009198 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009194:	2300      	movs	r3, #0
 8009196:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009198:	68fb      	ldr	r3, [r7, #12]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop
 80091a8:	20001014 	.word	0x20001014

080091ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80091b4:	f7ff f9d4 	bl	8008560 <xTaskGetTickCount>
 80091b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80091ba:	4b0b      	ldr	r3, [pc, #44]	@ (80091e8 <prvSampleTimeNow+0x3c>)
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	68fa      	ldr	r2, [r7, #12]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d205      	bcs.n	80091d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80091c4:	f000 f93a 	bl	800943c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	601a      	str	r2, [r3, #0]
 80091ce:	e002      	b.n	80091d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80091d6:	4a04      	ldr	r2, [pc, #16]	@ (80091e8 <prvSampleTimeNow+0x3c>)
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80091dc:	68fb      	ldr	r3, [r7, #12]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20001024 	.word	0x20001024

080091ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b086      	sub	sp, #24
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	607a      	str	r2, [r7, #4]
 80091f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80091fa:	2300      	movs	r3, #0
 80091fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	68fa      	ldr	r2, [r7, #12]
 8009208:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	429a      	cmp	r2, r3
 8009210:	d812      	bhi.n	8009238 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	1ad2      	subs	r2, r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	699b      	ldr	r3, [r3, #24]
 800921c:	429a      	cmp	r2, r3
 800921e:	d302      	bcc.n	8009226 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009220:	2301      	movs	r3, #1
 8009222:	617b      	str	r3, [r7, #20]
 8009224:	e01b      	b.n	800925e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009226:	4b10      	ldr	r3, [pc, #64]	@ (8009268 <prvInsertTimerInActiveList+0x7c>)
 8009228:	681a      	ldr	r2, [r3, #0]
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	3304      	adds	r3, #4
 800922e:	4619      	mov	r1, r3
 8009230:	4610      	mov	r0, r2
 8009232:	f7fe f8d4 	bl	80073de <vListInsert>
 8009236:	e012      	b.n	800925e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009238:	687a      	ldr	r2, [r7, #4]
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	429a      	cmp	r2, r3
 800923e:	d206      	bcs.n	800924e <prvInsertTimerInActiveList+0x62>
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	429a      	cmp	r2, r3
 8009246:	d302      	bcc.n	800924e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009248:	2301      	movs	r3, #1
 800924a:	617b      	str	r3, [r7, #20]
 800924c:	e007      	b.n	800925e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800924e:	4b07      	ldr	r3, [pc, #28]	@ (800926c <prvInsertTimerInActiveList+0x80>)
 8009250:	681a      	ldr	r2, [r3, #0]
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3304      	adds	r3, #4
 8009256:	4619      	mov	r1, r3
 8009258:	4610      	mov	r0, r2
 800925a:	f7fe f8c0 	bl	80073de <vListInsert>
		}
	}

	return xProcessTimerNow;
 800925e:	697b      	ldr	r3, [r7, #20]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3718      	adds	r7, #24
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	20001018 	.word	0x20001018
 800926c:	20001014 	.word	0x20001014

08009270 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b08e      	sub	sp, #56	@ 0x38
 8009274:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009276:	e0ce      	b.n	8009416 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	da19      	bge.n	80092b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800927e:	1d3b      	adds	r3, r7, #4
 8009280:	3304      	adds	r3, #4
 8009282:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009284:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009286:	2b00      	cmp	r3, #0
 8009288:	d10b      	bne.n	80092a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800928a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800928e:	f383 8811 	msr	BASEPRI, r3
 8009292:	f3bf 8f6f 	isb	sy
 8009296:	f3bf 8f4f 	dsb	sy
 800929a:	61fb      	str	r3, [r7, #28]
}
 800929c:	bf00      	nop
 800929e:	bf00      	nop
 80092a0:	e7fd      	b.n	800929e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80092a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092a8:	6850      	ldr	r0, [r2, #4]
 80092aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092ac:	6892      	ldr	r2, [r2, #8]
 80092ae:	4611      	mov	r1, r2
 80092b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	f2c0 80ae 	blt.w	8009416 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80092be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c0:	695b      	ldr	r3, [r3, #20]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d004      	beq.n	80092d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092c8:	3304      	adds	r3, #4
 80092ca:	4618      	mov	r0, r3
 80092cc:	f7fe f8c0 	bl	8007450 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80092d0:	463b      	mov	r3, r7
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff ff6a 	bl	80091ac <prvSampleTimeNow>
 80092d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2b09      	cmp	r3, #9
 80092de:	f200 8097 	bhi.w	8009410 <prvProcessReceivedCommands+0x1a0>
 80092e2:	a201      	add	r2, pc, #4	@ (adr r2, 80092e8 <prvProcessReceivedCommands+0x78>)
 80092e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e8:	08009311 	.word	0x08009311
 80092ec:	08009311 	.word	0x08009311
 80092f0:	08009311 	.word	0x08009311
 80092f4:	08009387 	.word	0x08009387
 80092f8:	0800939b 	.word	0x0800939b
 80092fc:	080093e7 	.word	0x080093e7
 8009300:	08009311 	.word	0x08009311
 8009304:	08009311 	.word	0x08009311
 8009308:	08009387 	.word	0x08009387
 800930c:	0800939b 	.word	0x0800939b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009312:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009316:	f043 0301 	orr.w	r3, r3, #1
 800931a:	b2da      	uxtb	r2, r3
 800931c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800931e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009322:	68ba      	ldr	r2, [r7, #8]
 8009324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009326:	699b      	ldr	r3, [r3, #24]
 8009328:	18d1      	adds	r1, r2, r3
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800932e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009330:	f7ff ff5c 	bl	80091ec <prvInsertTimerInActiveList>
 8009334:	4603      	mov	r3, r0
 8009336:	2b00      	cmp	r3, #0
 8009338:	d06c      	beq.n	8009414 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800933a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800933c:	6a1b      	ldr	r3, [r3, #32]
 800933e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009340:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009344:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009348:	f003 0304 	and.w	r3, r3, #4
 800934c:	2b00      	cmp	r3, #0
 800934e:	d061      	beq.n	8009414 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009350:	68ba      	ldr	r2, [r7, #8]
 8009352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	441a      	add	r2, r3
 8009358:	2300      	movs	r3, #0
 800935a:	9300      	str	r3, [sp, #0]
 800935c:	2300      	movs	r3, #0
 800935e:	2100      	movs	r1, #0
 8009360:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009362:	f7ff fe01 	bl	8008f68 <xTimerGenericCommand>
 8009366:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d152      	bne.n	8009414 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800936e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009372:	f383 8811 	msr	BASEPRI, r3
 8009376:	f3bf 8f6f 	isb	sy
 800937a:	f3bf 8f4f 	dsb	sy
 800937e:	61bb      	str	r3, [r7, #24]
}
 8009380:	bf00      	nop
 8009382:	bf00      	nop
 8009384:	e7fd      	b.n	8009382 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009388:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800938c:	f023 0301 	bic.w	r3, r3, #1
 8009390:	b2da      	uxtb	r2, r3
 8009392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009394:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009398:	e03d      	b.n	8009416 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800939a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800939c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093a0:	f043 0301 	orr.w	r3, r3, #1
 80093a4:	b2da      	uxtb	r2, r3
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80093b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093b4:	699b      	ldr	r3, [r3, #24]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d10b      	bne.n	80093d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80093ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093be:	f383 8811 	msr	BASEPRI, r3
 80093c2:	f3bf 8f6f 	isb	sy
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	617b      	str	r3, [r7, #20]
}
 80093cc:	bf00      	nop
 80093ce:	bf00      	nop
 80093d0:	e7fd      	b.n	80093ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80093d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d4:	699a      	ldr	r2, [r3, #24]
 80093d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d8:	18d1      	adds	r1, r2, r3
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80093de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093e0:	f7ff ff04 	bl	80091ec <prvInsertTimerInActiveList>
					break;
 80093e4:	e017      	b.n	8009416 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80093e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80093ec:	f003 0302 	and.w	r3, r3, #2
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d103      	bne.n	80093fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80093f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80093f6:	f000 fc07 	bl	8009c08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80093fa:	e00c      	b.n	8009416 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80093fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009402:	f023 0301 	bic.w	r3, r3, #1
 8009406:	b2da      	uxtb	r2, r3
 8009408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800940a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800940e:	e002      	b.n	8009416 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009410:	bf00      	nop
 8009412:	e000      	b.n	8009416 <prvProcessReceivedCommands+0x1a6>
					break;
 8009414:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009416:	4b08      	ldr	r3, [pc, #32]	@ (8009438 <prvProcessReceivedCommands+0x1c8>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	1d39      	adds	r1, r7, #4
 800941c:	2200      	movs	r2, #0
 800941e:	4618      	mov	r0, r3
 8009420:	f7fe faea 	bl	80079f8 <xQueueReceive>
 8009424:	4603      	mov	r3, r0
 8009426:	2b00      	cmp	r3, #0
 8009428:	f47f af26 	bne.w	8009278 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800942c:	bf00      	nop
 800942e:	bf00      	nop
 8009430:	3730      	adds	r7, #48	@ 0x30
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
 8009436:	bf00      	nop
 8009438:	2000101c 	.word	0x2000101c

0800943c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800943c:	b580      	push	{r7, lr}
 800943e:	b088      	sub	sp, #32
 8009440:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009442:	e049      	b.n	80094d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009444:	4b2e      	ldr	r3, [pc, #184]	@ (8009500 <prvSwitchTimerLists+0xc4>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	68db      	ldr	r3, [r3, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800944e:	4b2c      	ldr	r3, [pc, #176]	@ (8009500 <prvSwitchTimerLists+0xc4>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3304      	adds	r3, #4
 800945c:	4618      	mov	r0, r3
 800945e:	f7fd fff7 	bl	8007450 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6a1b      	ldr	r3, [r3, #32]
 8009466:	68f8      	ldr	r0, [r7, #12]
 8009468:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009470:	f003 0304 	and.w	r3, r3, #4
 8009474:	2b00      	cmp	r3, #0
 8009476:	d02f      	beq.n	80094d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	693a      	ldr	r2, [r7, #16]
 800947e:	4413      	add	r3, r2
 8009480:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009482:	68ba      	ldr	r2, [r7, #8]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	429a      	cmp	r2, r3
 8009488:	d90e      	bls.n	80094a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009496:	4b1a      	ldr	r3, [pc, #104]	@ (8009500 <prvSwitchTimerLists+0xc4>)
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3304      	adds	r3, #4
 800949e:	4619      	mov	r1, r3
 80094a0:	4610      	mov	r0, r2
 80094a2:	f7fd ff9c 	bl	80073de <vListInsert>
 80094a6:	e017      	b.n	80094d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80094a8:	2300      	movs	r3, #0
 80094aa:	9300      	str	r3, [sp, #0]
 80094ac:	2300      	movs	r3, #0
 80094ae:	693a      	ldr	r2, [r7, #16]
 80094b0:	2100      	movs	r1, #0
 80094b2:	68f8      	ldr	r0, [r7, #12]
 80094b4:	f7ff fd58 	bl	8008f68 <xTimerGenericCommand>
 80094b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d10b      	bne.n	80094d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80094c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094c4:	f383 8811 	msr	BASEPRI, r3
 80094c8:	f3bf 8f6f 	isb	sy
 80094cc:	f3bf 8f4f 	dsb	sy
 80094d0:	603b      	str	r3, [r7, #0]
}
 80094d2:	bf00      	nop
 80094d4:	bf00      	nop
 80094d6:	e7fd      	b.n	80094d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80094d8:	4b09      	ldr	r3, [pc, #36]	@ (8009500 <prvSwitchTimerLists+0xc4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1b0      	bne.n	8009444 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80094e2:	4b07      	ldr	r3, [pc, #28]	@ (8009500 <prvSwitchTimerLists+0xc4>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80094e8:	4b06      	ldr	r3, [pc, #24]	@ (8009504 <prvSwitchTimerLists+0xc8>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a04      	ldr	r2, [pc, #16]	@ (8009500 <prvSwitchTimerLists+0xc4>)
 80094ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80094f0:	4a04      	ldr	r2, [pc, #16]	@ (8009504 <prvSwitchTimerLists+0xc8>)
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	6013      	str	r3, [r2, #0]
}
 80094f6:	bf00      	nop
 80094f8:	3718      	adds	r7, #24
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop
 8009500:	20001014 	.word	0x20001014
 8009504:	20001018 	.word	0x20001018

08009508 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800950e:	f000 f98b 	bl	8009828 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009512:	4b15      	ldr	r3, [pc, #84]	@ (8009568 <prvCheckForValidListAndQueue+0x60>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d120      	bne.n	800955c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800951a:	4814      	ldr	r0, [pc, #80]	@ (800956c <prvCheckForValidListAndQueue+0x64>)
 800951c:	f7fd ff0e 	bl	800733c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009520:	4813      	ldr	r0, [pc, #76]	@ (8009570 <prvCheckForValidListAndQueue+0x68>)
 8009522:	f7fd ff0b 	bl	800733c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009526:	4b13      	ldr	r3, [pc, #76]	@ (8009574 <prvCheckForValidListAndQueue+0x6c>)
 8009528:	4a10      	ldr	r2, [pc, #64]	@ (800956c <prvCheckForValidListAndQueue+0x64>)
 800952a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800952c:	4b12      	ldr	r3, [pc, #72]	@ (8009578 <prvCheckForValidListAndQueue+0x70>)
 800952e:	4a10      	ldr	r2, [pc, #64]	@ (8009570 <prvCheckForValidListAndQueue+0x68>)
 8009530:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009532:	2300      	movs	r3, #0
 8009534:	9300      	str	r3, [sp, #0]
 8009536:	4b11      	ldr	r3, [pc, #68]	@ (800957c <prvCheckForValidListAndQueue+0x74>)
 8009538:	4a11      	ldr	r2, [pc, #68]	@ (8009580 <prvCheckForValidListAndQueue+0x78>)
 800953a:	2110      	movs	r1, #16
 800953c:	200a      	movs	r0, #10
 800953e:	f7fe f81b 	bl	8007578 <xQueueGenericCreateStatic>
 8009542:	4603      	mov	r3, r0
 8009544:	4a08      	ldr	r2, [pc, #32]	@ (8009568 <prvCheckForValidListAndQueue+0x60>)
 8009546:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009548:	4b07      	ldr	r3, [pc, #28]	@ (8009568 <prvCheckForValidListAndQueue+0x60>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d005      	beq.n	800955c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009550:	4b05      	ldr	r3, [pc, #20]	@ (8009568 <prvCheckForValidListAndQueue+0x60>)
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	490b      	ldr	r1, [pc, #44]	@ (8009584 <prvCheckForValidListAndQueue+0x7c>)
 8009556:	4618      	mov	r0, r3
 8009558:	f7fe fc40 	bl	8007ddc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800955c:	f000 f996 	bl	800988c <vPortExitCritical>
}
 8009560:	bf00      	nop
 8009562:	46bd      	mov	sp, r7
 8009564:	bd80      	pop	{r7, pc}
 8009566:	bf00      	nop
 8009568:	2000101c 	.word	0x2000101c
 800956c:	20000fec 	.word	0x20000fec
 8009570:	20001000 	.word	0x20001000
 8009574:	20001014 	.word	0x20001014
 8009578:	20001018 	.word	0x20001018
 800957c:	200010c8 	.word	0x200010c8
 8009580:	20001028 	.word	0x20001028
 8009584:	08009fc8 	.word	0x08009fc8

08009588 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b086      	sub	sp, #24
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10b      	bne.n	80095b2 <pvTimerGetTimerID+0x2a>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	60fb      	str	r3, [r7, #12]
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	e7fd      	b.n	80095ae <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80095b2:	f000 f939 	bl	8009828 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	69db      	ldr	r3, [r3, #28]
 80095ba:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80095bc:	f000 f966 	bl	800988c <vPortExitCritical>

	return pvReturn;
 80095c0:	693b      	ldr	r3, [r7, #16]
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	3718      	adds	r7, #24
 80095c6:	46bd      	mov	sp, r7
 80095c8:	bd80      	pop	{r7, pc}
	...

080095cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	3b04      	subs	r3, #4
 80095dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80095e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	3b04      	subs	r3, #4
 80095ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	f023 0201 	bic.w	r2, r3, #1
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	3b04      	subs	r3, #4
 80095fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80095fc:	4a0c      	ldr	r2, [pc, #48]	@ (8009630 <pxPortInitialiseStack+0x64>)
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	3b14      	subs	r3, #20
 8009606:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009608:	687a      	ldr	r2, [r7, #4]
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3b04      	subs	r3, #4
 8009612:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f06f 0202 	mvn.w	r2, #2
 800961a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	3b20      	subs	r3, #32
 8009620:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009622:	68fb      	ldr	r3, [r7, #12]
}
 8009624:	4618      	mov	r0, r3
 8009626:	3714      	adds	r7, #20
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	08009635 	.word	0x08009635

08009634 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009634:	b480      	push	{r7}
 8009636:	b085      	sub	sp, #20
 8009638:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800963a:	2300      	movs	r3, #0
 800963c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800963e:	4b13      	ldr	r3, [pc, #76]	@ (800968c <prvTaskExitError+0x58>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009646:	d00b      	beq.n	8009660 <prvTaskExitError+0x2c>
	__asm volatile
 8009648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964c:	f383 8811 	msr	BASEPRI, r3
 8009650:	f3bf 8f6f 	isb	sy
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	60fb      	str	r3, [r7, #12]
}
 800965a:	bf00      	nop
 800965c:	bf00      	nop
 800965e:	e7fd      	b.n	800965c <prvTaskExitError+0x28>
	__asm volatile
 8009660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009664:	f383 8811 	msr	BASEPRI, r3
 8009668:	f3bf 8f6f 	isb	sy
 800966c:	f3bf 8f4f 	dsb	sy
 8009670:	60bb      	str	r3, [r7, #8]
}
 8009672:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009674:	bf00      	nop
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d0fc      	beq.n	8009676 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800967c:	bf00      	nop
 800967e:	bf00      	nop
 8009680:	3714      	adds	r7, #20
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr
 800968a:	bf00      	nop
 800968c:	20000060 	.word	0x20000060

08009690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009690:	4b07      	ldr	r3, [pc, #28]	@ (80096b0 <pxCurrentTCBConst2>)
 8009692:	6819      	ldr	r1, [r3, #0]
 8009694:	6808      	ldr	r0, [r1, #0]
 8009696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969a:	f380 8809 	msr	PSP, r0
 800969e:	f3bf 8f6f 	isb	sy
 80096a2:	f04f 0000 	mov.w	r0, #0
 80096a6:	f380 8811 	msr	BASEPRI, r0
 80096aa:	4770      	bx	lr
 80096ac:	f3af 8000 	nop.w

080096b0 <pxCurrentTCBConst2>:
 80096b0:	20000aec 	.word	0x20000aec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80096b4:	bf00      	nop
 80096b6:	bf00      	nop

080096b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80096b8:	4808      	ldr	r0, [pc, #32]	@ (80096dc <prvPortStartFirstTask+0x24>)
 80096ba:	6800      	ldr	r0, [r0, #0]
 80096bc:	6800      	ldr	r0, [r0, #0]
 80096be:	f380 8808 	msr	MSP, r0
 80096c2:	f04f 0000 	mov.w	r0, #0
 80096c6:	f380 8814 	msr	CONTROL, r0
 80096ca:	b662      	cpsie	i
 80096cc:	b661      	cpsie	f
 80096ce:	f3bf 8f4f 	dsb	sy
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	df00      	svc	0
 80096d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80096da:	bf00      	nop
 80096dc:	e000ed08 	.word	0xe000ed08

080096e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80096e6:	4b47      	ldr	r3, [pc, #284]	@ (8009804 <xPortStartScheduler+0x124>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a47      	ldr	r2, [pc, #284]	@ (8009808 <xPortStartScheduler+0x128>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d10b      	bne.n	8009708 <xPortStartScheduler+0x28>
	__asm volatile
 80096f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f4:	f383 8811 	msr	BASEPRI, r3
 80096f8:	f3bf 8f6f 	isb	sy
 80096fc:	f3bf 8f4f 	dsb	sy
 8009700:	60fb      	str	r3, [r7, #12]
}
 8009702:	bf00      	nop
 8009704:	bf00      	nop
 8009706:	e7fd      	b.n	8009704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009708:	4b3e      	ldr	r3, [pc, #248]	@ (8009804 <xPortStartScheduler+0x124>)
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	4a3f      	ldr	r2, [pc, #252]	@ (800980c <xPortStartScheduler+0x12c>)
 800970e:	4293      	cmp	r3, r2
 8009710:	d10b      	bne.n	800972a <xPortStartScheduler+0x4a>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	613b      	str	r3, [r7, #16]
}
 8009724:	bf00      	nop
 8009726:	bf00      	nop
 8009728:	e7fd      	b.n	8009726 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800972a:	4b39      	ldr	r3, [pc, #228]	@ (8009810 <xPortStartScheduler+0x130>)
 800972c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	781b      	ldrb	r3, [r3, #0]
 8009732:	b2db      	uxtb	r3, r3
 8009734:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009736:	697b      	ldr	r3, [r7, #20]
 8009738:	22ff      	movs	r2, #255	@ 0xff
 800973a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	b2db      	uxtb	r3, r3
 8009742:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009744:	78fb      	ldrb	r3, [r7, #3]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800974c:	b2da      	uxtb	r2, r3
 800974e:	4b31      	ldr	r3, [pc, #196]	@ (8009814 <xPortStartScheduler+0x134>)
 8009750:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009752:	4b31      	ldr	r3, [pc, #196]	@ (8009818 <xPortStartScheduler+0x138>)
 8009754:	2207      	movs	r2, #7
 8009756:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009758:	e009      	b.n	800976e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800975a:	4b2f      	ldr	r3, [pc, #188]	@ (8009818 <xPortStartScheduler+0x138>)
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3b01      	subs	r3, #1
 8009760:	4a2d      	ldr	r2, [pc, #180]	@ (8009818 <xPortStartScheduler+0x138>)
 8009762:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	005b      	lsls	r3, r3, #1
 800976a:	b2db      	uxtb	r3, r3
 800976c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800976e:	78fb      	ldrb	r3, [r7, #3]
 8009770:	b2db      	uxtb	r3, r3
 8009772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009776:	2b80      	cmp	r3, #128	@ 0x80
 8009778:	d0ef      	beq.n	800975a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800977a:	4b27      	ldr	r3, [pc, #156]	@ (8009818 <xPortStartScheduler+0x138>)
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f1c3 0307 	rsb	r3, r3, #7
 8009782:	2b04      	cmp	r3, #4
 8009784:	d00b      	beq.n	800979e <xPortStartScheduler+0xbe>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800978a:	f383 8811 	msr	BASEPRI, r3
 800978e:	f3bf 8f6f 	isb	sy
 8009792:	f3bf 8f4f 	dsb	sy
 8009796:	60bb      	str	r3, [r7, #8]
}
 8009798:	bf00      	nop
 800979a:	bf00      	nop
 800979c:	e7fd      	b.n	800979a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800979e:	4b1e      	ldr	r3, [pc, #120]	@ (8009818 <xPortStartScheduler+0x138>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	021b      	lsls	r3, r3, #8
 80097a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009818 <xPortStartScheduler+0x138>)
 80097a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80097a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009818 <xPortStartScheduler+0x138>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80097b0:	4a19      	ldr	r2, [pc, #100]	@ (8009818 <xPortStartScheduler+0x138>)
 80097b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80097bc:	4b17      	ldr	r3, [pc, #92]	@ (800981c <xPortStartScheduler+0x13c>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a16      	ldr	r2, [pc, #88]	@ (800981c <xPortStartScheduler+0x13c>)
 80097c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80097c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80097c8:	4b14      	ldr	r3, [pc, #80]	@ (800981c <xPortStartScheduler+0x13c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a13      	ldr	r2, [pc, #76]	@ (800981c <xPortStartScheduler+0x13c>)
 80097ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80097d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80097d4:	f000 f8da 	bl	800998c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80097d8:	4b11      	ldr	r3, [pc, #68]	@ (8009820 <xPortStartScheduler+0x140>)
 80097da:	2200      	movs	r2, #0
 80097dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80097de:	f000 f8f9 	bl	80099d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80097e2:	4b10      	ldr	r3, [pc, #64]	@ (8009824 <xPortStartScheduler+0x144>)
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	4a0f      	ldr	r2, [pc, #60]	@ (8009824 <xPortStartScheduler+0x144>)
 80097e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80097ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80097ee:	f7ff ff63 	bl	80096b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80097f2:	f7fe ff7f 	bl	80086f4 <vTaskSwitchContext>
	prvTaskExitError();
 80097f6:	f7ff ff1d 	bl	8009634 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80097fa:	2300      	movs	r3, #0
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3718      	adds	r7, #24
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	e000ed00 	.word	0xe000ed00
 8009808:	410fc271 	.word	0x410fc271
 800980c:	410fc270 	.word	0x410fc270
 8009810:	e000e400 	.word	0xe000e400
 8009814:	20001118 	.word	0x20001118
 8009818:	2000111c 	.word	0x2000111c
 800981c:	e000ed20 	.word	0xe000ed20
 8009820:	20000060 	.word	0x20000060
 8009824:	e000ef34 	.word	0xe000ef34

08009828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
	__asm volatile
 800982e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009832:	f383 8811 	msr	BASEPRI, r3
 8009836:	f3bf 8f6f 	isb	sy
 800983a:	f3bf 8f4f 	dsb	sy
 800983e:	607b      	str	r3, [r7, #4]
}
 8009840:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009842:	4b10      	ldr	r3, [pc, #64]	@ (8009884 <vPortEnterCritical+0x5c>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3301      	adds	r3, #1
 8009848:	4a0e      	ldr	r2, [pc, #56]	@ (8009884 <vPortEnterCritical+0x5c>)
 800984a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800984c:	4b0d      	ldr	r3, [pc, #52]	@ (8009884 <vPortEnterCritical+0x5c>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d110      	bne.n	8009876 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009854:	4b0c      	ldr	r3, [pc, #48]	@ (8009888 <vPortEnterCritical+0x60>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	b2db      	uxtb	r3, r3
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00b      	beq.n	8009876 <vPortEnterCritical+0x4e>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009862:	f383 8811 	msr	BASEPRI, r3
 8009866:	f3bf 8f6f 	isb	sy
 800986a:	f3bf 8f4f 	dsb	sy
 800986e:	603b      	str	r3, [r7, #0]
}
 8009870:	bf00      	nop
 8009872:	bf00      	nop
 8009874:	e7fd      	b.n	8009872 <vPortEnterCritical+0x4a>
	}
}
 8009876:	bf00      	nop
 8009878:	370c      	adds	r7, #12
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	20000060 	.word	0x20000060
 8009888:	e000ed04 	.word	0xe000ed04

0800988c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800988c:	b480      	push	{r7}
 800988e:	b083      	sub	sp, #12
 8009890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009892:	4b12      	ldr	r3, [pc, #72]	@ (80098dc <vPortExitCritical+0x50>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10b      	bne.n	80098b2 <vPortExitCritical+0x26>
	__asm volatile
 800989a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989e:	f383 8811 	msr	BASEPRI, r3
 80098a2:	f3bf 8f6f 	isb	sy
 80098a6:	f3bf 8f4f 	dsb	sy
 80098aa:	607b      	str	r3, [r7, #4]
}
 80098ac:	bf00      	nop
 80098ae:	bf00      	nop
 80098b0:	e7fd      	b.n	80098ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80098b2:	4b0a      	ldr	r3, [pc, #40]	@ (80098dc <vPortExitCritical+0x50>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	3b01      	subs	r3, #1
 80098b8:	4a08      	ldr	r2, [pc, #32]	@ (80098dc <vPortExitCritical+0x50>)
 80098ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80098bc:	4b07      	ldr	r3, [pc, #28]	@ (80098dc <vPortExitCritical+0x50>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d105      	bne.n	80098d0 <vPortExitCritical+0x44>
 80098c4:	2300      	movs	r3, #0
 80098c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80098c8:	683b      	ldr	r3, [r7, #0]
 80098ca:	f383 8811 	msr	BASEPRI, r3
}
 80098ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr
 80098dc:	20000060 	.word	0x20000060

080098e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098e0:	f3ef 8009 	mrs	r0, PSP
 80098e4:	f3bf 8f6f 	isb	sy
 80098e8:	4b15      	ldr	r3, [pc, #84]	@ (8009940 <pxCurrentTCBConst>)
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	f01e 0f10 	tst.w	lr, #16
 80098f0:	bf08      	it	eq
 80098f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80098f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098fa:	6010      	str	r0, [r2, #0]
 80098fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009904:	f380 8811 	msr	BASEPRI, r0
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	f3bf 8f6f 	isb	sy
 8009910:	f7fe fef0 	bl	80086f4 <vTaskSwitchContext>
 8009914:	f04f 0000 	mov.w	r0, #0
 8009918:	f380 8811 	msr	BASEPRI, r0
 800991c:	bc09      	pop	{r0, r3}
 800991e:	6819      	ldr	r1, [r3, #0]
 8009920:	6808      	ldr	r0, [r1, #0]
 8009922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009926:	f01e 0f10 	tst.w	lr, #16
 800992a:	bf08      	it	eq
 800992c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009930:	f380 8809 	msr	PSP, r0
 8009934:	f3bf 8f6f 	isb	sy
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop
 800993c:	f3af 8000 	nop.w

08009940 <pxCurrentTCBConst>:
 8009940:	20000aec 	.word	0x20000aec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009944:	bf00      	nop
 8009946:	bf00      	nop

08009948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b082      	sub	sp, #8
 800994c:	af00      	add	r7, sp, #0
	__asm volatile
 800994e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009952:	f383 8811 	msr	BASEPRI, r3
 8009956:	f3bf 8f6f 	isb	sy
 800995a:	f3bf 8f4f 	dsb	sy
 800995e:	607b      	str	r3, [r7, #4]
}
 8009960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009962:	f7fe fe0d 	bl	8008580 <xTaskIncrementTick>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d003      	beq.n	8009974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800996c:	4b06      	ldr	r3, [pc, #24]	@ (8009988 <xPortSysTickHandler+0x40>)
 800996e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	2300      	movs	r3, #0
 8009976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	f383 8811 	msr	BASEPRI, r3
}
 800997e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009980:	bf00      	nop
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	e000ed04 	.word	0xe000ed04

0800998c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800998c:	b480      	push	{r7}
 800998e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009990:	4b0b      	ldr	r3, [pc, #44]	@ (80099c0 <vPortSetupTimerInterrupt+0x34>)
 8009992:	2200      	movs	r2, #0
 8009994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009996:	4b0b      	ldr	r3, [pc, #44]	@ (80099c4 <vPortSetupTimerInterrupt+0x38>)
 8009998:	2200      	movs	r2, #0
 800999a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800999c:	4b0a      	ldr	r3, [pc, #40]	@ (80099c8 <vPortSetupTimerInterrupt+0x3c>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a0a      	ldr	r2, [pc, #40]	@ (80099cc <vPortSetupTimerInterrupt+0x40>)
 80099a2:	fba2 2303 	umull	r2, r3, r2, r3
 80099a6:	099b      	lsrs	r3, r3, #6
 80099a8:	4a09      	ldr	r2, [pc, #36]	@ (80099d0 <vPortSetupTimerInterrupt+0x44>)
 80099aa:	3b01      	subs	r3, #1
 80099ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80099ae:	4b04      	ldr	r3, [pc, #16]	@ (80099c0 <vPortSetupTimerInterrupt+0x34>)
 80099b0:	2207      	movs	r2, #7
 80099b2:	601a      	str	r2, [r3, #0]
}
 80099b4:	bf00      	nop
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	e000e010 	.word	0xe000e010
 80099c4:	e000e018 	.word	0xe000e018
 80099c8:	20000054 	.word	0x20000054
 80099cc:	10624dd3 	.word	0x10624dd3
 80099d0:	e000e014 	.word	0xe000e014

080099d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80099d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80099e4 <vPortEnableVFP+0x10>
 80099d8:	6801      	ldr	r1, [r0, #0]
 80099da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80099de:	6001      	str	r1, [r0, #0]
 80099e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80099e2:	bf00      	nop
 80099e4:	e000ed88 	.word	0xe000ed88

080099e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80099e8:	b480      	push	{r7}
 80099ea:	b085      	sub	sp, #20
 80099ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80099ee:	f3ef 8305 	mrs	r3, IPSR
 80099f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2b0f      	cmp	r3, #15
 80099f8:	d915      	bls.n	8009a26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80099fa:	4a18      	ldr	r2, [pc, #96]	@ (8009a5c <vPortValidateInterruptPriority+0x74>)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4413      	add	r3, r2
 8009a00:	781b      	ldrb	r3, [r3, #0]
 8009a02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009a04:	4b16      	ldr	r3, [pc, #88]	@ (8009a60 <vPortValidateInterruptPriority+0x78>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	7afa      	ldrb	r2, [r7, #11]
 8009a0a:	429a      	cmp	r2, r3
 8009a0c:	d20b      	bcs.n	8009a26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8009a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a12:	f383 8811 	msr	BASEPRI, r3
 8009a16:	f3bf 8f6f 	isb	sy
 8009a1a:	f3bf 8f4f 	dsb	sy
 8009a1e:	607b      	str	r3, [r7, #4]
}
 8009a20:	bf00      	nop
 8009a22:	bf00      	nop
 8009a24:	e7fd      	b.n	8009a22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009a26:	4b0f      	ldr	r3, [pc, #60]	@ (8009a64 <vPortValidateInterruptPriority+0x7c>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8009a68 <vPortValidateInterruptPriority+0x80>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d90b      	bls.n	8009a4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	603b      	str	r3, [r7, #0]
}
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	e7fd      	b.n	8009a4a <vPortValidateInterruptPriority+0x62>
	}
 8009a4e:	bf00      	nop
 8009a50:	3714      	adds	r7, #20
 8009a52:	46bd      	mov	sp, r7
 8009a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a58:	4770      	bx	lr
 8009a5a:	bf00      	nop
 8009a5c:	e000e3f0 	.word	0xe000e3f0
 8009a60:	20001118 	.word	0x20001118
 8009a64:	e000ed0c 	.word	0xe000ed0c
 8009a68:	2000111c 	.word	0x2000111c

08009a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	@ 0x28
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009a74:	2300      	movs	r3, #0
 8009a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009a78:	f7fe fcc6 	bl	8008408 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8009bf0 <pvPortMalloc+0x184>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d101      	bne.n	8009a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009a84:	f000 f924 	bl	8009cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009a88:	4b5a      	ldr	r3, [pc, #360]	@ (8009bf4 <pvPortMalloc+0x188>)
 8009a8a:	681a      	ldr	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4013      	ands	r3, r2
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f040 8095 	bne.w	8009bc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d01e      	beq.n	8009ada <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8009a9c:	2208      	movs	r2, #8
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4413      	add	r3, r2
 8009aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	f003 0307 	and.w	r3, r3, #7
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d015      	beq.n	8009ada <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f023 0307 	bic.w	r3, r3, #7
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f003 0307 	and.w	r3, r3, #7
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d00b      	beq.n	8009ada <pvPortMalloc+0x6e>
	__asm volatile
 8009ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ac6:	f383 8811 	msr	BASEPRI, r3
 8009aca:	f3bf 8f6f 	isb	sy
 8009ace:	f3bf 8f4f 	dsb	sy
 8009ad2:	617b      	str	r3, [r7, #20]
}
 8009ad4:	bf00      	nop
 8009ad6:	bf00      	nop
 8009ad8:	e7fd      	b.n	8009ad6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d06f      	beq.n	8009bc0 <pvPortMalloc+0x154>
 8009ae0:	4b45      	ldr	r3, [pc, #276]	@ (8009bf8 <pvPortMalloc+0x18c>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d86a      	bhi.n	8009bc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009aea:	4b44      	ldr	r3, [pc, #272]	@ (8009bfc <pvPortMalloc+0x190>)
 8009aec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009aee:	4b43      	ldr	r3, [pc, #268]	@ (8009bfc <pvPortMalloc+0x190>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009af4:	e004      	b.n	8009b00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009af8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b02:	685b      	ldr	r3, [r3, #4]
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d903      	bls.n	8009b12 <pvPortMalloc+0xa6>
 8009b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1f1      	bne.n	8009af6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b12:	4b37      	ldr	r3, [pc, #220]	@ (8009bf0 <pvPortMalloc+0x184>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d051      	beq.n	8009bc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b1c:	6a3b      	ldr	r3, [r7, #32]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2208      	movs	r2, #8
 8009b22:	4413      	add	r3, r2
 8009b24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b28:	681a      	ldr	r2, [r3, #0]
 8009b2a:	6a3b      	ldr	r3, [r7, #32]
 8009b2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	1ad2      	subs	r2, r2, r3
 8009b36:	2308      	movs	r3, #8
 8009b38:	005b      	lsls	r3, r3, #1
 8009b3a:	429a      	cmp	r2, r3
 8009b3c:	d920      	bls.n	8009b80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4413      	add	r3, r2
 8009b44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b46:	69bb      	ldr	r3, [r7, #24]
 8009b48:	f003 0307 	and.w	r3, r3, #7
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00b      	beq.n	8009b68 <pvPortMalloc+0xfc>
	__asm volatile
 8009b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b54:	f383 8811 	msr	BASEPRI, r3
 8009b58:	f3bf 8f6f 	isb	sy
 8009b5c:	f3bf 8f4f 	dsb	sy
 8009b60:	613b      	str	r3, [r7, #16]
}
 8009b62:	bf00      	nop
 8009b64:	bf00      	nop
 8009b66:	e7fd      	b.n	8009b64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b6a:	685a      	ldr	r2, [r3, #4]
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	1ad2      	subs	r2, r2, r3
 8009b70:	69bb      	ldr	r3, [r7, #24]
 8009b72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b76:	687a      	ldr	r2, [r7, #4]
 8009b78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b7a:	69b8      	ldr	r0, [r7, #24]
 8009b7c:	f000 f90a 	bl	8009d94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b80:	4b1d      	ldr	r3, [pc, #116]	@ (8009bf8 <pvPortMalloc+0x18c>)
 8009b82:	681a      	ldr	r2, [r3, #0]
 8009b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b86:	685b      	ldr	r3, [r3, #4]
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8009bf8 <pvPortMalloc+0x18c>)
 8009b8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8009bf8 <pvPortMalloc+0x18c>)
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	4b1b      	ldr	r3, [pc, #108]	@ (8009c00 <pvPortMalloc+0x194>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	d203      	bcs.n	8009ba2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009b9a:	4b17      	ldr	r3, [pc, #92]	@ (8009bf8 <pvPortMalloc+0x18c>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a18      	ldr	r2, [pc, #96]	@ (8009c00 <pvPortMalloc+0x194>)
 8009ba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba4:	685a      	ldr	r2, [r3, #4]
 8009ba6:	4b13      	ldr	r3, [pc, #76]	@ (8009bf4 <pvPortMalloc+0x188>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	431a      	orrs	r2, r3
 8009bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bb6:	4b13      	ldr	r3, [pc, #76]	@ (8009c04 <pvPortMalloc+0x198>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	4a11      	ldr	r2, [pc, #68]	@ (8009c04 <pvPortMalloc+0x198>)
 8009bbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bc0:	f7fe fc30 	bl	8008424 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	f003 0307 	and.w	r3, r3, #7
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d00b      	beq.n	8009be6 <pvPortMalloc+0x17a>
	__asm volatile
 8009bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	60fb      	str	r3, [r7, #12]
}
 8009be0:	bf00      	nop
 8009be2:	bf00      	nop
 8009be4:	e7fd      	b.n	8009be2 <pvPortMalloc+0x176>
	return pvReturn;
 8009be6:	69fb      	ldr	r3, [r7, #28]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3728      	adds	r7, #40	@ 0x28
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20001ce0 	.word	0x20001ce0
 8009bf4:	20001cf4 	.word	0x20001cf4
 8009bf8:	20001ce4 	.word	0x20001ce4
 8009bfc:	20001cd8 	.word	0x20001cd8
 8009c00:	20001ce8 	.word	0x20001ce8
 8009c04:	20001cec 	.word	0x20001cec

08009c08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d04f      	beq.n	8009cba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c1a:	2308      	movs	r3, #8
 8009c1c:	425b      	negs	r3, r3
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	4413      	add	r3, r2
 8009c22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	685a      	ldr	r2, [r3, #4]
 8009c2c:	4b25      	ldr	r3, [pc, #148]	@ (8009cc4 <vPortFree+0xbc>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4013      	ands	r3, r2
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d10b      	bne.n	8009c4e <vPortFree+0x46>
	__asm volatile
 8009c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c3a:	f383 8811 	msr	BASEPRI, r3
 8009c3e:	f3bf 8f6f 	isb	sy
 8009c42:	f3bf 8f4f 	dsb	sy
 8009c46:	60fb      	str	r3, [r7, #12]
}
 8009c48:	bf00      	nop
 8009c4a:	bf00      	nop
 8009c4c:	e7fd      	b.n	8009c4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d00b      	beq.n	8009c6e <vPortFree+0x66>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	60bb      	str	r3, [r7, #8]
}
 8009c68:	bf00      	nop
 8009c6a:	bf00      	nop
 8009c6c:	e7fd      	b.n	8009c6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	685a      	ldr	r2, [r3, #4]
 8009c72:	4b14      	ldr	r3, [pc, #80]	@ (8009cc4 <vPortFree+0xbc>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4013      	ands	r3, r2
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d01e      	beq.n	8009cba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c7c:	693b      	ldr	r3, [r7, #16]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d11a      	bne.n	8009cba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	4b0e      	ldr	r3, [pc, #56]	@ (8009cc4 <vPortFree+0xbc>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	43db      	mvns	r3, r3
 8009c8e:	401a      	ands	r2, r3
 8009c90:	693b      	ldr	r3, [r7, #16]
 8009c92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c94:	f7fe fbb8 	bl	8008408 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	685a      	ldr	r2, [r3, #4]
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8009cc8 <vPortFree+0xc0>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	4a09      	ldr	r2, [pc, #36]	@ (8009cc8 <vPortFree+0xc0>)
 8009ca4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009ca6:	6938      	ldr	r0, [r7, #16]
 8009ca8:	f000 f874 	bl	8009d94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009cac:	4b07      	ldr	r3, [pc, #28]	@ (8009ccc <vPortFree+0xc4>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	4a06      	ldr	r2, [pc, #24]	@ (8009ccc <vPortFree+0xc4>)
 8009cb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009cb6:	f7fe fbb5 	bl	8008424 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009cba:	bf00      	nop
 8009cbc:	3718      	adds	r7, #24
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20001cf4 	.word	0x20001cf4
 8009cc8:	20001ce4 	.word	0x20001ce4
 8009ccc:	20001cf0 	.word	0x20001cf0

08009cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009cd6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8009cda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009cdc:	4b27      	ldr	r3, [pc, #156]	@ (8009d7c <prvHeapInit+0xac>)
 8009cde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f003 0307 	and.w	r3, r3, #7
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d00c      	beq.n	8009d04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	3307      	adds	r3, #7
 8009cee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f023 0307 	bic.w	r3, r3, #7
 8009cf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cf8:	68ba      	ldr	r2, [r7, #8]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8009d7c <prvHeapInit+0xac>)
 8009d00:	4413      	add	r3, r2
 8009d02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d08:	4a1d      	ldr	r2, [pc, #116]	@ (8009d80 <prvHeapInit+0xb0>)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8009d80 <prvHeapInit+0xb0>)
 8009d10:	2200      	movs	r2, #0
 8009d12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	68ba      	ldr	r2, [r7, #8]
 8009d18:	4413      	add	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009d1c:	2208      	movs	r2, #8
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	1a9b      	subs	r3, r3, r2
 8009d22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	f023 0307 	bic.w	r3, r3, #7
 8009d2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	4a15      	ldr	r2, [pc, #84]	@ (8009d84 <prvHeapInit+0xb4>)
 8009d30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009d32:	4b14      	ldr	r3, [pc, #80]	@ (8009d84 <prvHeapInit+0xb4>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2200      	movs	r2, #0
 8009d38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009d3a:	4b12      	ldr	r3, [pc, #72]	@ (8009d84 <prvHeapInit+0xb4>)
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d46:	683b      	ldr	r3, [r7, #0]
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	1ad2      	subs	r2, r2, r3
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d50:	4b0c      	ldr	r3, [pc, #48]	@ (8009d84 <prvHeapInit+0xb4>)
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d58:	683b      	ldr	r3, [r7, #0]
 8009d5a:	685b      	ldr	r3, [r3, #4]
 8009d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8009d88 <prvHeapInit+0xb8>)
 8009d5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	4a09      	ldr	r2, [pc, #36]	@ (8009d8c <prvHeapInit+0xbc>)
 8009d66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d68:	4b09      	ldr	r3, [pc, #36]	@ (8009d90 <prvHeapInit+0xc0>)
 8009d6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009d6e:	601a      	str	r2, [r3, #0]
}
 8009d70:	bf00      	nop
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr
 8009d7c:	20001120 	.word	0x20001120
 8009d80:	20001cd8 	.word	0x20001cd8
 8009d84:	20001ce0 	.word	0x20001ce0
 8009d88:	20001ce8 	.word	0x20001ce8
 8009d8c:	20001ce4 	.word	0x20001ce4
 8009d90:	20001cf4 	.word	0x20001cf4

08009d94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d94:	b480      	push	{r7}
 8009d96:	b085      	sub	sp, #20
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d9c:	4b28      	ldr	r3, [pc, #160]	@ (8009e40 <prvInsertBlockIntoFreeList+0xac>)
 8009d9e:	60fb      	str	r3, [r7, #12]
 8009da0:	e002      	b.n	8009da8 <prvInsertBlockIntoFreeList+0x14>
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d8f7      	bhi.n	8009da2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d108      	bne.n	8009dd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	685a      	ldr	r2, [r3, #4]
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	441a      	add	r2, r3
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	441a      	add	r2, r3
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	429a      	cmp	r2, r3
 8009de8:	d118      	bne.n	8009e1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	4b15      	ldr	r3, [pc, #84]	@ (8009e44 <prvInsertBlockIntoFreeList+0xb0>)
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d00d      	beq.n	8009e12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685a      	ldr	r2, [r3, #4]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	441a      	add	r2, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	601a      	str	r2, [r3, #0]
 8009e10:	e008      	b.n	8009e24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009e12:	4b0c      	ldr	r3, [pc, #48]	@ (8009e44 <prvInsertBlockIntoFreeList+0xb0>)
 8009e14:	681a      	ldr	r2, [r3, #0]
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	601a      	str	r2, [r3, #0]
 8009e1a:	e003      	b.n	8009e24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009e24:	68fa      	ldr	r2, [r7, #12]
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	429a      	cmp	r2, r3
 8009e2a:	d002      	beq.n	8009e32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e32:	bf00      	nop
 8009e34:	3714      	adds	r7, #20
 8009e36:	46bd      	mov	sp, r7
 8009e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	20001cd8 	.word	0x20001cd8
 8009e44:	20001ce0 	.word	0x20001ce0

08009e48 <memset>:
 8009e48:	4402      	add	r2, r0
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d100      	bne.n	8009e52 <memset+0xa>
 8009e50:	4770      	bx	lr
 8009e52:	f803 1b01 	strb.w	r1, [r3], #1
 8009e56:	e7f9      	b.n	8009e4c <memset+0x4>

08009e58 <__libc_init_array>:
 8009e58:	b570      	push	{r4, r5, r6, lr}
 8009e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8009e90 <__libc_init_array+0x38>)
 8009e5c:	4c0d      	ldr	r4, [pc, #52]	@ (8009e94 <__libc_init_array+0x3c>)
 8009e5e:	1b64      	subs	r4, r4, r5
 8009e60:	10a4      	asrs	r4, r4, #2
 8009e62:	2600      	movs	r6, #0
 8009e64:	42a6      	cmp	r6, r4
 8009e66:	d109      	bne.n	8009e7c <__libc_init_array+0x24>
 8009e68:	4d0b      	ldr	r5, [pc, #44]	@ (8009e98 <__libc_init_array+0x40>)
 8009e6a:	4c0c      	ldr	r4, [pc, #48]	@ (8009e9c <__libc_init_array+0x44>)
 8009e6c:	f000 f826 	bl	8009ebc <_init>
 8009e70:	1b64      	subs	r4, r4, r5
 8009e72:	10a4      	asrs	r4, r4, #2
 8009e74:	2600      	movs	r6, #0
 8009e76:	42a6      	cmp	r6, r4
 8009e78:	d105      	bne.n	8009e86 <__libc_init_array+0x2e>
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e80:	4798      	blx	r3
 8009e82:	3601      	adds	r6, #1
 8009e84:	e7ee      	b.n	8009e64 <__libc_init_array+0xc>
 8009e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e8a:	4798      	blx	r3
 8009e8c:	3601      	adds	r6, #1
 8009e8e:	e7f2      	b.n	8009e76 <__libc_init_array+0x1e>
 8009e90:	0800a0b4 	.word	0x0800a0b4
 8009e94:	0800a0b4 	.word	0x0800a0b4
 8009e98:	0800a0b4 	.word	0x0800a0b4
 8009e9c:	0800a0b8 	.word	0x0800a0b8

08009ea0 <memcpy>:
 8009ea0:	440a      	add	r2, r1
 8009ea2:	4291      	cmp	r1, r2
 8009ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ea8:	d100      	bne.n	8009eac <memcpy+0xc>
 8009eaa:	4770      	bx	lr
 8009eac:	b510      	push	{r4, lr}
 8009eae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009eb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009eb6:	4291      	cmp	r1, r2
 8009eb8:	d1f9      	bne.n	8009eae <memcpy+0xe>
 8009eba:	bd10      	pop	{r4, pc}

08009ebc <_init>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	bf00      	nop
 8009ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec2:	bc08      	pop	{r3}
 8009ec4:	469e      	mov	lr, r3
 8009ec6:	4770      	bx	lr

08009ec8 <_fini>:
 8009ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eca:	bf00      	nop
 8009ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ece:	bc08      	pop	{r3}
 8009ed0:	469e      	mov	lr, r3
 8009ed2:	4770      	bx	lr

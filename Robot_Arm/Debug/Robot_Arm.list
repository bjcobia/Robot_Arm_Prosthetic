
Robot_Arm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00007b54  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08007ce4  08007ce4  00008ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d94  08007d94  0000904c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007d94  08007d94  00008d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d9c  08007d9c  0000904c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d9c  08007d9c  00008d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007da0  08007da0  00008da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000004c  20000000  08007da4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b80  2000004c  08007df0  0000904c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bcc  08007df0  00009bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000904c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a221  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003583  00000000  00000000  0002329d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016c0  00000000  00000000  00026820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011be  00000000  00000000  00027ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003150  00000000  00000000  0002909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c64  00000000  00000000  0002c1ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc6f8  00000000  00000000  00044e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014154a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006054  00000000  00000000  00141590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001475e4  2**0
=======
  1 .text         000052c4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800544c  0800544c  0000644c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005504  08005504  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005504  08005504  00006504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800550c  0800550c  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800550c  0800550c  0000650c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005510  08005510  00006510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005514  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000000c  08005520  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08005520  00007338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ff2  00000000  00000000  0000703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002327  00000000  00000000  0001802e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f88  00000000  00000000  0001a358  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c33  00000000  00000000  0001b2e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bb8  00000000  00000000  0001bf13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011ec2  00000000  00000000  00042acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2756  00000000  00000000  0005498d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001470e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004198  00000000  00000000  00147128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0014b2c0  2**0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

<<<<<<< HEAD
08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000004c 	.word	0x2000004c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ccc 	.word	0x08007ccc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000050 	.word	0x20000050
 80001cc:	08007ccc 	.word	0x08007ccc

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
=======
08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005434 	.word	0x08005434

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08005434 	.word	0x08005434

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <main>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
=======
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000500:	f000 ff4c 	bl	800139c <HAL_Init>
=======
 8000508:	f000 fe66 	bl	80011d8 <HAL_Init>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8000504:	f000 f83a 	bl	800057c <SystemClock_Config>
=======
 800050c:	f000 f840 	bl	8000590 <SystemClock_Config>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000508:	f000 fae8 	bl	8000adc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050c:	f000 fab6 	bl	8000a7c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000510:	f000 f916 	bl	8000740 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000514:	f000 f96e 	bl	80007f4 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000518:	f000 f882 	bl	8000620 <MX_TIM1_Init>
  MX_TIM4_Init();
 800051c:	f000 f9c4 	bl	80008a8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000520:	f000 fa1c 	bl	800095c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  SignLetter('B', 2000);
 8000524:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8000528:	2042      	movs	r0, #66	@ 0x42
 800052a:	f000 fc21 	bl	8000d70 <SignLetter>

  HAL_Delay(2000);
 800052e:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000532:	f000 ff73 	bl	800141c <HAL_Delay>


  /* USER CODE END 2 */
=======
 8000510:	f000 faee 	bl	8000af0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000514:	f000 fabc 	bl	8000a90 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000518:	f000 f91c 	bl	8000754 <MX_TIM2_Init>
  MX_TIM3_Init();
 800051c:	f000 f974 	bl	8000808 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000520:	f000 f888 	bl	8000634 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000524:	f000 f9ca 	bl	80008bc <MX_TIM4_Init>
  MX_TIM8_Init();
 8000528:	f000 fa22 	bl	8000970 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  memset(message, 0, sizeof(message));
 800052c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000530:	2100      	movs	r1, #0
 8000532:	4812      	ldr	r0, [pc, #72]	@ (800057c <main+0x78>)
 8000534:	f004 ff52 	bl	80053dc <memset>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)rxBuffer, 1);
 8000538:	2201      	movs	r2, #1
 800053a:	4911      	ldr	r1, [pc, #68]	@ (8000580 <main+0x7c>)
 800053c:	4811      	ldr	r0, [pc, #68]	@ (8000584 <main+0x80>)
 800053e:	f003 fc3b 	bl	8003db8 <HAL_UART_Receive_IT>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* Init scheduler */
  osKernelInitialize();
 8000536:	f004 fcc1 	bl	8004ebc <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of Servo_Letters */
  Servo_LettersHandle = osTimerNew(Servo_Letter, osTimerOnce, NULL, &Servo_Letters_attributes);
 800053a:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <main+0x68>)
 800053c:	2200      	movs	r2, #0
 800053e:	2100      	movs	r1, #0
 8000540:	4809      	ldr	r0, [pc, #36]	@ (8000568 <main+0x6c>)
 8000542:	f004 fdc7 	bl	80050d4 <osTimerNew>
 8000546:	4603      	mov	r3, r0
 8000548:	4a08      	ldr	r2, [pc, #32]	@ (800056c <main+0x70>)
 800054a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800054c:	4a08      	ldr	r2, [pc, #32]	@ (8000570 <main+0x74>)
 800054e:	2100      	movs	r1, #0
 8000550:	4808      	ldr	r0, [pc, #32]	@ (8000574 <main+0x78>)
 8000552:	f004 fcfd 	bl	8004f50 <osThreadNew>
 8000556:	4603      	mov	r3, r0
 8000558:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <main+0x7c>)
 800055a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800055c:	f004 fcd2 	bl	8004f04 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< HEAD
 8000560:	bf00      	nop
 8000562:	e7fd      	b.n	8000560 <main+0x64>
 8000564:	08007d3c 	.word	0x08007d3c
 8000568:	08000e25 	.word	0x08000e25
 800056c:	20000270 	.word	0x20000270
 8000570:	08007d18 	.word	0x08007d18
 8000574:	08000e15 	.word	0x08000e15
 8000578:	2000026c 	.word	0x2000026c

0800057c <SystemClock_Config>:
=======
  {
	if (IsButtonPressed() && messageReady)
 8000542:	f000 fb3b 	bl	8000bbc <IsButtonPressed>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d0fa      	beq.n	8000542 <main+0x3e>
 800054c:	4b0e      	ldr	r3, [pc, #56]	@ (8000588 <main+0x84>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f6      	beq.n	8000542 <main+0x3e>
	  {
		/* Process the message when button is pressed and message is available */
		ProcessReceivedMessage(message);
 8000554:	4809      	ldr	r0, [pc, #36]	@ (800057c <main+0x78>)
 8000556:	f000 fb9d 	bl	8000c94 <ProcessReceivedMessage>

		/* Reset message buffer */
		messageIndex = 0;
 800055a:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <main+0x88>)
 800055c:	2200      	movs	r2, #0
 800055e:	801a      	strh	r2, [r3, #0]
		messageReady = 0;
 8000560:	4b09      	ldr	r3, [pc, #36]	@ (8000588 <main+0x84>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
		memset(message, 0, sizeof(message));
 8000566:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800056a:	2100      	movs	r1, #0
 800056c:	4803      	ldr	r0, [pc, #12]	@ (800057c <main+0x78>)
 800056e:	f004 ff35 	bl	80053dc <memset>

		/* Debounce */
		HAL_Delay(200);
 8000572:	20c8      	movs	r0, #200	@ 0xc8
 8000574:	f000 feac 	bl	80012d0 <HAL_Delay>
	if (IsButtonPressed() && messageReady)
 8000578:	e7e3      	b.n	8000542 <main+0x3e>
 800057a:	bf00      	nop
 800057c:	20000230 	.word	0x20000230
 8000580:	2000022c 	.word	0x2000022c
 8000584:	200001a4 	.word	0x200001a4
 8000588:	20000332 	.word	0x20000332
 800058c:	20000330 	.word	0x20000330

08000590 <SystemClock_Config>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 800057c:	b580      	push	{r7, lr}
 800057e:	b096      	sub	sp, #88	@ 0x58
 8000580:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000582:	f107 0314 	add.w	r3, r7, #20
 8000586:	2244      	movs	r2, #68	@ 0x44
 8000588:	2100      	movs	r1, #0
 800058a:	4618      	mov	r0, r3
 800058c:	f007 fb64 	bl	8007c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000590:	463b      	mov	r3, r7
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]
=======
 8000590:	b580      	push	{r7, lr}
 8000592:	b096      	sub	sp, #88	@ 0x58
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0314 	add.w	r3, r7, #20
 800059a:	2244      	movs	r2, #68	@ 0x44
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f004 ff1c 	bl	80053dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	463b      	mov	r3, r7
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
 80005aa:	605a      	str	r2, [r3, #4]
 80005ac:	609a      	str	r2, [r3, #8]
 80005ae:	60da      	str	r2, [r3, #12]
 80005b0:	611a      	str	r2, [r3, #16]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
<<<<<<< HEAD
 800059e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005a2:	f001 fa11 	bl	80019c8 <HAL_PWREx_ControlVoltageScaling>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005ac:	f000 fc56 	bl	8000e5c <Error_Handler>
=======
 80005b2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005b6:	f001 fa27 	bl	8001a08 <HAL_PWREx_ControlVoltageScaling>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005c0:	f000 fbcc 	bl	8000d5c <Error_Handler>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
<<<<<<< HEAD
 80005b0:	2302      	movs	r3, #2
 80005b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005b8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	2310      	movs	r3, #16
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005be:	2302      	movs	r3, #2
 80005c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c2:	2302      	movs	r3, #2
 80005c4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005c6:	2301      	movs	r3, #1
 80005c8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005ca:	230a      	movs	r3, #10
 80005cc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ce:	2307      	movs	r3, #7
 80005d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005d2:	2302      	movs	r3, #2
 80005d4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005d6:	2302      	movs	r3, #2
 80005d8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	4618      	mov	r0, r3
 80005e0:	f001 fa48 	bl	8001a74 <HAL_RCC_OscConfig>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ea:	f000 fc37 	bl	8000e5c <Error_Handler>
=======
 80005c4:	2302      	movs	r3, #2
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ce:	2310      	movs	r3, #16
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d6:	2302      	movs	r3, #2
 80005d8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005de:	230a      	movs	r3, #10
 80005e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005e2:	2307      	movs	r3, #7
 80005e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ea:	2302      	movs	r3, #2
 80005ec:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0314 	add.w	r3, r7, #20
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fa5e 	bl	8001ab4 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005fe:	f000 fbad 	bl	8000d5c <Error_Handler>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 80005ee:	230f      	movs	r3, #15
 80005f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f2:	2303      	movs	r3, #3
 80005f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	2104      	movs	r1, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f001 fe10 	bl	800222c <HAL_RCC_ClockConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000612:	f000 fc23 	bl	8000e5c <Error_Handler>
  }
}
 8000616:	bf00      	nop
 8000618:	3758      	adds	r7, #88	@ 0x58
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <MX_TIM1_Init>:
=======
 8000602:	230f      	movs	r3, #15
 8000604:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2303      	movs	r3, #3
 8000608:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800060e:	2300      	movs	r3, #0
 8000610:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000612:	2300      	movs	r3, #0
 8000614:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000616:	463b      	mov	r3, r7
 8000618:	2104      	movs	r1, #4
 800061a:	4618      	mov	r0, r3
 800061c:	f001 fe26 	bl	800226c <HAL_RCC_ClockConfig>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000626:	f000 fb99 	bl	8000d5c <Error_Handler>
  }
}
 800062a:	bf00      	nop
 800062c:	3758      	adds	r7, #88	@ 0x58
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
	...

08000634 <MX_TIM1_Init>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 8000620:	b580      	push	{r7, lr}
 8000622:	b096      	sub	sp, #88	@ 0x58
 8000624:	af00      	add	r7, sp, #0
=======
 8000634:	b580      	push	{r7, lr}
 8000636:	b096      	sub	sp, #88	@ 0x58
 8000638:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8000626:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000632:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
 8000640:	611a      	str	r2, [r3, #16]
 8000642:	615a      	str	r2, [r3, #20]
 8000644:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	222c      	movs	r2, #44	@ 0x2c
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f007 fb03 	bl	8007c58 <memset>
=======
 800063a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000646:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800064a:	2200      	movs	r2, #0
 800064c:	601a      	str	r2, [r3, #0]
 800064e:	605a      	str	r2, [r3, #4]
 8000650:	609a      	str	r2, [r3, #8]
 8000652:	60da      	str	r2, [r3, #12]
 8000654:	611a      	str	r2, [r3, #16]
 8000656:	615a      	str	r2, [r3, #20]
 8000658:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800065a:	1d3b      	adds	r3, r7, #4
 800065c:	222c      	movs	r2, #44	@ 0x2c
 800065e:	2100      	movs	r1, #0
 8000660:	4618      	mov	r0, r3
 8000662:	f004 febb 	bl	80053dc <memset>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <MX_TIM1_Init+0x118>)
 8000654:	4a39      	ldr	r2, [pc, #228]	@ (800073c <MX_TIM1_Init+0x11c>)
 8000656:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 8000658:	4b37      	ldr	r3, [pc, #220]	@ (8000738 <MX_TIM1_Init+0x118>)
 800065a:	224f      	movs	r2, #79	@ 0x4f
 800065c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800065e:	4b36      	ldr	r3, [pc, #216]	@ (8000738 <MX_TIM1_Init+0x118>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000664:	4b34      	ldr	r3, [pc, #208]	@ (8000738 <MX_TIM1_Init+0x118>)
 8000666:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800066a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800066c:	4b32      	ldr	r3, [pc, #200]	@ (8000738 <MX_TIM1_Init+0x118>)
 800066e:	2200      	movs	r2, #0
 8000670:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000672:	4b31      	ldr	r3, [pc, #196]	@ (8000738 <MX_TIM1_Init+0x118>)
 8000674:	2200      	movs	r2, #0
 8000676:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000678:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <MX_TIM1_Init+0x118>)
 800067a:	2200      	movs	r2, #0
 800067c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800067e:	482e      	ldr	r0, [pc, #184]	@ (8000738 <MX_TIM1_Init+0x118>)
 8000680:	f002 fdb8 	bl	80031f4 <HAL_TIM_PWM_Init>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800068a:	f000 fbe7 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800068e:	2300      	movs	r3, #0
 8000690:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000692:	2300      	movs	r3, #0
 8000694:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000696:	2300      	movs	r3, #0
 8000698:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800069a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800069e:	4619      	mov	r1, r3
 80006a0:	4825      	ldr	r0, [pc, #148]	@ (8000738 <MX_TIM1_Init+0x118>)
 80006a2:	f003 fd81 	bl	80041a8 <HAL_TIMEx_MasterConfigSynchronization>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006ac:	f000 fbd6 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006b0:	2360      	movs	r3, #96	@ 0x60
 80006b2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006b8:	2300      	movs	r3, #0
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006c0:	2300      	movs	r3, #0
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006c4:	2300      	movs	r3, #0
 80006c6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006c8:	2300      	movs	r3, #0
 80006ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006cc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006d0:	2200      	movs	r2, #0
 80006d2:	4619      	mov	r1, r3
 80006d4:	4818      	ldr	r0, [pc, #96]	@ (8000738 <MX_TIM1_Init+0x118>)
 80006d6:	f003 f889 	bl	80037ec <HAL_TIM_PWM_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006e0:	f000 fbbc 	bl	8000e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80006f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000706:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800070a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	4619      	mov	r1, r3
 8000718:	4807      	ldr	r0, [pc, #28]	@ (8000738 <MX_TIM1_Init+0x118>)
 800071a:	f003 fdcd 	bl	80042b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000724:	f000 fb9a 	bl	8000e5c <Error_Handler>
=======
 8000666:	4b39      	ldr	r3, [pc, #228]	@ (800074c <MX_TIM1_Init+0x118>)
 8000668:	4a39      	ldr	r2, [pc, #228]	@ (8000750 <MX_TIM1_Init+0x11c>)
 800066a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 79;
 800066c:	4b37      	ldr	r3, [pc, #220]	@ (800074c <MX_TIM1_Init+0x118>)
 800066e:	224f      	movs	r2, #79	@ 0x4f
 8000670:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000672:	4b36      	ldr	r3, [pc, #216]	@ (800074c <MX_TIM1_Init+0x118>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000678:	4b34      	ldr	r3, [pc, #208]	@ (800074c <MX_TIM1_Init+0x118>)
 800067a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800067e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000680:	4b32      	ldr	r3, [pc, #200]	@ (800074c <MX_TIM1_Init+0x118>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000686:	4b31      	ldr	r3, [pc, #196]	@ (800074c <MX_TIM1_Init+0x118>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800068c:	4b2f      	ldr	r3, [pc, #188]	@ (800074c <MX_TIM1_Init+0x118>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000692:	482e      	ldr	r0, [pc, #184]	@ (800074c <MX_TIM1_Init+0x118>)
 8000694:	f002 fcca 	bl	800302c <HAL_TIM_PWM_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800069e:	f000 fb5d 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a2:	2300      	movs	r3, #0
 80006a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006a6:	2300      	movs	r3, #0
 80006a8:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006aa:	2300      	movs	r3, #0
 80006ac:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006ae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80006b2:	4619      	mov	r1, r3
 80006b4:	4825      	ldr	r0, [pc, #148]	@ (800074c <MX_TIM1_Init+0x118>)
 80006b6:	f003 f9a1 	bl	80039fc <HAL_TIMEx_MasterConfigSynchronization>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80006c0:	f000 fb4c 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c4:	2360      	movs	r3, #96	@ 0x60
 80006c6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80006c8:	2300      	movs	r3, #0
 80006ca:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006d8:	2300      	movs	r3, #0
 80006da:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006dc:	2300      	movs	r3, #0
 80006de:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80006e4:	2200      	movs	r2, #0
 80006e6:	4619      	mov	r1, r3
 80006e8:	4818      	ldr	r0, [pc, #96]	@ (800074c <MX_TIM1_Init+0x118>)
 80006ea:	f002 fcf7 	bl	80030dc <HAL_TIM_PWM_ConfigChannel>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80006f4:	f000 fb32 	bl	8000d5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000704:	2300      	movs	r3, #0
 8000706:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800070c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000710:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800071a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800071e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000728:	1d3b      	adds	r3, r7, #4
 800072a:	4619      	mov	r1, r3
 800072c:	4807      	ldr	r0, [pc, #28]	@ (800074c <MX_TIM1_Init+0x118>)
 800072e:	f003 f9ed 	bl	8003b0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000738:	f000 fb10 	bl	8000d5c <Error_Handler>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
<<<<<<< HEAD
 8000728:	4803      	ldr	r0, [pc, #12]	@ (8000738 <MX_TIM1_Init+0x118>)
 800072a:	f000 fc33 	bl	8000f94 <HAL_TIM_MspPostInit>

}
 800072e:	bf00      	nop
 8000730:	3758      	adds	r7, #88	@ 0x58
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	20000068 	.word	0x20000068
 800073c:	40012c00 	.word	0x40012c00

08000740 <MX_TIM2_Init>:
=======
 800073c:	4803      	ldr	r0, [pc, #12]	@ (800074c <MX_TIM1_Init+0x118>)
 800073e:	f000 fba5 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000742:	bf00      	nop
 8000744:	3758      	adds	r7, #88	@ 0x58
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000028 	.word	0x20000028
 8000750:	40012c00 	.word	0x40012c00

08000754 <MX_TIM2_Init>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
<<<<<<< HEAD
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	@ 0x28
 8000744:	af00      	add	r7, sp, #0
=======
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	@ 0x28
 8000758:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]
=======
 800075a:	f107 031c 	add.w	r3, r7, #28
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000766:	463b      	mov	r3, r7
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]
 8000774:	615a      	str	r2, [r3, #20]
 8000776:	619a      	str	r2, [r3, #24]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
<<<<<<< HEAD
 8000764:	4b22      	ldr	r3, [pc, #136]	@ (80007f0 <MX_TIM2_Init+0xb0>)
 8000766:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800076a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800076c:	4b20      	ldr	r3, [pc, #128]	@ (80007f0 <MX_TIM2_Init+0xb0>)
 800076e:	224f      	movs	r2, #79	@ 0x4f
 8000770:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b1f      	ldr	r3, [pc, #124]	@ (80007f0 <MX_TIM2_Init+0xb0>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000778:	4b1d      	ldr	r3, [pc, #116]	@ (80007f0 <MX_TIM2_Init+0xb0>)
 800077a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800077e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b1b      	ldr	r3, [pc, #108]	@ (80007f0 <MX_TIM2_Init+0xb0>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b1a      	ldr	r3, [pc, #104]	@ (80007f0 <MX_TIM2_Init+0xb0>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800078c:	4818      	ldr	r0, [pc, #96]	@ (80007f0 <MX_TIM2_Init+0xb0>)
 800078e:	f002 fd31 	bl	80031f4 <HAL_TIM_PWM_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000798:	f000 fb60 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4811      	ldr	r0, [pc, #68]	@ (80007f0 <MX_TIM2_Init+0xb0>)
 80007ac:	f003 fcfc 	bl	80041a8 <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80007b6:	f000 fb51 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ba:	2360      	movs	r3, #96	@ 0x60
 80007bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	4619      	mov	r1, r3
 80007d0:	4807      	ldr	r0, [pc, #28]	@ (80007f0 <MX_TIM2_Init+0xb0>)
 80007d2:	f003 f80b 	bl	80037ec <HAL_TIM_PWM_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80007dc:	f000 fb3e 	bl	8000e5c <Error_Handler>
=======
 8000778:	4b22      	ldr	r3, [pc, #136]	@ (8000804 <MX_TIM2_Init+0xb0>)
 800077a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800077e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8000780:	4b20      	ldr	r3, [pc, #128]	@ (8000804 <MX_TIM2_Init+0xb0>)
 8000782:	224f      	movs	r2, #79	@ 0x4f
 8000784:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000786:	4b1f      	ldr	r3, [pc, #124]	@ (8000804 <MX_TIM2_Init+0xb0>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 800078c:	4b1d      	ldr	r3, [pc, #116]	@ (8000804 <MX_TIM2_Init+0xb0>)
 800078e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000792:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000794:	4b1b      	ldr	r3, [pc, #108]	@ (8000804 <MX_TIM2_Init+0xb0>)
 8000796:	2200      	movs	r2, #0
 8000798:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079a:	4b1a      	ldr	r3, [pc, #104]	@ (8000804 <MX_TIM2_Init+0xb0>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007a0:	4818      	ldr	r0, [pc, #96]	@ (8000804 <MX_TIM2_Init+0xb0>)
 80007a2:	f002 fc43 	bl	800302c <HAL_TIM_PWM_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80007ac:	f000 fad6 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4811      	ldr	r0, [pc, #68]	@ (8000804 <MX_TIM2_Init+0xb0>)
 80007c0:	f003 f91c 	bl	80039fc <HAL_TIMEx_MasterConfigSynchronization>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80007ca:	f000 fac7 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ce:	2360      	movs	r3, #96	@ 0x60
 80007d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d6:	2300      	movs	r3, #0
 80007d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	4619      	mov	r1, r3
 80007e4:	4807      	ldr	r0, [pc, #28]	@ (8000804 <MX_TIM2_Init+0xb0>)
 80007e6:	f002 fc79 	bl	80030dc <HAL_TIM_PWM_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80007f0:	f000 fab4 	bl	8000d5c <Error_Handler>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
<<<<<<< HEAD
 80007e0:	4803      	ldr	r0, [pc, #12]	@ (80007f0 <MX_TIM2_Init+0xb0>)
 80007e2:	f000 fbd7 	bl	8000f94 <HAL_TIM_MspPostInit>

}
 80007e6:	bf00      	nop
 80007e8:	3728      	adds	r7, #40	@ 0x28
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000b4 	.word	0x200000b4

080007f4 <MX_TIM3_Init>:
=======
 80007f4:	4803      	ldr	r0, [pc, #12]	@ (8000804 <MX_TIM2_Init+0xb0>)
 80007f6:	f000 fb49 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 80007fa:	bf00      	nop
 80007fc:	3728      	adds	r7, #40	@ 0x28
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000074 	.word	0x20000074

08000808 <MX_TIM3_Init>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
=======
 8000808:	b580      	push	{r7, lr}
 800080a:	b08a      	sub	sp, #40	@ 0x28
 800080c:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000806:	463b      	mov	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
 8000814:	615a      	str	r2, [r3, #20]
 8000816:	619a      	str	r2, [r3, #24]
=======
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
 8000826:	611a      	str	r2, [r3, #16]
 8000828:	615a      	str	r2, [r3, #20]
 800082a:	619a      	str	r2, [r3, #24]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 8000818:	4b21      	ldr	r3, [pc, #132]	@ (80008a0 <MX_TIM3_Init+0xac>)
 800081a:	4a22      	ldr	r2, [pc, #136]	@ (80008a4 <MX_TIM3_Init+0xb0>)
 800081c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 800081e:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <MX_TIM3_Init+0xac>)
 8000820:	224f      	movs	r2, #79	@ 0x4f
 8000822:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000824:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <MX_TIM3_Init+0xac>)
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800082a:	4b1d      	ldr	r3, [pc, #116]	@ (80008a0 <MX_TIM3_Init+0xac>)
 800082c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000830:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000832:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <MX_TIM3_Init+0xac>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <MX_TIM3_Init+0xac>)
 800083a:	2200      	movs	r2, #0
 800083c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800083e:	4818      	ldr	r0, [pc, #96]	@ (80008a0 <MX_TIM3_Init+0xac>)
 8000840:	f002 fcd8 	bl	80031f4 <HAL_TIM_PWM_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800084a:	f000 fb07 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4810      	ldr	r0, [pc, #64]	@ (80008a0 <MX_TIM3_Init+0xac>)
 800085e:	f003 fca3 	bl	80041a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000868:	f000 faf8 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800086c:	2360      	movs	r3, #96	@ 0x60
 800086e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <MX_TIM3_Init+0xac>)
 8000884:	f002 ffb2 	bl	80037ec <HAL_TIM_PWM_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800088e:	f000 fae5 	bl	8000e5c <Error_Handler>
=======
 800082c:	4b21      	ldr	r3, [pc, #132]	@ (80008b4 <MX_TIM3_Init+0xac>)
 800082e:	4a22      	ldr	r2, [pc, #136]	@ (80008b8 <MX_TIM3_Init+0xb0>)
 8000830:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 79;
 8000832:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <MX_TIM3_Init+0xac>)
 8000834:	224f      	movs	r2, #79	@ 0x4f
 8000836:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000838:	4b1e      	ldr	r3, [pc, #120]	@ (80008b4 <MX_TIM3_Init+0xac>)
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800083e:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_TIM3_Init+0xac>)
 8000840:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000844:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000846:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_TIM3_Init+0xac>)
 8000848:	2200      	movs	r2, #0
 800084a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800084c:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <MX_TIM3_Init+0xac>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000852:	4818      	ldr	r0, [pc, #96]	@ (80008b4 <MX_TIM3_Init+0xac>)
 8000854:	f002 fbea 	bl	800302c <HAL_TIM_PWM_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 800085e:	f000 fa7d 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4810      	ldr	r0, [pc, #64]	@ (80008b4 <MX_TIM3_Init+0xac>)
 8000872:	f003 f8c3 	bl	80039fc <HAL_TIMEx_MasterConfigSynchronization>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 800087c:	f000 fa6e 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000880:	2360      	movs	r3, #96	@ 0x60
 8000882:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000890:	463b      	mov	r3, r7
 8000892:	2200      	movs	r2, #0
 8000894:	4619      	mov	r1, r3
 8000896:	4807      	ldr	r0, [pc, #28]	@ (80008b4 <MX_TIM3_Init+0xac>)
 8000898:	f002 fc20 	bl	80030dc <HAL_TIM_PWM_ConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008a2:	f000 fa5b 	bl	8000d5c <Error_Handler>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
<<<<<<< HEAD
 8000892:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MX_TIM3_Init+0xac>)
 8000894:	f000 fb7e 	bl	8000f94 <HAL_TIM_MspPostInit>

}
 8000898:	bf00      	nop
 800089a:	3728      	adds	r7, #40	@ 0x28
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20000100 	.word	0x20000100
 80008a4:	40000400 	.word	0x40000400

080008a8 <MX_TIM4_Init>:
=======
 80008a6:	4803      	ldr	r0, [pc, #12]	@ (80008b4 <MX_TIM3_Init+0xac>)
 80008a8:	f000 faf0 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 80008ac:	bf00      	nop
 80008ae:	3728      	adds	r7, #40	@ 0x28
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	200000c0 	.word	0x200000c0
 80008b8:	40000400 	.word	0x40000400

080008bc <MX_TIM4_Init>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
<<<<<<< HEAD
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	@ 0x28
 80008ac:	af00      	add	r7, sp, #0
=======
 80008bc:	b580      	push	{r7, lr}
 80008be:	b08a      	sub	sp, #40	@ 0x28
 80008c0:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ba:	463b      	mov	r3, r7
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]
 80008c8:	615a      	str	r2, [r3, #20]
 80008ca:	619a      	str	r2, [r3, #24]
=======
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ce:	463b      	mov	r3, r7
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	605a      	str	r2, [r3, #4]
 80008d6:	609a      	str	r2, [r3, #8]
 80008d8:	60da      	str	r2, [r3, #12]
 80008da:	611a      	str	r2, [r3, #16]
 80008dc:	615a      	str	r2, [r3, #20]
 80008de:	619a      	str	r2, [r3, #24]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
<<<<<<< HEAD
 80008cc:	4b21      	ldr	r3, [pc, #132]	@ (8000954 <MX_TIM4_Init+0xac>)
 80008ce:	4a22      	ldr	r2, [pc, #136]	@ (8000958 <MX_TIM4_Init+0xb0>)
 80008d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80008d2:	4b20      	ldr	r3, [pc, #128]	@ (8000954 <MX_TIM4_Init+0xac>)
 80008d4:	224f      	movs	r2, #79	@ 0x4f
 80008d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d8:	4b1e      	ldr	r3, [pc, #120]	@ (8000954 <MX_TIM4_Init+0xac>)
 80008da:	2200      	movs	r2, #0
 80008dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80008de:	4b1d      	ldr	r3, [pc, #116]	@ (8000954 <MX_TIM4_Init+0xac>)
 80008e0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000954 <MX_TIM4_Init+0xac>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ec:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <MX_TIM4_Init+0xac>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008f2:	4818      	ldr	r0, [pc, #96]	@ (8000954 <MX_TIM4_Init+0xac>)
 80008f4:	f002 fc7e 	bl	80031f4 <HAL_TIM_PWM_Init>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80008fe:	f000 faad 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000906:	2300      	movs	r3, #0
 8000908:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4810      	ldr	r0, [pc, #64]	@ (8000954 <MX_TIM4_Init+0xac>)
 8000912:	f003 fc49 	bl	80041a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800091c:	f000 fa9e 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000920:	2360      	movs	r3, #96	@ 0x60
 8000922:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000928:	2300      	movs	r3, #0
 800092a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	4619      	mov	r1, r3
 8000936:	4807      	ldr	r0, [pc, #28]	@ (8000954 <MX_TIM4_Init+0xac>)
 8000938:	f002 ff58 	bl	80037ec <HAL_TIM_PWM_ConfigChannel>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000942:	f000 fa8b 	bl	8000e5c <Error_Handler>
=======
 80008e0:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <MX_TIM4_Init+0xac>)
 80008e2:	4a22      	ldr	r2, [pc, #136]	@ (800096c <MX_TIM4_Init+0xb0>)
 80008e4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 79;
 80008e6:	4b20      	ldr	r3, [pc, #128]	@ (8000968 <MX_TIM4_Init+0xac>)
 80008e8:	224f      	movs	r2, #79	@ 0x4f
 80008ea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000968 <MX_TIM4_Init+0xac>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <MX_TIM4_Init+0xac>)
 80008f4:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80008f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000968 <MX_TIM4_Init+0xac>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000900:	4b19      	ldr	r3, [pc, #100]	@ (8000968 <MX_TIM4_Init+0xac>)
 8000902:	2200      	movs	r2, #0
 8000904:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000906:	4818      	ldr	r0, [pc, #96]	@ (8000968 <MX_TIM4_Init+0xac>)
 8000908:	f002 fb90 	bl	800302c <HAL_TIM_PWM_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000912:	f000 fa23 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000916:	2300      	movs	r3, #0
 8000918:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	4810      	ldr	r0, [pc, #64]	@ (8000968 <MX_TIM4_Init+0xac>)
 8000926:	f003 f869 	bl	80039fc <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000930:	f000 fa14 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000934:	2360      	movs	r3, #96	@ 0x60
 8000936:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000940:	2300      	movs	r3, #0
 8000942:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000944:	463b      	mov	r3, r7
 8000946:	2200      	movs	r2, #0
 8000948:	4619      	mov	r1, r3
 800094a:	4807      	ldr	r0, [pc, #28]	@ (8000968 <MX_TIM4_Init+0xac>)
 800094c:	f002 fbc6 	bl	80030dc <HAL_TIM_PWM_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000956:	f000 fa01 	bl	8000d5c <Error_Handler>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
<<<<<<< HEAD
 8000946:	4803      	ldr	r0, [pc, #12]	@ (8000954 <MX_TIM4_Init+0xac>)
 8000948:	f000 fb24 	bl	8000f94 <HAL_TIM_MspPostInit>

}
 800094c:	bf00      	nop
 800094e:	3728      	adds	r7, #40	@ 0x28
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	2000014c 	.word	0x2000014c
 8000958:	40000800 	.word	0x40000800

0800095c <MX_TIM8_Init>:
=======
 800095a:	4803      	ldr	r0, [pc, #12]	@ (8000968 <MX_TIM4_Init+0xac>)
 800095c:	f000 fa96 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	@ 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	2000010c 	.word	0x2000010c
 800096c:	40000800 	.word	0x40000800

08000970 <MX_TIM8_Init>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
<<<<<<< HEAD
 800095c:	b580      	push	{r7, lr}
 800095e:	b096      	sub	sp, #88	@ 0x58
 8000960:	af00      	add	r7, sp, #0
=======
 8000970:	b580      	push	{r7, lr}
 8000972:	b096      	sub	sp, #88	@ 0x58
 8000974:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
<<<<<<< HEAD
 8000962:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
 800097a:	60da      	str	r2, [r3, #12]
 800097c:	611a      	str	r2, [r3, #16]
 800097e:	615a      	str	r2, [r3, #20]
 8000980:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	222c      	movs	r2, #44	@ 0x2c
 8000986:	2100      	movs	r1, #0
 8000988:	4618      	mov	r0, r3
 800098a:	f007 f965 	bl	8007c58 <memset>
=======
 8000976:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000982:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
 8000992:	615a      	str	r2, [r3, #20]
 8000994:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	222c      	movs	r2, #44	@ 0x2c
 800099a:	2100      	movs	r1, #0
 800099c:	4618      	mov	r0, r3
 800099e:	f004 fd1d 	bl	80053dc <memset>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
<<<<<<< HEAD
 800098e:	4b39      	ldr	r3, [pc, #228]	@ (8000a74 <MX_TIM8_Init+0x118>)
 8000990:	4a39      	ldr	r2, [pc, #228]	@ (8000a78 <MX_TIM8_Init+0x11c>)
 8000992:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 8000994:	4b37      	ldr	r3, [pc, #220]	@ (8000a74 <MX_TIM8_Init+0x118>)
 8000996:	224f      	movs	r2, #79	@ 0x4f
 8000998:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b36      	ldr	r3, [pc, #216]	@ (8000a74 <MX_TIM8_Init+0x118>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80009a0:	4b34      	ldr	r3, [pc, #208]	@ (8000a74 <MX_TIM8_Init+0x118>)
 80009a2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009a6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b32      	ldr	r3, [pc, #200]	@ (8000a74 <MX_TIM8_Init+0x118>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009ae:	4b31      	ldr	r3, [pc, #196]	@ (8000a74 <MX_TIM8_Init+0x118>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <MX_TIM8_Init+0x118>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80009ba:	482e      	ldr	r0, [pc, #184]	@ (8000a74 <MX_TIM8_Init+0x118>)
 80009bc:	f002 fc1a 	bl	80031f4 <HAL_TIM_PWM_Init>
 80009c0:	4603      	mov	r3, r0
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80009c6:	f000 fa49 	bl	8000e5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009ca:	2300      	movs	r3, #0
 80009cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ce:	2300      	movs	r3, #0
 80009d0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009d6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009da:	4619      	mov	r1, r3
 80009dc:	4825      	ldr	r0, [pc, #148]	@ (8000a74 <MX_TIM8_Init+0x118>)
 80009de:	f003 fbe3 	bl	80041a8 <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80009e8:	f000 fa38 	bl	8000e5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ec:	2360      	movs	r3, #96	@ 0x60
 80009ee:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009f8:	2300      	movs	r3, #0
 80009fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fc:	2300      	movs	r3, #0
 80009fe:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a00:	2300      	movs	r3, #0
 8000a02:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a04:	2300      	movs	r3, #0
 8000a06:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4818      	ldr	r0, [pc, #96]	@ (8000a74 <MX_TIM8_Init+0x118>)
 8000a12:	f002 feeb 	bl	80037ec <HAL_TIM_PWM_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000a1c:	f000 fa1e 	bl	8000e5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a30:	2300      	movs	r3, #0
 8000a32:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a34:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a38:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a46:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4807      	ldr	r0, [pc, #28]	@ (8000a74 <MX_TIM8_Init+0x118>)
 8000a56:	f003 fc2f 	bl	80042b8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000a60:	f000 f9fc 	bl	8000e5c <Error_Handler>
=======
 80009a2:	4b39      	ldr	r3, [pc, #228]	@ (8000a88 <MX_TIM8_Init+0x118>)
 80009a4:	4a39      	ldr	r2, [pc, #228]	@ (8000a8c <MX_TIM8_Init+0x11c>)
 80009a6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 79;
 80009a8:	4b37      	ldr	r3, [pc, #220]	@ (8000a88 <MX_TIM8_Init+0x118>)
 80009aa:	224f      	movs	r2, #79	@ 0x4f
 80009ac:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ae:	4b36      	ldr	r3, [pc, #216]	@ (8000a88 <MX_TIM8_Init+0x118>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80009b4:	4b34      	ldr	r3, [pc, #208]	@ (8000a88 <MX_TIM8_Init+0x118>)
 80009b6:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009ba:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009bc:	4b32      	ldr	r3, [pc, #200]	@ (8000a88 <MX_TIM8_Init+0x118>)
 80009be:	2200      	movs	r2, #0
 80009c0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80009c2:	4b31      	ldr	r3, [pc, #196]	@ (8000a88 <MX_TIM8_Init+0x118>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009c8:	4b2f      	ldr	r3, [pc, #188]	@ (8000a88 <MX_TIM8_Init+0x118>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80009ce:	482e      	ldr	r0, [pc, #184]	@ (8000a88 <MX_TIM8_Init+0x118>)
 80009d0:	f002 fb2c 	bl	800302c <HAL_TIM_PWM_Init>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 80009da:	f000 f9bf 	bl	8000d5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009de:	2300      	movs	r3, #0
 80009e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009e2:	2300      	movs	r3, #0
 80009e4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	2300      	movs	r3, #0
 80009e8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80009ea:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009ee:	4619      	mov	r1, r3
 80009f0:	4825      	ldr	r0, [pc, #148]	@ (8000a88 <MX_TIM8_Init+0x118>)
 80009f2:	f003 f803 	bl	80039fc <HAL_TIMEx_MasterConfigSynchronization>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 80009fc:	f000 f9ae 	bl	8000d5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a00:	2360      	movs	r3, #96	@ 0x60
 8000a02:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a10:	2300      	movs	r3, #0
 8000a12:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a14:	2300      	movs	r3, #0
 8000a16:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a20:	2200      	movs	r2, #0
 8000a22:	4619      	mov	r1, r3
 8000a24:	4818      	ldr	r0, [pc, #96]	@ (8000a88 <MX_TIM8_Init+0x118>)
 8000a26:	f002 fb59 	bl	80030dc <HAL_TIM_PWM_ConfigChannel>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000a30:	f000 f994 	bl	8000d5c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a34:	2300      	movs	r3, #0
 8000a36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a40:	2300      	movs	r3, #0
 8000a42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a44:	2300      	movs	r3, #0
 8000a46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a56:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4807      	ldr	r0, [pc, #28]	@ (8000a88 <MX_TIM8_Init+0x118>)
 8000a6a:	f003 f84f 	bl	8003b0c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM8_Init+0x108>
  {
    Error_Handler();
 8000a74:	f000 f972 	bl	8000d5c <Error_Handler>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
<<<<<<< HEAD
 8000a64:	4803      	ldr	r0, [pc, #12]	@ (8000a74 <MX_TIM8_Init+0x118>)
 8000a66:	f000 fa95 	bl	8000f94 <HAL_TIM_MspPostInit>

}
 8000a6a:	bf00      	nop
 8000a6c:	3758      	adds	r7, #88	@ 0x58
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000198 	.word	0x20000198
 8000a78:	40013400 	.word	0x40013400

08000a7c <MX_USART2_UART_Init>:
=======
 8000a78:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <MX_TIM8_Init+0x118>)
 8000a7a:	f000 fa07 	bl	8000e8c <HAL_TIM_MspPostInit>

}
 8000a7e:	bf00      	nop
 8000a80:	3758      	adds	r7, #88	@ 0x58
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	20000158 	.word	0x20000158
 8000a8c:	40013400 	.word	0x40013400

08000a90 <MX_USART2_UART_Init>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
<<<<<<< HEAD
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
=======
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
<<<<<<< HEAD
 8000a80:	4b14      	ldr	r3, [pc, #80]	@ (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000a82:	4a15      	ldr	r2, [pc, #84]	@ (8000ad8 <MX_USART2_UART_Init+0x5c>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a86:	4b13      	ldr	r3, [pc, #76]	@ (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000ac0:	f003 fc96 	bl	80043f0 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aca:	f000 f9c7 	bl	8000e5c <Error_Handler>
=======
 8000a94:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000a96:	4a15      	ldr	r2, [pc, #84]	@ (8000aec <MX_USART2_UART_Init+0x5c>)
 8000a98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9a:	4b13      	ldr	r3, [pc, #76]	@ (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000a9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000ab6:	220c      	movs	r2, #12
 8000ab8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000acc:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	@ (8000ae8 <MX_USART2_UART_Init+0x58>)
 8000ad4:	f003 f898 	bl	8003c08 <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000ade:	f000 f93d 	bl	8000d5c <Error_Handler>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
<<<<<<< HEAD
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200001e4 	.word	0x200001e4
 8000ad8:	40004400 	.word	0x40004400

08000adc <MX_GPIO_Init>:
=======
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200001a4 	.word	0x200001a4
 8000aec:	40004400 	.word	0x40004400

08000af0 <MX_GPIO_Init>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b08a      	sub	sp, #40	@ 0x28
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
 8000af0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
=======
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 8000af2:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba0 <MX_GPIO_Init+0xc4>)
 8000af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000af6:	4a2a      	ldr	r2, [pc, #168]	@ (8000ba0 <MX_GPIO_Init+0xc4>)
 8000af8:	f043 0304 	orr.w	r3, r3, #4
 8000afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000afe:	4b28      	ldr	r3, [pc, #160]	@ (8000ba0 <MX_GPIO_Init+0xc4>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b02:	f003 0304 	and.w	r3, r3, #4
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0a:	4b25      	ldr	r3, [pc, #148]	@ (8000ba0 <MX_GPIO_Init+0xc4>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0e:	4a24      	ldr	r2, [pc, #144]	@ (8000ba0 <MX_GPIO_Init+0xc4>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b16:	4b22      	ldr	r3, [pc, #136]	@ (8000ba0 <MX_GPIO_Init+0xc4>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ba0 <MX_GPIO_Init+0xc4>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	4a1e      	ldr	r2, [pc, #120]	@ (8000ba0 <MX_GPIO_Init+0xc4>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba0 <MX_GPIO_Init+0xc4>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	f003 0301 	and.w	r3, r3, #1
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ba0 <MX_GPIO_Init+0xc4>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ba0 <MX_GPIO_Init+0xc4>)
 8000b40:	f043 0302 	orr.w	r3, r3, #2
 8000b44:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b46:	4b16      	ldr	r3, [pc, #88]	@ (8000ba0 <MX_GPIO_Init+0xc4>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	f003 0302 	and.w	r3, r3, #2
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2120      	movs	r1, #32
 8000b56:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b5a:	f000 ff0f 	bl	800197c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b64:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	480b      	ldr	r0, [pc, #44]	@ (8000ba4 <MX_GPIO_Init+0xc8>)
 8000b76:	f000 fd57 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b7a:	2320      	movs	r3, #32
 8000b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b82:	2300      	movs	r3, #0
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b8a:	f107 0314 	add.w	r3, r7, #20
 8000b8e:	4619      	mov	r1, r3
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b94:	f000 fd48 	bl	8001628 <HAL_GPIO_Init>
=======
 8000b06:	4b2b      	ldr	r3, [pc, #172]	@ (8000bb4 <MX_GPIO_Init+0xc4>)
 8000b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b0a:	4a2a      	ldr	r2, [pc, #168]	@ (8000bb4 <MX_GPIO_Init+0xc4>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b12:	4b28      	ldr	r3, [pc, #160]	@ (8000bb4 <MX_GPIO_Init+0xc4>)
 8000b14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b1e:	4b25      	ldr	r3, [pc, #148]	@ (8000bb4 <MX_GPIO_Init+0xc4>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b22:	4a24      	ldr	r2, [pc, #144]	@ (8000bb4 <MX_GPIO_Init+0xc4>)
 8000b24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b28:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2a:	4b22      	ldr	r3, [pc, #136]	@ (8000bb4 <MX_GPIO_Init+0xc4>)
 8000b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b32:	60fb      	str	r3, [r7, #12]
 8000b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb4 <MX_GPIO_Init+0xc4>)
 8000b38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8000bb4 <MX_GPIO_Init+0xc4>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b42:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb4 <MX_GPIO_Init+0xc4>)
 8000b44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b46:	f003 0301 	and.w	r3, r3, #1
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b4e:	4b19      	ldr	r3, [pc, #100]	@ (8000bb4 <MX_GPIO_Init+0xc4>)
 8000b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b52:	4a18      	ldr	r2, [pc, #96]	@ (8000bb4 <MX_GPIO_Init+0xc4>)
 8000b54:	f043 0302 	orr.w	r3, r3, #2
 8000b58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b5a:	4b16      	ldr	r3, [pc, #88]	@ (8000bb4 <MX_GPIO_Init+0xc4>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b5e:	f003 0302 	and.w	r3, r3, #2
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b66:	2200      	movs	r2, #0
 8000b68:	2120      	movs	r1, #32
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b6e:	f000 ff25 	bl	80019bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000b72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b78:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	480b      	ldr	r0, [pc, #44]	@ (8000bb8 <MX_GPIO_Init+0xc8>)
 8000b8a:	f000 fd55 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b8e:	2320      	movs	r3, #32
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b92:	2301      	movs	r3, #1
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 0314 	add.w	r3, r7, #20
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ba8:	f000 fd46 	bl	8001638 <HAL_GPIO_Init>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8000b98:	bf00      	nop
 8000b9a:	3728      	adds	r7, #40	@ 0x28
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	48000800 	.word	0x48000800

08000ba8 <Servo_SetMotion>:
 * @param finger: Which finger (THUMB, INDEX, MIDDLE, RING, PINKY)
 * @param direction: STOP, CLOCKWISE, or COUNTERCLOCKWISE
 * @param speed: Speed percentage (0-100)
 * @retval None
 */
void Servo_SetMotion(Finger finger, Direction direction, int speed) {
 8000ba8:	b480      	push	{r7}
 8000baa:	b085      	sub	sp, #20
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	603a      	str	r2, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
 8000bb4:	460b      	mov	r3, r1
 8000bb6:	71bb      	strb	r3, [r7, #6]
    uint32_t pulse;

    // Clamp speed to 0-100%
    if (speed < 0) speed = 0;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <Servo_SetMotion+0x1a>
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	603b      	str	r3, [r7, #0]
    if (speed > 100) speed = 100;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	2b64      	cmp	r3, #100	@ 0x64
 8000bc6:	dd01      	ble.n	8000bcc <Servo_SetMotion+0x24>
 8000bc8:	2364      	movs	r3, #100	@ 0x64
 8000bca:	603b      	str	r3, [r7, #0]

    // Calculate pulse width based on direction and speed
    if (direction == STOP) {
 8000bcc:	79bb      	ldrb	r3, [r7, #6]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d103      	bne.n	8000bda <Servo_SetMotion+0x32>
        pulse = SERVO_STOP;
 8000bd2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	e013      	b.n	8000c02 <Servo_SetMotion+0x5a>
    } else if (direction == CLOCKWISE) {
 8000bda:	79bb      	ldrb	r3, [r7, #6]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d109      	bne.n	8000bf4 <Servo_SetMotion+0x4c>
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CW
        pulse = SERVO_STOP - ((SERVO_STOP - SERVO_MAX_CW) * speed / 100);
 8000be0:	683a      	ldr	r2, [r7, #0]
 8000be2:	4613      	mov	r3, r2
 8000be4:	079b      	lsls	r3, r3, #30
 8000be6:	1a9b      	subs	r3, r3, r2
 8000be8:	009b      	lsls	r3, r3, #2
 8000bea:	1a9b      	subs	r3, r3, r2
 8000bec:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e006      	b.n	8000c02 <Servo_SetMotion+0x5a>
    } else { // COUNTERCLOCKWISE
        // Map 0-100% to SERVO_STOP-SERVO_MAX_CCW
        pulse = SERVO_STOP + ((SERVO_MAX_CCW - SERVO_STOP) * speed / 100);
 8000bf4:	683a      	ldr	r2, [r7, #0]
 8000bf6:	4613      	mov	r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	4413      	add	r3, r2
 8000bfc:	f203 53dc 	addw	r3, r3, #1500	@ 0x5dc
 8000c00:	60fb      	str	r3, [r7, #12]
    }

    // Update servo state
    servoStates[finger].speed = speed;
 8000c02:	79fa      	ldrb	r2, [r7, #7]
 8000c04:	4925      	ldr	r1, [pc, #148]	@ (8000c9c <Servo_SetMotion+0xf4>)
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	440b      	add	r3, r1
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	601a      	str	r2, [r3, #0]
    servoStates[finger].dir = direction;
 8000c14:	79fa      	ldrb	r2, [r7, #7]
 8000c16:	4921      	ldr	r1, [pc, #132]	@ (8000c9c <Servo_SetMotion+0xf4>)
 8000c18:	4613      	mov	r3, r2
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	4413      	add	r3, r2
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	440b      	add	r3, r1
 8000c22:	3304      	adds	r3, #4
 8000c24:	79ba      	ldrb	r2, [r7, #6]
 8000c26:	701a      	strb	r2, [r3, #0]
    servoStates[finger].pulse = pulse;
 8000c28:	79fa      	ldrb	r2, [r7, #7]
 8000c2a:	491c      	ldr	r1, [pc, #112]	@ (8000c9c <Servo_SetMotion+0xf4>)
 8000c2c:	4613      	mov	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	4413      	add	r3, r2
 8000c32:	009b      	lsls	r3, r3, #2
 8000c34:	440b      	add	r3, r1
 8000c36:	3308      	adds	r3, #8
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	601a      	str	r2, [r3, #0]

    // Apply pulse width to the appropriate timer
    switch (finger) {
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	d825      	bhi.n	8000c8e <Servo_SetMotion+0xe6>
 8000c42:	a201      	add	r2, pc, #4	@ (adr r2, 8000c48 <Servo_SetMotion+0xa0>)
 8000c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c48:	08000c5d 	.word	0x08000c5d
 8000c4c:	08000c67 	.word	0x08000c67
 8000c50:	08000c71 	.word	0x08000c71
 8000c54:	08000c7b 	.word	0x08000c7b
 8000c58:	08000c85 	.word	0x08000c85
        case THUMB:
            __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8000c5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <Servo_SetMotion+0xf8>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	68fa      	ldr	r2, [r7, #12]
 8000c62:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000c64:	e013      	b.n	8000c8e <Servo_SetMotion+0xe6>
        case INDEX:
            __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, pulse);
 8000c66:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <Servo_SetMotion+0xfc>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000c6e:	e00e      	b.n	8000c8e <Servo_SetMotion+0xe6>
        case MIDDLE:
            __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 8000c70:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <Servo_SetMotion+0x100>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	68fa      	ldr	r2, [r7, #12]
 8000c76:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000c78:	e009      	b.n	8000c8e <Servo_SetMotion+0xe6>
        case RING:
            __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pulse);
 8000c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000cac <Servo_SetMotion+0x104>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000c82:	e004      	b.n	8000c8e <Servo_SetMotion+0xe6>
        case PINKY:
            __HAL_TIM_SET_COMPARE(&htim8, TIM_CHANNEL_1, pulse);
 8000c84:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <Servo_SetMotion+0x108>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	68fa      	ldr	r2, [r7, #12]
 8000c8a:	635a      	str	r2, [r3, #52]	@ 0x34
            break;
 8000c8c:	bf00      	nop
    }
	}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	20000068 	.word	0x20000068
 8000ca4:	200000b4 	.word	0x200000b4
 8000ca8:	20000100 	.word	0x20000100
 8000cac:	2000014c 	.word	0x2000014c
 8000cb0:	20000198 	.word	0x20000198

08000cb4 <Servo_StopAll>:
	/**
	 * @brief Stops all servos
	 * @param None
	 * @retval None
	 */
	void Servo_StopAll(void) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
		Servo_SetMotion(THUMB, STOP, 0);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2100      	movs	r1, #0
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff73 	bl	8000ba8 <Servo_SetMotion>
		Servo_SetMotion(INDEX, STOP, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff ff6e 	bl	8000ba8 <Servo_SetMotion>
		Servo_SetMotion(MIDDLE, STOP, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	2100      	movs	r1, #0
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f7ff ff69 	bl	8000ba8 <Servo_SetMotion>
		Servo_SetMotion(RING, STOP, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2003      	movs	r0, #3
 8000cdc:	f7ff ff64 	bl	8000ba8 <Servo_SetMotion>
		Servo_SetMotion(PINKY, STOP, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	2004      	movs	r0, #4
 8000ce6:	f7ff ff5f 	bl	8000ba8 <Servo_SetMotion>

	    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000cea:	2100      	movs	r1, #0
 8000cec:	480a      	ldr	r0, [pc, #40]	@ (8000d18 <Servo_StopAll+0x64>)
 8000cee:	f002 fbdf 	bl	80034b0 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4809      	ldr	r0, [pc, #36]	@ (8000d1c <Servo_StopAll+0x68>)
 8000cf6:	f002 fbdb 	bl	80034b0 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4808      	ldr	r0, [pc, #32]	@ (8000d20 <Servo_StopAll+0x6c>)
 8000cfe:	f002 fbd7 	bl	80034b0 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8000d02:	2100      	movs	r1, #0
 8000d04:	4807      	ldr	r0, [pc, #28]	@ (8000d24 <Servo_StopAll+0x70>)
 8000d06:	f002 fbd3 	bl	80034b0 <HAL_TIM_PWM_Stop>
	    HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4806      	ldr	r0, [pc, #24]	@ (8000d28 <Servo_StopAll+0x74>)
 8000d0e:	f002 fbcf 	bl	80034b0 <HAL_TIM_PWM_Stop>
	}
 8000d12:	bf00      	nop
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000068 	.word	0x20000068
 8000d1c:	200000b4 	.word	0x200000b4
 8000d20:	20000100 	.word	0x20000100
 8000d24:	2000014c 	.word	0x2000014c
 8000d28:	20000198 	.word	0x20000198

08000d2c <Servo_Init>:
	/**
	 * @brief Initialize all servo timers and start PWM
	 * @param None
	 * @retval None
	 */
	void Servo_Init(void) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	    // Start all PWM channels
	    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d30:	2100      	movs	r1, #0
 8000d32:	480a      	ldr	r0, [pc, #40]	@ (8000d5c <Servo_Init+0x30>)
 8000d34:	f002 fab6 	bl	80032a4 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4809      	ldr	r0, [pc, #36]	@ (8000d60 <Servo_Init+0x34>)
 8000d3c:	f002 fab2 	bl	80032a4 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d40:	2100      	movs	r1, #0
 8000d42:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <Servo_Init+0x38>)
 8000d44:	f002 faae 	bl	80032a4 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4807      	ldr	r0, [pc, #28]	@ (8000d68 <Servo_Init+0x3c>)
 8000d4c:	f002 faaa 	bl	80032a4 <HAL_TIM_PWM_Start>
	    HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000d50:	2100      	movs	r1, #0
 8000d52:	4806      	ldr	r0, [pc, #24]	@ (8000d6c <Servo_Init+0x40>)
 8000d54:	f002 faa6 	bl	80032a4 <HAL_TIM_PWM_Start>

//	    // Initialize all servos to stop position
//	    Servo_StopAll();
	}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000068 	.word	0x20000068
 8000d60:	200000b4 	.word	0x200000b4
 8000d64:	20000100 	.word	0x20000100
 8000d68:	2000014c 	.word	0x2000014c
 8000d6c:	20000198 	.word	0x20000198

08000d70 <SignLetter>:
	 * @brief Example function to demonstrate a sign language letter
	 * @param letter: ASCII character (A-Z)
	 * @param duration: How long to hold the position (in ms)
	 * @retval None
	 */
	void SignLetter(char letter, uint32_t duration) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	6039      	str	r1, [r7, #0]
 8000d7a:	71fb      	strb	r3, [r7, #7]
	    // Reset to neutral position
	    Servo_Init();
 8000d7c:	f7ff ffd6 	bl	8000d2c <Servo_Init>
	    HAL_Delay(500); // Wait for fingers to return to neutral
 8000d80:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000d84:	f000 fb4a 	bl	800141c <HAL_Delay>

	    // Set finger positions based on the letter
	    switch(letter) {
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	2b41      	cmp	r3, #65	@ 0x41
 8000d8c:	d002      	beq.n	8000d94 <SignLetter+0x24>
 8000d8e:	2b42      	cmp	r3, #66	@ 0x42
 8000d90:	d01a      	beq.n	8000dc8 <SignLetter+0x58>
 8000d92:	e033      	b.n	8000dfc <SignLetter+0x8c>
	        case 'A':
	            // Example: Make 'A' sign (thumb out, all other fingers closed)
	            Servo_SetMotion(THUMB, CLOCKWISE, 70);
 8000d94:	2246      	movs	r2, #70	@ 0x46
 8000d96:	2101      	movs	r1, #1
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff ff05 	bl	8000ba8 <Servo_SetMotion>
	            Servo_SetMotion(INDEX, COUNTERCLOCKWISE, 90);
 8000d9e:	225a      	movs	r2, #90	@ 0x5a
 8000da0:	2102      	movs	r1, #2
 8000da2:	2001      	movs	r0, #1
 8000da4:	f7ff ff00 	bl	8000ba8 <Servo_SetMotion>
	            Servo_SetMotion(MIDDLE, COUNTERCLOCKWISE, 90);
 8000da8:	225a      	movs	r2, #90	@ 0x5a
 8000daa:	2102      	movs	r1, #2
 8000dac:	2002      	movs	r0, #2
 8000dae:	f7ff fefb 	bl	8000ba8 <Servo_SetMotion>
	            Servo_SetMotion(RING, COUNTERCLOCKWISE, 90);
 8000db2:	225a      	movs	r2, #90	@ 0x5a
 8000db4:	2102      	movs	r1, #2
 8000db6:	2003      	movs	r0, #3
 8000db8:	f7ff fef6 	bl	8000ba8 <Servo_SetMotion>
	            Servo_SetMotion(PINKY, COUNTERCLOCKWISE, 90);
 8000dbc:	225a      	movs	r2, #90	@ 0x5a
 8000dbe:	2102      	movs	r1, #2
 8000dc0:	2004      	movs	r0, #4
 8000dc2:	f7ff fef1 	bl	8000ba8 <Servo_SetMotion>


	            break;
 8000dc6:	e01c      	b.n	8000e02 <SignLetter+0x92>

	        case 'B':
	            // Example: Make 'B' sign (thumb in, all other fingers straight)
	            Servo_SetMotion(THUMB, COUNTERCLOCKWISE, 80);
 8000dc8:	2250      	movs	r2, #80	@ 0x50
 8000dca:	2102      	movs	r1, #2
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff feeb 	bl	8000ba8 <Servo_SetMotion>
	            Servo_SetMotion(INDEX, CLOCKWISE, 50);
 8000dd2:	2232      	movs	r2, #50	@ 0x32
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	2001      	movs	r0, #1
 8000dd8:	f7ff fee6 	bl	8000ba8 <Servo_SetMotion>
	            Servo_SetMotion(MIDDLE, CLOCKWISE, 50);
 8000ddc:	2232      	movs	r2, #50	@ 0x32
 8000dde:	2101      	movs	r1, #1
 8000de0:	2002      	movs	r0, #2
 8000de2:	f7ff fee1 	bl	8000ba8 <Servo_SetMotion>
	            Servo_SetMotion(RING, CLOCKWISE, 50);
 8000de6:	2232      	movs	r2, #50	@ 0x32
 8000de8:	2101      	movs	r1, #1
 8000dea:	2003      	movs	r0, #3
 8000dec:	f7ff fedc 	bl	8000ba8 <Servo_SetMotion>
	            Servo_SetMotion(PINKY, CLOCKWISE, 50);
 8000df0:	2232      	movs	r2, #50	@ 0x32
 8000df2:	2101      	movs	r1, #1
 8000df4:	2004      	movs	r0, #4
 8000df6:	f7ff fed7 	bl	8000ba8 <Servo_SetMotion>
	            break;
 8000dfa:	e002      	b.n	8000e02 <SignLetter+0x92>

	        case 'C':

	        default:
	            // Default position (rest)
	            Servo_StopAll();
 8000dfc:	f7ff ff5a 	bl	8000cb4 <Servo_StopAll>
	            break;
 8000e00:	bf00      	nop
	    }

	    // Hold the position for the specified duration
	    HAL_Delay(duration);
 8000e02:	6838      	ldr	r0, [r7, #0]
 8000e04:	f000 fb0a 	bl	800141c <HAL_Delay>

	    // Return to neutral position
	    Servo_StopAll();
 8000e08:	f7ff ff54 	bl	8000cb4 <Servo_StopAll>
	}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e1c:	2001      	movs	r0, #1
 8000e1e:	f004 f929 	bl	8005074 <osDelay>
 8000e22:	e7fb      	b.n	8000e1c <StartDefaultTask+0x8>

08000e24 <Servo_Letter>:
  /* USER CODE END 5 */
}

/* Servo_Letter function */
void Servo_Letter(void *argument)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Servo_Letter */

  /* USER CODE END Servo_Letter */
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a04      	ldr	r2, [pc, #16]	@ (8000e58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d101      	bne.n	8000e4e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e4a:	f000 fac7 	bl	80013dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40000c00 	.word	0x40000c00

08000e5c <Error_Handler>:
=======
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	@ 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	48000800 	.word	0x48000800

08000bbc <IsButtonPressed>:
/* USER CODE BEGIN 4 */


/* Button press detection function - modify for your specific board */
uint8_t IsButtonPressed(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* Assuming B2 is connected to PC13 (common on many Nucleo boards) */
  /* Note: B2 is typically active LOW (returns 0 when pressed) */

  if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_RESET)
 8000bc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bc4:	4805      	ldr	r0, [pc, #20]	@ (8000bdc <IsButtonPressed+0x20>)
 8000bc6:	f000 fee1 	bl	800198c <HAL_GPIO_ReadPin>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <IsButtonPressed+0x18>
  {
    return 1; /* Button pressed */
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	e000      	b.n	8000bd6 <IsButtonPressed+0x1a>
  }
  return 0; /* Button not pressed */
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	48000800 	.word	0x48000800

08000be0 <HAL_UART_RxCpltCallback>:

/* This function is called when a character is received via UART */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000be0:	b5b0      	push	{r4, r5, r7, lr}
 8000be2:	b08c      	sub	sp, #48	@ 0x30
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2) /* Change to match your UART instance */
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a22      	ldr	r2, [pc, #136]	@ (8000c78 <HAL_UART_RxCpltCallback+0x98>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d13e      	bne.n	8000c70 <HAL_UART_RxCpltCallback+0x90>
  {
    /* Silently add character to message buffer (no echo) */
    if (messageIndex < sizeof(message) - 1) /* Leave space for null terminator */
 8000bf2:	4b22      	ldr	r3, [pc, #136]	@ (8000c7c <HAL_UART_RxCpltCallback+0x9c>)
 8000bf4:	881b      	ldrh	r3, [r3, #0]
 8000bf6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bf8:	d814      	bhi.n	8000c24 <HAL_UART_RxCpltCallback+0x44>
    {
      message[messageIndex++] = rxBuffer[0];
 8000bfa:	4b20      	ldr	r3, [pc, #128]	@ (8000c7c <HAL_UART_RxCpltCallback+0x9c>)
 8000bfc:	881b      	ldrh	r3, [r3, #0]
 8000bfe:	1c5a      	adds	r2, r3, #1
 8000c00:	b291      	uxth	r1, r2
 8000c02:	4a1e      	ldr	r2, [pc, #120]	@ (8000c7c <HAL_UART_RxCpltCallback+0x9c>)
 8000c04:	8011      	strh	r1, [r2, #0]
 8000c06:	461a      	mov	r2, r3
 8000c08:	4b1d      	ldr	r3, [pc, #116]	@ (8000c80 <HAL_UART_RxCpltCallback+0xa0>)
 8000c0a:	7819      	ldrb	r1, [r3, #0]
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8000c84 <HAL_UART_RxCpltCallback+0xa4>)
 8000c0e:	5499      	strb	r1, [r3, r2]
      message[messageIndex] = '\0'; /* Always keep null-terminated */
 8000c10:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <HAL_UART_RxCpltCallback+0x9c>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b1b      	ldr	r3, [pc, #108]	@ (8000c84 <HAL_UART_RxCpltCallback+0xa4>)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	5499      	strb	r1, [r3, r2]

      /* Set flag indicating we have data ready to process */
      messageReady = 1;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000c88 <HAL_UART_RxCpltCallback+0xa8>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e020      	b.n	8000c66 <HAL_UART_RxCpltCallback+0x86>
    }
    else
    {
      /* Buffer overflow, reset */
      messageIndex = 0;
 8000c24:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <HAL_UART_RxCpltCallback+0x9c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	801a      	strh	r2, [r3, #0]
      memset(message, 0, sizeof(message));
 8000c2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4814      	ldr	r0, [pc, #80]	@ (8000c84 <HAL_UART_RxCpltCallback+0xa4>)
 8000c32:	f004 fbd3 	bl	80053dc <memset>

      /* Consider sending an overflow message */
      char overflowMsg[] = "Buffer overflow! Message cleared.\r\n";
 8000c36:	4b15      	ldr	r3, [pc, #84]	@ (8000c8c <HAL_UART_RxCpltCallback+0xac>)
 8000c38:	f107 040c 	add.w	r4, r7, #12
 8000c3c:	461d      	mov	r5, r3
 8000c3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c46:	682b      	ldr	r3, [r5, #0]
 8000c48:	6023      	str	r3, [r4, #0]
      HAL_UART_Transmit(&huart2, (uint8_t*)overflowMsg, strlen(overflowMsg), 1000);
 8000c4a:	f107 030c 	add.w	r3, r7, #12
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff faba 	bl	80001c8 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	f107 010c 	add.w	r1, r7, #12
 8000c5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c60:	480b      	ldr	r0, [pc, #44]	@ (8000c90 <HAL_UART_RxCpltCallback+0xb0>)
 8000c62:	f003 f81f 	bl	8003ca4 <HAL_UART_Transmit>
    }

    /* Start the next reception */
    HAL_UART_Receive_IT(huart, (uint8_t*)rxBuffer, 1);
 8000c66:	2201      	movs	r2, #1
 8000c68:	4905      	ldr	r1, [pc, #20]	@ (8000c80 <HAL_UART_RxCpltCallback+0xa0>)
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f003 f8a4 	bl	8003db8 <HAL_UART_Receive_IT>
  }
}
 8000c70:	bf00      	nop
 8000c72:	3730      	adds	r7, #48	@ 0x30
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bdb0      	pop	{r4, r5, r7, pc}
 8000c78:	40004400 	.word	0x40004400
 8000c7c:	20000330 	.word	0x20000330
 8000c80:	2000022c 	.word	0x2000022c
 8000c84:	20000230 	.word	0x20000230
 8000c88:	20000332 	.word	0x20000332
 8000c8c:	0800544c 	.word	0x0800544c
 8000c90:	200001a4 	.word	0x200001a4

08000c94 <ProcessReceivedMessage>:

/* Process the complete received message, currently it echos back to the UART port once B1 has been pressed. Later this needs to be changes to sign the letters of the words */
void ProcessReceivedMessage(char* msg)
{
 8000c94:	b5b0      	push	{r4, r5, r7, lr}
 8000c96:	b096      	sub	sp, #88	@ 0x58
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* First, send a notification that button was pressed */
  char buttonMsg[] = "Button B2 pressed - Echoing received message:\r\n";
 8000c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8000d4c <ProcessReceivedMessage+0xb8>)
 8000c9e:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8000ca2:	461d      	mov	r5, r3
 8000ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000cac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart2, (uint8_t*)buttonMsg, strlen(buttonMsg), 1000);
 8000cb4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f7ff fa85 	bl	80001c8 <strlen>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	b29a      	uxth	r2, r3
 8000cc2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8000cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cca:	4821      	ldr	r0, [pc, #132]	@ (8000d50 <ProcessReceivedMessage+0xbc>)
 8000ccc:	f002 ffea 	bl	8003ca4 <HAL_UART_Transmit>

  /* Echo the exact message that was received */
  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff fa79 	bl	80001c8 <strlen>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cde:	6879      	ldr	r1, [r7, #4]
 8000ce0:	481b      	ldr	r0, [pc, #108]	@ (8000d50 <ProcessReceivedMessage+0xbc>)
 8000ce2:	f002 ffdf 	bl	8003ca4 <HAL_UART_Transmit>

  /* Add a newline for better readability */
  char newline[] = "\r\n";
 8000ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d54 <ProcessReceivedMessage+0xc0>)
 8000ce8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cec:	6812      	ldr	r2, [r2, #0]
 8000cee:	4611      	mov	r1, r2
 8000cf0:	8019      	strh	r1, [r3, #0]
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	0c12      	lsrs	r2, r2, #16
 8000cf6:	701a      	strb	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)newline, strlen(newline), 1000);
 8000cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff fa63 	bl	80001c8 <strlen>
 8000d02:	4603      	mov	r3, r0
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0e:	4810      	ldr	r0, [pc, #64]	@ (8000d50 <ProcessReceivedMessage+0xbc>)
 8000d10:	f002 ffc8 	bl	8003ca4 <HAL_UART_Transmit>

  /* Optional: Notify completion */
  char completeMsg[] = "Message echo complete\r\n";
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <ProcessReceivedMessage+0xc4>)
 8000d16:	f107 040c 	add.w	r4, r7, #12
 8000d1a:	461d      	mov	r5, r3
 8000d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d24:	e884 0003 	stmia.w	r4, {r0, r1}
  HAL_UART_Transmit(&huart2, (uint8_t*)completeMsg, strlen(completeMsg), 1000);
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff fa4b 	bl	80001c8 <strlen>
 8000d32:	4603      	mov	r3, r0
 8000d34:	b29a      	uxth	r2, r3
 8000d36:	f107 010c 	add.w	r1, r7, #12
 8000d3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d3e:	4804      	ldr	r0, [pc, #16]	@ (8000d50 <ProcessReceivedMessage+0xbc>)
 8000d40:	f002 ffb0 	bl	8003ca4 <HAL_UART_Transmit>
}
 8000d44:	bf00      	nop
 8000d46:	3758      	adds	r7, #88	@ 0x58
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d4c:	08005470 	.word	0x08005470
 8000d50:	200001a4 	.word	0x200001a4
 8000d54:	080054a0 	.word	0x080054a0
 8000d58:	080054a4 	.word	0x080054a4

08000d5c <Error_Handler>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
=======
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000e60:	b672      	cpsid	i
}
 8000e62:	bf00      	nop
=======
 8000d60:	b672      	cpsid	i
}
 8000d62:	bf00      	nop
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <Error_Handler+0x8>

08000e68 <HAL_MspInit>:
=======
 8000d64:	bf00      	nop
 8000d66:	e7fd      	b.n	8000d64 <Error_Handler+0x8>

08000d68 <HAL_MspInit>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
=======
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8000e6e:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <HAL_MspInit+0x4c>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e72:	4a10      	ldr	r2, [pc, #64]	@ (8000eb4 <HAL_MspInit+0x4c>)
 8000e74:	f043 0301 	orr.w	r3, r3, #1
 8000e78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb4 <HAL_MspInit+0x4c>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e86:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb4 <HAL_MspInit+0x4c>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb4 <HAL_MspInit+0x4c>)
 8000e8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e92:	4b08      	ldr	r3, [pc, #32]	@ (8000eb4 <HAL_MspInit+0x4c>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e9a:	603b      	str	r3, [r7, #0]
 8000e9c:	683b      	ldr	r3, [r7, #0]

=======
 8000d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <HAL_MspInit+0x44>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d72:	4a0e      	ldr	r2, [pc, #56]	@ (8000dac <HAL_MspInit+0x44>)
 8000d74:	f043 0301 	orr.w	r3, r3, #1
 8000d78:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <HAL_MspInit+0x44>)
 8000d7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d86:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <HAL_MspInit+0x44>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8a:	4a08      	ldr	r2, [pc, #32]	@ (8000dac <HAL_MspInit+0x44>)
 8000d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d90:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d92:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <HAL_MspInit+0x44>)
 8000d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	683b      	ldr	r3, [r7, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	210f      	movs	r1, #15
 8000ea2:	f06f 0001 	mvn.w	r0, #1
 8000ea6:	f000 fb95 	bl	80015d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8000eaa:	bf00      	nop
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40021000 	.word	0x40021000

08000eb8 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b089      	sub	sp, #36	@ 0x24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8000f80 <HAL_TIM_PWM_MspInit+0xc8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d10c      	bne.n	8000ee4 <HAL_TIM_PWM_MspInit+0x2c>
=======
 8000d9e:	bf00      	nop
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40021000 	.word	0x40021000

08000db0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b089      	sub	sp, #36	@ 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8000e78 <HAL_TIM_PWM_MspInit+0xc8>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d10c      	bne.n	8000ddc <HAL_TIM_PWM_MspInit+0x2c>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 8000eca:	4b2e      	ldr	r3, [pc, #184]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ece:	4a2d      	ldr	r2, [pc, #180]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000ed0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ed4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ed6:	4b2b      	ldr	r3, [pc, #172]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000ed8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eda:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM8_MspInit 1 */
=======
 8000dc2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000dc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dc6:	4a2d      	ldr	r2, [pc, #180]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000dc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000dcc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000dce:	4b2b      	ldr	r3, [pc, #172]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000dd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

    /* USER CODE END TIM8_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000ee2:	e046      	b.n	8000f72 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000eec:	d10c      	bne.n	8000f08 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000eee:	4b25      	ldr	r3, [pc, #148]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef2:	4a24      	ldr	r2, [pc, #144]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000efa:	4b22      	ldr	r3, [pc, #136]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	69bb      	ldr	r3, [r7, #24]
}
 8000f06:	e034      	b.n	8000f72 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a1e      	ldr	r2, [pc, #120]	@ (8000f88 <HAL_TIM_PWM_MspInit+0xd0>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d10c      	bne.n	8000f2c <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f12:	4b1c      	ldr	r3, [pc, #112]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f16:	4a1b      	ldr	r2, [pc, #108]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f1e:	4b19      	ldr	r3, [pc, #100]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	617b      	str	r3, [r7, #20]
 8000f28:	697b      	ldr	r3, [r7, #20]
}
 8000f2a:	e022      	b.n	8000f72 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM4)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a16      	ldr	r2, [pc, #88]	@ (8000f8c <HAL_TIM_PWM_MspInit+0xd4>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d10c      	bne.n	8000f50 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f36:	4b13      	ldr	r3, [pc, #76]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	4a12      	ldr	r2, [pc, #72]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f3c:	f043 0304 	orr.w	r3, r3, #4
 8000f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f42:	4b10      	ldr	r3, [pc, #64]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f46:	f003 0304 	and.w	r3, r3, #4
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
}
 8000f4e:	e010      	b.n	8000f72 <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM8)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a0e      	ldr	r2, [pc, #56]	@ (8000f90 <HAL_TIM_PWM_MspInit+0xd8>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d10b      	bne.n	8000f72 <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f5e:	4a09      	ldr	r2, [pc, #36]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f60:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f64:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <HAL_TIM_PWM_MspInit+0xcc>)
 8000f68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
}
 8000f72:	bf00      	nop
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	40012c00 	.word	0x40012c00
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40000400 	.word	0x40000400
 8000f8c:	40000800 	.word	0x40000800
 8000f90:	40013400 	.word	0x40013400

08000f94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	@ 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a57      	ldr	r2, [pc, #348]	@ (8001110 <HAL_TIM_MspPostInit+0x17c>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d11e      	bne.n	8000ff4 <HAL_TIM_MspPostInit+0x60>
=======
 8000dda:	e046      	b.n	8000e6a <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM2)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000de4:	d10c      	bne.n	8000e00 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000de6:	4b25      	ldr	r3, [pc, #148]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dea:	4a24      	ldr	r2, [pc, #144]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000df2:	4b22      	ldr	r3, [pc, #136]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	61bb      	str	r3, [r7, #24]
 8000dfc:	69bb      	ldr	r3, [r7, #24]
}
 8000dfe:	e034      	b.n	8000e6a <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM3)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1e      	ldr	r2, [pc, #120]	@ (8000e80 <HAL_TIM_PWM_MspInit+0xd0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d10c      	bne.n	8000e24 <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e16:	4b19      	ldr	r3, [pc, #100]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
}
 8000e22:	e022      	b.n	8000e6a <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM4)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a16      	ldr	r2, [pc, #88]	@ (8000e84 <HAL_TIM_PWM_MspInit+0xd4>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d10c      	bne.n	8000e48 <HAL_TIM_PWM_MspInit+0x98>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e2e:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e32:	4a12      	ldr	r2, [pc, #72]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000e34:	f043 0304 	orr.w	r3, r3, #4
 8000e38:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3e:	f003 0304 	and.w	r3, r3, #4
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
}
 8000e46:	e010      	b.n	8000e6a <HAL_TIM_PWM_MspInit+0xba>
  else if(htim_pwm->Instance==TIM8)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_TIM_PWM_MspInit+0xd8>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d10b      	bne.n	8000e6a <HAL_TIM_PWM_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e56:	4a09      	ldr	r2, [pc, #36]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000e58:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000e5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e5e:	4b07      	ldr	r3, [pc, #28]	@ (8000e7c <HAL_TIM_PWM_MspInit+0xcc>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
}
 8000e6a:	bf00      	nop
 8000e6c:	3724      	adds	r7, #36	@ 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	40012c00 	.word	0x40012c00
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	40000400 	.word	0x40000400
 8000e84:	40000800 	.word	0x40000800
 8000e88:	40013400 	.word	0x40013400

08000e8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08c      	sub	sp, #48	@ 0x30
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 031c 	add.w	r3, r7, #28
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a57      	ldr	r2, [pc, #348]	@ (8001008 <HAL_TIM_MspPostInit+0x17c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d11e      	bne.n	8000eec <HAL_TIM_MspPostInit+0x60>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
<<<<<<< HEAD
 8000fb6:	4b57      	ldr	r3, [pc, #348]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 8000fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fba:	4a56      	ldr	r2, [pc, #344]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fc2:	4b54      	ldr	r3, [pc, #336]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 8000fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	61bb      	str	r3, [r7, #24]
 8000fcc:	69bb      	ldr	r3, [r7, #24]
=======
 8000eae:	4b57      	ldr	r3, [pc, #348]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000eb2:	4a56      	ldr	r2, [pc, #344]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000eb4:	f043 0301 	orr.w	r3, r3, #1
 8000eb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000eba:	4b54      	ldr	r3, [pc, #336]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	61bb      	str	r3, [r7, #24]
 8000ec4:	69bb      	ldr	r3, [r7, #24]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
<<<<<<< HEAD
 8000fce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fd2:	61fb      	str	r3, [r7, #28]
=======
 8000ec6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000ee6:	f000 fba7 	bl	8001638 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000eea:	e088      	b.n	8000ffe <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM2)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef4:	d11d      	bne.n	8000f32 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef6:	4b45      	ldr	r3, [pc, #276]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000efa:	4a44      	ldr	r2, [pc, #272]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f02:	4b42      	ldr	r3, [pc, #264]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f22:	f107 031c 	add.w	r3, r7, #28
 8000f26:	4619      	mov	r1, r3
 8000f28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f2c:	f000 fb84 	bl	8001638 <HAL_GPIO_Init>
}
 8000f30:	e065      	b.n	8000ffe <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a36      	ldr	r2, [pc, #216]	@ (8001010 <HAL_TIM_MspPostInit+0x184>)
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d11d      	bne.n	8000f78 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f3c:	4b33      	ldr	r3, [pc, #204]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000f3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f40:	4a32      	ldr	r2, [pc, #200]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000f42:	f043 0301 	orr.w	r3, r3, #1
 8000f46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f48:	4b30      	ldr	r3, [pc, #192]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000f4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f54:	2340      	movs	r3, #64	@ 0x40
 8000f56:	61fb      	str	r3, [r7, #28]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
<<<<<<< HEAD
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fee:	f000 fb1b 	bl	8001628 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000ff2:	e088      	b.n	8001106 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ffc:	d11d      	bne.n	800103a <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b45      	ldr	r3, [pc, #276]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001002:	4a44      	ldr	r2, [pc, #272]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800100a:	4b42      	ldr	r3, [pc, #264]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001016:	2301      	movs	r3, #1
 8001018:	61fb      	str	r3, [r7, #28]
=======
 8000f60:	2300      	movs	r3, #0
 8000f62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f64:	2302      	movs	r3, #2
 8000f66:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f72:	f000 fb61 	bl	8001638 <HAL_GPIO_Init>
}
 8000f76:	e042      	b.n	8000ffe <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a25      	ldr	r2, [pc, #148]	@ (8001014 <HAL_TIM_MspPostInit+0x188>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d11c      	bne.n	8000fbc <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	4b22      	ldr	r3, [pc, #136]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f86:	4a21      	ldr	r2, [pc, #132]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f8e:	4b1f      	ldr	r3, [pc, #124]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f9a:	2340      	movs	r3, #64	@ 0x40
 8000f9c:	61fb      	str	r3, [r7, #28]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
<<<<<<< HEAD
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001026:	2301      	movs	r3, #1
 8001028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 031c 	add.w	r3, r7, #28
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001034:	f000 faf8 	bl	8001628 <HAL_GPIO_Init>
}
 8001038:	e065      	b.n	8001106 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM3)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	4a36      	ldr	r2, [pc, #216]	@ (8001118 <HAL_TIM_MspPostInit+0x184>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d11d      	bne.n	8001080 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b33      	ldr	r3, [pc, #204]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001048:	4a32      	ldr	r2, [pc, #200]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001050:	4b30      	ldr	r3, [pc, #192]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800105c:	2340      	movs	r3, #64	@ 0x40
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800106c:	2302      	movs	r3, #2
 800106e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	f107 031c 	add.w	r3, r7, #28
 8001074:	4619      	mov	r1, r3
 8001076:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800107a:	f000 fad5 	bl	8001628 <HAL_GPIO_Init>
}
 800107e:	e042      	b.n	8001106 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM4)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a25      	ldr	r2, [pc, #148]	@ (800111c <HAL_TIM_MspPostInit+0x188>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d11c      	bne.n	80010c4 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800108a:	4b22      	ldr	r3, [pc, #136]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108e:	4a21      	ldr	r2, [pc, #132]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 8001090:	f043 0302 	orr.w	r3, r3, #2
 8001094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001096:	4b1f      	ldr	r3, [pc, #124]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109a:	f003 0302 	and.w	r3, r3, #2
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010a2:	2340      	movs	r3, #64	@ 0x40
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010b2:	2302      	movs	r3, #2
 80010b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	f107 031c 	add.w	r3, r7, #28
 80010ba:	4619      	mov	r1, r3
 80010bc:	4818      	ldr	r0, [pc, #96]	@ (8001120 <HAL_TIM_MspPostInit+0x18c>)
 80010be:	f000 fab3 	bl	8001628 <HAL_GPIO_Init>
}
 80010c2:	e020      	b.n	8001106 <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM8)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a16      	ldr	r2, [pc, #88]	@ (8001124 <HAL_TIM_MspPostInit+0x190>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d11b      	bne.n	8001106 <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	4a10      	ldr	r2, [pc, #64]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010da:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <HAL_TIM_MspPostInit+0x180>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	60bb      	str	r3, [r7, #8]
 80010e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010e6:	2340      	movs	r3, #64	@ 0x40
 80010e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ea:	2302      	movs	r3, #2
 80010ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80010f6:	2303      	movs	r3, #3
 80010f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010fa:	f107 031c 	add.w	r3, r7, #28
 80010fe:	4619      	mov	r1, r3
 8001100:	4809      	ldr	r0, [pc, #36]	@ (8001128 <HAL_TIM_MspPostInit+0x194>)
 8001102:	f000 fa91 	bl	8001628 <HAL_GPIO_Init>
}
 8001106:	bf00      	nop
 8001108:	3730      	adds	r7, #48	@ 0x30
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40012c00 	.word	0x40012c00
 8001114:	40021000 	.word	0x40021000
 8001118:	40000400 	.word	0x40000400
 800111c:	40000800 	.word	0x40000800
 8001120:	48000400 	.word	0x48000400
 8001124:	40013400 	.word	0x40013400
 8001128:	48000800 	.word	0x48000800

0800112c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b0ac      	sub	sp, #176	@ 0xb0
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2288      	movs	r2, #136	@ 0x88
 800114a:	2100      	movs	r1, #0
 800114c:	4618      	mov	r0, r3
 800114e:	f006 fd83 	bl	8007c58 <memset>
  if(huart->Instance==USART2)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a21      	ldr	r2, [pc, #132]	@ (80011dc <HAL_UART_MspInit+0xb0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d13b      	bne.n	80011d4 <HAL_UART_MspInit+0xa8>
=======
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000faa:	2302      	movs	r3, #2
 8000fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 031c 	add.w	r3, r7, #28
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4818      	ldr	r0, [pc, #96]	@ (8001018 <HAL_TIM_MspPostInit+0x18c>)
 8000fb6:	f000 fb3f 	bl	8001638 <HAL_GPIO_Init>
}
 8000fba:	e020      	b.n	8000ffe <HAL_TIM_MspPostInit+0x172>
  else if(htim->Instance==TIM8)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a16      	ldr	r2, [pc, #88]	@ (800101c <HAL_TIM_MspPostInit+0x190>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d11b      	bne.n	8000ffe <HAL_TIM_MspPostInit+0x172>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fc6:	4b11      	ldr	r3, [pc, #68]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fca:	4a10      	ldr	r2, [pc, #64]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000fcc:	f043 0304 	orr.w	r3, r3, #4
 8000fd0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	@ (800100c <HAL_TIM_MspPostInit+0x180>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000fd6:	f003 0304 	and.w	r3, r3, #4
 8000fda:	60bb      	str	r3, [r7, #8]
 8000fdc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fde:	2340      	movs	r3, #64	@ 0x40
 8000fe0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4809      	ldr	r0, [pc, #36]	@ (8001020 <HAL_TIM_MspPostInit+0x194>)
 8000ffa:	f000 fb1d 	bl	8001638 <HAL_GPIO_Init>
}
 8000ffe:	bf00      	nop
 8001000:	3730      	adds	r7, #48	@ 0x30
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40012c00 	.word	0x40012c00
 800100c:	40021000 	.word	0x40021000
 8001010:	40000400 	.word	0x40000400
 8001014:	40000800 	.word	0x40000800
 8001018:	48000400 	.word	0x48000400
 800101c:	40013400 	.word	0x40013400
 8001020:	48000800 	.word	0x48000800

08001024 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b0ac      	sub	sp, #176	@ 0xb0
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2288      	movs	r2, #136	@ 0x88
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f004 f9c9 	bl	80053dc <memset>
  if(huart->Instance==USART2)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a25      	ldr	r2, [pc, #148]	@ (80010e4 <HAL_UART_MspInit+0xc0>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d143      	bne.n	80010dc <HAL_UART_MspInit+0xb8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
<<<<<<< HEAD
 800115c:	2302      	movs	r3, #2
 800115e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001160:	2300      	movs	r3, #0
 8001162:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	4618      	mov	r0, r3
 800116a:	f001 fab5 	bl	80026d8 <HAL_RCCEx_PeriphCLKConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001174:	f7ff fe72 	bl	8000e5c <Error_Handler>
=======
 8001054:	2302      	movs	r3, #2
 8001056:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001058:	2300      	movs	r3, #0
 800105a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	4618      	mov	r0, r3
 8001062:	f001 fb27 	bl	80026b4 <HAL_RCCEx_PeriphCLKConfig>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800106c:	f7ff fe76 	bl	8000d5c <Error_Handler>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
<<<<<<< HEAD
 8001178:	4b19      	ldr	r3, [pc, #100]	@ (80011e0 <HAL_UART_MspInit+0xb4>)
 800117a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800117c:	4a18      	ldr	r2, [pc, #96]	@ (80011e0 <HAL_UART_MspInit+0xb4>)
 800117e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001182:	6593      	str	r3, [r2, #88]	@ 0x58
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <HAL_UART_MspInit+0xb4>)
 8001186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b13      	ldr	r3, [pc, #76]	@ (80011e0 <HAL_UART_MspInit+0xb4>)
 8001192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001194:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <HAL_UART_MspInit+0xb4>)
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119c:	4b10      	ldr	r3, [pc, #64]	@ (80011e0 <HAL_UART_MspInit+0xb4>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	68fb      	ldr	r3, [r7, #12]
=======
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <HAL_UART_MspInit+0xc4>)
 8001072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001074:	4a1c      	ldr	r2, [pc, #112]	@ (80010e8 <HAL_UART_MspInit+0xc4>)
 8001076:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800107a:	6593      	str	r3, [r2, #88]	@ 0x58
 800107c:	4b1a      	ldr	r3, [pc, #104]	@ (80010e8 <HAL_UART_MspInit+0xc4>)
 800107e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001080:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <HAL_UART_MspInit+0xc4>)
 800108a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108c:	4a16      	ldr	r2, [pc, #88]	@ (80010e8 <HAL_UART_MspInit+0xc4>)
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <HAL_UART_MspInit+0xc4>)
 8001096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	68fb      	ldr	r3, [r7, #12]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
<<<<<<< HEAD
 80011a8:	230c      	movs	r3, #12
 80011aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011c0:	2307      	movs	r3, #7
 80011c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80011ca:	4619      	mov	r1, r3
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d0:	f000 fa2a 	bl	8001628 <HAL_GPIO_Init>
=======
 80010a0:	230c      	movs	r3, #12
 80010a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a6:	2302      	movs	r3, #2
 80010a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b2:	2303      	movs	r3, #3
 80010b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b8:	2307      	movs	r3, #7
 80010ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010be:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80010c2:	4619      	mov	r1, r3
 80010c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c8:	f000 fab6 	bl	8001638 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	2026      	movs	r0, #38	@ 0x26
 80010d2:	f000 f9fc 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010d6:	2026      	movs	r0, #38	@ 0x26
 80010d8:	f000 fa15 	bl	8001506 <HAL_NVIC_EnableIRQ>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

    /* USER CODE END USART2_MspInit 1 */

  }

}
<<<<<<< HEAD
 80011d4:	bf00      	nop
 80011d6:	37b0      	adds	r7, #176	@ 0xb0
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40004400 	.word	0x40004400
 80011e0:	40021000 	.word	0x40021000

080011e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	@ 0x38
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80011f2:	4b34      	ldr	r3, [pc, #208]	@ (80012c4 <HAL_InitTick+0xe0>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f6:	4a33      	ldr	r2, [pc, #204]	@ (80012c4 <HAL_InitTick+0xe0>)
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fe:	4b31      	ldr	r3, [pc, #196]	@ (80012c4 <HAL_InitTick+0xe0>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800120a:	f107 0210 	add.w	r2, r7, #16
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4611      	mov	r1, r2
 8001214:	4618      	mov	r0, r3
 8001216:	f001 f9cd 	bl	80025b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800121e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001220:	2b00      	cmp	r3, #0
 8001222:	d103      	bne.n	800122c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001224:	f001 f99a 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8001228:	6378      	str	r0, [r7, #52]	@ 0x34
 800122a:	e004      	b.n	8001236 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800122c:	f001 f996 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8001230:	4603      	mov	r3, r0
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001236:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001238:	4a23      	ldr	r2, [pc, #140]	@ (80012c8 <HAL_InitTick+0xe4>)
 800123a:	fba2 2303 	umull	r2, r3, r2, r3
 800123e:	0c9b      	lsrs	r3, r3, #18
 8001240:	3b01      	subs	r3, #1
 8001242:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001244:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <HAL_InitTick+0xe8>)
 8001246:	4a22      	ldr	r2, [pc, #136]	@ (80012d0 <HAL_InitTick+0xec>)
 8001248:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 800124a:	4b20      	ldr	r3, [pc, #128]	@ (80012cc <HAL_InitTick+0xe8>)
 800124c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001250:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001252:	4a1e      	ldr	r2, [pc, #120]	@ (80012cc <HAL_InitTick+0xe8>)
 8001254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001256:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001258:	4b1c      	ldr	r3, [pc, #112]	@ (80012cc <HAL_InitTick+0xe8>)
 800125a:	2200      	movs	r2, #0
 800125c:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125e:	4b1b      	ldr	r3, [pc, #108]	@ (80012cc <HAL_InitTick+0xe8>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001264:	4b19      	ldr	r3, [pc, #100]	@ (80012cc <HAL_InitTick+0xe8>)
 8001266:	2200      	movs	r2, #0
 8001268:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 800126a:	4818      	ldr	r0, [pc, #96]	@ (80012cc <HAL_InitTick+0xe8>)
 800126c:	f001 fef0 	bl	8003050 <HAL_TIM_Base_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001276:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800127a:	2b00      	cmp	r3, #0
 800127c:	d11b      	bne.n	80012b6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800127e:	4813      	ldr	r0, [pc, #76]	@ (80012cc <HAL_InitTick+0xe8>)
 8001280:	f001 ff48 	bl	8003114 <HAL_TIM_Base_Start_IT>
 8001284:	4603      	mov	r3, r0
 8001286:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800128a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800128e:	2b00      	cmp	r3, #0
 8001290:	d111      	bne.n	80012b6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001292:	2032      	movs	r0, #50	@ 0x32
 8001294:	f000 f9ba 	bl	800160c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b0f      	cmp	r3, #15
 800129c:	d808      	bhi.n	80012b0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800129e:	2200      	movs	r2, #0
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	2032      	movs	r0, #50	@ 0x32
 80012a4:	f000 f996 	bl	80015d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a8:	4a0a      	ldr	r2, [pc, #40]	@ (80012d4 <HAL_InitTick+0xf0>)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	6013      	str	r3, [r2, #0]
 80012ae:	e002      	b.n	80012b6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3738      	adds	r7, #56	@ 0x38
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	431bde83 	.word	0x431bde83
 80012cc:	20000274 	.word	0x20000274
 80012d0:	40000c00 	.word	0x40000c00
 80012d4:	20000040 	.word	0x20000040

080012d8 <NMI_Handler>:
=======
 80010dc:	bf00      	nop
 80010de:	37b0      	adds	r7, #176	@ 0xb0
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40004400 	.word	0x40004400
 80010e8:	40021000 	.word	0x40021000

080010ec <NMI_Handler>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
=======
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <NMI_Handler+0x4>

080012e0 <HardFault_Handler>:
=======
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <NMI_Handler+0x4>

080010f4 <HardFault_Handler>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
=======
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80012e4:	bf00      	nop
 80012e6:	e7fd      	b.n	80012e4 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:
=======
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <HardFault_Handler+0x4>

080010fc <MemManage_Handler>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
=======
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80012ec:	bf00      	nop
 80012ee:	e7fd      	b.n	80012ec <MemManage_Handler+0x4>

080012f0 <BusFault_Handler>:
=======
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <MemManage_Handler+0x4>

08001104 <BusFault_Handler>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 80012f0:	b480      	push	{r7}
 80012f2:	af00      	add	r7, sp, #0
=======
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <BusFault_Handler+0x4>

080012f8 <UsageFault_Handler>:
=======
 8001108:	bf00      	nop
 800110a:	e7fd      	b.n	8001108 <BusFault_Handler+0x4>

0800110c <UsageFault_Handler>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
=======
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 80012fc:	bf00      	nop
 80012fe:	e7fd      	b.n	80012fc <UsageFault_Handler+0x4>

08001300 <DebugMon_Handler>:
=======
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <UsageFault_Handler+0x4>

08001114 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <DebugMon_Handler>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
=======
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001314:	4802      	ldr	r0, [pc, #8]	@ (8001320 <TIM5_IRQHandler+0x10>)
 8001316:	f002 f961 	bl	80035dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000274 	.word	0x20000274

08001324 <SystemInit>:
=======
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001142:	f000 f8a5 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001150:	4802      	ldr	r0, [pc, #8]	@ (800115c <USART2_IRQHandler+0x10>)
 8001152:	f002 fe7d 	bl	8003e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	200001a4 	.word	0x200001a4

08001160 <SystemInit>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
<<<<<<< HEAD
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
=======
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <SystemInit+0x20>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132e:	4a05      	ldr	r2, [pc, #20]	@ (8001344 <SystemInit+0x20>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <Reset_Handler>:
=======
 8001164:	4b06      	ldr	r3, [pc, #24]	@ (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	@ (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <Reset_Handler>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
<<<<<<< HEAD
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001380 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800134c:	f7ff ffea 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	@ (8001384 <LoopForever+0x6>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	@ (8001388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	@ (800138c <LoopForever+0xe>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	@ (8001390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	@ (8001394 <LoopForever+0x16>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001376:	f006 fc77 	bl	8007c68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800137a:	f7ff f8bf 	bl	80004fc <main>

0800137e <LoopForever>:

LoopForever:
    b LoopForever
 800137e:	e7fe      	b.n	800137e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001380:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	2000004c 	.word	0x2000004c
  ldr r2, =_sidata
 800138c:	08007da4 	.word	0x08007da4
  ldr r2, =_sbss
 8001390:	2000004c 	.word	0x2000004c
  ldr r4, =_ebss
 8001394:	20001bcc 	.word	0x20001bcc

08001398 <ADC1_2_IRQHandler>:
=======
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001188:	f7ff ffea 	bl	8001160 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800118e:	490d      	ldr	r1, [pc, #52]	@ (80011c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <LoopForever+0xe>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001194:	e002      	b.n	800119c <LoopCopyDataInit>

08001196 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001196:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001198:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800119a:	3304      	adds	r3, #4

0800119c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800119c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011a0:	d3f9      	bcc.n	8001196 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011a2:	4a0a      	ldr	r2, [pc, #40]	@ (80011cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80011a4:	4c0a      	ldr	r4, [pc, #40]	@ (80011d0 <LoopForever+0x16>)
  movs r3, #0
 80011a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a8:	e001      	b.n	80011ae <LoopFillZerobss>

080011aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ac:	3204      	adds	r2, #4

080011ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011b0:	d3fb      	bcc.n	80011aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011b2:	f004 f91b 	bl	80053ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011b6:	f7ff f9a5 	bl	8000504 <main>

080011ba <LoopForever>:

LoopForever:
    b LoopForever
 80011ba:	e7fe      	b.n	80011ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011c8:	08005514 	.word	0x08005514
  ldr r2, =_sbss
 80011cc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80011d0:	20000338 	.word	0x20000338

080011d4 <ADC1_2_IRQHandler>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
<<<<<<< HEAD
 8001398:	e7fe      	b.n	8001398 <ADC1_2_IRQHandler>
	...

0800139c <HAL_Init>:
=======
 80011d4:	e7fe      	b.n	80011d4 <ADC1_2_IRQHandler>
	...

080011d8 <HAL_Init>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	71fb      	strb	r3, [r7, #7]
=======
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011de:	2300      	movs	r3, #0
 80011e0:	71fb      	strb	r3, [r7, #7]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 80013a6:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <HAL_Init+0x3c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a0b      	ldr	r2, [pc, #44]	@ (80013d8 <HAL_Init+0x3c>)
 80013ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b0:	6013      	str	r3, [r2, #0]
=======
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_Init+0x3c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a0b      	ldr	r2, [pc, #44]	@ (8001214 <HAL_Init+0x3c>)
 80011e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ec:	6013      	str	r3, [r2, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f903 	bl	80015be <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013b8:	200f      	movs	r0, #15
 80013ba:	f7ff ff13 	bl	80011e4 <HAL_InitTick>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d002      	beq.n	80013ca <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	71fb      	strb	r3, [r7, #7]
 80013c8:	e001      	b.n	80013ce <HAL_Init+0x32>
=======
 80011ee:	2003      	movs	r0, #3
 80011f0:	f000 f962 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f4:	2000      	movs	r0, #0
 80011f6:	f000 f80f 	bl	8001218 <HAL_InitTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d002      	beq.n	8001206 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	71fb      	strb	r3, [r7, #7]
 8001204:	e001      	b.n	800120a <HAL_Init+0x32>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
<<<<<<< HEAD
 80013ca:	f7ff fd4d 	bl	8000e68 <HAL_MspInit>
=======
 8001206:	f7ff fdaf 	bl	8000d68 <HAL_MspInit>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Return function status */
  return status;
<<<<<<< HEAD
 80013ce:	79fb      	ldrb	r3, [r7, #7]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40022000 	.word	0x40022000

080013dc <HAL_IncTick>:
=======
 800120a:	79fb      	ldrb	r3, [r7, #7]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40022000 	.word	0x40022000

08001218 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001224:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <HAL_InitTick+0x6c>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d023      	beq.n	8001274 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800122c:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <HAL_InitTick+0x70>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <HAL_InitTick+0x6c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 f96d 	bl	8001522 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10f      	bne.n	800126e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d809      	bhi.n	8001268 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f937 	bl	80014ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001260:	4a0a      	ldr	r2, [pc, #40]	@ (800128c <HAL_InitTick+0x74>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e007      	b.n	8001278 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e004      	b.n	8001278 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e001      	b.n	8001278 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001278:	7bfb      	ldrb	r3, [r7, #15]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000008 	.word	0x20000008
 8001288:	20000000 	.word	0x20000000
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013e0:	4b06      	ldr	r3, [pc, #24]	@ (80013fc <HAL_IncTick+0x20>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b06      	ldr	r3, [pc, #24]	@ (8001400 <HAL_IncTick+0x24>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <HAL_IncTick+0x24>)
 80013ee:	6013      	str	r3, [r2, #0]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	20000044 	.word	0x20000044
 8001400:	200002c0 	.word	0x200002c0

08001404 <HAL_GetTick>:
=======
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20000334 	.word	0x20000334

080012b8 <HAL_GetTick>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return uwTick;
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <HAL_GetTick+0x14>)
 800140a:	681b      	ldr	r3, [r3, #0]
}
 800140c:	4618      	mov	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	200002c0 	.word	0x200002c0

0800141c <HAL_Delay>:
=======
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20000334 	.word	0x20000334

080012d0 <HAL_Delay>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001424:	f7ff ffee 	bl	8001404 <HAL_GetTick>
 8001428:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001434:	d005      	beq.n	8001442 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001436:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <HAL_Delay+0x44>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	461a      	mov	r2, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4413      	add	r3, r2
 8001440:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001442:	bf00      	nop
 8001444:	f7ff ffde 	bl	8001404 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	68bb      	ldr	r3, [r7, #8]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	429a      	cmp	r2, r3
 8001452:	d8f7      	bhi.n	8001444 <HAL_Delay+0x28>
  {
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000044 	.word	0x20000044

08001464 <__NVIC_SetPriorityGrouping>:
=======
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff ffee 	bl	80012b8 <HAL_GetTick>
 80012dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d005      	beq.n	80012f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_Delay+0x44>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f6:	bf00      	nop
 80012f8:	f7ff ffde 	bl	80012b8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8f7      	bhi.n	80012f8 <HAL_Delay+0x28>
  {
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008

08001318 <__NVIC_SetPriorityGrouping>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001474:	4b0c      	ldr	r3, [pc, #48]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001480:	4013      	ands	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800148c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001494:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001496:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	60d3      	str	r3, [r2, #12]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <__NVIC_GetPriorityGrouping>:
=======
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001340:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001344:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001348:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800134a:	4a04      	ldr	r2, [pc, #16]	@ (800135c <__NVIC_SetPriorityGrouping+0x44>)
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	60d3      	str	r3, [r2, #12]
}
 8001350:	bf00      	nop
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_GetPriorityGrouping>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b0:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <__NVIC_GetPriorityGrouping+0x18>)
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	0a1b      	lsrs	r3, r3, #8
 80014b6:	f003 0307 	and.w	r3, r3, #7
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <__NVIC_EnableIRQ>:
=======
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_EnableIRQ>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 80014c8:	b480      	push	{r7}
 80014ca:	b083      	sub	sp, #12
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	db0b      	blt.n	80014f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	f003 021f 	and.w	r2, r3, #31
 80014e0:	4907      	ldr	r1, [pc, #28]	@ (8001500 <__NVIC_EnableIRQ+0x38>)
 80014e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e6:	095b      	lsrs	r3, r3, #5
 80014e8:	2001      	movs	r0, #1
 80014ea:	fa00 f202 	lsl.w	r2, r0, r2
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
=======
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db0b      	blt.n	80013a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	4907      	ldr	r1, [pc, #28]	@ (80013b4 <__NVIC_EnableIRQ+0x38>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	4603      	mov	r3, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	db0a      	blt.n	800152e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	b2da      	uxtb	r2, r3
 800151c:	490c      	ldr	r1, [pc, #48]	@ (8001550 <__NVIC_SetPriority+0x4c>)
 800151e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001522:	0112      	lsls	r2, r2, #4
 8001524:	b2d2      	uxtb	r2, r2
 8001526:	440b      	add	r3, r1
 8001528:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	@ (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 800152c:	e00a      	b.n	8001544 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	b2da      	uxtb	r2, r3
 8001532:	4908      	ldr	r1, [pc, #32]	@ (8001554 <__NVIC_SetPriority+0x50>)
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	3b04      	subs	r3, #4
 800153c:	0112      	lsls	r2, r2, #4
 800153e:	b2d2      	uxtb	r2, r2
 8001540:	440b      	add	r3, r1
 8001542:	761a      	strb	r2, [r3, #24]
}
 8001544:	bf00      	nop
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr
 8001550:	e000e100 	.word	0xe000e100
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <NVIC_EncodePriority>:
=======
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	@ (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	@ 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f003 0307 	and.w	r3, r3, #7
 800156a:	61fb      	str	r3, [r7, #28]
=======
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	f1c3 0307 	rsb	r3, r3, #7
 8001572:	2b04      	cmp	r3, #4
 8001574:	bf28      	it	cs
 8001576:	2304      	movcs	r3, #4
 8001578:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3304      	adds	r3, #4
 800157e:	2b06      	cmp	r3, #6
 8001580:	d902      	bls.n	8001588 <NVIC_EncodePriority+0x30>
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	3b03      	subs	r3, #3
 8001586:	e000      	b.n	800158a <NVIC_EncodePriority+0x32>
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43da      	mvns	r2, r3
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	401a      	ands	r2, r3
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a0:	f04f 31ff 	mov.w	r1, #4294967295
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43d9      	mvns	r1, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	4313      	orrs	r3, r2
         );
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3724      	adds	r7, #36	@ 0x24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr

080015be <HAL_NVIC_SetPriorityGrouping>:
=======
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	6078      	str	r0, [r7, #4]
=======
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff ff4c 	bl	8001464 <__NVIC_SetPriorityGrouping>
}
 80015cc:	bf00      	nop
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_NVIC_SetPriority>:
=======
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff29 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	60b9      	str	r1, [r7, #8]
 80015de:	607a      	str	r2, [r7, #4]
 80015e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
=======
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 80015e6:	f7ff ff61 	bl	80014ac <__NVIC_GetPriorityGrouping>
 80015ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ec:	687a      	ldr	r2, [r7, #4]
 80015ee:	68b9      	ldr	r1, [r7, #8]
 80015f0:	6978      	ldr	r0, [r7, #20]
 80015f2:	f7ff ffb1 	bl	8001558 <NVIC_EncodePriority>
 80015f6:	4602      	mov	r2, r0
 80015f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fc:	4611      	mov	r1, r2
 80015fe:	4618      	mov	r0, r3
 8001600:	f7ff ff80 	bl	8001504 <__NVIC_SetPriority>
}
 8001604:	bf00      	nop
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
=======
 80014e0:	f7ff ff3e 	bl	8001360 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff31 	bl	800137c <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001616:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff ff54 	bl	80014c8 <__NVIC_EnableIRQ>
}
 8001620:	bf00      	nop
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <HAL_GPIO_Init>:
=======
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800153a:	b480      	push	{r7}
 800153c:	b085      	sub	sp, #20
 800153e:	af00      	add	r7, sp, #0
 8001540:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b02      	cmp	r3, #2
 8001550:	d008      	beq.n	8001564 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2204      	movs	r2, #4
 8001556:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e022      	b.n	80015aa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f022 020e 	bic.w	r2, r2, #14
 8001572:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f022 0201 	bic.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001588:	f003 021c 	and.w	r2, r3, #28
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001590:	2101      	movs	r1, #1
 8001592:	fa01 f202 	lsl.w	r2, r1, r2
 8001596:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2200      	movs	r2, #0
 80015a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b084      	sub	sp, #16
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d005      	beq.n	80015da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2204      	movs	r2, #4
 80015d2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
 80015d8:	e029      	b.n	800162e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 020e 	bic.w	r2, r2, #14
 80015e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0201 	bic.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	f003 021c 	and.w	r2, r3, #28
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	2101      	movs	r1, #1
 8001608:	fa01 f202 	lsl.w	r2, r1, r2
 800160c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2201      	movs	r2, #1
 8001612:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001622:	2b00      	cmp	r3, #0
 8001624:	d003      	beq.n	800162e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	4798      	blx	r3
    }
  }
  return status;
 800162e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001630:	4618      	mov	r0, r3
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <HAL_GPIO_Init>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	617b      	str	r3, [r7, #20]
=======
 8001638:	b480      	push	{r7}
 800163a:	b087      	sub	sp, #28
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
<<<<<<< HEAD
 8001636:	e17f      	b.n	8001938 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	fa01 f303 	lsl.w	r3, r1, r3
 8001644:	4013      	ands	r3, r2
 8001646:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 8171 	beq.w	8001932 <HAL_GPIO_Init+0x30a>
=======
 8001646:	e17f      	b.n	8001948 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	2101      	movs	r1, #1
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	4013      	ands	r3, r2
 8001656:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 8171 	beq.w	8001942 <HAL_GPIO_Init+0x30a>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< HEAD
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	2b01      	cmp	r3, #1
 800165a:	d005      	beq.n	8001668 <HAL_GPIO_Init+0x40>
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d130      	bne.n	80016ca <HAL_GPIO_Init+0xa2>
=======
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b01      	cmp	r3, #1
 800166a:	d005      	beq.n	8001678 <HAL_GPIO_Init+0x40>
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 0303 	and.w	r3, r3, #3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d130      	bne.n	80016da <HAL_GPIO_Init+0xa2>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	693a      	ldr	r2, [r7, #16]
 800167c:	4013      	ands	r3, r2
 800167e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68da      	ldr	r2, [r3, #12]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	693a      	ldr	r2, [r7, #16]
 800168e:	4313      	orrs	r3, r2
 8001690:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800169e:	2201      	movs	r2, #1
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	fa02 f303 	lsl.w	r3, r2, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	091b      	lsrs	r3, r3, #4
 80016b4:	f003 0201 	and.w	r2, r3, #1
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	605a      	str	r2, [r3, #4]
=======
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	2203      	movs	r2, #3
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	43db      	mvns	r3, r3
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	4013      	ands	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	693a      	ldr	r2, [r7, #16]
 800169e:	4313      	orrs	r3, r2
 80016a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ae:	2201      	movs	r2, #1
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	43db      	mvns	r3, r3
 80016b8:	693a      	ldr	r2, [r7, #16]
 80016ba:	4013      	ands	r3, r2
 80016bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	f003 0201 	and.w	r2, r3, #1
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	605a      	str	r2, [r3, #4]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
<<<<<<< HEAD
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d118      	bne.n	8001708 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016dc:	2201      	movs	r2, #1
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	43db      	mvns	r3, r3
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	4013      	ands	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	08db      	lsrs	r3, r3, #3
 80016f2:	f003 0201 	and.w	r2, r3, #1
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4313      	orrs	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	62da      	str	r2, [r3, #44]	@ 0x2c
=======
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	2b03      	cmp	r3, #3
 80016e4:	d118      	bne.n	8001718 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016ec:	2201      	movs	r2, #1
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4013      	ands	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	08db      	lsrs	r3, r3, #3
 8001702:	f003 0201 	and.w	r2, r3, #1
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	4313      	orrs	r3, r2
 8001710:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	62da      	str	r2, [r3, #44]	@ 0x2c
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
<<<<<<< HEAD
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f003 0303 	and.w	r3, r3, #3
 8001710:	2b03      	cmp	r3, #3
 8001712:	d017      	beq.n	8001744 <HAL_GPIO_Init+0x11c>
=======
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f003 0303 	and.w	r3, r3, #3
 8001720:	2b03      	cmp	r3, #3
 8001722:	d017      	beq.n	8001754 <HAL_GPIO_Init+0x11c>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	005b      	lsls	r3, r3, #1
 800171e:	2203      	movs	r2, #3
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	43db      	mvns	r3, r3
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	4013      	ands	r3, r2
 800172a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4313      	orrs	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	693a      	ldr	r2, [r7, #16]
 8001742:	60da      	str	r2, [r3, #12]
=======
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	689a      	ldr	r2, [r3, #8]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4313      	orrs	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	60da      	str	r2, [r3, #12]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f003 0303 	and.w	r3, r3, #3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d123      	bne.n	8001798 <HAL_GPIO_Init+0x170>
=======
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f003 0303 	and.w	r3, r3, #3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d123      	bne.n	80017a8 <HAL_GPIO_Init+0x170>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
<<<<<<< HEAD
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f003 0307 	and.w	r3, r3, #7
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691a      	ldr	r2, [r3, #16]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	08da      	lsrs	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	3208      	adds	r2, #8
 8001792:	6939      	ldr	r1, [r7, #16]
 8001794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800176c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	220f      	movs	r2, #15
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	43db      	mvns	r3, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4013      	ands	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	4313      	orrs	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	08da      	lsrs	r2, r3, #3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	3208      	adds	r2, #8
 80017a2:	6939      	ldr	r1, [r7, #16]
 80017a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	4013      	ands	r3, r2
 80017ae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 0203 	and.w	r2, r3, #3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	693a      	ldr	r2, [r7, #16]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	601a      	str	r2, [r3, #0]
=======
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	2203      	movs	r2, #3
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4013      	ands	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0203 	and.w	r2, r3, #3
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	601a      	str	r2, [r3, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
<<<<<<< HEAD
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f000 80ac 	beq.w	8001932 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017da:	4b5f      	ldr	r3, [pc, #380]	@ (8001958 <HAL_GPIO_Init+0x330>)
 80017dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017de:	4a5e      	ldr	r2, [pc, #376]	@ (8001958 <HAL_GPIO_Init+0x330>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017e6:	4b5c      	ldr	r3, [pc, #368]	@ (8001958 <HAL_GPIO_Init+0x330>)
 80017e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017f2:	4a5a      	ldr	r2, [pc, #360]	@ (800195c <HAL_GPIO_Init+0x334>)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	3302      	adds	r3, #2
 80017fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	220f      	movs	r2, #15
 800180a:	fa02 f303 	lsl.w	r3, r2, r3
 800180e:	43db      	mvns	r3, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800181c:	d025      	beq.n	800186a <HAL_GPIO_Init+0x242>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4f      	ldr	r2, [pc, #316]	@ (8001960 <HAL_GPIO_Init+0x338>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d01f      	beq.n	8001866 <HAL_GPIO_Init+0x23e>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4e      	ldr	r2, [pc, #312]	@ (8001964 <HAL_GPIO_Init+0x33c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d019      	beq.n	8001862 <HAL_GPIO_Init+0x23a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4d      	ldr	r2, [pc, #308]	@ (8001968 <HAL_GPIO_Init+0x340>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0x236>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4c      	ldr	r2, [pc, #304]	@ (800196c <HAL_GPIO_Init+0x344>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d00d      	beq.n	800185a <HAL_GPIO_Init+0x232>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4b      	ldr	r2, [pc, #300]	@ (8001970 <HAL_GPIO_Init+0x348>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d007      	beq.n	8001856 <HAL_GPIO_Init+0x22e>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4a      	ldr	r2, [pc, #296]	@ (8001974 <HAL_GPIO_Init+0x34c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_GPIO_Init+0x22a>
 800184e:	2306      	movs	r3, #6
 8001850:	e00c      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001852:	2307      	movs	r3, #7
 8001854:	e00a      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001856:	2305      	movs	r3, #5
 8001858:	e008      	b.n	800186c <HAL_GPIO_Init+0x244>
 800185a:	2304      	movs	r3, #4
 800185c:	e006      	b.n	800186c <HAL_GPIO_Init+0x244>
 800185e:	2303      	movs	r3, #3
 8001860:	e004      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001862:	2302      	movs	r3, #2
 8001864:	e002      	b.n	800186c <HAL_GPIO_Init+0x244>
 8001866:	2301      	movs	r3, #1
 8001868:	e000      	b.n	800186c <HAL_GPIO_Init+0x244>
 800186a:	2300      	movs	r3, #0
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	f002 0203 	and.w	r2, r2, #3
 8001872:	0092      	lsls	r2, r2, #2
 8001874:	4093      	lsls	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	4313      	orrs	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800187c:	4937      	ldr	r1, [pc, #220]	@ (800195c <HAL_GPIO_Init+0x334>)
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	3302      	adds	r3, #2
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800188a:	4b3b      	ldr	r3, [pc, #236]	@ (8001978 <HAL_GPIO_Init+0x350>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	43db      	mvns	r3, r3
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	4013      	ands	r3, r2
 8001898:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018ae:	4a32      	ldr	r2, [pc, #200]	@ (8001978 <HAL_GPIO_Init+0x350>)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018b4:	4b30      	ldr	r3, [pc, #192]	@ (8001978 <HAL_GPIO_Init+0x350>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	43db      	mvns	r3, r3
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	4013      	ands	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018d8:	4a27      	ldr	r2, [pc, #156]	@ (8001978 <HAL_GPIO_Init+0x350>)
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018de:	4b26      	ldr	r3, [pc, #152]	@ (8001978 <HAL_GPIO_Init+0x350>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	4013      	ands	r3, r2
 80018ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001902:	4a1d      	ldr	r2, [pc, #116]	@ (8001978 <HAL_GPIO_Init+0x350>)
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_GPIO_Init+0x350>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	43db      	mvns	r3, r3
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001920:	2b00      	cmp	r3, #0
 8001922:	d003      	beq.n	800192c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4313      	orrs	r3, r2
 800192a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800192c:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <HAL_GPIO_Init+0x350>)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	6013      	str	r3, [r2, #0]
=======
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 80ac 	beq.w	8001942 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ea:	4b5f      	ldr	r3, [pc, #380]	@ (8001968 <HAL_GPIO_Init+0x330>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ee:	4a5e      	ldr	r2, [pc, #376]	@ (8001968 <HAL_GPIO_Init+0x330>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80017f6:	4b5c      	ldr	r3, [pc, #368]	@ (8001968 <HAL_GPIO_Init+0x330>)
 80017f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	60bb      	str	r3, [r7, #8]
 8001800:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001802:	4a5a      	ldr	r2, [pc, #360]	@ (800196c <HAL_GPIO_Init+0x334>)
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	089b      	lsrs	r3, r3, #2
 8001808:	3302      	adds	r3, #2
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0303 	and.w	r3, r3, #3
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	220f      	movs	r2, #15
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800182c:	d025      	beq.n	800187a <HAL_GPIO_Init+0x242>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4f      	ldr	r2, [pc, #316]	@ (8001970 <HAL_GPIO_Init+0x338>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d01f      	beq.n	8001876 <HAL_GPIO_Init+0x23e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4e      	ldr	r2, [pc, #312]	@ (8001974 <HAL_GPIO_Init+0x33c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d019      	beq.n	8001872 <HAL_GPIO_Init+0x23a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <HAL_GPIO_Init+0x340>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d013      	beq.n	800186e <HAL_GPIO_Init+0x236>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	4a4c      	ldr	r2, [pc, #304]	@ (800197c <HAL_GPIO_Init+0x344>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d00d      	beq.n	800186a <HAL_GPIO_Init+0x232>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	4a4b      	ldr	r2, [pc, #300]	@ (8001980 <HAL_GPIO_Init+0x348>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d007      	beq.n	8001866 <HAL_GPIO_Init+0x22e>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a4a      	ldr	r2, [pc, #296]	@ (8001984 <HAL_GPIO_Init+0x34c>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d101      	bne.n	8001862 <HAL_GPIO_Init+0x22a>
 800185e:	2306      	movs	r3, #6
 8001860:	e00c      	b.n	800187c <HAL_GPIO_Init+0x244>
 8001862:	2307      	movs	r3, #7
 8001864:	e00a      	b.n	800187c <HAL_GPIO_Init+0x244>
 8001866:	2305      	movs	r3, #5
 8001868:	e008      	b.n	800187c <HAL_GPIO_Init+0x244>
 800186a:	2304      	movs	r3, #4
 800186c:	e006      	b.n	800187c <HAL_GPIO_Init+0x244>
 800186e:	2303      	movs	r3, #3
 8001870:	e004      	b.n	800187c <HAL_GPIO_Init+0x244>
 8001872:	2302      	movs	r3, #2
 8001874:	e002      	b.n	800187c <HAL_GPIO_Init+0x244>
 8001876:	2301      	movs	r3, #1
 8001878:	e000      	b.n	800187c <HAL_GPIO_Init+0x244>
 800187a:	2300      	movs	r3, #0
 800187c:	697a      	ldr	r2, [r7, #20]
 800187e:	f002 0203 	and.w	r2, r2, #3
 8001882:	0092      	lsls	r2, r2, #2
 8001884:	4093      	lsls	r3, r2
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800188c:	4937      	ldr	r1, [pc, #220]	@ (800196c <HAL_GPIO_Init+0x334>)
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	3302      	adds	r3, #2
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800189a:	4b3b      	ldr	r3, [pc, #236]	@ (8001988 <HAL_GPIO_Init+0x350>)
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d003      	beq.n	80018be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018be:	4a32      	ldr	r2, [pc, #200]	@ (8001988 <HAL_GPIO_Init+0x350>)
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018c4:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <HAL_GPIO_Init+0x350>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018e8:	4a27      	ldr	r2, [pc, #156]	@ (8001988 <HAL_GPIO_Init+0x350>)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018ee:	4b26      	ldr	r3, [pc, #152]	@ (8001988 <HAL_GPIO_Init+0x350>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001912:	4a1d      	ldr	r2, [pc, #116]	@ (8001988 <HAL_GPIO_Init+0x350>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001918:	4b1b      	ldr	r3, [pc, #108]	@ (8001988 <HAL_GPIO_Init+0x350>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800193c:	4a12      	ldr	r2, [pc, #72]	@ (8001988 <HAL_GPIO_Init+0x350>)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	6013      	str	r3, [r2, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }

    position++;
<<<<<<< HEAD
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	3301      	adds	r3, #1
 8001936:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	f47f ae78 	bne.w	8001638 <HAL_GPIO_Init+0x10>
  }
}
 8001948:	bf00      	nop
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40021000 	.word	0x40021000
 800195c:	40010000 	.word	0x40010000
 8001960:	48000400 	.word	0x48000400
 8001964:	48000800 	.word	0x48000800
 8001968:	48000c00 	.word	0x48000c00
 800196c:	48001000 	.word	0x48001000
 8001970:	48001400 	.word	0x48001400
 8001974:	48001800 	.word	0x48001800
 8001978:	40010400 	.word	0x40010400

0800197c <HAL_GPIO_WritePin>:
=======
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3301      	adds	r3, #1
 8001946:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	fa22 f303 	lsr.w	r3, r2, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	f47f ae78 	bne.w	8001648 <HAL_GPIO_Init+0x10>
  }
}
 8001958:	bf00      	nop
 800195a:	bf00      	nop
 800195c:	371c      	adds	r7, #28
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	40021000 	.word	0x40021000
 800196c:	40010000 	.word	0x40010000
 8001970:	48000400 	.word	0x48000400
 8001974:	48000800 	.word	0x48000800
 8001978:	48000c00 	.word	0x48000c00
 800197c:	48001000 	.word	0x48001000
 8001980:	48001400 	.word	0x48001400
 8001984:	48001800 	.word	0x48001800
 8001988:	40010400 	.word	0x40010400

0800198c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	887b      	ldrh	r3, [r7, #2]
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d002      	beq.n	80019aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80019a4:	2301      	movs	r3, #1
 80019a6:	73fb      	strb	r3, [r7, #15]
 80019a8:	e001      	b.n	80019ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80019aa:	2300      	movs	r3, #0
 80019ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3714      	adds	r7, #20
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <HAL_GPIO_WritePin>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	707b      	strb	r3, [r7, #1]
=======
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
 80019c8:	4613      	mov	r3, r2
 80019ca:	707b      	strb	r3, [r7, #1]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 800198c:	787b      	ldrb	r3, [r7, #1]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d003      	beq.n	800199a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	619a      	str	r2, [r3, #24]
=======
 80019cc:	787b      	ldrb	r3, [r7, #1]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	619a      	str	r2, [r3, #24]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
<<<<<<< HEAD
 8001998:	e002      	b.n	80019a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019a0:	bf00      	nop
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <HAL_PWREx_GetVoltageRange>:
=======
 80019d8:	e002      	b.n	80019e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019da:	887a      	ldrh	r2, [r7, #2]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <HAL_PWREx_GetVoltageRange>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
<<<<<<< HEAD
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
=======
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
<<<<<<< HEAD
 80019b0:	4b04      	ldr	r3, [pc, #16]	@ (80019c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40007000 	.word	0x40007000

080019c8 <HAL_PWREx_ControlVoltageScaling>:
=======
 80019f0:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <HAL_PWREx_GetVoltageRange+0x18>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40007000 	.word	0x40007000

08001a08 <HAL_PWREx_ControlVoltageScaling>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
<<<<<<< HEAD
 80019c8:	b480      	push	{r7}
 80019ca:	b085      	sub	sp, #20
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
=======
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
<<<<<<< HEAD
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019d6:	d130      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80019d8:	4b23      	ldr	r3, [pc, #140]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80019e4:	d038      	beq.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019e6:	4b20      	ldr	r3, [pc, #128]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80019ee:	4a1e      	ldr	r2, [pc, #120]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2232      	movs	r2, #50	@ 0x32
 80019fc:	fb02 f303 	mul.w	r3, r2, r3
 8001a00:	4a1b      	ldr	r2, [pc, #108]	@ (8001a70 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a02:	fba2 2303 	umull	r2, r3, r2, r3
 8001a06:	0c9b      	lsrs	r3, r3, #18
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a0c:	e002      	b.n	8001a14 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a14:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a20:	d102      	bne.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f2      	bne.n	8001a0e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a28:	4b0f      	ldr	r3, [pc, #60]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a34:	d110      	bne.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e00f      	b.n	8001a5a <HAL_PWREx_ControlVoltageScaling+0x92>
=======
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a16:	d130      	bne.n	8001a7a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a18:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a24:	d038      	beq.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a26:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a30:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a34:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a36:	4b1d      	ldr	r3, [pc, #116]	@ (8001aac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2232      	movs	r2, #50	@ 0x32
 8001a3c:	fb02 f303 	mul.w	r3, r2, r3
 8001a40:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	0c9b      	lsrs	r3, r3, #18
 8001a48:	3301      	adds	r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4c:	e002      	b.n	8001a54 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a54:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a60:	d102      	bne.n	8001a68 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f2      	bne.n	8001a4e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a68:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a6a:	695b      	ldr	r3, [r3, #20]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a74:	d110      	bne.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e00f      	b.n	8001a9a <HAL_PWREx_ControlVoltageScaling+0x92>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
<<<<<<< HEAD
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a46:	d007      	beq.n	8001a58 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a48:	4b07      	ldr	r3, [pc, #28]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a50:	4a05      	ldr	r2, [pc, #20]	@ (8001a68 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a56:	6013      	str	r3, [r2, #0]
=======
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a86:	d007      	beq.n	8001a98 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a88:	4b07      	ldr	r3, [pc, #28]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a90:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a96:	6013      	str	r3, [r2, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
<<<<<<< HEAD
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	2000003c 	.word	0x2000003c
 8001a70:	431bde83 	.word	0x431bde83

08001a74 <HAL_RCC_OscConfig>:
=======
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40007000 	.word	0x40007000
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <HAL_RCC_OscConfig>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b088      	sub	sp, #32
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
=======
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e3ca      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
=======
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e3ca      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8001a86:	4b97      	ldr	r3, [pc, #604]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f003 030c 	and.w	r3, r3, #12
 8001a8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a90:	4b94      	ldr	r3, [pc, #592]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001a92:	68db      	ldr	r3, [r3, #12]
 8001a94:	f003 0303 	and.w	r3, r3, #3
 8001a98:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0310 	and.w	r3, r3, #16
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 80e4 	beq.w	8001c70 <HAL_RCC_OscConfig+0x1fc>
=======
 8001ac6:	4b97      	ldr	r3, [pc, #604]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ad0:	4b94      	ldr	r3, [pc, #592]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80e4 	beq.w	8001cb0 <HAL_RCC_OscConfig+0x1fc>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
<<<<<<< HEAD
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d007      	beq.n	8001abe <HAL_RCC_OscConfig+0x4a>
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	f040 808b 	bne.w	8001bcc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	f040 8087 	bne.w	8001bcc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001abe:	4b89      	ldr	r3, [pc, #548]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d005      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x62>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	699b      	ldr	r3, [r3, #24]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e3a2      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
=======
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <HAL_RCC_OscConfig+0x4a>
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	2b0c      	cmp	r3, #12
 8001af2:	f040 808b 	bne.w	8001c0c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	f040 8087 	bne.w	8001c0c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001afe:	4b89      	ldr	r3, [pc, #548]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <HAL_RCC_OscConfig+0x62>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d101      	bne.n	8001b16 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e3a2      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
<<<<<<< HEAD
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a1a      	ldr	r2, [r3, #32]
 8001ada:	4b82      	ldr	r3, [pc, #520]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0308 	and.w	r3, r3, #8
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d004      	beq.n	8001af0 <HAL_RCC_OscConfig+0x7c>
 8001ae6:	4b7f      	ldr	r3, [pc, #508]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aee:	e005      	b.n	8001afc <HAL_RCC_OscConfig+0x88>
 8001af0:	4b7c      	ldr	r3, [pc, #496]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001af6:	091b      	lsrs	r3, r3, #4
 8001af8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d223      	bcs.n	8001b48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 fd87 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e383      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
=======
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a1a      	ldr	r2, [r3, #32]
 8001b1a:	4b82      	ldr	r3, [pc, #520]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0308 	and.w	r3, r3, #8
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d004      	beq.n	8001b30 <HAL_RCC_OscConfig+0x7c>
 8001b26:	4b7f      	ldr	r3, [pc, #508]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b2e:	e005      	b.n	8001b3c <HAL_RCC_OscConfig+0x88>
 8001b30:	4b7c      	ldr	r3, [pc, #496]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b32:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b36:	091b      	lsrs	r3, r3, #4
 8001b38:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d223      	bcs.n	8001b88 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a1b      	ldr	r3, [r3, #32]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f000 fd55 	bl	80025f4 <RCC_SetFlashLatencyFromMSIRange>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	e383      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8001b14:	4b73      	ldr	r3, [pc, #460]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a72      	ldr	r2, [pc, #456]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	f043 0308 	orr.w	r3, r3, #8
 8001b1e:	6013      	str	r3, [r2, #0]
 8001b20:	4b70      	ldr	r3, [pc, #448]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a1b      	ldr	r3, [r3, #32]
 8001b2c:	496d      	ldr	r1, [pc, #436]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b32:	4b6c      	ldr	r3, [pc, #432]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	021b      	lsls	r3, r3, #8
 8001b40:	4968      	ldr	r1, [pc, #416]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	604b      	str	r3, [r1, #4]
 8001b46:	e025      	b.n	8001b94 <HAL_RCC_OscConfig+0x120>
=======
 8001b54:	4b73      	ldr	r3, [pc, #460]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a72      	ldr	r2, [pc, #456]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b5a:	f043 0308 	orr.w	r3, r3, #8
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b70      	ldr	r3, [pc, #448]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	496d      	ldr	r1, [pc, #436]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b72:	4b6c      	ldr	r3, [pc, #432]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	021b      	lsls	r3, r3, #8
 8001b80:	4968      	ldr	r1, [pc, #416]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	604b      	str	r3, [r1, #4]
 8001b86:	e025      	b.n	8001bd4 <HAL_RCC_OscConfig+0x120>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8001b48:	4b66      	ldr	r3, [pc, #408]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a65      	ldr	r2, [pc, #404]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b63      	ldr	r3, [pc, #396]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	4960      	ldr	r1, [pc, #384]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b66:	4b5f      	ldr	r3, [pc, #380]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	495b      	ldr	r1, [pc, #364]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	604b      	str	r3, [r1, #4]
=======
 8001b88:	4b66      	ldr	r3, [pc, #408]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a65      	ldr	r2, [pc, #404]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b8e:	f043 0308 	orr.w	r3, r3, #8
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b63      	ldr	r3, [pc, #396]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4960      	ldr	r1, [pc, #384]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	021b      	lsls	r3, r3, #8
 8001bb4:	495b      	ldr	r1, [pc, #364]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	604b      	str	r3, [r1, #4]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
<<<<<<< HEAD
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d109      	bne.n	8001b94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f000 fd47 	bl	8002618 <RCC_SetFlashLatencyFromMSIRange>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d001      	beq.n	8001b94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e343      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
=======
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d109      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f000 fd15 	bl	80025f4 <RCC_SetFlashLatencyFromMSIRange>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e343      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 8001b94:	f000 fc4a 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b52      	ldr	r3, [pc, #328]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	091b      	lsrs	r3, r3, #4
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	4950      	ldr	r1, [pc, #320]	@ (8001ce8 <HAL_RCC_OscConfig+0x274>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	f003 031f 	and.w	r3, r3, #31
 8001bac:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb0:	4a4e      	ldr	r2, [pc, #312]	@ (8001cec <HAL_RCC_OscConfig+0x278>)
 8001bb2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bb4:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf0 <HAL_RCC_OscConfig+0x27c>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff fb13 	bl	80011e4 <HAL_InitTick>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bc2:	7bfb      	ldrb	r3, [r7, #15]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d052      	beq.n	8001c6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	e327      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
=======
 8001bd4:	f000 fc4a 	bl	800246c <HAL_RCC_GetSysClockFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b52      	ldr	r3, [pc, #328]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	091b      	lsrs	r3, r3, #4
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	4950      	ldr	r1, [pc, #320]	@ (8001d28 <HAL_RCC_OscConfig+0x274>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	f003 031f 	and.w	r3, r3, #31
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	4a4e      	ldr	r2, [pc, #312]	@ (8001d2c <HAL_RCC_OscConfig+0x278>)
 8001bf2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bf4:	4b4e      	ldr	r3, [pc, #312]	@ (8001d30 <HAL_RCC_OscConfig+0x27c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff fb0d 	bl	8001218 <HAL_InitTick>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d052      	beq.n	8001cae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	e327      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
<<<<<<< HEAD
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d032      	beq.n	8001c3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bd4:	4b43      	ldr	r3, [pc, #268]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a42      	ldr	r2, [pc, #264]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001be0:	f7ff fc10 	bl	8001404 <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be8:	f7ff fc0c 	bl	8001404 <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e310      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d0f0      	beq.n	8001be8 <HAL_RCC_OscConfig+0x174>
=======
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d032      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c14:	4b43      	ldr	r3, [pc, #268]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a42      	ldr	r2, [pc, #264]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c1a:	f043 0301 	orr.w	r3, r3, #1
 8001c1e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c20:	f7ff fb4a 	bl	80012b8 <HAL_GetTick>
 8001c24:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c26:	e008      	b.n	8001c3a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c28:	f7ff fb46 	bl	80012b8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e310      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c3a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x174>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
<<<<<<< HEAD
 8001c06:	4b37      	ldr	r3, [pc, #220]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a36      	ldr	r2, [pc, #216]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6a1b      	ldr	r3, [r3, #32]
 8001c1e:	4931      	ldr	r1, [pc, #196]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c24:	4b2f      	ldr	r3, [pc, #188]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	69db      	ldr	r3, [r3, #28]
 8001c30:	021b      	lsls	r3, r3, #8
 8001c32:	492c      	ldr	r1, [pc, #176]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c34:	4313      	orrs	r3, r2
 8001c36:	604b      	str	r3, [r1, #4]
 8001c38:	e01a      	b.n	8001c70 <HAL_RCC_OscConfig+0x1fc>
=======
 8001c46:	4b37      	ldr	r3, [pc, #220]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a36      	ldr	r2, [pc, #216]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c4c:	f043 0308 	orr.w	r3, r3, #8
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	4b34      	ldr	r3, [pc, #208]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	4931      	ldr	r1, [pc, #196]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c64:	4b2f      	ldr	r3, [pc, #188]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	69db      	ldr	r3, [r3, #28]
 8001c70:	021b      	lsls	r3, r3, #8
 8001c72:	492c      	ldr	r1, [pc, #176]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	604b      	str	r3, [r1, #4]
 8001c78:	e01a      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1fc>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
<<<<<<< HEAD
 8001c3a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a29      	ldr	r2, [pc, #164]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c40:	f023 0301 	bic.w	r3, r3, #1
 8001c44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c46:	f7ff fbdd 	bl	8001404 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c4c:	e008      	b.n	8001c60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c4e:	f7ff fbd9 	bl	8001404 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d901      	bls.n	8001c60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e2dd      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c60:	4b20      	ldr	r3, [pc, #128]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0302 	and.w	r3, r3, #2
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1f0      	bne.n	8001c4e <HAL_RCC_OscConfig+0x1da>
 8001c6c:	e000      	b.n	8001c70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c6e:	bf00      	nop
=======
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a29      	ldr	r2, [pc, #164]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001c80:	f023 0301 	bic.w	r3, r3, #1
 8001c84:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c86:	f7ff fb17 	bl	80012b8 <HAL_GetTick>
 8001c8a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c8c:	e008      	b.n	8001ca0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c8e:	f7ff fb13 	bl	80012b8 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e2dd      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ca0:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d1f0      	bne.n	8001c8e <HAL_RCC_OscConfig+0x1da>
 8001cac:	e000      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cae:	bf00      	nop
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d074      	beq.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
=======
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d074      	beq.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
<<<<<<< HEAD
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d005      	beq.n	8001c8e <HAL_RCC_OscConfig+0x21a>
 8001c82:	69bb      	ldr	r3, [r7, #24]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	d10e      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2b03      	cmp	r3, #3
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8e:	4b15      	ldr	r3, [pc, #84]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d064      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2f0>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d160      	bne.n	8001d64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e2ba      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
=======
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b08      	cmp	r3, #8
 8001cc0:	d005      	beq.n	8001cce <HAL_RCC_OscConfig+0x21a>
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b0c      	cmp	r3, #12
 8001cc6:	d10e      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b03      	cmp	r3, #3
 8001ccc:	d10b      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cce:	4b15      	ldr	r3, [pc, #84]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d064      	beq.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d160      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e2ba      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x24a>
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e026      	b.n	8001d0c <HAL_RCC_OscConfig+0x298>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001cc6:	d115      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x280>
 8001cc8:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a05      	ldr	r2, [pc, #20]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a02      	ldr	r2, [pc, #8]	@ (8001ce4 <HAL_RCC_OscConfig+0x270>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	e014      	b.n	8001d0c <HAL_RCC_OscConfig+0x298>
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08007d4c 	.word	0x08007d4c
 8001cec:	2000003c 	.word	0x2000003c
 8001cf0:	20000040 	.word	0x20000040
 8001cf4:	4ba0      	ldr	r3, [pc, #640]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a9f      	ldr	r2, [pc, #636]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b9d      	ldr	r3, [pc, #628]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a9c      	ldr	r2, [pc, #624]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d14:	f7ff fb76 	bl	8001404 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff fb72 	bl	8001404 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	@ 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e276      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	4b92      	ldr	r3, [pc, #584]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0x2a8>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
=======
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cee:	d106      	bne.n	8001cfe <HAL_RCC_OscConfig+0x24a>
 8001cf0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cfa:	6013      	str	r3, [r2, #0]
 8001cfc:	e026      	b.n	8001d4c <HAL_RCC_OscConfig+0x298>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d06:	d115      	bne.n	8001d34 <HAL_RCC_OscConfig+0x280>
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a05      	ldr	r2, [pc, #20]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d0e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b03      	ldr	r3, [pc, #12]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a02      	ldr	r2, [pc, #8]	@ (8001d24 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d1e:	6013      	str	r3, [r2, #0]
 8001d20:	e014      	b.n	8001d4c <HAL_RCC_OscConfig+0x298>
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000
 8001d28:	080054bc 	.word	0x080054bc
 8001d2c:	20000000 	.word	0x20000000
 8001d30:	20000004 	.word	0x20000004
 8001d34:	4ba0      	ldr	r3, [pc, #640]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a9f      	ldr	r2, [pc, #636]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	4b9d      	ldr	r3, [pc, #628]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a9c      	ldr	r2, [pc, #624]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d013      	beq.n	8001d7c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d54:	f7ff fab0 	bl	80012b8 <HAL_GetTick>
 8001d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d5c:	f7ff faac 	bl	80012b8 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	@ 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e276      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d6e:	4b92      	ldr	r3, [pc, #584]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x2a8>
 8001d7a:	e014      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001d3c:	f7ff fb62 	bl	8001404 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff fb5e 	bl	8001404 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	@ 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e262      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d56:	4b88      	ldr	r3, [pc, #544]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x2d0>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
=======
 8001d7c:	f7ff fa9c 	bl	80012b8 <HAL_GetTick>
 8001d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d82:	e008      	b.n	8001d96 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d84:	f7ff fa98 	bl	80012b8 <HAL_GetTick>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	1ad3      	subs	r3, r2, r3
 8001d8e:	2b64      	cmp	r3, #100	@ 0x64
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e262      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d96:	4b88      	ldr	r3, [pc, #544]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1f0      	bne.n	8001d84 <HAL_RCC_OscConfig+0x2d0>
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da4:	bf00      	nop
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d060      	beq.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
=======
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d060      	beq.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
<<<<<<< HEAD
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	2b04      	cmp	r3, #4
 8001d76:	d005      	beq.n	8001d84 <HAL_RCC_OscConfig+0x310>
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d119      	bne.n	8001db2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d7e:	697b      	ldr	r3, [r7, #20]
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d116      	bne.n	8001db2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d84:	4b7c      	ldr	r3, [pc, #496]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_RCC_OscConfig+0x328>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e23f      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
=======
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	2b04      	cmp	r3, #4
 8001db6:	d005      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x310>
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b0c      	cmp	r3, #12
 8001dbc:	d119      	bne.n	8001df2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d116      	bne.n	8001df2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dc4:	4b7c      	ldr	r3, [pc, #496]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <HAL_RCC_OscConfig+0x328>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e23f      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001d9c:	4b76      	ldr	r3, [pc, #472]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	4973      	ldr	r1, [pc, #460]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001db0:	e040      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
=======
 8001ddc:	4b76      	ldr	r3, [pc, #472]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	061b      	lsls	r3, r3, #24
 8001dea:	4973      	ldr	r1, [pc, #460]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df0:	e040      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
<<<<<<< HEAD
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	68db      	ldr	r3, [r3, #12]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d023      	beq.n	8001e02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dba:	4b6f      	ldr	r3, [pc, #444]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a6e      	ldr	r2, [pc, #440]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fb1d 	bl	8001404 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dce:	f7ff fb19 	bl	8001404 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e21d      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001de0:	4b65      	ldr	r3, [pc, #404]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d0f0      	beq.n	8001dce <HAL_RCC_OscConfig+0x35a>
=======
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d023      	beq.n	8001e42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dfa:	4b6f      	ldr	r3, [pc, #444]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a6e      	ldr	r2, [pc, #440]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e06:	f7ff fa57 	bl	80012b8 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0c:	e008      	b.n	8001e20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e0e:	f7ff fa53 	bl	80012b8 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d901      	bls.n	8001e20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e1c:	2303      	movs	r3, #3
 8001e1e:	e21d      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e20:	4b65      	ldr	r3, [pc, #404]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0f0      	beq.n	8001e0e <HAL_RCC_OscConfig+0x35a>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8001dec:	4b62      	ldr	r3, [pc, #392]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	495f      	ldr	r1, [pc, #380]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
 8001e00:	e018      	b.n	8001e34 <HAL_RCC_OscConfig+0x3c0>
=======
 8001e2c:	4b62      	ldr	r3, [pc, #392]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	061b      	lsls	r3, r3, #24
 8001e3a:	495f      	ldr	r1, [pc, #380]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]
 8001e40:	e018      	b.n	8001e74 <HAL_RCC_OscConfig+0x3c0>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8001e02:	4b5d      	ldr	r3, [pc, #372]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a5c      	ldr	r2, [pc, #368]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff faf9 	bl	8001404 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff faf5 	bl	8001404 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1f9      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e28:	4b53      	ldr	r3, [pc, #332]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x3a2>
=======
 8001e42:	4b5d      	ldr	r3, [pc, #372]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a5c      	ldr	r2, [pc, #368]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001e4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4e:	f7ff fa33 	bl	80012b8 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e54:	e008      	b.n	8001e68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e56:	f7ff fa2f 	bl	80012b8 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	2b02      	cmp	r3, #2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e1f9      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e68:	4b53      	ldr	r3, [pc, #332]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1f0      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3a2>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0308 	and.w	r3, r3, #8
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d03c      	beq.n	8001eba <HAL_RCC_OscConfig+0x446>
=======
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0308 	and.w	r3, r3, #8
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d03c      	beq.n	8001efa <HAL_RCC_OscConfig+0x446>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
<<<<<<< HEAD
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d01c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x40e>
=======
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	695b      	ldr	r3, [r3, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d01c      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x40e>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
<<<<<<< HEAD
 8001e48:	4b4b      	ldr	r3, [pc, #300]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e4e:	4a4a      	ldr	r2, [pc, #296]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e58:	f7ff fad4 	bl	8001404 <HAL_GetTick>
 8001e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e60:	f7ff fad0 	bl	8001404 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e1d4      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e72:	4b41      	ldr	r3, [pc, #260]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ef      	beq.n	8001e60 <HAL_RCC_OscConfig+0x3ec>
 8001e80:	e01b      	b.n	8001eba <HAL_RCC_OscConfig+0x446>
=======
 8001e88:	4b4b      	ldr	r3, [pc, #300]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e8e:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e98:	f7ff fa0e 	bl	80012b8 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7ff fa0a 	bl	80012b8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e1d4      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eb2:	4b41      	ldr	r3, [pc, #260]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d0ef      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x3ec>
 8001ec0:	e01b      	b.n	8001efa <HAL_RCC_OscConfig+0x446>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8001e82:	4b3d      	ldr	r3, [pc, #244]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e88:	4a3b      	ldr	r2, [pc, #236]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	f023 0301 	bic.w	r3, r3, #1
 8001e8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e92:	f7ff fab7 	bl	8001404 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e9a:	f7ff fab3 	bl	8001404 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e1b7      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eac:	4b32      	ldr	r3, [pc, #200]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1ef      	bne.n	8001e9a <HAL_RCC_OscConfig+0x426>
=======
 8001ec2:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ec8:	4a3b      	ldr	r2, [pc, #236]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001eca:	f023 0301 	bic.w	r3, r3, #1
 8001ece:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed2:	f7ff f9f1 	bl	80012b8 <HAL_GetTick>
 8001ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed8:	e008      	b.n	8001eec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eda:	f7ff f9ed 	bl	80012b8 <HAL_GetTick>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d901      	bls.n	8001eec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	e1b7      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eec:	4b32      	ldr	r3, [pc, #200]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1ef      	bne.n	8001eda <HAL_RCC_OscConfig+0x426>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 80a6 	beq.w	8002014 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	77fb      	strb	r3, [r7, #31]
=======
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	f000 80a6 	beq.w	8002054 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	77fb      	strb	r3, [r7, #31]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
<<<<<<< HEAD
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10d      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed8:	4b27      	ldr	r3, [pc, #156]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001edc:	4a26      	ldr	r2, [pc, #152]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001ede:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee4:	4b24      	ldr	r3, [pc, #144]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef4:	4b21      	ldr	r3, [pc, #132]	@ (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d118      	bne.n	8001f32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f00:	4b1e      	ldr	r3, [pc, #120]	@ (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a1d      	ldr	r2, [pc, #116]	@ (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0c:	f7ff fa7a 	bl	8001404 <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f14:	f7ff fa76 	bl	8001404 <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e17a      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <HAL_RCC_OscConfig+0x508>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d0f0      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4a0>
=======
 8001f0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	4b27      	ldr	r3, [pc, #156]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	4a26      	ldr	r2, [pc, #152]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f24:	4b24      	ldr	r3, [pc, #144]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f34:	4b21      	ldr	r3, [pc, #132]	@ (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d118      	bne.n	8001f72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f40:	4b1e      	ldr	r3, [pc, #120]	@ (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a1d      	ldr	r2, [pc, #116]	@ (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f4c:	f7ff f9b4 	bl	80012b8 <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7ff f9b0 	bl	80012b8 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e17a      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f66:	4b15      	ldr	r3, [pc, #84]	@ (8001fbc <HAL_RCC_OscConfig+0x508>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4a0>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d108      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4d8>
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f40:	4a0d      	ldr	r2, [pc, #52]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f4a:	e029      	b.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d115      	bne.n	8001f80 <HAL_RCC_OscConfig+0x50c>
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f5a:	4a07      	ldr	r2, [pc, #28]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f64:	4b04      	ldr	r3, [pc, #16]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6a:	4a03      	ldr	r2, [pc, #12]	@ (8001f78 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f74:	e014      	b.n	8001fa0 <HAL_RCC_OscConfig+0x52c>
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
 8001f80:	4b9c      	ldr	r3, [pc, #624]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f86:	4a9b      	ldr	r2, [pc, #620]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001f88:	f023 0301 	bic.w	r3, r3, #1
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f90:	4b98      	ldr	r3, [pc, #608]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f96:	4a97      	ldr	r2, [pc, #604]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001f98:	f023 0304 	bic.w	r3, r3, #4
 8001f9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d108      	bne.n	8001f8c <HAL_RCC_OscConfig+0x4d8>
 8001f7a:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f80:	4a0d      	ldr	r2, [pc, #52]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f8a:	e029      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	2b05      	cmp	r3, #5
 8001f92:	d115      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x50c>
 8001f94:	4b08      	ldr	r3, [pc, #32]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9a:	4a07      	ldr	r2, [pc, #28]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fa4:	4b04      	ldr	r3, [pc, #16]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001faa:	4a03      	ldr	r2, [pc, #12]	@ (8001fb8 <HAL_RCC_OscConfig+0x504>)
 8001fac:	f043 0301 	orr.w	r3, r3, #1
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fb4:	e014      	b.n	8001fe0 <HAL_RCC_OscConfig+0x52c>
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40007000 	.word	0x40007000
 8001fc0:	4b9c      	ldr	r3, [pc, #624]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8001fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc6:	4a9b      	ldr	r2, [pc, #620]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001fd0:	4b98      	ldr	r3, [pc, #608]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fd6:	4a97      	ldr	r2, [pc, #604]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8001fd8:	f023 0304 	bic.w	r3, r3, #4
 8001fdc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
<<<<<<< HEAD
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d016      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7ff fa2c 	bl	8001404 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fae:	e00a      	b.n	8001fc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fb0:	f7ff fa28 	bl	8001404 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e12a      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc6:	4b8b      	ldr	r3, [pc, #556]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fcc:	f003 0302 	and.w	r3, r3, #2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ed      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x53c>
 8001fd4:	e015      	b.n	8002002 <HAL_RCC_OscConfig+0x58e>
=======
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d016      	beq.n	8002016 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7ff f966 	bl	80012b8 <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fee:	e00a      	b.n	8002006 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff0:	f7ff f962 	bl	80012b8 <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e12a      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002006:	4b8b      	ldr	r3, [pc, #556]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8002008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d0ed      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x53c>
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x58e>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8001fd6:	f7ff fa15 	bl	8001404 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7ff fa11 	bl	8001404 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e113      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff4:	4b7f      	ldr	r3, [pc, #508]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d1ed      	bne.n	8001fde <HAL_RCC_OscConfig+0x56a>
=======
 8002016:	f7ff f94f 	bl	80012b8 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800201e:	f7ff f94b 	bl	80012b8 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	f241 3288 	movw	r2, #5000	@ 0x1388
 800202c:	4293      	cmp	r3, r2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e113      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002034:	4b7f      	ldr	r3, [pc, #508]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8002036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ed      	bne.n	800201e <HAL_RCC_OscConfig+0x56a>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8002002:	7ffb      	ldrb	r3, [r7, #31]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d105      	bne.n	8002014 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002008:	4b7a      	ldr	r3, [pc, #488]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800200a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200c:	4a79      	ldr	r2, [pc, #484]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800200e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002012:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8002042:	7ffb      	ldrb	r3, [r7, #31]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d105      	bne.n	8002054 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002048:	4b7a      	ldr	r3, [pc, #488]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 800204a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800204c:	4a79      	ldr	r2, [pc, #484]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 800204e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002052:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
<<<<<<< HEAD
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002018:	2b00      	cmp	r3, #0
 800201a:	f000 80fe 	beq.w	800221a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002022:	2b02      	cmp	r3, #2
 8002024:	f040 80d0 	bne.w	80021c8 <HAL_RCC_OscConfig+0x754>
=======
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002058:	2b00      	cmp	r3, #0
 800205a:	f000 80fe 	beq.w	800225a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002062:	2b02      	cmp	r3, #2
 8002064:	f040 80d0 	bne.w	8002208 <HAL_RCC_OscConfig+0x754>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 8002028:	4b72      	ldr	r3, [pc, #456]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f003 0203 	and.w	r2, r3, #3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002038:	429a      	cmp	r2, r3
 800203a:	d130      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	3b01      	subs	r3, #1
 8002048:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d127      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002058:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800205a:	429a      	cmp	r2, r3
 800205c:	d11f      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
=======
 8002068:	4b72      	ldr	r3, [pc, #456]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0203 	and.w	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002078:	429a      	cmp	r2, r3
 800207a:	d130      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	3b01      	subs	r3, #1
 8002088:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800208a:	429a      	cmp	r2, r3
 800208c:	d127      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002098:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d11f      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
<<<<<<< HEAD
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002068:	2a07      	cmp	r2, #7
 800206a:	bf14      	ite	ne
 800206c:	2201      	movne	r2, #1
 800206e:	2200      	moveq	r2, #0
 8002070:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002072:	4293      	cmp	r3, r2
 8002074:	d113      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	3b01      	subs	r3, #1
 8002084:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d109      	bne.n	800209e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d06e      	beq.n	800217c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	d069      	beq.n	8002178 <HAL_RCC_OscConfig+0x704>
=======
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020a8:	2a07      	cmp	r2, #7
 80020aa:	bf14      	ite	ne
 80020ac:	2201      	movne	r2, #1
 80020ae:	2200      	moveq	r2, #0
 80020b0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d113      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c0:	085b      	lsrs	r3, r3, #1
 80020c2:	3b01      	subs	r3, #1
 80020c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d109      	bne.n	80020de <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d4:	085b      	lsrs	r3, r3, #1
 80020d6:	3b01      	subs	r3, #1
 80020d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020da:	429a      	cmp	r2, r3
 80020dc:	d06e      	beq.n	80021bc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d069      	beq.n	80021b8 <HAL_RCC_OscConfig+0x704>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
<<<<<<< HEAD
 80020a4:	4b53      	ldr	r3, [pc, #332]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d105      	bne.n	80020bc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020b0:	4b50      	ldr	r3, [pc, #320]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_OscConfig+0x64c>
=======
 80020e4:	4b53      	ldr	r3, [pc, #332]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d105      	bne.n	80020fc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020f0:	4b50      	ldr	r3, [pc, #320]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_OscConfig+0x64c>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif
            )
          {
            return HAL_ERROR;
<<<<<<< HEAD
 80020bc:	2301      	movs	r3, #1
 80020be:	e0ad      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
=======
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0ad      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80020c0:	4b4c      	ldr	r3, [pc, #304]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a4b      	ldr	r2, [pc, #300]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80020ca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020cc:	f7ff f99a 	bl	8001404 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020d4:	f7ff f996 	bl	8001404 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e09a      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020e6:	4b43      	ldr	r3, [pc, #268]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d1f0      	bne.n	80020d4 <HAL_RCC_OscConfig+0x660>
=======
 8002100:	4b4c      	ldr	r3, [pc, #304]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a4b      	ldr	r2, [pc, #300]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8002106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800210c:	f7ff f8d4 	bl	80012b8 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7ff f8d0 	bl	80012b8 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e09a      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002126:	4b43      	ldr	r3, [pc, #268]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x660>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 80020f2:	4b40      	ldr	r3, [pc, #256]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	4b40      	ldr	r3, [pc, #256]	@ (80021f8 <HAL_RCC_OscConfig+0x784>)
 80020f8:	4013      	ands	r3, r2
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002102:	3a01      	subs	r2, #1
 8002104:	0112      	lsls	r2, r2, #4
 8002106:	4311      	orrs	r1, r2
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800210c:	0212      	lsls	r2, r2, #8
 800210e:	4311      	orrs	r1, r2
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002114:	0852      	lsrs	r2, r2, #1
 8002116:	3a01      	subs	r2, #1
 8002118:	0552      	lsls	r2, r2, #21
 800211a:	4311      	orrs	r1, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002120:	0852      	lsrs	r2, r2, #1
 8002122:	3a01      	subs	r2, #1
 8002124:	0652      	lsls	r2, r2, #25
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800212c:	0912      	lsrs	r2, r2, #4
 800212e:	0452      	lsls	r2, r2, #17
 8002130:	430a      	orrs	r2, r1
 8002132:	4930      	ldr	r1, [pc, #192]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8002134:	4313      	orrs	r3, r2
 8002136:	60cb      	str	r3, [r1, #12]
=======
 8002132:	4b40      	ldr	r3, [pc, #256]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8002134:	68da      	ldr	r2, [r3, #12]
 8002136:	4b40      	ldr	r3, [pc, #256]	@ (8002238 <HAL_RCC_OscConfig+0x784>)
 8002138:	4013      	ands	r3, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002142:	3a01      	subs	r2, #1
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800214c:	0212      	lsls	r2, r2, #8
 800214e:	4311      	orrs	r1, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002154:	0852      	lsrs	r2, r2, #1
 8002156:	3a01      	subs	r2, #1
 8002158:	0552      	lsls	r2, r2, #21
 800215a:	4311      	orrs	r1, r2
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002160:	0852      	lsrs	r2, r2, #1
 8002162:	3a01      	subs	r2, #1
 8002164:	0652      	lsls	r2, r2, #25
 8002166:	4311      	orrs	r1, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800216c:	0912      	lsrs	r2, r2, #4
 800216e:	0452      	lsls	r2, r2, #17
 8002170:	430a      	orrs	r2, r1
 8002172:	4930      	ldr	r1, [pc, #192]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8002174:	4313      	orrs	r3, r2
 8002176:	60cb      	str	r3, [r1, #12]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8002138:	4b2e      	ldr	r3, [pc, #184]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a2d      	ldr	r2, [pc, #180]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002144:	4b2b      	ldr	r3, [pc, #172]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a2a      	ldr	r2, [pc, #168]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800214e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002150:	f7ff f958 	bl	8001404 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7ff f954 	bl	8001404 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e058      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	4b22      	ldr	r3, [pc, #136]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002176:	e050      	b.n	800221a <HAL_RCC_OscConfig+0x7a6>
=======
 8002178:	4b2e      	ldr	r3, [pc, #184]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2d      	ldr	r2, [pc, #180]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 800217e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002182:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002184:	4b2b      	ldr	r3, [pc, #172]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a2a      	ldr	r2, [pc, #168]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800218e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002190:	f7ff f892 	bl	80012b8 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002198:	f7ff f88e 	bl	80012b8 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e058      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021aa:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d0f0      	beq.n	8002198 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021b6:	e050      	b.n	800225a <HAL_RCC_OscConfig+0x7a6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
<<<<<<< HEAD
 8002178:	2301      	movs	r3, #1
 800217a:	e04f      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
=======
 80021b8:	2301      	movs	r3, #1
 80021ba:	e04f      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
<<<<<<< HEAD
 800217c:	4b1d      	ldr	r3, [pc, #116]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d148      	bne.n	800221a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002188:	4b1a      	ldr	r3, [pc, #104]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a19      	ldr	r2, [pc, #100]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002192:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002194:	4b17      	ldr	r3, [pc, #92]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a16      	ldr	r2, [pc, #88]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 800219a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800219e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021a0:	f7ff f930 	bl	8001404 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff f92c 	bl	8001404 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e030      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	4b0e      	ldr	r3, [pc, #56]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x734>
 80021c6:	e028      	b.n	800221a <HAL_RCC_OscConfig+0x7a6>
=======
 80021bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d148      	bne.n	800225a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a19      	ldr	r2, [pc, #100]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021d4:	4b17      	ldr	r3, [pc, #92]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a16      	ldr	r2, [pc, #88]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021e0:	f7ff f86a 	bl	80012b8 <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7ff f866 	bl	80012b8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e030      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d0f0      	beq.n	80021e8 <HAL_RCC_OscConfig+0x734>
 8002206:	e028      	b.n	800225a <HAL_RCC_OscConfig+0x7a6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2b0c      	cmp	r3, #12
 80021cc:	d023      	beq.n	8002216 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ce:	4b09      	ldr	r3, [pc, #36]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a08      	ldr	r2, [pc, #32]	@ (80021f4 <HAL_RCC_OscConfig+0x780>)
 80021d4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021da:	f7ff f913 	bl	8001404 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e0:	e00c      	b.n	80021fc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e2:	f7ff f90f 	bl	8001404 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d905      	bls.n	80021fc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e013      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
 80021f4:	40021000 	.word	0x40021000
 80021f8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <HAL_RCC_OscConfig+0x7b0>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ec      	bne.n	80021e2 <HAL_RCC_OscConfig+0x76e>
=======
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2b0c      	cmp	r3, #12
 800220c:	d023      	beq.n	8002256 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220e:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a08      	ldr	r2, [pc, #32]	@ (8002234 <HAL_RCC_OscConfig+0x780>)
 8002214:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7ff f84d 	bl	80012b8 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002220:	e00c      	b.n	800223c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002222:	f7ff f849 	bl	80012b8 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d905      	bls.n	800223c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e013      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
 8002234:	40021000 	.word	0x40021000
 8002238:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800223c:	4b09      	ldr	r3, [pc, #36]	@ (8002264 <HAL_RCC_OscConfig+0x7b0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1ec      	bne.n	8002222 <HAL_RCC_OscConfig+0x76e>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
<<<<<<< HEAD
 8002208:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_RCC_OscConfig+0x7b0>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4905      	ldr	r1, [pc, #20]	@ (8002224 <HAL_RCC_OscConfig+0x7b0>)
 800220e:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <HAL_RCC_OscConfig+0x7b4>)
 8002210:	4013      	ands	r3, r2
 8002212:	60cb      	str	r3, [r1, #12]
 8002214:	e001      	b.n	800221a <HAL_RCC_OscConfig+0x7a6>
=======
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_RCC_OscConfig+0x7b0>)
 800224a:	68da      	ldr	r2, [r3, #12]
 800224c:	4905      	ldr	r1, [pc, #20]	@ (8002264 <HAL_RCC_OscConfig+0x7b0>)
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_RCC_OscConfig+0x7b4>)
 8002250:	4013      	ands	r3, r2
 8002252:	60cb      	str	r3, [r1, #12]
 8002254:	e001      	b.n	800225a <HAL_RCC_OscConfig+0x7a6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
<<<<<<< HEAD
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x7a8>
=======
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <HAL_RCC_OscConfig+0x7a8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3720      	adds	r7, #32
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	feeefffc 	.word	0xfeeefffc

0800222c <HAL_RCC_ClockConfig>:
=======
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	feeefffc 	.word	0xfeeefffc

0800226c <HAL_RCC_ClockConfig>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
=======
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0e7      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
=======
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0e7      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8002240:	4b75      	ldr	r3, [pc, #468]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	683a      	ldr	r2, [r7, #0]
 800224a:	429a      	cmp	r2, r3
 800224c:	d910      	bls.n	8002270 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800224e:	4b72      	ldr	r3, [pc, #456]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f023 0207 	bic.w	r2, r3, #7
 8002256:	4970      	ldr	r1, [pc, #448]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
=======
 8002280:	4b75      	ldr	r3, [pc, #468]	@ (8002458 <HAL_RCC_ClockConfig+0x1ec>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0307 	and.w	r3, r3, #7
 8002288:	683a      	ldr	r2, [r7, #0]
 800228a:	429a      	cmp	r2, r3
 800228c:	d910      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228e:	4b72      	ldr	r3, [pc, #456]	@ (8002458 <HAL_RCC_ClockConfig+0x1ec>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f023 0207 	bic.w	r2, r3, #7
 8002296:	4970      	ldr	r1, [pc, #448]	@ (8002458 <HAL_RCC_ClockConfig+0x1ec>)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800225e:	4b6e      	ldr	r3, [pc, #440]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0307 	and.w	r3, r3, #7
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	429a      	cmp	r2, r3
 800226a:	d001      	beq.n	8002270 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0cf      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
=======
 800229e:	4b6e      	ldr	r3, [pc, #440]	@ (8002458 <HAL_RCC_ClockConfig+0x1ec>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0cf      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d010      	beq.n	800229e <HAL_RCC_ClockConfig+0x72>
=======
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <HAL_RCC_ClockConfig+0x72>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
<<<<<<< HEAD
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689a      	ldr	r2, [r3, #8]
 8002280:	4b66      	ldr	r3, [pc, #408]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002288:	429a      	cmp	r2, r3
 800228a:	d908      	bls.n	800229e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800228c:	4b63      	ldr	r3, [pc, #396]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4960      	ldr	r1, [pc, #384]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 800229a:	4313      	orrs	r3, r2
 800229c:	608b      	str	r3, [r1, #8]
=======
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	4b66      	ldr	r3, [pc, #408]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d908      	bls.n	80022de <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022cc:	4b63      	ldr	r3, [pc, #396]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	4960      	ldr	r1, [pc, #384]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d04c      	beq.n	8002344 <HAL_RCC_ClockConfig+0x118>
=======
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d04c      	beq.n	8002384 <HAL_RCC_ClockConfig+0x118>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d107      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022b2:	4b5a      	ldr	r3, [pc, #360]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d121      	bne.n	8002302 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e0a6      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
=======
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	d107      	bne.n	8002302 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f2:	4b5a      	ldr	r3, [pc, #360]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d121      	bne.n	8002342 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e0a6      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d107      	bne.n	80022da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ca:	4b54      	ldr	r3, [pc, #336]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d115      	bne.n	8002302 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e09a      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
=======
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b02      	cmp	r3, #2
 8002308:	d107      	bne.n	800231a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800230a:	4b54      	ldr	r3, [pc, #336]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d115      	bne.n	8002342 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e09a      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
<<<<<<< HEAD
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d107      	bne.n	80022f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e2:	4b4e      	ldr	r3, [pc, #312]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d109      	bne.n	8002302 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e08e      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
=======
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d107      	bne.n	8002332 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002322:	4b4e      	ldr	r3, [pc, #312]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d109      	bne.n	8002342 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e08e      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
<<<<<<< HEAD
 80022f2:	4b4a      	ldr	r3, [pc, #296]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e086      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
=======
 8002332:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e086      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8002302:	4b46      	ldr	r3, [pc, #280]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f023 0203 	bic.w	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4943      	ldr	r1, [pc, #268]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002310:	4313      	orrs	r3, r2
 8002312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002314:	f7ff f876 	bl	8001404 <HAL_GetTick>
 8002318:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231a:	e00a      	b.n	8002332 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231c:	f7ff f872 	bl	8001404 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232a:	4293      	cmp	r3, r2
 800232c:	d901      	bls.n	8002332 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e06e      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	4b3a      	ldr	r3, [pc, #232]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 020c 	and.w	r2, r3, #12
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	429a      	cmp	r2, r3
 8002342:	d1eb      	bne.n	800231c <HAL_RCC_ClockConfig+0xf0>
=======
 8002342:	4b46      	ldr	r3, [pc, #280]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f023 0203 	bic.w	r2, r3, #3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4943      	ldr	r1, [pc, #268]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002354:	f7fe ffb0 	bl	80012b8 <HAL_GetTick>
 8002358:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235a:	e00a      	b.n	8002372 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800235c:	f7fe ffac 	bl	80012b8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236a:	4293      	cmp	r3, r2
 800236c:	d901      	bls.n	8002372 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800236e:	2303      	movs	r3, #3
 8002370:	e06e      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002372:	4b3a      	ldr	r3, [pc, #232]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 020c 	and.w	r2, r3, #12
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	429a      	cmp	r2, r3
 8002382:	d1eb      	bne.n	800235c <HAL_RCC_ClockConfig+0xf0>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	2b00      	cmp	r3, #0
 800234e:	d010      	beq.n	8002372 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	4b31      	ldr	r3, [pc, #196]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800235c:	429a      	cmp	r2, r3
 800235e:	d208      	bcs.n	8002372 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002360:	4b2e      	ldr	r3, [pc, #184]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	492b      	ldr	r1, [pc, #172]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
=======
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689a      	ldr	r2, [r3, #8]
 8002394:	4b31      	ldr	r3, [pc, #196]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800239c:	429a      	cmp	r2, r3
 800239e:	d208      	bcs.n	80023b2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a0:	4b2e      	ldr	r3, [pc, #184]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	492b      	ldr	r1, [pc, #172]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	608b      	str	r3, [r1, #8]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8002372:	4b29      	ldr	r3, [pc, #164]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d210      	bcs.n	80023a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002380:	4b25      	ldr	r3, [pc, #148]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 0207 	bic.w	r2, r3, #7
 8002388:	4923      	ldr	r1, [pc, #140]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
=======
 80023b2:	4b29      	ldr	r3, [pc, #164]	@ (8002458 <HAL_RCC_ClockConfig+0x1ec>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d210      	bcs.n	80023e2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c0:	4b25      	ldr	r3, [pc, #148]	@ (8002458 <HAL_RCC_ClockConfig+0x1ec>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f023 0207 	bic.w	r2, r3, #7
 80023c8:	4923      	ldr	r1, [pc, #140]	@ (8002458 <HAL_RCC_ClockConfig+0x1ec>)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8002390:	4b21      	ldr	r3, [pc, #132]	@ (8002418 <HAL_RCC_ClockConfig+0x1ec>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e036      	b.n	8002410 <HAL_RCC_ClockConfig+0x1e4>
=======
 80023d0:	4b21      	ldr	r3, [pc, #132]	@ (8002458 <HAL_RCC_ClockConfig+0x1ec>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d001      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e036      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e4>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ae:	4b1b      	ldr	r3, [pc, #108]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4918      	ldr	r1, [pc, #96]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
=======
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d008      	beq.n	8002400 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ee:	4b1b      	ldr	r3, [pc, #108]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	4918      	ldr	r1, [pc, #96]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023cc:	4b13      	ldr	r3, [pc, #76]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4910      	ldr	r1, [pc, #64]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
=======
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
 8002408:	2b00      	cmp	r3, #0
 800240a:	d009      	beq.n	8002420 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800240c:	4b13      	ldr	r3, [pc, #76]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	00db      	lsls	r3, r3, #3
 800241a:	4910      	ldr	r1, [pc, #64]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 800241c:	4313      	orrs	r3, r2
 800241e:	608b      	str	r3, [r1, #8]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 80023e0:	f000 f824 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	490b      	ldr	r1, [pc, #44]	@ (8002420 <HAL_RCC_ClockConfig+0x1f4>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
 80023fc:	4a09      	ldr	r2, [pc, #36]	@ (8002424 <HAL_RCC_ClockConfig+0x1f8>)
 80023fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002400:	4b09      	ldr	r3, [pc, #36]	@ (8002428 <HAL_RCC_ClockConfig+0x1fc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe feed 	bl	80011e4 <HAL_InitTick>
 800240a:	4603      	mov	r3, r0
 800240c:	72fb      	strb	r3, [r7, #11]

  return status;
 800240e:	7afb      	ldrb	r3, [r7, #11]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
 8002420:	08007d4c 	.word	0x08007d4c
 8002424:	2000003c 	.word	0x2000003c
 8002428:	20000040 	.word	0x20000040

0800242c <HAL_RCC_GetSysClockFreq>:
=======
 8002420:	f000 f824 	bl	800246c <HAL_RCC_GetSysClockFreq>
 8002424:	4602      	mov	r2, r0
 8002426:	4b0d      	ldr	r3, [pc, #52]	@ (800245c <HAL_RCC_ClockConfig+0x1f0>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	091b      	lsrs	r3, r3, #4
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	490b      	ldr	r1, [pc, #44]	@ (8002460 <HAL_RCC_ClockConfig+0x1f4>)
 8002432:	5ccb      	ldrb	r3, [r1, r3]
 8002434:	f003 031f 	and.w	r3, r3, #31
 8002438:	fa22 f303 	lsr.w	r3, r2, r3
 800243c:	4a09      	ldr	r2, [pc, #36]	@ (8002464 <HAL_RCC_ClockConfig+0x1f8>)
 800243e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002440:	4b09      	ldr	r3, [pc, #36]	@ (8002468 <HAL_RCC_ClockConfig+0x1fc>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fee7 	bl	8001218 <HAL_InitTick>
 800244a:	4603      	mov	r3, r0
 800244c:	72fb      	strb	r3, [r7, #11]

  return status;
 800244e:	7afb      	ldrb	r3, [r7, #11]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3710      	adds	r7, #16
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40022000 	.word	0x40022000
 800245c:	40021000 	.word	0x40021000
 8002460:	080054bc 	.word	0x080054bc
 8002464:	20000000 	.word	0x20000000
 8002468:	20000004 	.word	0x20000004

0800246c <HAL_RCC_GetSysClockFreq>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 800242c:	b480      	push	{r7}
 800242e:	b089      	sub	sp, #36	@ 0x24
 8002430:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	2300      	movs	r3, #0
 8002438:	61bb      	str	r3, [r7, #24]
=======
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	@ 0x24
 8002470:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002472:	2300      	movs	r3, #0
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 800243a:	4b3e      	ldr	r3, [pc, #248]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002444:	4b3b      	ldr	r3, [pc, #236]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x34>
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	2b0c      	cmp	r3, #12
 8002458:	d121      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d11e      	bne.n	800249e <HAL_RCC_GetSysClockFreq+0x72>
=======
 800247a:	4b3e      	ldr	r3, [pc, #248]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x108>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002484:	4b3b      	ldr	r3, [pc, #236]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x108>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	2b0c      	cmp	r3, #12
 8002498:	d121      	bne.n	80024de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b01      	cmp	r3, #1
 800249e:	d11e      	bne.n	80024de <HAL_RCC_GetSysClockFreq+0x72>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
<<<<<<< HEAD
 8002460:	4b34      	ldr	r3, [pc, #208]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800246c:	4b31      	ldr	r3, [pc, #196]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800246e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002472:	0a1b      	lsrs	r3, r3, #8
 8002474:	f003 030f 	and.w	r3, r3, #15
 8002478:	61fb      	str	r3, [r7, #28]
 800247a:	e005      	b.n	8002488 <HAL_RCC_GetSysClockFreq+0x5c>
=======
 80024a0:	4b34      	ldr	r3, [pc, #208]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0308 	and.w	r3, r3, #8
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d107      	bne.n	80024bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024ac:	4b31      	ldr	r3, [pc, #196]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80024b2:	0a1b      	lsrs	r3, r3, #8
 80024b4:	f003 030f 	and.w	r3, r3, #15
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	e005      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x5c>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
<<<<<<< HEAD
 800247c:	4b2d      	ldr	r3, [pc, #180]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002488:	4a2b      	ldr	r2, [pc, #172]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x10c>)
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002490:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800249c:	e00a      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d102      	bne.n	80024aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024a4:	4b25      	ldr	r3, [pc, #148]	@ (800253c <HAL_RCC_GetSysClockFreq+0x110>)
 80024a6:	61bb      	str	r3, [r7, #24]
 80024a8:	e004      	b.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	2b08      	cmp	r3, #8
 80024ae:	d101      	bne.n	80024b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b0:	4b23      	ldr	r3, [pc, #140]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x114>)
 80024b2:	61bb      	str	r3, [r7, #24]
=======
 80024bc:	4b2d      	ldr	r3, [pc, #180]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x108>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	091b      	lsrs	r3, r3, #4
 80024c2:	f003 030f 	and.w	r3, r3, #15
 80024c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10d      	bne.n	80024f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024dc:	e00a      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	2b04      	cmp	r3, #4
 80024e2:	d102      	bne.n	80024ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024e4:	4b25      	ldr	r3, [pc, #148]	@ (800257c <HAL_RCC_GetSysClockFreq+0x110>)
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	e004      	b.n	80024f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024f0:	4b23      	ldr	r3, [pc, #140]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x114>)
 80024f2:	61bb      	str	r3, [r7, #24]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
<<<<<<< HEAD
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d134      	bne.n	8002524 <HAL_RCC_GetSysClockFreq+0xf8>
=======
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b0c      	cmp	r3, #12
 80024f8:	d134      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0xf8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
<<<<<<< HEAD
 80024ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d003      	beq.n	80024d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	2b03      	cmp	r3, #3
 80024ce:	d003      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0xac>
 80024d0:	e005      	b.n	80024de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024d2:	4b1a      	ldr	r3, [pc, #104]	@ (800253c <HAL_RCC_GetSysClockFreq+0x110>)
 80024d4:	617b      	str	r3, [r7, #20]
      break;
 80024d6:	e005      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024d8:	4b19      	ldr	r3, [pc, #100]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x114>)
 80024da:	617b      	str	r3, [r7, #20]
      break;
 80024dc:	e002      	b.n	80024e4 <HAL_RCC_GetSysClockFreq+0xb8>
=======
 80024fa:	4b1e      	ldr	r3, [pc, #120]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x108>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d003      	beq.n	8002512 <HAL_RCC_GetSysClockFreq+0xa6>
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b03      	cmp	r3, #3
 800250e:	d003      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0xac>
 8002510:	e005      	b.n	800251e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002512:	4b1a      	ldr	r3, [pc, #104]	@ (800257c <HAL_RCC_GetSysClockFreq+0x110>)
 8002514:	617b      	str	r3, [r7, #20]
      break;
 8002516:	e005      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002518:	4b19      	ldr	r3, [pc, #100]	@ (8002580 <HAL_RCC_GetSysClockFreq+0x114>)
 800251a:	617b      	str	r3, [r7, #20]
      break;
 800251c:	e002      	b.n	8002524 <HAL_RCC_GetSysClockFreq+0xb8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
<<<<<<< HEAD
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	617b      	str	r3, [r7, #20]
      break;
 80024e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	3301      	adds	r3, #1
 80024f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024f2:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	fb03 f202 	mul.w	r2, r3, r2
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	fbb2 f3f3 	udiv	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800250a:	4b0a      	ldr	r3, [pc, #40]	@ (8002534 <HAL_RCC_GetSysClockFreq+0x108>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	0e5b      	lsrs	r3, r3, #25
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	3301      	adds	r3, #1
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002522:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002524:	69bb      	ldr	r3, [r7, #24]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3724      	adds	r7, #36	@ 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40021000 	.word	0x40021000
 8002538:	08007d64 	.word	0x08007d64
 800253c:	00f42400 	.word	0x00f42400
 8002540:	007a1200 	.word	0x007a1200

08002544 <HAL_RCC_GetHCLKFreq>:
=======
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	617b      	str	r3, [r7, #20]
      break;
 8002522:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002524:	4b13      	ldr	r3, [pc, #76]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x108>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	3301      	adds	r3, #1
 8002530:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002532:	4b10      	ldr	r3, [pc, #64]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x108>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800253c:	697a      	ldr	r2, [r7, #20]
 800253e:	fb03 f202 	mul.w	r2, r3, r2
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	fbb2 f3f3 	udiv	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800254a:	4b0a      	ldr	r3, [pc, #40]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x108>)
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	0e5b      	lsrs	r3, r3, #25
 8002550:	f003 0303 	and.w	r3, r3, #3
 8002554:	3301      	adds	r3, #1
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800255a:	697a      	ldr	r2, [r7, #20]
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002562:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002564:	69bb      	ldr	r3, [r7, #24]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3724      	adds	r7, #36	@ 0x24
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000
 8002578:	080054d4 	.word	0x080054d4
 800257c:	00f42400 	.word	0x00f42400
 8002580:	007a1200 	.word	0x007a1200

08002584 <HAL_RCC_GetHCLKFreq>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002548:	4b03      	ldr	r3, [pc, #12]	@ (8002558 <HAL_RCC_GetHCLKFreq+0x14>)
 800254a:	681b      	ldr	r3, [r3, #0]
}
 800254c:	4618      	mov	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	2000003c 	.word	0x2000003c

0800255c <HAL_RCC_GetPCLK1Freq>:
=======
 8002584:	b480      	push	{r7}
 8002586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002588:	4b03      	ldr	r3, [pc, #12]	@ (8002598 <HAL_RCC_GetHCLKFreq+0x14>)
 800258a:	681b      	ldr	r3, [r3, #0]
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	20000000 	.word	0x20000000

0800259c <HAL_RCC_GetPCLK1Freq>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002560:	f7ff fff0 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b06      	ldr	r3, [pc, #24]	@ (8002580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	0a1b      	lsrs	r3, r3, #8
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	4904      	ldr	r1, [pc, #16]	@ (8002584 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800257c:	4618      	mov	r0, r3
 800257e:	bd80      	pop	{r7, pc}
 8002580:	40021000 	.word	0x40021000
 8002584:	08007d5c 	.word	0x08007d5c

08002588 <HAL_RCC_GetPCLK2Freq>:
=======
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025a0:	f7ff fff0 	bl	8002584 <HAL_RCC_GetHCLKFreq>
 80025a4:	4602      	mov	r2, r0
 80025a6:	4b06      	ldr	r3, [pc, #24]	@ (80025c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	0a1b      	lsrs	r3, r3, #8
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	4904      	ldr	r1, [pc, #16]	@ (80025c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025b2:	5ccb      	ldrb	r3, [r1, r3]
 80025b4:	f003 031f 	and.w	r3, r3, #31
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025bc:	4618      	mov	r0, r3
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	40021000 	.word	0x40021000
 80025c4:	080054cc 	.word	0x080054cc

080025c8 <HAL_RCC_GetPCLK2Freq>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800258c:	f7ff ffda 	bl	8002544 <HAL_RCC_GetHCLKFreq>
 8002590:	4602      	mov	r2, r0
 8002592:	4b06      	ldr	r3, [pc, #24]	@ (80025ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	0adb      	lsrs	r3, r3, #11
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	4904      	ldr	r1, [pc, #16]	@ (80025b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800259e:	5ccb      	ldrb	r3, [r1, r3]
 80025a0:	f003 031f 	and.w	r3, r3, #31
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40021000 	.word	0x40021000
 80025b0:	08007d5c 	.word	0x08007d5c

080025b4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	220f      	movs	r2, #15
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80025c4:	4b12      	ldr	r3, [pc, #72]	@ (8002610 <HAL_RCC_GetClockConfig+0x5c>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 0203 	and.w	r2, r3, #3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80025d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002610 <HAL_RCC_GetClockConfig+0x5c>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80025dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002610 <HAL_RCC_GetClockConfig+0x5c>)
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80025e8:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <HAL_RCC_GetClockConfig+0x5c>)
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	08db      	lsrs	r3, r3, #3
 80025ee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80025f6:	4b07      	ldr	r3, [pc, #28]	@ (8002614 <HAL_RCC_GetClockConfig+0x60>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0207 	and.w	r2, r3, #7
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	601a      	str	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	40021000 	.word	0x40021000
 8002614:	40022000 	.word	0x40022000

08002618 <RCC_SetFlashLatencyFromMSIRange>:
=======
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025cc:	f7ff ffda 	bl	8002584 <HAL_RCC_GetHCLKFreq>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	0adb      	lsrs	r3, r3, #11
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	4904      	ldr	r1, [pc, #16]	@ (80025f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025de:	5ccb      	ldrb	r3, [r1, r3]
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000
 80025f0:	080054cc 	.word	0x080054cc

080025f4 <RCC_SetFlashLatencyFromMSIRange>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
<<<<<<< HEAD
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002620:	2300      	movs	r3, #0
 8002622:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002624:	4b2a      	ldr	r3, [pc, #168]	@ (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002630:	f7ff f9bc 	bl	80019ac <HAL_PWREx_GetVoltageRange>
 8002634:	6178      	str	r0, [r7, #20]
 8002636:	e014      	b.n	8002662 <RCC_SetFlashLatencyFromMSIRange+0x4a>
=======
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b086      	sub	sp, #24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025fc:	2300      	movs	r3, #0
 80025fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002600:	4b2a      	ldr	r3, [pc, #168]	@ (80026ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002604:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800260c:	f7ff f9ee 	bl	80019ec <HAL_PWREx_GetVoltageRange>
 8002610:	6178      	str	r0, [r7, #20]
 8002612:	e014      	b.n	800263e <RCC_SetFlashLatencyFromMSIRange+0x4a>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 8002638:	4b25      	ldr	r3, [pc, #148]	@ (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800263c:	4a24      	ldr	r2, [pc, #144]	@ (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800263e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002642:	6593      	str	r3, [r2, #88]	@ 0x58
 8002644:	4b22      	ldr	r3, [pc, #136]	@ (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264c:	60fb      	str	r3, [r7, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002650:	f7ff f9ac 	bl	80019ac <HAL_PWREx_GetVoltageRange>
 8002654:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002656:	4b1e      	ldr	r3, [pc, #120]	@ (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002658:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800265a:	4a1d      	ldr	r2, [pc, #116]	@ (80026d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002660:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002668:	d10b      	bne.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b80      	cmp	r3, #128	@ 0x80
 800266e:	d919      	bls.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2ba0      	cmp	r3, #160	@ 0xa0
 8002674:	d902      	bls.n	800267c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002676:	2302      	movs	r3, #2
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	e013      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8002614:	4b25      	ldr	r3, [pc, #148]	@ (80026ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002618:	4a24      	ldr	r2, [pc, #144]	@ (80026ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800261e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002620:	4b22      	ldr	r3, [pc, #136]	@ (80026ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002624:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002628:	60fb      	str	r3, [r7, #12]
 800262a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800262c:	f7ff f9de 	bl	80019ec <HAL_PWREx_GetVoltageRange>
 8002630:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002632:	4b1e      	ldr	r3, [pc, #120]	@ (80026ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002636:	4a1d      	ldr	r2, [pc, #116]	@ (80026ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002638:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800263c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002644:	d10b      	bne.n	800265e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b80      	cmp	r3, #128	@ 0x80
 800264a:	d919      	bls.n	8002680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2ba0      	cmp	r3, #160	@ 0xa0
 8002650:	d902      	bls.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002652:	2302      	movs	r3, #2
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	e013      	b.n	8002680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
<<<<<<< HEAD
 800267c:	2301      	movs	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	e010      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 8002658:	2301      	movs	r3, #1
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	e010      	b.n	8002680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
<<<<<<< HEAD
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b80      	cmp	r3, #128	@ 0x80
 8002686:	d902      	bls.n	800268e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002688:	2303      	movs	r3, #3
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	e00a      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
=======
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b80      	cmp	r3, #128	@ 0x80
 8002662:	d902      	bls.n	800266a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002664:	2303      	movs	r3, #3
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	e00a      	b.n	8002680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
<<<<<<< HEAD
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b80      	cmp	r3, #128	@ 0x80
 8002692:	d102      	bne.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002694:	2302      	movs	r3, #2
 8002696:	613b      	str	r3, [r7, #16]
 8002698:	e004      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2b70      	cmp	r3, #112	@ 0x70
 800269e:	d101      	bne.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026a0:	2301      	movs	r3, #1
 80026a2:	613b      	str	r3, [r7, #16]
=======
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b80      	cmp	r3, #128	@ 0x80
 800266e:	d102      	bne.n	8002676 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002670:	2302      	movs	r3, #2
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	e004      	b.n	8002680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2b70      	cmp	r3, #112	@ 0x70
 800267a:	d101      	bne.n	8002680 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800267c:	2301      	movs	r3, #1
 800267e:	613b      	str	r3, [r7, #16]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
<<<<<<< HEAD
 80026a4:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f023 0207 	bic.w	r2, r3, #7
 80026ac:	4909      	ldr	r1, [pc, #36]	@ (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	600b      	str	r3, [r1, #0]
=======
 8002680:	4b0b      	ldr	r3, [pc, #44]	@ (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f023 0207 	bic.w	r2, r3, #7
 8002688:	4909      	ldr	r1, [pc, #36]	@ (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	600b      	str	r3, [r1, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
<<<<<<< HEAD
 80026b4:	4b07      	ldr	r3, [pc, #28]	@ (80026d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	693a      	ldr	r2, [r7, #16]
 80026be:	429a      	cmp	r2, r3
 80026c0:	d001      	beq.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3718      	adds	r7, #24
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40022000 	.word	0x40022000

080026d8 <HAL_RCCEx_PeriphCLKConfig>:
=======
 8002690:	4b07      	ldr	r3, [pc, #28]	@ (80026b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0307 	and.w	r3, r3, #7
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	429a      	cmp	r2, r3
 800269c:	d001      	beq.n	80026a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e000      	b.n	80026a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3718      	adds	r7, #24
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40021000 	.word	0x40021000
 80026b0:	40022000 	.word	0x40022000

080026b4 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026e0:	2300      	movs	r3, #0
 80026e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026e4:	2300      	movs	r3, #0
 80026e6:	74bb      	strb	r3, [r7, #18]
=======
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026bc:	2300      	movs	r3, #0
 80026be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026c0:	2300      	movs	r3, #0
 80026c2:	74bb      	strb	r3, [r7, #18]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
<<<<<<< HEAD
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d041      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xa0>
=======
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d041      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xa0>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
<<<<<<< HEAD
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026fc:	d02a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002702:	d824      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002704:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002708:	d008      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800270a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800270e:	d81e      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002714:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002718:	d010      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800271a:	e018      	b.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x76>
=======
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026d8:	d02a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026da:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80026de:	d824      	bhi.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026e4:	d008      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80026ea:	d81e      	bhi.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026f4:	d010      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026f6:	e018      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x76>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
<<<<<<< HEAD
 800271c:	4b86      	ldr	r3, [pc, #536]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a85      	ldr	r2, [pc, #532]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002722:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002726:	60d3      	str	r3, [r2, #12]
=======
 80026f8:	4b86      	ldr	r3, [pc, #536]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a85      	ldr	r2, [pc, #532]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002702:	60d3      	str	r3, [r2, #12]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
<<<<<<< HEAD
 8002728:	e015      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 8002704:	e015      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3304      	adds	r3, #4
 800272e:	2100      	movs	r1, #0
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fabb 	bl	8002cac <RCCEx_PLLSAI1_Config>
 8002736:	4603      	mov	r3, r0
 8002738:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800273a:	e00c      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3304      	adds	r3, #4
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fabb 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002712:	4603      	mov	r3, r0
 8002714:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002716:	e00c      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3320      	adds	r3, #32
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fba6 	bl	8002e94 <RCCEx_PLLSAI2_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800274c:	e003      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
=======
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3320      	adds	r3, #32
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fba6 	bl	8002e70 <RCCEx_PLLSAI2_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002728:	e003      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x7e>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< HEAD
 800274e:	2301      	movs	r3, #1
 8002750:	74fb      	strb	r3, [r7, #19]
      break;
 8002752:	e000      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800275c:	4b76      	ldr	r3, [pc, #472]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002762:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800276a:	4973      	ldr	r1, [pc, #460]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002772:	e001      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0xa0>
=======
 800272a:	2301      	movs	r3, #1
 800272c:	74fb      	strb	r3, [r7, #19]
      break;
 800272e:	e000      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10b      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002738:	4b76      	ldr	r3, [pc, #472]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002746:	4973      	ldr	r1, [pc, #460]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800274e:	e001      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0xa0>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	74bb      	strb	r3, [r7, #18]
=======
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	74bb      	strb	r3, [r7, #18]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
<<<<<<< HEAD
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d041      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>
=======
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d041      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
<<<<<<< HEAD
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002788:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800278c:	d02a      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800278e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002792:	d824      	bhi.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002794:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002798:	d008      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800279a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800279e:	d81e      	bhi.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027a8:	d010      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027aa:	e018      	b.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x106>
=======
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002764:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002768:	d02a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800276a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800276e:	d824      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002770:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002774:	d008      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002776:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800277a:	d81e      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002784:	d010      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002786:	e018      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x106>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
<<<<<<< HEAD
 80027ac:	4b62      	ldr	r3, [pc, #392]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4a61      	ldr	r2, [pc, #388]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027b8:	e015      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
=======
 8002788:	4b62      	ldr	r3, [pc, #392]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	4a61      	ldr	r2, [pc, #388]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002792:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002794:	e015      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	3304      	adds	r3, #4
 80027be:	2100      	movs	r1, #0
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fa73 	bl	8002cac <RCCEx_PLLSAI1_Config>
 80027c6:	4603      	mov	r3, r0
 80027c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027ca:	e00c      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
=======
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3304      	adds	r3, #4
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fa73 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 80027a2:	4603      	mov	r3, r0
 80027a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027a6:	e00c      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3320      	adds	r3, #32
 80027d0:	2100      	movs	r1, #0
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fb5e 	bl	8002e94 <RCCEx_PLLSAI2_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027dc:	e003      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
=======
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3320      	adds	r3, #32
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 fb5e 	bl	8002e70 <RCCEx_PLLSAI2_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027b8:	e003      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
<<<<<<< HEAD
 80027de:	2301      	movs	r3, #1
 80027e0:	74fb      	strb	r3, [r7, #19]
      break;
 80027e2:	e000      	b.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027e6:	7cfb      	ldrb	r3, [r7, #19]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027ec:	4b52      	ldr	r3, [pc, #328]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027fa:	494f      	ldr	r1, [pc, #316]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002802:	e001      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x130>
=======
 80027ba:	2301      	movs	r3, #1
 80027bc:	74fb      	strb	r3, [r7, #19]
      break;
 80027be:	e000      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027c8:	4b52      	ldr	r3, [pc, #328]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80027d6:	494f      	ldr	r1, [pc, #316]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80027de:	e001      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	74bb      	strb	r3, [r7, #18]
=======
 80027e0:	7cfb      	ldrb	r3, [r7, #19]
 80027e2:	74bb      	strb	r3, [r7, #18]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80a0 	beq.w	8002956 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	747b      	strb	r3, [r7, #17]
=======
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 80a0 	beq.w	8002932 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027f2:	2300      	movs	r3, #0
 80027f4:	747b      	strb	r3, [r7, #17]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
<<<<<<< HEAD
 800281a:	4b47      	ldr	r3, [pc, #284]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800282a:	2300      	movs	r3, #0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00d      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002830:	4b41      	ldr	r3, [pc, #260]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002832:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002834:	4a40      	ldr	r2, [pc, #256]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002836:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800283a:	6593      	str	r3, [r2, #88]	@ 0x58
 800283c:	4b3e      	ldr	r3, [pc, #248]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800283e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002840:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002848:	2301      	movs	r3, #1
 800284a:	747b      	strb	r3, [r7, #17]
=======
 80027f6:	4b47      	ldr	r3, [pc, #284]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002802:	2301      	movs	r3, #1
 8002804:	e000      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002806:	2300      	movs	r3, #0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00d      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280c:	4b41      	ldr	r3, [pc, #260]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002810:	4a40      	ldr	r2, [pc, #256]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002816:	6593      	str	r3, [r2, #88]	@ 0x58
 8002818:	4b3e      	ldr	r3, [pc, #248]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002820:	60bb      	str	r3, [r7, #8]
 8002822:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002824:	2301      	movs	r3, #1
 8002826:	747b      	strb	r3, [r7, #17]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< HEAD
 800284c:	4b3b      	ldr	r3, [pc, #236]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3a      	ldr	r2, [pc, #232]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002852:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002856:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002858:	f7fe fdd4 	bl	8001404 <HAL_GetTick>
 800285c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800285e:	e009      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002860:	f7fe fdd0 	bl	8001404 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d902      	bls.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	74fb      	strb	r3, [r7, #19]
        break;
 8002872:	e005      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002874:	4b31      	ldr	r3, [pc, #196]	@ (800293c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ef      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x188>
=======
 8002828:	4b3b      	ldr	r3, [pc, #236]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a3a      	ldr	r2, [pc, #232]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800282e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002832:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002834:	f7fe fd40 	bl	80012b8 <HAL_GetTick>
 8002838:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800283a:	e009      	b.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800283c:	f7fe fd3c 	bl	80012b8 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d902      	bls.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	74fb      	strb	r3, [r7, #19]
        break;
 800284e:	e005      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002850:	4b31      	ldr	r3, [pc, #196]	@ (8002918 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ef      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x188>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }

    if(ret == HAL_OK)
<<<<<<< HEAD
 8002880:	7cfb      	ldrb	r3, [r7, #19]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d15c      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002886:	4b2c      	ldr	r3, [pc, #176]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002888:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800288c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002890:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01f      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d019      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028a4:	4b24      	ldr	r3, [pc, #144]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b0:	4b21      	ldr	r3, [pc, #132]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028b6:	4a20      	ldr	r2, [pc, #128]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028c0:	4b1d      	ldr	r3, [pc, #116]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028c6:	4a1c      	ldr	r2, [pc, #112]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028d0:	4a19      	ldr	r2, [pc, #100]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
=======
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d15c      	bne.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002862:	4b2c      	ldr	r3, [pc, #176]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002868:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800286c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01f      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800287a:	697a      	ldr	r2, [r7, #20]
 800287c:	429a      	cmp	r2, r3
 800287e:	d019      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002880:	4b24      	ldr	r3, [pc, #144]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002882:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002886:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800288a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800288c:	4b21      	ldr	r3, [pc, #132]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002892:	4a20      	ldr	r2, [pc, #128]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002898:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800289c:	4b1d      	ldr	r3, [pc, #116]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028ac:	4a19      	ldr	r2, [pc, #100]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
<<<<<<< HEAD
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d016      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fd8f 	bl	8001404 <HAL_GetTick>
 80028e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e8:	e00b      	b.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ea:	f7fe fd8b 	bl	8001404 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d902      	bls.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002900:	e006      	b.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002902:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0ec      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x212>
=======
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d016      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028be:	f7fe fcfb 	bl	80012b8 <HAL_GetTick>
 80028c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c4:	e00b      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c6:	f7fe fcf7 	bl	80012b8 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d902      	bls.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028d8:	2303      	movs	r3, #3
 80028da:	74fb      	strb	r3, [r7, #19]
            break;
 80028dc:	e006      	b.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028de:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e4:	f003 0302 	and.w	r3, r3, #2
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d0ec      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
          }
        }
      }

      if(ret == HAL_OK)
<<<<<<< HEAD
 8002910:	7cfb      	ldrb	r3, [r7, #19]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002916:	4b08      	ldr	r3, [pc, #32]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002918:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800291c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002926:	4904      	ldr	r1, [pc, #16]	@ (8002938 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800292e:	e009      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x26c>
=======
 80028ec:	7cfb      	ldrb	r3, [r7, #19]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10c      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028f2:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002902:	4904      	ldr	r1, [pc, #16]	@ (8002914 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800290a:	e009      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x26c>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< HEAD
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	74bb      	strb	r3, [r7, #18]
 8002934:	e006      	b.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002936:	bf00      	nop
 8002938:	40021000 	.word	0x40021000
 800293c:	40007000 	.word	0x40007000
=======
 800290c:	7cfb      	ldrb	r3, [r7, #19]
 800290e:	74bb      	strb	r3, [r7, #18]
 8002910:	e006      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000
 8002918:	40007000 	.word	0x40007000
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8002940:	7cfb      	ldrb	r3, [r7, #19]
 8002942:	74bb      	strb	r3, [r7, #18]
=======
 800291c:	7cfb      	ldrb	r3, [r7, #19]
 800291e:	74bb      	strb	r3, [r7, #18]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8002944:	7c7b      	ldrb	r3, [r7, #17]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d105      	bne.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294a:	4b9e      	ldr	r3, [pc, #632]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800294e:	4a9d      	ldr	r2, [pc, #628]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002950:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002954:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 8002920:	7c7b      	ldrb	r3, [r7, #17]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d105      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002926:	4b9e      	ldr	r3, [pc, #632]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800292a:	4a9d      	ldr	r2, [pc, #628]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002930:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
<<<<<<< HEAD
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
=======
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
<<<<<<< HEAD
 8002962:	4b98      	ldr	r3, [pc, #608]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002968:	f023 0203 	bic.w	r2, r3, #3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002970:	4994      	ldr	r1, [pc, #592]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 800293e:	4b98      	ldr	r3, [pc, #608]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002944:	f023 0203 	bic.w	r2, r3, #3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	4994      	ldr	r1, [pc, #592]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
<<<<<<< HEAD
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0302 	and.w	r3, r3, #2
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00a      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
=======
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
<<<<<<< HEAD
 8002984:	4b8f      	ldr	r3, [pc, #572]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800298a:	f023 020c 	bic.w	r2, r3, #12
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002992:	498c      	ldr	r1, [pc, #560]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8002960:	4b8f      	ldr	r3, [pc, #572]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002966:	f023 020c 	bic.w	r2, r3, #12
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296e:	498c      	ldr	r1, [pc, #560]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
<<<<<<< HEAD
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0304 	and.w	r3, r3, #4
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d00a      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
=======
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
<<<<<<< HEAD
 80029a6:	4b87      	ldr	r3, [pc, #540]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b4:	4983      	ldr	r1, [pc, #524]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8002982:	4b87      	ldr	r3, [pc, #540]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002988:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	4983      	ldr	r1, [pc, #524]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
<<<<<<< HEAD
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0308 	and.w	r3, r3, #8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x306>
=======
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00a      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x306>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
<<<<<<< HEAD
 80029c8:	4b7e      	ldr	r3, [pc, #504]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d6:	497b      	ldr	r1, [pc, #492]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80029a4:	4b7e      	ldr	r3, [pc, #504]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b2:	497b      	ldr	r1, [pc, #492]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
<<<<<<< HEAD
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0310 	and.w	r3, r3, #16
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00a      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x328>
=======
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0310 	and.w	r3, r3, #16
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00a      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x328>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
<<<<<<< HEAD
 80029ea:	4b76      	ldr	r3, [pc, #472]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029f8:	4972      	ldr	r1, [pc, #456]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fa:	4313      	orrs	r3, r2
 80029fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80029c6:	4b76      	ldr	r3, [pc, #472]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029d4:	4972      	ldr	r1, [pc, #456]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0320 	and.w	r3, r3, #32
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
=======
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00a      	beq.n	80029fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
<<<<<<< HEAD
 8002a0c:	4b6d      	ldr	r3, [pc, #436]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a1a:	496a      	ldr	r1, [pc, #424]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80029e8:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029f6:	496a      	ldr	r1, [pc, #424]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
<<<<<<< HEAD
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00a      	beq.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a2e:	4b65      	ldr	r3, [pc, #404]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a3c:	4961      	ldr	r1, [pc, #388]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d00a      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a0a:	4b65      	ldr	r3, [pc, #404]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a10:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a18:	4961      	ldr	r1, [pc, #388]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
<<<<<<< HEAD
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00a      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a50:	4b5c      	ldr	r3, [pc, #368]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a5e:	4959      	ldr	r1, [pc, #356]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00a      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a2c:	4b5c      	ldr	r3, [pc, #368]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a32:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a3a:	4959      	ldr	r1, [pc, #356]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
<<<<<<< HEAD
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d00a      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
=======
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00a      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
<<<<<<< HEAD
 8002a72:	4b54      	ldr	r3, [pc, #336]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a78:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a80:	4950      	ldr	r1, [pc, #320]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8002a4e:	4b54      	ldr	r3, [pc, #336]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a5c:	4950      	ldr	r1, [pc, #320]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
<<<<<<< HEAD
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
=======
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
<<<<<<< HEAD
 8002a94:	4b4b      	ldr	r3, [pc, #300]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa2:	4948      	ldr	r1, [pc, #288]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8002a70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a7e:	4948      	ldr	r1, [pc, #288]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
<<<<<<< HEAD
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d00a      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
=======
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
<<<<<<< HEAD
 8002ab6:	4b43      	ldr	r3, [pc, #268]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002abc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac4:	493f      	ldr	r1, [pc, #252]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8002a92:	4b43      	ldr	r3, [pc, #268]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa0:	493f      	ldr	r1, [pc, #252]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
<<<<<<< HEAD
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d028      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ad8:	4b3a      	ldr	r3, [pc, #232]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ade:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ae6:	4937      	ldr	r1, [pc, #220]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002af2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002af6:	d106      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002af8:	4b32      	ldr	r3, [pc, #200]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	4a31      	ldr	r2, [pc, #196]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b02:	60d3      	str	r3, [r2, #12]
 8002b04:	e011      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x452>
=======
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d028      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ab4:	4b3a      	ldr	r3, [pc, #232]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002aba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ac2:	4937      	ldr	r1, [pc, #220]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ace:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad4:	4b32      	ldr	r3, [pc, #200]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	4a31      	ldr	r2, [pc, #196]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ada:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ade:	60d3      	str	r3, [r2, #12]
 8002ae0:	e011      	b.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x452>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
<<<<<<< HEAD
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b0a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b0e:	d10c      	bne.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3304      	adds	r3, #4
 8002b14:	2101      	movs	r1, #1
 8002b16:	4618      	mov	r0, r3
 8002b18:	f000 f8c8 	bl	8002cac <RCCEx_PLLSAI1_Config>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002b20:	7cfb      	ldrb	r3, [r7, #19]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b26:	7cfb      	ldrb	r3, [r7, #19]
 8002b28:	74bb      	strb	r3, [r7, #18]
=======
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ae6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	3304      	adds	r3, #4
 8002af0:	2101      	movs	r1, #1
 8002af2:	4618      	mov	r0, r3
 8002af4:	f000 f8c8 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002af8:	4603      	mov	r3, r0
 8002afa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002b02:	7cfb      	ldrb	r3, [r7, #19]
 8002b04:	74bb      	strb	r3, [r7, #18]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
<<<<<<< HEAD
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d028      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b36:	4b23      	ldr	r3, [pc, #140]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b3c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b44:	491f      	ldr	r1, [pc, #124]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b50:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b54:	d106      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b56:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b60:	60d3      	str	r3, [r2, #12]
 8002b62:	e011      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
=======
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d028      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002b12:	4b23      	ldr	r3, [pc, #140]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b18:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b20:	491f      	ldr	r1, [pc, #124]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b30:	d106      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b32:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	4a1a      	ldr	r2, [pc, #104]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b3c:	60d3      	str	r3, [r2, #12]
 8002b3e:	e011      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
<<<<<<< HEAD
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b68:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b6c:	d10c      	bne.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	3304      	adds	r3, #4
 8002b72:	2101      	movs	r1, #1
 8002b74:	4618      	mov	r0, r3
 8002b76:	f000 f899 	bl	8002cac <RCCEx_PLLSAI1_Config>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b7e:	7cfb      	ldrb	r3, [r7, #19]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	74bb      	strb	r3, [r7, #18]
=======
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b48:	d10c      	bne.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	2101      	movs	r1, #1
 8002b50:	4618      	mov	r0, r3
 8002b52:	f000 f899 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002b56:	4603      	mov	r3, r0
 8002b58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b5a:	7cfb      	ldrb	r3, [r7, #19]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b60:	7cfb      	ldrb	r3, [r7, #19]
 8002b62:	74bb      	strb	r3, [r7, #18]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
<<<<<<< HEAD
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d02b      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b9a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba2:	4908      	ldr	r1, [pc, #32]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002bb2:	d109      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4a02      	ldr	r2, [pc, #8]	@ (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002bbe:	60d3      	str	r3, [r2, #12]
 8002bc0:	e014      	b.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002bc2:	bf00      	nop
 8002bc4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bcc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bd0:	d10c      	bne.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 f867 	bl	8002cac <RCCEx_PLLSAI1_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002be2:	7cfb      	ldrb	r3, [r7, #19]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002be8:	7cfb      	ldrb	r3, [r7, #19]
 8002bea:	74bb      	strb	r3, [r7, #18]
=======
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d02b      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b7e:	4908      	ldr	r1, [pc, #32]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002b8e:	d109      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b90:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a02      	ldr	r2, [pc, #8]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b9a:	60d3      	str	r3, [r2, #12]
 8002b9c:	e014      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b9e:	bf00      	nop
 8002ba0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3304      	adds	r3, #4
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f000 f867 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bbe:	7cfb      	ldrb	r3, [r7, #19]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d001      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bc4:	7cfb      	ldrb	r3, [r7, #19]
 8002bc6:	74bb      	strb	r3, [r7, #18]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d02f      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
=======
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d02f      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x580>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
<<<<<<< HEAD
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bfe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c06:	4928      	ldr	r1, [pc, #160]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c16:	d10d      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	3304      	adds	r3, #4
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 f844 	bl	8002cac <RCCEx_PLLSAI1_Config>
 8002c24:	4603      	mov	r3, r0
 8002c26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c28:	7cfb      	ldrb	r3, [r7, #19]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d014      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c2e:	7cfb      	ldrb	r3, [r7, #19]
 8002c30:	74bb      	strb	r3, [r7, #18]
 8002c32:	e011      	b.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
=======
 8002bd4:	4b2b      	ldr	r3, [pc, #172]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bda:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002be2:	4928      	ldr	r1, [pc, #160]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bf2:	d10d      	bne.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f844 	bl	8002c88 <RCCEx_PLLSAI1_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c04:	7cfb      	ldrb	r3, [r7, #19]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d014      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c0a:	7cfb      	ldrb	r3, [r7, #19]
 8002c0c:	74bb      	strb	r3, [r7, #18]
 8002c0e:	e011      	b.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x580>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
<<<<<<< HEAD
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c3c:	d10c      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3320      	adds	r3, #32
 8002c42:	2102      	movs	r1, #2
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f925 	bl	8002e94 <RCCEx_PLLSAI2_Config>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c4e:	7cfb      	ldrb	r3, [r7, #19]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c54:	7cfb      	ldrb	r3, [r7, #19]
 8002c56:	74bb      	strb	r3, [r7, #18]
=======
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c18:	d10c      	bne.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	3320      	adds	r3, #32
 8002c1e:	2102      	movs	r1, #2
 8002c20:	4618      	mov	r0, r3
 8002c22:	f000 f925 	bl	8002e70 <RCCEx_PLLSAI2_Config>
 8002c26:	4603      	mov	r3, r0
 8002c28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c2a:	7cfb      	ldrb	r3, [r7, #19]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	74bb      	strb	r3, [r7, #18]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
<<<<<<< HEAD
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
=======
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
<<<<<<< HEAD
 8002c64:	4b10      	ldr	r3, [pc, #64]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c72:	490d      	ldr	r1, [pc, #52]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8002c40:	4b10      	ldr	r3, [pc, #64]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c46:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c4e:	490d      	ldr	r1, [pc, #52]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< HEAD
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00b      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
=======
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00b      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< HEAD
 8002c86:	4b08      	ldr	r3, [pc, #32]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c96:	4904      	ldr	r1, [pc, #16]	@ (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
=======
 8002c62:	4b08      	ldr	r3, [pc, #32]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c72:	4904      	ldr	r1, [pc, #16]	@ (8002c84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
<<<<<<< HEAD
 8002c9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40021000 	.word	0x40021000

08002cac <RCCEx_PLLSAI1_Config>:
=======
 8002c7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3718      	adds	r7, #24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000

08002c88 <RCCEx_PLLSAI1_Config>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
<<<<<<< HEAD
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	73fb      	strb	r3, [r7, #15]
=======
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c92:	2300      	movs	r3, #0
 8002c94:	73fb      	strb	r3, [r7, #15]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 8002cba:	4b75      	ldr	r3, [pc, #468]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d018      	beq.n	8002cf8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002cc6:	4b72      	ldr	r3, [pc, #456]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc8:	68db      	ldr	r3, [r3, #12]
 8002cca:	f003 0203 	and.w	r2, r3, #3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d10d      	bne.n	8002cf2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
       ||
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d009      	beq.n	8002cf2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cde:	4b6c      	ldr	r3, [pc, #432]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	091b      	lsrs	r3, r3, #4
 8002ce4:	f003 0307 	and.w	r3, r3, #7
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
       ||
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d047      	beq.n	8002d82 <RCCEx_PLLSAI1_Config+0xd6>
=======
 8002c96:	4b75      	ldr	r3, [pc, #468]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f003 0303 	and.w	r3, r3, #3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d018      	beq.n	8002cd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002ca2:	4b72      	ldr	r3, [pc, #456]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0203 	and.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d10d      	bne.n	8002cce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002cba:	4b6c      	ldr	r3, [pc, #432]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	091b      	lsrs	r3, r3, #4
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d047      	beq.n	8002d5e <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< HEAD
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	e044      	b.n	8002d82 <RCCEx_PLLSAI1_Config+0xd6>
=======
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
 8002cd2:	e044      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
<<<<<<< HEAD
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d018      	beq.n	8002d32 <RCCEx_PLLSAI1_Config+0x86>
 8002d00:	2b03      	cmp	r3, #3
 8002d02:	d825      	bhi.n	8002d50 <RCCEx_PLLSAI1_Config+0xa4>
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d002      	beq.n	8002d0e <RCCEx_PLLSAI1_Config+0x62>
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d009      	beq.n	8002d20 <RCCEx_PLLSAI1_Config+0x74>
 8002d0c:	e020      	b.n	8002d50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d0e:	4b60      	ldr	r3, [pc, #384]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0302 	and.w	r3, r3, #2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11d      	bne.n	8002d56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1e:	e01a      	b.n	8002d56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d20:	4b5b      	ldr	r3, [pc, #364]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d116      	bne.n	8002d5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d30:	e013      	b.n	8002d5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d32:	4b57      	ldr	r3, [pc, #348]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10f      	bne.n	8002d5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d3e:	4b54      	ldr	r3, [pc, #336]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d109      	bne.n	8002d5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d4e:	e006      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	73fb      	strb	r3, [r7, #15]
      break;
 8002d54:	e004      	b.n	8002d60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d56:	bf00      	nop
 8002d58:	e002      	b.n	8002d60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d5a:	bf00      	nop
 8002d5c:	e000      	b.n	8002d60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d60:	7bfb      	ldrb	r3, [r7, #15]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10d      	bne.n	8002d82 <RCCEx_PLLSAI1_Config+0xd6>
=======
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d018      	beq.n	8002d0e <RCCEx_PLLSAI1_Config+0x86>
 8002cdc:	2b03      	cmp	r3, #3
 8002cde:	d825      	bhi.n	8002d2c <RCCEx_PLLSAI1_Config+0xa4>
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d002      	beq.n	8002cea <RCCEx_PLLSAI1_Config+0x62>
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d009      	beq.n	8002cfc <RCCEx_PLLSAI1_Config+0x74>
 8002ce8:	e020      	b.n	8002d2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cea:	4b60      	ldr	r3, [pc, #384]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d11d      	bne.n	8002d32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cfa:	e01a      	b.n	8002d32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cfc:	4b5b      	ldr	r3, [pc, #364]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d116      	bne.n	8002d36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d0c:	e013      	b.n	8002d36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d0e:	4b57      	ldr	r3, [pc, #348]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d10f      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d1a:	4b54      	ldr	r3, [pc, #336]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d109      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d2a:	e006      	b.n	8002d3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d30:	e004      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d32:	bf00      	nop
 8002d34:	e002      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d36:	bf00      	nop
 8002d38:	e000      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <RCCEx_PLLSAI1_Config+0xd6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
<<<<<<< HEAD
 8002d66:	4b4a      	ldr	r3, [pc, #296]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6819      	ldr	r1, [r3, #0]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	430b      	orrs	r3, r1
 8002d7c:	4944      	ldr	r1, [pc, #272]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	60cb      	str	r3, [r1, #12]
=======
 8002d42:	4b4a      	ldr	r3, [pc, #296]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6819      	ldr	r1, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	430b      	orrs	r3, r1
 8002d58:	4944      	ldr	r1, [pc, #272]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60cb      	str	r3, [r1, #12]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< HEAD
 8002d82:	7bfb      	ldrb	r3, [r7, #15]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d17d      	bne.n	8002e84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d88:	4b41      	ldr	r3, [pc, #260]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a40      	ldr	r2, [pc, #256]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d94:	f7fe fb36 	bl	8001404 <HAL_GetTick>
 8002d98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d9a:	e009      	b.n	8002db0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d9c:	f7fe fb32 	bl	8001404 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d902      	bls.n	8002db0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	73fb      	strb	r3, [r7, #15]
        break;
 8002dae:	e005      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002db0:	4b37      	ldr	r3, [pc, #220]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1ef      	bne.n	8002d9c <RCCEx_PLLSAI1_Config+0xf0>
=======
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d17d      	bne.n	8002e60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d64:	4b41      	ldr	r3, [pc, #260]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a40      	ldr	r2, [pc, #256]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d70:	f7fe faa2 	bl	80012b8 <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d76:	e009      	b.n	8002d8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d78:	f7fe fa9e 	bl	80012b8 <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d902      	bls.n	8002d8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d86:	2303      	movs	r3, #3
 8002d88:	73fb      	strb	r3, [r7, #15]
        break;
 8002d8a:	e005      	b.n	8002d98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d8c:	4b37      	ldr	r3, [pc, #220]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1ef      	bne.n	8002d78 <RCCEx_PLLSAI1_Config+0xf0>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }

    if(status == HAL_OK)
<<<<<<< HEAD
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d160      	bne.n	8002e84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d111      	bne.n	8002dec <RCCEx_PLLSAI1_Config+0x140>
=======
 8002d98:	7bfb      	ldrb	r3, [r7, #15]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d160      	bne.n	8002e60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d111      	bne.n	8002dc8 <RCCEx_PLLSAI1_Config+0x140>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 8002dc8:	4b31      	ldr	r3, [pc, #196]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002dd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6892      	ldr	r2, [r2, #8]
 8002dd8:	0211      	lsls	r1, r2, #8
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	68d2      	ldr	r2, [r2, #12]
 8002dde:	0912      	lsrs	r2, r2, #4
 8002de0:	0452      	lsls	r2, r2, #17
 8002de2:	430a      	orrs	r2, r1
 8002de4:	492a      	ldr	r1, [pc, #168]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	610b      	str	r3, [r1, #16]
 8002dea:	e027      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0x190>
=======
 8002da4:	4b31      	ldr	r3, [pc, #196]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002dac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6892      	ldr	r2, [r2, #8]
 8002db4:	0211      	lsls	r1, r2, #8
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	68d2      	ldr	r2, [r2, #12]
 8002dba:	0912      	lsrs	r2, r2, #4
 8002dbc:	0452      	lsls	r2, r2, #17
 8002dbe:	430a      	orrs	r2, r1
 8002dc0:	492a      	ldr	r1, [pc, #168]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	610b      	str	r3, [r1, #16]
 8002dc6:	e027      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0x190>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
<<<<<<< HEAD
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d112      	bne.n	8002e18 <RCCEx_PLLSAI1_Config+0x16c>
=======
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d112      	bne.n	8002df4 <RCCEx_PLLSAI1_Config+0x16c>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 8002df2:	4b27      	ldr	r3, [pc, #156]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df4:	691b      	ldr	r3, [r3, #16]
 8002df6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002dfa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	6892      	ldr	r2, [r2, #8]
 8002e02:	0211      	lsls	r1, r2, #8
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6912      	ldr	r2, [r2, #16]
 8002e08:	0852      	lsrs	r2, r2, #1
 8002e0a:	3a01      	subs	r2, #1
 8002e0c:	0552      	lsls	r2, r2, #21
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	491f      	ldr	r1, [pc, #124]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	610b      	str	r3, [r1, #16]
 8002e16:	e011      	b.n	8002e3c <RCCEx_PLLSAI1_Config+0x190>
=======
 8002dce:	4b27      	ldr	r3, [pc, #156]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002dd6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6892      	ldr	r2, [r2, #8]
 8002dde:	0211      	lsls	r1, r2, #8
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	6912      	ldr	r2, [r2, #16]
 8002de4:	0852      	lsrs	r2, r2, #1
 8002de6:	3a01      	subs	r2, #1
 8002de8:	0552      	lsls	r2, r2, #21
 8002dea:	430a      	orrs	r2, r1
 8002dec:	491f      	ldr	r1, [pc, #124]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	610b      	str	r3, [r1, #16]
 8002df2:	e011      	b.n	8002e18 <RCCEx_PLLSAI1_Config+0x190>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
<<<<<<< HEAD
 8002e18:	4b1d      	ldr	r3, [pc, #116]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002e20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6892      	ldr	r2, [r2, #8]
 8002e28:	0211      	lsls	r1, r2, #8
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6952      	ldr	r2, [r2, #20]
 8002e2e:	0852      	lsrs	r2, r2, #1
 8002e30:	3a01      	subs	r2, #1
 8002e32:	0652      	lsls	r2, r2, #25
 8002e34:	430a      	orrs	r2, r1
 8002e36:	4916      	ldr	r1, [pc, #88]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	610b      	str	r3, [r1, #16]
=======
 8002df4:	4b1d      	ldr	r3, [pc, #116]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002dfc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6892      	ldr	r2, [r2, #8]
 8002e04:	0211      	lsls	r1, r2, #8
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	6952      	ldr	r2, [r2, #20]
 8002e0a:	0852      	lsrs	r2, r2, #1
 8002e0c:	3a01      	subs	r2, #1
 8002e0e:	0652      	lsls	r2, r2, #25
 8002e10:	430a      	orrs	r2, r1
 8002e12:	4916      	ldr	r1, [pc, #88]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	610b      	str	r3, [r1, #16]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
<<<<<<< HEAD
 8002e3c:	4b14      	ldr	r3, [pc, #80]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a13      	ldr	r2, [pc, #76]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f7fe fadc 	bl	8001404 <HAL_GetTick>
 8002e4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e4e:	e009      	b.n	8002e64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e50:	f7fe fad8 	bl	8001404 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d902      	bls.n	8002e64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	73fb      	strb	r3, [r7, #15]
          break;
 8002e62:	e005      	b.n	8002e70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e64:	4b0a      	ldr	r3, [pc, #40]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ef      	beq.n	8002e50 <RCCEx_PLLSAI1_Config+0x1a4>
=======
 8002e18:	4b14      	ldr	r3, [pc, #80]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a13      	ldr	r2, [pc, #76]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e24:	f7fe fa48 	bl	80012b8 <HAL_GetTick>
 8002e28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e2a:	e009      	b.n	8002e40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e2c:	f7fe fa44 	bl	80012b8 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b02      	cmp	r3, #2
 8002e38:	d902      	bls.n	8002e40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	73fb      	strb	r3, [r7, #15]
          break;
 8002e3e:	e005      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e40:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0ef      	beq.n	8002e2c <RCCEx_PLLSAI1_Config+0x1a4>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        }
      }

      if(status == HAL_OK)
<<<<<<< HEAD
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e76:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	4904      	ldr	r1, [pc, #16]	@ (8002e90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	610b      	str	r3, [r1, #16]
=======
 8002e4c:	7bfb      	ldrb	r3, [r7, #15]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e52:	4b06      	ldr	r3, [pc, #24]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	4904      	ldr	r1, [pc, #16]	@ (8002e6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	610b      	str	r3, [r1, #16]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }
  }

  return status;
<<<<<<< HEAD
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000

08002e94 <RCCEx_PLLSAI2_Config>:
=======
 8002e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000

08002e70 <RCCEx_PLLSAI2_Config>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
<<<<<<< HEAD
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
=======
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	73fb      	strb	r3, [r7, #15]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 8002ea2:	4b6a      	ldr	r3, [pc, #424]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d018      	beq.n	8002ee0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002eae:	4b67      	ldr	r3, [pc, #412]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0203 	and.w	r2, r3, #3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d10d      	bne.n	8002eda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
       ||
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d009      	beq.n	8002eda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ec6:	4b61      	ldr	r3, [pc, #388]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec8:	68db      	ldr	r3, [r3, #12]
 8002eca:	091b      	lsrs	r3, r3, #4
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	1c5a      	adds	r2, r3, #1
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
       ||
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d047      	beq.n	8002f6a <RCCEx_PLLSAI2_Config+0xd6>
=======
 8002e7e:	4b6a      	ldr	r3, [pc, #424]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d018      	beq.n	8002ebc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e8a:	4b67      	ldr	r3, [pc, #412]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0203 	and.w	r2, r3, #3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d10d      	bne.n	8002eb6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002ea2:	4b61      	ldr	r3, [pc, #388]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	091b      	lsrs	r3, r3, #4
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
       ||
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d047      	beq.n	8002f46 <RCCEx_PLLSAI2_Config+0xd6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif
      )
    {
      status = HAL_ERROR;
<<<<<<< HEAD
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
 8002ede:	e044      	b.n	8002f6a <RCCEx_PLLSAI2_Config+0xd6>
=======
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	73fb      	strb	r3, [r7, #15]
 8002eba:	e044      	b.n	8002f46 <RCCEx_PLLSAI2_Config+0xd6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
<<<<<<< HEAD
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2b03      	cmp	r3, #3
 8002ee6:	d018      	beq.n	8002f1a <RCCEx_PLLSAI2_Config+0x86>
 8002ee8:	2b03      	cmp	r3, #3
 8002eea:	d825      	bhi.n	8002f38 <RCCEx_PLLSAI2_Config+0xa4>
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d002      	beq.n	8002ef6 <RCCEx_PLLSAI2_Config+0x62>
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d009      	beq.n	8002f08 <RCCEx_PLLSAI2_Config+0x74>
 8002ef4:	e020      	b.n	8002f38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ef6:	4b55      	ldr	r3, [pc, #340]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d11d      	bne.n	8002f3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f06:	e01a      	b.n	8002f3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002f08:	4b50      	ldr	r3, [pc, #320]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d116      	bne.n	8002f42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f18:	e013      	b.n	8002f42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002f1a:	4b4c      	ldr	r3, [pc, #304]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f26:	4b49      	ldr	r3, [pc, #292]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d109      	bne.n	8002f46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f36:	e006      	b.n	8002f46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002f3c:	e004      	b.n	8002f48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e002      	b.n	8002f48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f42:	bf00      	nop
 8002f44:	e000      	b.n	8002f48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10d      	bne.n	8002f6a <RCCEx_PLLSAI2_Config+0xd6>
=======
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d018      	beq.n	8002ef6 <RCCEx_PLLSAI2_Config+0x86>
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d825      	bhi.n	8002f14 <RCCEx_PLLSAI2_Config+0xa4>
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d002      	beq.n	8002ed2 <RCCEx_PLLSAI2_Config+0x62>
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d009      	beq.n	8002ee4 <RCCEx_PLLSAI2_Config+0x74>
 8002ed0:	e020      	b.n	8002f14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ed2:	4b55      	ldr	r3, [pc, #340]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d11d      	bne.n	8002f1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ee2:	e01a      	b.n	8002f1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ee4:	4b50      	ldr	r3, [pc, #320]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d116      	bne.n	8002f1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef4:	e013      	b.n	8002f1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002f02:	4b49      	ldr	r3, [pc, #292]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d109      	bne.n	8002f22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f12:	e006      	b.n	8002f22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	73fb      	strb	r3, [r7, #15]
      break;
 8002f18:	e004      	b.n	8002f24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f1a:	bf00      	nop
 8002f1c:	e002      	b.n	8002f24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f1e:	bf00      	nop
 8002f20:	e000      	b.n	8002f24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f22:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f24:	7bfb      	ldrb	r3, [r7, #15]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10d      	bne.n	8002f46 <RCCEx_PLLSAI2_Config+0xd6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
<<<<<<< HEAD
 8002f4e:	4b3f      	ldr	r3, [pc, #252]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6819      	ldr	r1, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	3b01      	subs	r3, #1
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	430b      	orrs	r3, r1
 8002f64:	4939      	ldr	r1, [pc, #228]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60cb      	str	r3, [r1, #12]
=======
 8002f2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6819      	ldr	r1, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	4939      	ldr	r1, [pc, #228]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60cb      	str	r3, [r1, #12]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif
    }
  }

  if(status == HAL_OK)
<<<<<<< HEAD
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d167      	bne.n	8003040 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f70:	4b36      	ldr	r3, [pc, #216]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a35      	ldr	r2, [pc, #212]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7c:	f7fe fa42 	bl	8001404 <HAL_GetTick>
 8002f80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f82:	e009      	b.n	8002f98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f84:	f7fe fa3e 	bl	8001404 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d902      	bls.n	8002f98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	73fb      	strb	r3, [r7, #15]
        break;
 8002f96:	e005      	b.n	8002fa4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f98:	4b2c      	ldr	r3, [pc, #176]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d1ef      	bne.n	8002f84 <RCCEx_PLLSAI2_Config+0xf0>
=======
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d167      	bne.n	800301c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f4c:	4b36      	ldr	r3, [pc, #216]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a35      	ldr	r2, [pc, #212]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f58:	f7fe f9ae 	bl	80012b8 <HAL_GetTick>
 8002f5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f5e:	e009      	b.n	8002f74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f60:	f7fe f9aa 	bl	80012b8 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d902      	bls.n	8002f74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	73fb      	strb	r3, [r7, #15]
        break;
 8002f72:	e005      	b.n	8002f80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f74:	4b2c      	ldr	r3, [pc, #176]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d1ef      	bne.n	8002f60 <RCCEx_PLLSAI2_Config+0xf0>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }

    if(status == HAL_OK)
<<<<<<< HEAD
 8002fa4:	7bfb      	ldrb	r3, [r7, #15]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d14a      	bne.n	8003040 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d111      	bne.n	8002fd4 <RCCEx_PLLSAI2_Config+0x140>
=======
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d14a      	bne.n	800301c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d111      	bne.n	8002fb0 <RCCEx_PLLSAI2_Config+0x140>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< HEAD
 8002fb0:	4b26      	ldr	r3, [pc, #152]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002fb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6892      	ldr	r2, [r2, #8]
 8002fc0:	0211      	lsls	r1, r2, #8
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	68d2      	ldr	r2, [r2, #12]
 8002fc6:	0912      	lsrs	r2, r2, #4
 8002fc8:	0452      	lsls	r2, r2, #17
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	491f      	ldr	r1, [pc, #124]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	614b      	str	r3, [r1, #20]
 8002fd2:	e011      	b.n	8002ff8 <RCCEx_PLLSAI2_Config+0x164>
=======
 8002f8c:	4b26      	ldr	r3, [pc, #152]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f8e:	695b      	ldr	r3, [r3, #20]
 8002f90:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	6892      	ldr	r2, [r2, #8]
 8002f9c:	0211      	lsls	r1, r2, #8
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	68d2      	ldr	r2, [r2, #12]
 8002fa2:	0912      	lsrs	r2, r2, #4
 8002fa4:	0452      	lsls	r2, r2, #17
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	491f      	ldr	r1, [pc, #124]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	614b      	str	r3, [r1, #20]
 8002fae:	e011      	b.n	8002fd4 <RCCEx_PLLSAI2_Config+0x164>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
<<<<<<< HEAD
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd6:	695b      	ldr	r3, [r3, #20]
 8002fd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002fdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6892      	ldr	r2, [r2, #8]
 8002fe4:	0211      	lsls	r1, r2, #8
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6912      	ldr	r2, [r2, #16]
 8002fea:	0852      	lsrs	r2, r2, #1
 8002fec:	3a01      	subs	r2, #1
 8002fee:	0652      	lsls	r2, r2, #25
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	4916      	ldr	r1, [pc, #88]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	614b      	str	r3, [r1, #20]
=======
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002fb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6892      	ldr	r2, [r2, #8]
 8002fc0:	0211      	lsls	r1, r2, #8
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6912      	ldr	r2, [r2, #16]
 8002fc6:	0852      	lsrs	r2, r2, #1
 8002fc8:	3a01      	subs	r2, #1
 8002fca:	0652      	lsls	r2, r2, #25
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	4916      	ldr	r1, [pc, #88]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	614b      	str	r3, [r1, #20]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
<<<<<<< HEAD
 8002ff8:	4b14      	ldr	r3, [pc, #80]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a13      	ldr	r2, [pc, #76]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003002:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe f9fe 	bl	8001404 <HAL_GetTick>
 8003008:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800300a:	e009      	b.n	8003020 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800300c:	f7fe f9fa 	bl	8001404 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d902      	bls.n	8003020 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	73fb      	strb	r3, [r7, #15]
          break;
 800301e:	e005      	b.n	800302c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003020:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ef      	beq.n	800300c <RCCEx_PLLSAI2_Config+0x178>
=======
 8002fd4:	4b14      	ldr	r3, [pc, #80]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a13      	ldr	r2, [pc, #76]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fe0:	f7fe f96a 	bl	80012b8 <HAL_GetTick>
 8002fe4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fe6:	e009      	b.n	8002ffc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fe8:	f7fe f966 	bl	80012b8 <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d902      	bls.n	8002ffc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	73fb      	strb	r3, [r7, #15]
          break;
 8002ffa:	e005      	b.n	8003008 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d0ef      	beq.n	8002fe8 <RCCEx_PLLSAI2_Config+0x178>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        }
      }

      if(status == HAL_OK)
<<<<<<< HEAD
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	4904      	ldr	r1, [pc, #16]	@ (800304c <RCCEx_PLLSAI2_Config+0x1b8>)
 800303c:	4313      	orrs	r3, r2
 800303e:	614b      	str	r3, [r1, #20]
=======
 8003008:	7bfb      	ldrb	r3, [r7, #15]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800300e:	4b06      	ldr	r3, [pc, #24]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003010:	695a      	ldr	r2, [r3, #20]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	4904      	ldr	r1, [pc, #16]	@ (8003028 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003018:	4313      	orrs	r3, r2
 800301a:	614b      	str	r3, [r1, #20]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      }
    }
  }

  return status;
<<<<<<< HEAD
 8003040:	7bfb      	ldrb	r3, [r7, #15]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000

08003050 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
=======
 800301c:	7bfb      	ldrb	r3, [r7, #15]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	40021000 	.word	0x40021000

0800302c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e049      	b.n	80030f6 <HAL_TIM_Base_Init+0xa6>
=======
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e049      	b.n	80030d2 <HAL_TIM_PWM_Init+0xa6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d106      	bne.n	800307c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f841 	bl	80030fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3304      	adds	r3, #4
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f000 fce8 	bl	8003a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3708      	adds	r7, #8
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b01      	cmp	r3, #1
 8003126:	d001      	beq.n	800312c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e04f      	b.n	80031cc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68da      	ldr	r2, [r3, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a23      	ldr	r2, [pc, #140]	@ (80031d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d01d      	beq.n	800318a <HAL_TIM_Base_Start_IT+0x76>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003156:	d018      	beq.n	800318a <HAL_TIM_Base_Start_IT+0x76>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1f      	ldr	r2, [pc, #124]	@ (80031dc <HAL_TIM_Base_Start_IT+0xc8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d013      	beq.n	800318a <HAL_TIM_Base_Start_IT+0x76>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a1e      	ldr	r2, [pc, #120]	@ (80031e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00e      	beq.n	800318a <HAL_TIM_Base_Start_IT+0x76>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a1c      	ldr	r2, [pc, #112]	@ (80031e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d009      	beq.n	800318a <HAL_TIM_Base_Start_IT+0x76>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a1b      	ldr	r2, [pc, #108]	@ (80031e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_TIM_Base_Start_IT+0x76>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a19      	ldr	r2, [pc, #100]	@ (80031ec <HAL_TIM_Base_Start_IT+0xd8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d115      	bne.n	80031b6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	4b17      	ldr	r3, [pc, #92]	@ (80031f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003192:	4013      	ands	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2b06      	cmp	r3, #6
 800319a:	d015      	beq.n	80031c8 <HAL_TIM_Base_Start_IT+0xb4>
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a2:	d011      	beq.n	80031c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0201 	orr.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b4:	e008      	b.n	80031c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f042 0201 	orr.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]
 80031c6:	e000      	b.n	80031ca <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031c8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	40012c00 	.word	0x40012c00
 80031dc:	40000400 	.word	0x40000400
 80031e0:	40000800 	.word	0x40000800
 80031e4:	40000c00 	.word	0x40000c00
 80031e8:	40013400 	.word	0x40013400
 80031ec:	40014000 	.word	0x40014000
 80031f0:	00010007 	.word	0x00010007

080031f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e049      	b.n	800329a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d106      	bne.n	8003220 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d106      	bne.n	8003058 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fd fe4c 	bl	8000eb8 <HAL_TIM_PWM_MspInit>
=======
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7fd feac 	bl	8000db0 <HAL_TIM_PWM_MspInit>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2202      	movs	r2, #2
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	3304      	adds	r3, #4
 8003230:	4619      	mov	r1, r3
 8003232:	4610      	mov	r0, r2
 8003234:	f000 fc16 	bl	8003a64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <HAL_TIM_PWM_Start+0x24>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	bf14      	ite	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2300      	moveq	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e03c      	b.n	8003342 <HAL_TIM_PWM_Start+0x9e>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d109      	bne.n	80032e2 <HAL_TIM_PWM_Start+0x3e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	bf14      	ite	ne
 80032da:	2301      	movne	r3, #1
 80032dc:	2300      	moveq	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	e02f      	b.n	8003342 <HAL_TIM_PWM_Start+0x9e>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d109      	bne.n	80032fc <HAL_TIM_PWM_Start+0x58>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e022      	b.n	8003342 <HAL_TIM_PWM_Start+0x9e>
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	2b0c      	cmp	r3, #12
 8003300:	d109      	bne.n	8003316 <HAL_TIM_PWM_Start+0x72>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b01      	cmp	r3, #1
 800330c:	bf14      	ite	ne
 800330e:	2301      	movne	r3, #1
 8003310:	2300      	moveq	r3, #0
 8003312:	b2db      	uxtb	r3, r3
 8003314:	e015      	b.n	8003342 <HAL_TIM_PWM_Start+0x9e>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b10      	cmp	r3, #16
 800331a:	d109      	bne.n	8003330 <HAL_TIM_PWM_Start+0x8c>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	bf14      	ite	ne
 8003328:	2301      	movne	r3, #1
 800332a:	2300      	moveq	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	e008      	b.n	8003342 <HAL_TIM_PWM_Start+0x9e>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	bf14      	ite	ne
 800333c:	2301      	movne	r3, #1
 800333e:	2300      	moveq	r3, #0
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	d001      	beq.n	800334a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e09c      	b.n	8003484 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d104      	bne.n	800335a <HAL_TIM_PWM_Start+0xb6>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2202      	movs	r2, #2
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003358:	e023      	b.n	80033a2 <HAL_TIM_PWM_Start+0xfe>
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	2b04      	cmp	r3, #4
 800335e:	d104      	bne.n	800336a <HAL_TIM_PWM_Start+0xc6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2202      	movs	r2, #2
 8003364:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003368:	e01b      	b.n	80033a2 <HAL_TIM_PWM_Start+0xfe>
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d104      	bne.n	800337a <HAL_TIM_PWM_Start+0xd6>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003378:	e013      	b.n	80033a2 <HAL_TIM_PWM_Start+0xfe>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b0c      	cmp	r3, #12
 800337e:	d104      	bne.n	800338a <HAL_TIM_PWM_Start+0xe6>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003388:	e00b      	b.n	80033a2 <HAL_TIM_PWM_Start+0xfe>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b10      	cmp	r3, #16
 800338e:	d104      	bne.n	800339a <HAL_TIM_PWM_Start+0xf6>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003398:	e003      	b.n	80033a2 <HAL_TIM_PWM_Start+0xfe>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2202      	movs	r2, #2
 800339e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2201      	movs	r2, #1
 80033a8:	6839      	ldr	r1, [r7, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 fed6 	bl	800415c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a35      	ldr	r2, [pc, #212]	@ (800348c <HAL_TIM_PWM_Start+0x1e8>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x13e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a34      	ldr	r2, [pc, #208]	@ (8003490 <HAL_TIM_PWM_Start+0x1ec>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00e      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x13e>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a32      	ldr	r2, [pc, #200]	@ (8003494 <HAL_TIM_PWM_Start+0x1f0>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x13e>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a31      	ldr	r2, [pc, #196]	@ (8003498 <HAL_TIM_PWM_Start+0x1f4>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d004      	beq.n	80033e2 <HAL_TIM_PWM_Start+0x13e>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a2f      	ldr	r2, [pc, #188]	@ (800349c <HAL_TIM_PWM_Start+0x1f8>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d101      	bne.n	80033e6 <HAL_TIM_PWM_Start+0x142>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_TIM_PWM_Start+0x144>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a22      	ldr	r2, [pc, #136]	@ (800348c <HAL_TIM_PWM_Start+0x1e8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01d      	beq.n	8003442 <HAL_TIM_PWM_Start+0x19e>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800340e:	d018      	beq.n	8003442 <HAL_TIM_PWM_Start+0x19e>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a22      	ldr	r2, [pc, #136]	@ (80034a0 <HAL_TIM_PWM_Start+0x1fc>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d013      	beq.n	8003442 <HAL_TIM_PWM_Start+0x19e>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a21      	ldr	r2, [pc, #132]	@ (80034a4 <HAL_TIM_PWM_Start+0x200>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d00e      	beq.n	8003442 <HAL_TIM_PWM_Start+0x19e>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a1f      	ldr	r2, [pc, #124]	@ (80034a8 <HAL_TIM_PWM_Start+0x204>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d009      	beq.n	8003442 <HAL_TIM_PWM_Start+0x19e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a17      	ldr	r2, [pc, #92]	@ (8003490 <HAL_TIM_PWM_Start+0x1ec>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d004      	beq.n	8003442 <HAL_TIM_PWM_Start+0x19e>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a15      	ldr	r2, [pc, #84]	@ (8003494 <HAL_TIM_PWM_Start+0x1f0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d115      	bne.n	800346e <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	4b18      	ldr	r3, [pc, #96]	@ (80034ac <HAL_TIM_PWM_Start+0x208>)
 800344a:	4013      	ands	r3, r2
 800344c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2b06      	cmp	r3, #6
 8003452:	d015      	beq.n	8003480 <HAL_TIM_PWM_Start+0x1dc>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800345a:	d011      	beq.n	8003480 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f042 0201 	orr.w	r2, r2, #1
 800346a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800346c:	e008      	b.n	8003480 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f042 0201 	orr.w	r2, r2, #1
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	e000      	b.n	8003482 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003480:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40012c00 	.word	0x40012c00
 8003490:	40013400 	.word	0x40013400
 8003494:	40014000 	.word	0x40014000
 8003498:	40014400 	.word	0x40014400
 800349c:	40014800 	.word	0x40014800
 80034a0:	40000400 	.word	0x40000400
 80034a4:	40000800 	.word	0x40000800
 80034a8:	40000c00 	.word	0x40000c00
 80034ac:	00010007 	.word	0x00010007

080034b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2200      	movs	r2, #0
 80034c0:	6839      	ldr	r1, [r7, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 fe4a 	bl	800415c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a3e      	ldr	r2, [pc, #248]	@ (80035c8 <HAL_TIM_PWM_Stop+0x118>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d013      	beq.n	80034fa <HAL_TIM_PWM_Stop+0x4a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a3d      	ldr	r2, [pc, #244]	@ (80035cc <HAL_TIM_PWM_Stop+0x11c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_TIM_PWM_Stop+0x4a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a3b      	ldr	r2, [pc, #236]	@ (80035d0 <HAL_TIM_PWM_Stop+0x120>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_TIM_PWM_Stop+0x4a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a3a      	ldr	r2, [pc, #232]	@ (80035d4 <HAL_TIM_PWM_Stop+0x124>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_TIM_PWM_Stop+0x4a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a38      	ldr	r2, [pc, #224]	@ (80035d8 <HAL_TIM_PWM_Stop+0x128>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_PWM_Stop+0x4e>
 80034fa:	2301      	movs	r3, #1
 80034fc:	e000      	b.n	8003500 <HAL_TIM_PWM_Stop+0x50>
 80034fe:	2300      	movs	r3, #0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d017      	beq.n	8003534 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6a1a      	ldr	r2, [r3, #32]
 800350a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800350e:	4013      	ands	r3, r2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10f      	bne.n	8003534 <HAL_TIM_PWM_Stop+0x84>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a1a      	ldr	r2, [r3, #32]
 800351a:	f240 4344 	movw	r3, #1092	@ 0x444
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <HAL_TIM_PWM_Stop+0x84>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003532:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6a1a      	ldr	r2, [r3, #32]
 800353a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10f      	bne.n	8003564 <HAL_TIM_PWM_Stop+0xb4>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6a1a      	ldr	r2, [r3, #32]
 800354a:	f240 4344 	movw	r3, #1092	@ 0x444
 800354e:	4013      	ands	r3, r2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d107      	bne.n	8003564 <HAL_TIM_PWM_Stop+0xb4>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f022 0201 	bic.w	r2, r2, #1
 8003562:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <HAL_TIM_PWM_Stop+0xc4>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003572:	e023      	b.n	80035bc <HAL_TIM_PWM_Stop+0x10c>
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	2b04      	cmp	r3, #4
 8003578:	d104      	bne.n	8003584 <HAL_TIM_PWM_Stop+0xd4>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2201      	movs	r2, #1
 800357e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003582:	e01b      	b.n	80035bc <HAL_TIM_PWM_Stop+0x10c>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	2b08      	cmp	r3, #8
 8003588:	d104      	bne.n	8003594 <HAL_TIM_PWM_Stop+0xe4>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003592:	e013      	b.n	80035bc <HAL_TIM_PWM_Stop+0x10c>
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	2b0c      	cmp	r3, #12
 8003598:	d104      	bne.n	80035a4 <HAL_TIM_PWM_Stop+0xf4>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80035a2:	e00b      	b.n	80035bc <HAL_TIM_PWM_Stop+0x10c>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b10      	cmp	r3, #16
 80035a8:	d104      	bne.n	80035b4 <HAL_TIM_PWM_Stop+0x104>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80035b2:	e003      	b.n	80035bc <HAL_TIM_PWM_Stop+0x10c>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2201      	movs	r2, #1
 80035b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	40012c00 	.word	0x40012c00
 80035cc:	40013400 	.word	0x40013400
 80035d0:	40014000 	.word	0x40014000
 80035d4:	40014400 	.word	0x40014400
 80035d8:	40014800 	.word	0x40014800

080035dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b084      	sub	sp, #16
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	68db      	ldr	r3, [r3, #12]
 80035ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d020      	beq.n	8003640 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d01b      	beq.n	8003640 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0202 	mvn.w	r2, #2
 8003610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9fe 	bl	8003a28 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f9f0 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 fa01 	bl	8003a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b00      	cmp	r3, #0
 8003648:	d020      	beq.n	800368c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 0304 	and.w	r3, r3, #4
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01b      	beq.n	800368c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0204 	mvn.w	r2, #4
 800365c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2202      	movs	r2, #2
 8003662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9d8 	bl	8003a28 <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f9ca 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f9db 	bl	8003a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f003 0308 	and.w	r3, r3, #8
 8003692:	2b00      	cmp	r3, #0
 8003694:	d020      	beq.n	80036d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d01b      	beq.n	80036d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f06f 0208 	mvn.w	r2, #8
 80036a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2204      	movs	r2, #4
 80036ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f9b2 	bl	8003a28 <HAL_TIM_IC_CaptureCallback>
 80036c4:	e005      	b.n	80036d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f9a4 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f000 f9b5 	bl	8003a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f003 0310 	and.w	r3, r3, #16
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d020      	beq.n	8003724 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f003 0310 	and.w	r3, r3, #16
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01b      	beq.n	8003724 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f06f 0210 	mvn.w	r2, #16
 80036f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2208      	movs	r2, #8
 80036fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	69db      	ldr	r3, [r3, #28]
 8003702:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f98c 	bl	8003a28 <HAL_TIM_IC_CaptureCallback>
 8003710:	e005      	b.n	800371e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f000 f97e 	bl	8003a14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f98f 	bl	8003a3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00c      	beq.n	8003748 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0201 	mvn.w	r2, #1
 8003740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd fb78 	bl	8000e38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800374e:	2b00      	cmp	r3, #0
 8003750:	d104      	bne.n	800375c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00c      	beq.n	8003776 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003762:	2b00      	cmp	r3, #0
 8003764:	d007      	beq.n	8003776 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800376e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 fe29 	bl	80043c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d00c      	beq.n	800379a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003786:	2b00      	cmp	r3, #0
 8003788:	d007      	beq.n	800379a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003792:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fe21 	bl	80043dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00c      	beq.n	80037be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d007      	beq.n	80037be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80037b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f949 	bl	8003a50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00c      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f06f 0220 	mvn.w	r2, #32
 80037da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037dc:	6878      	ldr	r0, [r7, #4]
 80037de:	f000 fde9 	bl	80043b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_TIM_PWM_ConfigChannel>:
=======
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	3304      	adds	r3, #4
 8003068:	4619      	mov	r1, r3
 800306a:	4610      	mov	r0, r2
 800306c:	f000 f94a 	bl	8003304 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
	...

080030dc <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b086      	sub	sp, #24
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	60b9      	str	r1, [r7, #8]
 80037f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	75fb      	strb	r3, [r7, #23]
=======
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	75fb      	strb	r3, [r7, #23]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003802:	2b01      	cmp	r3, #1
 8003804:	d101      	bne.n	800380a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003806:	2302      	movs	r3, #2
 8003808:	e0ff      	b.n	8003a0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b14      	cmp	r3, #20
 8003816:	f200 80f0 	bhi.w	80039fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800381a:	a201      	add	r2, pc, #4	@ (adr r2, 8003820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800381c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003820:	08003875 	.word	0x08003875
 8003824:	080039fb 	.word	0x080039fb
 8003828:	080039fb 	.word	0x080039fb
 800382c:	080039fb 	.word	0x080039fb
 8003830:	080038b5 	.word	0x080038b5
 8003834:	080039fb 	.word	0x080039fb
 8003838:	080039fb 	.word	0x080039fb
 800383c:	080039fb 	.word	0x080039fb
 8003840:	080038f7 	.word	0x080038f7
 8003844:	080039fb 	.word	0x080039fb
 8003848:	080039fb 	.word	0x080039fb
 800384c:	080039fb 	.word	0x080039fb
 8003850:	08003937 	.word	0x08003937
 8003854:	080039fb 	.word	0x080039fb
 8003858:	080039fb 	.word	0x080039fb
 800385c:	080039fb 	.word	0x080039fb
 8003860:	08003979 	.word	0x08003979
 8003864:	080039fb 	.word	0x080039fb
 8003868:	080039fb 	.word	0x080039fb
 800386c:	080039fb 	.word	0x080039fb
 8003870:	080039b9 	.word	0x080039b9
=======
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e0ff      	b.n	80032fa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b14      	cmp	r3, #20
 8003106:	f200 80f0 	bhi.w	80032ea <HAL_TIM_PWM_ConfigChannel+0x20e>
 800310a:	a201      	add	r2, pc, #4	@ (adr r2, 8003110 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800310c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003110:	08003165 	.word	0x08003165
 8003114:	080032eb 	.word	0x080032eb
 8003118:	080032eb 	.word	0x080032eb
 800311c:	080032eb 	.word	0x080032eb
 8003120:	080031a5 	.word	0x080031a5
 8003124:	080032eb 	.word	0x080032eb
 8003128:	080032eb 	.word	0x080032eb
 800312c:	080032eb 	.word	0x080032eb
 8003130:	080031e7 	.word	0x080031e7
 8003134:	080032eb 	.word	0x080032eb
 8003138:	080032eb 	.word	0x080032eb
 800313c:	080032eb 	.word	0x080032eb
 8003140:	08003227 	.word	0x08003227
 8003144:	080032eb 	.word	0x080032eb
 8003148:	080032eb 	.word	0x080032eb
 800314c:	080032eb 	.word	0x080032eb
 8003150:	08003269 	.word	0x08003269
 8003154:	080032eb 	.word	0x080032eb
 8003158:	080032eb 	.word	0x080032eb
 800315c:	080032eb 	.word	0x080032eb
 8003160:	080032a9 	.word	0x080032a9
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68b9      	ldr	r1, [r7, #8]
 800387a:	4618      	mov	r0, r3
 800387c:	f000 f998 	bl	8003bb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0208 	orr.w	r2, r2, #8
 800388e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	699a      	ldr	r2, [r3, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f022 0204 	bic.w	r2, r2, #4
 800389e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6999      	ldr	r1, [r3, #24]
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	691a      	ldr	r2, [r3, #16]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	619a      	str	r2, [r3, #24]
      break;
 80038b2:	e0a5      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f970 	bl	8003450 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699a      	ldr	r2, [r3, #24]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0208 	orr.w	r2, r2, #8
 800317e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	699a      	ldr	r2, [r3, #24]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f022 0204 	bic.w	r2, r2, #4
 800318e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	6999      	ldr	r1, [r3, #24]
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	619a      	str	r2, [r3, #24]
      break;
 80031a2:	e0a5      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68b9      	ldr	r1, [r7, #8]
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 fa08 	bl	8003cd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80038ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	699a      	ldr	r2, [r3, #24]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6999      	ldr	r1, [r3, #24]
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	021a      	lsls	r2, r3, #8
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	619a      	str	r2, [r3, #24]
      break;
 80038f4:	e084      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	68b9      	ldr	r1, [r7, #8]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f9e0 	bl	8003570 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699a      	ldr	r2, [r3, #24]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80031be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	691b      	ldr	r3, [r3, #16]
 80031da:	021a      	lsls	r2, r3, #8
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	430a      	orrs	r2, r1
 80031e2:	619a      	str	r2, [r3, #24]
      break;
 80031e4:	e084      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	4618      	mov	r0, r3
 80038fe:	f000 fa71 	bl	8003de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f042 0208 	orr.w	r2, r2, #8
 8003910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69da      	ldr	r2, [r3, #28]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0204 	bic.w	r2, r2, #4
 8003920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	69d9      	ldr	r1, [r3, #28]
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	691a      	ldr	r2, [r3, #16]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	61da      	str	r2, [r3, #28]
      break;
 8003934:	e064      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68b9      	ldr	r1, [r7, #8]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fa49 	bl	8003684 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f042 0208 	orr.w	r2, r2, #8
 8003200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	69da      	ldr	r2, [r3, #28]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0204 	bic.w	r2, r2, #4
 8003210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	69d9      	ldr	r1, [r3, #28]
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	430a      	orrs	r2, r1
 8003222:	61da      	str	r2, [r3, #28]
      break;
 8003224:	e064      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fad9 	bl	8003ef4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69da      	ldr	r2, [r3, #28]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	69d9      	ldr	r1, [r3, #28]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	691b      	ldr	r3, [r3, #16]
 800396c:	021a      	lsls	r2, r3, #8
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	61da      	str	r2, [r3, #28]
      break;
 8003976:	e043      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68b9      	ldr	r1, [r7, #8]
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fab1 	bl	8003794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	69da      	ldr	r2, [r3, #28]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	69d9      	ldr	r1, [r3, #28]
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	021a      	lsls	r2, r3, #8
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	61da      	str	r2, [r3, #28]
      break;
 8003266:	e043      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68b9      	ldr	r1, [r7, #8]
 800397e:	4618      	mov	r0, r3
 8003980:	f000 fb22 	bl	8003fc8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0208 	orr.w	r2, r2, #8
 8003992:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f022 0204 	bic.w	r2, r2, #4
 80039a2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	691a      	ldr	r2, [r3, #16]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	430a      	orrs	r2, r1
 80039b4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039b6:	e023      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fafa 	bl	8003868 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f042 0208 	orr.w	r2, r2, #8
 8003282:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0204 	bic.w	r2, r2, #4
 8003292:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	691a      	ldr	r2, [r3, #16]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80032a6:	e023      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68b9      	ldr	r1, [r7, #8]
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fb66 	bl	8004090 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	021a      	lsls	r2, r3, #8
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80039f8:	e002      	b.n	8003a00 <HAL_TIM_PWM_ConfigChannel+0x214>
=======
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 fb3e 	bl	8003930 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032c2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032d2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	021a      	lsls	r2, r3, #8
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80032e8:	e002      	b.n	80032f0 <HAL_TIM_PWM_ConfigChannel+0x214>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }

    default:
      status = HAL_ERROR;
<<<<<<< HEAD
 80039fa:	2301      	movs	r3, #1
 80039fc:	75fb      	strb	r3, [r7, #23]
      break;
 80039fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3718      	adds	r7, #24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop

08003a14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a30:	bf00      	nop
 8003a32:	370c      	adds	r7, #12
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a44:	bf00      	nop
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr

08003a50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <TIM_Base_SetConfig>:
=======
 80032ea:	2301      	movs	r3, #1
 80032ec:	75fb      	strb	r3, [r7, #23]
      break;
 80032ee:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3718      	adds	r7, #24
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop

08003304 <TIM_Base_SetConfig>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8003a64:	b480      	push	{r7}
 8003a66:	b085      	sub	sp, #20
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a46      	ldr	r2, [pc, #280]	@ (8003b90 <TIM_Base_SetConfig+0x12c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d013      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a82:	d00f      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a43      	ldr	r2, [pc, #268]	@ (8003b94 <TIM_Base_SetConfig+0x130>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a42      	ldr	r2, [pc, #264]	@ (8003b98 <TIM_Base_SetConfig+0x134>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d007      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a41      	ldr	r2, [pc, #260]	@ (8003b9c <TIM_Base_SetConfig+0x138>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_Base_SetConfig+0x40>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a40      	ldr	r2, [pc, #256]	@ (8003ba0 <TIM_Base_SetConfig+0x13c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d108      	bne.n	8003ab6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003aaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a35      	ldr	r2, [pc, #212]	@ (8003b90 <TIM_Base_SetConfig+0x12c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d01f      	beq.n	8003afe <TIM_Base_SetConfig+0x9a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ac4:	d01b      	beq.n	8003afe <TIM_Base_SetConfig+0x9a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a32      	ldr	r2, [pc, #200]	@ (8003b94 <TIM_Base_SetConfig+0x130>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d017      	beq.n	8003afe <TIM_Base_SetConfig+0x9a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a31      	ldr	r2, [pc, #196]	@ (8003b98 <TIM_Base_SetConfig+0x134>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d013      	beq.n	8003afe <TIM_Base_SetConfig+0x9a>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a30      	ldr	r2, [pc, #192]	@ (8003b9c <TIM_Base_SetConfig+0x138>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00f      	beq.n	8003afe <TIM_Base_SetConfig+0x9a>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a2f      	ldr	r2, [pc, #188]	@ (8003ba0 <TIM_Base_SetConfig+0x13c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <TIM_Base_SetConfig+0x9a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a2e      	ldr	r2, [pc, #184]	@ (8003ba4 <TIM_Base_SetConfig+0x140>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d007      	beq.n	8003afe <TIM_Base_SetConfig+0x9a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba8 <TIM_Base_SetConfig+0x144>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d003      	beq.n	8003afe <TIM_Base_SetConfig+0x9a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a2c      	ldr	r2, [pc, #176]	@ (8003bac <TIM_Base_SetConfig+0x148>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d108      	bne.n	8003b10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
=======
 8003304:	b480      	push	{r7}
 8003306:	b085      	sub	sp, #20
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a46      	ldr	r2, [pc, #280]	@ (8003430 <TIM_Base_SetConfig+0x12c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d013      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003322:	d00f      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a43      	ldr	r2, [pc, #268]	@ (8003434 <TIM_Base_SetConfig+0x130>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d00b      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a42      	ldr	r2, [pc, #264]	@ (8003438 <TIM_Base_SetConfig+0x134>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d007      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a41      	ldr	r2, [pc, #260]	@ (800343c <TIM_Base_SetConfig+0x138>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d003      	beq.n	8003344 <TIM_Base_SetConfig+0x40>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a40      	ldr	r2, [pc, #256]	@ (8003440 <TIM_Base_SetConfig+0x13c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d108      	bne.n	8003356 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800334a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	68fa      	ldr	r2, [r7, #12]
 8003352:	4313      	orrs	r3, r2
 8003354:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	4a35      	ldr	r2, [pc, #212]	@ (8003430 <TIM_Base_SetConfig+0x12c>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d01f      	beq.n	800339e <TIM_Base_SetConfig+0x9a>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003364:	d01b      	beq.n	800339e <TIM_Base_SetConfig+0x9a>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a32      	ldr	r2, [pc, #200]	@ (8003434 <TIM_Base_SetConfig+0x130>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d017      	beq.n	800339e <TIM_Base_SetConfig+0x9a>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a31      	ldr	r2, [pc, #196]	@ (8003438 <TIM_Base_SetConfig+0x134>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <TIM_Base_SetConfig+0x9a>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a30      	ldr	r2, [pc, #192]	@ (800343c <TIM_Base_SetConfig+0x138>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00f      	beq.n	800339e <TIM_Base_SetConfig+0x9a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a2f      	ldr	r2, [pc, #188]	@ (8003440 <TIM_Base_SetConfig+0x13c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00b      	beq.n	800339e <TIM_Base_SetConfig+0x9a>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a2e      	ldr	r2, [pc, #184]	@ (8003444 <TIM_Base_SetConfig+0x140>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <TIM_Base_SetConfig+0x9a>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a2d      	ldr	r2, [pc, #180]	@ (8003448 <TIM_Base_SetConfig+0x144>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_Base_SetConfig+0x9a>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a2c      	ldr	r2, [pc, #176]	@ (800344c <TIM_Base_SetConfig+0x148>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d108      	bne.n	80033b0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a16      	ldr	r2, [pc, #88]	@ (8003b90 <TIM_Base_SetConfig+0x12c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00f      	beq.n	8003b5c <TIM_Base_SetConfig+0xf8>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a18      	ldr	r2, [pc, #96]	@ (8003ba0 <TIM_Base_SetConfig+0x13c>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <TIM_Base_SetConfig+0xf8>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a17      	ldr	r2, [pc, #92]	@ (8003ba4 <TIM_Base_SetConfig+0x140>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d007      	beq.n	8003b5c <TIM_Base_SetConfig+0xf8>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a16      	ldr	r2, [pc, #88]	@ (8003ba8 <TIM_Base_SetConfig+0x144>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_Base_SetConfig+0xf8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a15      	ldr	r2, [pc, #84]	@ (8003bac <TIM_Base_SetConfig+0x148>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d103      	bne.n	8003b64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	691a      	ldr	r2, [r3, #16]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
=======
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	689a      	ldr	r2, [r3, #8]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a16      	ldr	r2, [pc, #88]	@ (8003430 <TIM_Base_SetConfig+0x12c>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00f      	beq.n	80033fc <TIM_Base_SetConfig+0xf8>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a18      	ldr	r2, [pc, #96]	@ (8003440 <TIM_Base_SetConfig+0x13c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d00b      	beq.n	80033fc <TIM_Base_SetConfig+0xf8>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a17      	ldr	r2, [pc, #92]	@ (8003444 <TIM_Base_SetConfig+0x140>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <TIM_Base_SetConfig+0xf8>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a16      	ldr	r2, [pc, #88]	@ (8003448 <TIM_Base_SetConfig+0x144>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_Base_SetConfig+0xf8>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a15      	ldr	r2, [pc, #84]	@ (800344c <TIM_Base_SetConfig+0x148>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d103      	bne.n	8003404 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	691a      	ldr	r2, [r3, #16]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	631a      	str	r2, [r3, #48]	@ 0x30
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	691b      	ldr	r3, [r3, #16]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d105      	bne.n	8003b82 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	f023 0201 	bic.w	r2, r3, #1
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	611a      	str	r2, [r3, #16]
  }
}
 8003b82:	bf00      	nop
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	40012c00 	.word	0x40012c00
 8003b94:	40000400 	.word	0x40000400
 8003b98:	40000800 	.word	0x40000800
 8003b9c:	40000c00 	.word	0x40000c00
 8003ba0:	40013400 	.word	0x40013400
 8003ba4:	40014000 	.word	0x40014000
 8003ba8:	40014400 	.word	0x40014400
 8003bac:	40014800 	.word	0x40014800

08003bb0 <TIM_OC1_SetConfig>:
=======
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d105      	bne.n	8003422 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	f023 0201 	bic.w	r2, r3, #1
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	611a      	str	r2, [r3, #16]
  }
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40012c00 	.word	0x40012c00
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40000c00 	.word	0x40000c00
 8003440:	40013400 	.word	0x40013400
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800

08003450 <TIM_OC1_SetConfig>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
 8003bb8:	6039      	str	r1, [r7, #0]
=======
 8003450:	b480      	push	{r7}
 8003452:	b087      	sub	sp, #28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	f023 0201 	bic.w	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f023 0303 	bic.w	r3, r3, #3
 8003bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	f023 0302 	bic.w	r3, r3, #2
 8003bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a2c      	ldr	r2, [pc, #176]	@ (8003cbc <TIM_OC1_SetConfig+0x10c>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d00f      	beq.n	8003c30 <TIM_OC1_SetConfig+0x80>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc0 <TIM_OC1_SetConfig+0x110>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d00b      	beq.n	8003c30 <TIM_OC1_SetConfig+0x80>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a2a      	ldr	r2, [pc, #168]	@ (8003cc4 <TIM_OC1_SetConfig+0x114>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d007      	beq.n	8003c30 <TIM_OC1_SetConfig+0x80>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a29      	ldr	r2, [pc, #164]	@ (8003cc8 <TIM_OC1_SetConfig+0x118>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d003      	beq.n	8003c30 <TIM_OC1_SetConfig+0x80>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a28      	ldr	r2, [pc, #160]	@ (8003ccc <TIM_OC1_SetConfig+0x11c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d10c      	bne.n	8003c4a <TIM_OC1_SetConfig+0x9a>
=======
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a1b      	ldr	r3, [r3, #32]
 800345e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	f023 0201 	bic.w	r2, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800347e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f023 0303 	bic.w	r3, r3, #3
 800348a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68fa      	ldr	r2, [r7, #12]
 8003492:	4313      	orrs	r3, r2
 8003494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	f023 0302 	bic.w	r3, r3, #2
 800349c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	697a      	ldr	r2, [r7, #20]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a2c      	ldr	r2, [pc, #176]	@ (800355c <TIM_OC1_SetConfig+0x10c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00f      	beq.n	80034d0 <TIM_OC1_SetConfig+0x80>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003560 <TIM_OC1_SetConfig+0x110>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <TIM_OC1_SetConfig+0x80>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a2a      	ldr	r2, [pc, #168]	@ (8003564 <TIM_OC1_SetConfig+0x114>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d007      	beq.n	80034d0 <TIM_OC1_SetConfig+0x80>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a29      	ldr	r2, [pc, #164]	@ (8003568 <TIM_OC1_SetConfig+0x118>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d003      	beq.n	80034d0 <TIM_OC1_SetConfig+0x80>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a28      	ldr	r2, [pc, #160]	@ (800356c <TIM_OC1_SetConfig+0x11c>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d10c      	bne.n	80034ea <TIM_OC1_SetConfig+0x9a>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	f023 0308 	bic.w	r3, r3, #8
 8003c36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 0304 	bic.w	r3, r3, #4
 8003c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003cbc <TIM_OC1_SetConfig+0x10c>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00f      	beq.n	8003c72 <TIM_OC1_SetConfig+0xc2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a1a      	ldr	r2, [pc, #104]	@ (8003cc0 <TIM_OC1_SetConfig+0x110>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00b      	beq.n	8003c72 <TIM_OC1_SetConfig+0xc2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	@ (8003cc4 <TIM_OC1_SetConfig+0x114>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d007      	beq.n	8003c72 <TIM_OC1_SetConfig+0xc2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a18      	ldr	r2, [pc, #96]	@ (8003cc8 <TIM_OC1_SetConfig+0x118>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d003      	beq.n	8003c72 <TIM_OC1_SetConfig+0xc2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a17      	ldr	r2, [pc, #92]	@ (8003ccc <TIM_OC1_SetConfig+0x11c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d111      	bne.n	8003c96 <TIM_OC1_SetConfig+0xe6>
=======
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f023 0308 	bic.w	r3, r3, #8
 80034d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4313      	orrs	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a1b      	ldr	r2, [pc, #108]	@ (800355c <TIM_OC1_SetConfig+0x10c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00f      	beq.n	8003512 <TIM_OC1_SetConfig+0xc2>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a1a      	ldr	r2, [pc, #104]	@ (8003560 <TIM_OC1_SetConfig+0x110>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00b      	beq.n	8003512 <TIM_OC1_SetConfig+0xc2>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a19      	ldr	r2, [pc, #100]	@ (8003564 <TIM_OC1_SetConfig+0x114>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d007      	beq.n	8003512 <TIM_OC1_SetConfig+0xc2>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a18      	ldr	r2, [pc, #96]	@ (8003568 <TIM_OC1_SetConfig+0x118>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d003      	beq.n	8003512 <TIM_OC1_SetConfig+0xc2>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a17      	ldr	r2, [pc, #92]	@ (800356c <TIM_OC1_SetConfig+0x11c>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d111      	bne.n	8003536 <TIM_OC1_SetConfig+0xe6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
=======
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	695b      	ldr	r3, [r3, #20]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	4313      	orrs	r3, r2
 800352a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685a      	ldr	r2, [r3, #4]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	621a      	str	r2, [r3, #32]
}
 8003cb0:	bf00      	nop
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40012c00 	.word	0x40012c00
 8003cc0:	40013400 	.word	0x40013400
 8003cc4:	40014000 	.word	0x40014000
 8003cc8:	40014400 	.word	0x40014400
 8003ccc:	40014800 	.word	0x40014800

08003cd0 <TIM_OC2_SetConfig>:
=======
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685a      	ldr	r2, [r3, #4]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	621a      	str	r2, [r3, #32]
}
 8003550:	bf00      	nop
 8003552:	371c      	adds	r7, #28
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr
 800355c:	40012c00 	.word	0x40012c00
 8003560:	40013400 	.word	0x40013400
 8003564:	40014000 	.word	0x40014000
 8003568:	40014400 	.word	0x40014400
 800356c:	40014800 	.word	0x40014800

08003570 <TIM_OC2_SetConfig>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003cd0:	b480      	push	{r7}
 8003cd2:	b087      	sub	sp, #28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
=======
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f023 0210 	bic.w	r2, r3, #16
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	699b      	ldr	r3, [r3, #24]
 8003cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003cfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	68fa      	ldr	r2, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f023 0320 	bic.w	r3, r3, #32
 8003d1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a28      	ldr	r2, [pc, #160]	@ (8003dd0 <TIM_OC2_SetConfig+0x100>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d003      	beq.n	8003d3c <TIM_OC2_SetConfig+0x6c>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a27      	ldr	r2, [pc, #156]	@ (8003dd4 <TIM_OC2_SetConfig+0x104>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d10d      	bne.n	8003d58 <TIM_OC2_SetConfig+0x88>
=======
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f023 0210 	bic.w	r2, r3, #16
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800359e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80035a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0320 	bic.w	r3, r3, #32
 80035be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a28      	ldr	r2, [pc, #160]	@ (8003670 <TIM_OC2_SetConfig+0x100>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d003      	beq.n	80035dc <TIM_OC2_SetConfig+0x6c>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a27      	ldr	r2, [pc, #156]	@ (8003674 <TIM_OC2_SetConfig+0x104>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d10d      	bne.n	80035f8 <TIM_OC2_SetConfig+0x88>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d56:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd0 <TIM_OC2_SetConfig+0x100>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00f      	beq.n	8003d80 <TIM_OC2_SetConfig+0xb0>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a1c      	ldr	r2, [pc, #112]	@ (8003dd4 <TIM_OC2_SetConfig+0x104>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d00b      	beq.n	8003d80 <TIM_OC2_SetConfig+0xb0>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a1b      	ldr	r2, [pc, #108]	@ (8003dd8 <TIM_OC2_SetConfig+0x108>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d007      	beq.n	8003d80 <TIM_OC2_SetConfig+0xb0>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a1a      	ldr	r2, [pc, #104]	@ (8003ddc <TIM_OC2_SetConfig+0x10c>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d003      	beq.n	8003d80 <TIM_OC2_SetConfig+0xb0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a19      	ldr	r2, [pc, #100]	@ (8003de0 <TIM_OC2_SetConfig+0x110>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d113      	bne.n	8003da8 <TIM_OC2_SetConfig+0xd8>
=======
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	011b      	lsls	r3, r3, #4
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80035f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003670 <TIM_OC2_SetConfig+0x100>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00f      	beq.n	8003620 <TIM_OC2_SetConfig+0xb0>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a1c      	ldr	r2, [pc, #112]	@ (8003674 <TIM_OC2_SetConfig+0x104>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00b      	beq.n	8003620 <TIM_OC2_SetConfig+0xb0>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a1b      	ldr	r2, [pc, #108]	@ (8003678 <TIM_OC2_SetConfig+0x108>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d007      	beq.n	8003620 <TIM_OC2_SetConfig+0xb0>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a1a      	ldr	r2, [pc, #104]	@ (800367c <TIM_OC2_SetConfig+0x10c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d003      	beq.n	8003620 <TIM_OC2_SetConfig+0xb0>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a19      	ldr	r2, [pc, #100]	@ (8003680 <TIM_OC2_SetConfig+0x110>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d113      	bne.n	8003648 <TIM_OC2_SetConfig+0xd8>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	699b      	ldr	r3, [r3, #24]
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	613b      	str	r3, [r7, #16]
=======
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003626:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800362e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	695b      	ldr	r3, [r3, #20]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	4313      	orrs	r3, r2
 8003646:	613b      	str	r3, [r7, #16]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	693a      	ldr	r2, [r7, #16]
 8003dac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	621a      	str	r2, [r3, #32]
}
 8003dc2:	bf00      	nop
 8003dc4:	371c      	adds	r7, #28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40012c00 	.word	0x40012c00
 8003dd4:	40013400 	.word	0x40013400
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40014400 	.word	0x40014400
 8003de0:	40014800 	.word	0x40014800

08003de4 <TIM_OC3_SetConfig>:
=======
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40013400 	.word	0x40013400
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800

08003684 <TIM_OC3_SetConfig>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
=======
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0303 	bic.w	r3, r3, #3
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	021b      	lsls	r3, r3, #8
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a27      	ldr	r2, [pc, #156]	@ (8003ee0 <TIM_OC3_SetConfig+0xfc>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <TIM_OC3_SetConfig+0x6a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a26      	ldr	r2, [pc, #152]	@ (8003ee4 <TIM_OC3_SetConfig+0x100>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d10d      	bne.n	8003e6a <TIM_OC3_SetConfig+0x86>
=======
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	69db      	ldr	r3, [r3, #28]
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f023 0303 	bic.w	r3, r3, #3
 80036be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80036d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	021b      	lsls	r3, r3, #8
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	4313      	orrs	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a27      	ldr	r2, [pc, #156]	@ (8003780 <TIM_OC3_SetConfig+0xfc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d003      	beq.n	80036ee <TIM_OC3_SetConfig+0x6a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a26      	ldr	r2, [pc, #152]	@ (8003784 <TIM_OC3_SetConfig+0x100>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d10d      	bne.n	800370a <TIM_OC3_SetConfig+0x86>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8003ee0 <TIM_OC3_SetConfig+0xfc>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00f      	beq.n	8003e92 <TIM_OC3_SetConfig+0xae>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a1b      	ldr	r2, [pc, #108]	@ (8003ee4 <TIM_OC3_SetConfig+0x100>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00b      	beq.n	8003e92 <TIM_OC3_SetConfig+0xae>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8003ee8 <TIM_OC3_SetConfig+0x104>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <TIM_OC3_SetConfig+0xae>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a19      	ldr	r2, [pc, #100]	@ (8003eec <TIM_OC3_SetConfig+0x108>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d003      	beq.n	8003e92 <TIM_OC3_SetConfig+0xae>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a18      	ldr	r2, [pc, #96]	@ (8003ef0 <TIM_OC3_SetConfig+0x10c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d113      	bne.n	8003eba <TIM_OC3_SetConfig+0xd6>
=======
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	021b      	lsls	r3, r3, #8
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	4313      	orrs	r3, r2
 8003700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a1c      	ldr	r2, [pc, #112]	@ (8003780 <TIM_OC3_SetConfig+0xfc>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d00f      	beq.n	8003732 <TIM_OC3_SetConfig+0xae>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	4a1b      	ldr	r2, [pc, #108]	@ (8003784 <TIM_OC3_SetConfig+0x100>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d00b      	beq.n	8003732 <TIM_OC3_SetConfig+0xae>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a1a      	ldr	r2, [pc, #104]	@ (8003788 <TIM_OC3_SetConfig+0x104>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d007      	beq.n	8003732 <TIM_OC3_SetConfig+0xae>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a19      	ldr	r2, [pc, #100]	@ (800378c <TIM_OC3_SetConfig+0x108>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <TIM_OC3_SetConfig+0xae>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a18      	ldr	r2, [pc, #96]	@ (8003790 <TIM_OC3_SetConfig+0x10c>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d113      	bne.n	800375a <TIM_OC3_SetConfig+0xd6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ea0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	011b      	lsls	r3, r3, #4
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
=======
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	685a      	ldr	r2, [r3, #4]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	621a      	str	r2, [r3, #32]
}
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ede:	4770      	bx	lr
 8003ee0:	40012c00 	.word	0x40012c00
 8003ee4:	40013400 	.word	0x40013400
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40014400 	.word	0x40014400
 8003ef0:	40014800 	.word	0x40014800

08003ef4 <TIM_OC4_SetConfig>:
=======
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	621a      	str	r2, [r3, #32]
}
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40012c00 	.word	0x40012c00
 8003784:	40013400 	.word	0x40013400
 8003788:	40014000 	.word	0x40014000
 800378c:	40014400 	.word	0x40014400
 8003790:	40014800 	.word	0x40014800

08003794 <TIM_OC4_SetConfig>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
=======
 8003794:	b480      	push	{r7}
 8003796:	b087      	sub	sp, #28
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	6039      	str	r1, [r7, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a1b      	ldr	r3, [r3, #32]
 8003f02:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69db      	ldr	r3, [r3, #28]
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f22:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	021b      	lsls	r3, r3, #8
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	031b      	lsls	r3, r3, #12
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a18      	ldr	r2, [pc, #96]	@ (8003fb4 <TIM_OC4_SetConfig+0xc0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d00f      	beq.n	8003f78 <TIM_OC4_SetConfig+0x84>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a17      	ldr	r2, [pc, #92]	@ (8003fb8 <TIM_OC4_SetConfig+0xc4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00b      	beq.n	8003f78 <TIM_OC4_SetConfig+0x84>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a16      	ldr	r2, [pc, #88]	@ (8003fbc <TIM_OC4_SetConfig+0xc8>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d007      	beq.n	8003f78 <TIM_OC4_SetConfig+0x84>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a15      	ldr	r2, [pc, #84]	@ (8003fc0 <TIM_OC4_SetConfig+0xcc>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d003      	beq.n	8003f78 <TIM_OC4_SetConfig+0x84>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a14      	ldr	r2, [pc, #80]	@ (8003fc4 <TIM_OC4_SetConfig+0xd0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d109      	bne.n	8003f8c <TIM_OC4_SetConfig+0x98>
=======
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	69db      	ldr	r3, [r3, #28]
 80037ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	031b      	lsls	r3, r3, #12
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	4a18      	ldr	r2, [pc, #96]	@ (8003854 <TIM_OC4_SetConfig+0xc0>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00f      	beq.n	8003818 <TIM_OC4_SetConfig+0x84>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	4a17      	ldr	r2, [pc, #92]	@ (8003858 <TIM_OC4_SetConfig+0xc4>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00b      	beq.n	8003818 <TIM_OC4_SetConfig+0x84>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a16      	ldr	r2, [pc, #88]	@ (800385c <TIM_OC4_SetConfig+0xc8>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d007      	beq.n	8003818 <TIM_OC4_SetConfig+0x84>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a15      	ldr	r2, [pc, #84]	@ (8003860 <TIM_OC4_SetConfig+0xcc>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d003      	beq.n	8003818 <TIM_OC4_SetConfig+0x84>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a14      	ldr	r2, [pc, #80]	@ (8003864 <TIM_OC4_SetConfig+0xd0>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d109      	bne.n	800382c <TIM_OC4_SetConfig+0x98>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f7e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	019b      	lsls	r3, r3, #6
 8003f86:	697a      	ldr	r2, [r7, #20]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	617b      	str	r3, [r7, #20]
=======
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800381e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	019b      	lsls	r3, r3, #6
 8003826:	697a      	ldr	r2, [r7, #20]
 8003828:	4313      	orrs	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	621a      	str	r2, [r3, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40012c00 	.word	0x40012c00
 8003fb8:	40013400 	.word	0x40013400
 8003fbc:	40014000 	.word	0x40014000
 8003fc0:	40014400 	.word	0x40014400
 8003fc4:	40014800 	.word	0x40014800

08003fc8 <TIM_OC5_SetConfig>:
=======
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	693a      	ldr	r2, [r7, #16]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40012c00 	.word	0x40012c00
 8003858:	40013400 	.word	0x40013400
 800385c:	40014000 	.word	0x40014000
 8003860:	40014400 	.word	0x40014400
 8003864:	40014800 	.word	0x40014800

08003868 <TIM_OC5_SetConfig>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
=======
 8003868:	b480      	push	{r7}
 800386a:	b087      	sub	sp, #28
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ffa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4313      	orrs	r3, r2
 8004004:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800400c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	041b      	lsls	r3, r3, #16
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a17      	ldr	r2, [pc, #92]	@ (800407c <TIM_OC5_SetConfig+0xb4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d00f      	beq.n	8004042 <TIM_OC5_SetConfig+0x7a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a16      	ldr	r2, [pc, #88]	@ (8004080 <TIM_OC5_SetConfig+0xb8>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00b      	beq.n	8004042 <TIM_OC5_SetConfig+0x7a>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a15      	ldr	r2, [pc, #84]	@ (8004084 <TIM_OC5_SetConfig+0xbc>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d007      	beq.n	8004042 <TIM_OC5_SetConfig+0x7a>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a14      	ldr	r2, [pc, #80]	@ (8004088 <TIM_OC5_SetConfig+0xc0>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d003      	beq.n	8004042 <TIM_OC5_SetConfig+0x7a>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a13      	ldr	r2, [pc, #76]	@ (800408c <TIM_OC5_SetConfig+0xc4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d109      	bne.n	8004056 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004048:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	021b      	lsls	r3, r3, #8
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4313      	orrs	r3, r2
 8004054:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	621a      	str	r2, [r3, #32]
}
 8004070:	bf00      	nop
 8004072:	371c      	adds	r7, #28
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr
 800407c:	40012c00 	.word	0x40012c00
 8004080:	40013400 	.word	0x40013400
 8004084:	40014000 	.word	0x40014000
 8004088:	40014400 	.word	0x40014400
 800408c:	40014800 	.word	0x40014800

08004090 <TIM_OC6_SetConfig>:
=======
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800388e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003896:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800389a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80038ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	041b      	lsls	r3, r3, #16
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a17      	ldr	r2, [pc, #92]	@ (800391c <TIM_OC5_SetConfig+0xb4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d00f      	beq.n	80038e2 <TIM_OC5_SetConfig+0x7a>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a16      	ldr	r2, [pc, #88]	@ (8003920 <TIM_OC5_SetConfig+0xb8>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d00b      	beq.n	80038e2 <TIM_OC5_SetConfig+0x7a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a15      	ldr	r2, [pc, #84]	@ (8003924 <TIM_OC5_SetConfig+0xbc>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d007      	beq.n	80038e2 <TIM_OC5_SetConfig+0x7a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a14      	ldr	r2, [pc, #80]	@ (8003928 <TIM_OC5_SetConfig+0xc0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d003      	beq.n	80038e2 <TIM_OC5_SetConfig+0x7a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a13      	ldr	r2, [pc, #76]	@ (800392c <TIM_OC5_SetConfig+0xc4>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d109      	bne.n	80038f6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685a      	ldr	r2, [r3, #4]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	621a      	str	r2, [r3, #32]
}
 8003910:	bf00      	nop
 8003912:	371c      	adds	r7, #28
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	40012c00 	.word	0x40012c00
 8003920:	40013400 	.word	0x40013400
 8003924:	40014000 	.word	0x40014000
 8003928:	40014400 	.word	0x40014400
 800392c:	40014800 	.word	0x40014800

08003930 <TIM_OC6_SetConfig>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
=======
 8003930:	b480      	push	{r7}
 8003932:	b087      	sub	sp, #28
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a1b      	ldr	r3, [r3, #32]
 80040a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80040d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	051b      	lsls	r3, r3, #20
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a18      	ldr	r2, [pc, #96]	@ (8004148 <TIM_OC6_SetConfig+0xb8>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00f      	beq.n	800410c <TIM_OC6_SetConfig+0x7c>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a17      	ldr	r2, [pc, #92]	@ (800414c <TIM_OC6_SetConfig+0xbc>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00b      	beq.n	800410c <TIM_OC6_SetConfig+0x7c>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a16      	ldr	r2, [pc, #88]	@ (8004150 <TIM_OC6_SetConfig+0xc0>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d007      	beq.n	800410c <TIM_OC6_SetConfig+0x7c>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a15      	ldr	r2, [pc, #84]	@ (8004154 <TIM_OC6_SetConfig+0xc4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_OC6_SetConfig+0x7c>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a14      	ldr	r2, [pc, #80]	@ (8004158 <TIM_OC6_SetConfig+0xc8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d109      	bne.n	8004120 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004112:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	029b      	lsls	r3, r3, #10
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
=======
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
 800393e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800395e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003962:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003976:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	051b      	lsls	r3, r3, #20
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a18      	ldr	r2, [pc, #96]	@ (80039e8 <TIM_OC6_SetConfig+0xb8>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00f      	beq.n	80039ac <TIM_OC6_SetConfig+0x7c>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a17      	ldr	r2, [pc, #92]	@ (80039ec <TIM_OC6_SetConfig+0xbc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d00b      	beq.n	80039ac <TIM_OC6_SetConfig+0x7c>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a16      	ldr	r2, [pc, #88]	@ (80039f0 <TIM_OC6_SetConfig+0xc0>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d007      	beq.n	80039ac <TIM_OC6_SetConfig+0x7c>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a15      	ldr	r2, [pc, #84]	@ (80039f4 <TIM_OC6_SetConfig+0xc4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d003      	beq.n	80039ac <TIM_OC6_SetConfig+0x7c>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a14      	ldr	r2, [pc, #80]	@ (80039f8 <TIM_OC6_SetConfig+0xc8>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d109      	bne.n	80039c0 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	029b      	lsls	r3, r3, #10
 80039ba:	697a      	ldr	r2, [r7, #20]
 80039bc:	4313      	orrs	r3, r2
 80039be:	617b      	str	r3, [r7, #20]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40013400 	.word	0x40013400
 8004150:	40014000 	.word	0x40014000
 8004154:	40014400 	.word	0x40014400
 8004158:	40014800 	.word	0x40014800

0800415c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	f003 031f 	and.w	r3, r3, #31
 800416e:	2201      	movs	r2, #1
 8004170:	fa02 f303 	lsl.w	r3, r2, r3
 8004174:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1a      	ldr	r2, [r3, #32]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	43db      	mvns	r3, r3
 800417e:	401a      	ands	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a1a      	ldr	r2, [r3, #32]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	f003 031f 	and.w	r3, r3, #31
 800418e:	6879      	ldr	r1, [r7, #4]
 8004190:	fa01 f303 	lsl.w	r3, r1, r3
 8004194:	431a      	orrs	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	621a      	str	r2, [r3, #32]
}
 800419a:	bf00      	nop
 800419c:	371c      	adds	r7, #28
 800419e:	46bd      	mov	sp, r7
 80041a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a4:	4770      	bx	lr
	...

080041a8 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68fa      	ldr	r2, [r7, #12]
 80039ca:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	693a      	ldr	r2, [r7, #16]
 80039d8:	621a      	str	r2, [r3, #32]
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40012c00 	.word	0x40012c00
 80039ec:	40013400 	.word	0x40013400
 80039f0:	40014000 	.word	0x40014000
 80039f4:	40014400 	.word	0x40014400
 80039f8:	40014800 	.word	0x40014800

080039fc <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
 80041b0:	6039      	str	r1, [r7, #0]
=======
 80039fc:	b480      	push	{r7}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d101      	bne.n	80041c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041bc:	2302      	movs	r3, #2
 80041be:	e068      	b.n	8004292 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a2e      	ldr	r2, [pc, #184]	@ (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d004      	beq.n	80041f4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a2d      	ldr	r2, [pc, #180]	@ (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d108      	bne.n	8004206 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
=======
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d101      	bne.n	8003a14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a10:	2302      	movs	r3, #2
 8003a12:	e068      	b.n	8003ae6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2202      	movs	r2, #2
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a2e      	ldr	r2, [pc, #184]	@ (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d004      	beq.n	8003a48 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a2d      	ldr	r2, [pc, #180]	@ (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d108      	bne.n	8003a5a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
<<<<<<< HEAD
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80041fa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]
=======
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003a4e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
<<<<<<< HEAD
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	4313      	orrs	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1e      	ldr	r2, [pc, #120]	@ (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d01d      	beq.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004232:	d018      	beq.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a1b      	ldr	r2, [pc, #108]	@ (80042a8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d013      	beq.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a1a      	ldr	r2, [pc, #104]	@ (80042ac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d00e      	beq.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a18      	ldr	r2, [pc, #96]	@ (80042b0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a13      	ldr	r2, [pc, #76]	@ (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d004      	beq.n	8004266 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a14      	ldr	r2, [pc, #80]	@ (80042b4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d10c      	bne.n	8004280 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800426c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	4313      	orrs	r3, r2
 8004276:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	609a      	str	r2, [r3, #8]
=======
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a60:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1e      	ldr	r2, [pc, #120]	@ (8003af4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01d      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a86:	d018      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003afc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d013      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a1a      	ldr	r2, [pc, #104]	@ (8003b00 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d00e      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a18      	ldr	r2, [pc, #96]	@ (8003b04 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d009      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a13      	ldr	r2, [pc, #76]	@ (8003af8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d004      	beq.n	8003aba <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a14      	ldr	r2, [pc, #80]	@ (8003b08 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ac0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68ba      	ldr	r2, [r7, #8]
 8003ad2:	609a      	str	r2, [r3, #8]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004290:	2300      	movs	r3, #0
}
 8004292:	4618      	mov	r0, r3
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	40012c00 	.word	0x40012c00
 80042a4:	40013400 	.word	0x40013400
 80042a8:	40000400 	.word	0x40000400
 80042ac:	40000800 	.word	0x40000800
 80042b0:	40000c00 	.word	0x40000c00
 80042b4:	40014000 	.word	0x40014000

080042b8 <HAL_TIMEx_ConfigBreakDeadTime>:
=======
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	40012c00 	.word	0x40012c00
 8003af8:	40013400 	.word	0x40013400
 8003afc:	40000400 	.word	0x40000400
 8003b00:	40000800 	.word	0x40000800
 8003b04:	40000c00 	.word	0x40000c00
 8003b08:	40014000 	.word	0x40014000

08003b0c <HAL_TIMEx_ConfigBreakDeadTime>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
<<<<<<< HEAD
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042c2:	2300      	movs	r3, #0
 80042c4:	60fb      	str	r3, [r7, #12]
=======
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e065      	b.n	80043a0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
=======
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e065      	b.n	8003bf4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
<<<<<<< HEAD
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	4313      	orrs	r3, r2
 8004304:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4313      	orrs	r3, r2
 8004312:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	4313      	orrs	r3, r2
 8004320:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	4313      	orrs	r3, r2
 800434c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a16      	ldr	r2, [pc, #88]	@ (80043ac <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a14      	ldr	r2, [pc, #80]	@ (80043b0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d115      	bne.n	800438e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
=======
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	041b      	lsls	r3, r3, #16
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a16      	ldr	r2, [pc, #88]	@ (8003c00 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d004      	beq.n	8003bb6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a14      	ldr	r2, [pc, #80]	@ (8003c04 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d115      	bne.n	8003be2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
<<<<<<< HEAD
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436c:	051b      	lsls	r3, r3, #20
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	4313      	orrs	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
=======
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc0:	051b      	lsls	r3, r3, #20
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6a1b      	ldr	r3, [r3, #32]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
<<<<<<< HEAD
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800439e:	2300      	movs	r3, #0
}
 80043a0:	4618      	mov	r0, r3
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40012c00 	.word	0x40012c00
 80043b0:	40013400 	.word	0x40013400

080043b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_UART_Init>:
=======
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2200      	movs	r2, #0
 8003bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003bf2:	2300      	movs	r3, #0
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40012c00 	.word	0x40012c00
 8003c04:	40013400 	.word	0x40013400

08003c08 <HAL_UART_Init>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d101      	bne.n	8004402 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e040      	b.n	8004484 <HAL_UART_Init+0x94>
=======
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d101      	bne.n	8003c1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e040      	b.n	8003c9c <HAL_UART_Init+0x94>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d106      	bne.n	8004418 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
=======
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8004412:	6878      	ldr	r0, [r7, #4]
 8004414:	f7fc fe8a 	bl	800112c <HAL_UART_MspInit>
=======
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd f9fa 	bl	8001024 <HAL_UART_MspInit>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2224      	movs	r2, #36	@ 0x24
 800441c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0201 	bic.w	r2, r2, #1
 800442c:	601a      	str	r2, [r3, #0]
=======
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2224      	movs	r2, #36	@ 0x24
 8003c34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f022 0201 	bic.w	r2, r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< HEAD
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f000 fae0 	bl	80049fc <UART_AdvFeatureConfig>
=======
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fedc 	bl	8004a0c <UART_AdvFeatureConfig>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< HEAD
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f825 	bl	800448c <UART_SetConfig>
 8004442:	4603      	mov	r3, r0
 8004444:	2b01      	cmp	r3, #1
 8004446:	d101      	bne.n	800444c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e01b      	b.n	8004484 <HAL_UART_Init+0x94>
=======
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fc21 	bl	800449c <UART_SetConfig>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d101      	bne.n	8003c64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e01b      	b.n	8003c9c <HAL_UART_Init+0x94>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	685a      	ldr	r2, [r3, #4]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800445a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	689a      	ldr	r2, [r3, #8]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800446a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fb5f 	bl	8004b40 <UART_CheckIdleState>
 8004482:	4603      	mov	r3, r0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3708      	adds	r7, #8
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
=======
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003c72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003c82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f000 ff5b 	bl	8004b50 <UART_CheckIdleState>
 8003c9a:	4603      	mov	r3, r0
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	3708      	adds	r7, #8
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	bd80      	pop	{r7, pc}

08003ca4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
<<<<<<< HEAD
 800448c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004490:	b08a      	sub	sp, #40	@ 0x28
 8004492:	af00      	add	r7, sp, #0
 8004494:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689a      	ldr	r2, [r3, #8]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	691b      	ldr	r3, [r3, #16]
 80044a4:	431a      	orrs	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	695b      	ldr	r3, [r3, #20]
 80044aa:	431a      	orrs	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	4ba4      	ldr	r3, [pc, #656]	@ (800474c <UART_SetConfig+0x2c0>)
 80044bc:	4013      	ands	r3, r2
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044c4:	430b      	orrs	r3, r1
 80044c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	68da      	ldr	r2, [r3, #12]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a99      	ldr	r2, [pc, #612]	@ (8004750 <UART_SetConfig+0x2c4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d004      	beq.n	80044f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a1b      	ldr	r3, [r3, #32]
 80044f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044f4:	4313      	orrs	r3, r2
 80044f6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004508:	430a      	orrs	r2, r1
 800450a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a90      	ldr	r2, [pc, #576]	@ (8004754 <UART_SetConfig+0x2c8>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d126      	bne.n	8004564 <UART_SetConfig+0xd8>
 8004516:	4b90      	ldr	r3, [pc, #576]	@ (8004758 <UART_SetConfig+0x2cc>)
 8004518:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	2b03      	cmp	r3, #3
 8004522:	d81b      	bhi.n	800455c <UART_SetConfig+0xd0>
 8004524:	a201      	add	r2, pc, #4	@ (adr r2, 800452c <UART_SetConfig+0xa0>)
 8004526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800452a:	bf00      	nop
 800452c:	0800453d 	.word	0x0800453d
 8004530:	0800454d 	.word	0x0800454d
 8004534:	08004545 	.word	0x08004545
 8004538:	08004555 	.word	0x08004555
 800453c:	2301      	movs	r3, #1
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004542:	e116      	b.n	8004772 <UART_SetConfig+0x2e6>
 8004544:	2302      	movs	r3, #2
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454a:	e112      	b.n	8004772 <UART_SetConfig+0x2e6>
 800454c:	2304      	movs	r3, #4
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004552:	e10e      	b.n	8004772 <UART_SetConfig+0x2e6>
 8004554:	2308      	movs	r3, #8
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455a:	e10a      	b.n	8004772 <UART_SetConfig+0x2e6>
 800455c:	2310      	movs	r3, #16
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004562:	e106      	b.n	8004772 <UART_SetConfig+0x2e6>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a7c      	ldr	r2, [pc, #496]	@ (800475c <UART_SetConfig+0x2d0>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d138      	bne.n	80045e0 <UART_SetConfig+0x154>
 800456e:	4b7a      	ldr	r3, [pc, #488]	@ (8004758 <UART_SetConfig+0x2cc>)
 8004570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004574:	f003 030c 	and.w	r3, r3, #12
 8004578:	2b0c      	cmp	r3, #12
 800457a:	d82d      	bhi.n	80045d8 <UART_SetConfig+0x14c>
 800457c:	a201      	add	r2, pc, #4	@ (adr r2, 8004584 <UART_SetConfig+0xf8>)
 800457e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004582:	bf00      	nop
 8004584:	080045b9 	.word	0x080045b9
 8004588:	080045d9 	.word	0x080045d9
 800458c:	080045d9 	.word	0x080045d9
 8004590:	080045d9 	.word	0x080045d9
 8004594:	080045c9 	.word	0x080045c9
 8004598:	080045d9 	.word	0x080045d9
 800459c:	080045d9 	.word	0x080045d9
 80045a0:	080045d9 	.word	0x080045d9
 80045a4:	080045c1 	.word	0x080045c1
 80045a8:	080045d9 	.word	0x080045d9
 80045ac:	080045d9 	.word	0x080045d9
 80045b0:	080045d9 	.word	0x080045d9
 80045b4:	080045d1 	.word	0x080045d1
 80045b8:	2300      	movs	r3, #0
 80045ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045be:	e0d8      	b.n	8004772 <UART_SetConfig+0x2e6>
 80045c0:	2302      	movs	r3, #2
 80045c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045c6:	e0d4      	b.n	8004772 <UART_SetConfig+0x2e6>
 80045c8:	2304      	movs	r3, #4
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ce:	e0d0      	b.n	8004772 <UART_SetConfig+0x2e6>
 80045d0:	2308      	movs	r3, #8
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d6:	e0cc      	b.n	8004772 <UART_SetConfig+0x2e6>
 80045d8:	2310      	movs	r3, #16
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045de:	e0c8      	b.n	8004772 <UART_SetConfig+0x2e6>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a5e      	ldr	r2, [pc, #376]	@ (8004760 <UART_SetConfig+0x2d4>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d125      	bne.n	8004636 <UART_SetConfig+0x1aa>
 80045ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004758 <UART_SetConfig+0x2cc>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045f0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80045f4:	2b30      	cmp	r3, #48	@ 0x30
 80045f6:	d016      	beq.n	8004626 <UART_SetConfig+0x19a>
 80045f8:	2b30      	cmp	r3, #48	@ 0x30
 80045fa:	d818      	bhi.n	800462e <UART_SetConfig+0x1a2>
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d00a      	beq.n	8004616 <UART_SetConfig+0x18a>
 8004600:	2b20      	cmp	r3, #32
 8004602:	d814      	bhi.n	800462e <UART_SetConfig+0x1a2>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d002      	beq.n	800460e <UART_SetConfig+0x182>
 8004608:	2b10      	cmp	r3, #16
 800460a:	d008      	beq.n	800461e <UART_SetConfig+0x192>
 800460c:	e00f      	b.n	800462e <UART_SetConfig+0x1a2>
 800460e:	2300      	movs	r3, #0
 8004610:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004614:	e0ad      	b.n	8004772 <UART_SetConfig+0x2e6>
 8004616:	2302      	movs	r3, #2
 8004618:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800461c:	e0a9      	b.n	8004772 <UART_SetConfig+0x2e6>
 800461e:	2304      	movs	r3, #4
 8004620:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004624:	e0a5      	b.n	8004772 <UART_SetConfig+0x2e6>
 8004626:	2308      	movs	r3, #8
 8004628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462c:	e0a1      	b.n	8004772 <UART_SetConfig+0x2e6>
 800462e:	2310      	movs	r3, #16
 8004630:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004634:	e09d      	b.n	8004772 <UART_SetConfig+0x2e6>
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a4a      	ldr	r2, [pc, #296]	@ (8004764 <UART_SetConfig+0x2d8>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d125      	bne.n	800468c <UART_SetConfig+0x200>
 8004640:	4b45      	ldr	r3, [pc, #276]	@ (8004758 <UART_SetConfig+0x2cc>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004646:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800464a:	2bc0      	cmp	r3, #192	@ 0xc0
 800464c:	d016      	beq.n	800467c <UART_SetConfig+0x1f0>
 800464e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004650:	d818      	bhi.n	8004684 <UART_SetConfig+0x1f8>
 8004652:	2b80      	cmp	r3, #128	@ 0x80
 8004654:	d00a      	beq.n	800466c <UART_SetConfig+0x1e0>
 8004656:	2b80      	cmp	r3, #128	@ 0x80
 8004658:	d814      	bhi.n	8004684 <UART_SetConfig+0x1f8>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <UART_SetConfig+0x1d8>
 800465e:	2b40      	cmp	r3, #64	@ 0x40
 8004660:	d008      	beq.n	8004674 <UART_SetConfig+0x1e8>
 8004662:	e00f      	b.n	8004684 <UART_SetConfig+0x1f8>
 8004664:	2300      	movs	r3, #0
 8004666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800466a:	e082      	b.n	8004772 <UART_SetConfig+0x2e6>
 800466c:	2302      	movs	r3, #2
 800466e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004672:	e07e      	b.n	8004772 <UART_SetConfig+0x2e6>
 8004674:	2304      	movs	r3, #4
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467a:	e07a      	b.n	8004772 <UART_SetConfig+0x2e6>
 800467c:	2308      	movs	r3, #8
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004682:	e076      	b.n	8004772 <UART_SetConfig+0x2e6>
 8004684:	2310      	movs	r3, #16
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468a:	e072      	b.n	8004772 <UART_SetConfig+0x2e6>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a35      	ldr	r2, [pc, #212]	@ (8004768 <UART_SetConfig+0x2dc>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d12a      	bne.n	80046ec <UART_SetConfig+0x260>
 8004696:	4b30      	ldr	r3, [pc, #192]	@ (8004758 <UART_SetConfig+0x2cc>)
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046a4:	d01a      	beq.n	80046dc <UART_SetConfig+0x250>
 80046a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046aa:	d81b      	bhi.n	80046e4 <UART_SetConfig+0x258>
 80046ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046b0:	d00c      	beq.n	80046cc <UART_SetConfig+0x240>
 80046b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046b6:	d815      	bhi.n	80046e4 <UART_SetConfig+0x258>
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <UART_SetConfig+0x238>
 80046bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046c0:	d008      	beq.n	80046d4 <UART_SetConfig+0x248>
 80046c2:	e00f      	b.n	80046e4 <UART_SetConfig+0x258>
 80046c4:	2300      	movs	r3, #0
 80046c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ca:	e052      	b.n	8004772 <UART_SetConfig+0x2e6>
 80046cc:	2302      	movs	r3, #2
 80046ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046d2:	e04e      	b.n	8004772 <UART_SetConfig+0x2e6>
 80046d4:	2304      	movs	r3, #4
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046da:	e04a      	b.n	8004772 <UART_SetConfig+0x2e6>
 80046dc:	2308      	movs	r3, #8
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e2:	e046      	b.n	8004772 <UART_SetConfig+0x2e6>
 80046e4:	2310      	movs	r3, #16
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ea:	e042      	b.n	8004772 <UART_SetConfig+0x2e6>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a17      	ldr	r2, [pc, #92]	@ (8004750 <UART_SetConfig+0x2c4>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d13a      	bne.n	800476c <UART_SetConfig+0x2e0>
 80046f6:	4b18      	ldr	r3, [pc, #96]	@ (8004758 <UART_SetConfig+0x2cc>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004700:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004704:	d01a      	beq.n	800473c <UART_SetConfig+0x2b0>
 8004706:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800470a:	d81b      	bhi.n	8004744 <UART_SetConfig+0x2b8>
 800470c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004710:	d00c      	beq.n	800472c <UART_SetConfig+0x2a0>
 8004712:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004716:	d815      	bhi.n	8004744 <UART_SetConfig+0x2b8>
 8004718:	2b00      	cmp	r3, #0
 800471a:	d003      	beq.n	8004724 <UART_SetConfig+0x298>
 800471c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004720:	d008      	beq.n	8004734 <UART_SetConfig+0x2a8>
 8004722:	e00f      	b.n	8004744 <UART_SetConfig+0x2b8>
 8004724:	2300      	movs	r3, #0
 8004726:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800472a:	e022      	b.n	8004772 <UART_SetConfig+0x2e6>
 800472c:	2302      	movs	r3, #2
 800472e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004732:	e01e      	b.n	8004772 <UART_SetConfig+0x2e6>
 8004734:	2304      	movs	r3, #4
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473a:	e01a      	b.n	8004772 <UART_SetConfig+0x2e6>
 800473c:	2308      	movs	r3, #8
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004742:	e016      	b.n	8004772 <UART_SetConfig+0x2e6>
 8004744:	2310      	movs	r3, #16
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474a:	e012      	b.n	8004772 <UART_SetConfig+0x2e6>
 800474c:	efff69f3 	.word	0xefff69f3
 8004750:	40008000 	.word	0x40008000
 8004754:	40013800 	.word	0x40013800
 8004758:	40021000 	.word	0x40021000
 800475c:	40004400 	.word	0x40004400
 8004760:	40004800 	.word	0x40004800
 8004764:	40004c00 	.word	0x40004c00
 8004768:	40005000 	.word	0x40005000
 800476c:	2310      	movs	r3, #16
 800476e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a9f      	ldr	r2, [pc, #636]	@ (80049f4 <UART_SetConfig+0x568>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d17a      	bne.n	8004872 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800477c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004780:	2b08      	cmp	r3, #8
 8004782:	d824      	bhi.n	80047ce <UART_SetConfig+0x342>
 8004784:	a201      	add	r2, pc, #4	@ (adr r2, 800478c <UART_SetConfig+0x300>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	080047b1 	.word	0x080047b1
 8004790:	080047cf 	.word	0x080047cf
 8004794:	080047b9 	.word	0x080047b9
 8004798:	080047cf 	.word	0x080047cf
 800479c:	080047bf 	.word	0x080047bf
 80047a0:	080047cf 	.word	0x080047cf
 80047a4:	080047cf 	.word	0x080047cf
 80047a8:	080047cf 	.word	0x080047cf
 80047ac:	080047c7 	.word	0x080047c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047b0:	f7fd fed4 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 80047b4:	61f8      	str	r0, [r7, #28]
        break;
 80047b6:	e010      	b.n	80047da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b8:	4b8f      	ldr	r3, [pc, #572]	@ (80049f8 <UART_SetConfig+0x56c>)
 80047ba:	61fb      	str	r3, [r7, #28]
        break;
 80047bc:	e00d      	b.n	80047da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047be:	f7fd fe35 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80047c2:	61f8      	str	r0, [r7, #28]
        break;
 80047c4:	e009      	b.n	80047da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ca:	61fb      	str	r3, [r7, #28]
        break;
 80047cc:	e005      	b.n	80047da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80fb 	beq.w	80049d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	005b      	lsls	r3, r3, #1
 80047ea:	4413      	add	r3, r2
 80047ec:	69fa      	ldr	r2, [r7, #28]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d305      	bcc.n	80047fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047f8:	69fa      	ldr	r2, [r7, #28]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d903      	bls.n	8004806 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004804:	e0e8      	b.n	80049d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	2200      	movs	r2, #0
 800480a:	461c      	mov	r4, r3
 800480c:	4615      	mov	r5, r2
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	022b      	lsls	r3, r5, #8
 8004818:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800481c:	0222      	lsls	r2, r4, #8
 800481e:	68f9      	ldr	r1, [r7, #12]
 8004820:	6849      	ldr	r1, [r1, #4]
 8004822:	0849      	lsrs	r1, r1, #1
 8004824:	2000      	movs	r0, #0
 8004826:	4688      	mov	r8, r1
 8004828:	4681      	mov	r9, r0
 800482a:	eb12 0a08 	adds.w	sl, r2, r8
 800482e:	eb43 0b09 	adc.w	fp, r3, r9
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	607a      	str	r2, [r7, #4]
 800483c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004840:	4650      	mov	r0, sl
 8004842:	4659      	mov	r1, fp
 8004844:	f7fb fcc4 	bl	80001d0 <__aeabi_uldivmod>
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4613      	mov	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004856:	d308      	bcc.n	800486a <UART_SetConfig+0x3de>
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800485e:	d204      	bcs.n	800486a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	60da      	str	r2, [r3, #12]
 8004868:	e0b6      	b.n	80049d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004870:	e0b2      	b.n	80049d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800487a:	d15e      	bne.n	800493a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800487c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004880:	2b08      	cmp	r3, #8
 8004882:	d828      	bhi.n	80048d6 <UART_SetConfig+0x44a>
 8004884:	a201      	add	r2, pc, #4	@ (adr r2, 800488c <UART_SetConfig+0x400>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048b9 	.word	0x080048b9
 8004894:	080048c1 	.word	0x080048c1
 8004898:	080048d7 	.word	0x080048d7
 800489c:	080048c7 	.word	0x080048c7
 80048a0:	080048d7 	.word	0x080048d7
 80048a4:	080048d7 	.word	0x080048d7
 80048a8:	080048d7 	.word	0x080048d7
 80048ac:	080048cf 	.word	0x080048cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7fd fe54 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 80048b4:	61f8      	str	r0, [r7, #28]
        break;
 80048b6:	e014      	b.n	80048e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048b8:	f7fd fe66 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 80048bc:	61f8      	str	r0, [r7, #28]
        break;
 80048be:	e010      	b.n	80048e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048c0:	4b4d      	ldr	r3, [pc, #308]	@ (80049f8 <UART_SetConfig+0x56c>)
 80048c2:	61fb      	str	r3, [r7, #28]
        break;
 80048c4:	e00d      	b.n	80048e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048c6:	f7fd fdb1 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80048ca:	61f8      	str	r0, [r7, #28]
        break;
 80048cc:	e009      	b.n	80048e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048d2:	61fb      	str	r3, [r7, #28]
        break;
 80048d4:	e005      	b.n	80048e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d077      	beq.n	80049d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	005a      	lsls	r2, r3, #1
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	085b      	lsrs	r3, r3, #1
 80048f2:	441a      	add	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80048fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	2b0f      	cmp	r3, #15
 8004902:	d916      	bls.n	8004932 <UART_SetConfig+0x4a6>
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800490a:	d212      	bcs.n	8004932 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	b29b      	uxth	r3, r3
 8004910:	f023 030f 	bic.w	r3, r3, #15
 8004914:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	085b      	lsrs	r3, r3, #1
 800491a:	b29b      	uxth	r3, r3
 800491c:	f003 0307 	and.w	r3, r3, #7
 8004920:	b29a      	uxth	r2, r3
 8004922:	8afb      	ldrh	r3, [r7, #22]
 8004924:	4313      	orrs	r3, r2
 8004926:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	8afa      	ldrh	r2, [r7, #22]
 800492e:	60da      	str	r2, [r3, #12]
 8004930:	e052      	b.n	80049d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004938:	e04e      	b.n	80049d8 <UART_SetConfig+0x54c>
      }
=======
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	@ 0x28
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	603b      	str	r3, [r7, #0]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d177      	bne.n	8003dac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d002      	beq.n	8003cc8 <HAL_UART_Transmit+0x24>
 8003cc2:	88fb      	ldrh	r3, [r7, #6]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e070      	b.n	8003dae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2221      	movs	r2, #33	@ 0x21
 8003cd8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cda:	f7fd faed 	bl	80012b8 <HAL_GetTick>
 8003cde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	88fa      	ldrh	r2, [r7, #6]
 8003ce4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	88fa      	ldrh	r2, [r7, #6]
 8003cec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cf8:	d108      	bne.n	8003d0c <HAL_UART_Transmit+0x68>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d104      	bne.n	8003d0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	61bb      	str	r3, [r7, #24]
 8003d0a:	e003      	b.n	8003d14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d14:	e02f      	b.n	8003d76 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2180      	movs	r1, #128	@ 0x80
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 ffbd 	bl	8004ca0 <UART_WaitOnFlagUntilTimeout>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d004      	beq.n	8003d36 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e03b      	b.n	8003dae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d10b      	bne.n	8003d54 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d48:	b292      	uxth	r2, r2
 8003d4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	3302      	adds	r3, #2
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	e007      	b.n	8003d64 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	3301      	adds	r3, #1
 8003d62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	3b01      	subs	r3, #1
 8003d6e:	b29a      	uxth	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1c9      	bne.n	8003d16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	9300      	str	r3, [sp, #0]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	2140      	movs	r1, #64	@ 0x40
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 ff87 	bl	8004ca0 <UART_WaitOnFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e005      	b.n	8003dae <HAL_UART_Transmit+0x10a>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2220      	movs	r2, #32
 8003da6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003da8:	2300      	movs	r3, #0
 8003daa:	e000      	b.n	8003dae <HAL_UART_Transmit+0x10a>
  }
  else
  {
<<<<<<< HEAD
    switch (clocksource)
 800493a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800493e:	2b08      	cmp	r3, #8
 8004940:	d827      	bhi.n	8004992 <UART_SetConfig+0x506>
 8004942:	a201      	add	r2, pc, #4	@ (adr r2, 8004948 <UART_SetConfig+0x4bc>)
 8004944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004948:	0800496d 	.word	0x0800496d
 800494c:	08004975 	.word	0x08004975
 8004950:	0800497d 	.word	0x0800497d
 8004954:	08004993 	.word	0x08004993
 8004958:	08004983 	.word	0x08004983
 800495c:	08004993 	.word	0x08004993
 8004960:	08004993 	.word	0x08004993
 8004964:	08004993 	.word	0x08004993
 8004968:	0800498b 	.word	0x0800498b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800496c:	f7fd fdf6 	bl	800255c <HAL_RCC_GetPCLK1Freq>
 8004970:	61f8      	str	r0, [r7, #28]
        break;
 8004972:	e014      	b.n	800499e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004974:	f7fd fe08 	bl	8002588 <HAL_RCC_GetPCLK2Freq>
 8004978:	61f8      	str	r0, [r7, #28]
        break;
 800497a:	e010      	b.n	800499e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800497c:	4b1e      	ldr	r3, [pc, #120]	@ (80049f8 <UART_SetConfig+0x56c>)
 800497e:	61fb      	str	r3, [r7, #28]
        break;
 8004980:	e00d      	b.n	800499e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004982:	f7fd fd53 	bl	800242c <HAL_RCC_GetSysClockFreq>
 8004986:	61f8      	str	r0, [r7, #28]
        break;
 8004988:	e009      	b.n	800499e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800498a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800498e:	61fb      	str	r3, [r7, #28]
        break;
 8004990:	e005      	b.n	800499e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004992:	2300      	movs	r3, #0
 8004994:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800499c:	bf00      	nop
    }

    if (pclk != 0U)
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d019      	beq.n	80049d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	085a      	lsrs	r2, r3, #1
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	441a      	add	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b0f      	cmp	r3, #15
 80049bc:	d909      	bls.n	80049d2 <UART_SetConfig+0x546>
 80049be:	69bb      	ldr	r3, [r7, #24]
 80049c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049c4:	d205      	bcs.n	80049d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	60da      	str	r2, [r3, #12]
 80049d0:	e002      	b.n	80049d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2200      	movs	r2, #0
 80049dc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049e4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3728      	adds	r7, #40	@ 0x28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049f2:	bf00      	nop
 80049f4:	40008000 	.word	0x40008000
 80049f8:	00f42400 	.word	0x00f42400

080049fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	430a      	orrs	r2, r1
 8004a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6e:	f003 0304 	and.w	r3, r3, #4
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab2:	f003 0320 	and.w	r3, r3, #32
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01a      	beq.n	8004b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004afa:	d10a      	bne.n	8004b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	430a      	orrs	r2, r1
 8004b32:	605a      	str	r2, [r3, #4]
  }
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
=======
    return HAL_BUSY;
 8003dac:	2302      	movs	r3, #2
  }
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3720      	adds	r7, #32
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
<<<<<<< HEAD
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b098      	sub	sp, #96	@ 0x60
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b50:	f7fc fc58 	bl	8001404 <HAL_GetTick>
 8004b54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0308 	and.w	r3, r3, #8
 8004b60:	2b08      	cmp	r3, #8
 8004b62:	d12e      	bne.n	8004bc2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f88c 	bl	8004c90 <UART_WaitOnFlagUntilTimeout>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d021      	beq.n	8004bc2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	63bb      	str	r3, [r7, #56]	@ 0x38
=======
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b08a      	sub	sp, #40	@ 0x28
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d137      	bne.n	8003e40 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_UART_Receive_IT+0x24>
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d101      	bne.n	8003de0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	e030      	b.n	8003e42 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a18      	ldr	r2, [pc, #96]	@ (8003e4c <HAL_UART_Receive_IT+0x94>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d01f      	beq.n	8003e30 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d018      	beq.n	8003e30 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	617b      	str	r3, [r7, #20]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8004b84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b92:	653b      	str	r3, [r7, #80]	@ 0x50
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004b9e:	643a      	str	r2, [r7, #64]	@ 0x40
=======
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	e853 3f00 	ldrex	r3, [r3]
 8003e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e1c:	623b      	str	r3, [r7, #32]
 8003e1e:	61fa      	str	r2, [r7, #28]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8004ba0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ba2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e6      	bne.n	8004b7e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e062      	b.n	8004c88 <UART_CheckIdleState+0x148>
=======
 8003e20:	69f9      	ldr	r1, [r7, #28]
 8003e22:	6a3a      	ldr	r2, [r7, #32]
 8003e24:	e841 2300 	strex	r3, r2, [r1]
 8003e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1e6      	bne.n	8003dfe <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e30:	88fb      	ldrh	r3, [r7, #6]
 8003e32:	461a      	mov	r2, r3
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 ffa0 	bl	8004d7c <UART_Start_Receive_IT>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	e000      	b.n	8003e42 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3728      	adds	r7, #40	@ 0x28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40008000 	.word	0x40008000

08003e50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b0ba      	sub	sp, #232	@ 0xe8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003e76:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003e7a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003e7e:	4013      	ands	r3, r2
 8003e80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003e84:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d115      	bne.n	8003eb8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003e8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e90:	f003 0320 	and.w	r3, r3, #32
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00f      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003e98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e9c:	f003 0320 	and.w	r3, r3, #32
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d009      	beq.n	8003eb8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f000 82ca 	beq.w	8004442 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4798      	blx	r3
      }
      return;
 8003eb6:	e2c4      	b.n	8004442 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003eb8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8117 	beq.w	80040f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003ec2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003ece:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003ed2:	4b85      	ldr	r3, [pc, #532]	@ (80040e8 <HAL_UART_IRQHandler+0x298>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 810a 	beq.w	80040f0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d011      	beq.n	8003f0c <HAL_UART_IRQHandler+0xbc>
 8003ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00b      	beq.n	8003f0c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2201      	movs	r2, #1
 8003efa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f02:	f043 0201 	orr.w	r2, r3, #1
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d011      	beq.n	8003f3c <HAL_UART_IRQHandler+0xec>
 8003f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00b      	beq.n	8003f3c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2202      	movs	r2, #2
 8003f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f32:	f043 0204 	orr.w	r2, r3, #4
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d011      	beq.n	8003f6c <HAL_UART_IRQHandler+0x11c>
 8003f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00b      	beq.n	8003f6c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2204      	movs	r2, #4
 8003f5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f62:	f043 0202 	orr.w	r2, r3, #2
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003f6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f70:	f003 0308 	and.w	r3, r3, #8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d017      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d105      	bne.n	8003f90 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f88:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d00b      	beq.n	8003fa8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2208      	movs	r2, #8
 8003f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f9e:	f043 0208 	orr.w	r2, r3, #8
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d012      	beq.n	8003fda <HAL_UART_IRQHandler+0x18a>
 8003fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fb8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00c      	beq.n	8003fda <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003fc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fd0:	f043 0220 	orr.w	r2, r3, #32
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8230 	beq.w	8004446 <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d00d      	beq.n	800400e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff6:	f003 0320 	and.w	r3, r3, #32
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d007      	beq.n	800400e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004002:	2b00      	cmp	r3, #0
 8004004:	d003      	beq.n	800400e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004014:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004022:	2b40      	cmp	r3, #64	@ 0x40
 8004024:	d005      	beq.n	8004032 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800402a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800402e:	2b00      	cmp	r3, #0
 8004030:	d04f      	beq.n	80040d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f000 ff68 	bl	8004f08 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004042:	2b40      	cmp	r3, #64	@ 0x40
 8004044:	d141      	bne.n	80040ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3308      	adds	r3, #8
 800404c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004050:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004054:	e853 3f00 	ldrex	r3, [r3]
 8004058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800405c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3308      	adds	r3, #8
 800406e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004072:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004076:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800407e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800408a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1d9      	bne.n	8004046 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004096:	2b00      	cmp	r3, #0
 8004098:	d013      	beq.n	80040c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800409e:	4a13      	ldr	r2, [pc, #76]	@ (80040ec <HAL_UART_IRQHandler+0x29c>)
 80040a0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fd fa85 	bl	80015b6 <HAL_DMA_Abort_IT>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d017      	beq.n	80040e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80040bc:	4610      	mov	r0, r2
 80040be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c0:	e00f      	b.n	80040e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f9d4 	bl	8004470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040c8:	e00b      	b.n	80040e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f9d0 	bl	8004470 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	e007      	b.n	80040e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f000 f9cc 	bl	8004470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80040e0:	e1b1      	b.n	8004446 <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e2:	bf00      	nop
    return;
 80040e4:	e1af      	b.n	8004446 <HAL_UART_IRQHandler+0x5f6>
 80040e6:	bf00      	nop
 80040e8:	04000120 	.word	0x04000120
 80040ec:	08004fd1 	.word	0x08004fd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	f040 816a 	bne.w	80043ce <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040fe:	f003 0310 	and.w	r3, r3, #16
 8004102:	2b00      	cmp	r3, #0
 8004104:	f000 8163 	beq.w	80043ce <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800410c:	f003 0310 	and.w	r3, r3, #16
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 815c 	beq.w	80043ce <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2210      	movs	r2, #16
 800411c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004128:	2b40      	cmp	r3, #64	@ 0x40
 800412a:	f040 80d4 	bne.w	80042d6 <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800413a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 80ad 	beq.w	800429e <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800414a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800414e:	429a      	cmp	r2, r3
 8004150:	f080 80a5 	bcs.w	800429e <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800415a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0320 	and.w	r3, r3, #32
 800416a:	2b00      	cmp	r3, #0
 800416c:	f040 8086 	bne.w	800427c <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800417c:	e853 3f00 	ldrex	r3, [r3]
 8004180:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004184:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800418c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800419a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800419e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80041a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80041aa:	e841 2300 	strex	r3, r2, [r1]
 80041ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80041b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1da      	bne.n	8004170 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	3308      	adds	r3, #8
 80041da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e1      	bne.n	80041ba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3308      	adds	r3, #8
 80041fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004206:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004208:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800420c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3308      	adds	r3, #8
 8004216:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800421a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800421c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004220:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004222:	e841 2300 	strex	r3, r2, [r1]
 8004226:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004228:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1e3      	bne.n	80041f6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2220      	movs	r2, #32
 8004232:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004242:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004244:	e853 3f00 	ldrex	r3, [r3]
 8004248:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800424a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800424c:	f023 0310 	bic.w	r3, r3, #16
 8004250:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	461a      	mov	r2, r3
 800425a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800425e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004260:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004262:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004264:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004266:	e841 2300 	strex	r3, r2, [r1]
 800426a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800426c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1e4      	bne.n	800423c <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004276:	4618      	mov	r0, r3
 8004278:	f7fd f95f 	bl	800153a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800428e:	b29b      	uxth	r3, r3
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	b29b      	uxth	r3, r3
 8004294:	4619      	mov	r1, r3
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f8f4 	bl	8004484 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800429c:	e0d5      	b.n	800444a <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80042a8:	429a      	cmp	r2, r3
 80042aa:	f040 80ce 	bne.w	800444a <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0320 	and.w	r3, r3, #32
 80042ba:	2b20      	cmp	r3, #32
 80042bc:	f040 80c5 	bne.w	800444a <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80042cc:	4619      	mov	r1, r3
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f000 f8d8 	bl	8004484 <HAL_UARTEx_RxEventCallback>
      return;
 80042d4:	e0b9      	b.n	800444a <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	f000 80ab 	beq.w	800444e <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80042f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	f000 80a6 	beq.w	800444e <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800430a:	e853 3f00 	ldrex	r3, [r3]
 800430e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004312:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004316:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004324:	647b      	str	r3, [r7, #68]	@ 0x44
 8004326:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004328:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800432a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800432c:	e841 2300 	strex	r3, r2, [r1]
 8004330:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004332:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d1e4      	bne.n	8004302 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3308      	adds	r3, #8
 800433e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004342:	e853 3f00 	ldrex	r3, [r3]
 8004346:	623b      	str	r3, [r7, #32]
   return(result);
 8004348:	6a3b      	ldr	r3, [r7, #32]
 800434a:	f023 0301 	bic.w	r3, r3, #1
 800434e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3308      	adds	r3, #8
 8004358:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800435c:	633a      	str	r2, [r7, #48]	@ 0x30
 800435e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004360:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004362:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004364:	e841 2300 	strex	r3, r2, [r1]
 8004368:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800436a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1e3      	bne.n	8004338 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2220      	movs	r2, #32
 8004374:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2200      	movs	r2, #0
 800437c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	e853 3f00 	ldrex	r3, [r3]
 8004390:	60fb      	str	r3, [r7, #12]
   return(result);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f023 0310 	bic.w	r3, r3, #16
 8004398:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80043a6:	61fb      	str	r3, [r7, #28]
 80043a8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	69b9      	ldr	r1, [r7, #24]
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	617b      	str	r3, [r7, #20]
   return(result);
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e4      	bne.n	8004384 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2202      	movs	r2, #2
 80043be:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f85c 	bl	8004484 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043cc:	e03f      	b.n	800444e <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00e      	beq.n	80043f8 <HAL_UART_IRQHandler+0x5a8>
 80043da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d008      	beq.n	80043f8 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80043ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f000 ffe9 	bl	80053c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80043f6:	e02d      	b.n	8004454 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80043f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00e      	beq.n	8004422 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004408:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d01c      	beq.n	8004452 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	4798      	blx	r3
    }
    return;
 8004420:	e017      	b.n	8004452 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004426:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d012      	beq.n	8004454 <HAL_UART_IRQHandler+0x604>
 800442e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004436:	2b00      	cmp	r3, #0
 8004438:	d00c      	beq.n	8004454 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 fdde 	bl	8004ffc <UART_EndTransmit_IT>
    return;
 8004440:	e008      	b.n	8004454 <HAL_UART_IRQHandler+0x604>
      return;
 8004442:	bf00      	nop
 8004444:	e006      	b.n	8004454 <HAL_UART_IRQHandler+0x604>
    return;
 8004446:	bf00      	nop
 8004448:	e004      	b.n	8004454 <HAL_UART_IRQHandler+0x604>
      return;
 800444a:	bf00      	nop
 800444c:	e002      	b.n	8004454 <HAL_UART_IRQHandler+0x604>
      return;
 800444e:	bf00      	nop
 8004450:	e000      	b.n	8004454 <HAL_UART_IRQHandler+0x604>
    return;
 8004452:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004454:	37e8      	adds	r7, #232	@ 0xe8
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop

0800445c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800449c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044a0:	b08a      	sub	sp, #40	@ 0x28
 80044a2:	af00      	add	r7, sp, #0
 80044a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044a6:	2300      	movs	r3, #0
 80044a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	689a      	ldr	r2, [r3, #8]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	431a      	orrs	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	4ba4      	ldr	r3, [pc, #656]	@ (800475c <UART_SetConfig+0x2c0>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044d4:	430b      	orrs	r3, r1
 80044d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a99      	ldr	r2, [pc, #612]	@ (8004760 <UART_SetConfig+0x2c4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d004      	beq.n	8004508 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004504:	4313      	orrs	r3, r2
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004518:	430a      	orrs	r2, r1
 800451a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a90      	ldr	r2, [pc, #576]	@ (8004764 <UART_SetConfig+0x2c8>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d126      	bne.n	8004574 <UART_SetConfig+0xd8>
 8004526:	4b90      	ldr	r3, [pc, #576]	@ (8004768 <UART_SetConfig+0x2cc>)
 8004528:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452c:	f003 0303 	and.w	r3, r3, #3
 8004530:	2b03      	cmp	r3, #3
 8004532:	d81b      	bhi.n	800456c <UART_SetConfig+0xd0>
 8004534:	a201      	add	r2, pc, #4	@ (adr r2, 800453c <UART_SetConfig+0xa0>)
 8004536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800453a:	bf00      	nop
 800453c:	0800454d 	.word	0x0800454d
 8004540:	0800455d 	.word	0x0800455d
 8004544:	08004555 	.word	0x08004555
 8004548:	08004565 	.word	0x08004565
 800454c:	2301      	movs	r3, #1
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004552:	e116      	b.n	8004782 <UART_SetConfig+0x2e6>
 8004554:	2302      	movs	r3, #2
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455a:	e112      	b.n	8004782 <UART_SetConfig+0x2e6>
 800455c:	2304      	movs	r3, #4
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004562:	e10e      	b.n	8004782 <UART_SetConfig+0x2e6>
 8004564:	2308      	movs	r3, #8
 8004566:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800456a:	e10a      	b.n	8004782 <UART_SetConfig+0x2e6>
 800456c:	2310      	movs	r3, #16
 800456e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004572:	e106      	b.n	8004782 <UART_SetConfig+0x2e6>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a7c      	ldr	r2, [pc, #496]	@ (800476c <UART_SetConfig+0x2d0>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d138      	bne.n	80045f0 <UART_SetConfig+0x154>
 800457e:	4b7a      	ldr	r3, [pc, #488]	@ (8004768 <UART_SetConfig+0x2cc>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004584:	f003 030c 	and.w	r3, r3, #12
 8004588:	2b0c      	cmp	r3, #12
 800458a:	d82d      	bhi.n	80045e8 <UART_SetConfig+0x14c>
 800458c:	a201      	add	r2, pc, #4	@ (adr r2, 8004594 <UART_SetConfig+0xf8>)
 800458e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004592:	bf00      	nop
 8004594:	080045c9 	.word	0x080045c9
 8004598:	080045e9 	.word	0x080045e9
 800459c:	080045e9 	.word	0x080045e9
 80045a0:	080045e9 	.word	0x080045e9
 80045a4:	080045d9 	.word	0x080045d9
 80045a8:	080045e9 	.word	0x080045e9
 80045ac:	080045e9 	.word	0x080045e9
 80045b0:	080045e9 	.word	0x080045e9
 80045b4:	080045d1 	.word	0x080045d1
 80045b8:	080045e9 	.word	0x080045e9
 80045bc:	080045e9 	.word	0x080045e9
 80045c0:	080045e9 	.word	0x080045e9
 80045c4:	080045e1 	.word	0x080045e1
 80045c8:	2300      	movs	r3, #0
 80045ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ce:	e0d8      	b.n	8004782 <UART_SetConfig+0x2e6>
 80045d0:	2302      	movs	r3, #2
 80045d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045d6:	e0d4      	b.n	8004782 <UART_SetConfig+0x2e6>
 80045d8:	2304      	movs	r3, #4
 80045da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045de:	e0d0      	b.n	8004782 <UART_SetConfig+0x2e6>
 80045e0:	2308      	movs	r3, #8
 80045e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045e6:	e0cc      	b.n	8004782 <UART_SetConfig+0x2e6>
 80045e8:	2310      	movs	r3, #16
 80045ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80045ee:	e0c8      	b.n	8004782 <UART_SetConfig+0x2e6>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a5e      	ldr	r2, [pc, #376]	@ (8004770 <UART_SetConfig+0x2d4>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d125      	bne.n	8004646 <UART_SetConfig+0x1aa>
 80045fa:	4b5b      	ldr	r3, [pc, #364]	@ (8004768 <UART_SetConfig+0x2cc>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004600:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004604:	2b30      	cmp	r3, #48	@ 0x30
 8004606:	d016      	beq.n	8004636 <UART_SetConfig+0x19a>
 8004608:	2b30      	cmp	r3, #48	@ 0x30
 800460a:	d818      	bhi.n	800463e <UART_SetConfig+0x1a2>
 800460c:	2b20      	cmp	r3, #32
 800460e:	d00a      	beq.n	8004626 <UART_SetConfig+0x18a>
 8004610:	2b20      	cmp	r3, #32
 8004612:	d814      	bhi.n	800463e <UART_SetConfig+0x1a2>
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <UART_SetConfig+0x182>
 8004618:	2b10      	cmp	r3, #16
 800461a:	d008      	beq.n	800462e <UART_SetConfig+0x192>
 800461c:	e00f      	b.n	800463e <UART_SetConfig+0x1a2>
 800461e:	2300      	movs	r3, #0
 8004620:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004624:	e0ad      	b.n	8004782 <UART_SetConfig+0x2e6>
 8004626:	2302      	movs	r3, #2
 8004628:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800462c:	e0a9      	b.n	8004782 <UART_SetConfig+0x2e6>
 800462e:	2304      	movs	r3, #4
 8004630:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004634:	e0a5      	b.n	8004782 <UART_SetConfig+0x2e6>
 8004636:	2308      	movs	r3, #8
 8004638:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800463c:	e0a1      	b.n	8004782 <UART_SetConfig+0x2e6>
 800463e:	2310      	movs	r3, #16
 8004640:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004644:	e09d      	b.n	8004782 <UART_SetConfig+0x2e6>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a4a      	ldr	r2, [pc, #296]	@ (8004774 <UART_SetConfig+0x2d8>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d125      	bne.n	800469c <UART_SetConfig+0x200>
 8004650:	4b45      	ldr	r3, [pc, #276]	@ (8004768 <UART_SetConfig+0x2cc>)
 8004652:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004656:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800465a:	2bc0      	cmp	r3, #192	@ 0xc0
 800465c:	d016      	beq.n	800468c <UART_SetConfig+0x1f0>
 800465e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004660:	d818      	bhi.n	8004694 <UART_SetConfig+0x1f8>
 8004662:	2b80      	cmp	r3, #128	@ 0x80
 8004664:	d00a      	beq.n	800467c <UART_SetConfig+0x1e0>
 8004666:	2b80      	cmp	r3, #128	@ 0x80
 8004668:	d814      	bhi.n	8004694 <UART_SetConfig+0x1f8>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d002      	beq.n	8004674 <UART_SetConfig+0x1d8>
 800466e:	2b40      	cmp	r3, #64	@ 0x40
 8004670:	d008      	beq.n	8004684 <UART_SetConfig+0x1e8>
 8004672:	e00f      	b.n	8004694 <UART_SetConfig+0x1f8>
 8004674:	2300      	movs	r3, #0
 8004676:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800467a:	e082      	b.n	8004782 <UART_SetConfig+0x2e6>
 800467c:	2302      	movs	r3, #2
 800467e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004682:	e07e      	b.n	8004782 <UART_SetConfig+0x2e6>
 8004684:	2304      	movs	r3, #4
 8004686:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800468a:	e07a      	b.n	8004782 <UART_SetConfig+0x2e6>
 800468c:	2308      	movs	r3, #8
 800468e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004692:	e076      	b.n	8004782 <UART_SetConfig+0x2e6>
 8004694:	2310      	movs	r3, #16
 8004696:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800469a:	e072      	b.n	8004782 <UART_SetConfig+0x2e6>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a35      	ldr	r2, [pc, #212]	@ (8004778 <UART_SetConfig+0x2dc>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d12a      	bne.n	80046fc <UART_SetConfig+0x260>
 80046a6:	4b30      	ldr	r3, [pc, #192]	@ (8004768 <UART_SetConfig+0x2cc>)
 80046a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046b4:	d01a      	beq.n	80046ec <UART_SetConfig+0x250>
 80046b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046ba:	d81b      	bhi.n	80046f4 <UART_SetConfig+0x258>
 80046bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c0:	d00c      	beq.n	80046dc <UART_SetConfig+0x240>
 80046c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046c6:	d815      	bhi.n	80046f4 <UART_SetConfig+0x258>
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <UART_SetConfig+0x238>
 80046cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046d0:	d008      	beq.n	80046e4 <UART_SetConfig+0x248>
 80046d2:	e00f      	b.n	80046f4 <UART_SetConfig+0x258>
 80046d4:	2300      	movs	r3, #0
 80046d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046da:	e052      	b.n	8004782 <UART_SetConfig+0x2e6>
 80046dc:	2302      	movs	r3, #2
 80046de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046e2:	e04e      	b.n	8004782 <UART_SetConfig+0x2e6>
 80046e4:	2304      	movs	r3, #4
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046ea:	e04a      	b.n	8004782 <UART_SetConfig+0x2e6>
 80046ec:	2308      	movs	r3, #8
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046f2:	e046      	b.n	8004782 <UART_SetConfig+0x2e6>
 80046f4:	2310      	movs	r3, #16
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80046fa:	e042      	b.n	8004782 <UART_SetConfig+0x2e6>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a17      	ldr	r2, [pc, #92]	@ (8004760 <UART_SetConfig+0x2c4>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d13a      	bne.n	800477c <UART_SetConfig+0x2e0>
 8004706:	4b18      	ldr	r3, [pc, #96]	@ (8004768 <UART_SetConfig+0x2cc>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004710:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004714:	d01a      	beq.n	800474c <UART_SetConfig+0x2b0>
 8004716:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800471a:	d81b      	bhi.n	8004754 <UART_SetConfig+0x2b8>
 800471c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004720:	d00c      	beq.n	800473c <UART_SetConfig+0x2a0>
 8004722:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004726:	d815      	bhi.n	8004754 <UART_SetConfig+0x2b8>
 8004728:	2b00      	cmp	r3, #0
 800472a:	d003      	beq.n	8004734 <UART_SetConfig+0x298>
 800472c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004730:	d008      	beq.n	8004744 <UART_SetConfig+0x2a8>
 8004732:	e00f      	b.n	8004754 <UART_SetConfig+0x2b8>
 8004734:	2300      	movs	r3, #0
 8004736:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800473a:	e022      	b.n	8004782 <UART_SetConfig+0x2e6>
 800473c:	2302      	movs	r3, #2
 800473e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004742:	e01e      	b.n	8004782 <UART_SetConfig+0x2e6>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800474a:	e01a      	b.n	8004782 <UART_SetConfig+0x2e6>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004752:	e016      	b.n	8004782 <UART_SetConfig+0x2e6>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800475a:	e012      	b.n	8004782 <UART_SetConfig+0x2e6>
 800475c:	efff69f3 	.word	0xefff69f3
 8004760:	40008000 	.word	0x40008000
 8004764:	40013800 	.word	0x40013800
 8004768:	40021000 	.word	0x40021000
 800476c:	40004400 	.word	0x40004400
 8004770:	40004800 	.word	0x40004800
 8004774:	40004c00 	.word	0x40004c00
 8004778:	40005000 	.word	0x40005000
 800477c:	2310      	movs	r3, #16
 800477e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a9f      	ldr	r2, [pc, #636]	@ (8004a04 <UART_SetConfig+0x568>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d17a      	bne.n	8004882 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800478c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004790:	2b08      	cmp	r3, #8
 8004792:	d824      	bhi.n	80047de <UART_SetConfig+0x342>
 8004794:	a201      	add	r2, pc, #4	@ (adr r2, 800479c <UART_SetConfig+0x300>)
 8004796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800479a:	bf00      	nop
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047df 	.word	0x080047df
 80047a4:	080047c9 	.word	0x080047c9
 80047a8:	080047df 	.word	0x080047df
 80047ac:	080047cf 	.word	0x080047cf
 80047b0:	080047df 	.word	0x080047df
 80047b4:	080047df 	.word	0x080047df
 80047b8:	080047df 	.word	0x080047df
 80047bc:	080047d7 	.word	0x080047d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047c0:	f7fd feec 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 80047c4:	61f8      	str	r0, [r7, #28]
        break;
 80047c6:	e010      	b.n	80047ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047c8:	4b8f      	ldr	r3, [pc, #572]	@ (8004a08 <UART_SetConfig+0x56c>)
 80047ca:	61fb      	str	r3, [r7, #28]
        break;
 80047cc:	e00d      	b.n	80047ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047ce:	f7fd fe4d 	bl	800246c <HAL_RCC_GetSysClockFreq>
 80047d2:	61f8      	str	r0, [r7, #28]
        break;
 80047d4:	e009      	b.n	80047ea <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047da:	61fb      	str	r3, [r7, #28]
        break;
 80047dc:	e005      	b.n	80047ea <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80047ea:	69fb      	ldr	r3, [r7, #28]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 80fb 	beq.w	80049e8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	685a      	ldr	r2, [r3, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	4413      	add	r3, r2
 80047fc:	69fa      	ldr	r2, [r7, #28]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d305      	bcc.n	800480e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	429a      	cmp	r2, r3
 800480c:	d903      	bls.n	8004816 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004814:	e0e8      	b.n	80049e8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	2200      	movs	r2, #0
 800481a:	461c      	mov	r4, r3
 800481c:	4615      	mov	r5, r2
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	022b      	lsls	r3, r5, #8
 8004828:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800482c:	0222      	lsls	r2, r4, #8
 800482e:	68f9      	ldr	r1, [r7, #12]
 8004830:	6849      	ldr	r1, [r1, #4]
 8004832:	0849      	lsrs	r1, r1, #1
 8004834:	2000      	movs	r0, #0
 8004836:	4688      	mov	r8, r1
 8004838:	4681      	mov	r9, r0
 800483a:	eb12 0a08 	adds.w	sl, r2, r8
 800483e:	eb43 0b09 	adc.w	fp, r3, r9
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2200      	movs	r2, #0
 8004848:	603b      	str	r3, [r7, #0]
 800484a:	607a      	str	r2, [r7, #4]
 800484c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004850:	4650      	mov	r0, sl
 8004852:	4659      	mov	r1, fp
 8004854:	f7fb fcc0 	bl	80001d8 <__aeabi_uldivmod>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4613      	mov	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004866:	d308      	bcc.n	800487a <UART_SetConfig+0x3de>
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800486e:	d204      	bcs.n	800487a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	60da      	str	r2, [r3, #12]
 8004878:	e0b6      	b.n	80049e8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004880:	e0b2      	b.n	80049e8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800488a:	d15e      	bne.n	800494a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800488c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004890:	2b08      	cmp	r3, #8
 8004892:	d828      	bhi.n	80048e6 <UART_SetConfig+0x44a>
 8004894:	a201      	add	r2, pc, #4	@ (adr r2, 800489c <UART_SetConfig+0x400>)
 8004896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800489a:	bf00      	nop
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c9 	.word	0x080048c9
 80048a4:	080048d1 	.word	0x080048d1
 80048a8:	080048e7 	.word	0x080048e7
 80048ac:	080048d7 	.word	0x080048d7
 80048b0:	080048e7 	.word	0x080048e7
 80048b4:	080048e7 	.word	0x080048e7
 80048b8:	080048e7 	.word	0x080048e7
 80048bc:	080048df 	.word	0x080048df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048c0:	f7fd fe6c 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 80048c4:	61f8      	str	r0, [r7, #28]
        break;
 80048c6:	e014      	b.n	80048f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048c8:	f7fd fe7e 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 80048cc:	61f8      	str	r0, [r7, #28]
        break;
 80048ce:	e010      	b.n	80048f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004a08 <UART_SetConfig+0x56c>)
 80048d2:	61fb      	str	r3, [r7, #28]
        break;
 80048d4:	e00d      	b.n	80048f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048d6:	f7fd fdc9 	bl	800246c <HAL_RCC_GetSysClockFreq>
 80048da:	61f8      	str	r0, [r7, #28]
        break;
 80048dc:	e009      	b.n	80048f2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80048e2:	61fb      	str	r3, [r7, #28]
        break;
 80048e4:	e005      	b.n	80048f2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80048e6:	2300      	movs	r3, #0
 80048e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048ea:	2301      	movs	r3, #1
 80048ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80048f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d077      	beq.n	80049e8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	005a      	lsls	r2, r3, #1
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	085b      	lsrs	r3, r3, #1
 8004902:	441a      	add	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	fbb2 f3f3 	udiv	r3, r2, r3
 800490c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b0f      	cmp	r3, #15
 8004912:	d916      	bls.n	8004942 <UART_SetConfig+0x4a6>
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800491a:	d212      	bcs.n	8004942 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	b29b      	uxth	r3, r3
 8004920:	f023 030f 	bic.w	r3, r3, #15
 8004924:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	085b      	lsrs	r3, r3, #1
 800492a:	b29b      	uxth	r3, r3
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	b29a      	uxth	r2, r3
 8004932:	8afb      	ldrh	r3, [r7, #22]
 8004934:	4313      	orrs	r3, r2
 8004936:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	8afa      	ldrh	r2, [r7, #22]
 800493e:	60da      	str	r2, [r3, #12]
 8004940:	e052      	b.n	80049e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004948:	e04e      	b.n	80049e8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800494a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800494e:	2b08      	cmp	r3, #8
 8004950:	d827      	bhi.n	80049a2 <UART_SetConfig+0x506>
 8004952:	a201      	add	r2, pc, #4	@ (adr r2, 8004958 <UART_SetConfig+0x4bc>)
 8004954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004958:	0800497d 	.word	0x0800497d
 800495c:	08004985 	.word	0x08004985
 8004960:	0800498d 	.word	0x0800498d
 8004964:	080049a3 	.word	0x080049a3
 8004968:	08004993 	.word	0x08004993
 800496c:	080049a3 	.word	0x080049a3
 8004970:	080049a3 	.word	0x080049a3
 8004974:	080049a3 	.word	0x080049a3
 8004978:	0800499b 	.word	0x0800499b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800497c:	f7fd fe0e 	bl	800259c <HAL_RCC_GetPCLK1Freq>
 8004980:	61f8      	str	r0, [r7, #28]
        break;
 8004982:	e014      	b.n	80049ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004984:	f7fd fe20 	bl	80025c8 <HAL_RCC_GetPCLK2Freq>
 8004988:	61f8      	str	r0, [r7, #28]
        break;
 800498a:	e010      	b.n	80049ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800498c:	4b1e      	ldr	r3, [pc, #120]	@ (8004a08 <UART_SetConfig+0x56c>)
 800498e:	61fb      	str	r3, [r7, #28]
        break;
 8004990:	e00d      	b.n	80049ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004992:	f7fd fd6b 	bl	800246c <HAL_RCC_GetSysClockFreq>
 8004996:	61f8      	str	r0, [r7, #28]
        break;
 8004998:	e009      	b.n	80049ae <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800499a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800499e:	61fb      	str	r3, [r7, #28]
        break;
 80049a0:	e005      	b.n	80049ae <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80049ac:	bf00      	nop
    }

    if (pclk != 0U)
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d019      	beq.n	80049e8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	085a      	lsrs	r2, r3, #1
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	441a      	add	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	2b0f      	cmp	r3, #15
 80049cc:	d909      	bls.n	80049e2 <UART_SetConfig+0x546>
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049d4:	d205      	bcs.n	80049e2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	b29a      	uxth	r2, r3
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	60da      	str	r2, [r3, #12]
 80049e0:	e002      	b.n	80049e8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80049f4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3728      	adds	r7, #40	@ 0x28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a02:	bf00      	nop
 8004a04:	40008000 	.word	0x40008000
 8004a08:	00f42400 	.word	0x00f42400

08004a0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	430a      	orrs	r2, r1
 8004a34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	f003 0304 	and.w	r3, r3, #4
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	f003 0310 	and.w	r3, r3, #16
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	f003 0320 	and.w	r3, r3, #32
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	430a      	orrs	r2, r1
 8004ade:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ae4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01a      	beq.n	8004b22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004b0a:	d10a      	bne.n	8004b22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d00a      	beq.n	8004b44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	430a      	orrs	r2, r1
 8004b42:	605a      	str	r2, [r3, #4]
  }
}
 8004b44:	bf00      	nop
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b098      	sub	sp, #96	@ 0x60
 8004b54:	af02      	add	r7, sp, #8
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b60:	f7fc fbaa 	bl	80012b8 <HAL_GetTick>
 8004b64:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d12e      	bne.n	8004bd2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b74:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f88c 	bl	8004ca0 <UART_WaitOnFlagUntilTimeout>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d021      	beq.n	8004bd2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b96:	e853 3f00 	ldrex	r3, [r3]
 8004b9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ba2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	461a      	mov	r2, r3
 8004baa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bac:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004bb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004bb4:	e841 2300 	strex	r3, r2, [r1]
 8004bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d1e6      	bne.n	8004b8e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2220      	movs	r2, #32
 8004bc4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e062      	b.n	8004c98 <UART_CheckIdleState+0x148>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0304 	and.w	r3, r3, #4
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d149      	bne.n	8004c64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 f856 	bl	8004c90 <UART_WaitOnFlagUntilTimeout>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d03c      	beq.n	8004c64 <UART_CheckIdleState+0x124>
=======
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 0304 	and.w	r3, r3, #4
 8004bdc:	2b04      	cmp	r3, #4
 8004bde:	d149      	bne.n	8004c74 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004be0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004be8:	2200      	movs	r2, #0
 8004bea:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f856 	bl	8004ca0 <UART_WaitOnFlagUntilTimeout>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d03c      	beq.n	8004c74 <UART_CheckIdleState+0x124>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	461a      	mov	r2, r3
 8004c06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e6      	bne.n	8004bea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3308      	adds	r3, #8
 8004c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3308      	adds	r3, #8
 8004c3a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c3c:	61fa      	str	r2, [r7, #28]
 8004c3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	69b9      	ldr	r1, [r7, #24]
 8004c42:	69fa      	ldr	r2, [r7, #28]
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	617b      	str	r3, [r7, #20]
   return(result);
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2220      	movs	r2, #32
 8004c54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e011      	b.n	8004c88 <UART_CheckIdleState+0x148>
=======
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	e853 3f00 	ldrex	r3, [r3]
 8004c06:	623b      	str	r3, [r7, #32]
   return(result);
 8004c08:	6a3b      	ldr	r3, [r7, #32]
 8004c0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e6      	bne.n	8004bfa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3308      	adds	r3, #8
 8004c32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	e853 3f00 	ldrex	r3, [r3]
 8004c3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	3308      	adds	r3, #8
 8004c4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c4c:	61fa      	str	r2, [r7, #28]
 8004c4e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c50:	69b9      	ldr	r1, [r7, #24]
 8004c52:	69fa      	ldr	r2, [r7, #28]
 8004c54:	e841 2300 	strex	r3, r2, [r1]
 8004c58:	617b      	str	r3, [r7, #20]
   return(result);
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d1e5      	bne.n	8004c2c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2220      	movs	r2, #32
 8004c64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e011      	b.n	8004c98 <UART_CheckIdleState+0x148>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c86:	2300      	movs	r3, #0
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3758      	adds	r7, #88	@ 0x58
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <UART_WaitOnFlagUntilTimeout>:
=======
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2220      	movs	r2, #32
 8004c78:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2220      	movs	r2, #32
 8004c7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3758      	adds	r7, #88	@ 0x58
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	603b      	str	r3, [r7, #0]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca0:	e04f      	b.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca8:	d04b      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004caa:	f7fc fbab 	bl	8001404 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	69ba      	ldr	r2, [r7, #24]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d302      	bcc.n	8004cc0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d101      	bne.n	8004cc4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e04e      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d037      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2b80      	cmp	r3, #128	@ 0x80
 8004cd6:	d034      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b40      	cmp	r3, #64	@ 0x40
 8004cdc:	d031      	beq.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	69db      	ldr	r3, [r3, #28]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d110      	bne.n	8004d0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	621a      	str	r2, [r3, #32]
=======
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	4613      	mov	r3, r2
 8004cae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cb0:	e04f      	b.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb8:	d04b      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cba:	f7fc fafd 	bl	80012b8 <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	69ba      	ldr	r2, [r7, #24]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d101      	bne.n	8004cd4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e04e      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d037      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b80      	cmp	r3, #128	@ 0x80
 8004ce6:	d034      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b40      	cmp	r3, #64	@ 0x40
 8004cec:	d031      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b08      	cmp	r3, #8
 8004cfa:	d110      	bne.n	8004d1e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2208      	movs	r2, #8
 8004d02:	621a      	str	r2, [r3, #32]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f838 	bl	8004d6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2208      	movs	r2, #8
 8004cfe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e029      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d1c:	d111      	bne.n	8004d42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d26:	621a      	str	r2, [r3, #32]
=======
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f8ff 	bl	8004f08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e029      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d2c:	d111      	bne.n	8004d52 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d36:	621a      	str	r2, [r3, #32]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f81e 	bl	8004d6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2220      	movs	r2, #32
 8004d32:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e00f      	b.n	8004d62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	69da      	ldr	r2, [r3, #28]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	461a      	mov	r2, r3
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d0a0      	beq.n	8004ca2 <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f8e5 	bl	8004f08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e00f      	b.n	8004d72 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	bf0c      	ite	eq
 8004d62:	2301      	moveq	r3, #1
 8004d64:	2300      	movne	r3, #0
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	79fb      	ldrb	r3, [r7, #7]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d0a0      	beq.n	8004cb2 <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <UART_EndRxTransfer>:
=======
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3710      	adds	r7, #16
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
	...

08004d7c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b097      	sub	sp, #92	@ 0x5c
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	60f8      	str	r0, [r7, #12]
 8004d84:	60b9      	str	r1, [r7, #8]
 8004d86:	4613      	mov	r3, r2
 8004d88:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	88fa      	ldrh	r2, [r7, #6]
 8004d94:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	88fa      	ldrh	r2, [r7, #6]
 8004d9c:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dae:	d10e      	bne.n	8004dce <UART_Start_Receive_IT+0x52>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d105      	bne.n	8004dc4 <UART_Start_Receive_IT+0x48>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004dbe:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dc2:	e02d      	b.n	8004e20 <UART_Start_Receive_IT+0xa4>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	22ff      	movs	r2, #255	@ 0xff
 8004dc8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004dcc:	e028      	b.n	8004e20 <UART_Start_Receive_IT+0xa4>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d10d      	bne.n	8004df2 <UART_Start_Receive_IT+0x76>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	691b      	ldr	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d104      	bne.n	8004de8 <UART_Start_Receive_IT+0x6c>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	22ff      	movs	r2, #255	@ 0xff
 8004de2:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004de6:	e01b      	b.n	8004e20 <UART_Start_Receive_IT+0xa4>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	227f      	movs	r2, #127	@ 0x7f
 8004dec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004df0:	e016      	b.n	8004e20 <UART_Start_Receive_IT+0xa4>
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004dfa:	d10d      	bne.n	8004e18 <UART_Start_Receive_IT+0x9c>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d104      	bne.n	8004e0e <UART_Start_Receive_IT+0x92>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	227f      	movs	r2, #127	@ 0x7f
 8004e08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e0c:	e008      	b.n	8004e20 <UART_Start_Receive_IT+0xa4>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	223f      	movs	r2, #63	@ 0x3f
 8004e12:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004e16:	e003      	b.n	8004e20 <UART_Start_Receive_IT+0xa4>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2222      	movs	r2, #34	@ 0x22
 8004e2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	3308      	adds	r3, #8
 8004e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
 8004e3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e42:	f043 0301 	orr.w	r3, r3, #1
 8004e46:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	3308      	adds	r3, #8
 8004e4e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004e50:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004e52:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e54:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004e56:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e58:	e841 2300 	strex	r3, r2, [r1]
 8004e5c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004e5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d1e5      	bne.n	8004e30 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e6c:	d107      	bne.n	8004e7e <UART_Start_Receive_IT+0x102>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	691b      	ldr	r3, [r3, #16]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a21      	ldr	r2, [pc, #132]	@ (8004f00 <UART_Start_Receive_IT+0x184>)
 8004e7a:	669a      	str	r2, [r3, #104]	@ 0x68
 8004e7c:	e002      	b.n	8004e84 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	4a20      	ldr	r2, [pc, #128]	@ (8004f04 <UART_Start_Receive_IT+0x188>)
 8004e82:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d019      	beq.n	8004ec0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eaa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004eac:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004eb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004eb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e6      	bne.n	8004e8c <UART_Start_Receive_IT+0x110>
 8004ebe:	e018      	b.n	8004ef2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	f043 0320 	orr.w	r3, r3, #32
 8004ed4:	653b      	str	r3, [r7, #80]	@ 0x50
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ede:	623b      	str	r3, [r7, #32]
 8004ee0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	69f9      	ldr	r1, [r7, #28]
 8004ee4:	6a3a      	ldr	r2, [r7, #32]
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e6      	bne.n	8004ec0 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	375c      	adds	r7, #92	@ 0x5c
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr
 8004f00:	0800520d 	.word	0x0800520d
 8004f04:	08005051 	.word	0x08005051

08004f08 <UART_EndRxTransfer>:
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004d6a:	b480      	push	{r7}
 8004d6c:	b095      	sub	sp, #84	@ 0x54
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	6078      	str	r0, [r7, #4]
=======
 8004f08:	b480      	push	{r7}
 8004f0a:	b095      	sub	sp, #84	@ 0x54
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d90:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d92:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d98:	e841 2300 	strex	r3, r2, [r1]
 8004d9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1e6      	bne.n	8004d72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	3308      	adds	r3, #8
 8004daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	f023 0301 	bic.w	r3, r3, #1
 8004dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	3308      	adds	r3, #8
 8004dc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004dc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004dca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e5      	bne.n	8004da4 <UART_EndRxTransfer+0x3a>
=======
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f30:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e6      	bne.n	8004f10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3308      	adds	r3, #8
 8004f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	f023 0301 	bic.w	r3, r3, #1
 8004f58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	3308      	adds	r3, #8
 8004f60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f6a:	e841 2300 	strex	r3, r2, [r1]
 8004f6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1e5      	bne.n	8004f42 <UART_EndRxTransfer+0x3a>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
<<<<<<< HEAD
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d118      	bne.n	8004e12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	e853 3f00 	ldrex	r3, [r3]
 8004dec:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f023 0310 	bic.w	r3, r3, #16
 8004df4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	6979      	ldr	r1, [r7, #20]
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	e841 2300 	strex	r3, r2, [r1]
 8004e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d1e6      	bne.n	8004de0 <UART_EndRxTransfer+0x76>
=======
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d118      	bne.n	8004fb0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	e853 3f00 	ldrex	r3, [r3]
 8004f8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f023 0310 	bic.w	r3, r3, #16
 8004f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	461a      	mov	r2, r3
 8004f9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	6979      	ldr	r1, [r7, #20]
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e6      	bne.n	8004f7e <UART_EndRxTransfer+0x76>
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004e26:	bf00      	nop
 8004e28:	3754      	adds	r7, #84	@ 0x54
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <__NVIC_SetPriority>:
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	6039      	str	r1, [r7, #0]
 8004e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	db0a      	blt.n	8004e5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	b2da      	uxtb	r2, r3
 8004e4c:	490c      	ldr	r1, [pc, #48]	@ (8004e80 <__NVIC_SetPriority+0x4c>)
 8004e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e52:	0112      	lsls	r2, r2, #4
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	440b      	add	r3, r1
 8004e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004e5c:	e00a      	b.n	8004e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	4908      	ldr	r1, [pc, #32]	@ (8004e84 <__NVIC_SetPriority+0x50>)
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	3b04      	subs	r3, #4
 8004e6c:	0112      	lsls	r2, r2, #4
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	440b      	add	r3, r1
 8004e72:	761a      	strb	r2, [r3, #24]
}
 8004e74:	bf00      	nop
 8004e76:	370c      	adds	r7, #12
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr
 8004e80:	e000e100 	.word	0xe000e100
 8004e84:	e000ed00 	.word	0xe000ed00

08004e88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e8c:	4b05      	ldr	r3, [pc, #20]	@ (8004ea4 <SysTick_Handler+0x1c>)
 8004e8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e90:	f001 fda8 	bl	80069e4 <xTaskGetSchedulerState>
 8004e94:	4603      	mov	r3, r0
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d001      	beq.n	8004e9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004e9a:	f002 fc5d 	bl	8007758 <xPortSysTickHandler>
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	e000e010 	.word	0xe000e010

08004ea8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004eac:	2100      	movs	r1, #0
 8004eae:	f06f 0004 	mvn.w	r0, #4
 8004eb2:	f7ff ffbf 	bl	8004e34 <__NVIC_SetPriority>
#endif
}
 8004eb6:	bf00      	nop
 8004eb8:	bd80      	pop	{r7, pc}
	...

08004ebc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ec2:	f3ef 8305 	mrs	r3, IPSR
 8004ec6:	603b      	str	r3, [r7, #0]
  return(result);
 8004ec8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d003      	beq.n	8004ed6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004ece:	f06f 0305 	mvn.w	r3, #5
 8004ed2:	607b      	str	r3, [r7, #4]
 8004ed4:	e00c      	b.n	8004ef0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <osKernelInitialize+0x44>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d105      	bne.n	8004eea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004ede:	4b08      	ldr	r3, [pc, #32]	@ (8004f00 <osKernelInitialize+0x44>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	607b      	str	r3, [r7, #4]
 8004ee8:	e002      	b.n	8004ef0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004eea:	f04f 33ff 	mov.w	r3, #4294967295
 8004eee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ef0:	687b      	ldr	r3, [r7, #4]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	370c      	adds	r7, #12
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	200002c4 	.word	0x200002c4

08004f04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f0a:	f3ef 8305 	mrs	r3, IPSR
 8004f0e:	603b      	str	r3, [r7, #0]
  return(result);
 8004f10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d003      	beq.n	8004f1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004f16:	f06f 0305 	mvn.w	r3, #5
 8004f1a:	607b      	str	r3, [r7, #4]
 8004f1c:	e010      	b.n	8004f40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004f1e:	4b0b      	ldr	r3, [pc, #44]	@ (8004f4c <osKernelStart+0x48>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d109      	bne.n	8004f3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004f26:	f7ff ffbf 	bl	8004ea8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004f2a:	4b08      	ldr	r3, [pc, #32]	@ (8004f4c <osKernelStart+0x48>)
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004f30:	f001 f90a 	bl	8006148 <vTaskStartScheduler>
      stat = osOK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	607b      	str	r3, [r7, #4]
 8004f38:	e002      	b.n	8004f40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004f40:	687b      	ldr	r3, [r7, #4]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3708      	adds	r7, #8
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	200002c4 	.word	0x200002c4

08004f50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b08e      	sub	sp, #56	@ 0x38
 8004f54:	af04      	add	r7, sp, #16
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f60:	f3ef 8305 	mrs	r3, IPSR
 8004f64:	617b      	str	r3, [r7, #20]
  return(result);
 8004f66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d17e      	bne.n	800506a <osThreadNew+0x11a>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d07b      	beq.n	800506a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f72:	2380      	movs	r3, #128	@ 0x80
 8004f74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f76:	2318      	movs	r3, #24
 8004f78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d045      	beq.n	8005016 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <osThreadNew+0x48>
        name = attr->name;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <osThreadNew+0x6e>
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	2b38      	cmp	r3, #56	@ 0x38
 8004fb0:	d805      	bhi.n	8004fbe <osThreadNew+0x6e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f003 0301 	and.w	r3, r3, #1
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <osThreadNew+0x72>
        return (NULL);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	e054      	b.n	800506c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	089b      	lsrs	r3, r3, #2
 8004fd0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00e      	beq.n	8004ff8 <osThreadNew+0xa8>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	2b5b      	cmp	r3, #91	@ 0x5b
 8004fe0:	d90a      	bls.n	8004ff8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d006      	beq.n	8004ff8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d002      	beq.n	8004ff8 <osThreadNew+0xa8>
        mem = 1;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	e010      	b.n	800501a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10c      	bne.n	800501a <osThreadNew+0xca>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d108      	bne.n	800501a <osThreadNew+0xca>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d104      	bne.n	800501a <osThreadNew+0xca>
          mem = 0;
 8005010:	2300      	movs	r3, #0
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	e001      	b.n	800501a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005016:	2300      	movs	r3, #0
 8005018:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d110      	bne.n	8005042 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005028:	9202      	str	r2, [sp, #8]
 800502a:	9301      	str	r3, [sp, #4]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	6a3a      	ldr	r2, [r7, #32]
 8005034:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 feaa 	bl	8005d90 <xTaskCreateStatic>
 800503c:	4603      	mov	r3, r0
 800503e:	613b      	str	r3, [r7, #16]
 8005040:	e013      	b.n	800506a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005042:	69bb      	ldr	r3, [r7, #24]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d110      	bne.n	800506a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005048:	6a3b      	ldr	r3, [r7, #32]
 800504a:	b29a      	uxth	r2, r3
 800504c:	f107 0310 	add.w	r3, r7, #16
 8005050:	9301      	str	r3, [sp, #4]
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	9300      	str	r3, [sp, #0]
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 fef8 	bl	8005e50 <xTaskCreate>
 8005060:	4603      	mov	r3, r0
 8005062:	2b01      	cmp	r3, #1
 8005064:	d001      	beq.n	800506a <osThreadNew+0x11a>
            hTask = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800506a:	693b      	ldr	r3, [r7, #16]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3728      	adds	r7, #40	@ 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}

08005074 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005074:	b580      	push	{r7, lr}
 8005076:	b084      	sub	sp, #16
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800507c:	f3ef 8305 	mrs	r3, IPSR
 8005080:	60bb      	str	r3, [r7, #8]
  return(result);
 8005082:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <osDelay+0x1c>
    stat = osErrorISR;
 8005088:	f06f 0305 	mvn.w	r3, #5
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	e007      	b.n	80050a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d002      	beq.n	80050a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f001 f81e 	bl	80060dc <vTaskDelay>
    }
  }

  return (stat);
 80050a0:	68fb      	ldr	r3, [r7, #12]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3710      	adds	r7, #16
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}

080050aa <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f002 f970 	bl	8007398 <pvTimerGetTimerID>
 80050b8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <TimerCallback+0x22>
    callb->func (callb->arg);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	6852      	ldr	r2, [r2, #4]
 80050c8:	4610      	mov	r0, r2
 80050ca:	4798      	blx	r3
  }
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08c      	sub	sp, #48	@ 0x30
 80050d8:	af02      	add	r7, sp, #8
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	607a      	str	r2, [r7, #4]
 80050de:	603b      	str	r3, [r7, #0]
 80050e0:	460b      	mov	r3, r1
 80050e2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80050e4:	2300      	movs	r3, #0
 80050e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e8:	f3ef 8305 	mrs	r3, IPSR
 80050ec:	613b      	str	r3, [r7, #16]
  return(result);
 80050ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d163      	bne.n	80051bc <osTimerNew+0xe8>
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d060      	beq.n	80051bc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80050fa:	2008      	movs	r0, #8
 80050fc:	f002 fbbe 	bl	800787c <pvPortMalloc>
 8005100:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d059      	beq.n	80051bc <osTimerNew+0xe8>
      callb->func = func;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8005114:	7afb      	ldrb	r3, [r7, #11]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d102      	bne.n	8005120 <osTimerNew+0x4c>
        reload = pdFALSE;
 800511a:	2300      	movs	r3, #0
 800511c:	61fb      	str	r3, [r7, #28]
 800511e:	e001      	b.n	8005124 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8005120:	2301      	movs	r3, #1
 8005122:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8005124:	f04f 33ff 	mov.w	r3, #4294967295
 8005128:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	627b      	str	r3, [r7, #36]	@ 0x24

      if (attr != NULL) {
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01c      	beq.n	800516e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d002      	beq.n	8005142 <osTimerNew+0x6e>
          name = attr->name;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d006      	beq.n	8005158 <osTimerNew+0x84>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	2b2b      	cmp	r3, #43	@ 0x2b
 8005150:	d902      	bls.n	8005158 <osTimerNew+0x84>
          mem = 1;
 8005152:	2301      	movs	r3, #1
 8005154:	61bb      	str	r3, [r7, #24]
 8005156:	e00c      	b.n	8005172 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d108      	bne.n	8005172 <osTimerNew+0x9e>
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d104      	bne.n	8005172 <osTimerNew+0x9e>
            mem = 0;
 8005168:	2300      	movs	r3, #0
 800516a:	61bb      	str	r3, [r7, #24]
 800516c:	e001      	b.n	8005172 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800516e:	2300      	movs	r3, #0
 8005170:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d10c      	bne.n	8005192 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	9301      	str	r3, [sp, #4]
 800517e:	4b12      	ldr	r3, [pc, #72]	@ (80051c8 <osTimerNew+0xf4>)
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	2101      	movs	r1, #1
 8005188:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800518a:	f001 fd78 	bl	8006c7e <xTimerCreateStatic>
 800518e:	6238      	str	r0, [r7, #32]
 8005190:	e00b      	b.n	80051aa <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d108      	bne.n	80051aa <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8005198:	4b0b      	ldr	r3, [pc, #44]	@ (80051c8 <osTimerNew+0xf4>)
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	69fa      	ldr	r2, [r7, #28]
 80051a0:	2101      	movs	r1, #1
 80051a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051a4:	f001 fd4a 	bl	8006c3c <xTimerCreate>
 80051a8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d105      	bne.n	80051bc <osTimerNew+0xe8>
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <osTimerNew+0xe8>
        vPortFree (callb);
 80051b6:	6978      	ldr	r0, [r7, #20]
 80051b8:	f002 fc2e 	bl	8007a18 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80051bc:	6a3b      	ldr	r3, [r7, #32]
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3728      	adds	r7, #40	@ 0x28
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	080050ab 	.word	0x080050ab

080051cc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051cc:	b480      	push	{r7}
 80051ce:	b085      	sub	sp, #20
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	4a07      	ldr	r2, [pc, #28]	@ (80051f8 <vApplicationGetIdleTaskMemory+0x2c>)
 80051dc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	4a06      	ldr	r2, [pc, #24]	@ (80051fc <vApplicationGetIdleTaskMemory+0x30>)
 80051e2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2280      	movs	r2, #128	@ 0x80
 80051e8:	601a      	str	r2, [r3, #0]
}
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
 80051f6:	bf00      	nop
 80051f8:	200002c8 	.word	0x200002c8
 80051fc:	20000324 	.word	0x20000324

08005200 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005200:	b480      	push	{r7}
 8005202:	b085      	sub	sp, #20
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4a07      	ldr	r2, [pc, #28]	@ (800522c <vApplicationGetTimerTaskMemory+0x2c>)
 8005210:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	4a06      	ldr	r2, [pc, #24]	@ (8005230 <vApplicationGetTimerTaskMemory+0x30>)
 8005216:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800521e:	601a      	str	r2, [r3, #0]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr
 800522c:	20000524 	.word	0x20000524
 8005230:	20000580 	.word	0x20000580

08005234 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f103 0208 	add.w	r2, r3, #8
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f04f 32ff 	mov.w	r2, #4294967295
 800524c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f103 0208 	add.w	r2, r3, #8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f103 0208 	add.w	r2, r3, #8
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005282:	bf00      	nop
 8005284:	370c      	adds	r7, #12
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800528e:	b480      	push	{r7}
 8005290:	b085      	sub	sp, #20
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
 8005296:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	601a      	str	r2, [r3, #0]
}
 80052ca:	bf00      	nop
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr

080052d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80052d6:	b480      	push	{r7}
 80052d8:	b085      	sub	sp, #20
 80052da:	af00      	add	r7, sp, #0
 80052dc:	6078      	str	r0, [r7, #4]
 80052de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ec:	d103      	bne.n	80052f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	e00c      	b.n	8005310 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3308      	adds	r3, #8
 80052fa:	60fb      	str	r3, [r7, #12]
 80052fc:	e002      	b.n	8005304 <vListInsert+0x2e>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	60fb      	str	r3, [r7, #12]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	429a      	cmp	r2, r3
 800530e:	d2f6      	bcs.n	80052fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	685a      	ldr	r2, [r3, #4]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	1c5a      	adds	r2, r3, #1
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	601a      	str	r2, [r3, #0]
}
 800533c:	bf00      	nop
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005348:	b480      	push	{r7}
 800534a:	b085      	sub	sp, #20
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6892      	ldr	r2, [r2, #8]
 800535e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	6852      	ldr	r2, [r2, #4]
 8005368:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	429a      	cmp	r2, r3
 8005372:	d103      	bne.n	800537c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	1e5a      	subs	r2, r3, #1
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3714      	adds	r7, #20
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10b      	bne.n	80053c8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80053c2:	bf00      	nop
 80053c4:	bf00      	nop
 80053c6:	e7fd      	b.n	80053c4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80053c8:	f002 f936 	bl	8007638 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681a      	ldr	r2, [r3, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053d4:	68f9      	ldr	r1, [r7, #12]
 80053d6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	441a      	add	r2, r3
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f8:	3b01      	subs	r3, #1
 80053fa:	68f9      	ldr	r1, [r7, #12]
 80053fc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80053fe:	fb01 f303 	mul.w	r3, r1, r3
 8005402:	441a      	add	r2, r3
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	22ff      	movs	r2, #255	@ 0xff
 800540c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	22ff      	movs	r2, #255	@ 0xff
 8005414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d114      	bne.n	8005448 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d01a      	beq.n	800545c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3310      	adds	r3, #16
 800542a:	4618      	mov	r0, r3
 800542c:	f001 f91a 	bl	8006664 <xTaskRemoveFromEventList>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d012      	beq.n	800545c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005436:	4b0d      	ldr	r3, [pc, #52]	@ (800546c <xQueueGenericReset+0xd0>)
 8005438:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	e009      	b.n	800545c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3310      	adds	r3, #16
 800544c:	4618      	mov	r0, r3
 800544e:	f7ff fef1 	bl	8005234 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3324      	adds	r3, #36	@ 0x24
 8005456:	4618      	mov	r0, r3
 8005458:	f7ff feec 	bl	8005234 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800545c:	f002 f91e 	bl	800769c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005460:	2301      	movs	r3, #1
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	e000ed04 	.word	0xe000ed04

08005470 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08e      	sub	sp, #56	@ 0x38
 8005474:	af02      	add	r7, sp, #8
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
 800547c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10b      	bne.n	800549c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005496:	bf00      	nop
 8005498:	bf00      	nop
 800549a:	e7fd      	b.n	8005498 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10b      	bne.n	80054ba <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80054a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a6:	f383 8811 	msr	BASEPRI, r3
 80054aa:	f3bf 8f6f 	isb	sy
 80054ae:	f3bf 8f4f 	dsb	sy
 80054b2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80054b4:	bf00      	nop
 80054b6:	bf00      	nop
 80054b8:	e7fd      	b.n	80054b6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <xQueueGenericCreateStatic+0x56>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d001      	beq.n	80054ca <xQueueGenericCreateStatic+0x5a>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <xQueueGenericCreateStatic+0x5c>
 80054ca:	2300      	movs	r3, #0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d10b      	bne.n	80054e8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80054d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d4:	f383 8811 	msr	BASEPRI, r3
 80054d8:	f3bf 8f6f 	isb	sy
 80054dc:	f3bf 8f4f 	dsb	sy
 80054e0:	623b      	str	r3, [r7, #32]
}
 80054e2:	bf00      	nop
 80054e4:	bf00      	nop
 80054e6:	e7fd      	b.n	80054e4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d102      	bne.n	80054f4 <xQueueGenericCreateStatic+0x84>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <xQueueGenericCreateStatic+0x88>
 80054f4:	2301      	movs	r3, #1
 80054f6:	e000      	b.n	80054fa <xQueueGenericCreateStatic+0x8a>
 80054f8:	2300      	movs	r3, #0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10b      	bne.n	8005516 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80054fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005502:	f383 8811 	msr	BASEPRI, r3
 8005506:	f3bf 8f6f 	isb	sy
 800550a:	f3bf 8f4f 	dsb	sy
 800550e:	61fb      	str	r3, [r7, #28]
}
 8005510:	bf00      	nop
 8005512:	bf00      	nop
 8005514:	e7fd      	b.n	8005512 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005516:	2350      	movs	r3, #80	@ 0x50
 8005518:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	2b50      	cmp	r3, #80	@ 0x50
 800551e:	d00b      	beq.n	8005538 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	61bb      	str	r3, [r7, #24]
}
 8005532:	bf00      	nop
 8005534:	bf00      	nop
 8005536:	e7fd      	b.n	8005534 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005538:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800553e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00d      	beq.n	8005560 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800554c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005552:	9300      	str	r3, [sp, #0]
 8005554:	4613      	mov	r3, r2
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	68f8      	ldr	r0, [r7, #12]
 800555c:	f000 f805 	bl	800556a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005562:	4618      	mov	r0, r3
 8005564:	3730      	adds	r7, #48	@ 0x30
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800556a:	b580      	push	{r7, lr}
 800556c:	b084      	sub	sp, #16
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
 8005576:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d103      	bne.n	8005586 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	69ba      	ldr	r2, [r7, #24]
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	e002      	b.n	800558c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005586:	69bb      	ldr	r3, [r7, #24]
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	68ba      	ldr	r2, [r7, #8]
 8005596:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005598:	2101      	movs	r1, #1
 800559a:	69b8      	ldr	r0, [r7, #24]
 800559c:	f7ff fefe 	bl	800539c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	78fa      	ldrb	r2, [r7, #3]
 80055a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80055a8:	bf00      	nop
 80055aa:	3710      	adds	r7, #16
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}

080055b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b08e      	sub	sp, #56	@ 0x38
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80055be:	2300      	movs	r3, #0
 80055c0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80055c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d10b      	bne.n	80055e4 <xQueueGenericSend+0x34>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055de:	bf00      	nop
 80055e0:	bf00      	nop
 80055e2:	e7fd      	b.n	80055e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d103      	bne.n	80055f2 <xQueueGenericSend+0x42>
 80055ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <xQueueGenericSend+0x46>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e000      	b.n	80055f8 <xQueueGenericSend+0x48>
 80055f6:	2300      	movs	r3, #0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10b      	bne.n	8005614 <xQueueGenericSend+0x64>
	__asm volatile
 80055fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005600:	f383 8811 	msr	BASEPRI, r3
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	f3bf 8f4f 	dsb	sy
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800560e:	bf00      	nop
 8005610:	bf00      	nop
 8005612:	e7fd      	b.n	8005610 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d103      	bne.n	8005622 <xQueueGenericSend+0x72>
 800561a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561e:	2b01      	cmp	r3, #1
 8005620:	d101      	bne.n	8005626 <xQueueGenericSend+0x76>
 8005622:	2301      	movs	r3, #1
 8005624:	e000      	b.n	8005628 <xQueueGenericSend+0x78>
 8005626:	2300      	movs	r3, #0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d10b      	bne.n	8005644 <xQueueGenericSend+0x94>
	__asm volatile
 800562c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005630:	f383 8811 	msr	BASEPRI, r3
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	f3bf 8f4f 	dsb	sy
 800563c:	623b      	str	r3, [r7, #32]
}
 800563e:	bf00      	nop
 8005640:	bf00      	nop
 8005642:	e7fd      	b.n	8005640 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005644:	f001 f9ce 	bl	80069e4 <xTaskGetSchedulerState>
 8005648:	4603      	mov	r3, r0
 800564a:	2b00      	cmp	r3, #0
 800564c:	d102      	bne.n	8005654 <xQueueGenericSend+0xa4>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <xQueueGenericSend+0xa8>
 8005654:	2301      	movs	r3, #1
 8005656:	e000      	b.n	800565a <xQueueGenericSend+0xaa>
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10b      	bne.n	8005676 <xQueueGenericSend+0xc6>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	61fb      	str	r3, [r7, #28]
}
 8005670:	bf00      	nop
 8005672:	bf00      	nop
 8005674:	e7fd      	b.n	8005672 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005676:	f001 ffdf 	bl	8007638 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800567a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800567c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800567e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005682:	429a      	cmp	r2, r3
 8005684:	d302      	bcc.n	800568c <xQueueGenericSend+0xdc>
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	2b02      	cmp	r3, #2
 800568a:	d129      	bne.n	80056e0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	68b9      	ldr	r1, [r7, #8]
 8005690:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005692:	f000 fa0f 	bl	8005ab4 <prvCopyDataToQueue>
 8005696:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800569a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569c:	2b00      	cmp	r3, #0
 800569e:	d010      	beq.n	80056c2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a2:	3324      	adds	r3, #36	@ 0x24
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 ffdd 	bl	8006664 <xTaskRemoveFromEventList>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d013      	beq.n	80056d8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80056b0:	4b3f      	ldr	r3, [pc, #252]	@ (80057b0 <xQueueGenericSend+0x200>)
 80056b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	f3bf 8f4f 	dsb	sy
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	e00a      	b.n	80056d8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80056c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d007      	beq.n	80056d8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80056c8:	4b39      	ldr	r3, [pc, #228]	@ (80057b0 <xQueueGenericSend+0x200>)
 80056ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80056d8:	f001 ffe0 	bl	800769c <vPortExitCritical>
				return pdPASS;
 80056dc:	2301      	movs	r3, #1
 80056de:	e063      	b.n	80057a8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d103      	bne.n	80056ee <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056e6:	f001 ffd9 	bl	800769c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80056ea:	2300      	movs	r3, #0
 80056ec:	e05c      	b.n	80057a8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d106      	bne.n	8005702 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056f4:	f107 0314 	add.w	r3, r7, #20
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 f817 	bl	800672c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056fe:	2301      	movs	r3, #1
 8005700:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005702:	f001 ffcb 	bl	800769c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005706:	f000 fd87 	bl	8006218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800570a:	f001 ff95 	bl	8007638 <vPortEnterCritical>
 800570e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005710:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005714:	b25b      	sxtb	r3, r3
 8005716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571a:	d103      	bne.n	8005724 <xQueueGenericSend+0x174>
 800571c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571e:	2200      	movs	r2, #0
 8005720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005726:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800572a:	b25b      	sxtb	r3, r3
 800572c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005730:	d103      	bne.n	800573a <xQueueGenericSend+0x18a>
 8005732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800573a:	f001 ffaf 	bl	800769c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800573e:	1d3a      	adds	r2, r7, #4
 8005740:	f107 0314 	add.w	r3, r7, #20
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f001 f806 	bl	8006758 <xTaskCheckForTimeOut>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d124      	bne.n	800579c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005752:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005754:	f000 faa6 	bl	8005ca4 <prvIsQueueFull>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	d018      	beq.n	8005790 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800575e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005760:	3310      	adds	r3, #16
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	4611      	mov	r1, r2
 8005766:	4618      	mov	r0, r3
 8005768:	f000 ff2a 	bl	80065c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800576c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800576e:	f000 fa31 	bl	8005bd4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005772:	f000 fd5f 	bl	8006234 <xTaskResumeAll>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	f47f af7c 	bne.w	8005676 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800577e:	4b0c      	ldr	r3, [pc, #48]	@ (80057b0 <xQueueGenericSend+0x200>)
 8005780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005784:	601a      	str	r2, [r3, #0]
 8005786:	f3bf 8f4f 	dsb	sy
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	e772      	b.n	8005676 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005790:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005792:	f000 fa1f 	bl	8005bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005796:	f000 fd4d 	bl	8006234 <xTaskResumeAll>
 800579a:	e76c      	b.n	8005676 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800579c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800579e:	f000 fa19 	bl	8005bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057a2:	f000 fd47 	bl	8006234 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80057a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3738      	adds	r7, #56	@ 0x38
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}
 80057b0:	e000ed04 	.word	0xe000ed04

080057b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b090      	sub	sp, #64	@ 0x40
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
 80057c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80057c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80057cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d0:	f383 8811 	msr	BASEPRI, r3
 80057d4:	f3bf 8f6f 	isb	sy
 80057d8:	f3bf 8f4f 	dsb	sy
 80057dc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057de:	bf00      	nop
 80057e0:	bf00      	nop
 80057e2:	e7fd      	b.n	80057e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d103      	bne.n	80057f2 <xQueueGenericSendFromISR+0x3e>
 80057ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <xQueueGenericSendFromISR+0x42>
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <xQueueGenericSendFromISR+0x44>
 80057f6:	2300      	movs	r3, #0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10b      	bne.n	8005814 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80057fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005800:	f383 8811 	msr	BASEPRI, r3
 8005804:	f3bf 8f6f 	isb	sy
 8005808:	f3bf 8f4f 	dsb	sy
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800580e:	bf00      	nop
 8005810:	bf00      	nop
 8005812:	e7fd      	b.n	8005810 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d103      	bne.n	8005822 <xQueueGenericSendFromISR+0x6e>
 800581a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800581e:	2b01      	cmp	r3, #1
 8005820:	d101      	bne.n	8005826 <xQueueGenericSendFromISR+0x72>
 8005822:	2301      	movs	r3, #1
 8005824:	e000      	b.n	8005828 <xQueueGenericSendFromISR+0x74>
 8005826:	2300      	movs	r3, #0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10b      	bne.n	8005844 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800582c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005830:	f383 8811 	msr	BASEPRI, r3
 8005834:	f3bf 8f6f 	isb	sy
 8005838:	f3bf 8f4f 	dsb	sy
 800583c:	623b      	str	r3, [r7, #32]
}
 800583e:	bf00      	nop
 8005840:	bf00      	nop
 8005842:	e7fd      	b.n	8005840 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005844:	f001 ffd8 	bl	80077f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005848:	f3ef 8211 	mrs	r2, BASEPRI
 800584c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005850:	f383 8811 	msr	BASEPRI, r3
 8005854:	f3bf 8f6f 	isb	sy
 8005858:	f3bf 8f4f 	dsb	sy
 800585c:	61fa      	str	r2, [r7, #28]
 800585e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005860:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005862:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005866:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586c:	429a      	cmp	r2, r3
 800586e:	d302      	bcc.n	8005876 <xQueueGenericSendFromISR+0xc2>
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	2b02      	cmp	r3, #2
 8005874:	d12f      	bne.n	80058d6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005878:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800587c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005884:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	68b9      	ldr	r1, [r7, #8]
 800588a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800588c:	f000 f912 	bl	8005ab4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005890:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005898:	d112      	bne.n	80058c0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d016      	beq.n	80058d0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a4:	3324      	adds	r3, #36	@ 0x24
 80058a6:	4618      	mov	r0, r3
 80058a8:	f000 fedc 	bl	8006664 <xTaskRemoveFromEventList>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d00e      	beq.n	80058d0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00b      	beq.n	80058d0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	601a      	str	r2, [r3, #0]
 80058be:	e007      	b.n	80058d0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80058c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80058c4:	3301      	adds	r3, #1
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	b25a      	sxtb	r2, r3
 80058ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80058d0:	2301      	movs	r3, #1
 80058d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80058d4:	e001      	b.n	80058da <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80058d6:	2300      	movs	r3, #0
 80058d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80058da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058dc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058e4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80058e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3740      	adds	r7, #64	@ 0x40
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08c      	sub	sp, #48	@ 0x30
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80058fc:	2300      	movs	r3, #0
 80058fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005906:	2b00      	cmp	r3, #0
 8005908:	d10b      	bne.n	8005922 <xQueueReceive+0x32>
	__asm volatile
 800590a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590e:	f383 8811 	msr	BASEPRI, r3
 8005912:	f3bf 8f6f 	isb	sy
 8005916:	f3bf 8f4f 	dsb	sy
 800591a:	623b      	str	r3, [r7, #32]
}
 800591c:	bf00      	nop
 800591e:	bf00      	nop
 8005920:	e7fd      	b.n	800591e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d103      	bne.n	8005930 <xQueueReceive+0x40>
 8005928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800592a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800592c:	2b00      	cmp	r3, #0
 800592e:	d101      	bne.n	8005934 <xQueueReceive+0x44>
 8005930:	2301      	movs	r3, #1
 8005932:	e000      	b.n	8005936 <xQueueReceive+0x46>
 8005934:	2300      	movs	r3, #0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d10b      	bne.n	8005952 <xQueueReceive+0x62>
	__asm volatile
 800593a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800593e:	f383 8811 	msr	BASEPRI, r3
 8005942:	f3bf 8f6f 	isb	sy
 8005946:	f3bf 8f4f 	dsb	sy
 800594a:	61fb      	str	r3, [r7, #28]
}
 800594c:	bf00      	nop
 800594e:	bf00      	nop
 8005950:	e7fd      	b.n	800594e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005952:	f001 f847 	bl	80069e4 <xTaskGetSchedulerState>
 8005956:	4603      	mov	r3, r0
 8005958:	2b00      	cmp	r3, #0
 800595a:	d102      	bne.n	8005962 <xQueueReceive+0x72>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d101      	bne.n	8005966 <xQueueReceive+0x76>
 8005962:	2301      	movs	r3, #1
 8005964:	e000      	b.n	8005968 <xQueueReceive+0x78>
 8005966:	2300      	movs	r3, #0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10b      	bne.n	8005984 <xQueueReceive+0x94>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	61bb      	str	r3, [r7, #24]
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	e7fd      	b.n	8005980 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005984:	f001 fe58 	bl	8007638 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01f      	beq.n	80059d4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005994:	68b9      	ldr	r1, [r7, #8]
 8005996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005998:	f000 f8f6 	bl	8005b88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	1e5a      	subs	r2, r3, #1
 80059a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00f      	beq.n	80059cc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ae:	3310      	adds	r3, #16
 80059b0:	4618      	mov	r0, r3
 80059b2:	f000 fe57 	bl	8006664 <xTaskRemoveFromEventList>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d007      	beq.n	80059cc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80059bc:	4b3c      	ldr	r3, [pc, #240]	@ (8005ab0 <xQueueReceive+0x1c0>)
 80059be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80059cc:	f001 fe66 	bl	800769c <vPortExitCritical>
				return pdPASS;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e069      	b.n	8005aa8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d103      	bne.n	80059e2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80059da:	f001 fe5f 	bl	800769c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80059de:	2300      	movs	r3, #0
 80059e0:	e062      	b.n	8005aa8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80059e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d106      	bne.n	80059f6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80059e8:	f107 0310 	add.w	r3, r7, #16
 80059ec:	4618      	mov	r0, r3
 80059ee:	f000 fe9d 	bl	800672c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80059f2:	2301      	movs	r3, #1
 80059f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80059f6:	f001 fe51 	bl	800769c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80059fa:	f000 fc0d 	bl	8006218 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80059fe:	f001 fe1b 	bl	8007638 <vPortEnterCritical>
 8005a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a04:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a08:	b25b      	sxtb	r3, r3
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d103      	bne.n	8005a18 <xQueueReceive+0x128>
 8005a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a1a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a1e:	b25b      	sxtb	r3, r3
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d103      	bne.n	8005a2e <xQueueReceive+0x13e>
 8005a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005a2e:	f001 fe35 	bl	800769c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005a32:	1d3a      	adds	r2, r7, #4
 8005a34:	f107 0310 	add.w	r3, r7, #16
 8005a38:	4611      	mov	r1, r2
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fe8c 	bl	8006758 <xTaskCheckForTimeOut>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d123      	bne.n	8005a8e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a48:	f000 f916 	bl	8005c78 <prvIsQueueEmpty>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d017      	beq.n	8005a82 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a54:	3324      	adds	r3, #36	@ 0x24
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	4611      	mov	r1, r2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fdb0 	bl	80065c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005a60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a62:	f000 f8b7 	bl	8005bd4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005a66:	f000 fbe5 	bl	8006234 <xTaskResumeAll>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d189      	bne.n	8005984 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005a70:	4b0f      	ldr	r3, [pc, #60]	@ (8005ab0 <xQueueReceive+0x1c0>)
 8005a72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a76:	601a      	str	r2, [r3, #0]
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	e780      	b.n	8005984 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005a82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a84:	f000 f8a6 	bl	8005bd4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a88:	f000 fbd4 	bl	8006234 <xTaskResumeAll>
 8005a8c:	e77a      	b.n	8005984 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005a8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a90:	f000 f8a0 	bl	8005bd4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a94:	f000 fbce 	bl	8006234 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005a9a:	f000 f8ed 	bl	8005c78 <prvIsQueueEmpty>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	f43f af6f 	beq.w	8005984 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005aa6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3730      	adds	r7, #48	@ 0x30
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	e000ed04 	.word	0xe000ed04

08005ab4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b086      	sub	sp, #24
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ac8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d10d      	bne.n	8005aee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d14d      	bne.n	8005b76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f000 ff9e 	bl	8006a20 <xTaskPriorityDisinherit>
 8005ae4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	609a      	str	r2, [r3, #8]
 8005aec:	e043      	b.n	8005b76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d119      	bne.n	8005b28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6858      	ldr	r0, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afc:	461a      	mov	r2, r3
 8005afe:	68b9      	ldr	r1, [r7, #8]
 8005b00:	f002 f8d6 	bl	8007cb0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b0c:	441a      	add	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d32b      	bcc.n	8005b76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	605a      	str	r2, [r3, #4]
 8005b26:	e026      	b.n	8005b76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68d8      	ldr	r0, [r3, #12]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b30:	461a      	mov	r2, r3
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	f002 f8bc 	bl	8007cb0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	68da      	ldr	r2, [r3, #12]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b40:	425b      	negs	r3, r3
 8005b42:	441a      	add	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d207      	bcs.n	8005b64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5c:	425b      	negs	r3, r3
 8005b5e:	441a      	add	r2, r3
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d105      	bne.n	8005b76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	1c5a      	adds	r2, r3, #1
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005b7e:	697b      	ldr	r3, [r7, #20]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d018      	beq.n	8005bcc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba2:	441a      	add	r2, r3
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d303      	bcc.n	8005bbc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68d9      	ldr	r1, [r3, #12]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6838      	ldr	r0, [r7, #0]
 8005bc8:	f002 f872 	bl	8007cb0 <memcpy>
	}
}
 8005bcc:	bf00      	nop
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005bdc:	f001 fd2c 	bl	8007638 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005be6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005be8:	e011      	b.n	8005c0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d012      	beq.n	8005c18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3324      	adds	r3, #36	@ 0x24
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fd34 	bl	8006664 <xTaskRemoveFromEventList>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d001      	beq.n	8005c06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005c02:	f000 fe0d 	bl	8006820 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005c06:	7bfb      	ldrb	r3, [r7, #15]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005c0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	dce9      	bgt.n	8005bea <prvUnlockQueue+0x16>
 8005c16:	e000      	b.n	8005c1a <prvUnlockQueue+0x46>
					break;
 8005c18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	22ff      	movs	r2, #255	@ 0xff
 8005c1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005c22:	f001 fd3b 	bl	800769c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005c26:	f001 fd07 	bl	8007638 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c32:	e011      	b.n	8005c58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	691b      	ldr	r3, [r3, #16]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d012      	beq.n	8005c62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	3310      	adds	r3, #16
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fd0f 	bl	8006664 <xTaskRemoveFromEventList>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005c4c:	f000 fde8 	bl	8006820 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005c50:	7bbb      	ldrb	r3, [r7, #14]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005c58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	dce9      	bgt.n	8005c34 <prvUnlockQueue+0x60>
 8005c60:	e000      	b.n	8005c64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	22ff      	movs	r2, #255	@ 0xff
 8005c68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005c6c:	f001 fd16 	bl	800769c <vPortExitCritical>
}
 8005c70:	bf00      	nop
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b084      	sub	sp, #16
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c80:	f001 fcda 	bl	8007638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d102      	bne.n	8005c92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	60fb      	str	r3, [r7, #12]
 8005c90:	e001      	b.n	8005c96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c96:	f001 fd01 	bl	800769c <vPortExitCritical>

	return xReturn;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3710      	adds	r7, #16
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}

08005ca4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005cac:	f001 fcc4 	bl	8007638 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d102      	bne.n	8005cc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	60fb      	str	r3, [r7, #12]
 8005cc0:	e001      	b.n	8005cc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005cc6:	f001 fce9 	bl	800769c <vPortExitCritical>

	return xReturn;
 8005cca:	68fb      	ldr	r3, [r7, #12]
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3710      	adds	r7, #16
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}

08005cd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005cde:	2300      	movs	r3, #0
 8005ce0:	60fb      	str	r3, [r7, #12]
 8005ce2:	e014      	b.n	8005d0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ce4:	4a0f      	ldr	r2, [pc, #60]	@ (8005d24 <vQueueAddToRegistry+0x50>)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10b      	bne.n	8005d08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005cf0:	490c      	ldr	r1, [pc, #48]	@ (8005d24 <vQueueAddToRegistry+0x50>)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	683a      	ldr	r2, [r7, #0]
 8005cf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8005d24 <vQueueAddToRegistry+0x50>)
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	4413      	add	r3, r2
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005d06:	e006      	b.n	8005d16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	3301      	adds	r3, #1
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2b07      	cmp	r3, #7
 8005d12:	d9e7      	bls.n	8005ce4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop
 8005d18:	3714      	adds	r7, #20
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20000980 	.word	0x20000980

08005d28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005d38:	f001 fc7e 	bl	8007638 <vPortEnterCritical>
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005d42:	b25b      	sxtb	r3, r3
 8005d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d48:	d103      	bne.n	8005d52 <vQueueWaitForMessageRestricted+0x2a>
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d58:	b25b      	sxtb	r3, r3
 8005d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5e:	d103      	bne.n	8005d68 <vQueueWaitForMessageRestricted+0x40>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2200      	movs	r2, #0
 8005d64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d68:	f001 fc98 	bl	800769c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d106      	bne.n	8005d82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	3324      	adds	r3, #36	@ 0x24
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fc45 	bl	800660c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005d82:	6978      	ldr	r0, [r7, #20]
 8005d84:	f7ff ff26 	bl	8005bd4 <prvUnlockQueue>
	}
 8005d88:	bf00      	nop
 8005d8a:	3718      	adds	r7, #24
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08e      	sub	sp, #56	@ 0x38
 8005d94:	af04      	add	r7, sp, #16
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d10b      	bne.n	8005dbc <xTaskCreateStatic+0x2c>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	623b      	str	r3, [r7, #32]
}
 8005db6:	bf00      	nop
 8005db8:	bf00      	nop
 8005dba:	e7fd      	b.n	8005db8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10b      	bne.n	8005dda <xTaskCreateStatic+0x4a>
	__asm volatile
 8005dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dc6:	f383 8811 	msr	BASEPRI, r3
 8005dca:	f3bf 8f6f 	isb	sy
 8005dce:	f3bf 8f4f 	dsb	sy
 8005dd2:	61fb      	str	r3, [r7, #28]
}
 8005dd4:	bf00      	nop
 8005dd6:	bf00      	nop
 8005dd8:	e7fd      	b.n	8005dd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005dda:	235c      	movs	r3, #92	@ 0x5c
 8005ddc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	2b5c      	cmp	r3, #92	@ 0x5c
 8005de2:	d00b      	beq.n	8005dfc <xTaskCreateStatic+0x6c>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	61bb      	str	r3, [r7, #24]
}
 8005df6:	bf00      	nop
 8005df8:	bf00      	nop
 8005dfa:	e7fd      	b.n	8005df8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005dfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d01e      	beq.n	8005e42 <xTaskCreateStatic+0xb2>
 8005e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d01b      	beq.n	8005e42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e16:	2202      	movs	r2, #2
 8005e18:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	9303      	str	r3, [sp, #12]
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	9302      	str	r3, [sp, #8]
 8005e24:	f107 0314 	add.w	r3, r7, #20
 8005e28:	9301      	str	r3, [sp, #4]
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f000 f850 	bl	8005eda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005e3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005e3c:	f000 f8de 	bl	8005ffc <prvAddNewTaskToReadyList>
 8005e40:	e001      	b.n	8005e46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005e46:	697b      	ldr	r3, [r7, #20]
	}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3728      	adds	r7, #40	@ 0x28
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08c      	sub	sp, #48	@ 0x30
 8005e54:	af04      	add	r7, sp, #16
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	4613      	mov	r3, r2
 8005e5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005e60:	88fb      	ldrh	r3, [r7, #6]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f001 fd09 	bl	800787c <pvPortMalloc>
 8005e6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005e72:	205c      	movs	r0, #92	@ 0x5c
 8005e74:	f001 fd02 	bl	800787c <pvPortMalloc>
 8005e78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d003      	beq.n	8005e88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e86:	e005      	b.n	8005e94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005e88:	6978      	ldr	r0, [r7, #20]
 8005e8a:	f001 fdc5 	bl	8007a18 <vPortFree>
 8005e8e:	e001      	b.n	8005e94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005e90:	2300      	movs	r3, #0
 8005e92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d017      	beq.n	8005eca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ea2:	88fa      	ldrh	r2, [r7, #6]
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	9303      	str	r3, [sp, #12]
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	9302      	str	r3, [sp, #8]
 8005eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eae:	9301      	str	r3, [sp, #4]
 8005eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb2:	9300      	str	r3, [sp, #0]
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	68b9      	ldr	r1, [r7, #8]
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f000 f80e 	bl	8005eda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ebe:	69f8      	ldr	r0, [r7, #28]
 8005ec0:	f000 f89c 	bl	8005ffc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	61bb      	str	r3, [r7, #24]
 8005ec8:	e002      	b.n	8005ed0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005eca:	f04f 33ff 	mov.w	r3, #4294967295
 8005ece:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ed0:	69bb      	ldr	r3, [r7, #24]
	}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3720      	adds	r7, #32
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}

08005eda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b088      	sub	sp, #32
 8005ede:	af00      	add	r7, sp, #0
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	21a5      	movs	r1, #165	@ 0xa5
 8005ef4:	f001 feb0 	bl	8007c58 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005efa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005f02:	3b01      	subs	r3, #1
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4413      	add	r3, r2
 8005f08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	f023 0307 	bic.w	r3, r3, #7
 8005f10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	f003 0307 	and.w	r3, r3, #7
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d00b      	beq.n	8005f34 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f20:	f383 8811 	msr	BASEPRI, r3
 8005f24:	f3bf 8f6f 	isb	sy
 8005f28:	f3bf 8f4f 	dsb	sy
 8005f2c:	617b      	str	r3, [r7, #20]
}
 8005f2e:	bf00      	nop
 8005f30:	bf00      	nop
 8005f32:	e7fd      	b.n	8005f30 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d01f      	beq.n	8005f7a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	61fb      	str	r3, [r7, #28]
 8005f3e:	e012      	b.n	8005f66 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4413      	add	r3, r2
 8005f46:	7819      	ldrb	r1, [r3, #0]
 8005f48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4413      	add	r3, r2
 8005f4e:	3334      	adds	r3, #52	@ 0x34
 8005f50:	460a      	mov	r2, r1
 8005f52:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	4413      	add	r3, r2
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d006      	beq.n	8005f6e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	2b0f      	cmp	r3, #15
 8005f6a:	d9e9      	bls.n	8005f40 <prvInitialiseNewTask+0x66>
 8005f6c:	e000      	b.n	8005f70 <prvInitialiseNewTask+0x96>
			{
				break;
 8005f6e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f72:	2200      	movs	r2, #0
 8005f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005f78:	e003      	b.n	8005f82 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	2b37      	cmp	r3, #55	@ 0x37
 8005f86:	d901      	bls.n	8005f8c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005f88:	2337      	movs	r3, #55	@ 0x37
 8005f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f90:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f96:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005f98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f7ff f966 	bl	8005274 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	3318      	adds	r3, #24
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7ff f961 	bl	8005274 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fb6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fba:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fc6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fca:	2200      	movs	r2, #0
 8005fcc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	68f9      	ldr	r1, [r7, #12]
 8005fda:	69b8      	ldr	r0, [r7, #24]
 8005fdc:	f001 f9fe 	bl	80073dc <pxPortInitialiseStack>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ff0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ff2:	bf00      	nop
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006004:	f001 fb18 	bl	8007638 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006008:	4b2d      	ldr	r3, [pc, #180]	@ (80060c0 <prvAddNewTaskToReadyList+0xc4>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3301      	adds	r3, #1
 800600e:	4a2c      	ldr	r2, [pc, #176]	@ (80060c0 <prvAddNewTaskToReadyList+0xc4>)
 8006010:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006012:	4b2c      	ldr	r3, [pc, #176]	@ (80060c4 <prvAddNewTaskToReadyList+0xc8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d109      	bne.n	800602e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800601a:	4a2a      	ldr	r2, [pc, #168]	@ (80060c4 <prvAddNewTaskToReadyList+0xc8>)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006020:	4b27      	ldr	r3, [pc, #156]	@ (80060c0 <prvAddNewTaskToReadyList+0xc4>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d110      	bne.n	800604a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006028:	f000 fc1e 	bl	8006868 <prvInitialiseTaskLists>
 800602c:	e00d      	b.n	800604a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800602e:	4b26      	ldr	r3, [pc, #152]	@ (80060c8 <prvAddNewTaskToReadyList+0xcc>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d109      	bne.n	800604a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006036:	4b23      	ldr	r3, [pc, #140]	@ (80060c4 <prvAddNewTaskToReadyList+0xc8>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006040:	429a      	cmp	r2, r3
 8006042:	d802      	bhi.n	800604a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006044:	4a1f      	ldr	r2, [pc, #124]	@ (80060c4 <prvAddNewTaskToReadyList+0xc8>)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800604a:	4b20      	ldr	r3, [pc, #128]	@ (80060cc <prvAddNewTaskToReadyList+0xd0>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3301      	adds	r3, #1
 8006050:	4a1e      	ldr	r2, [pc, #120]	@ (80060cc <prvAddNewTaskToReadyList+0xd0>)
 8006052:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006054:	4b1d      	ldr	r3, [pc, #116]	@ (80060cc <prvAddNewTaskToReadyList+0xd0>)
 8006056:	681a      	ldr	r2, [r3, #0]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006060:	4b1b      	ldr	r3, [pc, #108]	@ (80060d0 <prvAddNewTaskToReadyList+0xd4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	429a      	cmp	r2, r3
 8006066:	d903      	bls.n	8006070 <prvAddNewTaskToReadyList+0x74>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606c:	4a18      	ldr	r2, [pc, #96]	@ (80060d0 <prvAddNewTaskToReadyList+0xd4>)
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006074:	4613      	mov	r3, r2
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	009b      	lsls	r3, r3, #2
 800607c:	4a15      	ldr	r2, [pc, #84]	@ (80060d4 <prvAddNewTaskToReadyList+0xd8>)
 800607e:	441a      	add	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3304      	adds	r3, #4
 8006084:	4619      	mov	r1, r3
 8006086:	4610      	mov	r0, r2
 8006088:	f7ff f901 	bl	800528e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800608c:	f001 fb06 	bl	800769c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006090:	4b0d      	ldr	r3, [pc, #52]	@ (80060c8 <prvAddNewTaskToReadyList+0xcc>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d00e      	beq.n	80060b6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006098:	4b0a      	ldr	r3, [pc, #40]	@ (80060c4 <prvAddNewTaskToReadyList+0xc8>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d207      	bcs.n	80060b6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80060a6:	4b0c      	ldr	r3, [pc, #48]	@ (80060d8 <prvAddNewTaskToReadyList+0xdc>)
 80060a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060ac:	601a      	str	r2, [r3, #0]
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060b6:	bf00      	nop
 80060b8:	3708      	adds	r7, #8
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop
 80060c0:	20000e94 	.word	0x20000e94
 80060c4:	200009c0 	.word	0x200009c0
 80060c8:	20000ea0 	.word	0x20000ea0
 80060cc:	20000eb0 	.word	0x20000eb0
 80060d0:	20000e9c 	.word	0x20000e9c
 80060d4:	200009c4 	.word	0x200009c4
 80060d8:	e000ed04 	.word	0xe000ed04

080060dc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80060e4:	2300      	movs	r3, #0
 80060e6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d018      	beq.n	8006120 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80060ee:	4b14      	ldr	r3, [pc, #80]	@ (8006140 <vTaskDelay+0x64>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00b      	beq.n	800610e <vTaskDelay+0x32>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	60bb      	str	r3, [r7, #8]
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	e7fd      	b.n	800610a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800610e:	f000 f883 	bl	8006218 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006112:	2100      	movs	r1, #0
 8006114:	6878      	ldr	r0, [r7, #4]
 8006116:	f000 fcf3 	bl	8006b00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800611a:	f000 f88b 	bl	8006234 <xTaskResumeAll>
 800611e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d107      	bne.n	8006136 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006126:	4b07      	ldr	r3, [pc, #28]	@ (8006144 <vTaskDelay+0x68>)
 8006128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800612c:	601a      	str	r2, [r3, #0]
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006136:	bf00      	nop
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000ebc 	.word	0x20000ebc
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	@ 0x28
 800614c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006152:	2300      	movs	r3, #0
 8006154:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006156:	463a      	mov	r2, r7
 8006158:	1d39      	adds	r1, r7, #4
 800615a:	f107 0308 	add.w	r3, r7, #8
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff f834 	bl	80051cc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	9202      	str	r2, [sp, #8]
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	2300      	movs	r3, #0
 8006170:	9300      	str	r3, [sp, #0]
 8006172:	2300      	movs	r3, #0
 8006174:	460a      	mov	r2, r1
 8006176:	4922      	ldr	r1, [pc, #136]	@ (8006200 <vTaskStartScheduler+0xb8>)
 8006178:	4822      	ldr	r0, [pc, #136]	@ (8006204 <vTaskStartScheduler+0xbc>)
 800617a:	f7ff fe09 	bl	8005d90 <xTaskCreateStatic>
 800617e:	4603      	mov	r3, r0
 8006180:	4a21      	ldr	r2, [pc, #132]	@ (8006208 <vTaskStartScheduler+0xc0>)
 8006182:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006184:	4b20      	ldr	r3, [pc, #128]	@ (8006208 <vTaskStartScheduler+0xc0>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d002      	beq.n	8006192 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800618c:	2301      	movs	r3, #1
 800618e:	617b      	str	r3, [r7, #20]
 8006190:	e001      	b.n	8006196 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006192:	2300      	movs	r3, #0
 8006194:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	2b01      	cmp	r3, #1
 800619a:	d102      	bne.n	80061a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800619c:	f000 fd04 	bl	8006ba8 <xTimerCreateTimerTask>
 80061a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d116      	bne.n	80061d6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	613b      	str	r3, [r7, #16]
}
 80061ba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80061bc:	4b13      	ldr	r3, [pc, #76]	@ (800620c <vTaskStartScheduler+0xc4>)
 80061be:	f04f 32ff 	mov.w	r2, #4294967295
 80061c2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80061c4:	4b12      	ldr	r3, [pc, #72]	@ (8006210 <vTaskStartScheduler+0xc8>)
 80061c6:	2201      	movs	r2, #1
 80061c8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80061ca:	4b12      	ldr	r3, [pc, #72]	@ (8006214 <vTaskStartScheduler+0xcc>)
 80061cc:	2200      	movs	r2, #0
 80061ce:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80061d0:	f001 f98e 	bl	80074f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80061d4:	e00f      	b.n	80061f6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d10b      	bne.n	80061f6 <vTaskStartScheduler+0xae>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	60fb      	str	r3, [r7, #12]
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	e7fd      	b.n	80061f2 <vTaskStartScheduler+0xaa>
}
 80061f6:	bf00      	nop
 80061f8:	3718      	adds	r7, #24
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}
 80061fe:	bf00      	nop
 8006200:	08007d00 	.word	0x08007d00
 8006204:	08006839 	.word	0x08006839
 8006208:	20000eb8 	.word	0x20000eb8
 800620c:	20000eb4 	.word	0x20000eb4
 8006210:	20000ea0 	.word	0x20000ea0
 8006214:	20000e98 	.word	0x20000e98

08006218 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006218:	b480      	push	{r7}
 800621a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800621c:	4b04      	ldr	r3, [pc, #16]	@ (8006230 <vTaskSuspendAll+0x18>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3301      	adds	r3, #1
 8006222:	4a03      	ldr	r2, [pc, #12]	@ (8006230 <vTaskSuspendAll+0x18>)
 8006224:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006226:	bf00      	nop
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	20000ebc 	.word	0x20000ebc

08006234 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800623e:	2300      	movs	r3, #0
 8006240:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006242:	4b42      	ldr	r3, [pc, #264]	@ (800634c <xTaskResumeAll+0x118>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10b      	bne.n	8006262 <xTaskResumeAll+0x2e>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	603b      	str	r3, [r7, #0]
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	e7fd      	b.n	800625e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006262:	f001 f9e9 	bl	8007638 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006266:	4b39      	ldr	r3, [pc, #228]	@ (800634c <xTaskResumeAll+0x118>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	3b01      	subs	r3, #1
 800626c:	4a37      	ldr	r2, [pc, #220]	@ (800634c <xTaskResumeAll+0x118>)
 800626e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006270:	4b36      	ldr	r3, [pc, #216]	@ (800634c <xTaskResumeAll+0x118>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d162      	bne.n	800633e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006278:	4b35      	ldr	r3, [pc, #212]	@ (8006350 <xTaskResumeAll+0x11c>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d05e      	beq.n	800633e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006280:	e02f      	b.n	80062e2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006282:	4b34      	ldr	r3, [pc, #208]	@ (8006354 <xTaskResumeAll+0x120>)
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3318      	adds	r3, #24
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff f85a 	bl	8005348 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3304      	adds	r3, #4
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff f855 	bl	8005348 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006358 <xTaskResumeAll+0x124>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d903      	bls.n	80062b2 <xTaskResumeAll+0x7e>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	4a2a      	ldr	r2, [pc, #168]	@ (8006358 <xTaskResumeAll+0x124>)
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4a27      	ldr	r2, [pc, #156]	@ (800635c <xTaskResumeAll+0x128>)
 80062c0:	441a      	add	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3304      	adds	r3, #4
 80062c6:	4619      	mov	r1, r3
 80062c8:	4610      	mov	r0, r2
 80062ca:	f7fe ffe0 	bl	800528e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062d2:	4b23      	ldr	r3, [pc, #140]	@ (8006360 <xTaskResumeAll+0x12c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d8:	429a      	cmp	r2, r3
 80062da:	d302      	bcc.n	80062e2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80062dc:	4b21      	ldr	r3, [pc, #132]	@ (8006364 <xTaskResumeAll+0x130>)
 80062de:	2201      	movs	r2, #1
 80062e0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062e2:	4b1c      	ldr	r3, [pc, #112]	@ (8006354 <xTaskResumeAll+0x120>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1cb      	bne.n	8006282 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80062f0:	f000 fb58 	bl	80069a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80062f4:	4b1c      	ldr	r3, [pc, #112]	@ (8006368 <xTaskResumeAll+0x134>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d010      	beq.n	8006322 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006300:	f000 f846 	bl	8006390 <xTaskIncrementTick>
 8006304:	4603      	mov	r3, r0
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800630a:	4b16      	ldr	r3, [pc, #88]	@ (8006364 <xTaskResumeAll+0x130>)
 800630c:	2201      	movs	r2, #1
 800630e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	3b01      	subs	r3, #1
 8006314:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1f1      	bne.n	8006300 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800631c:	4b12      	ldr	r3, [pc, #72]	@ (8006368 <xTaskResumeAll+0x134>)
 800631e:	2200      	movs	r2, #0
 8006320:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006322:	4b10      	ldr	r3, [pc, #64]	@ (8006364 <xTaskResumeAll+0x130>)
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d009      	beq.n	800633e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800632a:	2301      	movs	r3, #1
 800632c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800632e:	4b0f      	ldr	r3, [pc, #60]	@ (800636c <xTaskResumeAll+0x138>)
 8006330:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800633e:	f001 f9ad 	bl	800769c <vPortExitCritical>

	return xAlreadyYielded;
 8006342:	68bb      	ldr	r3, [r7, #8]
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	20000ebc 	.word	0x20000ebc
 8006350:	20000e94 	.word	0x20000e94
 8006354:	20000e54 	.word	0x20000e54
 8006358:	20000e9c 	.word	0x20000e9c
 800635c:	200009c4 	.word	0x200009c4
 8006360:	200009c0 	.word	0x200009c0
 8006364:	20000ea8 	.word	0x20000ea8
 8006368:	20000ea4 	.word	0x20000ea4
 800636c:	e000ed04 	.word	0xe000ed04

08006370 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006370:	b480      	push	{r7}
 8006372:	b083      	sub	sp, #12
 8006374:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006376:	4b05      	ldr	r3, [pc, #20]	@ (800638c <xTaskGetTickCount+0x1c>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800637c:	687b      	ldr	r3, [r7, #4]
}
 800637e:	4618      	mov	r0, r3
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	20000e98 	.word	0x20000e98

08006390 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b086      	sub	sp, #24
 8006394:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006396:	2300      	movs	r3, #0
 8006398:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800639a:	4b4f      	ldr	r3, [pc, #316]	@ (80064d8 <xTaskIncrementTick+0x148>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f040 8090 	bne.w	80064c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80063a4:	4b4d      	ldr	r3, [pc, #308]	@ (80064dc <xTaskIncrementTick+0x14c>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	3301      	adds	r3, #1
 80063aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80063ac:	4a4b      	ldr	r2, [pc, #300]	@ (80064dc <xTaskIncrementTick+0x14c>)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d121      	bne.n	80063fc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80063b8:	4b49      	ldr	r3, [pc, #292]	@ (80064e0 <xTaskIncrementTick+0x150>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d00b      	beq.n	80063da <xTaskIncrementTick+0x4a>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c6:	f383 8811 	msr	BASEPRI, r3
 80063ca:	f3bf 8f6f 	isb	sy
 80063ce:	f3bf 8f4f 	dsb	sy
 80063d2:	603b      	str	r3, [r7, #0]
}
 80063d4:	bf00      	nop
 80063d6:	bf00      	nop
 80063d8:	e7fd      	b.n	80063d6 <xTaskIncrementTick+0x46>
 80063da:	4b41      	ldr	r3, [pc, #260]	@ (80064e0 <xTaskIncrementTick+0x150>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	60fb      	str	r3, [r7, #12]
 80063e0:	4b40      	ldr	r3, [pc, #256]	@ (80064e4 <xTaskIncrementTick+0x154>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a3e      	ldr	r2, [pc, #248]	@ (80064e0 <xTaskIncrementTick+0x150>)
 80063e6:	6013      	str	r3, [r2, #0]
 80063e8:	4a3e      	ldr	r2, [pc, #248]	@ (80064e4 <xTaskIncrementTick+0x154>)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	4b3e      	ldr	r3, [pc, #248]	@ (80064e8 <xTaskIncrementTick+0x158>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	3301      	adds	r3, #1
 80063f4:	4a3c      	ldr	r2, [pc, #240]	@ (80064e8 <xTaskIncrementTick+0x158>)
 80063f6:	6013      	str	r3, [r2, #0]
 80063f8:	f000 fad4 	bl	80069a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80063fc:	4b3b      	ldr	r3, [pc, #236]	@ (80064ec <xTaskIncrementTick+0x15c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	429a      	cmp	r2, r3
 8006404:	d349      	bcc.n	800649a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006406:	4b36      	ldr	r3, [pc, #216]	@ (80064e0 <xTaskIncrementTick+0x150>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006410:	4b36      	ldr	r3, [pc, #216]	@ (80064ec <xTaskIncrementTick+0x15c>)
 8006412:	f04f 32ff 	mov.w	r2, #4294967295
 8006416:	601a      	str	r2, [r3, #0]
					break;
 8006418:	e03f      	b.n	800649a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800641a:	4b31      	ldr	r3, [pc, #196]	@ (80064e0 <xTaskIncrementTick+0x150>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800642a:	693a      	ldr	r2, [r7, #16]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	429a      	cmp	r2, r3
 8006430:	d203      	bcs.n	800643a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006432:	4a2e      	ldr	r2, [pc, #184]	@ (80064ec <xTaskIncrementTick+0x15c>)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006438:	e02f      	b.n	800649a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	3304      	adds	r3, #4
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe ff82 	bl	8005348 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006448:	2b00      	cmp	r3, #0
 800644a:	d004      	beq.n	8006456 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	3318      	adds	r3, #24
 8006450:	4618      	mov	r0, r3
 8006452:	f7fe ff79 	bl	8005348 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800645a:	4b25      	ldr	r3, [pc, #148]	@ (80064f0 <xTaskIncrementTick+0x160>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d903      	bls.n	800646a <xTaskIncrementTick+0xda>
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006466:	4a22      	ldr	r2, [pc, #136]	@ (80064f0 <xTaskIncrementTick+0x160>)
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	4a1f      	ldr	r2, [pc, #124]	@ (80064f4 <xTaskIncrementTick+0x164>)
 8006478:	441a      	add	r2, r3
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	3304      	adds	r3, #4
 800647e:	4619      	mov	r1, r3
 8006480:	4610      	mov	r0, r2
 8006482:	f7fe ff04 	bl	800528e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800648a:	4b1b      	ldr	r3, [pc, #108]	@ (80064f8 <xTaskIncrementTick+0x168>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006490:	429a      	cmp	r2, r3
 8006492:	d3b8      	bcc.n	8006406 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006494:	2301      	movs	r3, #1
 8006496:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006498:	e7b5      	b.n	8006406 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800649a:	4b17      	ldr	r3, [pc, #92]	@ (80064f8 <xTaskIncrementTick+0x168>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a0:	4914      	ldr	r1, [pc, #80]	@ (80064f4 <xTaskIncrementTick+0x164>)
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	440b      	add	r3, r1
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d901      	bls.n	80064b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80064b2:	2301      	movs	r3, #1
 80064b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80064b6:	4b11      	ldr	r3, [pc, #68]	@ (80064fc <xTaskIncrementTick+0x16c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d007      	beq.n	80064ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80064be:	2301      	movs	r3, #1
 80064c0:	617b      	str	r3, [r7, #20]
 80064c2:	e004      	b.n	80064ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80064c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006500 <xTaskIncrementTick+0x170>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3301      	adds	r3, #1
 80064ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006500 <xTaskIncrementTick+0x170>)
 80064cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80064ce:	697b      	ldr	r3, [r7, #20]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	20000ebc 	.word	0x20000ebc
 80064dc:	20000e98 	.word	0x20000e98
 80064e0:	20000e4c 	.word	0x20000e4c
 80064e4:	20000e50 	.word	0x20000e50
 80064e8:	20000eac 	.word	0x20000eac
 80064ec:	20000eb4 	.word	0x20000eb4
 80064f0:	20000e9c 	.word	0x20000e9c
 80064f4:	200009c4 	.word	0x200009c4
 80064f8:	200009c0 	.word	0x200009c0
 80064fc:	20000ea8 	.word	0x20000ea8
 8006500:	20000ea4 	.word	0x20000ea4

08006504 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800650a:	4b28      	ldr	r3, [pc, #160]	@ (80065ac <vTaskSwitchContext+0xa8>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006512:	4b27      	ldr	r3, [pc, #156]	@ (80065b0 <vTaskSwitchContext+0xac>)
 8006514:	2201      	movs	r2, #1
 8006516:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006518:	e042      	b.n	80065a0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800651a:	4b25      	ldr	r3, [pc, #148]	@ (80065b0 <vTaskSwitchContext+0xac>)
 800651c:	2200      	movs	r2, #0
 800651e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006520:	4b24      	ldr	r3, [pc, #144]	@ (80065b4 <vTaskSwitchContext+0xb0>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	60fb      	str	r3, [r7, #12]
 8006526:	e011      	b.n	800654c <vTaskSwitchContext+0x48>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10b      	bne.n	8006546 <vTaskSwitchContext+0x42>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	607b      	str	r3, [r7, #4]
}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	e7fd      	b.n	8006542 <vTaskSwitchContext+0x3e>
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3b01      	subs	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	491a      	ldr	r1, [pc, #104]	@ (80065b8 <vTaskSwitchContext+0xb4>)
 800654e:	68fa      	ldr	r2, [r7, #12]
 8006550:	4613      	mov	r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d0e3      	beq.n	8006528 <vTaskSwitchContext+0x24>
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	4a13      	ldr	r2, [pc, #76]	@ (80065b8 <vTaskSwitchContext+0xb4>)
 800656c:	4413      	add	r3, r2
 800656e:	60bb      	str	r3, [r7, #8]
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	605a      	str	r2, [r3, #4]
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	3308      	adds	r3, #8
 8006582:	429a      	cmp	r2, r3
 8006584:	d104      	bne.n	8006590 <vTaskSwitchContext+0x8c>
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	685a      	ldr	r2, [r3, #4]
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	605a      	str	r2, [r3, #4]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	4a09      	ldr	r2, [pc, #36]	@ (80065bc <vTaskSwitchContext+0xb8>)
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4a06      	ldr	r2, [pc, #24]	@ (80065b4 <vTaskSwitchContext+0xb0>)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6013      	str	r3, [r2, #0]
}
 80065a0:	bf00      	nop
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	20000ebc 	.word	0x20000ebc
 80065b0:	20000ea8 	.word	0x20000ea8
 80065b4:	20000e9c 	.word	0x20000e9c
 80065b8:	200009c4 	.word	0x200009c4
 80065bc:	200009c0 	.word	0x200009c0

080065c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10b      	bne.n	80065e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	60fb      	str	r3, [r7, #12]
}
 80065e2:	bf00      	nop
 80065e4:	bf00      	nop
 80065e6:	e7fd      	b.n	80065e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80065e8:	4b07      	ldr	r3, [pc, #28]	@ (8006608 <vTaskPlaceOnEventList+0x48>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3318      	adds	r3, #24
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7fe fe70 	bl	80052d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80065f6:	2101      	movs	r1, #1
 80065f8:	6838      	ldr	r0, [r7, #0]
 80065fa:	f000 fa81 	bl	8006b00 <prvAddCurrentTaskToDelayedList>
}
 80065fe:	bf00      	nop
 8006600:	3710      	adds	r7, #16
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	200009c0 	.word	0x200009c0

0800660c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10b      	bne.n	8006636 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800661e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006622:	f383 8811 	msr	BASEPRI, r3
 8006626:	f3bf 8f6f 	isb	sy
 800662a:	f3bf 8f4f 	dsb	sy
 800662e:	617b      	str	r3, [r7, #20]
}
 8006630:	bf00      	nop
 8006632:	bf00      	nop
 8006634:	e7fd      	b.n	8006632 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006636:	4b0a      	ldr	r3, [pc, #40]	@ (8006660 <vTaskPlaceOnEventListRestricted+0x54>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	3318      	adds	r3, #24
 800663c:	4619      	mov	r1, r3
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f7fe fe25 	bl	800528e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800664a:	f04f 33ff 	mov.w	r3, #4294967295
 800664e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	68b8      	ldr	r0, [r7, #8]
 8006654:	f000 fa54 	bl	8006b00 <prvAddCurrentTaskToDelayedList>
	}
 8006658:	bf00      	nop
 800665a:	3718      	adds	r7, #24
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	200009c0 	.word	0x200009c0

08006664 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b086      	sub	sp, #24
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10b      	bne.n	8006692 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800667a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800667e:	f383 8811 	msr	BASEPRI, r3
 8006682:	f3bf 8f6f 	isb	sy
 8006686:	f3bf 8f4f 	dsb	sy
 800668a:	60fb      	str	r3, [r7, #12]
}
 800668c:	bf00      	nop
 800668e:	bf00      	nop
 8006690:	e7fd      	b.n	800668e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	3318      	adds	r3, #24
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe fe56 	bl	8005348 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800669c:	4b1d      	ldr	r3, [pc, #116]	@ (8006714 <xTaskRemoveFromEventList+0xb0>)
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11d      	bne.n	80066e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	3304      	adds	r3, #4
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7fe fe4d 	bl	8005348 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b2:	4b19      	ldr	r3, [pc, #100]	@ (8006718 <xTaskRemoveFromEventList+0xb4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	429a      	cmp	r2, r3
 80066b8:	d903      	bls.n	80066c2 <xTaskRemoveFromEventList+0x5e>
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	4a16      	ldr	r2, [pc, #88]	@ (8006718 <xTaskRemoveFromEventList+0xb4>)
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4a13      	ldr	r2, [pc, #76]	@ (800671c <xTaskRemoveFromEventList+0xb8>)
 80066d0:	441a      	add	r2, r3
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	3304      	adds	r3, #4
 80066d6:	4619      	mov	r1, r3
 80066d8:	4610      	mov	r0, r2
 80066da:	f7fe fdd8 	bl	800528e <vListInsertEnd>
 80066de:	e005      	b.n	80066ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	3318      	adds	r3, #24
 80066e4:	4619      	mov	r1, r3
 80066e6:	480e      	ldr	r0, [pc, #56]	@ (8006720 <xTaskRemoveFromEventList+0xbc>)
 80066e8:	f7fe fdd1 	bl	800528e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006724 <xTaskRemoveFromEventList+0xc0>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d905      	bls.n	8006706 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066fa:	2301      	movs	r3, #1
 80066fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006728 <xTaskRemoveFromEventList+0xc4>)
 8006700:	2201      	movs	r2, #1
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	e001      	b.n	800670a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800670a:	697b      	ldr	r3, [r7, #20]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	20000ebc 	.word	0x20000ebc
 8006718:	20000e9c 	.word	0x20000e9c
 800671c:	200009c4 	.word	0x200009c4
 8006720:	20000e54 	.word	0x20000e54
 8006724:	200009c0 	.word	0x200009c0
 8006728:	20000ea8 	.word	0x20000ea8

0800672c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006734:	4b06      	ldr	r3, [pc, #24]	@ (8006750 <vTaskInternalSetTimeOutState+0x24>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800673c:	4b05      	ldr	r3, [pc, #20]	@ (8006754 <vTaskInternalSetTimeOutState+0x28>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	605a      	str	r2, [r3, #4]
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000eac 	.word	0x20000eac
 8006754:	20000e98 	.word	0x20000e98

08006758 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10b      	bne.n	8006780 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	613b      	str	r3, [r7, #16]
}
 800677a:	bf00      	nop
 800677c:	bf00      	nop
 800677e:	e7fd      	b.n	800677c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10b      	bne.n	800679e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	60fb      	str	r3, [r7, #12]
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	e7fd      	b.n	800679a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800679e:	f000 ff4b 	bl	8007638 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80067a2:	4b1d      	ldr	r3, [pc, #116]	@ (8006818 <xTaskCheckForTimeOut+0xc0>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	69ba      	ldr	r2, [r7, #24]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ba:	d102      	bne.n	80067c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067bc:	2300      	movs	r3, #0
 80067be:	61fb      	str	r3, [r7, #28]
 80067c0:	e023      	b.n	800680a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4b15      	ldr	r3, [pc, #84]	@ (800681c <xTaskCheckForTimeOut+0xc4>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d007      	beq.n	80067de <xTaskCheckForTimeOut+0x86>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	69ba      	ldr	r2, [r7, #24]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d302      	bcc.n	80067de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067d8:	2301      	movs	r3, #1
 80067da:	61fb      	str	r3, [r7, #28]
 80067dc:	e015      	b.n	800680a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	697a      	ldr	r2, [r7, #20]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d20b      	bcs.n	8006800 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7ff ff99 	bl	800672c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]
 80067fe:	e004      	b.n	800680a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006806:	2301      	movs	r3, #1
 8006808:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800680a:	f000 ff47 	bl	800769c <vPortExitCritical>

	return xReturn;
 800680e:	69fb      	ldr	r3, [r7, #28]
}
 8006810:	4618      	mov	r0, r3
 8006812:	3720      	adds	r7, #32
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	20000e98 	.word	0x20000e98
 800681c:	20000eac 	.word	0x20000eac

08006820 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006824:	4b03      	ldr	r3, [pc, #12]	@ (8006834 <vTaskMissedYield+0x14>)
 8006826:	2201      	movs	r2, #1
 8006828:	601a      	str	r2, [r3, #0]
}
 800682a:	bf00      	nop
 800682c:	46bd      	mov	sp, r7
 800682e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006832:	4770      	bx	lr
 8006834:	20000ea8 	.word	0x20000ea8

08006838 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006840:	f000 f852 	bl	80068e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006844:	4b06      	ldr	r3, [pc, #24]	@ (8006860 <prvIdleTask+0x28>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d9f9      	bls.n	8006840 <prvIdleTask+0x8>
			{
				taskYIELD();
 800684c:	4b05      	ldr	r3, [pc, #20]	@ (8006864 <prvIdleTask+0x2c>)
 800684e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006852:	601a      	str	r2, [r3, #0]
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800685c:	e7f0      	b.n	8006840 <prvIdleTask+0x8>
 800685e:	bf00      	nop
 8006860:	200009c4 	.word	0x200009c4
 8006864:	e000ed04 	.word	0xe000ed04

08006868 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800686e:	2300      	movs	r3, #0
 8006870:	607b      	str	r3, [r7, #4]
 8006872:	e00c      	b.n	800688e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4413      	add	r3, r2
 800687c:	009b      	lsls	r3, r3, #2
 800687e:	4a12      	ldr	r2, [pc, #72]	@ (80068c8 <prvInitialiseTaskLists+0x60>)
 8006880:	4413      	add	r3, r2
 8006882:	4618      	mov	r0, r3
 8006884:	f7fe fcd6 	bl	8005234 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	3301      	adds	r3, #1
 800688c:	607b      	str	r3, [r7, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b37      	cmp	r3, #55	@ 0x37
 8006892:	d9ef      	bls.n	8006874 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006894:	480d      	ldr	r0, [pc, #52]	@ (80068cc <prvInitialiseTaskLists+0x64>)
 8006896:	f7fe fccd 	bl	8005234 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800689a:	480d      	ldr	r0, [pc, #52]	@ (80068d0 <prvInitialiseTaskLists+0x68>)
 800689c:	f7fe fcca 	bl	8005234 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80068a0:	480c      	ldr	r0, [pc, #48]	@ (80068d4 <prvInitialiseTaskLists+0x6c>)
 80068a2:	f7fe fcc7 	bl	8005234 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068a6:	480c      	ldr	r0, [pc, #48]	@ (80068d8 <prvInitialiseTaskLists+0x70>)
 80068a8:	f7fe fcc4 	bl	8005234 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068ac:	480b      	ldr	r0, [pc, #44]	@ (80068dc <prvInitialiseTaskLists+0x74>)
 80068ae:	f7fe fcc1 	bl	8005234 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068b2:	4b0b      	ldr	r3, [pc, #44]	@ (80068e0 <prvInitialiseTaskLists+0x78>)
 80068b4:	4a05      	ldr	r2, [pc, #20]	@ (80068cc <prvInitialiseTaskLists+0x64>)
 80068b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068b8:	4b0a      	ldr	r3, [pc, #40]	@ (80068e4 <prvInitialiseTaskLists+0x7c>)
 80068ba:	4a05      	ldr	r2, [pc, #20]	@ (80068d0 <prvInitialiseTaskLists+0x68>)
 80068bc:	601a      	str	r2, [r3, #0]
}
 80068be:	bf00      	nop
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	200009c4 	.word	0x200009c4
 80068cc:	20000e24 	.word	0x20000e24
 80068d0:	20000e38 	.word	0x20000e38
 80068d4:	20000e54 	.word	0x20000e54
 80068d8:	20000e68 	.word	0x20000e68
 80068dc:	20000e80 	.word	0x20000e80
 80068e0:	20000e4c 	.word	0x20000e4c
 80068e4:	20000e50 	.word	0x20000e50

080068e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b082      	sub	sp, #8
 80068ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068ee:	e019      	b.n	8006924 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068f0:	f000 fea2 	bl	8007638 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f4:	4b10      	ldr	r3, [pc, #64]	@ (8006938 <prvCheckTasksWaitingTermination+0x50>)
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	3304      	adds	r3, #4
 8006900:	4618      	mov	r0, r3
 8006902:	f7fe fd21 	bl	8005348 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006906:	4b0d      	ldr	r3, [pc, #52]	@ (800693c <prvCheckTasksWaitingTermination+0x54>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3b01      	subs	r3, #1
 800690c:	4a0b      	ldr	r2, [pc, #44]	@ (800693c <prvCheckTasksWaitingTermination+0x54>)
 800690e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006910:	4b0b      	ldr	r3, [pc, #44]	@ (8006940 <prvCheckTasksWaitingTermination+0x58>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3b01      	subs	r3, #1
 8006916:	4a0a      	ldr	r2, [pc, #40]	@ (8006940 <prvCheckTasksWaitingTermination+0x58>)
 8006918:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800691a:	f000 febf 	bl	800769c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f810 	bl	8006944 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006924:	4b06      	ldr	r3, [pc, #24]	@ (8006940 <prvCheckTasksWaitingTermination+0x58>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e1      	bne.n	80068f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800692c:	bf00      	nop
 800692e:	bf00      	nop
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	20000e68 	.word	0x20000e68
 800693c:	20000e94 	.word	0x20000e94
 8006940:	20000e7c 	.word	0x20000e7c

08006944 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006952:	2b00      	cmp	r3, #0
 8006954:	d108      	bne.n	8006968 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695a:	4618      	mov	r0, r3
 800695c:	f001 f85c 	bl	8007a18 <vPortFree>
				vPortFree( pxTCB );
 8006960:	6878      	ldr	r0, [r7, #4]
 8006962:	f001 f859 	bl	8007a18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006966:	e019      	b.n	800699c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800696e:	2b01      	cmp	r3, #1
 8006970:	d103      	bne.n	800697a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 f850 	bl	8007a18 <vPortFree>
	}
 8006978:	e010      	b.n	800699c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006980:	2b02      	cmp	r3, #2
 8006982:	d00b      	beq.n	800699c <prvDeleteTCB+0x58>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	60fb      	str	r3, [r7, #12]
}
 8006996:	bf00      	nop
 8006998:	bf00      	nop
 800699a:	e7fd      	b.n	8006998 <prvDeleteTCB+0x54>
	}
 800699c:	bf00      	nop
 800699e:	3710      	adds	r7, #16
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}

080069a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069aa:	4b0c      	ldr	r3, [pc, #48]	@ (80069dc <prvResetNextTaskUnblockTime+0x38>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069b4:	4b0a      	ldr	r3, [pc, #40]	@ (80069e0 <prvResetNextTaskUnblockTime+0x3c>)
 80069b6:	f04f 32ff 	mov.w	r2, #4294967295
 80069ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069bc:	e008      	b.n	80069d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069be:	4b07      	ldr	r3, [pc, #28]	@ (80069dc <prvResetNextTaskUnblockTime+0x38>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	68db      	ldr	r3, [r3, #12]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	4a04      	ldr	r2, [pc, #16]	@ (80069e0 <prvResetNextTaskUnblockTime+0x3c>)
 80069ce:	6013      	str	r3, [r2, #0]
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	20000e4c 	.word	0x20000e4c
 80069e0:	20000eb4 	.word	0x20000eb4

080069e4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006a18 <xTaskGetSchedulerState+0x34>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d102      	bne.n	80069f8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069f2:	2301      	movs	r3, #1
 80069f4:	607b      	str	r3, [r7, #4]
 80069f6:	e008      	b.n	8006a0a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f8:	4b08      	ldr	r3, [pc, #32]	@ (8006a1c <xTaskGetSchedulerState+0x38>)
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006a00:	2302      	movs	r3, #2
 8006a02:	607b      	str	r3, [r7, #4]
 8006a04:	e001      	b.n	8006a0a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a06:	2300      	movs	r3, #0
 8006a08:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a0a:	687b      	ldr	r3, [r7, #4]
	}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	20000ea0 	.word	0x20000ea0
 8006a1c:	20000ebc 	.word	0x20000ebc

08006a20 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d058      	beq.n	8006ae8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a36:	4b2f      	ldr	r3, [pc, #188]	@ (8006af4 <xTaskPriorityDisinherit+0xd4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	693a      	ldr	r2, [r7, #16]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d00b      	beq.n	8006a58 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a44:	f383 8811 	msr	BASEPRI, r3
 8006a48:	f3bf 8f6f 	isb	sy
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	60fb      	str	r3, [r7, #12]
}
 8006a52:	bf00      	nop
 8006a54:	bf00      	nop
 8006a56:	e7fd      	b.n	8006a54 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10b      	bne.n	8006a78 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	60bb      	str	r3, [r7, #8]
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a7c:	1e5a      	subs	r2, r3, #1
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d02c      	beq.n	8006ae8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d128      	bne.n	8006ae8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	3304      	adds	r3, #4
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f7fe fc54 	bl	8005348 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aac:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8006af8 <xTaskPriorityDisinherit+0xd8>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d903      	bls.n	8006ac8 <xTaskPriorityDisinherit+0xa8>
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac4:	4a0c      	ldr	r2, [pc, #48]	@ (8006af8 <xTaskPriorityDisinherit+0xd8>)
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006acc:	4613      	mov	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	4413      	add	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4a09      	ldr	r2, [pc, #36]	@ (8006afc <xTaskPriorityDisinherit+0xdc>)
 8006ad6:	441a      	add	r2, r3
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	3304      	adds	r3, #4
 8006adc:	4619      	mov	r1, r3
 8006ade:	4610      	mov	r0, r2
 8006ae0:	f7fe fbd5 	bl	800528e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006ae8:	697b      	ldr	r3, [r7, #20]
	}
 8006aea:	4618      	mov	r0, r3
 8006aec:	3718      	adds	r7, #24
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	bf00      	nop
 8006af4:	200009c0 	.word	0x200009c0
 8006af8:	20000e9c 	.word	0x20000e9c
 8006afc:	200009c4 	.word	0x200009c4

08006b00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b0a:	4b21      	ldr	r3, [pc, #132]	@ (8006b90 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b10:	4b20      	ldr	r3, [pc, #128]	@ (8006b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	3304      	adds	r3, #4
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fe fc16 	bl	8005348 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b22:	d10a      	bne.n	8006b3a <prvAddCurrentTaskToDelayedList+0x3a>
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d007      	beq.n	8006b3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8006b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3304      	adds	r3, #4
 8006b30:	4619      	mov	r1, r3
 8006b32:	4819      	ldr	r0, [pc, #100]	@ (8006b98 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b34:	f7fe fbab 	bl	800528e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b38:	e026      	b.n	8006b88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4413      	add	r3, r2
 8006b40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b42:	4b14      	ldr	r3, [pc, #80]	@ (8006b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d209      	bcs.n	8006b66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b52:	4b12      	ldr	r3, [pc, #72]	@ (8006b9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	4b0f      	ldr	r3, [pc, #60]	@ (8006b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4619      	mov	r1, r3
 8006b5e:	4610      	mov	r0, r2
 8006b60:	f7fe fbb9 	bl	80052d6 <vListInsert>
}
 8006b64:	e010      	b.n	8006b88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b66:	4b0e      	ldr	r3, [pc, #56]	@ (8006ba0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8006b94 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	3304      	adds	r3, #4
 8006b70:	4619      	mov	r1, r3
 8006b72:	4610      	mov	r0, r2
 8006b74:	f7fe fbaf 	bl	80052d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b78:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d202      	bcs.n	8006b88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b82:	4a08      	ldr	r2, [pc, #32]	@ (8006ba4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	6013      	str	r3, [r2, #0]
}
 8006b88:	bf00      	nop
 8006b8a:	3710      	adds	r7, #16
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000e98 	.word	0x20000e98
 8006b94:	200009c0 	.word	0x200009c0
 8006b98:	20000e80 	.word	0x20000e80
 8006b9c:	20000e50 	.word	0x20000e50
 8006ba0:	20000e4c 	.word	0x20000e4c
 8006ba4:	20000eb4 	.word	0x20000eb4

08006ba8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	@ 0x28
 8006bac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bb2:	f000 fbb1 	bl	8007318 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c2c <xTimerCreateTimerTask+0x84>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d021      	beq.n	8006c02 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bc6:	1d3a      	adds	r2, r7, #4
 8006bc8:	f107 0108 	add.w	r1, r7, #8
 8006bcc:	f107 030c 	add.w	r3, r7, #12
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe fb15 	bl	8005200 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006bd6:	6879      	ldr	r1, [r7, #4]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	9202      	str	r2, [sp, #8]
 8006bde:	9301      	str	r3, [sp, #4]
 8006be0:	2302      	movs	r3, #2
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2300      	movs	r3, #0
 8006be6:	460a      	mov	r2, r1
 8006be8:	4911      	ldr	r1, [pc, #68]	@ (8006c30 <xTimerCreateTimerTask+0x88>)
 8006bea:	4812      	ldr	r0, [pc, #72]	@ (8006c34 <xTimerCreateTimerTask+0x8c>)
 8006bec:	f7ff f8d0 	bl	8005d90 <xTaskCreateStatic>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	4a11      	ldr	r2, [pc, #68]	@ (8006c38 <xTimerCreateTimerTask+0x90>)
 8006bf4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006bf6:	4b10      	ldr	r3, [pc, #64]	@ (8006c38 <xTimerCreateTimerTask+0x90>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10b      	bne.n	8006c20 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0c:	f383 8811 	msr	BASEPRI, r3
 8006c10:	f3bf 8f6f 	isb	sy
 8006c14:	f3bf 8f4f 	dsb	sy
 8006c18:	613b      	str	r3, [r7, #16]
}
 8006c1a:	bf00      	nop
 8006c1c:	bf00      	nop
 8006c1e:	e7fd      	b.n	8006c1c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c20:	697b      	ldr	r3, [r7, #20]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3718      	adds	r7, #24
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	20000ef0 	.word	0x20000ef0
 8006c30:	08007d08 	.word	0x08007d08
 8006c34:	08006eb1 	.word	0x08006eb1
 8006c38:	20000ef4 	.word	0x20000ef4

08006c3c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b088      	sub	sp, #32
 8006c40:	af02      	add	r7, sp, #8
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006c4a:	202c      	movs	r0, #44	@ 0x2c
 8006c4c:	f000 fe16 	bl	800787c <pvPortMalloc>
 8006c50:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00d      	beq.n	8006c74 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006c58:	697b      	ldr	r3, [r7, #20]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	9301      	str	r3, [sp, #4]
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 f845 	bl	8006cfe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006c74:	697b      	ldr	r3, [r7, #20]
	}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3718      	adds	r7, #24
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b08a      	sub	sp, #40	@ 0x28
 8006c82:	af02      	add	r7, sp, #8
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006c8c:	232c      	movs	r3, #44	@ 0x2c
 8006c8e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	2b2c      	cmp	r3, #44	@ 0x2c
 8006c94:	d00b      	beq.n	8006cae <xTimerCreateStatic+0x30>
	__asm volatile
 8006c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	61bb      	str	r3, [r7, #24]
}
 8006ca8:	bf00      	nop
 8006caa:	bf00      	nop
 8006cac:	e7fd      	b.n	8006caa <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006cae:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10b      	bne.n	8006cce <xTimerCreateStatic+0x50>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	617b      	str	r3, [r7, #20]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <xTimerCreateStatic+0x4c>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd0:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d00d      	beq.n	8006cf4 <xTimerCreateStatic+0x76>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	9301      	str	r3, [sp, #4]
 8006ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	68b9      	ldr	r1, [r7, #8]
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f805 	bl	8006cfe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006cf4:	69fb      	ldr	r3, [r7, #28]
	}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b086      	sub	sp, #24
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	60f8      	str	r0, [r7, #12]
 8006d06:	60b9      	str	r1, [r7, #8]
 8006d08:	607a      	str	r2, [r7, #4]
 8006d0a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10b      	bne.n	8006d2a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	617b      	str	r3, [r7, #20]
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	e7fd      	b.n	8006d26 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d01e      	beq.n	8006d6e <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006d30:	f000 faf2 	bl	8007318 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d42:	683a      	ldr	r2, [r7, #0]
 8006d44:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d48:	6a3a      	ldr	r2, [r7, #32]
 8006d4a:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	3304      	adds	r3, #4
 8006d50:	4618      	mov	r0, r3
 8006d52:	f7fe fa8f 	bl	8005274 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d008      	beq.n	8006d6e <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d62:	f043 0304 	orr.w	r3, r3, #4
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006d6e:	bf00      	nop
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b08a      	sub	sp, #40	@ 0x28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	60f8      	str	r0, [r7, #12]
 8006d80:	60b9      	str	r1, [r7, #8]
 8006d82:	607a      	str	r2, [r7, #4]
 8006d84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d86:	2300      	movs	r3, #0
 8006d88:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d10b      	bne.n	8006da8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d94:	f383 8811 	msr	BASEPRI, r3
 8006d98:	f3bf 8f6f 	isb	sy
 8006d9c:	f3bf 8f4f 	dsb	sy
 8006da0:	623b      	str	r3, [r7, #32]
}
 8006da2:	bf00      	nop
 8006da4:	bf00      	nop
 8006da6:	e7fd      	b.n	8006da4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006da8:	4b19      	ldr	r3, [pc, #100]	@ (8006e10 <xTimerGenericCommand+0x98>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d02a      	beq.n	8006e06 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	dc18      	bgt.n	8006df4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dc2:	f7ff fe0f 	bl	80069e4 <xTaskGetSchedulerState>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d109      	bne.n	8006de0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006dcc:	4b10      	ldr	r3, [pc, #64]	@ (8006e10 <xTimerGenericCommand+0x98>)
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	f107 0110 	add.w	r1, r7, #16
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dd8:	f7fe fbea 	bl	80055b0 <xQueueGenericSend>
 8006ddc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006dde:	e012      	b.n	8006e06 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006de0:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <xTimerGenericCommand+0x98>)
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	f107 0110 	add.w	r1, r7, #16
 8006de8:	2300      	movs	r3, #0
 8006dea:	2200      	movs	r2, #0
 8006dec:	f7fe fbe0 	bl	80055b0 <xQueueGenericSend>
 8006df0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006df2:	e008      	b.n	8006e06 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006df4:	4b06      	ldr	r3, [pc, #24]	@ (8006e10 <xTimerGenericCommand+0x98>)
 8006df6:	6818      	ldr	r0, [r3, #0]
 8006df8:	f107 0110 	add.w	r1, r7, #16
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	683a      	ldr	r2, [r7, #0]
 8006e00:	f7fe fcd8 	bl	80057b4 <xQueueGenericSendFromISR>
 8006e04:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3728      	adds	r7, #40	@ 0x28
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	20000ef0 	.word	0x20000ef0

08006e14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1e:	4b23      	ldr	r3, [pc, #140]	@ (8006eac <prvProcessExpiredTimer+0x98>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe fa8b 	bl	8005348 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d023      	beq.n	8006e88 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	699a      	ldr	r2, [r3, #24]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	18d1      	adds	r1, r2, r3
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	683a      	ldr	r2, [r7, #0]
 8006e4c:	6978      	ldr	r0, [r7, #20]
 8006e4e:	f000 f8d5 	bl	8006ffc <prvInsertTimerInActiveList>
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d020      	beq.n	8006e9a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	687a      	ldr	r2, [r7, #4]
 8006e60:	2100      	movs	r1, #0
 8006e62:	6978      	ldr	r0, [r7, #20]
 8006e64:	f7ff ff88 	bl	8006d78 <xTimerGenericCommand>
 8006e68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d114      	bne.n	8006e9a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e74:	f383 8811 	msr	BASEPRI, r3
 8006e78:	f3bf 8f6f 	isb	sy
 8006e7c:	f3bf 8f4f 	dsb	sy
 8006e80:	60fb      	str	r3, [r7, #12]
}
 8006e82:	bf00      	nop
 8006e84:	bf00      	nop
 8006e86:	e7fd      	b.n	8006e84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e8e:	f023 0301 	bic.w	r3, r3, #1
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e9a:	697b      	ldr	r3, [r7, #20]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	6978      	ldr	r0, [r7, #20]
 8006ea0:	4798      	blx	r3
}
 8006ea2:	bf00      	nop
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	20000ee8 	.word	0x20000ee8

08006eb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eb8:	f107 0308 	add.w	r3, r7, #8
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 f859 	bl	8006f74 <prvGetNextExpireTime>
 8006ec2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	68f8      	ldr	r0, [r7, #12]
 8006eca:	f000 f805 	bl	8006ed8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ece:	f000 f8d7 	bl	8007080 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ed2:	bf00      	nop
 8006ed4:	e7f0      	b.n	8006eb8 <prvTimerTask+0x8>
	...

08006ed8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b084      	sub	sp, #16
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ee2:	f7ff f999 	bl	8006218 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006ee6:	f107 0308 	add.w	r3, r7, #8
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 f866 	bl	8006fbc <prvSampleTimeNow>
 8006ef0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d130      	bne.n	8006f5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d10a      	bne.n	8006f14 <prvProcessTimerOrBlockTask+0x3c>
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d806      	bhi.n	8006f14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f06:	f7ff f995 	bl	8006234 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f0a:	68f9      	ldr	r1, [r7, #12]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f7ff ff81 	bl	8006e14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f12:	e024      	b.n	8006f5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d008      	beq.n	8006f2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f1a:	4b13      	ldr	r3, [pc, #76]	@ (8006f68 <prvProcessTimerOrBlockTask+0x90>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d101      	bne.n	8006f28 <prvProcessTimerOrBlockTask+0x50>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <prvProcessTimerOrBlockTask+0x52>
 8006f28:	2300      	movs	r3, #0
 8006f2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8006f6c <prvProcessTimerOrBlockTask+0x94>)
 8006f2e:	6818      	ldr	r0, [r3, #0]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	f7fe fef5 	bl	8005d28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f3e:	f7ff f979 	bl	8006234 <xTaskResumeAll>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f48:	4b09      	ldr	r3, [pc, #36]	@ (8006f70 <prvProcessTimerOrBlockTask+0x98>)
 8006f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	f3bf 8f6f 	isb	sy
}
 8006f58:	e001      	b.n	8006f5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f5a:	f7ff f96b 	bl	8006234 <xTaskResumeAll>
}
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	20000eec 	.word	0x20000eec
 8006f6c:	20000ef0 	.word	0x20000ef0
 8006f70:	e000ed04 	.word	0xe000ed04

08006f74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8006fb8 <prvGetNextExpireTime+0x44>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <prvGetNextExpireTime+0x16>
 8006f86:	2201      	movs	r2, #1
 8006f88:	e000      	b.n	8006f8c <prvGetNextExpireTime+0x18>
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d105      	bne.n	8006fa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f98:	4b07      	ldr	r3, [pc, #28]	@ (8006fb8 <prvGetNextExpireTime+0x44>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	60fb      	str	r3, [r7, #12]
 8006fa2:	e001      	b.n	8006fa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	20000ee8 	.word	0x20000ee8

08006fbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fc4:	f7ff f9d4 	bl	8006370 <xTaskGetTickCount>
 8006fc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fca:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff8 <prvSampleTimeNow+0x3c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	68fa      	ldr	r2, [r7, #12]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d205      	bcs.n	8006fe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fd4:	f000 f93a 	bl	800724c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
 8006fde:	e002      	b.n	8006fe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fe6:	4a04      	ldr	r2, [pc, #16]	@ (8006ff8 <prvSampleTimeNow+0x3c>)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fec:	68fb      	ldr	r3, [r7, #12]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	20000ef8 	.word	0x20000ef8

08006ffc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800700a:	2300      	movs	r3, #0
 800700c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	68ba      	ldr	r2, [r7, #8]
 8007012:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800701a:	68ba      	ldr	r2, [r7, #8]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	429a      	cmp	r2, r3
 8007020:	d812      	bhi.n	8007048 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	1ad2      	subs	r2, r2, r3
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	429a      	cmp	r2, r3
 800702e:	d302      	bcc.n	8007036 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007030:	2301      	movs	r3, #1
 8007032:	617b      	str	r3, [r7, #20]
 8007034:	e01b      	b.n	800706e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007036:	4b10      	ldr	r3, [pc, #64]	@ (8007078 <prvInsertTimerInActiveList+0x7c>)
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	3304      	adds	r3, #4
 800703e:	4619      	mov	r1, r3
 8007040:	4610      	mov	r0, r2
 8007042:	f7fe f948 	bl	80052d6 <vListInsert>
 8007046:	e012      	b.n	800706e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	429a      	cmp	r2, r3
 800704e:	d206      	bcs.n	800705e <prvInsertTimerInActiveList+0x62>
 8007050:	68ba      	ldr	r2, [r7, #8]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	429a      	cmp	r2, r3
 8007056:	d302      	bcc.n	800705e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007058:	2301      	movs	r3, #1
 800705a:	617b      	str	r3, [r7, #20]
 800705c:	e007      	b.n	800706e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800705e:	4b07      	ldr	r3, [pc, #28]	@ (800707c <prvInsertTimerInActiveList+0x80>)
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3304      	adds	r3, #4
 8007066:	4619      	mov	r1, r3
 8007068:	4610      	mov	r0, r2
 800706a:	f7fe f934 	bl	80052d6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800706e:	697b      	ldr	r3, [r7, #20]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3718      	adds	r7, #24
 8007074:	46bd      	mov	sp, r7
 8007076:	bd80      	pop	{r7, pc}
 8007078:	20000eec 	.word	0x20000eec
 800707c:	20000ee8 	.word	0x20000ee8

08007080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b08e      	sub	sp, #56	@ 0x38
 8007084:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007086:	e0ce      	b.n	8007226 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2b00      	cmp	r3, #0
 800708c:	da19      	bge.n	80070c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800708e:	1d3b      	adds	r3, r7, #4
 8007090:	3304      	adds	r3, #4
 8007092:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10b      	bne.n	80070b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	61fb      	str	r3, [r7, #28]
}
 80070ac:	bf00      	nop
 80070ae:	bf00      	nop
 80070b0:	e7fd      	b.n	80070ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070b8:	6850      	ldr	r0, [r2, #4]
 80070ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80070bc:	6892      	ldr	r2, [r2, #8]
 80070be:	4611      	mov	r1, r2
 80070c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f2c0 80ae 	blt.w	8007226 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d0:	695b      	ldr	r3, [r3, #20]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d8:	3304      	adds	r3, #4
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe f934 	bl	8005348 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070e0:	463b      	mov	r3, r7
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7ff ff6a 	bl	8006fbc <prvSampleTimeNow>
 80070e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b09      	cmp	r3, #9
 80070ee:	f200 8097 	bhi.w	8007220 <prvProcessReceivedCommands+0x1a0>
 80070f2:	a201      	add	r2, pc, #4	@ (adr r2, 80070f8 <prvProcessReceivedCommands+0x78>)
 80070f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f8:	08007121 	.word	0x08007121
 80070fc:	08007121 	.word	0x08007121
 8007100:	08007121 	.word	0x08007121
 8007104:	08007197 	.word	0x08007197
 8007108:	080071ab 	.word	0x080071ab
 800710c:	080071f7 	.word	0x080071f7
 8007110:	08007121 	.word	0x08007121
 8007114:	08007121 	.word	0x08007121
 8007118:	08007197 	.word	0x08007197
 800711c:	080071ab 	.word	0x080071ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007122:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007126:	f043 0301 	orr.w	r3, r3, #1
 800712a:	b2da      	uxtb	r2, r3
 800712c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	18d1      	adds	r1, r2, r3
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800713e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007140:	f7ff ff5c 	bl	8006ffc <prvInsertTimerInActiveList>
 8007144:	4603      	mov	r3, r0
 8007146:	2b00      	cmp	r3, #0
 8007148:	d06c      	beq.n	8007224 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800714a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714c:	6a1b      	ldr	r3, [r3, #32]
 800714e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007150:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007154:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d061      	beq.n	8007224 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007160:	68ba      	ldr	r2, [r7, #8]
 8007162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	441a      	add	r2, r3
 8007168:	2300      	movs	r3, #0
 800716a:	9300      	str	r3, [sp, #0]
 800716c:	2300      	movs	r3, #0
 800716e:	2100      	movs	r1, #0
 8007170:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007172:	f7ff fe01 	bl	8006d78 <xTimerGenericCommand>
 8007176:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d152      	bne.n	8007224 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800717e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007182:	f383 8811 	msr	BASEPRI, r3
 8007186:	f3bf 8f6f 	isb	sy
 800718a:	f3bf 8f4f 	dsb	sy
 800718e:	61bb      	str	r3, [r7, #24]
}
 8007190:	bf00      	nop
 8007192:	bf00      	nop
 8007194:	e7fd      	b.n	8007192 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007198:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800719c:	f023 0301 	bic.w	r3, r3, #1
 80071a0:	b2da      	uxtb	r2, r3
 80071a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80071a8:	e03d      	b.n	8007226 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071b0:	f043 0301 	orr.w	r3, r3, #1
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071bc:	68ba      	ldr	r2, [r7, #8]
 80071be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d10b      	bne.n	80071e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80071ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ce:	f383 8811 	msr	BASEPRI, r3
 80071d2:	f3bf 8f6f 	isb	sy
 80071d6:	f3bf 8f4f 	dsb	sy
 80071da:	617b      	str	r3, [r7, #20]
}
 80071dc:	bf00      	nop
 80071de:	bf00      	nop
 80071e0:	e7fd      	b.n	80071de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071e4:	699a      	ldr	r2, [r3, #24]
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	18d1      	adds	r1, r2, r3
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071f0:	f7ff ff04 	bl	8006ffc <prvInsertTimerInActiveList>
					break;
 80071f4:	e017      	b.n	8007226 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80071f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071fc:	f003 0302 	and.w	r3, r3, #2
 8007200:	2b00      	cmp	r3, #0
 8007202:	d103      	bne.n	800720c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007204:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007206:	f000 fc07 	bl	8007a18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800720a:	e00c      	b.n	8007226 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800720c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800720e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007212:	f023 0301 	bic.w	r3, r3, #1
 8007216:	b2da      	uxtb	r2, r3
 8007218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800721e:	e002      	b.n	8007226 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007220:	bf00      	nop
 8007222:	e000      	b.n	8007226 <prvProcessReceivedCommands+0x1a6>
					break;
 8007224:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007226:	4b08      	ldr	r3, [pc, #32]	@ (8007248 <prvProcessReceivedCommands+0x1c8>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	1d39      	adds	r1, r7, #4
 800722c:	2200      	movs	r2, #0
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fb5e 	bl	80058f0 <xQueueReceive>
 8007234:	4603      	mov	r3, r0
 8007236:	2b00      	cmp	r3, #0
 8007238:	f47f af26 	bne.w	8007088 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800723c:	bf00      	nop
 800723e:	bf00      	nop
 8007240:	3730      	adds	r7, #48	@ 0x30
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20000ef0 	.word	0x20000ef0

0800724c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b088      	sub	sp, #32
 8007250:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007252:	e049      	b.n	80072e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007254:	4b2e      	ldr	r3, [pc, #184]	@ (8007310 <prvSwitchTimerLists+0xc4>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68db      	ldr	r3, [r3, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800725e:	4b2c      	ldr	r3, [pc, #176]	@ (8007310 <prvSwitchTimerLists+0xc4>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	3304      	adds	r3, #4
 800726c:	4618      	mov	r0, r3
 800726e:	f7fe f86b 	bl	8005348 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007280:	f003 0304 	and.w	r3, r3, #4
 8007284:	2b00      	cmp	r3, #0
 8007286:	d02f      	beq.n	80072e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	4413      	add	r3, r2
 8007290:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	429a      	cmp	r2, r3
 8007298:	d90e      	bls.n	80072b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	68ba      	ldr	r2, [r7, #8]
 800729e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	68fa      	ldr	r2, [r7, #12]
 80072a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007310 <prvSwitchTimerLists+0xc4>)
 80072a8:	681a      	ldr	r2, [r3, #0]
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3304      	adds	r3, #4
 80072ae:	4619      	mov	r1, r3
 80072b0:	4610      	mov	r0, r2
 80072b2:	f7fe f810 	bl	80052d6 <vListInsert>
 80072b6:	e017      	b.n	80072e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072b8:	2300      	movs	r3, #0
 80072ba:	9300      	str	r3, [sp, #0]
 80072bc:	2300      	movs	r3, #0
 80072be:	693a      	ldr	r2, [r7, #16]
 80072c0:	2100      	movs	r1, #0
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f7ff fd58 	bl	8006d78 <xTimerGenericCommand>
 80072c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d10b      	bne.n	80072e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	603b      	str	r3, [r7, #0]
}
 80072e2:	bf00      	nop
 80072e4:	bf00      	nop
 80072e6:	e7fd      	b.n	80072e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072e8:	4b09      	ldr	r3, [pc, #36]	@ (8007310 <prvSwitchTimerLists+0xc4>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1b0      	bne.n	8007254 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072f2:	4b07      	ldr	r3, [pc, #28]	@ (8007310 <prvSwitchTimerLists+0xc4>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072f8:	4b06      	ldr	r3, [pc, #24]	@ (8007314 <prvSwitchTimerLists+0xc8>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a04      	ldr	r2, [pc, #16]	@ (8007310 <prvSwitchTimerLists+0xc4>)
 80072fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007300:	4a04      	ldr	r2, [pc, #16]	@ (8007314 <prvSwitchTimerLists+0xc8>)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	6013      	str	r3, [r2, #0]
}
 8007306:	bf00      	nop
 8007308:	3718      	adds	r7, #24
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}
 800730e:	bf00      	nop
 8007310:	20000ee8 	.word	0x20000ee8
 8007314:	20000eec 	.word	0x20000eec

08007318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800731e:	f000 f98b 	bl	8007638 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007322:	4b15      	ldr	r3, [pc, #84]	@ (8007378 <prvCheckForValidListAndQueue+0x60>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d120      	bne.n	800736c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800732a:	4814      	ldr	r0, [pc, #80]	@ (800737c <prvCheckForValidListAndQueue+0x64>)
 800732c:	f7fd ff82 	bl	8005234 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007330:	4813      	ldr	r0, [pc, #76]	@ (8007380 <prvCheckForValidListAndQueue+0x68>)
 8007332:	f7fd ff7f 	bl	8005234 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007336:	4b13      	ldr	r3, [pc, #76]	@ (8007384 <prvCheckForValidListAndQueue+0x6c>)
 8007338:	4a10      	ldr	r2, [pc, #64]	@ (800737c <prvCheckForValidListAndQueue+0x64>)
 800733a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800733c:	4b12      	ldr	r3, [pc, #72]	@ (8007388 <prvCheckForValidListAndQueue+0x70>)
 800733e:	4a10      	ldr	r2, [pc, #64]	@ (8007380 <prvCheckForValidListAndQueue+0x68>)
 8007340:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007342:	2300      	movs	r3, #0
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	4b11      	ldr	r3, [pc, #68]	@ (800738c <prvCheckForValidListAndQueue+0x74>)
 8007348:	4a11      	ldr	r2, [pc, #68]	@ (8007390 <prvCheckForValidListAndQueue+0x78>)
 800734a:	2110      	movs	r1, #16
 800734c:	200a      	movs	r0, #10
 800734e:	f7fe f88f 	bl	8005470 <xQueueGenericCreateStatic>
 8007352:	4603      	mov	r3, r0
 8007354:	4a08      	ldr	r2, [pc, #32]	@ (8007378 <prvCheckForValidListAndQueue+0x60>)
 8007356:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007358:	4b07      	ldr	r3, [pc, #28]	@ (8007378 <prvCheckForValidListAndQueue+0x60>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007360:	4b05      	ldr	r3, [pc, #20]	@ (8007378 <prvCheckForValidListAndQueue+0x60>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	490b      	ldr	r1, [pc, #44]	@ (8007394 <prvCheckForValidListAndQueue+0x7c>)
 8007366:	4618      	mov	r0, r3
 8007368:	f7fe fcb4 	bl	8005cd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800736c:	f000 f996 	bl	800769c <vPortExitCritical>
}
 8007370:	bf00      	nop
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	20000ef0 	.word	0x20000ef0
 800737c:	20000ec0 	.word	0x20000ec0
 8007380:	20000ed4 	.word	0x20000ed4
 8007384:	20000ee8 	.word	0x20000ee8
 8007388:	20000eec 	.word	0x20000eec
 800738c:	20000f9c 	.word	0x20000f9c
 8007390:	20000efc 	.word	0x20000efc
 8007394:	08007d10 	.word	0x08007d10

08007398 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b086      	sub	sp, #24
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d10b      	bne.n	80073c2 <pvTimerGetTimerID+0x2a>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	60fb      	str	r3, [r7, #12]
}
 80073bc:	bf00      	nop
 80073be:	bf00      	nop
 80073c0:	e7fd      	b.n	80073be <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 80073c2:	f000 f939 	bl	8007638 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	69db      	ldr	r3, [r3, #28]
 80073ca:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80073cc:	f000 f966 	bl	800769c <vPortExitCritical>

	return pvReturn;
 80073d0:	693b      	ldr	r3, [r7, #16]
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3718      	adds	r7, #24
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	3b04      	subs	r3, #4
 80073ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80073f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	3b04      	subs	r3, #4
 80073fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	f023 0201 	bic.w	r2, r3, #1
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	3b04      	subs	r3, #4
 800740a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800740c:	4a0c      	ldr	r2, [pc, #48]	@ (8007440 <pxPortInitialiseStack+0x64>)
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	3b14      	subs	r3, #20
 8007416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3b04      	subs	r3, #4
 8007422:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f06f 0202 	mvn.w	r2, #2
 800742a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3b20      	subs	r3, #32
 8007430:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007432:	68fb      	ldr	r3, [r7, #12]
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	08007445 	.word	0x08007445

08007444 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007444:	b480      	push	{r7}
 8007446:	b085      	sub	sp, #20
 8007448:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800744a:	2300      	movs	r3, #0
 800744c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800744e:	4b13      	ldr	r3, [pc, #76]	@ (800749c <prvTaskExitError+0x58>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007456:	d00b      	beq.n	8007470 <prvTaskExitError+0x2c>
	__asm volatile
 8007458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800745c:	f383 8811 	msr	BASEPRI, r3
 8007460:	f3bf 8f6f 	isb	sy
 8007464:	f3bf 8f4f 	dsb	sy
 8007468:	60fb      	str	r3, [r7, #12]
}
 800746a:	bf00      	nop
 800746c:	bf00      	nop
 800746e:	e7fd      	b.n	800746c <prvTaskExitError+0x28>
	__asm volatile
 8007470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007474:	f383 8811 	msr	BASEPRI, r3
 8007478:	f3bf 8f6f 	isb	sy
 800747c:	f3bf 8f4f 	dsb	sy
 8007480:	60bb      	str	r3, [r7, #8]
}
 8007482:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007484:	bf00      	nop
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0fc      	beq.n	8007486 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800748c:	bf00      	nop
 800748e:	bf00      	nop
 8007490:	3714      	adds	r7, #20
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	20000048 	.word	0x20000048

080074a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80074a0:	4b07      	ldr	r3, [pc, #28]	@ (80074c0 <pxCurrentTCBConst2>)
 80074a2:	6819      	ldr	r1, [r3, #0]
 80074a4:	6808      	ldr	r0, [r1, #0]
 80074a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074aa:	f380 8809 	msr	PSP, r0
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f04f 0000 	mov.w	r0, #0
 80074b6:	f380 8811 	msr	BASEPRI, r0
 80074ba:	4770      	bx	lr
 80074bc:	f3af 8000 	nop.w

080074c0 <pxCurrentTCBConst2>:
 80074c0:	200009c0 	.word	0x200009c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop

080074c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80074c8:	4808      	ldr	r0, [pc, #32]	@ (80074ec <prvPortStartFirstTask+0x24>)
 80074ca:	6800      	ldr	r0, [r0, #0]
 80074cc:	6800      	ldr	r0, [r0, #0]
 80074ce:	f380 8808 	msr	MSP, r0
 80074d2:	f04f 0000 	mov.w	r0, #0
 80074d6:	f380 8814 	msr	CONTROL, r0
 80074da:	b662      	cpsie	i
 80074dc:	b661      	cpsie	f
 80074de:	f3bf 8f4f 	dsb	sy
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	df00      	svc	0
 80074e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074ea:	bf00      	nop
 80074ec:	e000ed08 	.word	0xe000ed08

080074f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074f6:	4b47      	ldr	r3, [pc, #284]	@ (8007614 <xPortStartScheduler+0x124>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a47      	ldr	r2, [pc, #284]	@ (8007618 <xPortStartScheduler+0x128>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	d10b      	bne.n	8007518 <xPortStartScheduler+0x28>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007504:	f383 8811 	msr	BASEPRI, r3
 8007508:	f3bf 8f6f 	isb	sy
 800750c:	f3bf 8f4f 	dsb	sy
 8007510:	60fb      	str	r3, [r7, #12]
}
 8007512:	bf00      	nop
 8007514:	bf00      	nop
 8007516:	e7fd      	b.n	8007514 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007518:	4b3e      	ldr	r3, [pc, #248]	@ (8007614 <xPortStartScheduler+0x124>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a3f      	ldr	r2, [pc, #252]	@ (800761c <xPortStartScheduler+0x12c>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d10b      	bne.n	800753a <xPortStartScheduler+0x4a>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	613b      	str	r3, [r7, #16]
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800753a:	4b39      	ldr	r3, [pc, #228]	@ (8007620 <xPortStartScheduler+0x130>)
 800753c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	b2db      	uxtb	r3, r3
 8007544:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	22ff      	movs	r2, #255	@ 0xff
 800754a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	b2db      	uxtb	r3, r3
 8007552:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007554:	78fb      	ldrb	r3, [r7, #3]
 8007556:	b2db      	uxtb	r3, r3
 8007558:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800755c:	b2da      	uxtb	r2, r3
 800755e:	4b31      	ldr	r3, [pc, #196]	@ (8007624 <xPortStartScheduler+0x134>)
 8007560:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007562:	4b31      	ldr	r3, [pc, #196]	@ (8007628 <xPortStartScheduler+0x138>)
 8007564:	2207      	movs	r2, #7
 8007566:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007568:	e009      	b.n	800757e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800756a:	4b2f      	ldr	r3, [pc, #188]	@ (8007628 <xPortStartScheduler+0x138>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	3b01      	subs	r3, #1
 8007570:	4a2d      	ldr	r2, [pc, #180]	@ (8007628 <xPortStartScheduler+0x138>)
 8007572:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007574:	78fb      	ldrb	r3, [r7, #3]
 8007576:	b2db      	uxtb	r3, r3
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	b2db      	uxtb	r3, r3
 800757c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800757e:	78fb      	ldrb	r3, [r7, #3]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007586:	2b80      	cmp	r3, #128	@ 0x80
 8007588:	d0ef      	beq.n	800756a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800758a:	4b27      	ldr	r3, [pc, #156]	@ (8007628 <xPortStartScheduler+0x138>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f1c3 0307 	rsb	r3, r3, #7
 8007592:	2b04      	cmp	r3, #4
 8007594:	d00b      	beq.n	80075ae <xPortStartScheduler+0xbe>
	__asm volatile
 8007596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	60bb      	str	r3, [r7, #8]
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	e7fd      	b.n	80075aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80075ae:	4b1e      	ldr	r3, [pc, #120]	@ (8007628 <xPortStartScheduler+0x138>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	021b      	lsls	r3, r3, #8
 80075b4:	4a1c      	ldr	r2, [pc, #112]	@ (8007628 <xPortStartScheduler+0x138>)
 80075b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80075b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007628 <xPortStartScheduler+0x138>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80075c0:	4a19      	ldr	r2, [pc, #100]	@ (8007628 <xPortStartScheduler+0x138>)
 80075c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80075cc:	4b17      	ldr	r3, [pc, #92]	@ (800762c <xPortStartScheduler+0x13c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a16      	ldr	r2, [pc, #88]	@ (800762c <xPortStartScheduler+0x13c>)
 80075d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80075d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80075d8:	4b14      	ldr	r3, [pc, #80]	@ (800762c <xPortStartScheduler+0x13c>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a13      	ldr	r2, [pc, #76]	@ (800762c <xPortStartScheduler+0x13c>)
 80075de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80075e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80075e4:	f000 f8da 	bl	800779c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075e8:	4b11      	ldr	r3, [pc, #68]	@ (8007630 <xPortStartScheduler+0x140>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075ee:	f000 f8f9 	bl	80077e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075f2:	4b10      	ldr	r3, [pc, #64]	@ (8007634 <xPortStartScheduler+0x144>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	4a0f      	ldr	r2, [pc, #60]	@ (8007634 <xPortStartScheduler+0x144>)
 80075f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80075fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075fe:	f7ff ff63 	bl	80074c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007602:	f7fe ff7f 	bl	8006504 <vTaskSwitchContext>
	prvTaskExitError();
 8007606:	f7ff ff1d 	bl	8007444 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3718      	adds	r7, #24
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}
 8007614:	e000ed00 	.word	0xe000ed00
 8007618:	410fc271 	.word	0x410fc271
 800761c:	410fc270 	.word	0x410fc270
 8007620:	e000e400 	.word	0xe000e400
 8007624:	20000fec 	.word	0x20000fec
 8007628:	20000ff0 	.word	0x20000ff0
 800762c:	e000ed20 	.word	0xe000ed20
 8007630:	20000048 	.word	0x20000048
 8007634:	e000ef34 	.word	0xe000ef34

08007638 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007638:	b480      	push	{r7}
 800763a:	b083      	sub	sp, #12
 800763c:	af00      	add	r7, sp, #0
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	607b      	str	r3, [r7, #4]
}
 8007650:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007652:	4b10      	ldr	r3, [pc, #64]	@ (8007694 <vPortEnterCritical+0x5c>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3301      	adds	r3, #1
 8007658:	4a0e      	ldr	r2, [pc, #56]	@ (8007694 <vPortEnterCritical+0x5c>)
 800765a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800765c:	4b0d      	ldr	r3, [pc, #52]	@ (8007694 <vPortEnterCritical+0x5c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d110      	bne.n	8007686 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007664:	4b0c      	ldr	r3, [pc, #48]	@ (8007698 <vPortEnterCritical+0x60>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	b2db      	uxtb	r3, r3
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00b      	beq.n	8007686 <vPortEnterCritical+0x4e>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	603b      	str	r3, [r7, #0]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <vPortEnterCritical+0x4a>
	}
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	20000048 	.word	0x20000048
 8007698:	e000ed04 	.word	0xe000ed04

0800769c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80076a2:	4b12      	ldr	r3, [pc, #72]	@ (80076ec <vPortExitCritical+0x50>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d10b      	bne.n	80076c2 <vPortExitCritical+0x26>
	__asm volatile
 80076aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ae:	f383 8811 	msr	BASEPRI, r3
 80076b2:	f3bf 8f6f 	isb	sy
 80076b6:	f3bf 8f4f 	dsb	sy
 80076ba:	607b      	str	r3, [r7, #4]
}
 80076bc:	bf00      	nop
 80076be:	bf00      	nop
 80076c0:	e7fd      	b.n	80076be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80076c2:	4b0a      	ldr	r3, [pc, #40]	@ (80076ec <vPortExitCritical+0x50>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	4a08      	ldr	r2, [pc, #32]	@ (80076ec <vPortExitCritical+0x50>)
 80076ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80076cc:	4b07      	ldr	r3, [pc, #28]	@ (80076ec <vPortExitCritical+0x50>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d105      	bne.n	80076e0 <vPortExitCritical+0x44>
 80076d4:	2300      	movs	r3, #0
 80076d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	f383 8811 	msr	BASEPRI, r3
}
 80076de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	20000048 	.word	0x20000048

080076f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076f0:	f3ef 8009 	mrs	r0, PSP
 80076f4:	f3bf 8f6f 	isb	sy
 80076f8:	4b15      	ldr	r3, [pc, #84]	@ (8007750 <pxCurrentTCBConst>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	f01e 0f10 	tst.w	lr, #16
 8007700:	bf08      	it	eq
 8007702:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007706:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800770a:	6010      	str	r0, [r2, #0]
 800770c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007710:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007714:	f380 8811 	msr	BASEPRI, r0
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	f3bf 8f6f 	isb	sy
 8007720:	f7fe fef0 	bl	8006504 <vTaskSwitchContext>
 8007724:	f04f 0000 	mov.w	r0, #0
 8007728:	f380 8811 	msr	BASEPRI, r0
 800772c:	bc09      	pop	{r0, r3}
 800772e:	6819      	ldr	r1, [r3, #0]
 8007730:	6808      	ldr	r0, [r1, #0]
 8007732:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007736:	f01e 0f10 	tst.w	lr, #16
 800773a:	bf08      	it	eq
 800773c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007740:	f380 8809 	msr	PSP, r0
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop
 800774c:	f3af 8000 	nop.w

08007750 <pxCurrentTCBConst>:
 8007750:	200009c0 	.word	0x200009c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007754:	bf00      	nop
 8007756:	bf00      	nop

08007758 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	607b      	str	r3, [r7, #4]
}
 8007770:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007772:	f7fe fe0d 	bl	8006390 <xTaskIncrementTick>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d003      	beq.n	8007784 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800777c:	4b06      	ldr	r3, [pc, #24]	@ (8007798 <xPortSysTickHandler+0x40>)
 800777e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007782:	601a      	str	r2, [r3, #0]
 8007784:	2300      	movs	r3, #0
 8007786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	f383 8811 	msr	BASEPRI, r3
}
 800778e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007790:	bf00      	nop
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	e000ed04 	.word	0xe000ed04

0800779c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800779c:	b480      	push	{r7}
 800779e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80077a0:	4b0b      	ldr	r3, [pc, #44]	@ (80077d0 <vPortSetupTimerInterrupt+0x34>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80077a6:	4b0b      	ldr	r3, [pc, #44]	@ (80077d4 <vPortSetupTimerInterrupt+0x38>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80077ac:	4b0a      	ldr	r3, [pc, #40]	@ (80077d8 <vPortSetupTimerInterrupt+0x3c>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a0a      	ldr	r2, [pc, #40]	@ (80077dc <vPortSetupTimerInterrupt+0x40>)
 80077b2:	fba2 2303 	umull	r2, r3, r2, r3
 80077b6:	099b      	lsrs	r3, r3, #6
 80077b8:	4a09      	ldr	r2, [pc, #36]	@ (80077e0 <vPortSetupTimerInterrupt+0x44>)
 80077ba:	3b01      	subs	r3, #1
 80077bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80077be:	4b04      	ldr	r3, [pc, #16]	@ (80077d0 <vPortSetupTimerInterrupt+0x34>)
 80077c0:	2207      	movs	r2, #7
 80077c2:	601a      	str	r2, [r3, #0]
}
 80077c4:	bf00      	nop
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
 80077ce:	bf00      	nop
 80077d0:	e000e010 	.word	0xe000e010
 80077d4:	e000e018 	.word	0xe000e018
 80077d8:	2000003c 	.word	0x2000003c
 80077dc:	10624dd3 	.word	0x10624dd3
 80077e0:	e000e014 	.word	0xe000e014

080077e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80077f4 <vPortEnableVFP+0x10>
 80077e8:	6801      	ldr	r1, [r0, #0]
 80077ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80077ee:	6001      	str	r1, [r0, #0]
 80077f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077f2:	bf00      	nop
 80077f4:	e000ed88 	.word	0xe000ed88

080077f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077f8:	b480      	push	{r7}
 80077fa:	b085      	sub	sp, #20
 80077fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077fe:	f3ef 8305 	mrs	r3, IPSR
 8007802:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2b0f      	cmp	r3, #15
 8007808:	d915      	bls.n	8007836 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800780a:	4a18      	ldr	r2, [pc, #96]	@ (800786c <vPortValidateInterruptPriority+0x74>)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	4413      	add	r3, r2
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007814:	4b16      	ldr	r3, [pc, #88]	@ (8007870 <vPortValidateInterruptPriority+0x78>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	7afa      	ldrb	r2, [r7, #11]
 800781a:	429a      	cmp	r2, r3
 800781c:	d20b      	bcs.n	8007836 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	e7fd      	b.n	8007832 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007836:	4b0f      	ldr	r3, [pc, #60]	@ (8007874 <vPortValidateInterruptPriority+0x7c>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800783e:	4b0e      	ldr	r3, [pc, #56]	@ (8007878 <vPortValidateInterruptPriority+0x80>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	429a      	cmp	r2, r3
 8007844:	d90b      	bls.n	800785e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	603b      	str	r3, [r7, #0]
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <vPortValidateInterruptPriority+0x62>
	}
 800785e:	bf00      	nop
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	e000e3f0 	.word	0xe000e3f0
 8007870:	20000fec 	.word	0x20000fec
 8007874:	e000ed0c 	.word	0xe000ed0c
 8007878:	20000ff0 	.word	0x20000ff0

0800787c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08a      	sub	sp, #40	@ 0x28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007884:	2300      	movs	r3, #0
 8007886:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007888:	f7fe fcc6 	bl	8006218 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800788c:	4b5c      	ldr	r3, [pc, #368]	@ (8007a00 <pvPortMalloc+0x184>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d101      	bne.n	8007898 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007894:	f000 f924 	bl	8007ae0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007898:	4b5a      	ldr	r3, [pc, #360]	@ (8007a04 <pvPortMalloc+0x188>)
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	4013      	ands	r3, r2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	f040 8095 	bne.w	80079d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01e      	beq.n	80078ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80078ac:	2208      	movs	r2, #8
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4413      	add	r3, r2
 80078b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f003 0307 	and.w	r3, r3, #7
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d015      	beq.n	80078ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f023 0307 	bic.w	r3, r3, #7
 80078c4:	3308      	adds	r3, #8
 80078c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f003 0307 	and.w	r3, r3, #7
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00b      	beq.n	80078ea <pvPortMalloc+0x6e>
	__asm volatile
 80078d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	617b      	str	r3, [r7, #20]
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	e7fd      	b.n	80078e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d06f      	beq.n	80079d0 <pvPortMalloc+0x154>
 80078f0:	4b45      	ldr	r3, [pc, #276]	@ (8007a08 <pvPortMalloc+0x18c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	687a      	ldr	r2, [r7, #4]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d86a      	bhi.n	80079d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078fa:	4b44      	ldr	r3, [pc, #272]	@ (8007a0c <pvPortMalloc+0x190>)
 80078fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078fe:	4b43      	ldr	r3, [pc, #268]	@ (8007a0c <pvPortMalloc+0x190>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007904:	e004      	b.n	8007910 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007908:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800790a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	687a      	ldr	r2, [r7, #4]
 8007916:	429a      	cmp	r2, r3
 8007918:	d903      	bls.n	8007922 <pvPortMalloc+0xa6>
 800791a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1f1      	bne.n	8007906 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007922:	4b37      	ldr	r3, [pc, #220]	@ (8007a00 <pvPortMalloc+0x184>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007928:	429a      	cmp	r2, r3
 800792a:	d051      	beq.n	80079d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2208      	movs	r2, #8
 8007932:	4413      	add	r3, r2
 8007934:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	6a3b      	ldr	r3, [r7, #32]
 800793c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	1ad2      	subs	r2, r2, r3
 8007946:	2308      	movs	r3, #8
 8007948:	005b      	lsls	r3, r3, #1
 800794a:	429a      	cmp	r2, r3
 800794c:	d920      	bls.n	8007990 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800794e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	4413      	add	r3, r2
 8007954:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00b      	beq.n	8007978 <pvPortMalloc+0xfc>
	__asm volatile
 8007960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007964:	f383 8811 	msr	BASEPRI, r3
 8007968:	f3bf 8f6f 	isb	sy
 800796c:	f3bf 8f4f 	dsb	sy
 8007970:	613b      	str	r3, [r7, #16]
}
 8007972:	bf00      	nop
 8007974:	bf00      	nop
 8007976:	e7fd      	b.n	8007974 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800797a:	685a      	ldr	r2, [r3, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	1ad2      	subs	r2, r2, r3
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007986:	687a      	ldr	r2, [r7, #4]
 8007988:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800798a:	69b8      	ldr	r0, [r7, #24]
 800798c:	f000 f90a 	bl	8007ba4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007990:	4b1d      	ldr	r3, [pc, #116]	@ (8007a08 <pvPortMalloc+0x18c>)
 8007992:	681a      	ldr	r2, [r3, #0]
 8007994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	4a1b      	ldr	r2, [pc, #108]	@ (8007a08 <pvPortMalloc+0x18c>)
 800799c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800799e:	4b1a      	ldr	r3, [pc, #104]	@ (8007a08 <pvPortMalloc+0x18c>)
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	4b1b      	ldr	r3, [pc, #108]	@ (8007a10 <pvPortMalloc+0x194>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d203      	bcs.n	80079b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80079aa:	4b17      	ldr	r3, [pc, #92]	@ (8007a08 <pvPortMalloc+0x18c>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a18      	ldr	r2, [pc, #96]	@ (8007a10 <pvPortMalloc+0x194>)
 80079b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80079b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	4b13      	ldr	r3, [pc, #76]	@ (8007a04 <pvPortMalloc+0x188>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	431a      	orrs	r2, r3
 80079bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80079c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c2:	2200      	movs	r2, #0
 80079c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80079c6:	4b13      	ldr	r3, [pc, #76]	@ (8007a14 <pvPortMalloc+0x198>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	3301      	adds	r3, #1
 80079cc:	4a11      	ldr	r2, [pc, #68]	@ (8007a14 <pvPortMalloc+0x198>)
 80079ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80079d0:	f7fe fc30 	bl	8006234 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80079d4:	69fb      	ldr	r3, [r7, #28]
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d00b      	beq.n	80079f6 <pvPortMalloc+0x17a>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	60fb      	str	r3, [r7, #12]
}
 80079f0:	bf00      	nop
 80079f2:	bf00      	nop
 80079f4:	e7fd      	b.n	80079f2 <pvPortMalloc+0x176>
	return pvReturn;
 80079f6:	69fb      	ldr	r3, [r7, #28]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3728      	adds	r7, #40	@ 0x28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20001bb4 	.word	0x20001bb4
 8007a04:	20001bc8 	.word	0x20001bc8
 8007a08:	20001bb8 	.word	0x20001bb8
 8007a0c:	20001bac 	.word	0x20001bac
 8007a10:	20001bbc 	.word	0x20001bbc
 8007a14:	20001bc0 	.word	0x20001bc0

08007a18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d04f      	beq.n	8007aca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007a2a:	2308      	movs	r3, #8
 8007a2c:	425b      	negs	r3, r3
 8007a2e:	697a      	ldr	r2, [r7, #20]
 8007a30:	4413      	add	r3, r2
 8007a32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	4b25      	ldr	r3, [pc, #148]	@ (8007ad4 <vPortFree+0xbc>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4013      	ands	r3, r2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10b      	bne.n	8007a5e <vPortFree+0x46>
	__asm volatile
 8007a46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a4a:	f383 8811 	msr	BASEPRI, r3
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f3bf 8f4f 	dsb	sy
 8007a56:	60fb      	str	r3, [r7, #12]
}
 8007a58:	bf00      	nop
 8007a5a:	bf00      	nop
 8007a5c:	e7fd      	b.n	8007a5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00b      	beq.n	8007a7e <vPortFree+0x66>
	__asm volatile
 8007a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6a:	f383 8811 	msr	BASEPRI, r3
 8007a6e:	f3bf 8f6f 	isb	sy
 8007a72:	f3bf 8f4f 	dsb	sy
 8007a76:	60bb      	str	r3, [r7, #8]
}
 8007a78:	bf00      	nop
 8007a7a:	bf00      	nop
 8007a7c:	e7fd      	b.n	8007a7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	685a      	ldr	r2, [r3, #4]
 8007a82:	4b14      	ldr	r3, [pc, #80]	@ (8007ad4 <vPortFree+0xbc>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4013      	ands	r3, r2
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d01e      	beq.n	8007aca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d11a      	bne.n	8007aca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	685a      	ldr	r2, [r3, #4]
 8007a98:	4b0e      	ldr	r3, [pc, #56]	@ (8007ad4 <vPortFree+0xbc>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	43db      	mvns	r3, r3
 8007a9e:	401a      	ands	r2, r3
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007aa4:	f7fe fbb8 	bl	8006218 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	4b0a      	ldr	r3, [pc, #40]	@ (8007ad8 <vPortFree+0xc0>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4413      	add	r3, r2
 8007ab2:	4a09      	ldr	r2, [pc, #36]	@ (8007ad8 <vPortFree+0xc0>)
 8007ab4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007ab6:	6938      	ldr	r0, [r7, #16]
 8007ab8:	f000 f874 	bl	8007ba4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007abc:	4b07      	ldr	r3, [pc, #28]	@ (8007adc <vPortFree+0xc4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	4a06      	ldr	r2, [pc, #24]	@ (8007adc <vPortFree+0xc4>)
 8007ac4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007ac6:	f7fe fbb5 	bl	8006234 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007aca:	bf00      	nop
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20001bc8 	.word	0x20001bc8
 8007ad8:	20001bb8 	.word	0x20001bb8
 8007adc:	20001bc4 	.word	0x20001bc4

08007ae0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ae6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007aea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007aec:	4b27      	ldr	r3, [pc, #156]	@ (8007b8c <prvHeapInit+0xac>)
 8007aee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	f003 0307 	and.w	r3, r3, #7
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00c      	beq.n	8007b14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	3307      	adds	r3, #7
 8007afe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f023 0307 	bic.w	r3, r3, #7
 8007b06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8007b8c <prvHeapInit+0xac>)
 8007b10:	4413      	add	r3, r2
 8007b12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007b18:	4a1d      	ldr	r2, [pc, #116]	@ (8007b90 <prvHeapInit+0xb0>)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8007b90 <prvHeapInit+0xb0>)
 8007b20:	2200      	movs	r2, #0
 8007b22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	68ba      	ldr	r2, [r7, #8]
 8007b28:	4413      	add	r3, r2
 8007b2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007b2c:	2208      	movs	r2, #8
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	1a9b      	subs	r3, r3, r2
 8007b32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0307 	bic.w	r3, r3, #7
 8007b3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4a15      	ldr	r2, [pc, #84]	@ (8007b94 <prvHeapInit+0xb4>)
 8007b40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007b42:	4b14      	ldr	r3, [pc, #80]	@ (8007b94 <prvHeapInit+0xb4>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	2200      	movs	r2, #0
 8007b48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007b4a:	4b12      	ldr	r3, [pc, #72]	@ (8007b94 <prvHeapInit+0xb4>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	1ad2      	subs	r2, r2, r3
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b60:	4b0c      	ldr	r3, [pc, #48]	@ (8007b94 <prvHeapInit+0xb4>)
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	685b      	ldr	r3, [r3, #4]
 8007b6c:	4a0a      	ldr	r2, [pc, #40]	@ (8007b98 <prvHeapInit+0xb8>)
 8007b6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	4a09      	ldr	r2, [pc, #36]	@ (8007b9c <prvHeapInit+0xbc>)
 8007b76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b78:	4b09      	ldr	r3, [pc, #36]	@ (8007ba0 <prvHeapInit+0xc0>)
 8007b7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007b7e:	601a      	str	r2, [r3, #0]
}
 8007b80:	bf00      	nop
 8007b82:	3714      	adds	r7, #20
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr
 8007b8c:	20000ff4 	.word	0x20000ff4
 8007b90:	20001bac 	.word	0x20001bac
 8007b94:	20001bb4 	.word	0x20001bb4
 8007b98:	20001bbc 	.word	0x20001bbc
 8007b9c:	20001bb8 	.word	0x20001bb8
 8007ba0:	20001bc8 	.word	0x20001bc8

08007ba4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007bac:	4b28      	ldr	r3, [pc, #160]	@ (8007c50 <prvInsertBlockIntoFreeList+0xac>)
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	e002      	b.n	8007bb8 <prvInsertBlockIntoFreeList+0x14>
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	687a      	ldr	r2, [r7, #4]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d8f7      	bhi.n	8007bb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	4413      	add	r3, r2
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	429a      	cmp	r2, r3
 8007bd2:	d108      	bne.n	8007be6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	441a      	add	r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	441a      	add	r2, r3
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d118      	bne.n	8007c2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	4b15      	ldr	r3, [pc, #84]	@ (8007c54 <prvInsertBlockIntoFreeList+0xb0>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d00d      	beq.n	8007c22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685a      	ldr	r2, [r3, #4]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	441a      	add	r2, r3
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	681a      	ldr	r2, [r3, #0]
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	601a      	str	r2, [r3, #0]
 8007c20:	e008      	b.n	8007c34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007c22:	4b0c      	ldr	r3, [pc, #48]	@ (8007c54 <prvInsertBlockIntoFreeList+0xb0>)
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	601a      	str	r2, [r3, #0]
 8007c2a:	e003      	b.n	8007c34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d002      	beq.n	8007c42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007c42:	bf00      	nop
 8007c44:	3714      	adds	r7, #20
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	20001bac 	.word	0x20001bac
 8007c54:	20001bb4 	.word	0x20001bb4

08007c58 <memset>:
 8007c58:	4402      	add	r2, r0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d100      	bne.n	8007c62 <memset+0xa>
 8007c60:	4770      	bx	lr
 8007c62:	f803 1b01 	strb.w	r1, [r3], #1
 8007c66:	e7f9      	b.n	8007c5c <memset+0x4>

08007c68 <__libc_init_array>:
 8007c68:	b570      	push	{r4, r5, r6, lr}
 8007c6a:	4d0d      	ldr	r5, [pc, #52]	@ (8007ca0 <__libc_init_array+0x38>)
 8007c6c:	4c0d      	ldr	r4, [pc, #52]	@ (8007ca4 <__libc_init_array+0x3c>)
 8007c6e:	1b64      	subs	r4, r4, r5
 8007c70:	10a4      	asrs	r4, r4, #2
 8007c72:	2600      	movs	r6, #0
 8007c74:	42a6      	cmp	r6, r4
 8007c76:	d109      	bne.n	8007c8c <__libc_init_array+0x24>
 8007c78:	4d0b      	ldr	r5, [pc, #44]	@ (8007ca8 <__libc_init_array+0x40>)
 8007c7a:	4c0c      	ldr	r4, [pc, #48]	@ (8007cac <__libc_init_array+0x44>)
 8007c7c:	f000 f826 	bl	8007ccc <_init>
 8007c80:	1b64      	subs	r4, r4, r5
 8007c82:	10a4      	asrs	r4, r4, #2
 8007c84:	2600      	movs	r6, #0
 8007c86:	42a6      	cmp	r6, r4
 8007c88:	d105      	bne.n	8007c96 <__libc_init_array+0x2e>
 8007c8a:	bd70      	pop	{r4, r5, r6, pc}
 8007c8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c90:	4798      	blx	r3
 8007c92:	3601      	adds	r6, #1
 8007c94:	e7ee      	b.n	8007c74 <__libc_init_array+0xc>
 8007c96:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c9a:	4798      	blx	r3
 8007c9c:	3601      	adds	r6, #1
 8007c9e:	e7f2      	b.n	8007c86 <__libc_init_array+0x1e>
 8007ca0:	08007d9c 	.word	0x08007d9c
 8007ca4:	08007d9c 	.word	0x08007d9c
 8007ca8:	08007d9c 	.word	0x08007d9c
 8007cac:	08007da0 	.word	0x08007da0

08007cb0 <memcpy>:
 8007cb0:	440a      	add	r2, r1
 8007cb2:	4291      	cmp	r1, r2
 8007cb4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cb8:	d100      	bne.n	8007cbc <memcpy+0xc>
 8007cba:	4770      	bx	lr
 8007cbc:	b510      	push	{r4, lr}
 8007cbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cc6:	4291      	cmp	r1, r2
 8007cc8:	d1f9      	bne.n	8007cbe <memcpy+0xe>
 8007cca:	bd10      	pop	{r4, pc}

08007ccc <_init>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr

08007cd8 <_fini>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	bf00      	nop
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr
=======
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2220      	movs	r2, #32
 8004fb4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fc4:	bf00      	nop
 8004fc6:	3754      	adds	r7, #84	@ 0x54
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr

08004fd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fee:	68f8      	ldr	r0, [r7, #12]
 8004ff0:	f7ff fa3e 	bl	8004470 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ff4:	bf00      	nop
 8004ff6:	3710      	adds	r7, #16
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	e853 3f00 	ldrex	r3, [r3]
 8005010:	60bb      	str	r3, [r7, #8]
   return(result);
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005018:	61fb      	str	r3, [r7, #28]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	461a      	mov	r2, r3
 8005020:	69fb      	ldr	r3, [r7, #28]
 8005022:	61bb      	str	r3, [r7, #24]
 8005024:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005026:	6979      	ldr	r1, [r7, #20]
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	e841 2300 	strex	r3, r2, [r1]
 800502e:	613b      	str	r3, [r7, #16]
   return(result);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1e6      	bne.n	8005004 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2220      	movs	r2, #32
 800503a:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f7ff fa0a 	bl	800445c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005048:	bf00      	nop
 800504a:	3720      	adds	r7, #32
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b09c      	sub	sp, #112	@ 0x70
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800505e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005068:	2b22      	cmp	r3, #34	@ 0x22
 800506a:	f040 80be 	bne.w	80051ea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005074:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005078:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800507c:	b2d9      	uxtb	r1, r3
 800507e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005082:	b2da      	uxtb	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005088:	400a      	ands	r2, r1
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005092:	1c5a      	adds	r2, r3, #1
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f040 80a3 	bne.w	80051fe <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80050c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80050c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80050d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80050dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80050e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1e6      	bne.n	80050b8 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3308      	adds	r3, #8
 80050f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	667b      	str	r3, [r7, #100]	@ 0x64
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3308      	adds	r3, #8
 8005108:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800510a:	647a      	str	r2, [r7, #68]	@ 0x44
 800510c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005110:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e5      	bne.n	80050ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a34      	ldr	r2, [pc, #208]	@ (8005208 <UART_RxISR_8BIT+0x1b8>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d01f      	beq.n	800517c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d018      	beq.n	800517c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	623b      	str	r3, [r7, #32]
   return(result);
 8005158:	6a3b      	ldr	r3, [r7, #32]
 800515a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800515e:	663b      	str	r3, [r7, #96]	@ 0x60
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	461a      	mov	r2, r3
 8005166:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005168:	633b      	str	r3, [r7, #48]	@ 0x30
 800516a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800516e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e6      	bne.n	800514a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005180:	2b01      	cmp	r3, #1
 8005182:	d12e      	bne.n	80051e2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	60fb      	str	r3, [r7, #12]
   return(result);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0310 	bic.w	r3, r3, #16
 800519e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051a8:	61fb      	str	r3, [r7, #28]
 80051aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	69b9      	ldr	r1, [r7, #24]
 80051ae:	69fa      	ldr	r2, [r7, #28]
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	617b      	str	r3, [r7, #20]
   return(result);
 80051b6:	697b      	ldr	r3, [r7, #20]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e6      	bne.n	800518a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f003 0310 	and.w	r3, r3, #16
 80051c6:	2b10      	cmp	r3, #16
 80051c8:	d103      	bne.n	80051d2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2210      	movs	r2, #16
 80051d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80051d8:	4619      	mov	r1, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff f952 	bl	8004484 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051e0:	e00d      	b.n	80051fe <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fb fcfc 	bl	8000be0 <HAL_UART_RxCpltCallback>
}
 80051e8:	e009      	b.n	80051fe <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	8b1b      	ldrh	r3, [r3, #24]
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f042 0208 	orr.w	r2, r2, #8
 80051fa:	b292      	uxth	r2, r2
 80051fc:	831a      	strh	r2, [r3, #24]
}
 80051fe:	bf00      	nop
 8005200:	3770      	adds	r7, #112	@ 0x70
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	40008000 	.word	0x40008000

0800520c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b09c      	sub	sp, #112	@ 0x70
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800521a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005224:	2b22      	cmp	r3, #34	@ 0x22
 8005226:	f040 80be 	bne.w	80053a6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8005230:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005238:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800523a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800523e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8005242:	4013      	ands	r3, r2
 8005244:	b29a      	uxth	r2, r3
 8005246:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005248:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800524e:	1c9a      	adds	r2, r3, #2
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800525a:	b29b      	uxth	r3, r3
 800525c:	3b01      	subs	r3, #1
 800525e:	b29a      	uxth	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 80a3 	bne.w	80053ba <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800527c:	e853 3f00 	ldrex	r3, [r3]
 8005280:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005282:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005284:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005288:	667b      	str	r3, [r7, #100]	@ 0x64
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	461a      	mov	r2, r3
 8005290:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005292:	657b      	str	r3, [r7, #84]	@ 0x54
 8005294:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005296:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005298:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800529a:	e841 2300 	strex	r3, r2, [r1]
 800529e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80052a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d1e6      	bne.n	8005274 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	3308      	adds	r3, #8
 80052ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b8:	f023 0301 	bic.w	r3, r3, #1
 80052bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	3308      	adds	r3, #8
 80052c4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80052c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80052c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e5      	bne.n	80052a6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2220      	movs	r2, #32
 80052de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a34      	ldr	r2, [pc, #208]	@ (80053c4 <UART_RxISR_16BIT+0x1b8>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d01f      	beq.n	8005338 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d018      	beq.n	8005338 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530c:	6a3b      	ldr	r3, [r7, #32]
 800530e:	e853 3f00 	ldrex	r3, [r3]
 8005312:	61fb      	str	r3, [r7, #28]
   return(result);
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800531a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	461a      	mov	r2, r3
 8005322:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005324:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005326:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800532a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800532c:	e841 2300 	strex	r3, r2, [r1]
 8005330:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	2b00      	cmp	r3, #0
 8005336:	d1e6      	bne.n	8005306 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800533c:	2b01      	cmp	r3, #1
 800533e:	d12e      	bne.n	800539e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	e853 3f00 	ldrex	r3, [r3]
 8005352:	60bb      	str	r3, [r7, #8]
   return(result);
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f023 0310 	bic.w	r3, r3, #16
 800535a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005368:	6979      	ldr	r1, [r7, #20]
 800536a:	69ba      	ldr	r2, [r7, #24]
 800536c:	e841 2300 	strex	r3, r2, [r1]
 8005370:	613b      	str	r3, [r7, #16]
   return(result);
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1e6      	bne.n	8005346 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	f003 0310 	and.w	r3, r3, #16
 8005382:	2b10      	cmp	r3, #16
 8005384:	d103      	bne.n	800538e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2210      	movs	r2, #16
 800538c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7ff f874 	bl	8004484 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800539c:	e00d      	b.n	80053ba <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fb fc1e 	bl	8000be0 <HAL_UART_RxCpltCallback>
}
 80053a4:	e009      	b.n	80053ba <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	8b1b      	ldrh	r3, [r3, #24]
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f042 0208 	orr.w	r2, r2, #8
 80053b6:	b292      	uxth	r2, r2
 80053b8:	831a      	strh	r2, [r3, #24]
}
 80053ba:	bf00      	nop
 80053bc:	3770      	adds	r7, #112	@ 0x70
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40008000 	.word	0x40008000

080053c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80053d0:	bf00      	nop
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <memset>:
 80053dc:	4402      	add	r2, r0
 80053de:	4603      	mov	r3, r0
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d100      	bne.n	80053e6 <memset+0xa>
 80053e4:	4770      	bx	lr
 80053e6:	f803 1b01 	strb.w	r1, [r3], #1
 80053ea:	e7f9      	b.n	80053e0 <memset+0x4>

080053ec <__libc_init_array>:
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	4d0d      	ldr	r5, [pc, #52]	@ (8005424 <__libc_init_array+0x38>)
 80053f0:	4c0d      	ldr	r4, [pc, #52]	@ (8005428 <__libc_init_array+0x3c>)
 80053f2:	1b64      	subs	r4, r4, r5
 80053f4:	10a4      	asrs	r4, r4, #2
 80053f6:	2600      	movs	r6, #0
 80053f8:	42a6      	cmp	r6, r4
 80053fa:	d109      	bne.n	8005410 <__libc_init_array+0x24>
 80053fc:	4d0b      	ldr	r5, [pc, #44]	@ (800542c <__libc_init_array+0x40>)
 80053fe:	4c0c      	ldr	r4, [pc, #48]	@ (8005430 <__libc_init_array+0x44>)
 8005400:	f000 f818 	bl	8005434 <_init>
 8005404:	1b64      	subs	r4, r4, r5
 8005406:	10a4      	asrs	r4, r4, #2
 8005408:	2600      	movs	r6, #0
 800540a:	42a6      	cmp	r6, r4
 800540c:	d105      	bne.n	800541a <__libc_init_array+0x2e>
 800540e:	bd70      	pop	{r4, r5, r6, pc}
 8005410:	f855 3b04 	ldr.w	r3, [r5], #4
 8005414:	4798      	blx	r3
 8005416:	3601      	adds	r6, #1
 8005418:	e7ee      	b.n	80053f8 <__libc_init_array+0xc>
 800541a:	f855 3b04 	ldr.w	r3, [r5], #4
 800541e:	4798      	blx	r3
 8005420:	3601      	adds	r6, #1
 8005422:	e7f2      	b.n	800540a <__libc_init_array+0x1e>
 8005424:	0800550c 	.word	0x0800550c
 8005428:	0800550c 	.word	0x0800550c
 800542c:	0800550c 	.word	0x0800550c
 8005430:	08005510 	.word	0x08005510

08005434 <_init>:
 8005434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005436:	bf00      	nop
 8005438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543a:	bc08      	pop	{r3}
 800543c:	469e      	mov	lr, r3
 800543e:	4770      	bx	lr

08005440 <_fini>:
 8005440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005442:	bf00      	nop
 8005444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005446:	bc08      	pop	{r3}
 8005448:	469e      	mov	lr, r3
 800544a:	4770      	bx	lr
>>>>>>> 4d00cb0a6b398f788e55efb99103b9375d57298f
